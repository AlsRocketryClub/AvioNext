
AvioNext.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c278  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  0801c548  0801c548  0002c548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cdf8  0801cdf8  0002cdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ce00  0801ce00  0002ce00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ce04  0801ce04  0002ce04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  0801ce08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000281c  240002c8  0801d0d0  000302c8  2**3
                  ALLOC
  8 ._user_heap_stack 00000c04  24002ae4  0801d0d0  00032ae4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000302f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00036022  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000642c  00000000  00000000  0006635b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ba0  00000000  00000000  0006c788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021d1  00000000  00000000  0006f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e930  00000000  00000000  000714f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003b50a  00000000  00000000  000afe29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017efad  00000000  00000000  000eb333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000d390  00000000  00000000  0026a2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00277670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c530 	.word	0x0801c530

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0801c530 	.word	0x0801c530

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a8 	b.w	8000aa0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	460d      	mov	r5, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	460f      	mov	r7, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4694      	mov	ip, r2
 80007ec:	d965      	bls.n	80008ba <__udivmoddi4+0xe2>
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	b143      	cbz	r3, 8000806 <__udivmoddi4+0x2e>
 80007f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007f8:	f1c3 0220 	rsb	r2, r3, #32
 80007fc:	409f      	lsls	r7, r3
 80007fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000802:	4317      	orrs	r7, r2
 8000804:	409c      	lsls	r4, r3
 8000806:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800080a:	fa1f f58c 	uxth.w	r5, ip
 800080e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000812:	0c22      	lsrs	r2, r4, #16
 8000814:	fb0e 7711 	mls	r7, lr, r1, r7
 8000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800081c:	fb01 f005 	mul.w	r0, r1, r5
 8000820:	4290      	cmp	r0, r2
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x62>
 8000824:	eb1c 0202 	adds.w	r2, ip, r2
 8000828:	f101 37ff 	add.w	r7, r1, #4294967295
 800082c:	f080 811c 	bcs.w	8000a68 <__udivmoddi4+0x290>
 8000830:	4290      	cmp	r0, r2
 8000832:	f240 8119 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000836:	3902      	subs	r1, #2
 8000838:	4462      	add	r2, ip
 800083a:	1a12      	subs	r2, r2, r0
 800083c:	b2a4      	uxth	r4, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800084a:	fb00 f505 	mul.w	r5, r0, r5
 800084e:	42a5      	cmp	r5, r4
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x90>
 8000852:	eb1c 0404 	adds.w	r4, ip, r4
 8000856:	f100 32ff 	add.w	r2, r0, #4294967295
 800085a:	f080 8107 	bcs.w	8000a6c <__udivmoddi4+0x294>
 800085e:	42a5      	cmp	r5, r4
 8000860:	f240 8104 	bls.w	8000a6c <__udivmoddi4+0x294>
 8000864:	4464      	add	r4, ip
 8000866:	3802      	subs	r0, #2
 8000868:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	2100      	movs	r1, #0
 8000870:	b11e      	cbz	r6, 800087a <__udivmoddi4+0xa2>
 8000872:	40dc      	lsrs	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	e9c6 4300 	strd	r4, r3, [r6]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0xbc>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80ed 	beq.w	8000a62 <__udivmoddi4+0x28a>
 8000888:	2100      	movs	r1, #0
 800088a:	e9c6 0500 	strd	r0, r5, [r6]
 800088e:	4608      	mov	r0, r1
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	fab3 f183 	clz	r1, r3
 8000898:	2900      	cmp	r1, #0
 800089a:	d149      	bne.n	8000930 <__udivmoddi4+0x158>
 800089c:	42ab      	cmp	r3, r5
 800089e:	d302      	bcc.n	80008a6 <__udivmoddi4+0xce>
 80008a0:	4282      	cmp	r2, r0
 80008a2:	f200 80f8 	bhi.w	8000a96 <__udivmoddi4+0x2be>
 80008a6:	1a84      	subs	r4, r0, r2
 80008a8:	eb65 0203 	sbc.w	r2, r5, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	4617      	mov	r7, r2
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0e2      	beq.n	800087a <__udivmoddi4+0xa2>
 80008b4:	e9c6 4700 	strd	r4, r7, [r6]
 80008b8:	e7df      	b.n	800087a <__udivmoddi4+0xa2>
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xe6>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f382 	clz	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 8090 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f fe8c 	uxth.w	lr, ip
 80008d2:	2101      	movs	r1, #1
 80008d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008d8:	fb07 2015 	mls	r0, r7, r5, r2
 80008dc:	0c22      	lsrs	r2, r4, #16
 80008de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008e2:	fb0e f005 	mul.w	r0, lr, r5
 80008e6:	4290      	cmp	r0, r2
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ea:	eb1c 0202 	adds.w	r2, ip, r2
 80008ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4290      	cmp	r0, r2
 80008f6:	f200 80cb 	bhi.w	8000a90 <__udivmoddi4+0x2b8>
 80008fa:	4645      	mov	r5, r8
 80008fc:	1a12      	subs	r2, r2, r0
 80008fe:	b2a4      	uxth	r4, r4
 8000900:	fbb2 f0f7 	udiv	r0, r2, r7
 8000904:	fb07 2210 	mls	r2, r7, r0, r2
 8000908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090c:	fb0e fe00 	mul.w	lr, lr, r0
 8000910:	45a6      	cmp	lr, r4
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x14e>
 8000914:	eb1c 0404 	adds.w	r4, ip, r4
 8000918:	f100 32ff 	add.w	r2, r0, #4294967295
 800091c:	d202      	bcs.n	8000924 <__udivmoddi4+0x14c>
 800091e:	45a6      	cmp	lr, r4
 8000920:	f200 80bb 	bhi.w	8000a9a <__udivmoddi4+0x2c2>
 8000924:	4610      	mov	r0, r2
 8000926:	eba4 040e 	sub.w	r4, r4, lr
 800092a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800092e:	e79f      	b.n	8000870 <__udivmoddi4+0x98>
 8000930:	f1c1 0720 	rsb	r7, r1, #32
 8000934:	408b      	lsls	r3, r1
 8000936:	fa22 fc07 	lsr.w	ip, r2, r7
 800093a:	ea4c 0c03 	orr.w	ip, ip, r3
 800093e:	fa05 f401 	lsl.w	r4, r5, r1
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	40fd      	lsrs	r5, r7
 8000948:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800094c:	4323      	orrs	r3, r4
 800094e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	fb09 5518 	mls	r5, r9, r8, r5
 800095a:	0c1c      	lsrs	r4, r3, #16
 800095c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000960:	fb08 f50e 	mul.w	r5, r8, lr
 8000964:	42a5      	cmp	r5, r4
 8000966:	fa02 f201 	lsl.w	r2, r2, r1
 800096a:	fa00 f001 	lsl.w	r0, r0, r1
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f108 3aff 	add.w	sl, r8, #4294967295
 8000978:	f080 8088 	bcs.w	8000a8c <__udivmoddi4+0x2b4>
 800097c:	42a5      	cmp	r5, r4
 800097e:	f240 8085 	bls.w	8000a8c <__udivmoddi4+0x2b4>
 8000982:	f1a8 0802 	sub.w	r8, r8, #2
 8000986:	4464      	add	r4, ip
 8000988:	1b64      	subs	r4, r4, r5
 800098a:	b29d      	uxth	r5, r3
 800098c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000990:	fb09 4413 	mls	r4, r9, r3, r4
 8000994:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000998:	fb03 fe0e 	mul.w	lr, r3, lr
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009a8:	d26c      	bcs.n	8000a84 <__udivmoddi4+0x2ac>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	d96a      	bls.n	8000a84 <__udivmoddi4+0x2ac>
 80009ae:	3b02      	subs	r3, #2
 80009b0:	4464      	add	r4, ip
 80009b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009b6:	fba3 9502 	umull	r9, r5, r3, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	42ac      	cmp	r4, r5
 80009c0:	46c8      	mov	r8, r9
 80009c2:	46ae      	mov	lr, r5
 80009c4:	d356      	bcc.n	8000a74 <__udivmoddi4+0x29c>
 80009c6:	d053      	beq.n	8000a70 <__udivmoddi4+0x298>
 80009c8:	b156      	cbz	r6, 80009e0 <__udivmoddi4+0x208>
 80009ca:	ebb0 0208 	subs.w	r2, r0, r8
 80009ce:	eb64 040e 	sbc.w	r4, r4, lr
 80009d2:	fa04 f707 	lsl.w	r7, r4, r7
 80009d6:	40ca      	lsrs	r2, r1
 80009d8:	40cc      	lsrs	r4, r1
 80009da:	4317      	orrs	r7, r2
 80009dc:	e9c6 7400 	strd	r7, r4, [r6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	f1c3 0120 	rsb	r1, r3, #32
 80009ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f0:	fa20 f201 	lsr.w	r2, r0, r1
 80009f4:	fa25 f101 	lsr.w	r1, r5, r1
 80009f8:	409d      	lsls	r5, r3
 80009fa:	432a      	orrs	r2, r5
 80009fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1510 	mls	r5, r7, r0, r1
 8000a0c:	0c11      	lsrs	r1, r2, #16
 8000a0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a12:	fb00 f50e 	mul.w	r5, r0, lr
 8000a16:	428d      	cmp	r5, r1
 8000a18:	fa04 f403 	lsl.w	r4, r4, r3
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x258>
 8000a1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a26:	d22f      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a28:	428d      	cmp	r5, r1
 8000a2a:	d92d      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	4461      	add	r1, ip
 8000a30:	1b49      	subs	r1, r1, r5
 8000a32:	b292      	uxth	r2, r2
 8000a34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a38:	fb07 1115 	mls	r1, r7, r5, r1
 8000a3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a40:	fb05 f10e 	mul.w	r1, r5, lr
 8000a44:	4291      	cmp	r1, r2
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x282>
 8000a48:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a50:	d216      	bcs.n	8000a80 <__udivmoddi4+0x2a8>
 8000a52:	4291      	cmp	r1, r2
 8000a54:	d914      	bls.n	8000a80 <__udivmoddi4+0x2a8>
 8000a56:	3d02      	subs	r5, #2
 8000a58:	4462      	add	r2, ip
 8000a5a:	1a52      	subs	r2, r2, r1
 8000a5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a60:	e738      	b.n	80008d4 <__udivmoddi4+0xfc>
 8000a62:	4631      	mov	r1, r6
 8000a64:	4630      	mov	r0, r6
 8000a66:	e708      	b.n	800087a <__udivmoddi4+0xa2>
 8000a68:	4639      	mov	r1, r7
 8000a6a:	e6e6      	b.n	800083a <__udivmoddi4+0x62>
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	e6fb      	b.n	8000868 <__udivmoddi4+0x90>
 8000a70:	4548      	cmp	r0, r9
 8000a72:	d2a9      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a74:	ebb9 0802 	subs.w	r8, r9, r2
 8000a78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	e7a3      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a80:	4645      	mov	r5, r8
 8000a82:	e7ea      	b.n	8000a5a <__udivmoddi4+0x282>
 8000a84:	462b      	mov	r3, r5
 8000a86:	e794      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	e7d1      	b.n	8000a30 <__udivmoddi4+0x258>
 8000a8c:	46d0      	mov	r8, sl
 8000a8e:	e77b      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a90:	3d02      	subs	r5, #2
 8000a92:	4462      	add	r2, ip
 8000a94:	e732      	b.n	80008fc <__udivmoddi4+0x124>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e70a      	b.n	80008b0 <__udivmoddi4+0xd8>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	e742      	b.n	8000926 <__udivmoddi4+0x14e>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <HG2_Write_Register+0x48>)
 8000abc:	f007 fd16 	bl	80084ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ac0:	1df9      	adds	r1, r7, #7
 8000ac2:	2364      	movs	r3, #100	; 0x64
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	480a      	ldr	r0, [pc, #40]	; (8000af0 <HG2_Write_Register+0x4c>)
 8000ac8:	f00e faac 	bl	800f024 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000acc:	1db9      	adds	r1, r7, #6
 8000ace:	2364      	movs	r3, #100	; 0x64
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <HG2_Write_Register+0x4c>)
 8000ad4:	f00e faa6 	bl	800f024 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <HG2_Write_Register+0x48>)
 8000ae0:	f007 fd04 	bl	80084ec <HAL_GPIO_WritePin>

}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	58020c00 	.word	0x58020c00
 8000af0:	240006ac 	.word	0x240006ac

08000af4 <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LG2_Read_Register+0x50>)
 8000b10:	f007 fcec 	bl	80084ec <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b14:	1df9      	adds	r1, r7, #7
 8000b16:	2364      	movs	r3, #100	; 0x64
 8000b18:	2201      	movs	r2, #1
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <LG2_Read_Register+0x54>)
 8000b1c:	f00e fa82 	bl	800f024 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000b20:	f107 010f 	add.w	r1, r7, #15
 8000b24:	2364      	movs	r3, #100	; 0x64
 8000b26:	2201      	movs	r2, #1
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <LG2_Read_Register+0x54>)
 8000b2a:	f00e fc77 	bl	800f41c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <LG2_Read_Register+0x50>)
 8000b36:	f007 fcd9 	bl	80084ec <HAL_GPIO_WritePin>

	return reg_value;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58020c00 	.word	0x58020c00
 8000b48:	240006ac 	.word	0x240006ac

08000b4c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	460a      	mov	r2, r1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <LG2_Write_Register+0x48>)
 8000b64:	f007 fcc2 	bl	80084ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b68:	1df9      	adds	r1, r7, #7
 8000b6a:	2364      	movs	r3, #100	; 0x64
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	480a      	ldr	r0, [pc, #40]	; (8000b98 <LG2_Write_Register+0x4c>)
 8000b70:	f00e fa58 	bl	800f024 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b74:	1db9      	adds	r1, r7, #6
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <LG2_Write_Register+0x4c>)
 8000b7c:	f00e fa52 	bl	800f024 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b86:	4803      	ldr	r0, [pc, #12]	; (8000b94 <LG2_Write_Register+0x48>)
 8000b88:	f007 fcb0 	bl	80084ec <HAL_GPIO_WritePin>

}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58020c00 	.word	0x58020c00
 8000b98:	240006ac 	.word	0x240006ac
 8000b9c:	00000000 	.word	0x00000000

08000ba0 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 8000ba6:	2022      	movs	r0, #34	; 0x22
 8000ba8:	f7ff ffa4 	bl	8000af4 <LG2_Read_Register>
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 8000bb0:	2023      	movs	r0, #35	; 0x23
 8000bb2:	f7ff ff9f 	bl	8000af4 <LG2_Read_Register>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000bba:	79bb      	ldrb	r3, [r7, #6]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*(1*8.75)/1000;
 8000bc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bcc:	ee07 3a90 	vmov	s15, r3
 8000bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c00 <LG2_Get_Gyro_X+0x60>
 8000bdc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000be0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c08 <LG2_Get_Gyro_X+0x68>
 8000be4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000be8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bec:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	ee07 3a90 	vmov	s15, r3
}
 8000bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	00000000 	.word	0x00000000
 8000c04:	40218000 	.word	0x40218000
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	408f4000 	.word	0x408f4000

08000c10 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000c16:	2024      	movs	r0, #36	; 0x24
 8000c18:	f7ff ff6c 	bl	8000af4 <LG2_Read_Register>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000c20:	2025      	movs	r0, #37	; 0x25
 8000c22:	f7ff ff67 	bl	8000af4 <LG2_Read_Register>
 8000c26:	4603      	mov	r3, r0
 8000c28:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c2a:	79bb      	ldrb	r3, [r7, #6]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*(1*8.75)/1000;
 8000c38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c3c:	ee07 3a90 	vmov	s15, r3
 8000c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c48:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c70 <LG2_Get_Gyro_Y+0x60>
 8000c4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c50:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c78 <LG2_Get_Gyro_Y+0x68>
 8000c54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c5c:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	ee07 3a90 	vmov	s15, r3
}
 8000c66:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	00000000 	.word	0x00000000
 8000c74:	40218000 	.word	0x40218000
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	408f4000 	.word	0x408f4000

08000c80 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 8000c86:	2026      	movs	r0, #38	; 0x26
 8000c88:	f7ff ff34 	bl	8000af4 <LG2_Read_Register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000c90:	2027      	movs	r0, #39	; 0x27
 8000c92:	f7ff ff2f 	bl	8000af4 <LG2_Read_Register>
 8000c96:	4603      	mov	r3, r0
 8000c98:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*(1*8.75)/1000;
 8000ca8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cac:	ee07 3a90 	vmov	s15, r3
 8000cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cb8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000ce0 <LG2_Get_Gyro_Z+0x60>
 8000cbc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cc0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000ce8 <LG2_Get_Gyro_Z+0x68>
 8000cc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ccc:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	ee07 3a90 	vmov	s15, r3
}
 8000cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	00000000 	.word	0x00000000
 8000ce4:	40218000 	.word	0x40218000
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	408f4000 	.word	0x408f4000

08000cf0 <LG2_Get_Acc_X>:

float LG2_Get_Acc_X(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x28);
 8000cf6:	2028      	movs	r0, #40	; 0x28
 8000cf8:	f7ff fefc 	bl	8000af4 <LG2_Read_Register>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x29);
 8000d00:	2029      	movs	r0, #41	; 0x29
 8000d02:	f7ff fef7 	bl	8000af4 <LG2_Read_Register>
 8000d06:	4603      	mov	r3, r0
 8000d08:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc *  (0.061*9.81) /1000)- 0.134732 - 0.104937;
 8000d18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d1c:	ee07 3a90 	vmov	s15, r3
 8000d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d28:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000d60 <LG2_Get_Acc_X+0x70>
 8000d2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d30:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000d68 <LG2_Get_Acc_X+0x78>
 8000d34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d38:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000d70 <LG2_Get_Acc_X+0x80>
 8000d3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d40:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000d78 <LG2_Get_Acc_X+0x88>
 8000d44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d4c:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	ee07 3a90 	vmov	s15, r3
}
 8000d56:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	ba732df5 	.word	0xba732df5
 8000d64:	3fe3262c 	.word	0x3fe3262c
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	408f4000 	.word	0x408f4000
 8000d70:	eedcc20d 	.word	0xeedcc20d
 8000d74:	3fc13ee5 	.word	0x3fc13ee5
 8000d78:	b723ee1c 	.word	0xb723ee1c
 8000d7c:	3fbadd26 	.word	0x3fbadd26

08000d80 <LG2_Get_Acc_Y>:

float LG2_Get_Acc_Y(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x2A);
 8000d86:	202a      	movs	r0, #42	; 0x2a
 8000d88:	f7ff feb4 	bl	8000af4 <LG2_Read_Register>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x2B);
 8000d90:	202b      	movs	r0, #43	; 0x2b
 8000d92:	f7ff feaf 	bl	8000af4 <LG2_Read_Register>
 8000d96:	4603      	mov	r3, r0
 8000d98:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000d9a:	79bb      	ldrb	r3, [r7, #6]
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc *  (0.061*9.81) /1000) + 0.384580;
 8000da8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000de8 <LG2_Get_Acc_Y+0x68>
 8000dbc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000dc0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000df0 <LG2_Get_Acc_Y+0x70>
 8000dc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dc8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000df8 <LG2_Get_Acc_Y+0x78>
 8000dcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000dd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dd4:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	ee07 3a90 	vmov	s15, r3
}
 8000dde:	eeb0 0a67 	vmov.f32	s0, s15
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	ba732df5 	.word	0xba732df5
 8000dec:	3fe3262c 	.word	0x3fe3262c
 8000df0:	00000000 	.word	0x00000000
 8000df4:	408f4000 	.word	0x408f4000
 8000df8:	6eac8605 	.word	0x6eac8605
 8000dfc:	3fd89cf5 	.word	0x3fd89cf5

08000e00 <LG2_Get_Acc_Z>:

float LG2_Get_Acc_Z(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x2C);
 8000e06:	202c      	movs	r0, #44	; 0x2c
 8000e08:	f7ff fe74 	bl	8000af4 <LG2_Read_Register>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x2D);
 8000e10:	202d      	movs	r0, #45	; 0x2d
 8000e12:	f7ff fe6f 	bl	8000af4 <LG2_Read_Register>
 8000e16:	4603      	mov	r3, r0
 8000e18:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc *  (0.061*9.81) /1000) + 0.005841;
 8000e28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e2c:	ee07 3a90 	vmov	s15, r3
 8000e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e38:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000e68 <LG2_Get_Acc_Z+0x68>
 8000e3c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e40:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000e70 <LG2_Get_Acc_Z+0x70>
 8000e44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e48:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000e78 <LG2_Get_Acc_Z+0x78>
 8000e4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e54:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	ee07 3a90 	vmov	s15, r3
}
 8000e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	ba732df5 	.word	0xba732df5
 8000e6c:	3fe3262c 	.word	0x3fe3262c
 8000e70:	00000000 	.word	0x00000000
 8000e74:	408f4000 	.word	0x408f4000
 8000e78:	7f9d6f11 	.word	0x7f9d6f11
 8000e7c:	3f77ecbb 	.word	0x3f77ecbb

08000e80 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000e8c:	ed97 7a00 	vldr	s14, [r7]
 8000e90:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000f00 <setServo+0x80>
 8000e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e98:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000f04 <setServo+0x84>
 8000e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f08 <setServo+0x88>
 8000ea4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eac:	ee17 3a90 	vmov	r3, s15
 8000eb0:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d81a      	bhi.n	8000ef0 <setServo+0x70>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <setServo+0x40>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000ed1 	.word	0x08000ed1
 8000ec4:	08000ed9 	.word	0x08000ed9
 8000ec8:	08000ee1 	.word	0x08000ee1
 8000ecc:	08000ee9 	.word	0x08000ee9
		case 1:
			TIM4->CCR4 = timerVal;
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <setServo+0x8c>)
 8000ed2:	89fb      	ldrh	r3, [r7, #14]
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000ed6:	e00c      	b.n	8000ef2 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <setServo+0x8c>)
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000ede:	e008      	b.n	8000ef2 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <setServo+0x8c>)
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000ee6:	e004      	b.n	8000ef2 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000ee8:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <setServo+0x8c>)
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000eee:	e000      	b.n	8000ef2 <setServo+0x72>

		default:
			break;
 8000ef0:	bf00      	nop
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	43340000 	.word	0x43340000
 8000f04:	457a0000 	.word	0x457a0000
 8000f08:	453b8000 	.word	0x453b8000
 8000f0c:	40000800 	.word	0x40000800

08000f10 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoRA_Read_Register+0x48>)
 8000f22:	f007 fae3 	bl	80084ec <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f26:	1df9      	adds	r1, r7, #7
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <LoRA_Read_Register+0x4c>)
 8000f2e:	f00e f879 	bl	800f024 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000f32:	f107 010f 	add.w	r1, r7, #15
 8000f36:	2364      	movs	r3, #100	; 0x64
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <LoRA_Read_Register+0x4c>)
 8000f3c:	f00e fa6e 	bl	800f41c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f46:	4804      	ldr	r0, [pc, #16]	; (8000f58 <LoRA_Read_Register+0x48>)
 8000f48:	f007 fad0 	bl	80084ec <HAL_GPIO_WritePin>

	return reg_value;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	58020000 	.word	0x58020000
 8000f5c:	24000734 	.word	0x24000734

08000f60 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <LoRA_Write_Register+0x54>)
 8000f82:	f007 fab3 	bl	80084ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f86:	1df9      	adds	r1, r7, #7
 8000f88:	2364      	movs	r3, #100	; 0x64
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <LoRA_Write_Register+0x58>)
 8000f8e:	f00e f849 	bl	800f024 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f92:	1db9      	adds	r1, r7, #6
 8000f94:	2364      	movs	r3, #100	; 0x64
 8000f96:	2201      	movs	r2, #1
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <LoRA_Write_Register+0x58>)
 8000f9a:	f00e f843 	bl	800f024 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <LoRA_Write_Register+0x54>)
 8000fa6:	f007 faa1 	bl	80084ec <HAL_GPIO_WritePin>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	58020000 	.word	0x58020000
 8000fb8:	24000734 	.word	0x24000734

08000fbc <LoRA_sleep>:


void LoRA_sleep(void){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff ffcc 	bl	8000f60 <LoRA_Write_Register>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	17c8      	asrs	r0, r1, #31
 8000fd8:	460a      	mov	r2, r1
 8000fda:	4603      	mov	r3, r0
 8000fdc:	1355      	asrs	r5, r2, #13
 8000fde:	04d4      	lsls	r4, r2, #19
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <LoRA_set_frequency+0x78>)
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	4629      	mov	r1, r5
 8000fea:	f7ff fba5 	bl	8000738 <__aeabi_uldivmod>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000ff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	0c02      	lsrs	r2, r0, #16
 8001004:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001008:	0c0b      	lsrs	r3, r1, #16
 800100a:	b2d3      	uxtb	r3, r2
 800100c:	4619      	mov	r1, r3
 800100e:	2006      	movs	r0, #6
 8001010:	f7ff ffa6 	bl	8000f60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8001014:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	0a02      	lsrs	r2, r0, #8
 8001022:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001026:	0a0b      	lsrs	r3, r1, #8
 8001028:	b2d3      	uxtb	r3, r2
 800102a:	4619      	mov	r1, r3
 800102c:	2007      	movs	r0, #7
 800102e:	f7ff ff97 	bl	8000f60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001032:	7a3b      	ldrb	r3, [r7, #8]
 8001034:	4619      	mov	r1, r3
 8001036:	2008      	movs	r0, #8
 8001038:	f7ff ff92 	bl	8000f60 <LoRA_Write_Register>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bdb0      	pop	{r4, r5, r7, pc}
 8001044:	01e84800 	.word	0x01e84800

08001048 <LoRA_setOCP>:

void LoRA_idle(){
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8001052:	231b      	movs	r3, #27
 8001054:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b78      	cmp	r3, #120	; 0x78
 800105a:	d809      	bhi.n	8001070 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	3b2d      	subs	r3, #45	; 0x2d
 8001060:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <LoRA_setOCP+0x60>)
 8001062:	fb82 1203 	smull	r1, r2, r2, r3
 8001066:	1052      	asrs	r2, r2, #1
 8001068:	17db      	asrs	r3, r3, #31
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	e00b      	b.n	8001088 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2bf0      	cmp	r3, #240	; 0xf0
 8001074:	d808      	bhi.n	8001088 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	331e      	adds	r3, #30
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoRA_setOCP+0x60>)
 800107c:	fb82 1203 	smull	r1, r2, r2, r3
 8001080:	1092      	asrs	r2, r2, #2
 8001082:	17db      	asrs	r3, r3, #31
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f043 0320 	orr.w	r3, r3, #32
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	200b      	movs	r0, #11
 800109a:	f7ff ff61 	bl	8000f60 <LoRA_Write_Register>
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	66666667 	.word	0x66666667

080010ac <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b11      	cmp	r3, #17
 80010b8:	dd0f      	ble.n	80010da <LoRA_setTxPower+0x2e>
      if (level > 20) {
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b14      	cmp	r3, #20
 80010be:	dd01      	ble.n	80010c4 <LoRA_setTxPower+0x18>
        level = 20;
 80010c0:	2314      	movs	r3, #20
 80010c2:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b03      	subs	r3, #3
 80010c8:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 80010ca:	2187      	movs	r1, #135	; 0x87
 80010cc:	204d      	movs	r0, #77	; 0x4d
 80010ce:	f7ff ff47 	bl	8000f60 <LoRA_Write_Register>
      LoRA_setOCP(140);
 80010d2:	208c      	movs	r0, #140	; 0x8c
 80010d4:	f7ff ffb8 	bl	8001048 <LoRA_setOCP>
 80010d8:	e00b      	b.n	80010f2 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	dc01      	bgt.n	80010e4 <LoRA_setTxPower+0x38>
        level = 2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 80010e4:	2184      	movs	r1, #132	; 0x84
 80010e6:	204d      	movs	r0, #77	; 0x4d
 80010e8:	f7ff ff3a 	bl	8000f60 <LoRA_Write_Register>
      LoRA_setOCP(100);
 80010ec:	2064      	movs	r0, #100	; 0x64
 80010ee:	f7ff ffab 	bl	8001048 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	3b02      	subs	r3, #2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001100:	b25b      	sxtb	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4619      	mov	r1, r3
 8001106:	2009      	movs	r0, #9
 8001108:	f7ff ff2a 	bl	8000f60 <LoRA_Write_Register>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <LoRA_begin>:

void LoRA_explicit_header_mode(){
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
}

void LoRA_begin(long frequency){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	2101      	movs	r1, #1
 8001120:	4818      	ldr	r0, [pc, #96]	; (8001184 <LoRA_begin+0x70>)
 8001122:	f007 f9e3 	bl	80084ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112c:	4816      	ldr	r0, [pc, #88]	; (8001188 <LoRA_begin+0x74>)
 800112e:	f007 f9dd 	bl	80084ec <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8001132:	2042      	movs	r0, #66	; 0x42
 8001134:	f7ff feec 	bl	8000f10 <LoRA_Read_Register>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]


	LoRA_sleep();
 800113c:	f7ff ff3e 	bl	8000fbc <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8001140:	4812      	ldr	r0, [pc, #72]	; (800118c <LoRA_begin+0x78>)
 8001142:	f7ff ff43 	bl	8000fcc <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8001146:	2100      	movs	r1, #0
 8001148:	200f      	movs	r0, #15
 800114a:	f7ff ff09 	bl	8000f60 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 800114e:	2100      	movs	r1, #0
 8001150:	200e      	movs	r0, #14
 8001152:	f7ff ff05 	bl	8000f60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8001156:	200c      	movs	r0, #12
 8001158:	f7ff feda 	bl	8000f10 <LoRA_Read_Register>
 800115c:	4603      	mov	r3, r0
 800115e:	f043 0303 	orr.w	r3, r3, #3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	200c      	movs	r0, #12
 8001168:	f7ff fefa 	bl	8000f60 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 800116c:	2104      	movs	r1, #4
 800116e:	2026      	movs	r0, #38	; 0x26
 8001170:	f7ff fef6 	bl	8000f60 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001174:	2011      	movs	r0, #17
 8001176:	f7ff ff99 	bl	80010ac <LoRA_setTxPower>

}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	58020c00 	.word	0x58020c00
 8001188:	58020000 	.word	0x58020000
 800118c:	33bca100 	.word	0x33bca100

08001190 <multiplyQuat>:

double x[4];
double y[4];
double z[4];

void multiplyQuat(double r[4], double s[4], double*  result) {
 8001190:	b480      	push	{r7}
 8001192:	b08f      	sub	sp, #60	; 0x3c
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  double temp[4];
  temp[0] = r[0] * s[0] - r[1] * s[1] - r[2] * s[2] - r[3] * s[3];
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	ed93 6b00 	vldr	d6, [r3]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	ed93 7b00 	vldr	d7, [r3]
 80011a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3308      	adds	r3, #8
 80011b0:	ed93 5b00 	vldr	d5, [r3]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3308      	adds	r3, #8
 80011b8:	ed93 7b00 	vldr	d7, [r3]
 80011bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011c0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3310      	adds	r3, #16
 80011c8:	ed93 5b00 	vldr	d5, [r3]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3310      	adds	r3, #16
 80011d0:	ed93 7b00 	vldr	d7, [r3]
 80011d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011d8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3318      	adds	r3, #24
 80011e0:	ed93 5b00 	vldr	d5, [r3]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3318      	adds	r3, #24
 80011e8:	ed93 7b00 	vldr	d7, [r3]
 80011ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80011f4:	ed87 7b04 	vstr	d7, [r7, #16]
  temp[1] = r[0] * s[1] + r[1] * s[0] - r[2] * s[3] + r[3] * s[2];
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	ed93 6b00 	vldr	d6, [r3]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3308      	adds	r3, #8
 8001202:	ed93 7b00 	vldr	d7, [r3]
 8001206:	ee26 6b07 	vmul.f64	d6, d6, d7
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3308      	adds	r3, #8
 800120e:	ed93 5b00 	vldr	d5, [r3]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	ed93 7b00 	vldr	d7, [r3]
 8001218:	ee25 7b07 	vmul.f64	d7, d5, d7
 800121c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3310      	adds	r3, #16
 8001224:	ed93 5b00 	vldr	d5, [r3]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3318      	adds	r3, #24
 800122c:	ed93 7b00 	vldr	d7, [r3]
 8001230:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001234:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3318      	adds	r3, #24
 800123c:	ed93 5b00 	vldr	d5, [r3]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3310      	adds	r3, #16
 8001244:	ed93 7b00 	vldr	d7, [r3]
 8001248:	ee25 7b07 	vmul.f64	d7, d5, d7
 800124c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001250:	ed87 7b06 	vstr	d7, [r7, #24]
  temp[2] = r[0] * s[2] + r[1] * s[3] + r[2] * s[0] - r[3] * s[1];
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	ed93 6b00 	vldr	d6, [r3]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	3310      	adds	r3, #16
 800125e:	ed93 7b00 	vldr	d7, [r3]
 8001262:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3308      	adds	r3, #8
 800126a:	ed93 5b00 	vldr	d5, [r3]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3318      	adds	r3, #24
 8001272:	ed93 7b00 	vldr	d7, [r3]
 8001276:	ee25 7b07 	vmul.f64	d7, d5, d7
 800127a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3310      	adds	r3, #16
 8001282:	ed93 5b00 	vldr	d5, [r3]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	ed93 7b00 	vldr	d7, [r3]
 800128c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001290:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3318      	adds	r3, #24
 8001298:	ed93 5b00 	vldr	d5, [r3]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3308      	adds	r3, #8
 80012a0:	ed93 7b00 	vldr	d7, [r3]
 80012a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012ac:	ed87 7b08 	vstr	d7, [r7, #32]
  temp[3] = r[0] * s[3] - r[1] * s[2] + r[2] * s[1] + r[3] * s[0];
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	ed93 6b00 	vldr	d6, [r3]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	3318      	adds	r3, #24
 80012ba:	ed93 7b00 	vldr	d7, [r3]
 80012be:	ee26 6b07 	vmul.f64	d6, d6, d7
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3308      	adds	r3, #8
 80012c6:	ed93 5b00 	vldr	d5, [r3]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	3310      	adds	r3, #16
 80012ce:	ed93 7b00 	vldr	d7, [r3]
 80012d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3310      	adds	r3, #16
 80012de:	ed93 5b00 	vldr	d5, [r3]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3308      	adds	r3, #8
 80012e6:	ed93 7b00 	vldr	d7, [r3]
 80012ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3318      	adds	r3, #24
 80012f6:	ed93 5b00 	vldr	d5, [r3]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	ed93 7b00 	vldr	d7, [r3]
 8001300:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001304:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001308:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

  for(int i = 0; i < 4; i++){
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
 8001310:	e00f      	b.n	8001332 <multiplyQuat+0x1a2>
	  result[i] = temp[i];
 8001312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	18d1      	adds	r1, r2, r3
 800131a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	3338      	adds	r3, #56	; 0x38
 8001320:	443b      	add	r3, r7
 8001322:	3b28      	subs	r3, #40	; 0x28
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i = 0; i < 4; i++){
 800132c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132e:	3301      	adds	r3, #1
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
 8001332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001334:	2b03      	cmp	r3, #3
 8001336:	ddec      	ble.n	8001312 <multiplyQuat+0x182>
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	373c      	adds	r7, #60	; 0x3c
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <dotProduct>:

double dotProduct(double a[4], double b[4]){
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	return (a[1] * b[1] + a[2] * b[2] + a[3] * b[3]);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3308      	adds	r3, #8
 8001354:	ed93 6b00 	vldr	d6, [r3]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	3308      	adds	r3, #8
 800135c:	ed93 7b00 	vldr	d7, [r3]
 8001360:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3310      	adds	r3, #16
 8001368:	ed93 5b00 	vldr	d5, [r3]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	3310      	adds	r3, #16
 8001370:	ed93 7b00 	vldr	d7, [r3]
 8001374:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001378:	ee36 6b07 	vadd.f64	d6, d6, d7
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3318      	adds	r3, #24
 8001380:	ed93 5b00 	vldr	d5, [r3]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	3318      	adds	r3, #24
 8001388:	ed93 7b00 	vldr	d7, [r3]
 800138c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001390:	ee36 7b07 	vadd.f64	d7, d6, d7
}
 8001394:	eeb0 0b47 	vmov.f64	d0, d7
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <magnitude>:

double magnitude(double vector[4]){
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	return sqrt(vector[0]*vector[0]+vector[1]*vector[1]+vector[2]*vector[2]+vector[3]*vector[3]);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	ed93 6b00 	vldr	d6, [r3]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed93 7b00 	vldr	d7, [r3]
 80013b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3308      	adds	r3, #8
 80013be:	ed93 5b00 	vldr	d5, [r3]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3308      	adds	r3, #8
 80013c6:	ed93 7b00 	vldr	d7, [r3]
 80013ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3310      	adds	r3, #16
 80013d6:	ed93 5b00 	vldr	d5, [r3]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3310      	adds	r3, #16
 80013de:	ed93 7b00 	vldr	d7, [r3]
 80013e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3318      	adds	r3, #24
 80013ee:	ed93 5b00 	vldr	d5, [r3]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3318      	adds	r3, #24
 80013f6:	ed93 7b00 	vldr	d7, [r3]
 80013fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001402:	eeb0 0b47 	vmov.f64	d0, d7
 8001406:	f01a f907 	bl	801b618 <sqrt>
 800140a:	eeb0 7b40 	vmov.f64	d7, d0
}
 800140e:	eeb0 0b47 	vmov.f64	d0, d7
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800141c:	ed2d 8b02 	vpush	{d8}
 8001420:	f6ad 2d9c 	subw	sp, sp, #2716	; 0xa9c
 8001424:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */


	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001426:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800142a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800142e:	4a52      	ldr	r2, [pc, #328]	; (8001578 <main+0x160>)
 8001430:	461c      	mov	r4, r3
 8001432:	4615      	mov	r5, r2
 8001434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800143c:	c403      	stmia	r4!, {r0, r1}
 800143e:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001440:	f003 f926 	bl	8004690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001444:	f001 f8d2 	bl	80025ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001448:	f001 f94c 	bl	80026e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f001 fef8 	bl	8003240 <MX_GPIO_Init>
  MX_DMA_Init();
 8001450:	f001 fe96 	bl	8003180 <MX_DMA_Init>
  MX_SPI3_Init();
 8001454:	f001 fbcc 	bl	8002bf0 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001458:	f001 fa5c 	bl	8002914 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 800145c:	f001 fe44 	bl	80030e8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001460:	f001 f972 	bl	8002748 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001464:	f001 fcd6 	bl	8002e14 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001468:	f001 f9e6 	bl	8002838 <MX_ADC3_Init>
  MX_SPI2_Init();
 800146c:	f001 fb6a 	bl	8002b44 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001470:	f001 fab4 	bl	80029dc <MX_I2C2_Init>
  MX_TIM2_Init();
 8001474:	f001 fc12 	bl	8002c9c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001478:	f001 fd48 	bl	8002f0c <MX_TIM5_Init>
  MX_TIM3_Init();
 800147c:	f001 fc66 	bl	8002d4c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001480:	f015 f8b6 	bl	80165f0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001484:	f001 fb08 	bl	8002a98 <MX_SPI1_Init>
  MX_UART4_Init();
 8001488:	f001 fde2 	bl	8003050 <MX_UART4_Init>
  MX_FATFS_Init();
 800148c:	f012 fe44 	bl	8014118 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001490:	f001 fae4 	bl	8002a5c <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001494:	f001 fd94 	bl	8002fc0 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001498:	f001 fdb6 	bl	8003008 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 800149c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a0:	f003 f988 	bl	80047b4 <HAL_Delay>
	const int MAX = 50;
 80014a4:	2332      	movs	r3, #50	; 0x32
 80014a6:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
	const double SPEED = 2.0/2000;
 80014aa:	a331      	add	r3, pc, #196	; (adr r3, 8001570 <main+0x158>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 80014b4:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 80014c4:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <main+0x164>)
 80014ce:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014de:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 80014e2:	e9c1 2300 	strd	r2, r3, [r1]




	HAL_Delay(1000);
 80014e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ea:	f003 f963 	bl	80047b4 <HAL_Delay>
	HG2_Write_Register(0x1B, 0b11011000);
 80014ee:	21d8      	movs	r1, #216	; 0xd8
 80014f0:	201b      	movs	r0, #27
 80014f2:	f7ff fad7 	bl	8000aa4 <HG2_Write_Register>
	HG2_Write_Register(0x1C, 0b10111111);
 80014f6:	21bf      	movs	r1, #191	; 0xbf
 80014f8:	201c      	movs	r0, #28
 80014fa:	f7ff fad3 	bl	8000aa4 <HG2_Write_Register>
	HAL_Delay(200);
 80014fe:	20c8      	movs	r0, #200	; 0xc8
 8001500:	f003 f958 	bl	80047b4 <HAL_Delay>


	LG2_Write_Register(0x13, 0b00001110); //disables I2C - CTRL4_C
 8001504:	210e      	movs	r1, #14
 8001506:	2013      	movs	r0, #19
 8001508:	f7ff fb20 	bl	8000b4c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b01100000); //Gyroscope setup - CTRL2_G
 800150c:	2160      	movs	r1, #96	; 0x60
 800150e:	2011      	movs	r0, #17
 8001510:	f7ff fb1c 	bl	8000b4c <LG2_Write_Register>
	LG2_Write_Register(0x10, 0b01100000); //Accelerometer setup - CTRL1_XL
 8001514:	2160      	movs	r1, #96	; 0x60
 8001516:	2010      	movs	r0, #16
 8001518:	f7ff fb18 	bl	8000b4c <LG2_Write_Register>


	float rotZ = 0;
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	f607 221c 	addw	r2, r7, #2588	; 0xa1c
 8001524:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

	double calOmegaX = 0;
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8001538:	e9c1 2300 	strd	r2, r3, [r1]
	double calOmegaY = 0;
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 8001548:	e9c1 2300 	strd	r2, r3, [r1]
	double calOmegaZ = 0;
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8001558:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_Delay(2000);
 800155c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001560:	f003 f928 	bl	80047b4 <HAL_Delay>
	int GyroCalibLoop = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
	while(GyroCalibLoop < 500){
 800156a:	e041      	b.n	80015f0 <main+0x1d8>
 800156c:	f3af 8000 	nop.w
 8001570:	d2f1a9fc 	.word	0xd2f1a9fc
 8001574:	3f50624d 	.word	0x3f50624d
 8001578:	0801c5cc 	.word	0x0801c5cc
 800157c:	3ff00000 	.word	0x3ff00000
		if(LG2_Read_Register(0x1E) | (1 << 1)){
 8001580:	201e      	movs	r0, #30
 8001582:	f7ff fab7 	bl	8000af4 <LG2_Read_Register>
		calOmegaX += LG2_Get_Gyro_X();
 8001586:	f7ff fb0b 	bl	8000ba0 <LG2_Get_Gyro_X>
 800158a:	eef0 7a40 	vmov.f32	s15, s0
 800158e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001592:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001596:	ed93 6b00 	vldr	d6, [r3]
 800159a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800159e:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80015a2:	ed83 7b00 	vstr	d7, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80015a6:	f7ff fb33 	bl	8000c10 <LG2_Get_Gyro_Y>
 80015aa:	eef0 7a40 	vmov.f32	s15, s0
 80015ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015b2:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80015b6:	ed93 6b00 	vldr	d6, [r3]
 80015ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015be:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80015c2:	ed83 7b00 	vstr	d7, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80015c6:	f7ff fb5b 	bl	8000c80 <LG2_Get_Gyro_Z>
 80015ca:	eef0 7a40 	vmov.f32	s15, s0
 80015ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015d2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 80015d6:	ed93 6b00 	vldr	d6, [r3]
 80015da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015de:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 80015e2:	ed83 7b00 	vstr	d7, [r3]
		GyroCalibLoop++;
 80015e6:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 80015ea:	3301      	adds	r3, #1
 80015ec:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
	while(GyroCalibLoop < 500){
 80015f0:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 80015f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015f8:	dbc2      	blt.n	8001580 <main+0x168>

		}

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80015fa:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80015fe:	ed93 6b00 	vldr	d6, [r3]
 8001602:	ed9f 5bc9 	vldr	d5, [pc, #804]	; 8001928 <main+0x510>
 8001606:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800160a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800160e:	ed83 7b00 	vstr	d7, [r3]
	calOmegaY /= 500;
 8001612:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8001616:	ed93 6b00 	vldr	d6, [r3]
 800161a:	ed9f 5bc3 	vldr	d5, [pc, #780]	; 8001928 <main+0x510>
 800161e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001622:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8001626:	ed83 7b00 	vstr	d7, [r3]
	calOmegaZ /= 500;
 800162a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800162e:	ed93 6b00 	vldr	d6, [r3]
 8001632:	ed9f 5bbd 	vldr	d5, [pc, #756]	; 8001928 <main+0x510>
 8001636:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800163a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800163e:	ed83 7b00 	vstr	d7, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	2101      	movs	r1, #1
 8001646:	48ba      	ldr	r0, [pc, #744]	; (8001930 <main+0x518>)
 8001648:	f006 ff50 	bl	80084ec <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800164c:	20c8      	movs	r0, #200	; 0xc8
 800164e:	f003 f8b1 	bl	80047b4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2101      	movs	r1, #1
 8001656:	48b6      	ldr	r0, [pc, #728]	; (8001930 <main+0x518>)
 8001658:	f006 ff48 	bl	80084ec <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800165c:	20c8      	movs	r0, #200	; 0xc8
 800165e:	f003 f8a9 	bl	80047b4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001662:	2201      	movs	r2, #1
 8001664:	2101      	movs	r1, #1
 8001666:	48b2      	ldr	r0, [pc, #712]	; (8001930 <main+0x518>)
 8001668:	f006 ff40 	bl	80084ec <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800166c:	20c8      	movs	r0, #200	; 0xc8
 800166e:	f003 f8a1 	bl	80047b4 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001672:	2201      	movs	r2, #1
 8001674:	2104      	movs	r1, #4
 8001676:	48af      	ldr	r0, [pc, #700]	; (8001934 <main+0x51c>)
 8001678:	f006 ff38 	bl	80084ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800167c:	2201      	movs	r2, #1
 800167e:	2108      	movs	r1, #8
 8001680:	48ac      	ldr	r0, [pc, #688]	; (8001934 <main+0x51c>)
 8001682:	f006 ff33 	bl	80084ec <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001686:	2100      	movs	r1, #0
 8001688:	48ab      	ldr	r0, [pc, #684]	; (8001938 <main+0x520>)
 800168a:	f00e fa6d 	bl	800fb68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800168e:	2104      	movs	r1, #4
 8001690:	48a9      	ldr	r0, [pc, #676]	; (8001938 <main+0x520>)
 8001692:	f00e fa69 	bl	800fb68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001696:	2108      	movs	r1, #8
 8001698:	48a7      	ldr	r0, [pc, #668]	; (8001938 <main+0x520>)
 800169a:	f00e fa65 	bl	800fb68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800169e:	210c      	movs	r1, #12
 80016a0:	48a5      	ldr	r0, [pc, #660]	; (8001938 <main+0x520>)
 80016a2:	f00e fa61 	bl	800fb68 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80016a6:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 800193c <main+0x524>
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff fbe8 	bl	8000e80 <setServo>
    setServo(2, 180);
 80016b0:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8001940 <main+0x528>
 80016b4:	2002      	movs	r0, #2
 80016b6:	f7ff fbe3 	bl	8000e80 <setServo>
    setServo(3, 0);
 80016ba:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8001944 <main+0x52c>
 80016be:	2003      	movs	r0, #3
 80016c0:	f7ff fbde 	bl	8000e80 <setServo>
    setServo(4, 45);
 80016c4:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8001948 <main+0x530>
 80016c8:	2004      	movs	r0, #4
 80016ca:	f7ff fbd9 	bl	8000e80 <setServo>

    LoRA_begin(868000000);
 80016ce:	489f      	ldr	r0, [pc, #636]	; (800194c <main+0x534>)
 80016d0:	f7ff fd20 	bl	8001114 <LoRA_begin>


	int connected = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
	long last_packet = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
	int ARMED = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[50] = "DISARMED";
 80016e6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80016ea:	f5a3 745a 	sub.w	r4, r3, #872	; 0x368
 80016ee:	4a98      	ldr	r2, [pc, #608]	; (8001950 <main+0x538>)
 80016f0:	4623      	mov	r3, r4
 80016f2:	6810      	ldr	r0, [r2, #0]
 80016f4:	6851      	ldr	r1, [r2, #4]
 80016f6:	c303      	stmia	r3!, {r0, r1}
 80016f8:	7a12      	ldrb	r2, [r2, #8]
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	f104 0309 	add.w	r3, r4, #9
 8001700:	2229      	movs	r2, #41	; 0x29
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f016 fbea 	bl	8017ede <memset>
  char command[50];
  char acknowledge[50];
  char recieved_packet[50];
  char response_packet[50];
  char sendMessage[50];
  int last = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
  int packetId;
  char communication_state[50] = "RECIEVING";
 8001710:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001714:	f5a3 6494 	sub.w	r4, r3, #1184	; 0x4a0
 8001718:	4a8e      	ldr	r2, [pc, #568]	; (8001954 <main+0x53c>)
 800171a:	4623      	mov	r3, r4
 800171c:	6810      	ldr	r0, [r2, #0]
 800171e:	6851      	ldr	r1, [r2, #4]
 8001720:	c303      	stmia	r3!, {r0, r1}
 8001722:	8912      	ldrh	r2, [r2, #8]
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	f104 030a 	add.w	r3, r4, #10
 800172a:	2228      	movs	r2, #40	; 0x28
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f016 fbd5 	bl	8017ede <memset>
  int isReceived = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04

  int cube[12][2][3] = {
 800173a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800173e:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8001742:	4a85      	ldr	r2, [pc, #532]	; (8001958 <main+0x540>)
 8001744:	4618      	mov	r0, r3
 8001746:	4611      	mov	r1, r2
 8001748:	f44f 7390 	mov.w	r3, #288	; 0x120
 800174c:	461a      	mov	r2, r3
 800174e:	f016 fc46 	bl	8017fde <memcpy>
  {{2,-1,-4},{-2,-1,-4}},
  {{-2,-1,4},{2,-1,4}},
  {{-2,-1,4},{-2,-1,-4}}
};

 x[0] = 0;
 8001752:	4982      	ldr	r1, [pc, #520]	; (800195c <main+0x544>)
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9c1 2300 	strd	r2, r3, [r1]
 x[1] = 1;
 8001760:	497e      	ldr	r1, [pc, #504]	; (800195c <main+0x544>)
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	4b7e      	ldr	r3, [pc, #504]	; (8001960 <main+0x548>)
 8001768:	e9c1 2302 	strd	r2, r3, [r1, #8]
 x[2] = 0;
 800176c:	497b      	ldr	r1, [pc, #492]	; (800195c <main+0x544>)
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	e9c1 2304 	strd	r2, r3, [r1, #16]
 x[3] = 0;
 800177a:	4978      	ldr	r1, [pc, #480]	; (800195c <main+0x544>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9c1 2306 	strd	r2, r3, [r1, #24]

 y[0] = 0;
 8001788:	4976      	ldr	r1, [pc, #472]	; (8001964 <main+0x54c>)
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	e9c1 2300 	strd	r2, r3, [r1]
 y[1] = 0;
 8001796:	4973      	ldr	r1, [pc, #460]	; (8001964 <main+0x54c>)
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 y[2] = 1;
 80017a4:	496f      	ldr	r1, [pc, #444]	; (8001964 <main+0x54c>)
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b6d      	ldr	r3, [pc, #436]	; (8001960 <main+0x548>)
 80017ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
 y[3] = 0;
 80017b0:	496c      	ldr	r1, [pc, #432]	; (8001964 <main+0x54c>)
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9c1 2306 	strd	r2, r3, [r1, #24]

 z[0] = 0;
 80017be:	496a      	ldr	r1, [pc, #424]	; (8001968 <main+0x550>)
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9c1 2300 	strd	r2, r3, [r1]
 z[1] = 0;
 80017cc:	4966      	ldr	r1, [pc, #408]	; (8001968 <main+0x550>)
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 z[2] = 0;
 80017da:	4963      	ldr	r1, [pc, #396]	; (8001968 <main+0x550>)
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 z[3] = 1;
 80017e8:	495f      	ldr	r1, [pc, #380]	; (8001968 <main+0x550>)
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	4b5c      	ldr	r3, [pc, #368]	; (8001960 <main+0x548>)
 80017f0:	e9c1 2306 	strd	r2, r3, [r1, #24]

  double rotQuaternion[4];

  HAL_TIM_Base_Start(&htim13);
 80017f4:	485d      	ldr	r0, [pc, #372]	; (800196c <main+0x554>)
 80017f6:	f00e f8e1 	bl	800f9bc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim14);
 80017fa:	485d      	ldr	r0, [pc, #372]	; (8001970 <main+0x558>)
 80017fc:	f00e f8de 	bl	800f9bc <HAL_TIM_Base_Start>

  TIM13->CNT = 0;
 8001800:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <main+0x55c>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  double elapsedTime = 0;
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8001812:	e9c1 2300 	strd	r2, r3, [r1]
  int counter = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 3a78 	str.w	r3, [r7, #2680]	; 0xa78

  double VelocityExt[3];
  double PosExt[3];
  double zeroAcc[4];
  int AccCalibLoop = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c
	char data_gyro[500];
  double gyroZ = LG2_Get_Acc_Z();
 8001822:	f7ff faed 	bl	8000e00 <LG2_Get_Acc_Z>
 8001826:	eef0 7a40 	vmov.f32	s15, s0
 800182a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800182e:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8001832:	ed83 7b00 	vstr	d7, [r3]
  sprintf( data_gyro, "Hello %f\n", gyroZ);
 8001836:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800183a:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	494d      	ldr	r1, [pc, #308]	; (8001978 <main+0x560>)
 8001844:	f016 fae8 	bl	8017e18 <siprintf>
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001848:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fdaf 	bl	80003b0 <strlen>
 8001852:	4602      	mov	r2, r0
 8001854:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f014 ff88 	bl	8016770 <CDC_Transmit_HS>
  HAL_Delay(2000);
 8001860:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001864:	f002 ffa6 	bl	80047b4 <HAL_Delay>
  double maxZ = LG2_Get_Acc_Z();
 8001868:	f7ff faca 	bl	8000e00 <LG2_Get_Acc_Z>
 800186c:	eef0 7a40 	vmov.f32	s15, s0
 8001870:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001874:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8001878:	ed83 7b00 	vstr	d7, [r3]
  double minZ = maxZ;
 800187c:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8001888:	e9c1 2300 	strd	r2, r3, [r1]

  double maxY = LG2_Get_Acc_Y();
 800188c:	f7ff fa78 	bl	8000d80 <LG2_Get_Acc_Y>
 8001890:	eef0 7a40 	vmov.f32	s15, s0
 8001894:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001898:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 800189c:	ed83 7b00 	vstr	d7, [r3]
  double minY = maxY;
 80018a0:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 80018ac:	e9c1 2300 	strd	r2, r3, [r1]

  double maxX = LG2_Get_Acc_X();
 80018b0:	f7ff fa1e 	bl	8000cf0 <LG2_Get_Acc_X>
 80018b4:	eef0 7a40 	vmov.f32	s15, s0
 80018b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018bc:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 80018c0:	ed83 7b00 	vstr	d7, [r3]
  double minX = maxX;
 80018c4:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 80018d0:	e9c1 2300 	strd	r2, r3, [r1]


  zeroAcc[0] = 0;
 80018d4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80018d8:	f5a3 61c6 	sub.w	r1, r3, #1584	; 0x630
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9c1 2300 	strd	r2, r3, [r1]
  zeroAcc[1] = 0;
 80018e8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80018ec:	f5a3 61c6 	sub.w	r1, r3, #1584	; 0x630
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  zeroAcc[2] = 0;
 80018fc:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001900:	f5a3 61c6 	sub.w	r1, r3, #1584	; 0x630
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9c1 2304 	strd	r2, r3, [r1, #16]
  zeroAcc[3] = 0;
 8001910:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001914:	f5a3 61c6 	sub.w	r1, r3, #1584	; 0x630
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	e9c1 2306 	strd	r2, r3, [r1, #24]
  while(AccCalibLoop < 50){
 8001924:	e073      	b.n	8001a0e <main+0x5f6>
 8001926:	bf00      	nop
 8001928:	00000000 	.word	0x00000000
 800192c:	407f4000 	.word	0x407f4000
 8001930:	58020c00 	.word	0x58020c00
 8001934:	58021800 	.word	0x58021800
 8001938:	24000854 	.word	0x24000854
 800193c:	42b40000 	.word	0x42b40000
 8001940:	43340000 	.word	0x43340000
 8001944:	00000000 	.word	0x00000000
 8001948:	42340000 	.word	0x42340000
 800194c:	33bca100 	.word	0x33bca100
 8001950:	0801c548 	.word	0x0801c548
 8001954:	0801c5e8 	.word	0x0801c5e8
 8001958:	0801c5f4 	.word	0x0801c5f4
 800195c:	24000d08 	.word	0x24000d08
 8001960:	3ff00000 	.word	0x3ff00000
 8001964:	24000d28 	.word	0x24000d28
 8001968:	24000d48 	.word	0x24000d48
 800196c:	240008ec 	.word	0x240008ec
 8001970:	24000938 	.word	0x24000938
 8001974:	40001c00 	.word	0x40001c00
 8001978:	0801c55c 	.word	0x0801c55c
	  if(LG2_Read_Register(0x1E) & 1){
 800197c:	201e      	movs	r0, #30
 800197e:	f7ff f8b9 	bl	8000af4 <LG2_Read_Register>
 8001982:	4603      	mov	r3, r0
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d040      	beq.n	8001a0e <main+0x5f6>
		  zeroAcc[1] += LG2_Get_Acc_X();
 800198c:	f7ff f9b0 	bl	8000cf0 <LG2_Get_Acc_X>
 8001990:	eef0 7a40 	vmov.f32	s15, s0
 8001994:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001998:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 800199c:	ed93 6b02 	vldr	d6, [r3, #8]
 80019a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019a8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80019ac:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 80019b0:	ed83 7b02 	vstr	d7, [r3, #8]
		  zeroAcc[2] += LG2_Get_Acc_Y();
 80019b4:	f7ff f9e4 	bl	8000d80 <LG2_Get_Acc_Y>
 80019b8:	eef0 7a40 	vmov.f32	s15, s0
 80019bc:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80019c0:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 80019c4:	ed93 6b04 	vldr	d6, [r3, #16]
 80019c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019d0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80019d4:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 80019d8:	ed83 7b04 	vstr	d7, [r3, #16]
		  zeroAcc[3] += LG2_Get_Acc_Z();
 80019dc:	f7ff fa10 	bl	8000e00 <LG2_Get_Acc_Z>
 80019e0:	eef0 7a40 	vmov.f32	s15, s0
 80019e4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80019e8:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 80019ec:	ed93 6b06 	vldr	d6, [r3, #24]
 80019f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019f8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80019fc:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001a00:	ed83 7b06 	vstr	d7, [r3, #24]
		  AccCalibLoop++;
 8001a04:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c
  while(AccCalibLoop < 50){
 8001a0e:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8001a12:	2b31      	cmp	r3, #49	; 0x31
 8001a14:	ddb2      	ble.n	800197c <main+0x564>
	  }
  }
  zeroAcc[1] = zeroAcc[1] / 50;
 8001a16:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001a1a:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001a1e:	ed93 6b02 	vldr	d6, [r3, #8]
 8001a22:	ed9f 5be7 	vldr	d5, [pc, #924]	; 8001dc0 <main+0x9a8>
 8001a26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a2a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001a2e:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001a32:	ed83 7b02 	vstr	d7, [r3, #8]
  zeroAcc[2] = zeroAcc[2] / 50;
 8001a36:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001a3a:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001a3e:	ed93 6b04 	vldr	d6, [r3, #16]
 8001a42:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8001dc0 <main+0x9a8>
 8001a46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a4a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001a4e:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001a52:	ed83 7b04 	vstr	d7, [r3, #16]
  zeroAcc[3] = zeroAcc[3] / 50;
 8001a56:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001a5a:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001a5e:	ed93 6b06 	vldr	d6, [r3, #24]
 8001a62:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 8001dc0 <main+0x9a8>
 8001a66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a6a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001a6e:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001a72:	ed83 7b06 	vstr	d7, [r3, #24]


  double rotVector[4];
  rotVector[0] = 0;
 8001a76:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001a7a:	f6a3 0148 	subw	r1, r3, #2120	; 0x848
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9c1 2300 	strd	r2, r3, [r1]
  rotVector[3] = 0;
 8001a8a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001a8e:	f6a3 0148 	subw	r1, r3, #2120	; 0x848
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9c1 2306 	strd	r2, r3, [r1, #24]

  rotVector[1] = zeroAcc[2];
 8001a9e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001aa2:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001aa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001aaa:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8001aae:	f6a1 0148 	subw	r1, r1, #2120	; 0x848
 8001ab2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rotVector[2] = -zeroAcc[1];
 8001ab6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001aba:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001abe:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ac2:	eeb1 7b47 	vneg.f64	d7, d7
 8001ac6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001aca:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 8001ace:	ed83 7b04 	vstr	d7, [r3, #16]
  double rotVectMag =  magnitude(rotVector);
 8001ad2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fc63 	bl	80013a2 <magnitude>
 8001adc:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8001ae0:	ed83 0b00 	vstr	d0, [r3]
  rotVector[1] = rotVector[1] / rotVectMag;
 8001ae4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001ae8:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 8001aec:	ed93 5b02 	vldr	d5, [r3, #8]
 8001af0:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8001af4:	ed93 6b00 	vldr	d6, [r3]
 8001af8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001afc:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001b00:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 8001b04:	ed83 7b02 	vstr	d7, [r3, #8]
  rotVector[2] = rotVector[2] / rotVectMag;
 8001b08:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001b0c:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 8001b10:	ed93 5b04 	vldr	d5, [r3, #16]
 8001b14:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8001b18:	ed93 6b00 	vldr	d6, [r3]
 8001b1c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b20:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001b24:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 8001b28:	ed83 7b04 	vstr	d7, [r3, #16]

  double zeroAccMag = magnitude(zeroAcc);
 8001b2c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fc36 	bl	80013a2 <magnitude>
 8001b36:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8001b3a:	ed83 0b00 	vstr	d0, [r3]
  zeroAcc[1] = zeroAcc[1] / zeroAccMag;
 8001b3e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001b42:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001b46:	ed93 5b02 	vldr	d5, [r3, #8]
 8001b4a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8001b4e:	ed93 6b00 	vldr	d6, [r3]
 8001b52:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b56:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001b5a:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001b5e:	ed83 7b02 	vstr	d7, [r3, #8]
  zeroAcc[2] = zeroAcc[2] / zeroAccMag;
 8001b62:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001b66:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001b6a:	ed93 5b04 	vldr	d5, [r3, #16]
 8001b6e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8001b72:	ed93 6b00 	vldr	d6, [r3]
 8001b76:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b7a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001b7e:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001b82:	ed83 7b04 	vstr	d7, [r3, #16]
  zeroAcc[3] = zeroAcc[3] / zeroAccMag;
 8001b86:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001b8a:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001b8e:	ed93 5b06 	vldr	d5, [r3, #24]
 8001b92:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8001b96:	ed93 6b00 	vldr	d6, [r3]
 8001b9a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b9e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001ba2:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001ba6:	ed83 7b06 	vstr	d7, [r3, #24]

  double rotAngle =acos(dotProduct(zeroAcc, z));
 8001baa:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8001bae:	4986      	ldr	r1, [pc, #536]	; (8001dc8 <main+0x9b0>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fbc8 	bl	8001346 <dotProduct>
 8001bb6:	eeb0 7b40 	vmov.f64	d7, d0
 8001bba:	eeb0 0b47 	vmov.f64	d0, d7
 8001bbe:	f019 fcff 	bl	801b5c0 <acos>
 8001bc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8001bc6:	ed83 0b00 	vstr	d0, [r3]

  rotQuaternion[0] = cos(rotAngle/2);
 8001bca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8001bce:	ed93 7b00 	vldr	d7, [r3]
 8001bd2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001bd6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001bda:	eeb0 0b46 	vmov.f64	d0, d6
 8001bde:	f019 fd3b 	bl	801b658 <cos>
 8001be2:	eeb0 7b40 	vmov.f64	d7, d0
 8001be6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001bea:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001bee:	ed83 7b00 	vstr	d7, [r3]
  rotQuaternion[1] = rotVector[1] * sin(rotAngle/2);
 8001bf2:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001bf6:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 8001bfa:	ed93 8b02 	vldr	d8, [r3, #8]
 8001bfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8001c02:	ed93 7b00 	vldr	d7, [r3]
 8001c06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c0a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001c0e:	eeb0 0b46 	vmov.f64	d0, d6
 8001c12:	f019 fd79 	bl	801b708 <sin>
 8001c16:	eeb0 7b40 	vmov.f64	d7, d0
 8001c1a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c1e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001c22:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001c26:	ed83 7b02 	vstr	d7, [r3, #8]
  rotQuaternion[2] = rotVector[2] * sin(rotAngle/2);
 8001c2a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001c2e:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 8001c32:	ed93 8b04 	vldr	d8, [r3, #16]
 8001c36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8001c3a:	ed93 7b00 	vldr	d7, [r3]
 8001c3e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c42:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001c46:	eeb0 0b46 	vmov.f64	d0, d6
 8001c4a:	f019 fd5d 	bl	801b708 <sin>
 8001c4e:	eeb0 7b40 	vmov.f64	d7, d0
 8001c52:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c56:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001c5a:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001c5e:	ed83 7b04 	vstr	d7, [r3, #16]
  rotQuaternion[3] = rotVector[3] * sin(rotAngle/2);
 8001c62:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001c66:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 8001c6a:	ed93 8b06 	vldr	d8, [r3, #24]
 8001c6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8001c72:	ed93 7b00 	vldr	d7, [r3]
 8001c76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001c7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001c7e:	eeb0 0b46 	vmov.f64	d0, d6
 8001c82:	f019 fd41 	bl	801b708 <sin>
 8001c86:	eeb0 7b40 	vmov.f64	d7, d0
 8001c8a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c8e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001c92:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001c96:	ed83 7b06 	vstr	d7, [r3, #24]
  sprintf( data_gyro, "rot quat: %f, %f, %f, %f\n",rotQuaternion[0], rotQuaternion[1], rotQuaternion[2], rotQuaternion[3]);
 8001c9a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001c9e:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001ca2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001ca6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001caa:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001cae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cb2:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8001cb6:	f5a1 61bc 	sub.w	r1, r1, #1504	; 0x5e0
 8001cba:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001cbe:	f507 6428 	add.w	r4, r7, #2688	; 0xa80
 8001cc2:	f5a4 64bc 	sub.w	r4, r4, #1504	; 0x5e0
 8001cc6:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 8001cca:	f507 7617 	add.w	r6, r7, #604	; 0x25c
 8001cce:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cda:	4642      	mov	r2, r8
 8001cdc:	464b      	mov	r3, r9
 8001cde:	493b      	ldr	r1, [pc, #236]	; (8001dcc <main+0x9b4>)
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	f016 f899 	bl	8017e18 <siprintf>
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001ce6:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fb60 	bl	80003b0 <strlen>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f014 fd39 	bl	8016770 <CDC_Transmit_HS>
  HAL_Delay(2000);
 8001cfe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d02:	f002 fd57 	bl	80047b4 <HAL_Delay>
  sprintf( data_gyro, "Zero Acc: %f, %f, %f, %f\n",rotAngle, zeroAcc[1], zeroAcc[2], zeroAcc[3]);
 8001d06:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001d0a:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001d0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d12:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8001d16:	f5a1 61c6 	sub.w	r1, r1, #1584	; 0x630
 8001d1a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001d1e:	f507 6428 	add.w	r4, r7, #2688	; 0xa80
 8001d22:	f5a4 64c6 	sub.w	r4, r4, #1584	; 0x630
 8001d26:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 8001d2a:	f507 7617 	add.w	r6, r7, #604	; 0x25c
 8001d2e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d36:	e9cd 2300 	strd	r2, r3, [sp]
 8001d3a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	4923      	ldr	r1, [pc, #140]	; (8001dd0 <main+0x9b8>)
 8001d44:	4630      	mov	r0, r6
 8001d46:	f016 f867 	bl	8017e18 <siprintf>
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001d4a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fb2e 	bl	80003b0 <strlen>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f014 fd07 	bl	8016770 <CDC_Transmit_HS>

  multiplyQuat(rotQuaternion, x, &x);
 8001d62:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <main+0x9bc>)
 8001d68:	491a      	ldr	r1, [pc, #104]	; (8001dd4 <main+0x9bc>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fa10 	bl	8001190 <multiplyQuat>
  multiplyQuat(rotQuaternion, y, &y);
 8001d70:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <main+0x9c0>)
 8001d76:	4918      	ldr	r1, [pc, #96]	; (8001dd8 <main+0x9c0>)
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fa09 	bl	8001190 <multiplyQuat>
  multiplyQuat(rotQuaternion, z, &z);
 8001d7e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001d82:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <main+0x9b0>)
 8001d84:	4910      	ldr	r1, [pc, #64]	; (8001dc8 <main+0x9b0>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fa02 	bl	8001190 <multiplyQuat>
  rotQuaternion[1] = - rotQuaternion[1];
 8001d8c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001d90:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001d94:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d98:	eeb1 7b47 	vneg.f64	d7, d7
 8001d9c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001da0:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001da4:	ed83 7b02 	vstr	d7, [r3, #8]
  rotQuaternion[2] = - rotQuaternion[2];
 8001da8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001dac:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001db0:	ed93 7b04 	vldr	d7, [r3, #16]
 8001db4:	eeb1 7b47 	vneg.f64	d7, d7
 8001db8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001dbc:	e00e      	b.n	8001ddc <main+0x9c4>
 8001dbe:	bf00      	nop
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40490000 	.word	0x40490000
 8001dc8:	24000d48 	.word	0x24000d48
 8001dcc:	0801c568 	.word	0x0801c568
 8001dd0:	0801c584 	.word	0x0801c584
 8001dd4:	24000d08 	.word	0x24000d08
 8001dd8:	24000d28 	.word	0x24000d28
 8001ddc:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001de0:	ed83 7b04 	vstr	d7, [r3, #16]
  rotQuaternion[3] = - rotQuaternion[3];
 8001de4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001de8:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001dec:	ed93 7b06 	vldr	d7, [r3, #24]
 8001df0:	eeb1 7b47 	vneg.f64	d7, d7
 8001df4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001df8:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001dfc:	ed83 7b06 	vstr	d7, [r3, #24]
  multiplyQuat(x, rotQuaternion, &x);
 8001e00:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001e04:	4a57      	ldr	r2, [pc, #348]	; (8001f64 <main+0xb4c>)
 8001e06:	4619      	mov	r1, r3
 8001e08:	4856      	ldr	r0, [pc, #344]	; (8001f64 <main+0xb4c>)
 8001e0a:	f7ff f9c1 	bl	8001190 <multiplyQuat>
  multiplyQuat(y, rotQuaternion, &y);
 8001e0e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001e12:	4a55      	ldr	r2, [pc, #340]	; (8001f68 <main+0xb50>)
 8001e14:	4619      	mov	r1, r3
 8001e16:	4854      	ldr	r0, [pc, #336]	; (8001f68 <main+0xb50>)
 8001e18:	f7ff f9ba 	bl	8001190 <multiplyQuat>
  multiplyQuat(z, rotQuaternion, &z);
 8001e1c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001e20:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <main+0xb54>)
 8001e22:	4619      	mov	r1, r3
 8001e24:	4851      	ldr	r0, [pc, #324]	; (8001f6c <main+0xb54>)
 8001e26:	f7ff f9b3 	bl	8001190 <multiplyQuat>

  //cube
  strcpy(data_gyro, "");
 8001e2a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001e2e:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
  for(int i=0; i < 12; i++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 8001e3c:	e07c      	b.n	8001f38 <main+0xb20>
  {
    for(int j=0; j<2; j++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
 8001e44:	e06f      	b.n	8001f26 <main+0xb0e>
    {
      for(int k=0; k<3; k++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
 8001e4c:	e062      	b.n	8001f14 <main+0xafc>
      {
        sprintf(data_gyro, "%s%d", data_gyro, cube[i][j][k]*(x[k+1]+y[k+1]+z[k+1]));
 8001e4e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001e52:	f5a3 60b8 	sub.w	r0, r3, #1472	; 0x5c0
 8001e56:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 8001e5a:	f8d7 1a54 	ldr.w	r1, [r7, #2644]	; 0xa54
 8001e5e:	461a      	mov	r2, r3
 8001e60:	0052      	lsls	r2, r2, #1
 8001e62:	441a      	add	r2, r3
 8001e64:	460b      	mov	r3, r1
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	440b      	add	r3, r1
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	441a      	add	r2, r3
 8001e6e:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 8001e72:	4413      	add	r3, r2
 8001e74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e80:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 8001e84:	3301      	adds	r3, #1
 8001e86:	4a37      	ldr	r2, [pc, #220]	; (8001f64 <main+0xb4c>)
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	ed93 5b00 	vldr	d5, [r3]
 8001e90:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 8001e94:	3301      	adds	r3, #1
 8001e96:	4a34      	ldr	r2, [pc, #208]	; (8001f68 <main+0xb50>)
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	ed93 7b00 	vldr	d7, [r3]
 8001ea0:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001ea4:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4a30      	ldr	r2, [pc, #192]	; (8001f6c <main+0xb54>)
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	ed93 7b00 	vldr	d7, [r3]
 8001eb4:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001eb8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001ebc:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001ec0:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001ec4:	ed8d 7b00 	vstr	d7, [sp]
 8001ec8:	4929      	ldr	r1, [pc, #164]	; (8001f70 <main+0xb58>)
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f015 ffa4 	bl	8017e18 <siprintf>

        //ugly :(
        if(k<2)
 8001ed0:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	dc08      	bgt.n	8001eea <main+0xad2>
        {
          sprintf(data_gyro, "%s,", data_gyro);
 8001ed8:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001edc:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001ee0:	4924      	ldr	r1, [pc, #144]	; (8001f74 <main+0xb5c>)
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f015 ff98 	bl	8017e18 <siprintf>
 8001ee8:	e00f      	b.n	8001f0a <main+0xaf2>
        }
        else if(i*j<22)
 8001eea:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	; 0xa54
 8001eee:	f8d7 2a50 	ldr.w	r2, [r7, #2640]	; 0xa50
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	2b15      	cmp	r3, #21
 8001ef8:	dc07      	bgt.n	8001f0a <main+0xaf2>
        {
          sprintf(data_gyro, "%s;", data_gyro);
 8001efa:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001efe:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001f02:	491d      	ldr	r1, [pc, #116]	; (8001f78 <main+0xb60>)
 8001f04:	4618      	mov	r0, r3
 8001f06:	f015 ff87 	bl	8017e18 <siprintf>
      for(int k=0; k<3; k++)
 8001f0a:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
 8001f14:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	dd98      	ble.n	8001e4e <main+0xa36>
    for(int j=0; j<2; j++)
 8001f1c:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 8001f20:	3301      	adds	r3, #1
 8001f22:	f8c7 3a50 	str.w	r3, [r7, #2640]	; 0xa50
 8001f26:	f8d7 3a50 	ldr.w	r3, [r7, #2640]	; 0xa50
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	dd8b      	ble.n	8001e46 <main+0xa2e>
  for(int i=0; i < 12; i++)
 8001f2e:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	; 0xa54
 8001f32:	3301      	adds	r3, #1
 8001f34:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
 8001f38:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	; 0xa54
 8001f3c:	2b0b      	cmp	r3, #11
 8001f3e:	f77f af7e 	ble.w	8001e3e <main+0xa26>
        }
      }
    }
  }
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001f42:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fa32 	bl	80003b0 <strlen>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f014 fc0b 	bl	8016770 <CDC_Transmit_HS>
  sprintf( data_gyro, "zero z: %f, %f, %f\n",z[1], z[2], z[3]);
  CDC_Transmit_HS(data_gyro, strlen(data_gyro));
  */


  for(int i = 0; i < 3; i++){
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
 8001f60:	e02d      	b.n	8001fbe <main+0xba6>
 8001f62:	bf00      	nop
 8001f64:	24000d08 	.word	0x24000d08
 8001f68:	24000d28 	.word	0x24000d28
 8001f6c:	24000d48 	.word	0x24000d48
 8001f70:	0801c5a0 	.word	0x0801c5a0
 8001f74:	0801c5a8 	.word	0x0801c5a8
 8001f78:	0801c5ac 	.word	0x0801c5ac
	  VelocityExt[i] = 0;
 8001f7c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001f80:	f5a3 62bf 	sub.w	r2, r3, #1528	; 0x5f8
 8001f84:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	; 0xa48
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	18d1      	adds	r1, r2, r3
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9c1 2300 	strd	r2, r3, [r1]
	  PosExt[i] = 0;
 8001f98:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001f9c:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 8001fa0:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	; 0xa48
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	18d1      	adds	r1, r2, r3
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i = 0; i < 3; i++){
 8001fb4:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	; 0xa48
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
 8001fbe:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	; 0xa48
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	ddda      	ble.n	8001f7c <main+0xb64>
  }

  uint32_t timeStop = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
  int accelerating = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
  while(1){
	  float Gx;
	  float Gy;
	  float Gz;

	  if(LG2_Read_Register(0x1E) & (1 << 1)){ //checks if new data from gyroscope
 8001fd2:	201e      	movs	r0, #30
 8001fd4:	f7fe fd8e 	bl	8000af4 <LG2_Read_Register>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8177 	beq.w	80022d2 <main+0xeba>
		  elapsedTime = (TIM13->CNT /1000);
 8001fe4:	4bf0      	ldr	r3, [pc, #960]	; (80023a8 <main+0xf90>)
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	4af0      	ldr	r2, [pc, #960]	; (80023ac <main+0xf94>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ff8:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001ffc:	ed83 7b00 	vstr	d7, [r3]
		  TIM13->CNT = 0;
 8002000:	4be9      	ldr	r3, [pc, #932]	; (80023a8 <main+0xf90>)
 8002002:	2200      	movs	r2, #0
 8002004:	625a      	str	r2, [r3, #36]	; 0x24
		  Gx = LG2_Get_Gyro_X();
 8002006:	f7fe fdcb 	bl	8000ba0 <LG2_Get_Gyro_X>
 800200a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800200e:	ed83 0a00 	vstr	s0, [r3]
		  Gy= LG2_Get_Gyro_Y();
 8002012:	f7fe fdfd 	bl	8000c10 <LG2_Get_Gyro_Y>
 8002016:	f607 1398 	addw	r3, r7, #2456	; 0x998
 800201a:	ed83 0a00 	vstr	s0, [r3]
		  Gz = LG2_Get_Gyro_Z();
 800201e:	f7fe fe2f 	bl	8000c80 <LG2_Get_Gyro_Z>
 8002022:	f607 1394 	addw	r3, r7, #2452	; 0x994
 8002026:	ed83 0a00 	vstr	s0, [r3]

		  double Wx = (Gx - calOmegaX) * (2 * PI / 360000) * elapsedTime;
 800202a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002036:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800203a:	ed93 7b00 	vldr	d7, [r3]
 800203e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002042:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8002398 <main+0xf80>
 8002046:	ee27 7b06 	vmul.f64	d7, d7, d6
 800204a:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 800204e:	ed93 6b00 	vldr	d6, [r3]
 8002052:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002056:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800205a:	ed83 7b00 	vstr	d7, [r3]
		  double Wy = (Gy- calOmegaY) * (2 * PI / 360000) * elapsedTime;
 800205e:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800206a:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800206e:	ed93 7b00 	vldr	d7, [r3]
 8002072:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002076:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 8002398 <main+0xf80>
 800207a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800207e:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8002082:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 8002086:	ed92 6b00 	vldr	d6, [r2]
 800208a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800208e:	ed83 7b00 	vstr	d7, [r3]
		  double Wz = (Gz - calOmegaZ) * (2 * PI / 360000) * elapsedTime;
 8002092:	f607 1394 	addw	r3, r7, #2452	; 0x994
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800209e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 80020a2:	ed93 7b00 	vldr	d7, [r3]
 80020a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020aa:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8002398 <main+0xf80>
 80020ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020b2:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80020b6:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 80020ba:	ed92 6b00 	vldr	d6, [r2]
 80020be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80020c2:	ed03 7b02 	vstr	d7, [r3, #-8]

		  double W = sqrt(Wx*Wx + Wy*Wy + Wz*Wz);
 80020c6:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80020ca:	ed93 7b00 	vldr	d7, [r3]
 80020ce:	ee27 6b07 	vmul.f64	d6, d7, d7
 80020d2:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80020d6:	ed93 7b00 	vldr	d7, [r3]
 80020da:	ee27 7b07 	vmul.f64	d7, d7, d7
 80020de:	ee36 6b07 	vadd.f64	d6, d6, d7
 80020e2:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80020e6:	ed13 7b02 	vldr	d7, [r3, #-8]
 80020ea:	ee27 7b07 	vmul.f64	d7, d7, d7
 80020ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020f2:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80020f6:	461c      	mov	r4, r3
 80020f8:	eeb0 0b47 	vmov.f64	d0, d7
 80020fc:	f019 fa8c 	bl	801b618 <sqrt>
 8002100:	ed84 0b00 	vstr	d0, [r4]

		  Wx /= W;
 8002104:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8002108:	f607 1288 	addw	r2, r7, #2440	; 0x988
 800210c:	ed92 5b00 	vldr	d5, [r2]
 8002110:	ed93 6b00 	vldr	d6, [r3]
 8002114:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002118:	f607 1388 	addw	r3, r7, #2440	; 0x988
 800211c:	ed83 7b00 	vstr	d7, [r3]
		  Wy /= W;
 8002120:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8002124:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8002128:	4611      	mov	r1, r2
 800212a:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 800212e:	ed91 5b00 	vldr	d5, [r1]
 8002132:	ed92 6b00 	vldr	d6, [r2]
 8002136:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800213a:	ed83 7b00 	vstr	d7, [r3]
		  Wz /= W;
 800213e:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8002142:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8002146:	4611      	mov	r1, r2
 8002148:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 800214c:	ed11 5b02 	vldr	d5, [r1, #-8]
 8002150:	ed92 6b00 	vldr	d6, [r2]
 8002154:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002158:	ed03 7b02 	vstr	d7, [r3, #-8]

		  rotQuaternion[0] = cos(W/2);
 800215c:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8002160:	ed93 7b00 	vldr	d7, [r3]
 8002164:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002168:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800216c:	eeb0 0b46 	vmov.f64	d0, d6
 8002170:	f019 fa72 	bl	801b658 <cos>
 8002174:	eeb0 7b40 	vmov.f64	d7, d0
 8002178:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800217c:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8002180:	ed83 7b00 	vstr	d7, [r3]
		  rotQuaternion[1] = Wx * sin(W/2);
 8002184:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8002188:	ed93 7b00 	vldr	d7, [r3]
 800218c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002190:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002194:	eeb0 0b46 	vmov.f64	d0, d6
 8002198:	f019 fab6 	bl	801b708 <sin>
 800219c:	eeb0 6b40 	vmov.f64	d6, d0
 80021a0:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80021a4:	ed93 7b00 	vldr	d7, [r3]
 80021a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021ac:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80021b0:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 80021b4:	ed83 7b02 	vstr	d7, [r3, #8]
		  rotQuaternion[2] = Wy * sin(W/2);
 80021b8:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80021bc:	ed93 7b00 	vldr	d7, [r3]
 80021c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80021c4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80021c8:	eeb0 0b46 	vmov.f64	d0, d6
 80021cc:	f019 fa9c 	bl	801b708 <sin>
 80021d0:	eeb0 6b40 	vmov.f64	d6, d0
 80021d4:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80021d8:	ed93 7b00 	vldr	d7, [r3]
 80021dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021e0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80021e4:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 80021e8:	ed83 7b04 	vstr	d7, [r3, #16]
		  rotQuaternion[3] = Wz * sin(W/2);
 80021ec:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80021f0:	ed93 7b00 	vldr	d7, [r3]
 80021f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80021f8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80021fc:	eeb0 0b46 	vmov.f64	d0, d6
 8002200:	f019 fa82 	bl	801b708 <sin>
 8002204:	eeb0 6b40 	vmov.f64	d6, d0
 8002208:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800220c:	ed13 7b02 	vldr	d7, [r3, #-8]
 8002210:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002214:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002218:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800221c:	ed83 7b06 	vstr	d7, [r3, #24]

		  multiplyQuat(rotQuaternion, x, &x);
 8002220:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8002224:	4a62      	ldr	r2, [pc, #392]	; (80023b0 <main+0xf98>)
 8002226:	4962      	ldr	r1, [pc, #392]	; (80023b0 <main+0xf98>)
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe ffb1 	bl	8001190 <multiplyQuat>
		  multiplyQuat(rotQuaternion, y, &y);
 800222e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8002232:	4a60      	ldr	r2, [pc, #384]	; (80023b4 <main+0xf9c>)
 8002234:	495f      	ldr	r1, [pc, #380]	; (80023b4 <main+0xf9c>)
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe ffaa 	bl	8001190 <multiplyQuat>
		  multiplyQuat(rotQuaternion, z, &z);
 800223c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8002240:	4a5d      	ldr	r2, [pc, #372]	; (80023b8 <main+0xfa0>)
 8002242:	495d      	ldr	r1, [pc, #372]	; (80023b8 <main+0xfa0>)
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe ffa3 	bl	8001190 <multiplyQuat>
		  rotQuaternion[1] = - rotQuaternion[1];
 800224a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800224e:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8002252:	ed93 7b02 	vldr	d7, [r3, #8]
 8002256:	eeb1 7b47 	vneg.f64	d7, d7
 800225a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800225e:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8002262:	ed83 7b02 	vstr	d7, [r3, #8]
		  rotQuaternion[2] = - rotQuaternion[2];
 8002266:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800226a:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800226e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002272:	eeb1 7b47 	vneg.f64	d7, d7
 8002276:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800227a:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800227e:	ed83 7b04 	vstr	d7, [r3, #16]
		  rotQuaternion[3] = - rotQuaternion[3];
 8002282:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002286:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800228a:	ed93 7b06 	vldr	d7, [r3, #24]
 800228e:	eeb1 7b47 	vneg.f64	d7, d7
 8002292:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002296:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800229a:	ed83 7b06 	vstr	d7, [r3, #24]
		  multiplyQuat(x, rotQuaternion, &x);
 800229e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80022a2:	4a43      	ldr	r2, [pc, #268]	; (80023b0 <main+0xf98>)
 80022a4:	4619      	mov	r1, r3
 80022a6:	4842      	ldr	r0, [pc, #264]	; (80023b0 <main+0xf98>)
 80022a8:	f7fe ff72 	bl	8001190 <multiplyQuat>
		  multiplyQuat(y, rotQuaternion, &y);
 80022ac:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80022b0:	4a40      	ldr	r2, [pc, #256]	; (80023b4 <main+0xf9c>)
 80022b2:	4619      	mov	r1, r3
 80022b4:	483f      	ldr	r0, [pc, #252]	; (80023b4 <main+0xf9c>)
 80022b6:	f7fe ff6b 	bl	8001190 <multiplyQuat>
		  multiplyQuat(z, rotQuaternion, &z);
 80022ba:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80022be:	4a3e      	ldr	r2, [pc, #248]	; (80023b8 <main+0xfa0>)
 80022c0:	4619      	mov	r1, r3
 80022c2:	483d      	ldr	r0, [pc, #244]	; (80023b8 <main+0xfa0>)
 80022c4:	f7fe ff64 	bl	8001190 <multiplyQuat>
		  	  counter++;
 80022c8:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 80022cc:	3301      	adds	r3, #1
 80022ce:	f8c7 3a78 	str.w	r3, [r7, #2680]	; 0xa78


	  }

  double SensorAcc[4];
  SensorAcc[0] = 0;
 80022d2:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80022d6:	f5a3 6128 	sub.w	r1, r3, #2688	; 0xa80
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9c1 2300 	strd	r2, r3, [r1]

  double AccExt[4];
  AccExt[0] = 0;
 80022e6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80022ea:	f5a3 6126 	sub.w	r1, r3, #2656	; 0xa60
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	e9c1 2300 	strd	r2, r3, [r1]


  if(LG2_Read_Register(0x1E) & 1){ //checks if new data from accelerometer
 80022fa:	201e      	movs	r0, #30
 80022fc:	f7fe fbfa 	bl	8000af4 <LG2_Read_Register>
 8002300:	4603      	mov	r3, r0
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8130 	beq.w	800256c <main+0x1154>
	  double elapsedTime = (TIM14->CNT / 1000.0);
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <main+0xfa4>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002318:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 800231c:	ed9f 5b20 	vldr	d5, [pc, #128]	; 80023a0 <main+0xf88>
 8002320:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002324:	ed03 7b02 	vstr	d7, [r3, #-8]
	  TIM14->CNT = 0;
 8002328:	4b24      	ldr	r3, [pc, #144]	; (80023bc <main+0xfa4>)
 800232a:	2200      	movs	r2, #0
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
	  counter++;
 800232e:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8002332:	3301      	adds	r3, #1
 8002334:	f8c7 3a78 	str.w	r3, [r7, #2680]	; 0xa78

	  SensorAcc[1] = LG2_Get_Acc_X();
 8002338:	f7fe fcda 	bl	8000cf0 <LG2_Get_Acc_X>
 800233c:	eef0 7a40 	vmov.f32	s15, s0
 8002340:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002344:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002348:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 800234c:	ed83 7b02 	vstr	d7, [r3, #8]
	  SensorAcc[2] = LG2_Get_Acc_Y();
 8002350:	f7fe fd16 	bl	8000d80 <LG2_Get_Acc_Y>
 8002354:	eef0 7a40 	vmov.f32	s15, s0
 8002358:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800235c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002360:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 8002364:	ed83 7b04 	vstr	d7, [r3, #16]
	  SensorAcc[3] = LG2_Get_Acc_Z();
 8002368:	f7fe fd4a 	bl	8000e00 <LG2_Get_Acc_Z>
 800236c:	eef0 7a40 	vmov.f32	s15, s0
 8002370:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002374:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002378:	f5a3 6328 	sub.w	r3, r3, #2688	; 0xa80
 800237c:	ed83 7b06 	vstr	d7, [r3, #24]

	  AccExt[1] = dotProduct(SensorAcc, x);
 8002380:	463b      	mov	r3, r7
 8002382:	490b      	ldr	r1, [pc, #44]	; (80023b0 <main+0xf98>)
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe ffde 	bl	8001346 <dotProduct>
 800238a:	eeb0 7b40 	vmov.f64	d7, d0
 800238e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002392:	e015      	b.n	80023c0 <main+0xfa8>
 8002394:	f3af 8000 	nop.w
 8002398:	211935c7 	.word	0x211935c7
 800239c:	3ef24d15 	.word	0x3ef24d15
 80023a0:	00000000 	.word	0x00000000
 80023a4:	408f4000 	.word	0x408f4000
 80023a8:	40001c00 	.word	0x40001c00
 80023ac:	10624dd3 	.word	0x10624dd3
 80023b0:	24000d08 	.word	0x24000d08
 80023b4:	24000d28 	.word	0x24000d28
 80023b8:	24000d48 	.word	0x24000d48
 80023bc:	40002000 	.word	0x40002000
 80023c0:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 80023c4:	ed83 7b02 	vstr	d7, [r3, #8]
	  AccExt[2] = dotProduct(SensorAcc, y);
 80023c8:	463b      	mov	r3, r7
 80023ca:	4985      	ldr	r1, [pc, #532]	; (80025e0 <main+0x11c8>)
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe ffba 	bl	8001346 <dotProduct>
 80023d2:	eeb0 7b40 	vmov.f64	d7, d0
 80023d6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80023da:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 80023de:	ed83 7b04 	vstr	d7, [r3, #16]
	  AccExt[3] = dotProduct(SensorAcc, z) - 9.8;
 80023e2:	463b      	mov	r3, r7
 80023e4:	497f      	ldr	r1, [pc, #508]	; (80025e4 <main+0x11cc>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe ffad 	bl	8001346 <dotProduct>
 80023ec:	eeb0 7b40 	vmov.f64	d7, d0
 80023f0:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80025d0 <main+0x11b8>
 80023f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023f8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80023fc:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 8002400:	ed83 7b06 	vstr	d7, [r3, #24]


	  VelocityExt[0] += AccExt[1] * elapsedTime/1000;
 8002404:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002408:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 800240c:	ed93 6b00 	vldr	d6, [r3]
 8002410:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002414:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 8002418:	ed93 5b02 	vldr	d5, [r3, #8]
 800241c:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8002420:	ed13 7b02 	vldr	d7, [r3, #-8]
 8002424:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002428:	ed9f 4b6b 	vldr	d4, [pc, #428]	; 80025d8 <main+0x11c0>
 800242c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002430:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002434:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002438:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 800243c:	ed83 7b00 	vstr	d7, [r3]
	  VelocityExt[1] += AccExt[2] * elapsedTime/1000;
 8002440:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002444:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8002448:	ed93 6b02 	vldr	d6, [r3, #8]
 800244c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002450:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 8002454:	ed93 5b04 	vldr	d5, [r3, #16]
 8002458:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 800245c:	ed13 7b02 	vldr	d7, [r3, #-8]
 8002460:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002464:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 80025d8 <main+0x11c0>
 8002468:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800246c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002470:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002474:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8002478:	ed83 7b02 	vstr	d7, [r3, #8]
	  VelocityExt[2] += AccExt[3] * elapsedTime/1000;
 800247c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002480:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8002484:	ed93 6b04 	vldr	d6, [r3, #16]
 8002488:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800248c:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 8002490:	ed93 5b06 	vldr	d5, [r3, #24]
 8002494:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8002498:	ed13 7b02 	vldr	d7, [r3, #-8]
 800249c:	ee25 5b07 	vmul.f64	d5, d5, d7
 80024a0:	ed9f 4b4d 	vldr	d4, [pc, #308]	; 80025d8 <main+0x11c0>
 80024a4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80024a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024ac:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80024b0:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 80024b4:	ed83 7b04 	vstr	d7, [r3, #16]



	  PosExt[0] += VelocityExt[0] * elapsedTime/1000;
 80024b8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80024bc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80024c0:	ed93 6b00 	vldr	d6, [r3]
 80024c4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80024c8:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 80024cc:	ed93 5b00 	vldr	d5, [r3]
 80024d0:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80024d4:	ed13 7b02 	vldr	d7, [r3, #-8]
 80024d8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80024dc:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 80025d8 <main+0x11c0>
 80024e0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80024e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024e8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80024ec:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80024f0:	ed83 7b00 	vstr	d7, [r3]
	  PosExt[1] += VelocityExt[1] * elapsedTime/1000;
 80024f4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80024f8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80024fc:	ed93 6b02 	vldr	d6, [r3, #8]
 8002500:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002504:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8002508:	ed93 5b02 	vldr	d5, [r3, #8]
 800250c:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8002510:	ed13 7b02 	vldr	d7, [r3, #-8]
 8002514:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002518:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 80025d8 <main+0x11c0>
 800251c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002520:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002524:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002528:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800252c:	ed83 7b02 	vstr	d7, [r3, #8]
	  PosExt[2] += VelocityExt[2] * elapsedTime/1000;
 8002530:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002534:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8002538:	ed93 6b04 	vldr	d6, [r3, #16]
 800253c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002540:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8002544:	ed93 5b04 	vldr	d5, [r3, #16]
 8002548:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 800254c:	ed13 7b02 	vldr	d7, [r3, #-8]
 8002550:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002554:	ed9f 4b20 	vldr	d4, [pc, #128]	; 80025d8 <main+0x11c0>
 8002558:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800255c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002560:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002564:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8002568:	ed83 7b04 	vstr	d7, [r3, #16]
  }
	  if(counter > 100){
 800256c:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 8002570:	2b64      	cmp	r3, #100	; 0x64
 8002572:	f77f ad2e 	ble.w	8001fd2 <main+0xbba>
		counter = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	f8c7 3a78 	str.w	r3, [r7, #2680]	; 0xa78
		//float magnitude = sqrt((x[1]*x[1]) + (x[2]*x[2]) + x[3] * x[3]);
		char data_gyro[500];
	    sprintf( data_gyro, "Mag: %f   Z: %f, %f, %f\n", VelocityExt[2], z[1],z[2],z[3]);
 800257c:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002580:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8002584:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <main+0x11cc>)
 800258a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800258e:	4915      	ldr	r1, [pc, #84]	; (80025e4 <main+0x11cc>)
 8002590:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8002594:	4c13      	ldr	r4, [pc, #76]	; (80025e4 <main+0x11cc>)
 8002596:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 800259a:	f107 0644 	add.w	r6, r7, #68	; 0x44
 800259e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80025a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80025a6:	e9cd 2300 	strd	r2, r3, [sp]
 80025aa:	4642      	mov	r2, r8
 80025ac:	464b      	mov	r3, r9
 80025ae:	490e      	ldr	r1, [pc, #56]	; (80025e8 <main+0x11d0>)
 80025b0:	4630      	mov	r0, r6
 80025b2:	f015 fc31 	bl	8017e18 <siprintf>
	    CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 80025b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd fef8 	bl	80003b0 <strlen>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f014 f8d1 	bl	8016770 <CDC_Transmit_HS>
  while(1){
 80025ce:	e500      	b.n	8001fd2 <main+0xbba>
 80025d0:	9999999a 	.word	0x9999999a
 80025d4:	40239999 	.word	0x40239999
 80025d8:	00000000 	.word	0x00000000
 80025dc:	408f4000 	.word	0x408f4000
 80025e0:	24000d28 	.word	0x24000d28
 80025e4:	24000d48 	.word	0x24000d48
 80025e8:	0801c5b0 	.word	0x0801c5b0

080025ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b09c      	sub	sp, #112	; 0x70
 80025f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f6:	224c      	movs	r2, #76	; 0x4c
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f015 fc6f 	bl	8017ede <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	2220      	movs	r2, #32
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f015 fc69 	bl	8017ede <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800260c:	2002      	movs	r0, #2
 800260e:	f007 fb81 	bl	8009d14 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002612:	2300      	movs	r3, #0
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4b32      	ldr	r3, [pc, #200]	; (80026e0 <SystemClock_Config+0xf4>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800261e:	4a30      	ldr	r2, [pc, #192]	; (80026e0 <SystemClock_Config+0xf4>)
 8002620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002624:	6193      	str	r3, [r2, #24]
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <SystemClock_Config+0xf4>)
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002632:	bf00      	nop
 8002634:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <SystemClock_Config+0xf4>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002640:	d1f8      	bne.n	8002634 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002642:	2323      	movs	r3, #35	; 0x23
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800264c:	2301      	movs	r3, #1
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002650:	2340      	movs	r3, #64	; 0x40
 8002652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002654:	2301      	movs	r3, #1
 8002656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002658:	2302      	movs	r3, #2
 800265a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800265c:	2302      	movs	r3, #2
 800265e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002660:	2304      	movs	r3, #4
 8002662:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002664:	2310      	movs	r3, #16
 8002666:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002668:	2301      	movs	r3, #1
 800266a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 800266c:	230c      	movs	r3, #12
 800266e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002670:	2302      	movs	r3, #2
 8002672:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002674:	230c      	movs	r3, #12
 8002676:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002678:	2300      	movs	r3, #0
 800267a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002684:	4618      	mov	r0, r3
 8002686:	f007 fb8f 	bl	8009da8 <HAL_RCC_OscConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002690:	f000 ff4a 	bl	8003528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002694:	233f      	movs	r3, #63	; 0x3f
 8002696:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002698:	2303      	movs	r3, #3
 800269a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80026a0:	2308      	movs	r3, #8
 80026a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80026a4:	2340      	movs	r3, #64	; 0x40
 80026a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80026a8:	2340      	movs	r3, #64	; 0x40
 80026aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80026ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80026b2:	2340      	movs	r3, #64	; 0x40
 80026b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	2101      	movs	r1, #1
 80026ba:	4618      	mov	r0, r3
 80026bc:	f007 ff4e 	bl	800a55c <HAL_RCC_ClockConfig>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <SystemClock_Config+0xde>
  {
    Error_Handler();
 80026c6:	f000 ff2f 	bl	8003528 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80026ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80026ce:	2100      	movs	r1, #0
 80026d0:	2000      	movs	r0, #0
 80026d2:	f008 f8f9 	bl	800a8c8 <HAL_RCC_MCOConfig>
}
 80026d6:	bf00      	nop
 80026d8:	3770      	adds	r7, #112	; 0x70
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	58024800 	.word	0x58024800

080026e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b0ae      	sub	sp, #184	; 0xb8
 80026e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ea:	463b      	mov	r3, r7
 80026ec:	22b8      	movs	r2, #184	; 0xb8
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f015 fbf4 	bl	8017ede <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 80026f6:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002702:	2304      	movs	r3, #4
 8002704:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8002706:	2310      	movs	r3, #16
 8002708:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800270a:	2304      	movs	r3, #4
 800270c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800270e:	2302      	movs	r3, #2
 8002710:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002712:	2302      	movs	r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002716:	23c0      	movs	r3, #192	; 0xc0
 8002718:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800271a:	2300      	movs	r3, #0
 800271c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8002722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002726:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800272e:	463b      	mov	r3, r7
 8002730:	4618      	mov	r0, r3
 8002732:	f008 fb09 	bl	800ad48 <HAL_RCCEx_PeriphCLKConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800273c:	f000 fef4 	bl	8003528 <Error_Handler>
  }
}
 8002740:	bf00      	nop
 8002742:	37b8      	adds	r7, #184	; 0xb8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	; 0x30
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800274e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800275a:	463b      	mov	r3, r7
 800275c:	2224      	movs	r2, #36	; 0x24
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f015 fbbc 	bl	8017ede <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002766:	4b31      	ldr	r3, [pc, #196]	; (800282c <MX_ADC1_Init+0xe4>)
 8002768:	4a31      	ldr	r2, [pc, #196]	; (8002830 <MX_ADC1_Init+0xe8>)
 800276a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800276c:	4b2f      	ldr	r3, [pc, #188]	; (800282c <MX_ADC1_Init+0xe4>)
 800276e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8002772:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <MX_ADC1_Init+0xe4>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800277a:	4b2c      	ldr	r3, [pc, #176]	; (800282c <MX_ADC1_Init+0xe4>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <MX_ADC1_Init+0xe4>)
 8002782:	2204      	movs	r2, #4
 8002784:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <MX_ADC1_Init+0xe4>)
 8002788:	2200      	movs	r2, #0
 800278a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <MX_ADC1_Init+0xe4>)
 800278e:	2200      	movs	r2, #0
 8002790:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <MX_ADC1_Init+0xe4>)
 8002794:	2201      	movs	r2, #1
 8002796:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <MX_ADC1_Init+0xe4>)
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027a0:	4b22      	ldr	r3, [pc, #136]	; (800282c <MX_ADC1_Init+0xe4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <MX_ADC1_Init+0xe4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80027ac:	4b1f      	ldr	r3, [pc, #124]	; (800282c <MX_ADC1_Init+0xe4>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027b2:	4b1e      	ldr	r3, [pc, #120]	; (800282c <MX_ADC1_Init+0xe4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80027b8:	4b1c      	ldr	r3, [pc, #112]	; (800282c <MX_ADC1_Init+0xe4>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80027be:	4b1b      	ldr	r3, [pc, #108]	; (800282c <MX_ADC1_Init+0xe4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027c6:	4819      	ldr	r0, [pc, #100]	; (800282c <MX_ADC1_Init+0xe4>)
 80027c8:	f002 fa74 	bl	8004cb4 <HAL_ADC_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80027d2:	f000 fea9 	bl	8003528 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027de:	4619      	mov	r1, r3
 80027e0:	4812      	ldr	r0, [pc, #72]	; (800282c <MX_ADC1_Init+0xe4>)
 80027e2:	f003 faaf 	bl	8005d44 <HAL_ADCEx_MultiModeConfigChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80027ec:	f000 fe9c 	bl	8003528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <MX_ADC1_Init+0xec>)
 80027f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027f4:	2306      	movs	r3, #6
 80027f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80027f8:	2303      	movs	r3, #3
 80027fa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80027fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002800:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002802:	2304      	movs	r3, #4
 8002804:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002810:	463b      	mov	r3, r7
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	; (800282c <MX_ADC1_Init+0xe4>)
 8002816:	f002 fc55 	bl	80050c4 <HAL_ADC_ConfigChannel>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002820:	f000 fe82 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	3730      	adds	r7, #48	; 0x30
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	240002e4 	.word	0x240002e4
 8002830:	40022000 	.word	0x40022000
 8002834:	2a000400 	.word	0x2a000400

08002838 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	2224      	movs	r2, #36	; 0x24
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f015 fb4a 	bl	8017ede <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800284a:	4b2f      	ldr	r3, [pc, #188]	; (8002908 <MX_ADC3_Init+0xd0>)
 800284c:	4a2f      	ldr	r2, [pc, #188]	; (800290c <MX_ADC3_Init+0xd4>)
 800284e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8002850:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <MX_ADC3_Init+0xd0>)
 8002852:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8002856:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <MX_ADC3_Init+0xd0>)
 800285a:	2208      	movs	r2, #8
 800285c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800285e:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <MX_ADC3_Init+0xd0>)
 8002860:	2200      	movs	r2, #0
 8002862:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <MX_ADC3_Init+0xd0>)
 8002866:	2200      	movs	r2, #0
 8002868:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <MX_ADC3_Init+0xd0>)
 800286c:	2204      	movs	r2, #4
 800286e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002870:	4b25      	ldr	r3, [pc, #148]	; (8002908 <MX_ADC3_Init+0xd0>)
 8002872:	2200      	movs	r2, #0
 8002874:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <MX_ADC3_Init+0xd0>)
 8002878:	2200      	movs	r2, #0
 800287a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <MX_ADC3_Init+0xd0>)
 800287e:	2201      	movs	r2, #1
 8002880:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <MX_ADC3_Init+0xd0>)
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <MX_ADC3_Init+0xd0>)
 800288c:	2200      	movs	r2, #0
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <MX_ADC3_Init+0xd0>)
 8002892:	2200      	movs	r2, #0
 8002894:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <MX_ADC3_Init+0xd0>)
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <MX_ADC3_Init+0xd0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <MX_ADC3_Init+0xd0>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MX_ADC3_Init+0xd0>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <MX_ADC3_Init+0xd0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <MX_ADC3_Init+0xd0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80028be:	4812      	ldr	r0, [pc, #72]	; (8002908 <MX_ADC3_Init+0xd0>)
 80028c0:	f002 f9f8 	bl	8004cb4 <HAL_ADC_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80028ca:	f000 fe2d 	bl	8003528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <MX_ADC3_Init+0xd8>)
 80028d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028d2:	2306      	movs	r3, #6
 80028d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80028da:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80028de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80028e0:	2304      	movs	r3, #4
 80028e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <MX_ADC3_Init+0xd0>)
 80028f2:	f002 fbe7 	bl	80050c4 <HAL_ADC_ConfigChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80028fc:	f000 fe14 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	3728      	adds	r7, #40	; 0x28
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	24000354 	.word	0x24000354
 800290c:	58026000 	.word	0x58026000
 8002910:	04300002 	.word	0x04300002

08002914 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8002918:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 800291a:	4a2f      	ldr	r2, [pc, #188]	; (80029d8 <MX_FDCAN3_Init+0xc4>)
 800291c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8002924:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800292a:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 800292c:	2200      	movs	r2, #0
 800292e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8002930:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002932:	2200      	movs	r2, #0
 8002934:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8002936:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002938:	2200      	movs	r2, #0
 800293a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 800293e:	2210      	movs	r2, #16
 8002940:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8002942:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002944:	2201      	movs	r2, #1
 8002946:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 800294a:	2202      	movs	r2, #2
 800294c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 800294e:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002950:	2202      	movs	r2, #2
 8002952:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8002954:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002956:	2201      	movs	r2, #1
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 800295c:	2201      	movs	r2, #1
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8002960:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002962:	2201      	movs	r2, #1
 8002964:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002968:	2201      	movs	r2, #1
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 800296e:	2200      	movs	r2, #0
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002974:	2200      	movs	r2, #0
 8002976:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 800297a:	2200      	movs	r2, #0
 800297c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002980:	2200      	movs	r2, #0
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002986:	2204      	movs	r2, #4
 8002988:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 800298c:	2200      	movs	r2, #0
 800298e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002992:	2204      	movs	r2, #4
 8002994:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8002996:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 8002998:	2200      	movs	r2, #0
 800299a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800299c:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 800299e:	2204      	movs	r2, #4
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 80029bc:	2204      	movs	r2, #4
 80029be:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80029c0:	4804      	ldr	r0, [pc, #16]	; (80029d4 <MX_FDCAN3_Init+0xc0>)
 80029c2:	f005 f86f 	bl	8007aa4 <HAL_FDCAN_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 80029cc:	f000 fdac 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	240004b4 	.word	0x240004b4
 80029d8:	4000d400 	.word	0x4000d400

080029dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <MX_I2C2_Init+0x74>)
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <MX_I2C2_Init+0x78>)
 80029e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <MX_I2C2_Init+0x74>)
 80029e8:	4a1b      	ldr	r2, [pc, #108]	; (8002a58 <MX_I2C2_Init+0x7c>)
 80029ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80029ec:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <MX_I2C2_Init+0x74>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <MX_I2C2_Init+0x74>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <MX_I2C2_Init+0x74>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <MX_I2C2_Init+0x74>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <MX_I2C2_Init+0x74>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_I2C2_Init+0x74>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <MX_I2C2_Init+0x74>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a16:	480e      	ldr	r0, [pc, #56]	; (8002a50 <MX_I2C2_Init+0x74>)
 8002a18:	f005 fd82 	bl	8008520 <HAL_I2C_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002a22:	f000 fd81 	bl	8003528 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a26:	2100      	movs	r1, #0
 8002a28:	4809      	ldr	r0, [pc, #36]	; (8002a50 <MX_I2C2_Init+0x74>)
 8002a2a:	f005 fe23 	bl	8008674 <HAL_I2CEx_ConfigAnalogFilter>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002a34:	f000 fd78 	bl	8003528 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4805      	ldr	r0, [pc, #20]	; (8002a50 <MX_I2C2_Init+0x74>)
 8002a3c:	f005 fe65 	bl	800870a <HAL_I2CEx_ConfigDigitalFilter>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002a46:	f000 fd6f 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	24000554 	.word	0x24000554
 8002a54:	40005800 	.word	0x40005800
 8002a58:	00c0eaff 	.word	0x00c0eaff

08002a5c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <MX_SDMMC2_SD_Init+0x34>)
 8002a62:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <MX_SDMMC2_SD_Init+0x38>)
 8002a64:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <MX_SDMMC2_SD_Init+0x34>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <MX_SDMMC2_SD_Init+0x34>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <MX_SDMMC2_SD_Init+0x34>)
 8002a74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a78:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <MX_SDMMC2_SD_Init+0x34>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <MX_SDMMC2_SD_Init+0x34>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	240005a8 	.word	0x240005a8
 8002a94:	48022400 	.word	0x48022400

08002a98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002a9e:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <MX_SPI1_Init+0xa8>)
 8002aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002aa4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002ab2:	2207      	movs	r2, #7
 8002ab4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002abc:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002ac4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ac8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002acc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002ad0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002aec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002af0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002af8:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b28:	4804      	ldr	r0, [pc, #16]	; (8002b3c <MX_SPI1_Init+0xa4>)
 8002b2a:	f00c f957 	bl	800eddc <HAL_SPI_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002b34:	f000 fcf8 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	24000624 	.word	0x24000624
 8002b40:	40013000 	.word	0x40013000

08002b44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b4a:	4a28      	ldr	r2, [pc, #160]	; (8002bec <MX_SPI2_Init+0xa8>)
 8002b4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b4e:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b5c:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b5e:	2207      	movs	r2, #7
 8002b60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b62:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b68:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b76:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b7c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002b98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bd4:	4804      	ldr	r0, [pc, #16]	; (8002be8 <MX_SPI2_Init+0xa4>)
 8002bd6:	f00c f901 	bl	800eddc <HAL_SPI_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002be0:	f000 fca2 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	240006ac 	.word	0x240006ac
 8002bec:	40003800 	.word	0x40003800

08002bf0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002bf4:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002bf6:	4a28      	ldr	r2, [pc, #160]	; (8002c98 <MX_SPI3_Init+0xa8>)
 8002bf8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002bfc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c08:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c0e:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c14:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c20:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c24:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002c28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c30:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c36:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002c3c:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c48:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c56:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002c80:	4804      	ldr	r0, [pc, #16]	; (8002c94 <MX_SPI3_Init+0xa4>)
 8002c82:	f00c f8ab 	bl	800eddc <HAL_SPI_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002c8c:	f000 fc4c 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002c90:	bf00      	nop
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	24000734 	.word	0x24000734
 8002c98:	40003c00 	.word	0x40003c00

08002c9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cae:	463b      	mov	r3, r7
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
 8002cbc:	615a      	str	r2, [r3, #20]
 8002cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cc0:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <MX_TIM2_Init+0xac>)
 8002cc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <MX_TIM2_Init+0xac>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <MX_TIM2_Init+0xac>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <MX_TIM2_Init+0xac>)
 8002cd6:	225a      	movs	r2, #90	; 0x5a
 8002cd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <MX_TIM2_Init+0xac>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <MX_TIM2_Init+0xac>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ce6:	4818      	ldr	r0, [pc, #96]	; (8002d48 <MX_TIM2_Init+0xac>)
 8002ce8:	f00c fee6 	bl	800fab8 <HAL_TIM_PWM_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002cf2:	f000 fc19 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	4619      	mov	r1, r3
 8002d04:	4810      	ldr	r0, [pc, #64]	; (8002d48 <MX_TIM2_Init+0xac>)
 8002d06:	f00d fe53 	bl	80109b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002d10:	f000 fc0a 	bl	8003528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d14:	2360      	movs	r3, #96	; 0x60
 8002d16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d24:	463b      	mov	r3, r7
 8002d26:	2208      	movs	r2, #8
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4807      	ldr	r0, [pc, #28]	; (8002d48 <MX_TIM2_Init+0xac>)
 8002d2c:	f00d f958 	bl	800ffe0 <HAL_TIM_PWM_ConfigChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002d36:	f000 fbf7 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d3a:	4803      	ldr	r0, [pc, #12]	; (8002d48 <MX_TIM2_Init+0xac>)
 8002d3c:	f001 f92a 	bl	8003f94 <HAL_TIM_MspPostInit>

}
 8002d40:	bf00      	nop
 8002d42:	3728      	adds	r7, #40	; 0x28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	240007bc 	.word	0x240007bc

08002d4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d52:	f107 031c 	add.w	r3, r7, #28
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d5e:	463b      	mov	r3, r7
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
 8002d6c:	615a      	str	r2, [r3, #20]
 8002d6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d70:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <MX_TIM3_Init+0xc0>)
 8002d72:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <MX_TIM3_Init+0xc4>)
 8002d74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d76:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <MX_TIM3_Init+0xc0>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7c:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <MX_TIM3_Init+0xc0>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <MX_TIM3_Init+0xc0>)
 8002d84:	225a      	movs	r2, #90	; 0x5a
 8002d86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d88:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <MX_TIM3_Init+0xc0>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <MX_TIM3_Init+0xc0>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d94:	481d      	ldr	r0, [pc, #116]	; (8002e0c <MX_TIM3_Init+0xc0>)
 8002d96:	f00c fe8f 	bl	800fab8 <HAL_TIM_PWM_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002da0:	f000 fbc2 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	4619      	mov	r1, r3
 8002db2:	4816      	ldr	r0, [pc, #88]	; (8002e0c <MX_TIM3_Init+0xc0>)
 8002db4:	f00d fdfc 	bl	80109b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002dbe:	f000 fbb3 	bl	8003528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc2:	2360      	movs	r3, #96	; 0x60
 8002dc4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dd2:	463b      	mov	r3, r7
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	480c      	ldr	r0, [pc, #48]	; (8002e0c <MX_TIM3_Init+0xc0>)
 8002dda:	f00d f901 	bl	800ffe0 <HAL_TIM_PWM_ConfigChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002de4:	f000 fba0 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002de8:	463b      	mov	r3, r7
 8002dea:	2204      	movs	r2, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4807      	ldr	r0, [pc, #28]	; (8002e0c <MX_TIM3_Init+0xc0>)
 8002df0:	f00d f8f6 	bl	800ffe0 <HAL_TIM_PWM_ConfigChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002dfa:	f000 fb95 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002dfe:	4803      	ldr	r0, [pc, #12]	; (8002e0c <MX_TIM3_Init+0xc0>)
 8002e00:	f001 f8c8 	bl	8003f94 <HAL_TIM_MspPostInit>

}
 8002e04:	bf00      	nop
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	24000808 	.word	0x24000808
 8002e10:	40000400 	.word	0x40000400

08002e14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e26:	463b      	mov	r3, r7
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
 8002e34:	615a      	str	r2, [r3, #20]
 8002e36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e38:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002e3a:	4a33      	ldr	r2, [pc, #204]	; (8002f08 <MX_TIM4_Init+0xf4>)
 8002e3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8002e3e:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002e40:	221c      	movs	r2, #28
 8002e42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e44:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002e4c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e58:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e5e:	4829      	ldr	r0, [pc, #164]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002e60:	f00c fe2a 	bl	800fab8 <HAL_TIM_PWM_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002e6a:	f000 fb5d 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e76:	f107 031c 	add.w	r3, r7, #28
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4821      	ldr	r0, [pc, #132]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002e7e:	f00d fd97 	bl	80109b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002e88:	f000 fb4e 	bl	8003528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e8c:	2360      	movs	r3, #96	; 0x60
 8002e8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e9c:	463b      	mov	r3, r7
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4818      	ldr	r0, [pc, #96]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002ea4:	f00d f89c 	bl	800ffe0 <HAL_TIM_PWM_ConfigChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002eae:	f000 fb3b 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4812      	ldr	r0, [pc, #72]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002eba:	f00d f891 	bl	800ffe0 <HAL_TIM_PWM_ConfigChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002ec4:	f000 fb30 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ec8:	463b      	mov	r3, r7
 8002eca:	2208      	movs	r2, #8
 8002ecc:	4619      	mov	r1, r3
 8002ece:	480d      	ldr	r0, [pc, #52]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002ed0:	f00d f886 	bl	800ffe0 <HAL_TIM_PWM_ConfigChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002eda:	f000 fb25 	bl	8003528 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ede:	463b      	mov	r3, r7
 8002ee0:	220c      	movs	r2, #12
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4807      	ldr	r0, [pc, #28]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002ee6:	f00d f87b 	bl	800ffe0 <HAL_TIM_PWM_ConfigChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002ef0:	f000 fb1a 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ef4:	4803      	ldr	r0, [pc, #12]	; (8002f04 <MX_TIM4_Init+0xf0>)
 8002ef6:	f001 f84d 	bl	8003f94 <HAL_TIM_MspPostInit>

}
 8002efa:	bf00      	nop
 8002efc:	3728      	adds	r7, #40	; 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	24000854 	.word	0x24000854
 8002f08:	40000800 	.word	0x40000800

08002f0c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f12:	f107 031c 	add.w	r3, r7, #28
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f1e:	463b      	mov	r3, r7
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	611a      	str	r2, [r3, #16]
 8002f2c:	615a      	str	r2, [r3, #20]
 8002f2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <MX_TIM5_Init+0xac>)
 8002f32:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <MX_TIM5_Init+0xb0>)
 8002f34:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <MX_TIM5_Init+0xac>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <MX_TIM5_Init+0xac>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <MX_TIM5_Init+0xac>)
 8002f44:	225a      	movs	r2, #90	; 0x5a
 8002f46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <MX_TIM5_Init+0xac>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <MX_TIM5_Init+0xac>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002f54:	4818      	ldr	r0, [pc, #96]	; (8002fb8 <MX_TIM5_Init+0xac>)
 8002f56:	f00c fdaf 	bl	800fab8 <HAL_TIM_PWM_Init>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002f60:	f000 fae2 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f6c:	f107 031c 	add.w	r3, r7, #28
 8002f70:	4619      	mov	r1, r3
 8002f72:	4811      	ldr	r0, [pc, #68]	; (8002fb8 <MX_TIM5_Init+0xac>)
 8002f74:	f00d fd1c 	bl	80109b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002f7e:	f000 fad3 	bl	8003528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f82:	2360      	movs	r3, #96	; 0x60
 8002f84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f92:	463b      	mov	r3, r7
 8002f94:	220c      	movs	r2, #12
 8002f96:	4619      	mov	r1, r3
 8002f98:	4807      	ldr	r0, [pc, #28]	; (8002fb8 <MX_TIM5_Init+0xac>)
 8002f9a:	f00d f821 	bl	800ffe0 <HAL_TIM_PWM_ConfigChannel>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002fa4:	f000 fac0 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002fa8:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <MX_TIM5_Init+0xac>)
 8002faa:	f000 fff3 	bl	8003f94 <HAL_TIM_MspPostInit>

}
 8002fae:	bf00      	nop
 8002fb0:	3728      	adds	r7, #40	; 0x28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	240008a0 	.word	0x240008a0
 8002fbc:	40000c00 	.word	0x40000c00

08002fc0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <MX_TIM13_Init+0x40>)
 8002fc6:	4a0f      	ldr	r2, [pc, #60]	; (8003004 <MX_TIM13_Init+0x44>)
 8002fc8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <MX_TIM13_Init+0x40>)
 8002fcc:	2263      	movs	r2, #99	; 0x63
 8002fce:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <MX_TIM13_Init+0x40>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <MX_TIM13_Init+0x40>)
 8002fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fdc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <MX_TIM13_Init+0x40>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <MX_TIM13_Init+0x40>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002fea:	4805      	ldr	r0, [pc, #20]	; (8003000 <MX_TIM13_Init+0x40>)
 8002fec:	f00c fc8f 	bl	800f90e <HAL_TIM_Base_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002ff6:	f000 fa97 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	240008ec 	.word	0x240008ec
 8003004:	40001c00 	.word	0x40001c00

08003008 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <MX_TIM14_Init+0x40>)
 800300e:	4a0f      	ldr	r2, [pc, #60]	; (800304c <MX_TIM14_Init+0x44>)
 8003010:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 8003012:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <MX_TIM14_Init+0x40>)
 8003014:	2263      	movs	r2, #99	; 0x63
 8003016:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <MX_TIM14_Init+0x40>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <MX_TIM14_Init+0x40>)
 8003020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003024:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <MX_TIM14_Init+0x40>)
 8003028:	2200      	movs	r2, #0
 800302a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <MX_TIM14_Init+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003032:	4805      	ldr	r0, [pc, #20]	; (8003048 <MX_TIM14_Init+0x40>)
 8003034:	f00c fc6b 	bl	800f90e <HAL_TIM_Base_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800303e:	f000 fa73 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	24000938 	.word	0x24000938
 800304c:	40002000 	.word	0x40002000

08003050 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003054:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <MX_UART4_Init+0x90>)
 8003056:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <MX_UART4_Init+0x94>)
 8003058:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <MX_UART4_Init+0x90>)
 800305c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003060:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003062:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <MX_UART4_Init+0x90>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <MX_UART4_Init+0x90>)
 800306a:	2200      	movs	r2, #0
 800306c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800306e:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <MX_UART4_Init+0x90>)
 8003070:	2200      	movs	r2, #0
 8003072:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003074:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <MX_UART4_Init+0x90>)
 8003076:	220c      	movs	r2, #12
 8003078:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800307a:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <MX_UART4_Init+0x90>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003080:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <MX_UART4_Init+0x90>)
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <MX_UART4_Init+0x90>)
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <MX_UART4_Init+0x90>)
 800308e:	2200      	movs	r2, #0
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <MX_UART4_Init+0x90>)
 8003094:	2200      	movs	r2, #0
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003098:	4811      	ldr	r0, [pc, #68]	; (80030e0 <MX_UART4_Init+0x90>)
 800309a:	f00d fd43 	bl	8010b24 <HAL_UART_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80030a4:	f000 fa40 	bl	8003528 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030a8:	2100      	movs	r1, #0
 80030aa:	480d      	ldr	r0, [pc, #52]	; (80030e0 <MX_UART4_Init+0x90>)
 80030ac:	f00e fe49 	bl	8011d42 <HAL_UARTEx_SetTxFifoThreshold>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80030b6:	f000 fa37 	bl	8003528 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ba:	2100      	movs	r1, #0
 80030bc:	4808      	ldr	r0, [pc, #32]	; (80030e0 <MX_UART4_Init+0x90>)
 80030be:	f00e fe7e 	bl	8011dbe <HAL_UARTEx_SetRxFifoThreshold>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80030c8:	f000 fa2e 	bl	8003528 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80030cc:	4804      	ldr	r0, [pc, #16]	; (80030e0 <MX_UART4_Init+0x90>)
 80030ce:	f00e fdff 	bl	8011cd0 <HAL_UARTEx_DisableFifoMode>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80030d8:	f000 fa26 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	24000bdc 	.word	0x24000bdc
 80030e4:	40004c00 	.word	0x40004c00

080030e8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <MX_USART6_UART_Init+0x90>)
 80030ee:	4a23      	ldr	r2, [pc, #140]	; (800317c <MX_USART6_UART_Init+0x94>)
 80030f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <MX_USART6_UART_Init+0x90>)
 80030f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80030fa:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <MX_USART6_UART_Init+0x90>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <MX_USART6_UART_Init+0x90>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003106:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <MX_USART6_UART_Init+0x90>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <MX_USART6_UART_Init+0x90>)
 800310e:	220c      	movs	r2, #12
 8003110:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <MX_USART6_UART_Init+0x90>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <MX_USART6_UART_Init+0x90>)
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800311e:	4b16      	ldr	r3, [pc, #88]	; (8003178 <MX_USART6_UART_Init+0x90>)
 8003120:	2200      	movs	r2, #0
 8003122:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <MX_USART6_UART_Init+0x90>)
 8003126:	2200      	movs	r2, #0
 8003128:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <MX_USART6_UART_Init+0x90>)
 800312c:	2200      	movs	r2, #0
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003130:	4811      	ldr	r0, [pc, #68]	; (8003178 <MX_USART6_UART_Init+0x90>)
 8003132:	f00d fcf7 	bl	8010b24 <HAL_UART_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800313c:	f000 f9f4 	bl	8003528 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003140:	2100      	movs	r1, #0
 8003142:	480d      	ldr	r0, [pc, #52]	; (8003178 <MX_USART6_UART_Init+0x90>)
 8003144:	f00e fdfd 	bl	8011d42 <HAL_UARTEx_SetTxFifoThreshold>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800314e:	f000 f9eb 	bl	8003528 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003152:	2100      	movs	r1, #0
 8003154:	4808      	ldr	r0, [pc, #32]	; (8003178 <MX_USART6_UART_Init+0x90>)
 8003156:	f00e fe32 	bl	8011dbe <HAL_UARTEx_SetRxFifoThreshold>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003160:	f000 f9e2 	bl	8003528 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003164:	4804      	ldr	r0, [pc, #16]	; (8003178 <MX_USART6_UART_Init+0x90>)
 8003166:	f00e fdb3 	bl	8011cd0 <HAL_UARTEx_DisableFifoMode>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003170:	f000 f9da 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}
 8003178:	24000c70 	.word	0x24000c70
 800317c:	40011400 	.word	0x40011400

08003180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003186:	4b2d      	ldr	r3, [pc, #180]	; (800323c <MX_DMA_Init+0xbc>)
 8003188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800318c:	4a2b      	ldr	r2, [pc, #172]	; (800323c <MX_DMA_Init+0xbc>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003196:	4b29      	ldr	r3, [pc, #164]	; (800323c <MX_DMA_Init+0xbc>)
 8003198:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031a4:	4b25      	ldr	r3, [pc, #148]	; (800323c <MX_DMA_Init+0xbc>)
 80031a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031aa:	4a24      	ldr	r2, [pc, #144]	; (800323c <MX_DMA_Init+0xbc>)
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80031b4:	4b21      	ldr	r3, [pc, #132]	; (800323c <MX_DMA_Init+0xbc>)
 80031b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	200b      	movs	r0, #11
 80031c8:	f002 ff79 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80031cc:	200b      	movs	r0, #11
 80031ce:	f002 ff90 	bl	80060f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2100      	movs	r1, #0
 80031d6:	200c      	movs	r0, #12
 80031d8:	f002 ff71 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80031dc:	200c      	movs	r0, #12
 80031de:	f002 ff88 	bl	80060f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	200d      	movs	r0, #13
 80031e8:	f002 ff69 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80031ec:	200d      	movs	r0, #13
 80031ee:	f002 ff80 	bl	80060f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80031f2:	2200      	movs	r2, #0
 80031f4:	2100      	movs	r1, #0
 80031f6:	200e      	movs	r0, #14
 80031f8:	f002 ff61 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80031fc:	200e      	movs	r0, #14
 80031fe:	f002 ff78 	bl	80060f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003202:	2200      	movs	r2, #0
 8003204:	2100      	movs	r1, #0
 8003206:	200f      	movs	r0, #15
 8003208:	f002 ff59 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800320c:	200f      	movs	r0, #15
 800320e:	f002 ff70 	bl	80060f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	2010      	movs	r0, #16
 8003218:	f002 ff51 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800321c:	2010      	movs	r0, #16
 800321e:	f002 ff68 	bl	80060f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	2100      	movs	r1, #0
 8003226:	2046      	movs	r0, #70	; 0x46
 8003228:	f002 ff49 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800322c:	2046      	movs	r0, #70	; 0x46
 800322e:	f002 ff60 	bl	80060f2 <HAL_NVIC_EnableIRQ>

}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	58024400 	.word	0x58024400

08003240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08e      	sub	sp, #56	; 0x38
 8003244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	609a      	str	r2, [r3, #8]
 8003252:	60da      	str	r2, [r3, #12]
 8003254:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003256:	4bac      	ldr	r3, [pc, #688]	; (8003508 <MX_GPIO_Init+0x2c8>)
 8003258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325c:	4aaa      	ldr	r2, [pc, #680]	; (8003508 <MX_GPIO_Init+0x2c8>)
 800325e:	f043 0310 	orr.w	r3, r3, #16
 8003262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003266:	4ba8      	ldr	r3, [pc, #672]	; (8003508 <MX_GPIO_Init+0x2c8>)
 8003268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	623b      	str	r3, [r7, #32]
 8003272:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003274:	4ba4      	ldr	r3, [pc, #656]	; (8003508 <MX_GPIO_Init+0x2c8>)
 8003276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327a:	4aa3      	ldr	r2, [pc, #652]	; (8003508 <MX_GPIO_Init+0x2c8>)
 800327c:	f043 0320 	orr.w	r3, r3, #32
 8003280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003284:	4ba0      	ldr	r3, [pc, #640]	; (8003508 <MX_GPIO_Init+0x2c8>)
 8003286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003292:	4b9d      	ldr	r3, [pc, #628]	; (8003508 <MX_GPIO_Init+0x2c8>)
 8003294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003298:	4a9b      	ldr	r2, [pc, #620]	; (8003508 <MX_GPIO_Init+0x2c8>)
 800329a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a2:	4b99      	ldr	r3, [pc, #612]	; (8003508 <MX_GPIO_Init+0x2c8>)
 80032a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b0:	4b95      	ldr	r3, [pc, #596]	; (8003508 <MX_GPIO_Init+0x2c8>)
 80032b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b6:	4a94      	ldr	r2, [pc, #592]	; (8003508 <MX_GPIO_Init+0x2c8>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032c0:	4b91      	ldr	r3, [pc, #580]	; (8003508 <MX_GPIO_Init+0x2c8>)
 80032c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	4b8e      	ldr	r3, [pc, #568]	; (8003508 <MX_GPIO_Init+0x2c8>)
 80032d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d4:	4a8c      	ldr	r2, [pc, #560]	; (8003508 <MX_GPIO_Init+0x2c8>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032de:	4b8a      	ldr	r3, [pc, #552]	; (8003508 <MX_GPIO_Init+0x2c8>)
 80032e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ec:	4b86      	ldr	r3, [pc, #536]	; (8003508 <MX_GPIO_Init+0x2c8>)
 80032ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f2:	4a85      	ldr	r2, [pc, #532]	; (8003508 <MX_GPIO_Init+0x2c8>)
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032fc:	4b82      	ldr	r3, [pc, #520]	; (8003508 <MX_GPIO_Init+0x2c8>)
 80032fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800330a:	4b7f      	ldr	r3, [pc, #508]	; (8003508 <MX_GPIO_Init+0x2c8>)
 800330c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003310:	4a7d      	ldr	r2, [pc, #500]	; (8003508 <MX_GPIO_Init+0x2c8>)
 8003312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800331a:	4b7b      	ldr	r3, [pc, #492]	; (8003508 <MX_GPIO_Init+0x2c8>)
 800331c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003328:	4b77      	ldr	r3, [pc, #476]	; (8003508 <MX_GPIO_Init+0x2c8>)
 800332a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800332e:	4a76      	ldr	r2, [pc, #472]	; (8003508 <MX_GPIO_Init+0x2c8>)
 8003330:	f043 0308 	orr.w	r3, r3, #8
 8003334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003338:	4b73      	ldr	r3, [pc, #460]	; (8003508 <MX_GPIO_Init+0x2c8>)
 800333a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8003346:	2200      	movs	r2, #0
 8003348:	f241 5104 	movw	r1, #5380	; 0x1504
 800334c:	486f      	ldr	r0, [pc, #444]	; (800350c <MX_GPIO_Init+0x2cc>)
 800334e:	f005 f8cd 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8003352:	2200      	movs	r2, #0
 8003354:	f248 0106 	movw	r1, #32774	; 0x8006
 8003358:	486d      	ldr	r0, [pc, #436]	; (8003510 <MX_GPIO_Init+0x2d0>)
 800335a:	f005 f8c7 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800335e:	2200      	movs	r2, #0
 8003360:	2130      	movs	r1, #48	; 0x30
 8003362:	486c      	ldr	r0, [pc, #432]	; (8003514 <MX_GPIO_Init+0x2d4>)
 8003364:	f005 f8c2 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8003368:	2200      	movs	r2, #0
 800336a:	2102      	movs	r1, #2
 800336c:	486a      	ldr	r0, [pc, #424]	; (8003518 <MX_GPIO_Init+0x2d8>)
 800336e:	f005 f8bd 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8003372:	2200      	movs	r2, #0
 8003374:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8003378:	4868      	ldr	r0, [pc, #416]	; (800351c <MX_GPIO_Init+0x2dc>)
 800337a:	f005 f8b7 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800337e:	2200      	movs	r2, #0
 8003380:	210e      	movs	r1, #14
 8003382:	4867      	ldr	r0, [pc, #412]	; (8003520 <MX_GPIO_Init+0x2e0>)
 8003384:	f005 f8b2 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8003388:	2200      	movs	r2, #0
 800338a:	f240 3101 	movw	r1, #769	; 0x301
 800338e:	4865      	ldr	r0, [pc, #404]	; (8003524 <MX_GPIO_Init+0x2e4>)
 8003390:	f005 f8ac 	bl	80084ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8003394:	f241 5304 	movw	r3, #5380	; 0x1504
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339a:	2301      	movs	r3, #1
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033aa:	4619      	mov	r1, r3
 80033ac:	4857      	ldr	r0, [pc, #348]	; (800350c <MX_GPIO_Init+0x2cc>)
 80033ae:	f004 fedd 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80033b2:	f248 0306 	movw	r3, #32774	; 0x8006
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b8:	2301      	movs	r3, #1
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	2300      	movs	r3, #0
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c8:	4619      	mov	r1, r3
 80033ca:	4851      	ldr	r0, [pc, #324]	; (8003510 <MX_GPIO_Init+0x2d0>)
 80033cc:	f004 fece 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80033d0:	2330      	movs	r3, #48	; 0x30
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d4:	2301      	movs	r3, #1
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	2300      	movs	r3, #0
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e4:	4619      	mov	r1, r3
 80033e6:	484b      	ldr	r0, [pc, #300]	; (8003514 <MX_GPIO_Init+0x2d4>)
 80033e8:	f004 fec0 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 80033ec:	2302      	movs	r3, #2
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f0:	2301      	movs	r3, #1
 80033f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f8:	2300      	movs	r3, #0
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80033fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003400:	4619      	mov	r1, r3
 8003402:	4845      	ldr	r0, [pc, #276]	; (8003518 <MX_GPIO_Init+0x2d8>)
 8003404:	f004 feb2 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8003408:	2304      	movs	r3, #4
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800340c:	2300      	movs	r3, #0
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003410:	2301      	movs	r3, #1
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8003414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003418:	4619      	mov	r1, r3
 800341a:	483f      	ldr	r0, [pc, #252]	; (8003518 <MX_GPIO_Init+0x2d8>)
 800341c:	f004 fea6 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8003420:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003426:	2301      	movs	r3, #1
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342e:	2300      	movs	r3, #0
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003436:	4619      	mov	r1, r3
 8003438:	4838      	ldr	r0, [pc, #224]	; (800351c <MX_GPIO_Init+0x2dc>)
 800343a:	f004 fe97 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 800343e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003444:	2300      	movs	r3, #0
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003448:	2301      	movs	r3, #1
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800344c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003450:	4619      	mov	r1, r3
 8003452:	4832      	ldr	r0, [pc, #200]	; (800351c <MX_GPIO_Init+0x2dc>)
 8003454:	f004 fe8a 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8003458:	2301      	movs	r3, #1
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800345c:	2300      	movs	r3, #0
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003460:	2301      	movs	r3, #1
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8003464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003468:	4619      	mov	r1, r3
 800346a:	482d      	ldr	r0, [pc, #180]	; (8003520 <MX_GPIO_Init+0x2e0>)
 800346c:	f004 fe7e 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8003470:	230e      	movs	r3, #14
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003474:	2301      	movs	r3, #1
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	2300      	movs	r3, #0
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003484:	4619      	mov	r1, r3
 8003486:	4826      	ldr	r0, [pc, #152]	; (8003520 <MX_GPIO_Init+0x2e0>)
 8003488:	f004 fe70 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 800348c:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003492:	2300      	movs	r3, #0
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003496:	2301      	movs	r3, #1
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800349a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349e:	4619      	mov	r1, r3
 80034a0:	481a      	ldr	r0, [pc, #104]	; (800350c <MX_GPIO_Init+0x2cc>)
 80034a2:	f004 fe63 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 80034a6:	f240 3301 	movw	r3, #769	; 0x301
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ac:	2301      	movs	r3, #1
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	2300      	movs	r3, #0
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034bc:	4619      	mov	r1, r3
 80034be:	4819      	ldr	r0, [pc, #100]	; (8003524 <MX_GPIO_Init+0x2e4>)
 80034c0:	f004 fe54 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80034c4:	2310      	movs	r3, #16
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034c8:	2300      	movs	r3, #0
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80034d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d4:	4619      	mov	r1, r3
 80034d6:	4812      	ldr	r0, [pc, #72]	; (8003520 <MX_GPIO_Init+0x2e0>)
 80034d8:	f004 fe48 	bl	800816c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80034ee:	2300      	movs	r3, #0
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f6:	4619      	mov	r1, r3
 80034f8:	4805      	ldr	r0, [pc, #20]	; (8003510 <MX_GPIO_Init+0x2d0>)
 80034fa:	f004 fe37 	bl	800816c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034fe:	bf00      	nop
 8003500:	3738      	adds	r7, #56	; 0x38
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	58024400 	.word	0x58024400
 800350c:	58021000 	.word	0x58021000
 8003510:	58020000 	.word	0x58020000
 8003514:	58020800 	.word	0x58020800
 8003518:	58020400 	.word	0x58020400
 800351c:	58021400 	.word	0x58021400
 8003520:	58021800 	.word	0x58021800
 8003524:	58020c00 	.word	0x58020c00

08003528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800352c:	b672      	cpsid	i
}
 800352e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003530:	e7fe      	b.n	8003530 <Error_Handler+0x8>
	...

08003534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_MspInit+0x30>)
 800353c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003540:	4a08      	ldr	r2, [pc, #32]	; (8003564 <HAL_MspInit+0x30>)
 8003542:	f043 0302 	orr.w	r3, r3, #2
 8003546:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_MspInit+0x30>)
 800354c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	58024400 	.word	0x58024400

08003568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08c      	sub	sp, #48	; 0x30
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 031c 	add.w	r3, r7, #28
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a5d      	ldr	r2, [pc, #372]	; (80036fc <HAL_ADC_MspInit+0x194>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d159      	bne.n	800363e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800358a:	4b5d      	ldr	r3, [pc, #372]	; (8003700 <HAL_ADC_MspInit+0x198>)
 800358c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003590:	4a5b      	ldr	r2, [pc, #364]	; (8003700 <HAL_ADC_MspInit+0x198>)
 8003592:	f043 0320 	orr.w	r3, r3, #32
 8003596:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800359a:	4b59      	ldr	r3, [pc, #356]	; (8003700 <HAL_ADC_MspInit+0x198>)
 800359c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a8:	4b55      	ldr	r3, [pc, #340]	; (8003700 <HAL_ADC_MspInit+0x198>)
 80035aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ae:	4a54      	ldr	r2, [pc, #336]	; (8003700 <HAL_ADC_MspInit+0x198>)
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035b8:	4b51      	ldr	r3, [pc, #324]	; (8003700 <HAL_ADC_MspInit+0x198>)
 80035ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 80035c6:	2301      	movs	r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ca:	2303      	movs	r3, #3
 80035cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80035d2:	f107 031c 	add.w	r3, r7, #28
 80035d6:	4619      	mov	r1, r3
 80035d8:	484a      	ldr	r0, [pc, #296]	; (8003704 <HAL_ADC_MspInit+0x19c>)
 80035da:	f004 fdc7 	bl	800816c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80035de:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 80035e0:	4a4a      	ldr	r2, [pc, #296]	; (800370c <HAL_ADC_MspInit+0x1a4>)
 80035e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80035e4:	4b48      	ldr	r3, [pc, #288]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 80035e6:	2209      	movs	r2, #9
 80035e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035ea:	4b47      	ldr	r3, [pc, #284]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035f0:	4b45      	ldr	r3, [pc, #276]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035f6:	4b44      	ldr	r3, [pc, #272]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 80035f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035fe:	4b42      	ldr	r3, [pc, #264]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 8003600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003604:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003606:	4b40      	ldr	r3, [pc, #256]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 8003608:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800360c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800360e:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 8003610:	2200      	movs	r2, #0
 8003612:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003614:	4b3c      	ldr	r3, [pc, #240]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 8003616:	2200      	movs	r2, #0
 8003618:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800361a:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 800361c:	2200      	movs	r2, #0
 800361e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003620:	4839      	ldr	r0, [pc, #228]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 8003622:	f002 fd81 	bl	8006128 <HAL_DMA_Init>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800362c:	f7ff ff7c 	bl	8003528 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a35      	ldr	r2, [pc, #212]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 8003634:	659a      	str	r2, [r3, #88]	; 0x58
 8003636:	4a34      	ldr	r2, [pc, #208]	; (8003708 <HAL_ADC_MspInit+0x1a0>)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800363c:	e059      	b.n	80036f2 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a33      	ldr	r2, [pc, #204]	; (8003710 <HAL_ADC_MspInit+0x1a8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d154      	bne.n	80036f2 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003648:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <HAL_ADC_MspInit+0x198>)
 800364a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800364e:	4a2c      	ldr	r2, [pc, #176]	; (8003700 <HAL_ADC_MspInit+0x198>)
 8003650:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003658:	4b29      	ldr	r3, [pc, #164]	; (8003700 <HAL_ADC_MspInit+0x198>)
 800365a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800365e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <HAL_ADC_MspInit+0x198>)
 8003668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800366c:	4a24      	ldr	r2, [pc, #144]	; (8003700 <HAL_ADC_MspInit+0x198>)
 800366e:	f043 0304 	orr.w	r3, r3, #4
 8003672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_ADC_MspInit+0x198>)
 8003678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003684:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003688:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800368c:	f001 f8b6 	bl	80047fc <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8003690:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 8003692:	4a21      	ldr	r2, [pc, #132]	; (8003718 <HAL_ADC_MspInit+0x1b0>)
 8003694:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003696:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 8003698:	2273      	movs	r2, #115	; 0x73
 800369a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 800369e:	2200      	movs	r2, #0
 80036a0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80036a2:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80036a8:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 80036aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ae:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036b0:	4b18      	ldr	r3, [pc, #96]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 80036b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036b6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036b8:	4b16      	ldr	r3, [pc, #88]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 80036ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036be:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 80036c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036c6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 80036ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036ce:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036d0:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80036d6:	480f      	ldr	r0, [pc, #60]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 80036d8:	f002 fd26 	bl	8006128 <HAL_DMA_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80036e2:	f7ff ff21 	bl	8003528 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 80036ea:	659a      	str	r2, [r3, #88]	; 0x58
 80036ec:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_ADC_MspInit+0x1ac>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80036f2:	bf00      	nop
 80036f4:	3730      	adds	r7, #48	; 0x30
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40022000 	.word	0x40022000
 8003700:	58024400 	.word	0x58024400
 8003704:	58020800 	.word	0x58020800
 8003708:	240003c4 	.word	0x240003c4
 800370c:	40020088 	.word	0x40020088
 8003710:	58026000 	.word	0x58026000
 8003714:	2400043c 	.word	0x2400043c
 8003718:	400204b8 	.word	0x400204b8

0800371c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b0b8      	sub	sp, #224	; 0xe0
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003724:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003734:	f107 0310 	add.w	r3, r7, #16
 8003738:	22b8      	movs	r2, #184	; 0xb8
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f014 fbce 	bl	8017ede <memset>
  if(hfdcan->Instance==FDCAN3)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_FDCAN_MspInit+0xc4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d144      	bne.n	80037d6 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800374c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003758:	2300      	movs	r3, #0
 800375a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800375c:	f107 0310 	add.w	r3, r7, #16
 8003760:	4618      	mov	r0, r3
 8003762:	f007 faf1 	bl	800ad48 <HAL_RCCEx_PeriphCLKConfig>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 800376c:	f7ff fedc 	bl	8003528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003770:	4b1c      	ldr	r3, [pc, #112]	; (80037e4 <HAL_FDCAN_MspInit+0xc8>)
 8003772:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003776:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <HAL_FDCAN_MspInit+0xc8>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003780:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <HAL_FDCAN_MspInit+0xc8>)
 8003782:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <HAL_FDCAN_MspInit+0xc8>)
 8003790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003794:	4a13      	ldr	r2, [pc, #76]	; (80037e4 <HAL_FDCAN_MspInit+0xc8>)
 8003796:	f043 0320 	orr.w	r3, r3, #32
 800379a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_FDCAN_MspInit+0xc8>)
 80037a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ac:	23c0      	movs	r3, #192	; 0xc0
 80037ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80037c4:	2302      	movs	r3, #2
 80037c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80037ce:	4619      	mov	r1, r3
 80037d0:	4805      	ldr	r0, [pc, #20]	; (80037e8 <HAL_FDCAN_MspInit+0xcc>)
 80037d2:	f004 fccb 	bl	800816c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80037d6:	bf00      	nop
 80037d8:	37e0      	adds	r7, #224	; 0xe0
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	4000d400 	.word	0x4000d400
 80037e4:	58024400 	.word	0x58024400
 80037e8:	58021400 	.word	0x58021400

080037ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b0b8      	sub	sp, #224	; 0xe0
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003804:	f107 0310 	add.w	r3, r7, #16
 8003808:	22b8      	movs	r2, #184	; 0xb8
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f014 fb66 	bl	8017ede <memset>
  if(hi2c->Instance==I2C2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a2a      	ldr	r2, [pc, #168]	; (80038c0 <HAL_I2C_MspInit+0xd4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d14d      	bne.n	80038b8 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800381c:	f04f 0208 	mov.w	r2, #8
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003828:	2300      	movs	r3, #0
 800382a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800382e:	f107 0310 	add.w	r3, r7, #16
 8003832:	4618      	mov	r0, r3
 8003834:	f007 fa88 	bl	800ad48 <HAL_RCCEx_PeriphCLKConfig>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800383e:	f7ff fe73 	bl	8003528 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_I2C_MspInit+0xd8>)
 8003844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003848:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_I2C_MspInit+0xd8>)
 800384a:	f043 0320 	orr.w	r3, r3, #32
 800384e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003852:	4b1c      	ldr	r3, [pc, #112]	; (80038c4 <HAL_I2C_MspInit+0xd8>)
 8003854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003860:	2303      	movs	r3, #3
 8003862:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003866:	2312      	movs	r3, #18
 8003868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003872:	2300      	movs	r3, #0
 8003874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003878:	2304      	movs	r3, #4
 800387a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800387e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003882:	4619      	mov	r1, r3
 8003884:	4810      	ldr	r0, [pc, #64]	; (80038c8 <HAL_I2C_MspInit+0xdc>)
 8003886:	f004 fc71 	bl	800816c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800388a:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <HAL_I2C_MspInit+0xd8>)
 800388c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003890:	4a0c      	ldr	r2, [pc, #48]	; (80038c4 <HAL_I2C_MspInit+0xd8>)
 8003892:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003896:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_I2C_MspInit+0xd8>)
 800389c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80038a8:	2200      	movs	r2, #0
 80038aa:	2101      	movs	r1, #1
 80038ac:	2021      	movs	r0, #33	; 0x21
 80038ae:	f002 fc06 	bl	80060be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80038b2:	2021      	movs	r0, #33	; 0x21
 80038b4:	f002 fc1d 	bl	80060f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80038b8:	bf00      	nop
 80038ba:	37e0      	adds	r7, #224	; 0xe0
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40005800 	.word	0x40005800
 80038c4:	58024400 	.word	0x58024400
 80038c8:	58021400 	.word	0x58021400

080038cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b0ba      	sub	sp, #232	; 0xe8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038e4:	f107 0318 	add.w	r3, r7, #24
 80038e8:	22b8      	movs	r2, #184	; 0xb8
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f014 faf6 	bl	8017ede <memset>
  if(hsd->Instance==SDMMC2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5d      	ldr	r2, [pc, #372]	; (8003a6c <HAL_SD_MspInit+0x1a0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	f040 80b3 	bne.w	8003a64 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80038fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800390a:	2300      	movs	r3, #0
 800390c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800390e:	f107 0318 	add.w	r3, r7, #24
 8003912:	4618      	mov	r0, r3
 8003914:	f007 fa18 	bl	800ad48 <HAL_RCCEx_PeriphCLKConfig>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800391e:	f7ff fe03 	bl	8003528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8003922:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <HAL_SD_MspInit+0x1a4>)
 8003924:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003928:	4a51      	ldr	r2, [pc, #324]	; (8003a70 <HAL_SD_MspInit+0x1a4>)
 800392a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800392e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003932:	4b4f      	ldr	r3, [pc, #316]	; (8003a70 <HAL_SD_MspInit+0x1a4>)
 8003934:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003940:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_SD_MspInit+0x1a4>)
 8003942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003946:	4a4a      	ldr	r2, [pc, #296]	; (8003a70 <HAL_SD_MspInit+0x1a4>)
 8003948:	f043 0308 	orr.w	r3, r3, #8
 800394c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003950:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_SD_MspInit+0x1a4>)
 8003952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800395e:	4b44      	ldr	r3, [pc, #272]	; (8003a70 <HAL_SD_MspInit+0x1a4>)
 8003960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003964:	4a42      	ldr	r2, [pc, #264]	; (8003a70 <HAL_SD_MspInit+0x1a4>)
 8003966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800396e:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <HAL_SD_MspInit+0x1a4>)
 8003970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800397c:	2340      	movs	r3, #64	; 0x40
 800397e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003982:	2302      	movs	r3, #2
 8003984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398e:	2303      	movs	r3, #3
 8003990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003994:	230b      	movs	r3, #11
 8003996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800399a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800399e:	4619      	mov	r1, r3
 80039a0:	4834      	ldr	r0, [pc, #208]	; (8003a74 <HAL_SD_MspInit+0x1a8>)
 80039a2:	f004 fbe3 	bl	800816c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	2302      	movs	r3, #2
 80039ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b8:	2303      	movs	r3, #3
 80039ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80039be:	230b      	movs	r3, #11
 80039c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039c8:	4619      	mov	r1, r3
 80039ca:	482a      	ldr	r0, [pc, #168]	; (8003a74 <HAL_SD_MspInit+0x1a8>)
 80039cc:	f004 fbce 	bl	800816c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80039d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d8:	2302      	movs	r3, #2
 80039da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039de:	2301      	movs	r3, #1
 80039e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e4:	2303      	movs	r3, #3
 80039e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80039ea:	230b      	movs	r3, #11
 80039ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4820      	ldr	r0, [pc, #128]	; (8003a78 <HAL_SD_MspInit+0x1ac>)
 80039f8:	f004 fbb8 	bl	800816c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80039fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a04:	2302      	movs	r3, #2
 8003a06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a10:	2303      	movs	r3, #3
 8003a12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003a16:	230b      	movs	r3, #11
 8003a18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4815      	ldr	r0, [pc, #84]	; (8003a78 <HAL_SD_MspInit+0x1ac>)
 8003a24:	f004 fba2 	bl	800816c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a30:	2302      	movs	r3, #2
 8003a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8003a42:	230a      	movs	r3, #10
 8003a44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	480a      	ldr	r0, [pc, #40]	; (8003a78 <HAL_SD_MspInit+0x1ac>)
 8003a50:	f004 fb8c 	bl	800816c <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8003a54:	2200      	movs	r2, #0
 8003a56:	2100      	movs	r1, #0
 8003a58:	207c      	movs	r0, #124	; 0x7c
 8003a5a:	f002 fb30 	bl	80060be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8003a5e:	207c      	movs	r0, #124	; 0x7c
 8003a60:	f002 fb47 	bl	80060f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8003a64:	bf00      	nop
 8003a66:	37e8      	adds	r7, #232	; 0xe8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	48022400 	.word	0x48022400
 8003a70:	58024400 	.word	0x58024400
 8003a74:	58020c00 	.word	0x58020c00
 8003a78:	58021800 	.word	0x58021800

08003a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08e      	sub	sp, #56	; 0x38
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a4f      	ldr	r2, [pc, #316]	; (8003bd8 <HAL_SPI_MspInit+0x15c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d12e      	bne.n	8003afc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a9e:	4b4f      	ldr	r3, [pc, #316]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aa4:	4a4d      	ldr	r2, [pc, #308]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003aa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003aae:	4b4b      	ldr	r3, [pc, #300]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab8:	623b      	str	r3, [r7, #32]
 8003aba:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac2:	4a46      	ldr	r2, [pc, #280]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003acc:	4b43      	ldr	r3, [pc, #268]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003ada:	23e0      	movs	r3, #224	; 0xe0
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003aea:	2305      	movs	r3, #5
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af2:	4619      	mov	r1, r3
 8003af4:	483a      	ldr	r0, [pc, #232]	; (8003be0 <HAL_SPI_MspInit+0x164>)
 8003af6:	f004 fb39 	bl	800816c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003afa:	e068      	b.n	8003bce <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a38      	ldr	r2, [pc, #224]	; (8003be4 <HAL_SPI_MspInit+0x168>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d12f      	bne.n	8003b66 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b06:	4b35      	ldr	r3, [pc, #212]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b0c:	4a33      	ldr	r2, [pc, #204]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b16:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b24:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b2a:	4a2c      	ldr	r2, [pc, #176]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003b2c:	f043 0302 	orr.w	r3, r3, #2
 8003b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b34:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003b42:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b50:	2300      	movs	r3, #0
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b54:	2305      	movs	r3, #5
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4822      	ldr	r0, [pc, #136]	; (8003be8 <HAL_SPI_MspInit+0x16c>)
 8003b60:	f004 fb04 	bl	800816c <HAL_GPIO_Init>
}
 8003b64:	e033      	b.n	8003bce <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a20      	ldr	r2, [pc, #128]	; (8003bec <HAL_SPI_MspInit+0x170>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d12e      	bne.n	8003bce <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b76:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b80:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b94:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <HAL_SPI_MspInit+0x160>)
 8003ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003bac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003bbe:	2306      	movs	r3, #6
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4809      	ldr	r0, [pc, #36]	; (8003bf0 <HAL_SPI_MspInit+0x174>)
 8003bca:	f004 facf 	bl	800816c <HAL_GPIO_Init>
}
 8003bce:	bf00      	nop
 8003bd0:	3738      	adds	r7, #56	; 0x38
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40013000 	.word	0x40013000
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	58020000 	.word	0x58020000
 8003be4:	40003800 	.word	0x40003800
 8003be8:	58020400 	.word	0x58020400
 8003bec:	40003c00 	.word	0x40003c00
 8003bf0:	58020800 	.word	0x58020800

08003bf4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08c      	sub	sp, #48	; 0x30
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d15d      	bne.n	8003cd2 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c16:	4b8e      	ldr	r3, [pc, #568]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c1c:	4a8c      	ldr	r2, [pc, #560]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c26:	4b8a      	ldr	r3, [pc, #552]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c34:	4b86      	ldr	r3, [pc, #536]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c3a:	4a85      	ldr	r2, [pc, #532]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c44:	4b82      	ldr	r3, [pc, #520]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c56:	2302      	movs	r3, #2
 8003c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c62:	2301      	movs	r3, #1
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c66:	f107 031c 	add.w	r3, r7, #28
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4879      	ldr	r0, [pc, #484]	; (8003e54 <HAL_TIM_PWM_MspInit+0x260>)
 8003c6e:	f004 fa7d 	bl	800816c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003c72:	4b79      	ldr	r3, [pc, #484]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003c74:	4a79      	ldr	r2, [pc, #484]	; (8003e5c <HAL_TIM_PWM_MspInit+0x268>)
 8003c76:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003c78:	4b77      	ldr	r3, [pc, #476]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003c7a:	2214      	movs	r2, #20
 8003c7c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c7e:	4b76      	ldr	r3, [pc, #472]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003c80:	2240      	movs	r2, #64	; 0x40
 8003c82:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c84:	4b74      	ldr	r3, [pc, #464]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003c8a:	4b73      	ldr	r3, [pc, #460]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c90:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c92:	4b71      	ldr	r3, [pc, #452]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c98:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c9a:	4b6f      	ldr	r3, [pc, #444]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003c9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ca0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003ca2:	4b6d      	ldr	r3, [pc, #436]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003ca8:	4b6b      	ldr	r3, [pc, #428]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cae:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003cb4:	4868      	ldr	r0, [pc, #416]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003cb6:	f002 fa37 	bl	8006128 <HAL_DMA_Init>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003cc0:	f7ff fc32 	bl	8003528 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a64      	ldr	r2, [pc, #400]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003cc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cca:	4a63      	ldr	r2, [pc, #396]	; (8003e58 <HAL_TIM_PWM_MspInit+0x264>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003cd0:	e119      	b.n	8003f06 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a62      	ldr	r2, [pc, #392]	; (8003e60 <HAL_TIM_PWM_MspInit+0x26c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d16d      	bne.n	8003db8 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cdc:	4b5c      	ldr	r3, [pc, #368]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ce2:	4a5b      	ldr	r2, [pc, #364]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cec:	4b58      	ldr	r3, [pc, #352]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003cfa:	4b5a      	ldr	r3, [pc, #360]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003cfc:	4a5a      	ldr	r2, [pc, #360]	; (8003e68 <HAL_TIM_PWM_MspInit+0x274>)
 8003cfe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003d00:	4b58      	ldr	r3, [pc, #352]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d02:	2218      	movs	r2, #24
 8003d04:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d06:	4b57      	ldr	r3, [pc, #348]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d08:	2240      	movs	r2, #64	; 0x40
 8003d0a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d0c:	4b55      	ldr	r3, [pc, #340]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003d12:	4b54      	ldr	r3, [pc, #336]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d18:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d1a:	4b52      	ldr	r3, [pc, #328]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d20:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d22:	4b50      	ldr	r3, [pc, #320]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d28:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003d2a:	4b4e      	ldr	r3, [pc, #312]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003d30:	4b4c      	ldr	r3, [pc, #304]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d36:	4b4b      	ldr	r3, [pc, #300]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003d3c:	4849      	ldr	r0, [pc, #292]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d3e:	f002 f9f3 	bl	8006128 <HAL_DMA_Init>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003d48:	f7ff fbee 	bl	8003528 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a45      	ldr	r2, [pc, #276]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d50:	629a      	str	r2, [r3, #40]	; 0x28
 8003d52:	4a44      	ldr	r2, [pc, #272]	; (8003e64 <HAL_TIM_PWM_MspInit+0x270>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003d58:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003d5a:	4a45      	ldr	r2, [pc, #276]	; (8003e70 <HAL_TIM_PWM_MspInit+0x27c>)
 8003d5c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003d5e:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003d60:	2217      	movs	r2, #23
 8003d62:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d64:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003d66:	2240      	movs	r2, #64	; 0x40
 8003d68:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d6a:	4b40      	ldr	r3, [pc, #256]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003d70:	4b3e      	ldr	r3, [pc, #248]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d76:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d78:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003d7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d7e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d80:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d86:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003d88:	4b38      	ldr	r3, [pc, #224]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003d8e:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d94:	4b35      	ldr	r3, [pc, #212]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003d9a:	4834      	ldr	r0, [pc, #208]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003d9c:	f002 f9c4 	bl	8006128 <HAL_DMA_Init>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003da6:	f7ff fbbf 	bl	8003528 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a2f      	ldr	r2, [pc, #188]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24
 8003db0:	4a2e      	ldr	r2, [pc, #184]	; (8003e6c <HAL_TIM_PWM_MspInit+0x278>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003db6:	e0a6      	b.n	8003f06 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2d      	ldr	r2, [pc, #180]	; (8003e74 <HAL_TIM_PWM_MspInit+0x280>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d15e      	bne.n	8003e80 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003dc8:	4a21      	ldr	r2, [pc, #132]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003dca:	f043 0304 	orr.w	r3, r3, #4
 8003dce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003dd2:	4b1f      	ldr	r3, [pc, #124]	; (8003e50 <HAL_TIM_PWM_MspInit+0x25c>)
 8003dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003de0:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003de2:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <HAL_TIM_PWM_MspInit+0x288>)
 8003de4:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003de8:	221f      	movs	r2, #31
 8003dea:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dec:	4b22      	ldr	r3, [pc, #136]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003dee:	2240      	movs	r2, #64	; 0x40
 8003df0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003df2:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dfe:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003e02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e06:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003e08:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003e0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e0e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003e10:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003e16:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e1c:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003e22:	4815      	ldr	r0, [pc, #84]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003e24:	f002 f980 	bl	8006128 <HAL_DMA_Init>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003e2e:	f7ff fb7b 	bl	8003528 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a10      	ldr	r2, [pc, #64]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e38:	4a0f      	ldr	r2, [pc, #60]	; (8003e78 <HAL_TIM_PWM_MspInit+0x284>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2100      	movs	r1, #0
 8003e42:	201e      	movs	r0, #30
 8003e44:	f002 f93b 	bl	80060be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e48:	201e      	movs	r0, #30
 8003e4a:	f002 f952 	bl	80060f2 <HAL_NVIC_EnableIRQ>
}
 8003e4e:	e05a      	b.n	8003f06 <HAL_TIM_PWM_MspInit+0x312>
 8003e50:	58024400 	.word	0x58024400
 8003e54:	58020000 	.word	0x58020000
 8003e58:	24000984 	.word	0x24000984
 8003e5c:	40020028 	.word	0x40020028
 8003e60:	40000400 	.word	0x40000400
 8003e64:	240009fc 	.word	0x240009fc
 8003e68:	40020058 	.word	0x40020058
 8003e6c:	24000a74 	.word	0x24000a74
 8003e70:	40020070 	.word	0x40020070
 8003e74:	40000800 	.word	0x40000800
 8003e78:	24000aec 	.word	0x24000aec
 8003e7c:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a22      	ldr	r2, [pc, #136]	; (8003f10 <HAL_TIM_PWM_MspInit+0x31c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d13d      	bne.n	8003f06 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003e8a:	4b22      	ldr	r3, [pc, #136]	; (8003f14 <HAL_TIM_PWM_MspInit+0x320>)
 8003e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e90:	4a20      	ldr	r2, [pc, #128]	; (8003f14 <HAL_TIM_PWM_MspInit+0x320>)
 8003e92:	f043 0308 	orr.w	r3, r3, #8
 8003e96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e9a:	4b1e      	ldr	r3, [pc, #120]	; (8003f14 <HAL_TIM_PWM_MspInit+0x320>)
 8003e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003eaa:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <HAL_TIM_PWM_MspInit+0x328>)
 8003eac:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003eb0:	223a      	movs	r2, #58	; 0x3a
 8003eb2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003eb4:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003eb6:	2240      	movs	r2, #64	; 0x40
 8003eb8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003ec0:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ec6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ec8:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ece:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ed0:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ed6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003ede:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003eea:	480b      	ldr	r0, [pc, #44]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003eec:	f002 f91c 	bl	8006128 <HAL_DMA_Init>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003ef6:	f7ff fb17 	bl	8003528 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a06      	ldr	r2, [pc, #24]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
 8003f00:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <HAL_TIM_PWM_MspInit+0x324>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003f06:	bf00      	nop
 8003f08:	3730      	adds	r7, #48	; 0x30
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40000c00 	.word	0x40000c00
 8003f14:	58024400 	.word	0x58024400
 8003f18:	24000b64 	.word	0x24000b64
 8003f1c:	40020040 	.word	0x40020040

08003f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a16      	ldr	r2, [pc, #88]	; (8003f88 <HAL_TIM_Base_MspInit+0x68>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d10f      	bne.n	8003f52 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <HAL_TIM_Base_MspInit+0x6c>)
 8003f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f38:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <HAL_TIM_Base_MspInit+0x6c>)
 8003f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_TIM_Base_MspInit+0x6c>)
 8003f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003f50:	e013      	b.n	8003f7a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a0e      	ldr	r2, [pc, #56]	; (8003f90 <HAL_TIM_Base_MspInit+0x70>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d10e      	bne.n	8003f7a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_TIM_Base_MspInit+0x6c>)
 8003f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <HAL_TIM_Base_MspInit+0x6c>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_TIM_Base_MspInit+0x6c>)
 8003f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40001c00 	.word	0x40001c00
 8003f8c:	58024400 	.word	0x58024400
 8003f90:	40002000 	.word	0x40002000

08003f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	; 0x30
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f9c:	f107 031c 	add.w	r3, r7, #28
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d120      	bne.n	8003ff8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb6:	4b52      	ldr	r3, [pc, #328]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 8003fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fbc:	4a50      	ldr	r2, [pc, #320]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 8003fbe:	f043 0302 	orr.w	r3, r3, #2
 8003fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fc6:	4b4e      	ldr	r3, [pc, #312]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 8003fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fea:	f107 031c 	add.w	r3, r7, #28
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4844      	ldr	r0, [pc, #272]	; (8004104 <HAL_TIM_MspPostInit+0x170>)
 8003ff2:	f004 f8bb 	bl	800816c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003ff6:	e07f      	b.n	80040f8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a42      	ldr	r2, [pc, #264]	; (8004108 <HAL_TIM_MspPostInit+0x174>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d11f      	bne.n	8004042 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004002:	4b3f      	ldr	r3, [pc, #252]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 8004004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004008:	4a3d      	ldr	r2, [pc, #244]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 800400a:	f043 0302 	orr.w	r3, r3, #2
 800400e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004012:	4b3b      	ldr	r3, [pc, #236]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 8004014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004020:	2330      	movs	r3, #48	; 0x30
 8004022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004024:	2302      	movs	r3, #2
 8004026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004028:	2302      	movs	r3, #2
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402c:	2300      	movs	r3, #0
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004030:	2302      	movs	r3, #2
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004034:	f107 031c 	add.w	r3, r7, #28
 8004038:	4619      	mov	r1, r3
 800403a:	4832      	ldr	r0, [pc, #200]	; (8004104 <HAL_TIM_MspPostInit+0x170>)
 800403c:	f004 f896 	bl	800816c <HAL_GPIO_Init>
}
 8004040:	e05a      	b.n	80040f8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a31      	ldr	r2, [pc, #196]	; (800410c <HAL_TIM_MspPostInit+0x178>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d131      	bne.n	80040b0 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800404c:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 800404e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004052:	4a2b      	ldr	r2, [pc, #172]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 8004054:	f043 0308 	orr.w	r3, r3, #8
 8004058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800405c:	4b28      	ldr	r3, [pc, #160]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 800405e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800406a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800406e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004078:	2300      	movs	r3, #0
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800407c:	2302      	movs	r3, #2
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004080:	f107 031c 	add.w	r3, r7, #28
 8004084:	4619      	mov	r1, r3
 8004086:	4822      	ldr	r0, [pc, #136]	; (8004110 <HAL_TIM_MspPostInit+0x17c>)
 8004088:	f004 f870 	bl	800816c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800408c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004092:	2302      	movs	r3, #2
 8004094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004096:	2302      	movs	r3, #2
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800409a:	2300      	movs	r3, #0
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800409e:	2302      	movs	r3, #2
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040a2:	f107 031c 	add.w	r3, r7, #28
 80040a6:	4619      	mov	r1, r3
 80040a8:	4819      	ldr	r0, [pc, #100]	; (8004110 <HAL_TIM_MspPostInit+0x17c>)
 80040aa:	f004 f85f 	bl	800816c <HAL_GPIO_Init>
}
 80040ae:	e023      	b.n	80040f8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a17      	ldr	r2, [pc, #92]	; (8004114 <HAL_TIM_MspPostInit+0x180>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d11e      	bne.n	80040f8 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 80040bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040c0:	4a0f      	ldr	r2, [pc, #60]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <HAL_TIM_MspPostInit+0x16c>)
 80040cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80040d8:	2308      	movs	r3, #8
 80040da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040dc:	2302      	movs	r3, #2
 80040de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040e0:	2302      	movs	r3, #2
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80040e8:	2302      	movs	r3, #2
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ec:	f107 031c 	add.w	r3, r7, #28
 80040f0:	4619      	mov	r1, r3
 80040f2:	4809      	ldr	r0, [pc, #36]	; (8004118 <HAL_TIM_MspPostInit+0x184>)
 80040f4:	f004 f83a 	bl	800816c <HAL_GPIO_Init>
}
 80040f8:	bf00      	nop
 80040fa:	3730      	adds	r7, #48	; 0x30
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	58024400 	.word	0x58024400
 8004104:	58020400 	.word	0x58020400
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	58020c00 	.word	0x58020c00
 8004114:	40000c00 	.word	0x40000c00
 8004118:	58020000 	.word	0x58020000

0800411c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b0ba      	sub	sp, #232	; 0xe8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004124:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004134:	f107 0318 	add.w	r3, r7, #24
 8004138:	22b8      	movs	r2, #184	; 0xb8
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f013 fece 	bl	8017ede <memset>
  if(huart->Instance==UART4)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a4d      	ldr	r2, [pc, #308]	; (800427c <HAL_UART_MspInit+0x160>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d147      	bne.n	80041dc <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800414c:	f04f 0202 	mov.w	r2, #2
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004158:	2300      	movs	r3, #0
 800415a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800415e:	f107 0318 	add.w	r3, r7, #24
 8004162:	4618      	mov	r0, r3
 8004164:	f006 fdf0 	bl	800ad48 <HAL_RCCEx_PeriphCLKConfig>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800416e:	f7ff f9db 	bl	8003528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004172:	4b43      	ldr	r3, [pc, #268]	; (8004280 <HAL_UART_MspInit+0x164>)
 8004174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004178:	4a41      	ldr	r2, [pc, #260]	; (8004280 <HAL_UART_MspInit+0x164>)
 800417a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800417e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004182:	4b3f      	ldr	r3, [pc, #252]	; (8004280 <HAL_UART_MspInit+0x164>)
 8004184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004190:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <HAL_UART_MspInit+0x164>)
 8004192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004196:	4a3a      	ldr	r2, [pc, #232]	; (8004280 <HAL_UART_MspInit+0x164>)
 8004198:	f043 0302 	orr.w	r3, r3, #2
 800419c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041a0:	4b37      	ldr	r3, [pc, #220]	; (8004280 <HAL_UART_MspInit+0x164>)
 80041a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b6:	2302      	movs	r3, #2
 80041b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80041c8:	2308      	movs	r3, #8
 80041ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80041d2:	4619      	mov	r1, r3
 80041d4:	482b      	ldr	r0, [pc, #172]	; (8004284 <HAL_UART_MspInit+0x168>)
 80041d6:	f003 ffc9 	bl	800816c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80041da:	e04a      	b.n	8004272 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a29      	ldr	r2, [pc, #164]	; (8004288 <HAL_UART_MspInit+0x16c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d145      	bne.n	8004272 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80041e6:	f04f 0201 	mov.w	r2, #1
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041f8:	f107 0318 	add.w	r3, r7, #24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f006 fda3 	bl	800ad48 <HAL_RCCEx_PeriphCLKConfig>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8004208:	f7ff f98e 	bl	8003528 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800420c:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <HAL_UART_MspInit+0x164>)
 800420e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004212:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_UART_MspInit+0x164>)
 8004214:	f043 0320 	orr.w	r3, r3, #32
 8004218:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800421c:	4b18      	ldr	r3, [pc, #96]	; (8004280 <HAL_UART_MspInit+0x164>)
 800421e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_UART_MspInit+0x164>)
 800422c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004230:	4a13      	ldr	r2, [pc, #76]	; (8004280 <HAL_UART_MspInit+0x164>)
 8004232:	f043 0304 	orr.w	r3, r3, #4
 8004236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800423a:	4b11      	ldr	r3, [pc, #68]	; (8004280 <HAL_UART_MspInit+0x164>)
 800423c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004248:	23c0      	movs	r3, #192	; 0xc0
 800424a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424e:	2302      	movs	r3, #2
 8004250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425a:	2300      	movs	r3, #0
 800425c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004260:	2307      	movs	r3, #7
 8004262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004266:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800426a:	4619      	mov	r1, r3
 800426c:	4807      	ldr	r0, [pc, #28]	; (800428c <HAL_UART_MspInit+0x170>)
 800426e:	f003 ff7d 	bl	800816c <HAL_GPIO_Init>
}
 8004272:	bf00      	nop
 8004274:	37e8      	adds	r7, #232	; 0xe8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40004c00 	.word	0x40004c00
 8004280:	58024400 	.word	0x58024400
 8004284:	58020400 	.word	0x58020400
 8004288:	40011400 	.word	0x40011400
 800428c:	58020800 	.word	0x58020800

08004290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004294:	e7fe      	b.n	8004294 <NMI_Handler+0x4>

08004296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004296:	b480      	push	{r7}
 8004298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800429a:	e7fe      	b.n	800429a <HardFault_Handler+0x4>

0800429c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042a0:	e7fe      	b.n	80042a0 <MemManage_Handler+0x4>

080042a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042a6:	e7fe      	b.n	80042a6 <BusFault_Handler+0x4>

080042a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042ac:	e7fe      	b.n	80042ac <UsageFault_Handler+0x4>

080042ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042dc:	f000 fa4a 	bl	8004774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042e0:	bf00      	nop
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <DMA1_Stream0_IRQHandler+0x10>)
 80042ea:	f002 fa75 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	24000aec 	.word	0x24000aec

080042f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <DMA1_Stream1_IRQHandler+0x10>)
 80042fe:	f002 fa6b 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	24000984 	.word	0x24000984

0800430c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8004310:	4802      	ldr	r0, [pc, #8]	; (800431c <DMA1_Stream2_IRQHandler+0x10>)
 8004312:	f002 fa61 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	24000b64 	.word	0x24000b64

08004320 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8004324:	4802      	ldr	r0, [pc, #8]	; (8004330 <DMA1_Stream3_IRQHandler+0x10>)
 8004326:	f002 fa57 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	240009fc 	.word	0x240009fc

08004334 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8004338:	4802      	ldr	r0, [pc, #8]	; (8004344 <DMA1_Stream4_IRQHandler+0x10>)
 800433a:	f002 fa4d 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	24000a74 	.word	0x24000a74

08004348 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800434c:	4802      	ldr	r0, [pc, #8]	; (8004358 <DMA1_Stream5_IRQHandler+0x10>)
 800434e:	f002 fa43 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	240003c4 	.word	0x240003c4

0800435c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004360:	4802      	ldr	r0, [pc, #8]	; (800436c <TIM4_IRQHandler+0x10>)
 8004362:	f00b fd1d 	bl	800fda0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	24000854 	.word	0x24000854

08004370 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004374:	4802      	ldr	r0, [pc, #8]	; (8004380 <I2C2_EV_IRQHandler+0x10>)
 8004376:	f004 f963 	bl	8008640 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	24000554 	.word	0x24000554

08004384 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004388:	4802      	ldr	r0, [pc, #8]	; (8004394 <DMA2_Stream7_IRQHandler+0x10>)
 800438a:	f002 fa25 	bl	80067d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	2400043c 	.word	0x2400043c

08004398 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800439c:	4802      	ldr	r0, [pc, #8]	; (80043a8 <OTG_HS_IRQHandler+0x10>)
 800439e:	f004 fb59 	bl	8008a54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	2400226c 	.word	0x2400226c

080043ac <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80043b0:	4802      	ldr	r0, [pc, #8]	; (80043bc <SDMMC2_IRQHandler+0x10>)
 80043b2:	f009 fb1f 	bl	800d9f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	240005a8 	.word	0x240005a8

080043c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return 1;
 80043c4:	2301      	movs	r3, #1
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <_kill>:

int _kill(int pid, int sig)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043da:	f013 fdd3 	bl	8017f84 <__errno>
 80043de:	4603      	mov	r3, r0
 80043e0:	2216      	movs	r2, #22
 80043e2:	601a      	str	r2, [r3, #0]
  return -1;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <_exit>:

void _exit (int status)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043f8:	f04f 31ff 	mov.w	r1, #4294967295
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff ffe7 	bl	80043d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004402:	e7fe      	b.n	8004402 <_exit+0x12>

08004404 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e00a      	b.n	800442c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004416:	f3af 8000 	nop.w
 800441a:	4601      	mov	r1, r0
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	60ba      	str	r2, [r7, #8]
 8004422:	b2ca      	uxtb	r2, r1
 8004424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	3301      	adds	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	dbf0      	blt.n	8004416 <_read+0x12>
  }

  return len;
 8004434:	687b      	ldr	r3, [r7, #4]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b086      	sub	sp, #24
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e009      	b.n	8004464 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	60ba      	str	r2, [r7, #8]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	3301      	adds	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	dbf1      	blt.n	8004450 <_write+0x12>
  }
  return len;
 800446c:	687b      	ldr	r3, [r7, #4]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_close>:

int _close(int file)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800449e:	605a      	str	r2, [r3, #4]
  return 0;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <_isatty>:

int _isatty(int file)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044b6:	2301      	movs	r3, #1
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044e8:	4a14      	ldr	r2, [pc, #80]	; (800453c <_sbrk+0x5c>)
 80044ea:	4b15      	ldr	r3, [pc, #84]	; (8004540 <_sbrk+0x60>)
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <_sbrk+0x64>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <_sbrk+0x64>)
 80044fe:	4a12      	ldr	r2, [pc, #72]	; (8004548 <_sbrk+0x68>)
 8004500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004502:	4b10      	ldr	r3, [pc, #64]	; (8004544 <_sbrk+0x64>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	429a      	cmp	r2, r3
 800450e:	d207      	bcs.n	8004520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004510:	f013 fd38 	bl	8017f84 <__errno>
 8004514:	4603      	mov	r3, r0
 8004516:	220c      	movs	r2, #12
 8004518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295
 800451e:	e009      	b.n	8004534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004520:	4b08      	ldr	r3, [pc, #32]	; (8004544 <_sbrk+0x64>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004526:	4b07      	ldr	r3, [pc, #28]	; (8004544 <_sbrk+0x64>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	4a05      	ldr	r2, [pc, #20]	; (8004544 <_sbrk+0x64>)
 8004530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004532:	68fb      	ldr	r3, [r7, #12]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	24050000 	.word	0x24050000
 8004540:	00000800 	.word	0x00000800
 8004544:	24000d68 	.word	0x24000d68
 8004548:	24002ae8 	.word	0x24002ae8

0800454c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004550:	4b32      	ldr	r3, [pc, #200]	; (800461c <SystemInit+0xd0>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	4a31      	ldr	r2, [pc, #196]	; (800461c <SystemInit+0xd0>)
 8004558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800455c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004560:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <SystemInit+0xd4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	2b06      	cmp	r3, #6
 800456a:	d807      	bhi.n	800457c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800456c:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <SystemInit+0xd4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f023 030f 	bic.w	r3, r3, #15
 8004574:	4a2a      	ldr	r2, [pc, #168]	; (8004620 <SystemInit+0xd4>)
 8004576:	f043 0307 	orr.w	r3, r3, #7
 800457a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800457c:	4b29      	ldr	r3, [pc, #164]	; (8004624 <SystemInit+0xd8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a28      	ldr	r2, [pc, #160]	; (8004624 <SystemInit+0xd8>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004588:	4b26      	ldr	r3, [pc, #152]	; (8004624 <SystemInit+0xd8>)
 800458a:	2200      	movs	r2, #0
 800458c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800458e:	4b25      	ldr	r3, [pc, #148]	; (8004624 <SystemInit+0xd8>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4924      	ldr	r1, [pc, #144]	; (8004624 <SystemInit+0xd8>)
 8004594:	4b24      	ldr	r3, [pc, #144]	; (8004628 <SystemInit+0xdc>)
 8004596:	4013      	ands	r3, r2
 8004598:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800459a:	4b21      	ldr	r3, [pc, #132]	; (8004620 <SystemInit+0xd4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80045a6:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <SystemInit+0xd4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 030f 	bic.w	r3, r3, #15
 80045ae:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <SystemInit+0xd4>)
 80045b0:	f043 0307 	orr.w	r3, r3, #7
 80045b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <SystemInit+0xd8>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <SystemInit+0xd8>)
 80045be:	2200      	movs	r2, #0
 80045c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80045c2:	4b18      	ldr	r3, [pc, #96]	; (8004624 <SystemInit+0xd8>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80045c8:	4b16      	ldr	r3, [pc, #88]	; (8004624 <SystemInit+0xd8>)
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <SystemInit+0xe0>)
 80045cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80045ce:	4b15      	ldr	r3, [pc, #84]	; (8004624 <SystemInit+0xd8>)
 80045d0:	4a17      	ldr	r2, [pc, #92]	; (8004630 <SystemInit+0xe4>)
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80045d4:	4b13      	ldr	r3, [pc, #76]	; (8004624 <SystemInit+0xd8>)
 80045d6:	4a17      	ldr	r2, [pc, #92]	; (8004634 <SystemInit+0xe8>)
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <SystemInit+0xd8>)
 80045dc:	2200      	movs	r2, #0
 80045de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80045e0:	4b10      	ldr	r3, [pc, #64]	; (8004624 <SystemInit+0xd8>)
 80045e2:	4a14      	ldr	r2, [pc, #80]	; (8004634 <SystemInit+0xe8>)
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <SystemInit+0xd8>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80045ec:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <SystemInit+0xd8>)
 80045ee:	4a11      	ldr	r2, [pc, #68]	; (8004634 <SystemInit+0xe8>)
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80045f2:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <SystemInit+0xd8>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <SystemInit+0xd8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a09      	ldr	r2, [pc, #36]	; (8004624 <SystemInit+0xd8>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004602:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004604:	4b07      	ldr	r3, [pc, #28]	; (8004624 <SystemInit+0xd8>)
 8004606:	2200      	movs	r2, #0
 8004608:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800460a:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <SystemInit+0xec>)
 800460c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004610:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	e000ed00 	.word	0xe000ed00
 8004620:	52002000 	.word	0x52002000
 8004624:	58024400 	.word	0x58024400
 8004628:	eaf6ed7f 	.word	0xeaf6ed7f
 800462c:	02020200 	.word	0x02020200
 8004630:	01ff0000 	.word	0x01ff0000
 8004634:	01010280 	.word	0x01010280
 8004638:	52004000 	.word	0x52004000

0800463c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800463c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004674 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004640:	f7ff ff84 	bl	800454c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004644:	480c      	ldr	r0, [pc, #48]	; (8004678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004646:	490d      	ldr	r1, [pc, #52]	; (800467c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004648:	4a0d      	ldr	r2, [pc, #52]	; (8004680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800464a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800464c:	e002      	b.n	8004654 <LoopCopyDataInit>

0800464e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800464e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004652:	3304      	adds	r3, #4

08004654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004658:	d3f9      	bcc.n	800464e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800465c:	4c0a      	ldr	r4, [pc, #40]	; (8004688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800465e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004660:	e001      	b.n	8004666 <LoopFillZerobss>

08004662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004664:	3204      	adds	r2, #4

08004666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004668:	d3fb      	bcc.n	8004662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800466a:	f013 fc91 	bl	8017f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800466e:	f7fc fed3 	bl	8001418 <main>
  bx  lr
 8004672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004674:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004678:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800467c:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8004680:	0801ce08 	.word	0x0801ce08
  ldr r2, =_sbss
 8004684:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 8004688:	24002ae4 	.word	0x24002ae4

0800468c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800468c:	e7fe      	b.n	800468c <ADC3_IRQHandler>
	...

08004690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004696:	2003      	movs	r0, #3
 8004698:	f001 fd06 	bl	80060a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800469c:	f006 f97e 	bl	800a99c <HAL_RCC_GetSysClockFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <HAL_Init+0x68>)
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	4913      	ldr	r1, [pc, #76]	; (80046fc <HAL_Init+0x6c>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
 80046b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <HAL_Init+0x68>)
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	4a0e      	ldr	r2, [pc, #56]	; (80046fc <HAL_Init+0x6c>)
 80046c4:	5cd3      	ldrb	r3, [r2, r3]
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <HAL_Init+0x70>)
 80046d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046d4:	4a0b      	ldr	r2, [pc, #44]	; (8004704 <HAL_Init+0x74>)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046da:	200f      	movs	r0, #15
 80046dc:	f000 f814 	bl	8004708 <HAL_InitTick>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e002      	b.n	80046f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80046ea:	f7fe ff23 	bl	8003534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	58024400 	.word	0x58024400
 80046fc:	0801c7a0 	.word	0x0801c7a0
 8004700:	24000004 	.word	0x24000004
 8004704:	24000000 	.word	0x24000000

08004708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <HAL_InitTick+0x60>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e021      	b.n	8004760 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <HAL_InitTick+0x64>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <HAL_InitTick+0x60>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	4619      	mov	r1, r3
 8004726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800472a:	fbb3 f3f1 	udiv	r3, r3, r1
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	4618      	mov	r0, r3
 8004734:	f001 fceb 	bl	800610e <HAL_SYSTICK_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e00e      	b.n	8004760 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b0f      	cmp	r3, #15
 8004746:	d80a      	bhi.n	800475e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004748:	2200      	movs	r2, #0
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	f001 fcb5 	bl	80060be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004754:	4a06      	ldr	r2, [pc, #24]	; (8004770 <HAL_InitTick+0x68>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e000      	b.n	8004760 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	2400000c 	.word	0x2400000c
 800476c:	24000000 	.word	0x24000000
 8004770:	24000008 	.word	0x24000008

08004774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_IncTick+0x20>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_IncTick+0x24>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4413      	add	r3, r2
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_IncTick+0x24>)
 8004786:	6013      	str	r3, [r2, #0]
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	2400000c 	.word	0x2400000c
 8004798:	24000d6c 	.word	0x24000d6c

0800479c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return uwTick;
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_GetTick+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	24000d6c 	.word	0x24000d6c

080047b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7ff ffee 	bl	800479c <HAL_GetTick>
 80047c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d005      	beq.n	80047da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_Delay+0x44>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047da:	bf00      	nop
 80047dc:	f7ff ffde 	bl	800479c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d8f7      	bhi.n	80047dc <HAL_Delay+0x28>
  {
  }
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	2400000c 	.word	0x2400000c

080047fc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004806:	4b07      	ldr	r3, [pc, #28]	; (8004824 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	43db      	mvns	r3, r3
 800480e:	401a      	ands	r2, r3
 8004810:	4904      	ldr	r1, [pc, #16]	; (8004824 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	58000400 	.word	0x58000400

08004828 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	609a      	str	r2, [r3, #8]
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	609a      	str	r2, [r3, #8]
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3360      	adds	r3, #96	; 0x60
 80048a2:	461a      	mov	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <LL_ADC_SetOffset+0x60>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10b      	bne.n	80048cc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80048ca:	e00b      	b.n	80048e4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	430b      	orrs	r3, r1
 80048de:	431a      	orrs	r2, r3
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	601a      	str	r2, [r3, #0]
}
 80048e4:	bf00      	nop
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	58026000 	.word	0x58026000

080048f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3360      	adds	r3, #96	; 0x60
 8004902:	461a      	mov	r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	fa01 f303 	lsl.w	r3, r1, r3
 8004940:	431a      	orrs	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	611a      	str	r2, [r3, #16]
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4a0c      	ldr	r2, [pc, #48]	; (8004994 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3360      	adds	r3, #96	; 0x60
 800496c:	461a      	mov	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	431a      	orrs	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	601a      	str	r2, [r3, #0]
  }
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	58026000 	.word	0x58026000

08004998 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4a0c      	ldr	r2, [pc, #48]	; (80049d8 <LL_ADC_SetOffsetSaturation+0x40>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d10e      	bne.n	80049ca <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3360      	adds	r3, #96	; 0x60
 80049b0:	461a      	mov	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	58026000 	.word	0x58026000

080049dc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <LL_ADC_SetOffsetSign+0x40>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10e      	bne.n	8004a0e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3360      	adds	r3, #96	; 0x60
 80049f4:	461a      	mov	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	58026000 	.word	0x58026000

08004a20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3360      	adds	r3, #96	; 0x60
 8004a30:	461a      	mov	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <LL_ADC_SetOffsetState+0x50>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004a52:	e007      	b.n	8004a64 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	601a      	str	r2, [r3, #0]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	58026000 	.word	0x58026000

08004a74 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3330      	adds	r3, #48	; 0x30
 8004a84:	461a      	mov	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	f003 030c 	and.w	r3, r3, #12
 8004a90:	4413      	add	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	211f      	movs	r1, #31
 8004aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	0e9b      	lsrs	r3, r3, #26
 8004aac:	f003 011f 	and.w	r1, r3, #31
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aba:	431a      	orrs	r2, r3
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3314      	adds	r3, #20
 8004adc:	461a      	mov	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	0e5b      	lsrs	r3, r3, #25
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	4413      	add	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	0d1b      	lsrs	r3, r3, #20
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2107      	movs	r1, #7
 8004afa:	fa01 f303 	lsl.w	r3, r1, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	401a      	ands	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	0d1b      	lsrs	r3, r3, #20
 8004b06:	f003 031f 	and.w	r3, r3, #31
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	431a      	orrs	r2, r3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a1a      	ldr	r2, [pc, #104]	; (8004b9c <LL_ADC_SetChannelSingleDiff+0x78>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d115      	bne.n	8004b64 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b44:	43db      	mvns	r3, r3
 8004b46:	401a      	ands	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f003 0318 	and.w	r3, r3, #24
 8004b4e:	4914      	ldr	r1, [pc, #80]	; (8004ba0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004b50:	40d9      	lsrs	r1, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	400b      	ands	r3, r1
 8004b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004b62:	e014      	b.n	8004b8e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b70:	43db      	mvns	r3, r3
 8004b72:	401a      	ands	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f003 0318 	and.w	r3, r3, #24
 8004b7a:	4909      	ldr	r1, [pc, #36]	; (8004ba0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004b7c:	40d9      	lsrs	r1, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	400b      	ands	r3, r1
 8004b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b86:	431a      	orrs	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	58026000 	.word	0x58026000
 8004ba0:	000fffff 	.word	0x000fffff

08004ba4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6093      	str	r3, [r2, #8]
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	5fffffc0 	.word	0x5fffffc0

08004bc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bdc:	d101      	bne.n	8004be2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <LL_ADC_EnableInternalRegulator+0x24>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	6fffffc0 	.word	0x6fffffc0

08004c18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c2c:	d101      	bne.n	8004c32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <LL_ADC_IsEnabled+0x18>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <LL_ADC_IsEnabled+0x1a>
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d101      	bne.n	8004c7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d101      	bne.n	8004ca4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b089      	sub	sp, #36	; 0x24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e1ee      	b.n	80050ac <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7fe fc43 	bl	8003568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ff67 	bl	8004bc8 <LL_ADC_IsDeepPowerDownEnabled>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d004      	beq.n	8004d0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff4d 	bl	8004ba4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff ff82 	bl	8004c18 <LL_ADC_IsInternalRegulatorEnabled>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d114      	bne.n	8004d44 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff ff66 	bl	8004bf0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d24:	4b8e      	ldr	r3, [pc, #568]	; (8004f60 <HAL_ADC_Init+0x2ac>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	099b      	lsrs	r3, r3, #6
 8004d2a:	4a8e      	ldr	r2, [pc, #568]	; (8004f64 <HAL_ADC_Init+0x2b0>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	099b      	lsrs	r3, r3, #6
 8004d32:	3301      	adds	r3, #1
 8004d34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d36:	e002      	b.n	8004d3e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1f9      	bne.n	8004d38 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff ff65 	bl	8004c18 <LL_ADC_IsInternalRegulatorEnabled>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10d      	bne.n	8004d70 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d58:	f043 0210 	orr.w	r2, r3, #16
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d64:	f043 0201 	orr.w	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff ff76 	bl	8004c66 <LL_ADC_REG_IsConversionOngoing>
 8004d7a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f040 8188 	bne.w	800509a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 8184 	bne.w	800509a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d96:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004d9a:	f043 0202 	orr.w	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff ff4a 	bl	8004c40 <LL_ADC_IsEnabled>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d136      	bne.n	8004e20 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a6c      	ldr	r2, [pc, #432]	; (8004f68 <HAL_ADC_Init+0x2b4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_ADC_Init+0x112>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a6a      	ldr	r2, [pc, #424]	; (8004f6c <HAL_ADC_Init+0x2b8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d10e      	bne.n	8004de4 <HAL_ADC_Init+0x130>
 8004dc6:	4868      	ldr	r0, [pc, #416]	; (8004f68 <HAL_ADC_Init+0x2b4>)
 8004dc8:	f7ff ff3a 	bl	8004c40 <LL_ADC_IsEnabled>
 8004dcc:	4604      	mov	r4, r0
 8004dce:	4867      	ldr	r0, [pc, #412]	; (8004f6c <HAL_ADC_Init+0x2b8>)
 8004dd0:	f7ff ff36 	bl	8004c40 <LL_ADC_IsEnabled>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	4323      	orrs	r3, r4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	e008      	b.n	8004df6 <HAL_ADC_Init+0x142>
 8004de4:	4862      	ldr	r0, [pc, #392]	; (8004f70 <HAL_ADC_Init+0x2bc>)
 8004de6:	f7ff ff2b 	bl	8004c40 <LL_ADC_IsEnabled>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d012      	beq.n	8004e20 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a5a      	ldr	r2, [pc, #360]	; (8004f68 <HAL_ADC_Init+0x2b4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_ADC_Init+0x15a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a58      	ldr	r2, [pc, #352]	; (8004f6c <HAL_ADC_Init+0x2b8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADC_Init+0x15e>
 8004e0e:	4a59      	ldr	r2, [pc, #356]	; (8004f74 <HAL_ADC_Init+0x2c0>)
 8004e10:	e000      	b.n	8004e14 <HAL_ADC_Init+0x160>
 8004e12:	4a59      	ldr	r2, [pc, #356]	; (8004f78 <HAL_ADC_Init+0x2c4>)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f7ff fd04 	bl	8004828 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a52      	ldr	r2, [pc, #328]	; (8004f70 <HAL_ADC_Init+0x2bc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d129      	bne.n	8004e7e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	7e5b      	ldrb	r3, [r3, #25]
 8004e2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004e34:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004e3a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d013      	beq.n	8004e6c <HAL_ADC_Init+0x1b8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b0c      	cmp	r3, #12
 8004e4a:	d00d      	beq.n	8004e68 <HAL_ADC_Init+0x1b4>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b1c      	cmp	r3, #28
 8004e52:	d007      	beq.n	8004e64 <HAL_ADC_Init+0x1b0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b18      	cmp	r3, #24
 8004e5a:	d101      	bne.n	8004e60 <HAL_ADC_Init+0x1ac>
 8004e5c:	2318      	movs	r3, #24
 8004e5e:	e006      	b.n	8004e6e <HAL_ADC_Init+0x1ba>
 8004e60:	2300      	movs	r3, #0
 8004e62:	e004      	b.n	8004e6e <HAL_ADC_Init+0x1ba>
 8004e64:	2310      	movs	r3, #16
 8004e66:	e002      	b.n	8004e6e <HAL_ADC_Init+0x1ba>
 8004e68:	2308      	movs	r3, #8
 8004e6a:	e000      	b.n	8004e6e <HAL_ADC_Init+0x1ba>
 8004e6c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004e6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e76:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	e00e      	b.n	8004e9c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	7e5b      	ldrb	r3, [r3, #25]
 8004e82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e88:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004e8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d106      	bne.n	8004eb4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	045b      	lsls	r3, r3, #17
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d009      	beq.n	8004ed0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <HAL_ADC_Init+0x2bc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d115      	bne.n	8004f06 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <HAL_ADC_Init+0x2c8>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	69b9      	ldr	r1, [r7, #24]
 8004eea:	430b      	orrs	r3, r1
 8004eec:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	611a      	str	r2, [r3, #16]
 8004f04:	e009      	b.n	8004f1a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	4b1c      	ldr	r3, [pc, #112]	; (8004f80 <HAL_ADC_Init+0x2cc>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	69b9      	ldr	r1, [r7, #24]
 8004f16:	430b      	orrs	r3, r1
 8004f18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fea1 	bl	8004c66 <LL_ADC_REG_IsConversionOngoing>
 8004f24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff feae 	bl	8004c8c <LL_ADC_INJ_IsConversionOngoing>
 8004f30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 808e 	bne.w	8005056 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 808a 	bne.w	8005056 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <HAL_ADC_Init+0x2bc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d11b      	bne.n	8004f84 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7e1b      	ldrb	r3, [r3, #24]
 8004f50:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f58:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e018      	b.n	8004f92 <HAL_ADC_Init+0x2de>
 8004f60:	24000000 	.word	0x24000000
 8004f64:	053e2d63 	.word	0x053e2d63
 8004f68:	40022000 	.word	0x40022000
 8004f6c:	40022100 	.word	0x40022100
 8004f70:	58026000 	.word	0x58026000
 8004f74:	40022300 	.word	0x40022300
 8004f78:	58026300 	.word	0x58026300
 8004f7c:	fff04007 	.word	0xfff04007
 8004f80:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	7e1b      	ldrb	r3, [r3, #24]
 8004f88:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	4b46      	ldr	r3, [pc, #280]	; (80050b4 <HAL_ADC_Init+0x400>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	69b9      	ldr	r1, [r7, #24]
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d137      	bne.n	8005020 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a3f      	ldr	r2, [pc, #252]	; (80050b8 <HAL_ADC_Init+0x404>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d116      	bne.n	8004fee <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <HAL_ADC_Init+0x408>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004fd2:	4311      	orrs	r1, r2
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fd8:	4311      	orrs	r1, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	611a      	str	r2, [r3, #16]
 8004fec:	e020      	b.n	8005030 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	4b32      	ldr	r3, [pc, #200]	; (80050c0 <HAL_ADC_Init+0x40c>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ffc:	3a01      	subs	r2, #1
 8004ffe:	0411      	lsls	r1, r2, #16
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005004:	4311      	orrs	r1, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800500a:	4311      	orrs	r1, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005010:	430a      	orrs	r2, r1
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	611a      	str	r2, [r3, #16]
 800501e:	e007      	b.n	8005030 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <HAL_ADC_Init+0x404>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d002      	beq.n	8005056 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fd63 	bl	8005b1c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d10c      	bne.n	8005078 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	f023 010f 	bic.w	r1, r3, #15
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	1e5a      	subs	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
 8005076:	e007      	b.n	8005088 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 020f 	bic.w	r2, r2, #15
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508c:	f023 0303 	bic.w	r3, r3, #3
 8005090:	f043 0201 	orr.w	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	661a      	str	r2, [r3, #96]	; 0x60
 8005098:	e007      	b.n	80050aa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509e:	f043 0210 	orr.w	r2, r3, #16
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80050aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3724      	adds	r7, #36	; 0x24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd90      	pop	{r4, r7, pc}
 80050b4:	ffffbffc 	.word	0xffffbffc
 80050b8:	58026000 	.word	0x58026000
 80050bc:	fc00f81f 	.word	0xfc00f81f
 80050c0:	fc00f81e 	.word	0xfc00f81e

080050c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b0b9      	sub	sp, #228	; 0xe4
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050de:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4aa9      	ldr	r2, [pc, #676]	; (800538c <HAL_ADC_ConfigChannel+0x2c8>)
 80050e6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d102      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x34>
 80050f2:	2302      	movs	r3, #2
 80050f4:	f000 bcfa 	b.w	8005aec <HAL_ADC_ConfigChannel+0xa28>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fdae 	bl	8004c66 <LL_ADC_REG_IsConversionOngoing>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	f040 84de 	bne.w	8005ace <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a9e      	ldr	r2, [pc, #632]	; (8005390 <HAL_ADC_ConfigChannel+0x2cc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d033      	beq.n	8005184 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005124:	2b00      	cmp	r3, #0
 8005126:	d108      	bne.n	800513a <HAL_ADC_ConfigChannel+0x76>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	0e9b      	lsrs	r3, r3, #26
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2201      	movs	r2, #1
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	e01d      	b.n	8005176 <HAL_ADC_ConfigChannel+0xb2>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005146:	fa93 f3a3 	rbit	r3, r3
 800514a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800514e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800515e:	2320      	movs	r3, #32
 8005160:	e004      	b.n	800516c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8005162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005166:	fab3 f383 	clz	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	2201      	movs	r2, #1
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	69d1      	ldr	r1, [r2, #28]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	430b      	orrs	r3, r1
 8005182:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	6859      	ldr	r1, [r3, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	f7ff fc6f 	bl	8004a74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fd63 	bl	8004c66 <LL_ADC_REG_IsConversionOngoing>
 80051a0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff fd6f 	bl	8004c8c <LL_ADC_INJ_IsConversionOngoing>
 80051ae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f040 8270 	bne.w	800569c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f040 826b 	bne.w	800569c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6819      	ldr	r1, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f7ff fc7a 	bl	8004acc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a6c      	ldr	r2, [pc, #432]	; (8005390 <HAL_ADC_ConfigChannel+0x2cc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d10d      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	08db      	lsrs	r3, r3, #3
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051fc:	e032      	b.n	8005264 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80051fe:	4b65      	ldr	r3, [pc, #404]	; (8005394 <HAL_ADC_ConfigChannel+0x2d0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800520a:	d10b      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x160>
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	e01d      	b.n	8005260 <HAL_ADC_ConfigChannel+0x19c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10b      	bne.n	800524a <HAL_ADC_ConfigChannel+0x186>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695a      	ldr	r2, [r3, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	089b      	lsrs	r3, r3, #2
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	e00a      	b.n	8005260 <HAL_ADC_ConfigChannel+0x19c>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	089b      	lsrs	r3, r3, #2
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b04      	cmp	r3, #4
 800526a:	d048      	beq.n	80052fe <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6919      	ldr	r1, [r3, #16]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800527c:	f7ff fb08 	bl	8004890 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a42      	ldr	r2, [pc, #264]	; (8005390 <HAL_ADC_ConfigChannel+0x2cc>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d119      	bne.n	80052be <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6919      	ldr	r1, [r3, #16]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	461a      	mov	r2, r3
 8005298:	f7ff fba0 	bl	80049dc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	6919      	ldr	r1, [r3, #16]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d102      	bne.n	80052b4 <HAL_ADC_ConfigChannel+0x1f0>
 80052ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052b2:	e000      	b.n	80052b6 <HAL_ADC_ConfigChannel+0x1f2>
 80052b4:	2300      	movs	r3, #0
 80052b6:	461a      	mov	r2, r3
 80052b8:	f7ff fb6e 	bl	8004998 <LL_ADC_SetOffsetSaturation>
 80052bc:	e1ee      	b.n	800569c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6919      	ldr	r1, [r3, #16]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d102      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x212>
 80052d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052d4:	e000      	b.n	80052d8 <HAL_ADC_ConfigChannel+0x214>
 80052d6:	2300      	movs	r3, #0
 80052d8:	461a      	mov	r2, r3
 80052da:	f7ff fb3b 	bl	8004954 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6919      	ldr	r1, [r3, #16]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	7e1b      	ldrb	r3, [r3, #24]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d102      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x230>
 80052ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052f2:	e000      	b.n	80052f6 <HAL_ADC_ConfigChannel+0x232>
 80052f4:	2300      	movs	r3, #0
 80052f6:	461a      	mov	r2, r3
 80052f8:	f7ff fb12 	bl	8004920 <LL_ADC_SetDataRightShift>
 80052fc:	e1ce      	b.n	800569c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a23      	ldr	r2, [pc, #140]	; (8005390 <HAL_ADC_ConfigChannel+0x2cc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	f040 8181 	bne.w	800560c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2100      	movs	r1, #0
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff faef 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 8005316:	4603      	mov	r3, r0
 8005318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x272>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fae4 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 800532c:	4603      	mov	r3, r0
 800532e:	0e9b      	lsrs	r3, r3, #26
 8005330:	f003 021f 	and.w	r2, r3, #31
 8005334:	e01e      	b.n	8005374 <HAL_ADC_ConfigChannel+0x2b0>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2100      	movs	r1, #0
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fad9 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 8005342:	4603      	mov	r3, r0
 8005344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005348:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800534c:	fa93 f3a3 	rbit	r3, r3
 8005350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005354:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800535c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005364:	2320      	movs	r3, #32
 8005366:	e004      	b.n	8005372 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005368:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800536c:	fab3 f383 	clz	r3, r3
 8005370:	b2db      	uxtb	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x2d4>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	0e9b      	lsrs	r3, r3, #26
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	e01e      	b.n	80053ca <HAL_ADC_ConfigChannel+0x306>
 800538c:	47ff0000 	.word	0x47ff0000
 8005390:	58026000 	.word	0x58026000
 8005394:	5c001000 	.word	0x5c001000
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053a4:	fa93 f3a3 	rbit	r3, r3
 80053a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80053ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80053b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80053bc:	2320      	movs	r3, #32
 80053be:	e004      	b.n	80053ca <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80053c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053c4:	fab3 f383 	clz	r3, r3
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d106      	bne.n	80053dc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2200      	movs	r2, #0
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fb22 	bl	8004a20 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2101      	movs	r1, #1
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fa86 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <HAL_ADC_ConfigChannel+0x344>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2101      	movs	r1, #1
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fa7b 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 80053fe:	4603      	mov	r3, r0
 8005400:	0e9b      	lsrs	r3, r3, #26
 8005402:	f003 021f 	and.w	r2, r3, #31
 8005406:	e01e      	b.n	8005446 <HAL_ADC_ConfigChannel+0x382>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2101      	movs	r1, #1
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fa70 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 8005414:	4603      	mov	r3, r0
 8005416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800541e:	fa93 f3a3 	rbit	r3, r3
 8005422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005426:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800542a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800542e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8005436:	2320      	movs	r3, #32
 8005438:	e004      	b.n	8005444 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800543a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800543e:	fab3 f383 	clz	r3, r3
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800544e:	2b00      	cmp	r3, #0
 8005450:	d105      	bne.n	800545e <HAL_ADC_ConfigChannel+0x39a>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	0e9b      	lsrs	r3, r3, #26
 8005458:	f003 031f 	and.w	r3, r3, #31
 800545c:	e018      	b.n	8005490 <HAL_ADC_ConfigChannel+0x3cc>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005466:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800546a:	fa93 f3a3 	rbit	r3, r3
 800546e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005472:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005476:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800547a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8005482:	2320      	movs	r3, #32
 8005484:	e004      	b.n	8005490 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8005486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800548a:	fab3 f383 	clz	r3, r3
 800548e:	b2db      	uxtb	r3, r3
 8005490:	429a      	cmp	r2, r3
 8005492:	d106      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2200      	movs	r2, #0
 800549a:	2101      	movs	r1, #1
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fabf 	bl	8004a20 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2102      	movs	r1, #2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fa23 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <HAL_ADC_ConfigChannel+0x40a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2102      	movs	r1, #2
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fa18 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 80054c4:	4603      	mov	r3, r0
 80054c6:	0e9b      	lsrs	r3, r3, #26
 80054c8:	f003 021f 	and.w	r2, r3, #31
 80054cc:	e01e      	b.n	800550c <HAL_ADC_ConfigChannel+0x448>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2102      	movs	r1, #2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fa0d 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 80054da:	4603      	mov	r3, r0
 80054dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054e4:	fa93 f3a3 	rbit	r3, r3
 80054e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80054ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80054f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80054fc:	2320      	movs	r3, #32
 80054fe:	e004      	b.n	800550a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005504:	fab3 f383 	clz	r3, r3
 8005508:	b2db      	uxtb	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x460>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	0e9b      	lsrs	r3, r3, #26
 800551e:	f003 031f 	and.w	r3, r3, #31
 8005522:	e014      	b.n	800554e <HAL_ADC_ConfigChannel+0x48a>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800552c:	fa93 f3a3 	rbit	r3, r3
 8005530:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005538:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005540:	2320      	movs	r3, #32
 8005542:	e004      	b.n	800554e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005548:	fab3 f383 	clz	r3, r3
 800554c:	b2db      	uxtb	r3, r3
 800554e:	429a      	cmp	r2, r3
 8005550:	d106      	bne.n	8005560 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2200      	movs	r2, #0
 8005558:	2102      	movs	r1, #2
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fa60 	bl	8004a20 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2103      	movs	r1, #3
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff f9c4 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 800556c:	4603      	mov	r3, r0
 800556e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <HAL_ADC_ConfigChannel+0x4c8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2103      	movs	r1, #3
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff f9b9 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 8005582:	4603      	mov	r3, r0
 8005584:	0e9b      	lsrs	r3, r3, #26
 8005586:	f003 021f 	and.w	r2, r3, #31
 800558a:	e017      	b.n	80055bc <HAL_ADC_ConfigChannel+0x4f8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2103      	movs	r1, #3
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff f9ae 	bl	80048f4 <LL_ADC_GetOffsetChannel>
 8005598:	4603      	mov	r3, r0
 800559a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800559e:	fa93 f3a3 	rbit	r3, r3
 80055a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80055a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80055a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80055ae:	2320      	movs	r3, #32
 80055b0:	e003      	b.n	80055ba <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80055b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055b4:	fab3 f383 	clz	r3, r3
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d105      	bne.n	80055d4 <HAL_ADC_ConfigChannel+0x510>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	0e9b      	lsrs	r3, r3, #26
 80055ce:	f003 031f 	and.w	r3, r3, #31
 80055d2:	e011      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x534>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055dc:	fa93 f3a3 	rbit	r3, r3
 80055e0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80055e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055e4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80055e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80055ec:	2320      	movs	r3, #32
 80055ee:	e003      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80055f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055f2:	fab3 f383 	clz	r3, r3
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d14f      	bne.n	800569c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2200      	movs	r2, #0
 8005602:	2103      	movs	r1, #3
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fa0b 	bl	8004a20 <LL_ADC_SetOffsetState>
 800560a:	e047      	b.n	800569c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005612:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	069b      	lsls	r3, r3, #26
 800561c:	429a      	cmp	r2, r3
 800561e:	d107      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800562e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005636:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	069b      	lsls	r3, r3, #26
 8005640:	429a      	cmp	r2, r3
 8005642:	d107      	bne.n	8005654 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005652:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800565a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	069b      	lsls	r3, r3, #26
 8005664:	429a      	cmp	r2, r3
 8005666:	d107      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005676:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800567e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	069b      	lsls	r3, r3, #26
 8005688:	429a      	cmp	r2, r3
 800568a:	d107      	bne.n	800569c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800569a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff facd 	bl	8004c40 <LL_ADC_IsEnabled>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f040 8219 	bne.w	8005ae0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6819      	ldr	r1, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	461a      	mov	r2, r3
 80056bc:	f7ff fa32 	bl	8004b24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	4aa1      	ldr	r2, [pc, #644]	; (800594c <HAL_ADC_ConfigChannel+0x888>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	f040 812e 	bne.w	8005928 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <HAL_ADC_ConfigChannel+0x630>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	0e9b      	lsrs	r3, r3, #26
 80056e2:	3301      	adds	r3, #1
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	2b09      	cmp	r3, #9
 80056ea:	bf94      	ite	ls
 80056ec:	2301      	movls	r3, #1
 80056ee:	2300      	movhi	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	e019      	b.n	8005728 <HAL_ADC_ConfigChannel+0x664>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056fc:	fa93 f3a3 	rbit	r3, r3
 8005700:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005704:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800570c:	2320      	movs	r3, #32
 800570e:	e003      	b.n	8005718 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005712:	fab3 f383 	clz	r3, r3
 8005716:	b2db      	uxtb	r3, r3
 8005718:	3301      	adds	r3, #1
 800571a:	f003 031f 	and.w	r3, r3, #31
 800571e:	2b09      	cmp	r3, #9
 8005720:	bf94      	ite	ls
 8005722:	2301      	movls	r3, #1
 8005724:	2300      	movhi	r3, #0
 8005726:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005728:	2b00      	cmp	r3, #0
 800572a:	d079      	beq.n	8005820 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005734:	2b00      	cmp	r3, #0
 8005736:	d107      	bne.n	8005748 <HAL_ADC_ConfigChannel+0x684>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	0e9b      	lsrs	r3, r3, #26
 800573e:	3301      	adds	r3, #1
 8005740:	069b      	lsls	r3, r3, #26
 8005742:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005746:	e015      	b.n	8005774 <HAL_ADC_ConfigChannel+0x6b0>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005750:	fa93 f3a3 	rbit	r3, r3
 8005754:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005758:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800575a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005760:	2320      	movs	r3, #32
 8005762:	e003      	b.n	800576c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005766:	fab3 f383 	clz	r3, r3
 800576a:	b2db      	uxtb	r3, r3
 800576c:	3301      	adds	r3, #1
 800576e:	069b      	lsls	r3, r3, #26
 8005770:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800577c:	2b00      	cmp	r3, #0
 800577e:	d109      	bne.n	8005794 <HAL_ADC_ConfigChannel+0x6d0>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	0e9b      	lsrs	r3, r3, #26
 8005786:	3301      	adds	r3, #1
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	2101      	movs	r1, #1
 800578e:	fa01 f303 	lsl.w	r3, r1, r3
 8005792:	e017      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x700>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579c:	fa93 f3a3 	rbit	r3, r3
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80057a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80057a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80057ac:	2320      	movs	r3, #32
 80057ae:	e003      	b.n	80057b8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80057b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b2:	fab3 f383 	clz	r3, r3
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	3301      	adds	r3, #1
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2101      	movs	r1, #1
 80057c0:	fa01 f303 	lsl.w	r3, r1, r3
 80057c4:	ea42 0103 	orr.w	r1, r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <HAL_ADC_ConfigChannel+0x726>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	0e9b      	lsrs	r3, r3, #26
 80057da:	3301      	adds	r3, #1
 80057dc:	f003 021f 	and.w	r2, r3, #31
 80057e0:	4613      	mov	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	4413      	add	r3, r2
 80057e6:	051b      	lsls	r3, r3, #20
 80057e8:	e018      	b.n	800581c <HAL_ADC_ConfigChannel+0x758>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f2:	fa93 f3a3 	rbit	r3, r3
 80057f6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005802:	2320      	movs	r3, #32
 8005804:	e003      	b.n	800580e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	fab3 f383 	clz	r3, r3
 800580c:	b2db      	uxtb	r3, r3
 800580e:	3301      	adds	r3, #1
 8005810:	f003 021f 	and.w	r2, r3, #31
 8005814:	4613      	mov	r3, r2
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	4413      	add	r3, r2
 800581a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800581c:	430b      	orrs	r3, r1
 800581e:	e07e      	b.n	800591e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <HAL_ADC_ConfigChannel+0x778>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	0e9b      	lsrs	r3, r3, #26
 8005832:	3301      	adds	r3, #1
 8005834:	069b      	lsls	r3, r3, #26
 8005836:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800583a:	e015      	b.n	8005868 <HAL_ADC_ConfigChannel+0x7a4>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	fa93 f3a3 	rbit	r3, r3
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005854:	2320      	movs	r3, #32
 8005856:	e003      	b.n	8005860 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	fab3 f383 	clz	r3, r3
 800585e:	b2db      	uxtb	r3, r3
 8005860:	3301      	adds	r3, #1
 8005862:	069b      	lsls	r3, r3, #26
 8005864:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <HAL_ADC_ConfigChannel+0x7c4>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	0e9b      	lsrs	r3, r3, #26
 800587a:	3301      	adds	r3, #1
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	2101      	movs	r1, #1
 8005882:	fa01 f303 	lsl.w	r3, r1, r3
 8005886:	e017      	b.n	80058b8 <HAL_ADC_ConfigChannel+0x7f4>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	fa93 f3a3 	rbit	r3, r3
 8005894:	61bb      	str	r3, [r7, #24]
  return result;
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80058a0:	2320      	movs	r3, #32
 80058a2:	e003      	b.n	80058ac <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	fab3 f383 	clz	r3, r3
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	3301      	adds	r3, #1
 80058ae:	f003 031f 	and.w	r3, r3, #31
 80058b2:	2101      	movs	r1, #1
 80058b4:	fa01 f303 	lsl.w	r3, r1, r3
 80058b8:	ea42 0103 	orr.w	r1, r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10d      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x820>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	0e9b      	lsrs	r3, r3, #26
 80058ce:	3301      	adds	r3, #1
 80058d0:	f003 021f 	and.w	r2, r3, #31
 80058d4:	4613      	mov	r3, r2
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	4413      	add	r3, r2
 80058da:	3b1e      	subs	r3, #30
 80058dc:	051b      	lsls	r3, r3, #20
 80058de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80058e2:	e01b      	b.n	800591c <HAL_ADC_ConfigChannel+0x858>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	fa93 f3a3 	rbit	r3, r3
 80058f0:	60fb      	str	r3, [r7, #12]
  return result;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80058fc:	2320      	movs	r3, #32
 80058fe:	e003      	b.n	8005908 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	fab3 f383 	clz	r3, r3
 8005906:	b2db      	uxtb	r3, r3
 8005908:	3301      	adds	r3, #1
 800590a:	f003 021f 	and.w	r2, r3, #31
 800590e:	4613      	mov	r3, r2
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	4413      	add	r3, r2
 8005914:	3b1e      	subs	r3, #30
 8005916:	051b      	lsls	r3, r3, #20
 8005918:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800591c:	430b      	orrs	r3, r1
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	6892      	ldr	r2, [r2, #8]
 8005922:	4619      	mov	r1, r3
 8005924:	f7ff f8d2 	bl	8004acc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f280 80d7 	bge.w	8005ae0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a06      	ldr	r2, [pc, #24]	; (8005950 <HAL_ADC_ConfigChannel+0x88c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d004      	beq.n	8005946 <HAL_ADC_ConfigChannel+0x882>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a04      	ldr	r2, [pc, #16]	; (8005954 <HAL_ADC_ConfigChannel+0x890>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d10a      	bne.n	800595c <HAL_ADC_ConfigChannel+0x898>
 8005946:	4b04      	ldr	r3, [pc, #16]	; (8005958 <HAL_ADC_ConfigChannel+0x894>)
 8005948:	e009      	b.n	800595e <HAL_ADC_ConfigChannel+0x89a>
 800594a:	bf00      	nop
 800594c:	47ff0000 	.word	0x47ff0000
 8005950:	40022000 	.word	0x40022000
 8005954:	40022100 	.word	0x40022100
 8005958:	40022300 	.word	0x40022300
 800595c:	4b65      	ldr	r3, [pc, #404]	; (8005af4 <HAL_ADC_ConfigChannel+0xa30>)
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe ff88 	bl	8004874 <LL_ADC_GetCommonPathInternalCh>
 8005964:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a62      	ldr	r2, [pc, #392]	; (8005af8 <HAL_ADC_ConfigChannel+0xa34>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_ADC_ConfigChannel+0x8b8>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a61      	ldr	r2, [pc, #388]	; (8005afc <HAL_ADC_ConfigChannel+0xa38>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d10e      	bne.n	800599a <HAL_ADC_ConfigChannel+0x8d6>
 800597c:	485e      	ldr	r0, [pc, #376]	; (8005af8 <HAL_ADC_ConfigChannel+0xa34>)
 800597e:	f7ff f95f 	bl	8004c40 <LL_ADC_IsEnabled>
 8005982:	4604      	mov	r4, r0
 8005984:	485d      	ldr	r0, [pc, #372]	; (8005afc <HAL_ADC_ConfigChannel+0xa38>)
 8005986:	f7ff f95b 	bl	8004c40 <LL_ADC_IsEnabled>
 800598a:	4603      	mov	r3, r0
 800598c:	4323      	orrs	r3, r4
 800598e:	2b00      	cmp	r3, #0
 8005990:	bf0c      	ite	eq
 8005992:	2301      	moveq	r3, #1
 8005994:	2300      	movne	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	e008      	b.n	80059ac <HAL_ADC_ConfigChannel+0x8e8>
 800599a:	4859      	ldr	r0, [pc, #356]	; (8005b00 <HAL_ADC_ConfigChannel+0xa3c>)
 800599c:	f7ff f950 	bl	8004c40 <LL_ADC_IsEnabled>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bf0c      	ite	eq
 80059a6:	2301      	moveq	r3, #1
 80059a8:	2300      	movne	r3, #0
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8084 	beq.w	8005aba <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a53      	ldr	r2, [pc, #332]	; (8005b04 <HAL_ADC_ConfigChannel+0xa40>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d132      	bne.n	8005a22 <HAL_ADC_ConfigChannel+0x95e>
 80059bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d12c      	bne.n	8005a22 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a4c      	ldr	r2, [pc, #304]	; (8005b00 <HAL_ADC_ConfigChannel+0xa3c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f040 8086 	bne.w	8005ae0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a47      	ldr	r2, [pc, #284]	; (8005af8 <HAL_ADC_ConfigChannel+0xa34>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_ADC_ConfigChannel+0x924>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a46      	ldr	r2, [pc, #280]	; (8005afc <HAL_ADC_ConfigChannel+0xa38>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d101      	bne.n	80059ec <HAL_ADC_ConfigChannel+0x928>
 80059e8:	4a47      	ldr	r2, [pc, #284]	; (8005b08 <HAL_ADC_ConfigChannel+0xa44>)
 80059ea:	e000      	b.n	80059ee <HAL_ADC_ConfigChannel+0x92a>
 80059ec:	4a41      	ldr	r2, [pc, #260]	; (8005af4 <HAL_ADC_ConfigChannel+0xa30>)
 80059ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f7fe ff28 	bl	800484e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059fe:	4b43      	ldr	r3, [pc, #268]	; (8005b0c <HAL_ADC_ConfigChannel+0xa48>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	099b      	lsrs	r3, r3, #6
 8005a04:	4a42      	ldr	r2, [pc, #264]	; (8005b10 <HAL_ADC_ConfigChannel+0xa4c>)
 8005a06:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0a:	099b      	lsrs	r3, r3, #6
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005a12:	e002      	b.n	8005a1a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f9      	bne.n	8005a14 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a20:	e05e      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a3b      	ldr	r2, [pc, #236]	; (8005b14 <HAL_ADC_ConfigChannel+0xa50>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d120      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x9aa>
 8005a2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d11a      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a30      	ldr	r2, [pc, #192]	; (8005b00 <HAL_ADC_ConfigChannel+0xa3c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d14e      	bne.n	8005ae0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2c      	ldr	r2, [pc, #176]	; (8005af8 <HAL_ADC_ConfigChannel+0xa34>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d004      	beq.n	8005a56 <HAL_ADC_ConfigChannel+0x992>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <HAL_ADC_ConfigChannel+0xa38>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d101      	bne.n	8005a5a <HAL_ADC_ConfigChannel+0x996>
 8005a56:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <HAL_ADC_ConfigChannel+0xa44>)
 8005a58:	e000      	b.n	8005a5c <HAL_ADC_ConfigChannel+0x998>
 8005a5a:	4a26      	ldr	r2, [pc, #152]	; (8005af4 <HAL_ADC_ConfigChannel+0xa30>)
 8005a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f7fe fef1 	bl	800484e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a6c:	e038      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a29      	ldr	r2, [pc, #164]	; (8005b18 <HAL_ADC_ConfigChannel+0xa54>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d133      	bne.n	8005ae0 <HAL_ADC_ConfigChannel+0xa1c>
 8005a78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d12d      	bne.n	8005ae0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1d      	ldr	r2, [pc, #116]	; (8005b00 <HAL_ADC_ConfigChannel+0xa3c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d128      	bne.n	8005ae0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <HAL_ADC_ConfigChannel+0xa34>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_ADC_ConfigChannel+0x9de>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <HAL_ADC_ConfigChannel+0xa38>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <HAL_ADC_ConfigChannel+0x9e2>
 8005aa2:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <HAL_ADC_ConfigChannel+0xa44>)
 8005aa4:	e000      	b.n	8005aa8 <HAL_ADC_ConfigChannel+0x9e4>
 8005aa6:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <HAL_ADC_ConfigChannel+0xa30>)
 8005aa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f7fe fecb 	bl	800484e <LL_ADC_SetCommonPathInternalCh>
 8005ab8:	e012      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005abe:	f043 0220 	orr.w	r2, r3, #32
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005acc:	e008      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005ae8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	37e4      	adds	r7, #228	; 0xe4
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd90      	pop	{r4, r7, pc}
 8005af4:	58026300 	.word	0x58026300
 8005af8:	40022000 	.word	0x40022000
 8005afc:	40022100 	.word	0x40022100
 8005b00:	58026000 	.word	0x58026000
 8005b04:	c7520000 	.word	0xc7520000
 8005b08:	40022300 	.word	0x40022300
 8005b0c:	24000000 	.word	0x24000000
 8005b10:	053e2d63 	.word	0x053e2d63
 8005b14:	c3210000 	.word	0xc3210000
 8005b18:	cb840000 	.word	0xcb840000

08005b1c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a6c      	ldr	r2, [pc, #432]	; (8005cdc <ADC_ConfigureBoostMode+0x1c0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <ADC_ConfigureBoostMode+0x1c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6b      	ldr	r2, [pc, #428]	; (8005ce0 <ADC_ConfigureBoostMode+0x1c4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d109      	bne.n	8005b4c <ADC_ConfigureBoostMode+0x30>
 8005b38:	4b6a      	ldr	r3, [pc, #424]	; (8005ce4 <ADC_ConfigureBoostMode+0x1c8>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf14      	ite	ne
 8005b44:	2301      	movne	r3, #1
 8005b46:	2300      	moveq	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	e008      	b.n	8005b5e <ADC_ConfigureBoostMode+0x42>
 8005b4c:	4b66      	ldr	r3, [pc, #408]	; (8005ce8 <ADC_ConfigureBoostMode+0x1cc>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01c      	beq.n	8005b9c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005b62:	f005 f895 	bl	800ac90 <HAL_RCC_GetHCLKFreq>
 8005b66:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b70:	d010      	beq.n	8005b94 <ADC_ConfigureBoostMode+0x78>
 8005b72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b76:	d873      	bhi.n	8005c60 <ADC_ConfigureBoostMode+0x144>
 8005b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7c:	d002      	beq.n	8005b84 <ADC_ConfigureBoostMode+0x68>
 8005b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b82:	d16d      	bne.n	8005c60 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	0c1b      	lsrs	r3, r3, #16
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	60fb      	str	r3, [r7, #12]
        break;
 8005b92:	e068      	b.n	8005c66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	089b      	lsrs	r3, r3, #2
 8005b98:	60fb      	str	r3, [r7, #12]
        break;
 8005b9a:	e064      	b.n	8005c66 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005b9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	f006 fa70 	bl	800c088 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ba8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005bb2:	d051      	beq.n	8005c58 <ADC_ConfigureBoostMode+0x13c>
 8005bb4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005bb8:	d854      	bhi.n	8005c64 <ADC_ConfigureBoostMode+0x148>
 8005bba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005bbe:	d047      	beq.n	8005c50 <ADC_ConfigureBoostMode+0x134>
 8005bc0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005bc4:	d84e      	bhi.n	8005c64 <ADC_ConfigureBoostMode+0x148>
 8005bc6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005bca:	d03d      	beq.n	8005c48 <ADC_ConfigureBoostMode+0x12c>
 8005bcc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005bd0:	d848      	bhi.n	8005c64 <ADC_ConfigureBoostMode+0x148>
 8005bd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bd6:	d033      	beq.n	8005c40 <ADC_ConfigureBoostMode+0x124>
 8005bd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bdc:	d842      	bhi.n	8005c64 <ADC_ConfigureBoostMode+0x148>
 8005bde:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005be2:	d029      	beq.n	8005c38 <ADC_ConfigureBoostMode+0x11c>
 8005be4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005be8:	d83c      	bhi.n	8005c64 <ADC_ConfigureBoostMode+0x148>
 8005bea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005bee:	d01a      	beq.n	8005c26 <ADC_ConfigureBoostMode+0x10a>
 8005bf0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005bf4:	d836      	bhi.n	8005c64 <ADC_ConfigureBoostMode+0x148>
 8005bf6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005bfa:	d014      	beq.n	8005c26 <ADC_ConfigureBoostMode+0x10a>
 8005bfc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005c00:	d830      	bhi.n	8005c64 <ADC_ConfigureBoostMode+0x148>
 8005c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c06:	d00e      	beq.n	8005c26 <ADC_ConfigureBoostMode+0x10a>
 8005c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c0c:	d82a      	bhi.n	8005c64 <ADC_ConfigureBoostMode+0x148>
 8005c0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c12:	d008      	beq.n	8005c26 <ADC_ConfigureBoostMode+0x10a>
 8005c14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c18:	d824      	bhi.n	8005c64 <ADC_ConfigureBoostMode+0x148>
 8005c1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c1e:	d002      	beq.n	8005c26 <ADC_ConfigureBoostMode+0x10a>
 8005c20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c24:	d11e      	bne.n	8005c64 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	0c9b      	lsrs	r3, r3, #18
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	60fb      	str	r3, [r7, #12]
        break;
 8005c36:	e016      	b.n	8005c66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	091b      	lsrs	r3, r3, #4
 8005c3c:	60fb      	str	r3, [r7, #12]
        break;
 8005c3e:	e012      	b.n	8005c66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	60fb      	str	r3, [r7, #12]
        break;
 8005c46:	e00e      	b.n	8005c66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	099b      	lsrs	r3, r3, #6
 8005c4c:	60fb      	str	r3, [r7, #12]
        break;
 8005c4e:	e00a      	b.n	8005c66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	09db      	lsrs	r3, r3, #7
 8005c54:	60fb      	str	r3, [r7, #12]
        break;
 8005c56:	e006      	b.n	8005c66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	60fb      	str	r3, [r7, #12]
        break;
 8005c5e:	e002      	b.n	8005c66 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005c60:	bf00      	nop
 8005c62:	e000      	b.n	8005c66 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005c64:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4a1f      	ldr	r2, [pc, #124]	; (8005cec <ADC_ConfigureBoostMode+0x1d0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d808      	bhi.n	8005c86 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c82:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005c84:	e025      	b.n	8005cd2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a19      	ldr	r2, [pc, #100]	; (8005cf0 <ADC_ConfigureBoostMode+0x1d4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d80a      	bhi.n	8005ca4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ca0:	609a      	str	r2, [r3, #8]
}
 8005ca2:	e016      	b.n	8005cd2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <ADC_ConfigureBoostMode+0x1d8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d80a      	bhi.n	8005cc2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cbe:	609a      	str	r2, [r3, #8]
}
 8005cc0:	e007      	b.n	8005cd2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005cd0:	609a      	str	r2, [r3, #8]
}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40022000 	.word	0x40022000
 8005ce0:	40022100 	.word	0x40022100
 8005ce4:	40022300 	.word	0x40022300
 8005ce8:	58026300 	.word	0x58026300
 8005cec:	005f5e10 	.word	0x005f5e10
 8005cf0:	00bebc20 	.word	0x00bebc20
 8005cf4:	017d7840 	.word	0x017d7840

08005cf8 <LL_ADC_IsEnabled>:
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <LL_ADC_IsEnabled+0x18>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <LL_ADC_IsEnabled+0x1a>
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <LL_ADC_REG_IsConversionOngoing>:
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d101      	bne.n	8005d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b0a3      	sub	sp, #140	; 0x8c
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e0c1      	b.n	8005ee6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a5e      	ldr	r2, [pc, #376]	; (8005ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d102      	bne.n	8005d82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005d7c:	4b5d      	ldr	r3, [pc, #372]	; (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e001      	b.n	8005d86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d90:	f043 0220 	orr.w	r2, r3, #32
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0a0      	b.n	8005ee6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff ffb9 	bl	8005d1e <LL_ADC_REG_IsConversionOngoing>
 8005dac:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff ffb2 	bl	8005d1e <LL_ADC_REG_IsConversionOngoing>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f040 8081 	bne.w	8005ec4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d17c      	bne.n	8005ec4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a48      	ldr	r2, [pc, #288]	; (8005ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d004      	beq.n	8005dde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a46      	ldr	r2, [pc, #280]	; (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d101      	bne.n	8005de2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005dde:	4b46      	ldr	r3, [pc, #280]	; (8005ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005de0:	e000      	b.n	8005de4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005de2:	4b46      	ldr	r3, [pc, #280]	; (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005de4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d039      	beq.n	8005e62 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dfe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a3a      	ldr	r2, [pc, #232]	; (8005ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d004      	beq.n	8005e14 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a39      	ldr	r2, [pc, #228]	; (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d10e      	bne.n	8005e32 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005e14:	4836      	ldr	r0, [pc, #216]	; (8005ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e16:	f7ff ff6f 	bl	8005cf8 <LL_ADC_IsEnabled>
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4835      	ldr	r0, [pc, #212]	; (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e1e:	f7ff ff6b 	bl	8005cf8 <LL_ADC_IsEnabled>
 8005e22:	4603      	mov	r3, r0
 8005e24:	4323      	orrs	r3, r4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bf0c      	ite	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	e008      	b.n	8005e44 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005e32:	4833      	ldr	r0, [pc, #204]	; (8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005e34:	f7ff ff60 	bl	8005cf8 <LL_ADC_IsEnabled>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bf0c      	ite	eq
 8005e3e:	2301      	moveq	r3, #1
 8005e40:	2300      	movne	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d047      	beq.n	8005ed8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	4b2d      	ldr	r3, [pc, #180]	; (8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	6811      	ldr	r1, [r2, #0]
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	6892      	ldr	r2, [r2, #8]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e5e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e60:	e03a      	b.n	8005ed8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005e62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e6c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d10e      	bne.n	8005ea0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005e82:	481b      	ldr	r0, [pc, #108]	; (8005ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e84:	f7ff ff38 	bl	8005cf8 <LL_ADC_IsEnabled>
 8005e88:	4604      	mov	r4, r0
 8005e8a:	481a      	ldr	r0, [pc, #104]	; (8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e8c:	f7ff ff34 	bl	8005cf8 <LL_ADC_IsEnabled>
 8005e90:	4603      	mov	r3, r0
 8005e92:	4323      	orrs	r3, r4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e008      	b.n	8005eb2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005ea0:	4817      	ldr	r0, [pc, #92]	; (8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005ea2:	f7ff ff29 	bl	8005cf8 <LL_ADC_IsEnabled>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d010      	beq.n	8005ed8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005eb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ec0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ec2:	e009      	b.n	8005ed8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec8:	f043 0220 	orr.w	r2, r3, #32
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005ed6:	e000      	b.n	8005eda <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ed8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005ee2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	378c      	adds	r7, #140	; 0x8c
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd90      	pop	{r4, r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40022000 	.word	0x40022000
 8005ef4:	40022100 	.word	0x40022100
 8005ef8:	40022300 	.word	0x40022300
 8005efc:	58026300 	.word	0x58026300
 8005f00:	58026000 	.word	0x58026000
 8005f04:	fffff0e0 	.word	0xfffff0e0

08005f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f18:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <__NVIC_SetPriorityGrouping+0x40>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f24:	4013      	ands	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005f30:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <__NVIC_SetPriorityGrouping+0x44>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f36:	4a04      	ldr	r2, [pc, #16]	; (8005f48 <__NVIC_SetPriorityGrouping+0x40>)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	60d3      	str	r3, [r2, #12]
}
 8005f3c:	bf00      	nop
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	e000ed00 	.word	0xe000ed00
 8005f4c:	05fa0000 	.word	0x05fa0000

08005f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f54:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <__NVIC_GetPriorityGrouping+0x18>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	f003 0307 	and.w	r3, r3, #7
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	e000ed00 	.word	0xe000ed00

08005f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	db0b      	blt.n	8005f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	f003 021f 	and.w	r2, r3, #31
 8005f84:	4907      	ldr	r1, [pc, #28]	; (8005fa4 <__NVIC_EnableIRQ+0x38>)
 8005f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	e000e100 	.word	0xe000e100

08005fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	6039      	str	r1, [r7, #0]
 8005fb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	db0a      	blt.n	8005fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	490c      	ldr	r1, [pc, #48]	; (8005ff4 <__NVIC_SetPriority+0x4c>)
 8005fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fc6:	0112      	lsls	r2, r2, #4
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	440b      	add	r3, r1
 8005fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fd0:	e00a      	b.n	8005fe8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	4908      	ldr	r1, [pc, #32]	; (8005ff8 <__NVIC_SetPriority+0x50>)
 8005fd8:	88fb      	ldrh	r3, [r7, #6]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	3b04      	subs	r3, #4
 8005fe0:	0112      	lsls	r2, r2, #4
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	761a      	strb	r2, [r3, #24]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	e000e100 	.word	0xe000e100
 8005ff8:	e000ed00 	.word	0xe000ed00

08005ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b089      	sub	sp, #36	; 0x24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f1c3 0307 	rsb	r3, r3, #7
 8006016:	2b04      	cmp	r3, #4
 8006018:	bf28      	it	cs
 800601a:	2304      	movcs	r3, #4
 800601c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	3304      	adds	r3, #4
 8006022:	2b06      	cmp	r3, #6
 8006024:	d902      	bls.n	800602c <NVIC_EncodePriority+0x30>
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	3b03      	subs	r3, #3
 800602a:	e000      	b.n	800602e <NVIC_EncodePriority+0x32>
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006030:	f04f 32ff 	mov.w	r2, #4294967295
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	fa02 f303 	lsl.w	r3, r2, r3
 800603a:	43da      	mvns	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	401a      	ands	r2, r3
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006044:	f04f 31ff 	mov.w	r1, #4294967295
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	43d9      	mvns	r1, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006054:	4313      	orrs	r3, r2
         );
}
 8006056:	4618      	mov	r0, r3
 8006058:	3724      	adds	r7, #36	; 0x24
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3b01      	subs	r3, #1
 8006070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006074:	d301      	bcc.n	800607a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006076:	2301      	movs	r3, #1
 8006078:	e00f      	b.n	800609a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800607a:	4a0a      	ldr	r2, [pc, #40]	; (80060a4 <SysTick_Config+0x40>)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3b01      	subs	r3, #1
 8006080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006082:	210f      	movs	r1, #15
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	f7ff ff8e 	bl	8005fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <SysTick_Config+0x40>)
 800608e:	2200      	movs	r2, #0
 8006090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006092:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <SysTick_Config+0x40>)
 8006094:	2207      	movs	r2, #7
 8006096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	e000e010 	.word	0xe000e010

080060a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff ff29 	bl	8005f08 <__NVIC_SetPriorityGrouping>
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b086      	sub	sp, #24
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	4603      	mov	r3, r0
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80060cc:	f7ff ff40 	bl	8005f50 <__NVIC_GetPriorityGrouping>
 80060d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	6978      	ldr	r0, [r7, #20]
 80060d8:	f7ff ff90 	bl	8005ffc <NVIC_EncodePriority>
 80060dc:	4602      	mov	r2, r0
 80060de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80060e2:	4611      	mov	r1, r2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff ff5f 	bl	8005fa8 <__NVIC_SetPriority>
}
 80060ea:	bf00      	nop
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b082      	sub	sp, #8
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	4603      	mov	r3, r0
 80060fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff ff33 	bl	8005f6c <__NVIC_EnableIRQ>
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff ffa4 	bl	8006064 <SysTick_Config>
 800611c:	4603      	mov	r3, r0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006130:	f7fe fb34 	bl	800479c <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e312      	b.n	8006766 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a66      	ldr	r2, [pc, #408]	; (80062e0 <HAL_DMA_Init+0x1b8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d04a      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a65      	ldr	r2, [pc, #404]	; (80062e4 <HAL_DMA_Init+0x1bc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d045      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a63      	ldr	r2, [pc, #396]	; (80062e8 <HAL_DMA_Init+0x1c0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d040      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a62      	ldr	r2, [pc, #392]	; (80062ec <HAL_DMA_Init+0x1c4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d03b      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a60      	ldr	r2, [pc, #384]	; (80062f0 <HAL_DMA_Init+0x1c8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d036      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a5f      	ldr	r2, [pc, #380]	; (80062f4 <HAL_DMA_Init+0x1cc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d031      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a5d      	ldr	r2, [pc, #372]	; (80062f8 <HAL_DMA_Init+0x1d0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d02c      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a5c      	ldr	r2, [pc, #368]	; (80062fc <HAL_DMA_Init+0x1d4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d027      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a5a      	ldr	r2, [pc, #360]	; (8006300 <HAL_DMA_Init+0x1d8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d022      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a59      	ldr	r2, [pc, #356]	; (8006304 <HAL_DMA_Init+0x1dc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d01d      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a57      	ldr	r2, [pc, #348]	; (8006308 <HAL_DMA_Init+0x1e0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d018      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a56      	ldr	r2, [pc, #344]	; (800630c <HAL_DMA_Init+0x1e4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a54      	ldr	r2, [pc, #336]	; (8006310 <HAL_DMA_Init+0x1e8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a53      	ldr	r2, [pc, #332]	; (8006314 <HAL_DMA_Init+0x1ec>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a51      	ldr	r2, [pc, #324]	; (8006318 <HAL_DMA_Init+0x1f0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_DMA_Init+0xb8>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a50      	ldr	r2, [pc, #320]	; (800631c <HAL_DMA_Init+0x1f4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d101      	bne.n	80061e4 <HAL_DMA_Init+0xbc>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <HAL_DMA_Init+0xbe>
 80061e4:	2300      	movs	r3, #0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 813c 	beq.w	8006464 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a37      	ldr	r2, [pc, #220]	; (80062e0 <HAL_DMA_Init+0x1b8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d04a      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a36      	ldr	r2, [pc, #216]	; (80062e4 <HAL_DMA_Init+0x1bc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d045      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a34      	ldr	r2, [pc, #208]	; (80062e8 <HAL_DMA_Init+0x1c0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d040      	beq.n	800629c <HAL_DMA_Init+0x174>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a33      	ldr	r2, [pc, #204]	; (80062ec <HAL_DMA_Init+0x1c4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d03b      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a31      	ldr	r2, [pc, #196]	; (80062f0 <HAL_DMA_Init+0x1c8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d036      	beq.n	800629c <HAL_DMA_Init+0x174>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a30      	ldr	r2, [pc, #192]	; (80062f4 <HAL_DMA_Init+0x1cc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d031      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a2e      	ldr	r2, [pc, #184]	; (80062f8 <HAL_DMA_Init+0x1d0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d02c      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a2d      	ldr	r2, [pc, #180]	; (80062fc <HAL_DMA_Init+0x1d4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d027      	beq.n	800629c <HAL_DMA_Init+0x174>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2b      	ldr	r2, [pc, #172]	; (8006300 <HAL_DMA_Init+0x1d8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d022      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2a      	ldr	r2, [pc, #168]	; (8006304 <HAL_DMA_Init+0x1dc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d01d      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a28      	ldr	r2, [pc, #160]	; (8006308 <HAL_DMA_Init+0x1e0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d018      	beq.n	800629c <HAL_DMA_Init+0x174>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a27      	ldr	r2, [pc, #156]	; (800630c <HAL_DMA_Init+0x1e4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a25      	ldr	r2, [pc, #148]	; (8006310 <HAL_DMA_Init+0x1e8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00e      	beq.n	800629c <HAL_DMA_Init+0x174>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a24      	ldr	r2, [pc, #144]	; (8006314 <HAL_DMA_Init+0x1ec>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d009      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a22      	ldr	r2, [pc, #136]	; (8006318 <HAL_DMA_Init+0x1f0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <HAL_DMA_Init+0x174>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a21      	ldr	r2, [pc, #132]	; (800631c <HAL_DMA_Init+0x1f4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <HAL_DMA_Init+0x186>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	e007      	b.n	80062be <HAL_DMA_Init+0x196>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0201 	bic.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80062be:	e02f      	b.n	8006320 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062c0:	f7fe fa6c 	bl	800479c <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b05      	cmp	r3, #5
 80062cc:	d928      	bls.n	8006320 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2203      	movs	r2, #3
 80062d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e242      	b.n	8006766 <HAL_DMA_Init+0x63e>
 80062e0:	40020010 	.word	0x40020010
 80062e4:	40020028 	.word	0x40020028
 80062e8:	40020040 	.word	0x40020040
 80062ec:	40020058 	.word	0x40020058
 80062f0:	40020070 	.word	0x40020070
 80062f4:	40020088 	.word	0x40020088
 80062f8:	400200a0 	.word	0x400200a0
 80062fc:	400200b8 	.word	0x400200b8
 8006300:	40020410 	.word	0x40020410
 8006304:	40020428 	.word	0x40020428
 8006308:	40020440 	.word	0x40020440
 800630c:	40020458 	.word	0x40020458
 8006310:	40020470 	.word	0x40020470
 8006314:	40020488 	.word	0x40020488
 8006318:	400204a0 	.word	0x400204a0
 800631c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1c8      	bne.n	80062c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4b83      	ldr	r3, [pc, #524]	; (8006548 <HAL_DMA_Init+0x420>)
 800633a:	4013      	ands	r3, r2
 800633c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006346:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006352:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800635e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b04      	cmp	r3, #4
 8006372:	d107      	bne.n	8006384 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637c:	4313      	orrs	r3, r2
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b28      	cmp	r3, #40	; 0x28
 800638a:	d903      	bls.n	8006394 <HAL_DMA_Init+0x26c>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b2e      	cmp	r3, #46	; 0x2e
 8006392:	d91f      	bls.n	80063d4 <HAL_DMA_Init+0x2ac>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b3e      	cmp	r3, #62	; 0x3e
 800639a:	d903      	bls.n	80063a4 <HAL_DMA_Init+0x27c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2b42      	cmp	r3, #66	; 0x42
 80063a2:	d917      	bls.n	80063d4 <HAL_DMA_Init+0x2ac>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b46      	cmp	r3, #70	; 0x46
 80063aa:	d903      	bls.n	80063b4 <HAL_DMA_Init+0x28c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	2b48      	cmp	r3, #72	; 0x48
 80063b2:	d90f      	bls.n	80063d4 <HAL_DMA_Init+0x2ac>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2b4e      	cmp	r3, #78	; 0x4e
 80063ba:	d903      	bls.n	80063c4 <HAL_DMA_Init+0x29c>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b52      	cmp	r3, #82	; 0x52
 80063c2:	d907      	bls.n	80063d4 <HAL_DMA_Init+0x2ac>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b73      	cmp	r3, #115	; 0x73
 80063ca:	d905      	bls.n	80063d8 <HAL_DMA_Init+0x2b0>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b77      	cmp	r3, #119	; 0x77
 80063d2:	d801      	bhi.n	80063d8 <HAL_DMA_Init+0x2b0>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <HAL_DMA_Init+0x2b2>
 80063d8:	2300      	movs	r3, #0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063e4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 0307 	bic.w	r3, r3, #7
 80063fc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	2b04      	cmp	r3, #4
 800640e:	d117      	bne.n	8006440 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00e      	beq.n	8006440 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 f9b4 	bl	8007790 <DMA_CheckFifoParam>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d008      	beq.n	8006440 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2240      	movs	r2, #64	; 0x40
 8006432:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e192      	b.n	8006766 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 f8ef 	bl	800762c <DMA_CalcBaseAndBitshift>
 800644e:	4603      	mov	r3, r0
 8006450:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	223f      	movs	r2, #63	; 0x3f
 800645c:	409a      	lsls	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	609a      	str	r2, [r3, #8]
 8006462:	e0c8      	b.n	80065f6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a38      	ldr	r2, [pc, #224]	; (800654c <HAL_DMA_Init+0x424>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d022      	beq.n	80064b4 <HAL_DMA_Init+0x38c>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a37      	ldr	r2, [pc, #220]	; (8006550 <HAL_DMA_Init+0x428>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d01d      	beq.n	80064b4 <HAL_DMA_Init+0x38c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a35      	ldr	r2, [pc, #212]	; (8006554 <HAL_DMA_Init+0x42c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d018      	beq.n	80064b4 <HAL_DMA_Init+0x38c>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a34      	ldr	r2, [pc, #208]	; (8006558 <HAL_DMA_Init+0x430>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d013      	beq.n	80064b4 <HAL_DMA_Init+0x38c>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a32      	ldr	r2, [pc, #200]	; (800655c <HAL_DMA_Init+0x434>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00e      	beq.n	80064b4 <HAL_DMA_Init+0x38c>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a31      	ldr	r2, [pc, #196]	; (8006560 <HAL_DMA_Init+0x438>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d009      	beq.n	80064b4 <HAL_DMA_Init+0x38c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a2f      	ldr	r2, [pc, #188]	; (8006564 <HAL_DMA_Init+0x43c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <HAL_DMA_Init+0x38c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a2e      	ldr	r2, [pc, #184]	; (8006568 <HAL_DMA_Init+0x440>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d101      	bne.n	80064b8 <HAL_DMA_Init+0x390>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <HAL_DMA_Init+0x392>
 80064b8:	2300      	movs	r3, #0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 8092 	beq.w	80065e4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a21      	ldr	r2, [pc, #132]	; (800654c <HAL_DMA_Init+0x424>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d021      	beq.n	800650e <HAL_DMA_Init+0x3e6>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a20      	ldr	r2, [pc, #128]	; (8006550 <HAL_DMA_Init+0x428>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d01c      	beq.n	800650e <HAL_DMA_Init+0x3e6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1e      	ldr	r2, [pc, #120]	; (8006554 <HAL_DMA_Init+0x42c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d017      	beq.n	800650e <HAL_DMA_Init+0x3e6>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1d      	ldr	r2, [pc, #116]	; (8006558 <HAL_DMA_Init+0x430>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d012      	beq.n	800650e <HAL_DMA_Init+0x3e6>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1b      	ldr	r2, [pc, #108]	; (800655c <HAL_DMA_Init+0x434>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00d      	beq.n	800650e <HAL_DMA_Init+0x3e6>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1a      	ldr	r2, [pc, #104]	; (8006560 <HAL_DMA_Init+0x438>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d008      	beq.n	800650e <HAL_DMA_Init+0x3e6>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a18      	ldr	r2, [pc, #96]	; (8006564 <HAL_DMA_Init+0x43c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d003      	beq.n	800650e <HAL_DMA_Init+0x3e6>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a17      	ldr	r2, [pc, #92]	; (8006568 <HAL_DMA_Init+0x440>)
 800650c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4b10      	ldr	r3, [pc, #64]	; (800656c <HAL_DMA_Init+0x444>)
 800652a:	4013      	ands	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	d01c      	beq.n	8006570 <HAL_DMA_Init+0x448>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	d102      	bne.n	8006544 <HAL_DMA_Init+0x41c>
 800653e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006542:	e016      	b.n	8006572 <HAL_DMA_Init+0x44a>
 8006544:	2300      	movs	r3, #0
 8006546:	e014      	b.n	8006572 <HAL_DMA_Init+0x44a>
 8006548:	fe10803f 	.word	0xfe10803f
 800654c:	58025408 	.word	0x58025408
 8006550:	5802541c 	.word	0x5802541c
 8006554:	58025430 	.word	0x58025430
 8006558:	58025444 	.word	0x58025444
 800655c:	58025458 	.word	0x58025458
 8006560:	5802546c 	.word	0x5802546c
 8006564:	58025480 	.word	0x58025480
 8006568:	58025494 	.word	0x58025494
 800656c:	fffe000f 	.word	0xfffe000f
 8006570:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	68d2      	ldr	r2, [r2, #12]
 8006576:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006578:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006580:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006588:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006590:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006598:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80065a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	4b6e      	ldr	r3, [pc, #440]	; (8006770 <HAL_DMA_Init+0x648>)
 80065b8:	4413      	add	r3, r2
 80065ba:	4a6e      	ldr	r2, [pc, #440]	; (8006774 <HAL_DMA_Init+0x64c>)
 80065bc:	fba2 2303 	umull	r2, r3, r2, r3
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	009a      	lsls	r2, r3, #2
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 f82f 	bl	800762c <DMA_CalcBaseAndBitshift>
 80065ce:	4603      	mov	r3, r0
 80065d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2201      	movs	r2, #1
 80065dc:	409a      	lsls	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	e008      	b.n	80065f6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2240      	movs	r2, #64	; 0x40
 80065e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2203      	movs	r2, #3
 80065ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e0b7      	b.n	8006766 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a5f      	ldr	r2, [pc, #380]	; (8006778 <HAL_DMA_Init+0x650>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d072      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a5d      	ldr	r2, [pc, #372]	; (800677c <HAL_DMA_Init+0x654>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d06d      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a5c      	ldr	r2, [pc, #368]	; (8006780 <HAL_DMA_Init+0x658>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d068      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a5a      	ldr	r2, [pc, #360]	; (8006784 <HAL_DMA_Init+0x65c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d063      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a59      	ldr	r2, [pc, #356]	; (8006788 <HAL_DMA_Init+0x660>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d05e      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a57      	ldr	r2, [pc, #348]	; (800678c <HAL_DMA_Init+0x664>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d059      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a56      	ldr	r2, [pc, #344]	; (8006790 <HAL_DMA_Init+0x668>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d054      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a54      	ldr	r2, [pc, #336]	; (8006794 <HAL_DMA_Init+0x66c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d04f      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a53      	ldr	r2, [pc, #332]	; (8006798 <HAL_DMA_Init+0x670>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d04a      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a51      	ldr	r2, [pc, #324]	; (800679c <HAL_DMA_Init+0x674>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d045      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a50      	ldr	r2, [pc, #320]	; (80067a0 <HAL_DMA_Init+0x678>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d040      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a4e      	ldr	r2, [pc, #312]	; (80067a4 <HAL_DMA_Init+0x67c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d03b      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a4d      	ldr	r2, [pc, #308]	; (80067a8 <HAL_DMA_Init+0x680>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d036      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a4b      	ldr	r2, [pc, #300]	; (80067ac <HAL_DMA_Init+0x684>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d031      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a4a      	ldr	r2, [pc, #296]	; (80067b0 <HAL_DMA_Init+0x688>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d02c      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a48      	ldr	r2, [pc, #288]	; (80067b4 <HAL_DMA_Init+0x68c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d027      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a47      	ldr	r2, [pc, #284]	; (80067b8 <HAL_DMA_Init+0x690>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d022      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a45      	ldr	r2, [pc, #276]	; (80067bc <HAL_DMA_Init+0x694>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01d      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a44      	ldr	r2, [pc, #272]	; (80067c0 <HAL_DMA_Init+0x698>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d018      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a42      	ldr	r2, [pc, #264]	; (80067c4 <HAL_DMA_Init+0x69c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a41      	ldr	r2, [pc, #260]	; (80067c8 <HAL_DMA_Init+0x6a0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a3f      	ldr	r2, [pc, #252]	; (80067cc <HAL_DMA_Init+0x6a4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a3e      	ldr	r2, [pc, #248]	; (80067d0 <HAL_DMA_Init+0x6a8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_DMA_Init+0x5be>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a3c      	ldr	r2, [pc, #240]	; (80067d4 <HAL_DMA_Init+0x6ac>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d101      	bne.n	80066ea <HAL_DMA_Init+0x5c2>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <HAL_DMA_Init+0x5c4>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d032      	beq.n	8006756 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 f8c9 	bl	8007888 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b80      	cmp	r3, #128	; 0x80
 80066fc:	d102      	bne.n	8006704 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006718:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d010      	beq.n	8006744 <HAL_DMA_Init+0x61c>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2b08      	cmp	r3, #8
 8006728:	d80c      	bhi.n	8006744 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 f946 	bl	80079bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006740:	605a      	str	r2, [r3, #4]
 8006742:	e008      	b.n	8006756 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	a7fdabf8 	.word	0xa7fdabf8
 8006774:	cccccccd 	.word	0xcccccccd
 8006778:	40020010 	.word	0x40020010
 800677c:	40020028 	.word	0x40020028
 8006780:	40020040 	.word	0x40020040
 8006784:	40020058 	.word	0x40020058
 8006788:	40020070 	.word	0x40020070
 800678c:	40020088 	.word	0x40020088
 8006790:	400200a0 	.word	0x400200a0
 8006794:	400200b8 	.word	0x400200b8
 8006798:	40020410 	.word	0x40020410
 800679c:	40020428 	.word	0x40020428
 80067a0:	40020440 	.word	0x40020440
 80067a4:	40020458 	.word	0x40020458
 80067a8:	40020470 	.word	0x40020470
 80067ac:	40020488 	.word	0x40020488
 80067b0:	400204a0 	.word	0x400204a0
 80067b4:	400204b8 	.word	0x400204b8
 80067b8:	58025408 	.word	0x58025408
 80067bc:	5802541c 	.word	0x5802541c
 80067c0:	58025430 	.word	0x58025430
 80067c4:	58025444 	.word	0x58025444
 80067c8:	58025458 	.word	0x58025458
 80067cc:	5802546c 	.word	0x5802546c
 80067d0:	58025480 	.word	0x58025480
 80067d4:	58025494 	.word	0x58025494

080067d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	; 0x28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067e4:	4b67      	ldr	r3, [pc, #412]	; (8006984 <HAL_DMA_IRQHandler+0x1ac>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a67      	ldr	r2, [pc, #412]	; (8006988 <HAL_DMA_IRQHandler+0x1b0>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	0a9b      	lsrs	r3, r3, #10
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a5f      	ldr	r2, [pc, #380]	; (800698c <HAL_DMA_IRQHandler+0x1b4>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d04a      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a5d      	ldr	r2, [pc, #372]	; (8006990 <HAL_DMA_IRQHandler+0x1b8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d045      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a5c      	ldr	r2, [pc, #368]	; (8006994 <HAL_DMA_IRQHandler+0x1bc>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d040      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5a      	ldr	r2, [pc, #360]	; (8006998 <HAL_DMA_IRQHandler+0x1c0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d03b      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a59      	ldr	r2, [pc, #356]	; (800699c <HAL_DMA_IRQHandler+0x1c4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d036      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a57      	ldr	r2, [pc, #348]	; (80069a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d031      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a56      	ldr	r2, [pc, #344]	; (80069a4 <HAL_DMA_IRQHandler+0x1cc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d02c      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a54      	ldr	r2, [pc, #336]	; (80069a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d027      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a53      	ldr	r2, [pc, #332]	; (80069ac <HAL_DMA_IRQHandler+0x1d4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d022      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a51      	ldr	r2, [pc, #324]	; (80069b0 <HAL_DMA_IRQHandler+0x1d8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d01d      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a50      	ldr	r2, [pc, #320]	; (80069b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d018      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a4e      	ldr	r2, [pc, #312]	; (80069b8 <HAL_DMA_IRQHandler+0x1e0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d013      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a4d      	ldr	r2, [pc, #308]	; (80069bc <HAL_DMA_IRQHandler+0x1e4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00e      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a4b      	ldr	r2, [pc, #300]	; (80069c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d009      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a4a      	ldr	r2, [pc, #296]	; (80069c4 <HAL_DMA_IRQHandler+0x1ec>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d004      	beq.n	80068aa <HAL_DMA_IRQHandler+0xd2>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a48      	ldr	r2, [pc, #288]	; (80069c8 <HAL_DMA_IRQHandler+0x1f0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d101      	bne.n	80068ae <HAL_DMA_IRQHandler+0xd6>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <HAL_DMA_IRQHandler+0xd8>
 80068ae:	2300      	movs	r3, #0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 842b 	beq.w	800710c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	2208      	movs	r2, #8
 80068c0:	409a      	lsls	r2, r3
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	4013      	ands	r3, r2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 80a2 	beq.w	8006a10 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a2e      	ldr	r2, [pc, #184]	; (800698c <HAL_DMA_IRQHandler+0x1b4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d04a      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a2d      	ldr	r2, [pc, #180]	; (8006990 <HAL_DMA_IRQHandler+0x1b8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d045      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a2b      	ldr	r2, [pc, #172]	; (8006994 <HAL_DMA_IRQHandler+0x1bc>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d040      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a2a      	ldr	r2, [pc, #168]	; (8006998 <HAL_DMA_IRQHandler+0x1c0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d03b      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a28      	ldr	r2, [pc, #160]	; (800699c <HAL_DMA_IRQHandler+0x1c4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d036      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a27      	ldr	r2, [pc, #156]	; (80069a0 <HAL_DMA_IRQHandler+0x1c8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d031      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a25      	ldr	r2, [pc, #148]	; (80069a4 <HAL_DMA_IRQHandler+0x1cc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d02c      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a24      	ldr	r2, [pc, #144]	; (80069a8 <HAL_DMA_IRQHandler+0x1d0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d027      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a22      	ldr	r2, [pc, #136]	; (80069ac <HAL_DMA_IRQHandler+0x1d4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d022      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a21      	ldr	r2, [pc, #132]	; (80069b0 <HAL_DMA_IRQHandler+0x1d8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d01d      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1f      	ldr	r2, [pc, #124]	; (80069b4 <HAL_DMA_IRQHandler+0x1dc>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d018      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1e      	ldr	r2, [pc, #120]	; (80069b8 <HAL_DMA_IRQHandler+0x1e0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d013      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1c      	ldr	r2, [pc, #112]	; (80069bc <HAL_DMA_IRQHandler+0x1e4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00e      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <HAL_DMA_IRQHandler+0x1e8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d009      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <HAL_DMA_IRQHandler+0x1ec>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <HAL_DMA_IRQHandler+0x194>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <HAL_DMA_IRQHandler+0x1f0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d12f      	bne.n	80069cc <HAL_DMA_IRQHandler+0x1f4>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	bf14      	ite	ne
 800697a:	2301      	movne	r3, #1
 800697c:	2300      	moveq	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	e02e      	b.n	80069e0 <HAL_DMA_IRQHandler+0x208>
 8006982:	bf00      	nop
 8006984:	24000000 	.word	0x24000000
 8006988:	1b4e81b5 	.word	0x1b4e81b5
 800698c:	40020010 	.word	0x40020010
 8006990:	40020028 	.word	0x40020028
 8006994:	40020040 	.word	0x40020040
 8006998:	40020058 	.word	0x40020058
 800699c:	40020070 	.word	0x40020070
 80069a0:	40020088 	.word	0x40020088
 80069a4:	400200a0 	.word	0x400200a0
 80069a8:	400200b8 	.word	0x400200b8
 80069ac:	40020410 	.word	0x40020410
 80069b0:	40020428 	.word	0x40020428
 80069b4:	40020440 	.word	0x40020440
 80069b8:	40020458 	.word	0x40020458
 80069bc:	40020470 	.word	0x40020470
 80069c0:	40020488 	.word	0x40020488
 80069c4:	400204a0 	.word	0x400204a0
 80069c8:	400204b8 	.word	0x400204b8
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bf14      	ite	ne
 80069da:	2301      	movne	r3, #1
 80069dc:	2300      	moveq	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d015      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0204 	bic.w	r2, r2, #4
 80069f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	2208      	movs	r2, #8
 80069fe:	409a      	lsls	r2, r3
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	f043 0201 	orr.w	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a14:	f003 031f 	and.w	r3, r3, #31
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d06e      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a69      	ldr	r2, [pc, #420]	; (8006bd0 <HAL_DMA_IRQHandler+0x3f8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d04a      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a67      	ldr	r2, [pc, #412]	; (8006bd4 <HAL_DMA_IRQHandler+0x3fc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d045      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a66      	ldr	r2, [pc, #408]	; (8006bd8 <HAL_DMA_IRQHandler+0x400>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d040      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a64      	ldr	r2, [pc, #400]	; (8006bdc <HAL_DMA_IRQHandler+0x404>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d03b      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a63      	ldr	r2, [pc, #396]	; (8006be0 <HAL_DMA_IRQHandler+0x408>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d036      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a61      	ldr	r2, [pc, #388]	; (8006be4 <HAL_DMA_IRQHandler+0x40c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d031      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a60      	ldr	r2, [pc, #384]	; (8006be8 <HAL_DMA_IRQHandler+0x410>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d02c      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a5e      	ldr	r2, [pc, #376]	; (8006bec <HAL_DMA_IRQHandler+0x414>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d027      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a5d      	ldr	r2, [pc, #372]	; (8006bf0 <HAL_DMA_IRQHandler+0x418>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d022      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a5b      	ldr	r2, [pc, #364]	; (8006bf4 <HAL_DMA_IRQHandler+0x41c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01d      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a5a      	ldr	r2, [pc, #360]	; (8006bf8 <HAL_DMA_IRQHandler+0x420>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d018      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a58      	ldr	r2, [pc, #352]	; (8006bfc <HAL_DMA_IRQHandler+0x424>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a57      	ldr	r2, [pc, #348]	; (8006c00 <HAL_DMA_IRQHandler+0x428>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a55      	ldr	r2, [pc, #340]	; (8006c04 <HAL_DMA_IRQHandler+0x42c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a54      	ldr	r2, [pc, #336]	; (8006c08 <HAL_DMA_IRQHandler+0x430>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x2ee>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a52      	ldr	r2, [pc, #328]	; (8006c0c <HAL_DMA_IRQHandler+0x434>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d10a      	bne.n	8006adc <HAL_DMA_IRQHandler+0x304>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bf14      	ite	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	2300      	moveq	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	e003      	b.n	8006ae4 <HAL_DMA_IRQHandler+0x30c>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00d      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aec:	f003 031f 	and.w	r3, r3, #31
 8006af0:	2201      	movs	r2, #1
 8006af2:	409a      	lsls	r2, r3
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afc:	f043 0202 	orr.w	r2, r3, #2
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	2204      	movs	r2, #4
 8006b0e:	409a      	lsls	r2, r3
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	4013      	ands	r3, r2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 808f 	beq.w	8006c38 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a2c      	ldr	r2, [pc, #176]	; (8006bd0 <HAL_DMA_IRQHandler+0x3f8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d04a      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <HAL_DMA_IRQHandler+0x3fc>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d045      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a29      	ldr	r2, [pc, #164]	; (8006bd8 <HAL_DMA_IRQHandler+0x400>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d040      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a27      	ldr	r2, [pc, #156]	; (8006bdc <HAL_DMA_IRQHandler+0x404>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d03b      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a26      	ldr	r2, [pc, #152]	; (8006be0 <HAL_DMA_IRQHandler+0x408>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d036      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a24      	ldr	r2, [pc, #144]	; (8006be4 <HAL_DMA_IRQHandler+0x40c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d031      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a23      	ldr	r2, [pc, #140]	; (8006be8 <HAL_DMA_IRQHandler+0x410>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d02c      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a21      	ldr	r2, [pc, #132]	; (8006bec <HAL_DMA_IRQHandler+0x414>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d027      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a20      	ldr	r2, [pc, #128]	; (8006bf0 <HAL_DMA_IRQHandler+0x418>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d022      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1e      	ldr	r2, [pc, #120]	; (8006bf4 <HAL_DMA_IRQHandler+0x41c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d01d      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1d      	ldr	r2, [pc, #116]	; (8006bf8 <HAL_DMA_IRQHandler+0x420>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d018      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <HAL_DMA_IRQHandler+0x424>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d013      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <HAL_DMA_IRQHandler+0x428>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00e      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <HAL_DMA_IRQHandler+0x42c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d009      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <HAL_DMA_IRQHandler+0x430>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d004      	beq.n	8006bba <HAL_DMA_IRQHandler+0x3e2>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <HAL_DMA_IRQHandler+0x434>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d12a      	bne.n	8006c10 <HAL_DMA_IRQHandler+0x438>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	bf14      	ite	ne
 8006bc8:	2301      	movne	r3, #1
 8006bca:	2300      	moveq	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	e023      	b.n	8006c18 <HAL_DMA_IRQHandler+0x440>
 8006bd0:	40020010 	.word	0x40020010
 8006bd4:	40020028 	.word	0x40020028
 8006bd8:	40020040 	.word	0x40020040
 8006bdc:	40020058 	.word	0x40020058
 8006be0:	40020070 	.word	0x40020070
 8006be4:	40020088 	.word	0x40020088
 8006be8:	400200a0 	.word	0x400200a0
 8006bec:	400200b8 	.word	0x400200b8
 8006bf0:	40020410 	.word	0x40020410
 8006bf4:	40020428 	.word	0x40020428
 8006bf8:	40020440 	.word	0x40020440
 8006bfc:	40020458 	.word	0x40020458
 8006c00:	40020470 	.word	0x40020470
 8006c04:	40020488 	.word	0x40020488
 8006c08:	400204a0 	.word	0x400204a0
 8006c0c:	400204b8 	.word	0x400204b8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2300      	movs	r3, #0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00d      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	2204      	movs	r2, #4
 8006c26:	409a      	lsls	r2, r3
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c30:	f043 0204 	orr.w	r2, r3, #4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3c:	f003 031f 	and.w	r3, r3, #31
 8006c40:	2210      	movs	r2, #16
 8006c42:	409a      	lsls	r2, r3
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 80a6 	beq.w	8006d9a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a85      	ldr	r2, [pc, #532]	; (8006e68 <HAL_DMA_IRQHandler+0x690>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d04a      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a83      	ldr	r2, [pc, #524]	; (8006e6c <HAL_DMA_IRQHandler+0x694>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d045      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a82      	ldr	r2, [pc, #520]	; (8006e70 <HAL_DMA_IRQHandler+0x698>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d040      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a80      	ldr	r2, [pc, #512]	; (8006e74 <HAL_DMA_IRQHandler+0x69c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d03b      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a7f      	ldr	r2, [pc, #508]	; (8006e78 <HAL_DMA_IRQHandler+0x6a0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d036      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a7d      	ldr	r2, [pc, #500]	; (8006e7c <HAL_DMA_IRQHandler+0x6a4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d031      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a7c      	ldr	r2, [pc, #496]	; (8006e80 <HAL_DMA_IRQHandler+0x6a8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d02c      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a7a      	ldr	r2, [pc, #488]	; (8006e84 <HAL_DMA_IRQHandler+0x6ac>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d027      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a79      	ldr	r2, [pc, #484]	; (8006e88 <HAL_DMA_IRQHandler+0x6b0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d022      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a77      	ldr	r2, [pc, #476]	; (8006e8c <HAL_DMA_IRQHandler+0x6b4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d01d      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a76      	ldr	r2, [pc, #472]	; (8006e90 <HAL_DMA_IRQHandler+0x6b8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d018      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a74      	ldr	r2, [pc, #464]	; (8006e94 <HAL_DMA_IRQHandler+0x6bc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d013      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a73      	ldr	r2, [pc, #460]	; (8006e98 <HAL_DMA_IRQHandler+0x6c0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00e      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a71      	ldr	r2, [pc, #452]	; (8006e9c <HAL_DMA_IRQHandler+0x6c4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d009      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a70      	ldr	r2, [pc, #448]	; (8006ea0 <HAL_DMA_IRQHandler+0x6c8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d004      	beq.n	8006cee <HAL_DMA_IRQHandler+0x516>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a6e      	ldr	r2, [pc, #440]	; (8006ea4 <HAL_DMA_IRQHandler+0x6cc>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d10a      	bne.n	8006d04 <HAL_DMA_IRQHandler+0x52c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	bf14      	ite	ne
 8006cfc:	2301      	movne	r3, #1
 8006cfe:	2300      	moveq	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	e009      	b.n	8006d18 <HAL_DMA_IRQHandler+0x540>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bf14      	ite	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	2300      	moveq	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d03e      	beq.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d20:	f003 031f 	and.w	r3, r3, #31
 8006d24:	2210      	movs	r2, #16
 8006d26:	409a      	lsls	r2, r3
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d018      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d108      	bne.n	8006d5a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d024      	beq.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	4798      	blx	r3
 8006d58:	e01f      	b.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01b      	beq.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
 8006d6a:	e016      	b.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d107      	bne.n	8006d8a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0208 	bic.w	r2, r2, #8
 8006d88:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9e:	f003 031f 	and.w	r3, r3, #31
 8006da2:	2220      	movs	r2, #32
 8006da4:	409a      	lsls	r2, r3
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	4013      	ands	r3, r2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 8110 	beq.w	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a2c      	ldr	r2, [pc, #176]	; (8006e68 <HAL_DMA_IRQHandler+0x690>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d04a      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a2b      	ldr	r2, [pc, #172]	; (8006e6c <HAL_DMA_IRQHandler+0x694>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d045      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a29      	ldr	r2, [pc, #164]	; (8006e70 <HAL_DMA_IRQHandler+0x698>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d040      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a28      	ldr	r2, [pc, #160]	; (8006e74 <HAL_DMA_IRQHandler+0x69c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d03b      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a26      	ldr	r2, [pc, #152]	; (8006e78 <HAL_DMA_IRQHandler+0x6a0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d036      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a25      	ldr	r2, [pc, #148]	; (8006e7c <HAL_DMA_IRQHandler+0x6a4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d031      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a23      	ldr	r2, [pc, #140]	; (8006e80 <HAL_DMA_IRQHandler+0x6a8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d02c      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a22      	ldr	r2, [pc, #136]	; (8006e84 <HAL_DMA_IRQHandler+0x6ac>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d027      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a20      	ldr	r2, [pc, #128]	; (8006e88 <HAL_DMA_IRQHandler+0x6b0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d022      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <HAL_DMA_IRQHandler+0x6b4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d01d      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a1d      	ldr	r2, [pc, #116]	; (8006e90 <HAL_DMA_IRQHandler+0x6b8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d018      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1c      	ldr	r2, [pc, #112]	; (8006e94 <HAL_DMA_IRQHandler+0x6bc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1a      	ldr	r2, [pc, #104]	; (8006e98 <HAL_DMA_IRQHandler+0x6c0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00e      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a19      	ldr	r2, [pc, #100]	; (8006e9c <HAL_DMA_IRQHandler+0x6c4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d009      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a17      	ldr	r2, [pc, #92]	; (8006ea0 <HAL_DMA_IRQHandler+0x6c8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d004      	beq.n	8006e50 <HAL_DMA_IRQHandler+0x678>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a16      	ldr	r2, [pc, #88]	; (8006ea4 <HAL_DMA_IRQHandler+0x6cc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d12b      	bne.n	8006ea8 <HAL_DMA_IRQHandler+0x6d0>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	bf14      	ite	ne
 8006e5e:	2301      	movne	r3, #1
 8006e60:	2300      	moveq	r3, #0
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	e02a      	b.n	8006ebc <HAL_DMA_IRQHandler+0x6e4>
 8006e66:	bf00      	nop
 8006e68:	40020010 	.word	0x40020010
 8006e6c:	40020028 	.word	0x40020028
 8006e70:	40020040 	.word	0x40020040
 8006e74:	40020058 	.word	0x40020058
 8006e78:	40020070 	.word	0x40020070
 8006e7c:	40020088 	.word	0x40020088
 8006e80:	400200a0 	.word	0x400200a0
 8006e84:	400200b8 	.word	0x400200b8
 8006e88:	40020410 	.word	0x40020410
 8006e8c:	40020428 	.word	0x40020428
 8006e90:	40020440 	.word	0x40020440
 8006e94:	40020458 	.word	0x40020458
 8006e98:	40020470 	.word	0x40020470
 8006e9c:	40020488 	.word	0x40020488
 8006ea0:	400204a0 	.word	0x400204a0
 8006ea4:	400204b8 	.word	0x400204b8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bf14      	ite	ne
 8006eb6:	2301      	movne	r3, #1
 8006eb8:	2300      	moveq	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8087 	beq.w	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	2220      	movs	r2, #32
 8006ecc:	409a      	lsls	r2, r3
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d139      	bne.n	8006f52 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0216 	bic.w	r2, r2, #22
 8006eec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695a      	ldr	r2, [r3, #20]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006efc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d103      	bne.n	8006f0e <HAL_DMA_IRQHandler+0x736>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d007      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0208 	bic.w	r2, r2, #8
 8006f1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	223f      	movs	r2, #63	; 0x3f
 8006f28:	409a      	lsls	r2, r3
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 834a 	beq.w	80075dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	4798      	blx	r3
          }
          return;
 8006f50:	e344      	b.n	80075dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d018      	beq.n	8006f92 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d108      	bne.n	8006f80 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d02c      	beq.n	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
 8006f7e:	e027      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d023      	beq.n	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
 8006f90:	e01e      	b.n	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10f      	bne.n	8006fc0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0210 	bic.w	r2, r2, #16
 8006fae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8306 	beq.w	80075e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8088 	beq.w	80070f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2204      	movs	r2, #4
 8006fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a7a      	ldr	r2, [pc, #488]	; (80071e0 <HAL_DMA_IRQHandler+0xa08>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d04a      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a79      	ldr	r2, [pc, #484]	; (80071e4 <HAL_DMA_IRQHandler+0xa0c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d045      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a77      	ldr	r2, [pc, #476]	; (80071e8 <HAL_DMA_IRQHandler+0xa10>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d040      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a76      	ldr	r2, [pc, #472]	; (80071ec <HAL_DMA_IRQHandler+0xa14>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d03b      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a74      	ldr	r2, [pc, #464]	; (80071f0 <HAL_DMA_IRQHandler+0xa18>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d036      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a73      	ldr	r2, [pc, #460]	; (80071f4 <HAL_DMA_IRQHandler+0xa1c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d031      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a71      	ldr	r2, [pc, #452]	; (80071f8 <HAL_DMA_IRQHandler+0xa20>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d02c      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a70      	ldr	r2, [pc, #448]	; (80071fc <HAL_DMA_IRQHandler+0xa24>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d027      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a6e      	ldr	r2, [pc, #440]	; (8007200 <HAL_DMA_IRQHandler+0xa28>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d022      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a6d      	ldr	r2, [pc, #436]	; (8007204 <HAL_DMA_IRQHandler+0xa2c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d01d      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a6b      	ldr	r2, [pc, #428]	; (8007208 <HAL_DMA_IRQHandler+0xa30>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d018      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6a      	ldr	r2, [pc, #424]	; (800720c <HAL_DMA_IRQHandler+0xa34>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d013      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a68      	ldr	r2, [pc, #416]	; (8007210 <HAL_DMA_IRQHandler+0xa38>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00e      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a67      	ldr	r2, [pc, #412]	; (8007214 <HAL_DMA_IRQHandler+0xa3c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d009      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a65      	ldr	r2, [pc, #404]	; (8007218 <HAL_DMA_IRQHandler+0xa40>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_DMA_IRQHandler+0x8b8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a64      	ldr	r2, [pc, #400]	; (800721c <HAL_DMA_IRQHandler+0xa44>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d108      	bne.n	80070a2 <HAL_DMA_IRQHandler+0x8ca>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0201 	bic.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e007      	b.n	80070b2 <HAL_DMA_IRQHandler+0x8da>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3301      	adds	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d307      	bcc.n	80070ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f2      	bne.n	80070b2 <HAL_DMA_IRQHandler+0x8da>
 80070cc:	e000      	b.n	80070d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80070ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2203      	movs	r2, #3
 80070e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80070e6:	e003      	b.n	80070f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8272 	beq.w	80075e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
 800710a:	e26c      	b.n	80075e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a43      	ldr	r2, [pc, #268]	; (8007220 <HAL_DMA_IRQHandler+0xa48>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d022      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a42      	ldr	r2, [pc, #264]	; (8007224 <HAL_DMA_IRQHandler+0xa4c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d01d      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a40      	ldr	r2, [pc, #256]	; (8007228 <HAL_DMA_IRQHandler+0xa50>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d018      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a3f      	ldr	r2, [pc, #252]	; (800722c <HAL_DMA_IRQHandler+0xa54>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d013      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a3d      	ldr	r2, [pc, #244]	; (8007230 <HAL_DMA_IRQHandler+0xa58>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00e      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a3c      	ldr	r2, [pc, #240]	; (8007234 <HAL_DMA_IRQHandler+0xa5c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d009      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a3a      	ldr	r2, [pc, #232]	; (8007238 <HAL_DMA_IRQHandler+0xa60>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d004      	beq.n	800715c <HAL_DMA_IRQHandler+0x984>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a39      	ldr	r2, [pc, #228]	; (800723c <HAL_DMA_IRQHandler+0xa64>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d101      	bne.n	8007160 <HAL_DMA_IRQHandler+0x988>
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <HAL_DMA_IRQHandler+0x98a>
 8007160:	2300      	movs	r3, #0
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 823f 	beq.w	80075e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	2204      	movs	r2, #4
 800717a:	409a      	lsls	r2, r3
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	4013      	ands	r3, r2
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 80cd 	beq.w	8007320 <HAL_DMA_IRQHandler+0xb48>
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 80c7 	beq.w	8007320 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	2204      	movs	r2, #4
 800719c:	409a      	lsls	r2, r3
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d049      	beq.n	8007240 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 8210 	beq.w	80075e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071c8:	e20a      	b.n	80075e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 8206 	beq.w	80075e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071dc:	e200      	b.n	80075e0 <HAL_DMA_IRQHandler+0xe08>
 80071de:	bf00      	nop
 80071e0:	40020010 	.word	0x40020010
 80071e4:	40020028 	.word	0x40020028
 80071e8:	40020040 	.word	0x40020040
 80071ec:	40020058 	.word	0x40020058
 80071f0:	40020070 	.word	0x40020070
 80071f4:	40020088 	.word	0x40020088
 80071f8:	400200a0 	.word	0x400200a0
 80071fc:	400200b8 	.word	0x400200b8
 8007200:	40020410 	.word	0x40020410
 8007204:	40020428 	.word	0x40020428
 8007208:	40020440 	.word	0x40020440
 800720c:	40020458 	.word	0x40020458
 8007210:	40020470 	.word	0x40020470
 8007214:	40020488 	.word	0x40020488
 8007218:	400204a0 	.word	0x400204a0
 800721c:	400204b8 	.word	0x400204b8
 8007220:	58025408 	.word	0x58025408
 8007224:	5802541c 	.word	0x5802541c
 8007228:	58025430 	.word	0x58025430
 800722c:	58025444 	.word	0x58025444
 8007230:	58025458 	.word	0x58025458
 8007234:	5802546c 	.word	0x5802546c
 8007238:	58025480 	.word	0x58025480
 800723c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	d160      	bne.n	800730c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a7f      	ldr	r2, [pc, #508]	; (800744c <HAL_DMA_IRQHandler+0xc74>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d04a      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a7d      	ldr	r2, [pc, #500]	; (8007450 <HAL_DMA_IRQHandler+0xc78>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d045      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a7c      	ldr	r2, [pc, #496]	; (8007454 <HAL_DMA_IRQHandler+0xc7c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d040      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a7a      	ldr	r2, [pc, #488]	; (8007458 <HAL_DMA_IRQHandler+0xc80>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d03b      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a79      	ldr	r2, [pc, #484]	; (800745c <HAL_DMA_IRQHandler+0xc84>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d036      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a77      	ldr	r2, [pc, #476]	; (8007460 <HAL_DMA_IRQHandler+0xc88>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d031      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a76      	ldr	r2, [pc, #472]	; (8007464 <HAL_DMA_IRQHandler+0xc8c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d02c      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a74      	ldr	r2, [pc, #464]	; (8007468 <HAL_DMA_IRQHandler+0xc90>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d027      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a73      	ldr	r2, [pc, #460]	; (800746c <HAL_DMA_IRQHandler+0xc94>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d022      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a71      	ldr	r2, [pc, #452]	; (8007470 <HAL_DMA_IRQHandler+0xc98>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01d      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a70      	ldr	r2, [pc, #448]	; (8007474 <HAL_DMA_IRQHandler+0xc9c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d018      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a6e      	ldr	r2, [pc, #440]	; (8007478 <HAL_DMA_IRQHandler+0xca0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a6d      	ldr	r2, [pc, #436]	; (800747c <HAL_DMA_IRQHandler+0xca4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00e      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a6b      	ldr	r2, [pc, #428]	; (8007480 <HAL_DMA_IRQHandler+0xca8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d009      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a6a      	ldr	r2, [pc, #424]	; (8007484 <HAL_DMA_IRQHandler+0xcac>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <HAL_DMA_IRQHandler+0xb12>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a68      	ldr	r2, [pc, #416]	; (8007488 <HAL_DMA_IRQHandler+0xcb0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d108      	bne.n	80072fc <HAL_DMA_IRQHandler+0xb24>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0208 	bic.w	r2, r2, #8
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	e007      	b.n	800730c <HAL_DMA_IRQHandler+0xb34>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0204 	bic.w	r2, r2, #4
 800730a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8165 	beq.w	80075e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800731e:	e15f      	b.n	80075e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	2202      	movs	r2, #2
 800732a:	409a      	lsls	r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 80c5 	beq.w	80074c0 <HAL_DMA_IRQHandler+0xce8>
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 80bf 	beq.w	80074c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	2202      	movs	r2, #2
 800734c:	409a      	lsls	r2, r3
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d018      	beq.n	800738e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 813a 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007378:	e134      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 8130 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800738c:	e12a      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	f040 8089 	bne.w	80074ac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a2b      	ldr	r2, [pc, #172]	; (800744c <HAL_DMA_IRQHandler+0xc74>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d04a      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a29      	ldr	r2, [pc, #164]	; (8007450 <HAL_DMA_IRQHandler+0xc78>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d045      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a28      	ldr	r2, [pc, #160]	; (8007454 <HAL_DMA_IRQHandler+0xc7c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d040      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a26      	ldr	r2, [pc, #152]	; (8007458 <HAL_DMA_IRQHandler+0xc80>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d03b      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a25      	ldr	r2, [pc, #148]	; (800745c <HAL_DMA_IRQHandler+0xc84>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d036      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a23      	ldr	r2, [pc, #140]	; (8007460 <HAL_DMA_IRQHandler+0xc88>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d031      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a22      	ldr	r2, [pc, #136]	; (8007464 <HAL_DMA_IRQHandler+0xc8c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d02c      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a20      	ldr	r2, [pc, #128]	; (8007468 <HAL_DMA_IRQHandler+0xc90>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d027      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1f      	ldr	r2, [pc, #124]	; (800746c <HAL_DMA_IRQHandler+0xc94>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d022      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1d      	ldr	r2, [pc, #116]	; (8007470 <HAL_DMA_IRQHandler+0xc98>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d01d      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1c      	ldr	r2, [pc, #112]	; (8007474 <HAL_DMA_IRQHandler+0xc9c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d018      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1a      	ldr	r2, [pc, #104]	; (8007478 <HAL_DMA_IRQHandler+0xca0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a19      	ldr	r2, [pc, #100]	; (800747c <HAL_DMA_IRQHandler+0xca4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00e      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a17      	ldr	r2, [pc, #92]	; (8007480 <HAL_DMA_IRQHandler+0xca8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d009      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a16      	ldr	r2, [pc, #88]	; (8007484 <HAL_DMA_IRQHandler+0xcac>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d004      	beq.n	800743a <HAL_DMA_IRQHandler+0xc62>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a14      	ldr	r2, [pc, #80]	; (8007488 <HAL_DMA_IRQHandler+0xcb0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d128      	bne.n	800748c <HAL_DMA_IRQHandler+0xcb4>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0214 	bic.w	r2, r2, #20
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	e027      	b.n	800749c <HAL_DMA_IRQHandler+0xcc4>
 800744c:	40020010 	.word	0x40020010
 8007450:	40020028 	.word	0x40020028
 8007454:	40020040 	.word	0x40020040
 8007458:	40020058 	.word	0x40020058
 800745c:	40020070 	.word	0x40020070
 8007460:	40020088 	.word	0x40020088
 8007464:	400200a0 	.word	0x400200a0
 8007468:	400200b8 	.word	0x400200b8
 800746c:	40020410 	.word	0x40020410
 8007470:	40020428 	.word	0x40020428
 8007474:	40020440 	.word	0x40020440
 8007478:	40020458 	.word	0x40020458
 800747c:	40020470 	.word	0x40020470
 8007480:	40020488 	.word	0x40020488
 8007484:	400204a0 	.word	0x400204a0
 8007488:	400204b8 	.word	0x400204b8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 020a 	bic.w	r2, r2, #10
 800749a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8097 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074be:	e091      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c4:	f003 031f 	and.w	r3, r3, #31
 80074c8:	2208      	movs	r2, #8
 80074ca:	409a      	lsls	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 8088 	beq.w	80075e6 <HAL_DMA_IRQHandler+0xe0e>
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 8082 	beq.w	80075e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a41      	ldr	r2, [pc, #260]	; (80075ec <HAL_DMA_IRQHandler+0xe14>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d04a      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a3f      	ldr	r2, [pc, #252]	; (80075f0 <HAL_DMA_IRQHandler+0xe18>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d045      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a3e      	ldr	r2, [pc, #248]	; (80075f4 <HAL_DMA_IRQHandler+0xe1c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d040      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a3c      	ldr	r2, [pc, #240]	; (80075f8 <HAL_DMA_IRQHandler+0xe20>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d03b      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a3b      	ldr	r2, [pc, #236]	; (80075fc <HAL_DMA_IRQHandler+0xe24>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d036      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a39      	ldr	r2, [pc, #228]	; (8007600 <HAL_DMA_IRQHandler+0xe28>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d031      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a38      	ldr	r2, [pc, #224]	; (8007604 <HAL_DMA_IRQHandler+0xe2c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d02c      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a36      	ldr	r2, [pc, #216]	; (8007608 <HAL_DMA_IRQHandler+0xe30>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d027      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a35      	ldr	r2, [pc, #212]	; (800760c <HAL_DMA_IRQHandler+0xe34>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d022      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a33      	ldr	r2, [pc, #204]	; (8007610 <HAL_DMA_IRQHandler+0xe38>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01d      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a32      	ldr	r2, [pc, #200]	; (8007614 <HAL_DMA_IRQHandler+0xe3c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d018      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a30      	ldr	r2, [pc, #192]	; (8007618 <HAL_DMA_IRQHandler+0xe40>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a2f      	ldr	r2, [pc, #188]	; (800761c <HAL_DMA_IRQHandler+0xe44>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a2d      	ldr	r2, [pc, #180]	; (8007620 <HAL_DMA_IRQHandler+0xe48>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <HAL_DMA_IRQHandler+0xe4c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_DMA_IRQHandler+0xdaa>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a2a      	ldr	r2, [pc, #168]	; (8007628 <HAL_DMA_IRQHandler+0xe50>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d108      	bne.n	8007594 <HAL_DMA_IRQHandler+0xdbc>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 021c 	bic.w	r2, r2, #28
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	e007      	b.n	80075a4 <HAL_DMA_IRQHandler+0xdcc>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 020e 	bic.w	r2, r2, #14
 80075a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a8:	f003 031f 	and.w	r3, r3, #31
 80075ac:	2201      	movs	r2, #1
 80075ae:	409a      	lsls	r2, r3
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d009      	beq.n	80075e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	4798      	blx	r3
 80075da:	e004      	b.n	80075e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80075dc:	bf00      	nop
 80075de:	e002      	b.n	80075e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075e0:	bf00      	nop
 80075e2:	e000      	b.n	80075e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80075e6:	3728      	adds	r7, #40	; 0x28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40020010 	.word	0x40020010
 80075f0:	40020028 	.word	0x40020028
 80075f4:	40020040 	.word	0x40020040
 80075f8:	40020058 	.word	0x40020058
 80075fc:	40020070 	.word	0x40020070
 8007600:	40020088 	.word	0x40020088
 8007604:	400200a0 	.word	0x400200a0
 8007608:	400200b8 	.word	0x400200b8
 800760c:	40020410 	.word	0x40020410
 8007610:	40020428 	.word	0x40020428
 8007614:	40020440 	.word	0x40020440
 8007618:	40020458 	.word	0x40020458
 800761c:	40020470 	.word	0x40020470
 8007620:	40020488 	.word	0x40020488
 8007624:	400204a0 	.word	0x400204a0
 8007628:	400204b8 	.word	0x400204b8

0800762c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a42      	ldr	r2, [pc, #264]	; (8007744 <DMA_CalcBaseAndBitshift+0x118>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d04a      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a41      	ldr	r2, [pc, #260]	; (8007748 <DMA_CalcBaseAndBitshift+0x11c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d045      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a3f      	ldr	r2, [pc, #252]	; (800774c <DMA_CalcBaseAndBitshift+0x120>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d040      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a3e      	ldr	r2, [pc, #248]	; (8007750 <DMA_CalcBaseAndBitshift+0x124>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d03b      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a3c      	ldr	r2, [pc, #240]	; (8007754 <DMA_CalcBaseAndBitshift+0x128>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d036      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a3b      	ldr	r2, [pc, #236]	; (8007758 <DMA_CalcBaseAndBitshift+0x12c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d031      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a39      	ldr	r2, [pc, #228]	; (800775c <DMA_CalcBaseAndBitshift+0x130>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d02c      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a38      	ldr	r2, [pc, #224]	; (8007760 <DMA_CalcBaseAndBitshift+0x134>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d027      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a36      	ldr	r2, [pc, #216]	; (8007764 <DMA_CalcBaseAndBitshift+0x138>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d022      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a35      	ldr	r2, [pc, #212]	; (8007768 <DMA_CalcBaseAndBitshift+0x13c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d01d      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a33      	ldr	r2, [pc, #204]	; (800776c <DMA_CalcBaseAndBitshift+0x140>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d018      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a32      	ldr	r2, [pc, #200]	; (8007770 <DMA_CalcBaseAndBitshift+0x144>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d013      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a30      	ldr	r2, [pc, #192]	; (8007774 <DMA_CalcBaseAndBitshift+0x148>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00e      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a2f      	ldr	r2, [pc, #188]	; (8007778 <DMA_CalcBaseAndBitshift+0x14c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d009      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a2d      	ldr	r2, [pc, #180]	; (800777c <DMA_CalcBaseAndBitshift+0x150>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d004      	beq.n	80076d4 <DMA_CalcBaseAndBitshift+0xa8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a2c      	ldr	r2, [pc, #176]	; (8007780 <DMA_CalcBaseAndBitshift+0x154>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d101      	bne.n	80076d8 <DMA_CalcBaseAndBitshift+0xac>
 80076d4:	2301      	movs	r3, #1
 80076d6:	e000      	b.n	80076da <DMA_CalcBaseAndBitshift+0xae>
 80076d8:	2300      	movs	r3, #0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d024      	beq.n	8007728 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	3b10      	subs	r3, #16
 80076e6:	4a27      	ldr	r2, [pc, #156]	; (8007784 <DMA_CalcBaseAndBitshift+0x158>)
 80076e8:	fba2 2303 	umull	r2, r3, r2, r3
 80076ec:	091b      	lsrs	r3, r3, #4
 80076ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	4a24      	ldr	r2, [pc, #144]	; (8007788 <DMA_CalcBaseAndBitshift+0x15c>)
 80076f8:	5cd3      	ldrb	r3, [r2, r3]
 80076fa:	461a      	mov	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b03      	cmp	r3, #3
 8007704:	d908      	bls.n	8007718 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	4b1f      	ldr	r3, [pc, #124]	; (800778c <DMA_CalcBaseAndBitshift+0x160>)
 800770e:	4013      	ands	r3, r2
 8007710:	1d1a      	adds	r2, r3, #4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	659a      	str	r2, [r3, #88]	; 0x58
 8007716:	e00d      	b.n	8007734 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	4b1b      	ldr	r3, [pc, #108]	; (800778c <DMA_CalcBaseAndBitshift+0x160>)
 8007720:	4013      	ands	r3, r2
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6593      	str	r3, [r2, #88]	; 0x58
 8007726:	e005      	b.n	8007734 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	40020010 	.word	0x40020010
 8007748:	40020028 	.word	0x40020028
 800774c:	40020040 	.word	0x40020040
 8007750:	40020058 	.word	0x40020058
 8007754:	40020070 	.word	0x40020070
 8007758:	40020088 	.word	0x40020088
 800775c:	400200a0 	.word	0x400200a0
 8007760:	400200b8 	.word	0x400200b8
 8007764:	40020410 	.word	0x40020410
 8007768:	40020428 	.word	0x40020428
 800776c:	40020440 	.word	0x40020440
 8007770:	40020458 	.word	0x40020458
 8007774:	40020470 	.word	0x40020470
 8007778:	40020488 	.word	0x40020488
 800777c:	400204a0 	.word	0x400204a0
 8007780:	400204b8 	.word	0x400204b8
 8007784:	aaaaaaab 	.word	0xaaaaaaab
 8007788:	0801c7b0 	.word	0x0801c7b0
 800778c:	fffffc00 	.word	0xfffffc00

08007790 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d120      	bne.n	80077e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d858      	bhi.n	800785e <DMA_CheckFifoParam+0xce>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <DMA_CheckFifoParam+0x24>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	080077c5 	.word	0x080077c5
 80077b8:	080077d7 	.word	0x080077d7
 80077bc:	080077c5 	.word	0x080077c5
 80077c0:	0800785f 	.word	0x0800785f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d048      	beq.n	8007862 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077d4:	e045      	b.n	8007862 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077de:	d142      	bne.n	8007866 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077e4:	e03f      	b.n	8007866 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ee:	d123      	bne.n	8007838 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d838      	bhi.n	800786a <DMA_CheckFifoParam+0xda>
 80077f8:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <DMA_CheckFifoParam+0x70>)
 80077fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fe:	bf00      	nop
 8007800:	08007811 	.word	0x08007811
 8007804:	08007817 	.word	0x08007817
 8007808:	08007811 	.word	0x08007811
 800780c:	08007829 	.word	0x08007829
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	73fb      	strb	r3, [r7, #15]
        break;
 8007814:	e030      	b.n	8007878 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d025      	beq.n	800786e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007826:	e022      	b.n	800786e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007830:	d11f      	bne.n	8007872 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007836:	e01c      	b.n	8007872 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	2b02      	cmp	r3, #2
 800783e:	d902      	bls.n	8007846 <DMA_CheckFifoParam+0xb6>
 8007840:	2b03      	cmp	r3, #3
 8007842:	d003      	beq.n	800784c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007844:	e018      	b.n	8007878 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	73fb      	strb	r3, [r7, #15]
        break;
 800784a:	e015      	b.n	8007878 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00e      	beq.n	8007876 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	73fb      	strb	r3, [r7, #15]
    break;
 800785c:	e00b      	b.n	8007876 <DMA_CheckFifoParam+0xe6>
        break;
 800785e:	bf00      	nop
 8007860:	e00a      	b.n	8007878 <DMA_CheckFifoParam+0xe8>
        break;
 8007862:	bf00      	nop
 8007864:	e008      	b.n	8007878 <DMA_CheckFifoParam+0xe8>
        break;
 8007866:	bf00      	nop
 8007868:	e006      	b.n	8007878 <DMA_CheckFifoParam+0xe8>
        break;
 800786a:	bf00      	nop
 800786c:	e004      	b.n	8007878 <DMA_CheckFifoParam+0xe8>
        break;
 800786e:	bf00      	nop
 8007870:	e002      	b.n	8007878 <DMA_CheckFifoParam+0xe8>
        break;
 8007872:	bf00      	nop
 8007874:	e000      	b.n	8007878 <DMA_CheckFifoParam+0xe8>
    break;
 8007876:	bf00      	nop
    }
  }

  return status;
 8007878:	7bfb      	ldrb	r3, [r7, #15]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop

08007888 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a38      	ldr	r2, [pc, #224]	; (800797c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d022      	beq.n	80078e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a36      	ldr	r2, [pc, #216]	; (8007980 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d01d      	beq.n	80078e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a35      	ldr	r2, [pc, #212]	; (8007984 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d018      	beq.n	80078e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a33      	ldr	r2, [pc, #204]	; (8007988 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d013      	beq.n	80078e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a32      	ldr	r2, [pc, #200]	; (800798c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00e      	beq.n	80078e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a30      	ldr	r2, [pc, #192]	; (8007990 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d009      	beq.n	80078e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a2f      	ldr	r2, [pc, #188]	; (8007994 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d004      	beq.n	80078e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a2d      	ldr	r2, [pc, #180]	; (8007998 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d101      	bne.n	80078ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80078e6:	2301      	movs	r3, #1
 80078e8:	e000      	b.n	80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80078ea:	2300      	movs	r3, #0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01a      	beq.n	8007926 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	3b08      	subs	r3, #8
 80078f8:	4a28      	ldr	r2, [pc, #160]	; (800799c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80078fa:	fba2 2303 	umull	r2, r3, r2, r3
 80078fe:	091b      	lsrs	r3, r3, #4
 8007900:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4b26      	ldr	r3, [pc, #152]	; (80079a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a24      	ldr	r2, [pc, #144]	; (80079a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007914:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	2201      	movs	r2, #1
 800791e:	409a      	lsls	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007924:	e024      	b.n	8007970 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	3b10      	subs	r3, #16
 800792e:	4a1e      	ldr	r2, [pc, #120]	; (80079a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007930:	fba2 2303 	umull	r2, r3, r2, r3
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4a1c      	ldr	r2, [pc, #112]	; (80079ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d806      	bhi.n	800794e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4a1b      	ldr	r2, [pc, #108]	; (80079b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d902      	bls.n	800794e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3308      	adds	r3, #8
 800794c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4b18      	ldr	r3, [pc, #96]	; (80079b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a16      	ldr	r2, [pc, #88]	; (80079b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007960:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f003 031f 	and.w	r3, r3, #31
 8007968:	2201      	movs	r2, #1
 800796a:	409a      	lsls	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007970:	bf00      	nop
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	58025408 	.word	0x58025408
 8007980:	5802541c 	.word	0x5802541c
 8007984:	58025430 	.word	0x58025430
 8007988:	58025444 	.word	0x58025444
 800798c:	58025458 	.word	0x58025458
 8007990:	5802546c 	.word	0x5802546c
 8007994:	58025480 	.word	0x58025480
 8007998:	58025494 	.word	0x58025494
 800799c:	cccccccd 	.word	0xcccccccd
 80079a0:	16009600 	.word	0x16009600
 80079a4:	58025880 	.word	0x58025880
 80079a8:	aaaaaaab 	.word	0xaaaaaaab
 80079ac:	400204b8 	.word	0x400204b8
 80079b0:	4002040f 	.word	0x4002040f
 80079b4:	10008200 	.word	0x10008200
 80079b8:	40020880 	.word	0x40020880

080079bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d04a      	beq.n	8007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d847      	bhi.n	8007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a25      	ldr	r2, [pc, #148]	; (8007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d022      	beq.n	8007a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a24      	ldr	r2, [pc, #144]	; (8007a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d01d      	beq.n	8007a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a22      	ldr	r2, [pc, #136]	; (8007a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d018      	beq.n	8007a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a21      	ldr	r2, [pc, #132]	; (8007a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d013      	beq.n	8007a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a1f      	ldr	r2, [pc, #124]	; (8007a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00e      	beq.n	8007a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a1e      	ldr	r2, [pc, #120]	; (8007a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d009      	beq.n	8007a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1c      	ldr	r2, [pc, #112]	; (8007a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d004      	beq.n	8007a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a1b      	ldr	r2, [pc, #108]	; (8007a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d101      	bne.n	8007a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4b17      	ldr	r3, [pc, #92]	; (8007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a15      	ldr	r2, [pc, #84]	; (8007a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007a44:	671a      	str	r2, [r3, #112]	; 0x70
 8007a46:	e009      	b.n	8007a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	461a      	mov	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a11      	ldr	r2, [pc, #68]	; (8007aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007a5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	2201      	movs	r2, #1
 8007a62:	409a      	lsls	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007a68:	bf00      	nop
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	58025408 	.word	0x58025408
 8007a78:	5802541c 	.word	0x5802541c
 8007a7c:	58025430 	.word	0x58025430
 8007a80:	58025444 	.word	0x58025444
 8007a84:	58025458 	.word	0x58025458
 8007a88:	5802546c 	.word	0x5802546c
 8007a8c:	58025480 	.word	0x58025480
 8007a90:	58025494 	.word	0x58025494
 8007a94:	1600963f 	.word	0x1600963f
 8007a98:	58025940 	.word	0x58025940
 8007a9c:	1000823f 	.word	0x1000823f
 8007aa0:	40020940 	.word	0x40020940

08007aa4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b098      	sub	sp, #96	; 0x60
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007aac:	4a84      	ldr	r2, [pc, #528]	; (8007cc0 <HAL_FDCAN_Init+0x21c>)
 8007aae:	f107 030c 	add.w	r3, r7, #12
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	224c      	movs	r2, #76	; 0x4c
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f010 fa91 	bl	8017fde <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e1c6      	b.n	8007e54 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a7e      	ldr	r2, [pc, #504]	; (8007cc4 <HAL_FDCAN_Init+0x220>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d106      	bne.n	8007ade <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007ad8:	461a      	mov	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d106      	bne.n	8007af8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7fb fe12 	bl	800371c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699a      	ldr	r2, [r3, #24]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0210 	bic.w	r2, r2, #16
 8007b06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b08:	f7fc fe48 	bl	800479c <HAL_GetTick>
 8007b0c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007b0e:	e014      	b.n	8007b3a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007b10:	f7fc fe44 	bl	800479c <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b0a      	cmp	r3, #10
 8007b1c:	d90d      	bls.n	8007b3a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b24:	f043 0201 	orr.w	r2, r3, #1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2203      	movs	r2, #3
 8007b32:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e18c      	b.n	8007e54 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d0e3      	beq.n	8007b10 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0201 	orr.w	r2, r2, #1
 8007b56:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b58:	f7fc fe20 	bl	800479c <HAL_GetTick>
 8007b5c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007b5e:	e014      	b.n	8007b8a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007b60:	f7fc fe1c 	bl	800479c <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b0a      	cmp	r3, #10
 8007b6c:	d90d      	bls.n	8007b8a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b74:	f043 0201 	orr.w	r2, r3, #1
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2203      	movs	r2, #3
 8007b82:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e164      	b.n	8007e54 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0e3      	beq.n	8007b60 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699a      	ldr	r2, [r3, #24]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0202 	orr.w	r2, r2, #2
 8007ba6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	7c1b      	ldrb	r3, [r3, #16]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d108      	bne.n	8007bc2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bbe:	619a      	str	r2, [r3, #24]
 8007bc0:	e007      	b.n	8007bd2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699a      	ldr	r2, [r3, #24]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bd0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7c5b      	ldrb	r3, [r3, #17]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d108      	bne.n	8007bec <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	699a      	ldr	r2, [r3, #24]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007be8:	619a      	str	r2, [r3, #24]
 8007bea:	e007      	b.n	8007bfc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bfa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	7c9b      	ldrb	r3, [r3, #18]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d108      	bne.n	8007c16 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c12:	619a      	str	r2, [r3, #24]
 8007c14:	e007      	b.n	8007c26 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c24:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699a      	ldr	r2, [r3, #24]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007c4a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691a      	ldr	r2, [r3, #16]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 0210 	bic.w	r2, r2, #16
 8007c5a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d108      	bne.n	8007c76 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f042 0204 	orr.w	r2, r2, #4
 8007c72:	619a      	str	r2, [r3, #24]
 8007c74:	e030      	b.n	8007cd8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d02c      	beq.n	8007cd8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d020      	beq.n	8007cc8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	699a      	ldr	r2, [r3, #24]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c94:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	691a      	ldr	r2, [r3, #16]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f042 0210 	orr.w	r2, r2, #16
 8007ca4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d114      	bne.n	8007cd8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	699a      	ldr	r2, [r3, #24]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f042 0220 	orr.w	r2, r2, #32
 8007cbc:	619a      	str	r2, [r3, #24]
 8007cbe:	e00b      	b.n	8007cd8 <HAL_FDCAN_Init+0x234>
 8007cc0:	0801c718 	.word	0x0801c718
 8007cc4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	699a      	ldr	r2, [r3, #24]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0220 	orr.w	r2, r2, #32
 8007cd6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ce8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007cf0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007d00:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007d02:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d0c:	d115      	bne.n	8007d3a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d12:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007d1c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	3b01      	subs	r3, #1
 8007d24:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007d26:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007d36:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007d38:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d60:	4413      	add	r3, r2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d011      	beq.n	8007d8a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007d6e:	f023 0107 	bic.w	r1, r3, #7
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	3360      	adds	r3, #96	; 0x60
 8007d7a:	443b      	add	r3, r7
 8007d7c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d011      	beq.n	8007db6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d9a:	f023 0107 	bic.w	r1, r3, #7
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	3360      	adds	r3, #96	; 0x60
 8007da6:	443b      	add	r3, r7
 8007da8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	430a      	orrs	r2, r1
 8007db2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d012      	beq.n	8007de4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007dc6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	3360      	adds	r3, #96	; 0x60
 8007dd2:	443b      	add	r3, r7
 8007dd4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007dd8:	011a      	lsls	r2, r3, #4
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d012      	beq.n	8007e12 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007df4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	3360      	adds	r3, #96	; 0x60
 8007e00:	443b      	add	r3, r7
 8007e02:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007e06:	021a      	lsls	r2, r3, #8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a11      	ldr	r2, [pc, #68]	; (8007e5c <HAL_FDCAN_Init+0x3b8>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d107      	bne.n	8007e2c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f022 0203 	bic.w	r2, r2, #3
 8007e2a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f80b 	bl	8007e60 <FDCAN_CalcultateRamBlockAddresses>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007e50:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3760      	adds	r7, #96	; 0x60
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	4000a000 	.word	0x4000a000

08007e60 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007e76:	4ba7      	ldr	r3, [pc, #668]	; (8008114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	0091      	lsls	r1, r2, #2
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6812      	ldr	r2, [r2, #0]
 8007e82:	430b      	orrs	r3, r1
 8007e84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e90:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	041a      	lsls	r2, r3, #16
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	4413      	add	r3, r2
 8007eac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007eb6:	4b97      	ldr	r3, [pc, #604]	; (8008114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	0091      	lsls	r1, r2, #2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	430b      	orrs	r3, r1
 8007ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed8:	041a      	lsls	r2, r3, #16
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	4413      	add	r3, r2
 8007eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007ef8:	4b86      	ldr	r3, [pc, #536]	; (8008114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007efa:	4013      	ands	r3, r2
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	0091      	lsls	r1, r2, #2
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	6812      	ldr	r2, [r2, #0]
 8007f04:	430b      	orrs	r3, r1
 8007f06:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f12:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	041a      	lsls	r2, r3, #16
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007f2e:	fb02 f303 	mul.w	r3, r2, r3
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	4413      	add	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007f40:	4b74      	ldr	r3, [pc, #464]	; (8008114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f42:	4013      	ands	r3, r2
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	0091      	lsls	r1, r2, #2
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6812      	ldr	r2, [r2, #0]
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f5a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f62:	041a      	lsls	r2, r3, #16
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007f76:	fb02 f303 	mul.w	r3, r2, r3
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007f88:	4b62      	ldr	r3, [pc, #392]	; (8008114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	0091      	lsls	r1, r2, #2
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	430b      	orrs	r3, r1
 8007f96:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007fa2:	fb02 f303 	mul.w	r3, r2, r3
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	4413      	add	r3, r2
 8007faa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007fb4:	4b57      	ldr	r3, [pc, #348]	; (8008114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	0091      	lsls	r1, r2, #2
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	430b      	orrs	r3, r1
 8007fc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fce:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd6:	041a      	lsls	r2, r3, #16
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	4413      	add	r3, r2
 8007fec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007ff6:	4b47      	ldr	r3, [pc, #284]	; (8008114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	0091      	lsls	r1, r2, #2
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6812      	ldr	r2, [r2, #0]
 8008002:	430b      	orrs	r3, r1
 8008004:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008010:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008018:	041a      	lsls	r2, r3, #16
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800802c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008034:	061a      	lsls	r2, r3, #24
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008044:	4b34      	ldr	r3, [pc, #208]	; (8008118 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008046:	4413      	add	r3, r2
 8008048:	009a      	lsls	r2, r3, #2
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	441a      	add	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	441a      	add	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800807a:	fb01 f303 	mul.w	r3, r1, r3
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	441a      	add	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008092:	fb01 f303 	mul.w	r3, r1, r3
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	441a      	add	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80080aa:	fb01 f303 	mul.w	r3, r1, r3
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	441a      	add	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	441a      	add	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80080da:	fb01 f303 	mul.w	r3, r1, r3
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	441a      	add	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80080f6:	fb01 f303 	mul.w	r3, r1, r3
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	441a      	add	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800810a:	4a04      	ldr	r2, [pc, #16]	; (800811c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d915      	bls.n	800813c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008110:	e006      	b.n	8008120 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008112:	bf00      	nop
 8008114:	ffff0003 	.word	0xffff0003
 8008118:	10002b00 	.word	0x10002b00
 800811c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008126:	f043 0220 	orr.w	r2, r3, #32
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2203      	movs	r2, #3
 8008134:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e010      	b.n	800815e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	e005      	b.n	8008150 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3304      	adds	r3, #4
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	429a      	cmp	r2, r3
 800815a:	d3f3      	bcc.n	8008144 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop

0800816c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800816c:	b480      	push	{r7}
 800816e:	b089      	sub	sp, #36	; 0x24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008176:	2300      	movs	r3, #0
 8008178:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800817a:	4b86      	ldr	r3, [pc, #536]	; (8008394 <HAL_GPIO_Init+0x228>)
 800817c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800817e:	e18c      	b.n	800849a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	2101      	movs	r1, #1
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	fa01 f303 	lsl.w	r3, r1, r3
 800818c:	4013      	ands	r3, r2
 800818e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 817e 	beq.w	8008494 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d005      	beq.n	80081b0 <HAL_GPIO_Init+0x44>
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d130      	bne.n	8008212 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	2203      	movs	r2, #3
 80081bc:	fa02 f303 	lsl.w	r3, r2, r3
 80081c0:	43db      	mvns	r3, r3
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	4013      	ands	r3, r2
 80081c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081e6:	2201      	movs	r2, #1
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	fa02 f303 	lsl.w	r3, r2, r3
 80081ee:	43db      	mvns	r3, r3
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	4013      	ands	r3, r2
 80081f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	091b      	lsrs	r3, r3, #4
 80081fc:	f003 0201 	and.w	r2, r3, #1
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	fa02 f303 	lsl.w	r3, r2, r3
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	4313      	orrs	r3, r2
 800820a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	2b03      	cmp	r3, #3
 800821c:	d017      	beq.n	800824e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	2203      	movs	r2, #3
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	43db      	mvns	r3, r3
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	4013      	ands	r3, r2
 8008234:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	fa02 f303 	lsl.w	r3, r2, r3
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	4313      	orrs	r3, r2
 8008246:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d123      	bne.n	80082a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	08da      	lsrs	r2, r3, #3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3208      	adds	r2, #8
 8008262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	220f      	movs	r2, #15
 8008272:	fa02 f303 	lsl.w	r3, r2, r3
 8008276:	43db      	mvns	r3, r3
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	4013      	ands	r3, r2
 800827c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	691a      	ldr	r2, [r3, #16]
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	f003 0307 	and.w	r3, r3, #7
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	fa02 f303 	lsl.w	r3, r2, r3
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	4313      	orrs	r3, r2
 8008292:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	08da      	lsrs	r2, r3, #3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3208      	adds	r2, #8
 800829c:	69b9      	ldr	r1, [r7, #24]
 800829e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	2203      	movs	r2, #3
 80082ae:	fa02 f303 	lsl.w	r3, r2, r3
 80082b2:	43db      	mvns	r3, r3
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	4013      	ands	r3, r2
 80082b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f003 0203 	and.w	r2, r3, #3
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 80d8 	beq.w	8008494 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082e4:	4b2c      	ldr	r3, [pc, #176]	; (8008398 <HAL_GPIO_Init+0x22c>)
 80082e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082ea:	4a2b      	ldr	r2, [pc, #172]	; (8008398 <HAL_GPIO_Init+0x22c>)
 80082ec:	f043 0302 	orr.w	r3, r3, #2
 80082f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80082f4:	4b28      	ldr	r3, [pc, #160]	; (8008398 <HAL_GPIO_Init+0x22c>)
 80082f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008302:	4a26      	ldr	r2, [pc, #152]	; (800839c <HAL_GPIO_Init+0x230>)
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	089b      	lsrs	r3, r3, #2
 8008308:	3302      	adds	r3, #2
 800830a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800830e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	220f      	movs	r2, #15
 800831a:	fa02 f303 	lsl.w	r3, r2, r3
 800831e:	43db      	mvns	r3, r3
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	4013      	ands	r3, r2
 8008324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a1d      	ldr	r2, [pc, #116]	; (80083a0 <HAL_GPIO_Init+0x234>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d04a      	beq.n	80083c4 <HAL_GPIO_Init+0x258>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a1c      	ldr	r2, [pc, #112]	; (80083a4 <HAL_GPIO_Init+0x238>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d02b      	beq.n	800838e <HAL_GPIO_Init+0x222>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a1b      	ldr	r2, [pc, #108]	; (80083a8 <HAL_GPIO_Init+0x23c>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d025      	beq.n	800838a <HAL_GPIO_Init+0x21e>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a1a      	ldr	r2, [pc, #104]	; (80083ac <HAL_GPIO_Init+0x240>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d01f      	beq.n	8008386 <HAL_GPIO_Init+0x21a>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a19      	ldr	r2, [pc, #100]	; (80083b0 <HAL_GPIO_Init+0x244>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d019      	beq.n	8008382 <HAL_GPIO_Init+0x216>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a18      	ldr	r2, [pc, #96]	; (80083b4 <HAL_GPIO_Init+0x248>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d013      	beq.n	800837e <HAL_GPIO_Init+0x212>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a17      	ldr	r2, [pc, #92]	; (80083b8 <HAL_GPIO_Init+0x24c>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00d      	beq.n	800837a <HAL_GPIO_Init+0x20e>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a16      	ldr	r2, [pc, #88]	; (80083bc <HAL_GPIO_Init+0x250>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d007      	beq.n	8008376 <HAL_GPIO_Init+0x20a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a15      	ldr	r2, [pc, #84]	; (80083c0 <HAL_GPIO_Init+0x254>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d101      	bne.n	8008372 <HAL_GPIO_Init+0x206>
 800836e:	2309      	movs	r3, #9
 8008370:	e029      	b.n	80083c6 <HAL_GPIO_Init+0x25a>
 8008372:	230a      	movs	r3, #10
 8008374:	e027      	b.n	80083c6 <HAL_GPIO_Init+0x25a>
 8008376:	2307      	movs	r3, #7
 8008378:	e025      	b.n	80083c6 <HAL_GPIO_Init+0x25a>
 800837a:	2306      	movs	r3, #6
 800837c:	e023      	b.n	80083c6 <HAL_GPIO_Init+0x25a>
 800837e:	2305      	movs	r3, #5
 8008380:	e021      	b.n	80083c6 <HAL_GPIO_Init+0x25a>
 8008382:	2304      	movs	r3, #4
 8008384:	e01f      	b.n	80083c6 <HAL_GPIO_Init+0x25a>
 8008386:	2303      	movs	r3, #3
 8008388:	e01d      	b.n	80083c6 <HAL_GPIO_Init+0x25a>
 800838a:	2302      	movs	r3, #2
 800838c:	e01b      	b.n	80083c6 <HAL_GPIO_Init+0x25a>
 800838e:	2301      	movs	r3, #1
 8008390:	e019      	b.n	80083c6 <HAL_GPIO_Init+0x25a>
 8008392:	bf00      	nop
 8008394:	58000080 	.word	0x58000080
 8008398:	58024400 	.word	0x58024400
 800839c:	58000400 	.word	0x58000400
 80083a0:	58020000 	.word	0x58020000
 80083a4:	58020400 	.word	0x58020400
 80083a8:	58020800 	.word	0x58020800
 80083ac:	58020c00 	.word	0x58020c00
 80083b0:	58021000 	.word	0x58021000
 80083b4:	58021400 	.word	0x58021400
 80083b8:	58021800 	.word	0x58021800
 80083bc:	58021c00 	.word	0x58021c00
 80083c0:	58022400 	.word	0x58022400
 80083c4:	2300      	movs	r3, #0
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	f002 0203 	and.w	r2, r2, #3
 80083cc:	0092      	lsls	r2, r2, #2
 80083ce:	4093      	lsls	r3, r2
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083d6:	4938      	ldr	r1, [pc, #224]	; (80084b8 <HAL_GPIO_Init+0x34c>)
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	089b      	lsrs	r3, r3, #2
 80083dc:	3302      	adds	r3, #2
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	43db      	mvns	r3, r3
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	4013      	ands	r3, r2
 80083f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	4313      	orrs	r3, r2
 8008408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800840a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	43db      	mvns	r3, r3
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	4013      	ands	r3, r2
 8008422:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	4313      	orrs	r3, r2
 8008436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	43db      	mvns	r3, r3
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	4013      	ands	r3, r2
 800844e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	4313      	orrs	r3, r2
 8008462:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	43db      	mvns	r3, r3
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	4013      	ands	r3, r2
 8008478:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	3301      	adds	r3, #1
 8008498:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	fa22 f303 	lsr.w	r3, r2, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f47f ae6b 	bne.w	8008180 <HAL_GPIO_Init+0x14>
  }
}
 80084aa:	bf00      	nop
 80084ac:	bf00      	nop
 80084ae:	3724      	adds	r7, #36	; 0x24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	58000400 	.word	0x58000400

080084bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	460b      	mov	r3, r1
 80084c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	887b      	ldrh	r3, [r7, #2]
 80084ce:	4013      	ands	r3, r2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80084d4:	2301      	movs	r3, #1
 80084d6:	73fb      	strb	r3, [r7, #15]
 80084d8:	e001      	b.n	80084de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80084da:	2300      	movs	r3, #0
 80084dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	807b      	strh	r3, [r7, #2]
 80084f8:	4613      	mov	r3, r2
 80084fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084fc:	787b      	ldrb	r3, [r7, #1]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008502:	887a      	ldrh	r2, [r7, #2]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008508:	e003      	b.n	8008512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800850a:	887b      	ldrh	r3, [r7, #2]
 800850c:	041a      	lsls	r2, r3, #16
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	619a      	str	r2, [r3, #24]
}
 8008512:	bf00      	nop
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
	...

08008520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e07f      	b.n	8008632 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d106      	bne.n	800854c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7fb f950 	bl	80037ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2224      	movs	r2, #36	; 0x24
 8008550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0201 	bic.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008570:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008580:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d107      	bne.n	800859a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	689a      	ldr	r2, [r3, #8]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008596:	609a      	str	r2, [r3, #8]
 8008598:	e006      	b.n	80085a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80085a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d104      	bne.n	80085ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6859      	ldr	r1, [r3, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	4b1d      	ldr	r3, [pc, #116]	; (800863c <HAL_I2C_Init+0x11c>)
 80085c6:	430b      	orrs	r3, r1
 80085c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	69d9      	ldr	r1, [r3, #28]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1a      	ldr	r2, [r3, #32]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f042 0201 	orr.w	r2, r2, #1
 8008612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2220      	movs	r2, #32
 800861e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	02008000 	.word	0x02008000

08008640 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	68f9      	ldr	r1, [r7, #12]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	4798      	blx	r3
  }
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b20      	cmp	r3, #32
 8008688:	d138      	bne.n	80086fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008694:	2302      	movs	r3, #2
 8008696:	e032      	b.n	80086fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2224      	movs	r2, #36	; 0x24
 80086a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f022 0201 	bic.w	r2, r2, #1
 80086b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6819      	ldr	r1, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0201 	orr.w	r2, r2, #1
 80086e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2220      	movs	r2, #32
 80086ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	e000      	b.n	80086fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80086fc:	2302      	movs	r3, #2
  }
}
 80086fe:	4618      	mov	r0, r3
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b20      	cmp	r3, #32
 800871e:	d139      	bne.n	8008794 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008726:	2b01      	cmp	r3, #1
 8008728:	d101      	bne.n	800872e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800872a:	2302      	movs	r3, #2
 800872c:	e033      	b.n	8008796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2224      	movs	r2, #36	; 0x24
 800873a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0201 	bic.w	r2, r2, #1
 800874c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800875c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	021b      	lsls	r3, r3, #8
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	4313      	orrs	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f042 0201 	orr.w	r2, r2, #1
 800877e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2220      	movs	r2, #32
 8008784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	e000      	b.n	8008796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008794:	2302      	movs	r3, #2
  }
}
 8008796:	4618      	mov	r0, r3
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80087a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087a4:	b08f      	sub	sp, #60	; 0x3c
 80087a6:	af0a      	add	r7, sp, #40	; 0x28
 80087a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e116      	b.n	80089e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d106      	bne.n	80087d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f00e f916 	bl	8016a00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2203      	movs	r2, #3
 80087d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d102      	bne.n	80087ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f00a fa5b 	bl	8012cae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	603b      	str	r3, [r7, #0]
 80087fe:	687e      	ldr	r6, [r7, #4]
 8008800:	466d      	mov	r5, sp
 8008802:	f106 0410 	add.w	r4, r6, #16
 8008806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800880a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800880c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800880e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008812:	e885 0003 	stmia.w	r5, {r0, r1}
 8008816:	1d33      	adds	r3, r6, #4
 8008818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800881a:	6838      	ldr	r0, [r7, #0]
 800881c:	f00a f926 	bl	8012a6c <USB_CoreInit>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d005      	beq.n	8008832 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2202      	movs	r2, #2
 800882a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e0d7      	b.n	80089e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2100      	movs	r1, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f00a fa49 	bl	8012cd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
 8008842:	e04a      	b.n	80088da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008844:	7bfa      	ldrb	r2, [r7, #15]
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	4613      	mov	r3, r2
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	4413      	add	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	440b      	add	r3, r1
 8008852:	333d      	adds	r3, #61	; 0x3d
 8008854:	2201      	movs	r2, #1
 8008856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008858:	7bfa      	ldrb	r2, [r7, #15]
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	4613      	mov	r3, r2
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	440b      	add	r3, r1
 8008866:	333c      	adds	r3, #60	; 0x3c
 8008868:	7bfa      	ldrb	r2, [r7, #15]
 800886a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800886c:	7bfa      	ldrb	r2, [r7, #15]
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	b298      	uxth	r0, r3
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	4613      	mov	r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	3356      	adds	r3, #86	; 0x56
 8008880:	4602      	mov	r2, r0
 8008882:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008884:	7bfa      	ldrb	r2, [r7, #15]
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	4613      	mov	r3, r2
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	4413      	add	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	440b      	add	r3, r1
 8008892:	3340      	adds	r3, #64	; 0x40
 8008894:	2200      	movs	r2, #0
 8008896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008898:	7bfa      	ldrb	r2, [r7, #15]
 800889a:	6879      	ldr	r1, [r7, #4]
 800889c:	4613      	mov	r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	4413      	add	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	440b      	add	r3, r1
 80088a6:	3344      	adds	r3, #68	; 0x44
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80088ac:	7bfa      	ldrb	r2, [r7, #15]
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	4613      	mov	r3, r2
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	4413      	add	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	440b      	add	r3, r1
 80088ba:	3348      	adds	r3, #72	; 0x48
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80088c0:	7bfa      	ldrb	r2, [r7, #15]
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	4613      	mov	r3, r2
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	4413      	add	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	440b      	add	r3, r1
 80088ce:	334c      	adds	r3, #76	; 0x4c
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	3301      	adds	r3, #1
 80088d8:	73fb      	strb	r3, [r7, #15]
 80088da:	7bfa      	ldrb	r2, [r7, #15]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d3af      	bcc.n	8008844 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	e044      	b.n	8008974 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80088ea:	7bfa      	ldrb	r2, [r7, #15]
 80088ec:	6879      	ldr	r1, [r7, #4]
 80088ee:	4613      	mov	r3, r2
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	440b      	add	r3, r1
 80088f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80088fc:	2200      	movs	r2, #0
 80088fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008900:	7bfa      	ldrb	r2, [r7, #15]
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	4613      	mov	r3, r2
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	440b      	add	r3, r1
 800890e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008912:	7bfa      	ldrb	r2, [r7, #15]
 8008914:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008916:	7bfa      	ldrb	r2, [r7, #15]
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	440b      	add	r3, r1
 8008924:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008928:	2200      	movs	r2, #0
 800892a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800892c:	7bfa      	ldrb	r2, [r7, #15]
 800892e:	6879      	ldr	r1, [r7, #4]
 8008930:	4613      	mov	r3, r2
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	4413      	add	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	440b      	add	r3, r1
 800893a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008942:	7bfa      	ldrb	r2, [r7, #15]
 8008944:	6879      	ldr	r1, [r7, #4]
 8008946:	4613      	mov	r3, r2
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	4413      	add	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	440b      	add	r3, r1
 8008950:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008958:	7bfa      	ldrb	r2, [r7, #15]
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	4613      	mov	r3, r2
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	4413      	add	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800896a:	2200      	movs	r2, #0
 800896c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	3301      	adds	r3, #1
 8008972:	73fb      	strb	r3, [r7, #15]
 8008974:	7bfa      	ldrb	r2, [r7, #15]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	429a      	cmp	r2, r3
 800897c:	d3b5      	bcc.n	80088ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	687e      	ldr	r6, [r7, #4]
 8008986:	466d      	mov	r5, sp
 8008988:	f106 0410 	add.w	r4, r6, #16
 800898c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800898e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008994:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008998:	e885 0003 	stmia.w	r5, {r0, r1}
 800899c:	1d33      	adds	r3, r6, #4
 800899e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089a0:	6838      	ldr	r0, [r7, #0]
 80089a2:	f00a f9e1 	bl	8012d68 <USB_DevInit>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e014      	b.n	80089e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d102      	bne.n	80089d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 f96f 	bl	8009cb4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4618      	mov	r0, r3
 80089dc:	f00b fa23 	bl	8013e26 <USB_DevDisconnect>

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d101      	bne.n	8008a06 <HAL_PCD_Start+0x1c>
 8008a02:	2302      	movs	r3, #2
 8008a04:	e022      	b.n	8008a4c <HAL_PCD_Start+0x62>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d109      	bne.n	8008a2e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d105      	bne.n	8008a2e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f00a f92a 	bl	8012c8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f00b f9d1 	bl	8013de4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a54:	b590      	push	{r4, r7, lr}
 8008a56:	b08d      	sub	sp, #52	; 0x34
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f00b fa8f 	bl	8013f8e <USB_GetMode>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f040 84b7 	bne.w	80093e6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f00b f9f3 	bl	8013e68 <USB_ReadInterrupts>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 84ad 	beq.w	80093e4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	0a1b      	lsrs	r3, r3, #8
 8008a94:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f00b f9e0 	bl	8013e68 <USB_ReadInterrupts>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d107      	bne.n	8008ac2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	695a      	ldr	r2, [r3, #20]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f002 0202 	and.w	r2, r2, #2
 8008ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f00b f9ce 	bl	8013e68 <USB_ReadInterrupts>
 8008acc:	4603      	mov	r3, r0
 8008ace:	f003 0310 	and.w	r3, r3, #16
 8008ad2:	2b10      	cmp	r3, #16
 8008ad4:	d161      	bne.n	8008b9a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	699a      	ldr	r2, [r3, #24]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 0210 	bic.w	r2, r2, #16
 8008ae4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	f003 020f 	and.w	r2, r3, #15
 8008af2:	4613      	mov	r3, r2
 8008af4:	00db      	lsls	r3, r3, #3
 8008af6:	4413      	add	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	4413      	add	r3, r2
 8008b02:	3304      	adds	r3, #4
 8008b04:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	0c5b      	lsrs	r3, r3, #17
 8008b0a:	f003 030f 	and.w	r3, r3, #15
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d124      	bne.n	8008b5c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008b18:	4013      	ands	r3, r2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d035      	beq.n	8008b8a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	091b      	lsrs	r3, r3, #4
 8008b26:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008b28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	461a      	mov	r2, r3
 8008b30:	6a38      	ldr	r0, [r7, #32]
 8008b32:	f00b f805 	bl	8013b40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	091b      	lsrs	r3, r3, #4
 8008b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b42:	441a      	add	r2, r3
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	695a      	ldr	r2, [r3, #20]
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	091b      	lsrs	r3, r3, #4
 8008b50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b54:	441a      	add	r2, r3
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	615a      	str	r2, [r3, #20]
 8008b5a:	e016      	b.n	8008b8a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	0c5b      	lsrs	r3, r3, #17
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	2b06      	cmp	r3, #6
 8008b66:	d110      	bne.n	8008b8a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008b6e:	2208      	movs	r2, #8
 8008b70:	4619      	mov	r1, r3
 8008b72:	6a38      	ldr	r0, [r7, #32]
 8008b74:	f00a ffe4 	bl	8013b40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	695a      	ldr	r2, [r3, #20]
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	091b      	lsrs	r3, r3, #4
 8008b80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b84:	441a      	add	r2, r3
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	699a      	ldr	r2, [r3, #24]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f042 0210 	orr.w	r2, r2, #16
 8008b98:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f00b f962 	bl	8013e68 <USB_ReadInterrupts>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008baa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008bae:	f040 80a7 	bne.w	8008d00 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f00b f967 	bl	8013e8e <USB_ReadDevAllOutEpInterrupt>
 8008bc0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008bc2:	e099      	b.n	8008cf8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 808e 	beq.w	8008cec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd6:	b2d2      	uxtb	r2, r2
 8008bd8:	4611      	mov	r1, r2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f00b f98b 	bl	8013ef6 <USB_ReadDevOutEPInterrupt>
 8008be0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00c      	beq.n	8008c06 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fed1 	bl	80099a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00c      	beq.n	8008c2a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	2308      	movs	r3, #8
 8008c20:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 ffa7 	bl	8009b78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d008      	beq.n	8008c46 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c40:	461a      	mov	r2, r3
 8008c42:	2310      	movs	r3, #16
 8008c44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f003 0302 	and.w	r3, r3, #2
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d030      	beq.n	8008cb2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c58:	2b80      	cmp	r3, #128	; 0x80
 8008c5a:	d109      	bne.n	8008c70 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	69fa      	ldr	r2, [r7, #28]
 8008c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c6e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c72:	4613      	mov	r3, r2
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	4413      	add	r3, r2
 8008c82:	3304      	adds	r3, #4
 8008c84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	78db      	ldrb	r3, [r3, #3]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d108      	bne.n	8008ca0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2200      	movs	r2, #0
 8008c92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f00d ffa8 	bl	8016bf0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cac:	461a      	mov	r2, r3
 8008cae:	2302      	movs	r3, #2
 8008cb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f003 0320 	and.w	r3, r3, #32
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d008      	beq.n	8008cce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc8:	461a      	mov	r2, r3
 8008cca:	2320      	movs	r3, #32
 8008ccc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d009      	beq.n	8008cec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	3301      	adds	r3, #1
 8008cf0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	085b      	lsrs	r3, r3, #1
 8008cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f47f af62 	bne.w	8008bc4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f00b f8af 	bl	8013e68 <USB_ReadInterrupts>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d14:	f040 80db 	bne.w	8008ece <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f00b f8d0 	bl	8013ec2 <USB_ReadDevAllInEpInterrupt>
 8008d22:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008d28:	e0cd      	b.n	8008ec6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 80c2 	beq.w	8008eba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3c:	b2d2      	uxtb	r2, r2
 8008d3e:	4611      	mov	r1, r2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f00b f8f6 	bl	8013f32 <USB_ReadDevInEPInterrupt>
 8008d46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f003 0301 	and.w	r3, r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d057      	beq.n	8008e02 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	f003 030f 	and.w	r3, r3, #15
 8008d58:	2201      	movs	r2, #1
 8008d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	43db      	mvns	r3, r3
 8008d6c:	69f9      	ldr	r1, [r7, #28]
 8008d6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d72:	4013      	ands	r3, r2
 8008d74:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d82:	461a      	mov	r2, r3
 8008d84:	2301      	movs	r3, #1
 8008d86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d132      	bne.n	8008df6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008d90:	6879      	ldr	r1, [r7, #4]
 8008d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d94:	4613      	mov	r3, r2
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	3348      	adds	r3, #72	; 0x48
 8008da0:	6819      	ldr	r1, [r3, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da6:	4613      	mov	r3, r2
 8008da8:	00db      	lsls	r3, r3, #3
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4403      	add	r3, r0
 8008db0:	3344      	adds	r3, #68	; 0x44
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4419      	add	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dba:	4613      	mov	r3, r2
 8008dbc:	00db      	lsls	r3, r3, #3
 8008dbe:	4413      	add	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4403      	add	r3, r0
 8008dc4:	3348      	adds	r3, #72	; 0x48
 8008dc6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d113      	bne.n	8008df6 <HAL_PCD_IRQHandler+0x3a2>
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	334c      	adds	r3, #76	; 0x4c
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d108      	bne.n	8008df6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6818      	ldr	r0, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008dee:	461a      	mov	r2, r3
 8008df0:	2101      	movs	r1, #1
 8008df2:	f00b f8ff 	bl	8013ff4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f00d fe72 	bl	8016ae6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f003 0308 	and.w	r3, r3, #8
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d008      	beq.n	8008e1e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e18:	461a      	mov	r2, r3
 8008e1a:	2308      	movs	r3, #8
 8008e1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f003 0310 	and.w	r3, r3, #16
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d008      	beq.n	8008e3a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e34:	461a      	mov	r2, r3
 8008e36:	2310      	movs	r3, #16
 8008e38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d008      	beq.n	8008e56 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e50:	461a      	mov	r2, r3
 8008e52:	2340      	movs	r3, #64	; 0x40
 8008e54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d023      	beq.n	8008ea8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e62:	6a38      	ldr	r0, [r7, #32]
 8008e64:	f00a f8de 	bl	8013024 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	3338      	adds	r3, #56	; 0x38
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	4413      	add	r3, r2
 8008e78:	3304      	adds	r3, #4
 8008e7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	78db      	ldrb	r3, [r3, #3]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d108      	bne.n	8008e96 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2200      	movs	r2, #0
 8008e88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f00d febf 	bl	8016c14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008eb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fcea 	bl	800988e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	085b      	lsrs	r3, r3, #1
 8008ec4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f47f af2e 	bne.w	8008d2a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f00a ffc8 	bl	8013e68 <USB_ReadInterrupts>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ee2:	d122      	bne.n	8008f2a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ef2:	f023 0301 	bic.w	r3, r3, #1
 8008ef6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d108      	bne.n	8008f14 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fef5 	bl	8009cfc <HAL_PCDEx_LPM_Callback>
 8008f12:	e002      	b.n	8008f1a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f00d fe5d 	bl	8016bd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	695a      	ldr	r2, [r3, #20]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f00a ff9a 	bl	8013e68 <USB_ReadInterrupts>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f3e:	d112      	bne.n	8008f66 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d102      	bne.n	8008f56 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f00d fe19 	bl	8016b88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	695a      	ldr	r2, [r3, #20]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f00a ff7c 	bl	8013e68 <USB_ReadInterrupts>
 8008f70:	4603      	mov	r3, r0
 8008f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f7a:	d121      	bne.n	8008fc0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	695a      	ldr	r2, [r3, #20]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008f8a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d111      	bne.n	8008fba <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa4:	089b      	lsrs	r3, r3, #2
 8008fa6:	f003 020f 	and.w	r2, r3, #15
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fea2 	bl	8009cfc <HAL_PCDEx_LPM_Callback>
 8008fb8:	e002      	b.n	8008fc0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f00d fde4 	bl	8016b88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f00a ff4f 	bl	8013e68 <USB_ReadInterrupts>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fd4:	f040 80b7 	bne.w	8009146 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	69fa      	ldr	r2, [r7, #28]
 8008fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fe6:	f023 0301 	bic.w	r3, r3, #1
 8008fea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2110      	movs	r1, #16
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f00a f816 	bl	8013024 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ffc:	e046      	b.n	800908c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009000:	015a      	lsls	r2, r3, #5
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	4413      	add	r3, r2
 8009006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900a:	461a      	mov	r2, r3
 800900c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009010:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	4413      	add	r3, r2
 800901a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009022:	0151      	lsls	r1, r2, #5
 8009024:	69fa      	ldr	r2, [r7, #28]
 8009026:	440a      	add	r2, r1
 8009028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800902c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009030:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903e:	461a      	mov	r2, r3
 8009040:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009044:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	4413      	add	r3, r2
 800904e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009056:	0151      	lsls	r1, r2, #5
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	440a      	add	r2, r1
 800905c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009060:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009064:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009076:	0151      	lsls	r1, r2, #5
 8009078:	69fa      	ldr	r2, [r7, #28]
 800907a:	440a      	add	r2, r1
 800907c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009084:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	3301      	adds	r3, #1
 800908a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009092:	429a      	cmp	r2, r3
 8009094:	d3b3      	bcc.n	8008ffe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80090a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d016      	beq.n	80090e0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090bc:	69fa      	ldr	r2, [r7, #28]
 80090be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090c2:	f043 030b 	orr.w	r3, r3, #11
 80090c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d2:	69fa      	ldr	r2, [r7, #28]
 80090d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090d8:	f043 030b 	orr.w	r3, r3, #11
 80090dc:	6453      	str	r3, [r2, #68]	; 0x44
 80090de:	e015      	b.n	800910c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e6:	695a      	ldr	r2, [r3, #20]
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ee:	4619      	mov	r1, r3
 80090f0:	f242 032b 	movw	r3, #8235	; 0x202b
 80090f4:	4313      	orrs	r3, r2
 80090f6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	69fa      	ldr	r2, [r7, #28]
 8009102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009106:	f043 030b 	orr.w	r3, r3, #11
 800910a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	69fa      	ldr	r2, [r7, #28]
 8009116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800911a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800911e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009130:	461a      	mov	r2, r3
 8009132:	f00a ff5f 	bl	8013ff4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	695a      	ldr	r2, [r3, #20]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4618      	mov	r0, r3
 800914c:	f00a fe8c 	bl	8013e68 <USB_ReadInterrupts>
 8009150:	4603      	mov	r3, r0
 8009152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800915a:	d124      	bne.n	80091a6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4618      	mov	r0, r3
 8009162:	f00a ff23 	bl	8013fac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	f009 ffd7 	bl	801311e <USB_GetDevSpeed>
 8009170:	4603      	mov	r3, r0
 8009172:	461a      	mov	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681c      	ldr	r4, [r3, #0]
 800917c:	f001 fd88 	bl	800ac90 <HAL_RCC_GetHCLKFreq>
 8009180:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009186:	b2db      	uxtb	r3, r3
 8009188:	461a      	mov	r2, r3
 800918a:	4620      	mov	r0, r4
 800918c:	f009 fcdc 	bl	8012b48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f00d fcd0 	bl	8016b36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	695a      	ldr	r2, [r3, #20]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80091a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f00a fe5c 	bl	8013e68 <USB_ReadInterrupts>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f003 0308 	and.w	r3, r3, #8
 80091b6:	2b08      	cmp	r3, #8
 80091b8:	d10a      	bne.n	80091d0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f00d fcad 	bl	8016b1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	695a      	ldr	r2, [r3, #20]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f002 0208 	and.w	r2, r2, #8
 80091ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f00a fe47 	bl	8013e68 <USB_ReadInterrupts>
 80091da:	4603      	mov	r3, r0
 80091dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e0:	2b80      	cmp	r3, #128	; 0x80
 80091e2:	d122      	bne.n	800922a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091f0:	2301      	movs	r3, #1
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
 80091f4:	e014      	b.n	8009220 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091fa:	4613      	mov	r3, r2
 80091fc:	00db      	lsls	r3, r3, #3
 80091fe:	4413      	add	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	440b      	add	r3, r1
 8009204:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d105      	bne.n	800921a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	b2db      	uxtb	r3, r3
 8009212:	4619      	mov	r1, r3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fb09 	bl	800982c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	3301      	adds	r3, #1
 800921e:	627b      	str	r3, [r7, #36]	; 0x24
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009226:	429a      	cmp	r2, r3
 8009228:	d3e5      	bcc.n	80091f6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4618      	mov	r0, r3
 8009230:	f00a fe1a 	bl	8013e68 <USB_ReadInterrupts>
 8009234:	4603      	mov	r3, r0
 8009236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800923a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800923e:	d13b      	bne.n	80092b8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009240:	2301      	movs	r3, #1
 8009242:	627b      	str	r3, [r7, #36]	; 0x24
 8009244:	e02b      	b.n	800929e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009256:	6879      	ldr	r1, [r7, #4]
 8009258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800925a:	4613      	mov	r3, r2
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	440b      	add	r3, r1
 8009264:	3340      	adds	r3, #64	; 0x40
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d115      	bne.n	8009298 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800926c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800926e:	2b00      	cmp	r3, #0
 8009270:	da12      	bge.n	8009298 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009276:	4613      	mov	r3, r2
 8009278:	00db      	lsls	r3, r3, #3
 800927a:	4413      	add	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	440b      	add	r3, r1
 8009280:	333f      	adds	r3, #63	; 0x3f
 8009282:	2201      	movs	r2, #1
 8009284:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	b2db      	uxtb	r3, r3
 800928a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800928e:	b2db      	uxtb	r3, r3
 8009290:	4619      	mov	r1, r3
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 faca 	bl	800982c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	3301      	adds	r3, #1
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d3ce      	bcc.n	8009246 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	695a      	ldr	r2, [r3, #20]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80092b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4618      	mov	r0, r3
 80092be:	f00a fdd3 	bl	8013e68 <USB_ReadInterrupts>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092cc:	d155      	bne.n	800937a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092ce:	2301      	movs	r3, #1
 80092d0:	627b      	str	r3, [r7, #36]	; 0x24
 80092d2:	e045      	b.n	8009360 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80092e4:	6879      	ldr	r1, [r7, #4]
 80092e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e8:	4613      	mov	r3, r2
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d12e      	bne.n	800935a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80092fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80092fe:	2b00      	cmp	r3, #0
 8009300:	da2b      	bge.n	800935a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800930e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009312:	429a      	cmp	r2, r3
 8009314:	d121      	bne.n	800935a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931a:	4613      	mov	r3, r2
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	440b      	add	r3, r1
 8009324:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009328:	2201      	movs	r2, #1
 800932a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10a      	bne.n	800935a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	69fa      	ldr	r2, [r7, #28]
 800934e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009356:	6053      	str	r3, [r2, #4]
            break;
 8009358:	e007      	b.n	800936a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	3301      	adds	r3, #1
 800935e:	627b      	str	r3, [r7, #36]	; 0x24
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009366:	429a      	cmp	r2, r3
 8009368:	d3b4      	bcc.n	80092d4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	695a      	ldr	r2, [r3, #20]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4618      	mov	r0, r3
 8009380:	f00a fd72 	bl	8013e68 <USB_ReadInterrupts>
 8009384:	4603      	mov	r3, r0
 8009386:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800938a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800938e:	d10a      	bne.n	80093a6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f00d fc51 	bl	8016c38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	695a      	ldr	r2, [r3, #20]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80093a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f00a fd5c 	bl	8013e68 <USB_ReadInterrupts>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f003 0304 	and.w	r3, r3, #4
 80093b6:	2b04      	cmp	r3, #4
 80093b8:	d115      	bne.n	80093e6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f00d fc41 	bl	8016c54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6859      	ldr	r1, [r3, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	430a      	orrs	r2, r1
 80093e0:	605a      	str	r2, [r3, #4]
 80093e2:	e000      	b.n	80093e6 <HAL_PCD_IRQHandler+0x992>
      return;
 80093e4:	bf00      	nop
    }
  }
}
 80093e6:	3734      	adds	r7, #52	; 0x34
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd90      	pop	{r4, r7, pc}

080093ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_PCD_SetAddress+0x1a>
 8009402:	2302      	movs	r3, #2
 8009404:	e013      	b.n	800942e <HAL_PCD_SetAddress+0x42>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	78fa      	ldrb	r2, [r7, #3]
 8009412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f00a fcba 	bl	8013d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	4608      	mov	r0, r1
 8009440:	4611      	mov	r1, r2
 8009442:	461a      	mov	r2, r3
 8009444:	4603      	mov	r3, r0
 8009446:	70fb      	strb	r3, [r7, #3]
 8009448:	460b      	mov	r3, r1
 800944a:	803b      	strh	r3, [r7, #0]
 800944c:	4613      	mov	r3, r2
 800944e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009458:	2b00      	cmp	r3, #0
 800945a:	da0f      	bge.n	800947c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800945c:	78fb      	ldrb	r3, [r7, #3]
 800945e:	f003 020f 	and.w	r2, r3, #15
 8009462:	4613      	mov	r3, r2
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	4413      	add	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	3338      	adds	r3, #56	; 0x38
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	4413      	add	r3, r2
 8009470:	3304      	adds	r3, #4
 8009472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2201      	movs	r2, #1
 8009478:	705a      	strb	r2, [r3, #1]
 800947a:	e00f      	b.n	800949c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	f003 020f 	and.w	r2, r3, #15
 8009482:	4613      	mov	r3, r2
 8009484:	00db      	lsls	r3, r3, #3
 8009486:	4413      	add	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	4413      	add	r3, r2
 8009492:	3304      	adds	r3, #4
 8009494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	f003 030f 	and.w	r3, r3, #15
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80094a8:	883a      	ldrh	r2, [r7, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	78ba      	ldrb	r2, [r7, #2]
 80094b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	785b      	ldrb	r3, [r3, #1]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80094c6:	78bb      	ldrb	r3, [r7, #2]
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d102      	bne.n	80094d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d101      	bne.n	80094e0 <HAL_PCD_EP_Open+0xaa>
 80094dc:	2302      	movs	r3, #2
 80094de:	e00e      	b.n	80094fe <HAL_PCD_EP_Open+0xc8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68f9      	ldr	r1, [r7, #12]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f009 fe3a 	bl	8013168 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80094fc:	7afb      	ldrb	r3, [r7, #11]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009516:	2b00      	cmp	r3, #0
 8009518:	da0f      	bge.n	800953a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800951a:	78fb      	ldrb	r3, [r7, #3]
 800951c:	f003 020f 	and.w	r2, r3, #15
 8009520:	4613      	mov	r3, r2
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	3338      	adds	r3, #56	; 0x38
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	4413      	add	r3, r2
 800952e:	3304      	adds	r3, #4
 8009530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2201      	movs	r2, #1
 8009536:	705a      	strb	r2, [r3, #1]
 8009538:	e00f      	b.n	800955a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800953a:	78fb      	ldrb	r3, [r7, #3]
 800953c:	f003 020f 	and.w	r2, r3, #15
 8009540:	4613      	mov	r3, r2
 8009542:	00db      	lsls	r3, r3, #3
 8009544:	4413      	add	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	4413      	add	r3, r2
 8009550:	3304      	adds	r3, #4
 8009552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	f003 030f 	and.w	r3, r3, #15
 8009560:	b2da      	uxtb	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800956c:	2b01      	cmp	r3, #1
 800956e:	d101      	bne.n	8009574 <HAL_PCD_EP_Close+0x6e>
 8009570:	2302      	movs	r3, #2
 8009572:	e00e      	b.n	8009592 <HAL_PCD_EP_Close+0x8c>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68f9      	ldr	r1, [r7, #12]
 8009582:	4618      	mov	r0, r3
 8009584:	f009 fe78 	bl	8013278 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b086      	sub	sp, #24
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	603b      	str	r3, [r7, #0]
 80095a6:	460b      	mov	r3, r1
 80095a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095aa:	7afb      	ldrb	r3, [r7, #11]
 80095ac:	f003 020f 	and.w	r2, r3, #15
 80095b0:	4613      	mov	r3, r2
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4413      	add	r3, r2
 80095c0:	3304      	adds	r3, #4
 80095c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2200      	movs	r2, #0
 80095d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	2200      	movs	r2, #0
 80095da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095dc:	7afb      	ldrb	r3, [r7, #11]
 80095de:	f003 030f 	and.w	r3, r3, #15
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d102      	bne.n	80095f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	461a      	mov	r2, r3
 8009602:	6979      	ldr	r1, [r7, #20]
 8009604:	f009 ff14 	bl	8013430 <USB_EPStartXfer>

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800961e:	78fb      	ldrb	r3, [r7, #3]
 8009620:	f003 020f 	and.w	r2, r3, #15
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	4613      	mov	r3, r2
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	4413      	add	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	440b      	add	r3, r1
 8009630:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009634:	681b      	ldr	r3, [r3, #0]
}
 8009636:	4618      	mov	r0, r3
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b086      	sub	sp, #24
 8009646:	af00      	add	r7, sp, #0
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	607a      	str	r2, [r7, #4]
 800964c:	603b      	str	r3, [r7, #0]
 800964e:	460b      	mov	r3, r1
 8009650:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009652:	7afb      	ldrb	r3, [r7, #11]
 8009654:	f003 020f 	and.w	r2, r3, #15
 8009658:	4613      	mov	r3, r2
 800965a:	00db      	lsls	r3, r3, #3
 800965c:	4413      	add	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	3338      	adds	r3, #56	; 0x38
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	4413      	add	r3, r2
 8009666:	3304      	adds	r3, #4
 8009668:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2200      	movs	r2, #0
 800967a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2201      	movs	r2, #1
 8009680:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009682:	7afb      	ldrb	r3, [r7, #11]
 8009684:	f003 030f 	and.w	r3, r3, #15
 8009688:	b2da      	uxtb	r2, r3
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d102      	bne.n	800969c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	6979      	ldr	r1, [r7, #20]
 80096aa:	f009 fec1 	bl	8013430 <USB_EPStartXfer>

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	f003 020f 	and.w	r2, r3, #15
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d901      	bls.n	80096d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e050      	b.n	8009778 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	da0f      	bge.n	80096fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096de:	78fb      	ldrb	r3, [r7, #3]
 80096e0:	f003 020f 	and.w	r2, r3, #15
 80096e4:	4613      	mov	r3, r2
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	3338      	adds	r3, #56	; 0x38
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	4413      	add	r3, r2
 80096f2:	3304      	adds	r3, #4
 80096f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2201      	movs	r2, #1
 80096fa:	705a      	strb	r2, [r3, #1]
 80096fc:	e00d      	b.n	800971a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80096fe:	78fa      	ldrb	r2, [r7, #3]
 8009700:	4613      	mov	r3, r2
 8009702:	00db      	lsls	r3, r3, #3
 8009704:	4413      	add	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	4413      	add	r3, r2
 8009710:	3304      	adds	r3, #4
 8009712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2201      	movs	r2, #1
 800971e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	f003 030f 	and.w	r3, r3, #15
 8009726:	b2da      	uxtb	r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009732:	2b01      	cmp	r3, #1
 8009734:	d101      	bne.n	800973a <HAL_PCD_EP_SetStall+0x82>
 8009736:	2302      	movs	r3, #2
 8009738:	e01e      	b.n	8009778 <HAL_PCD_EP_SetStall+0xc0>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68f9      	ldr	r1, [r7, #12]
 8009748:	4618      	mov	r0, r3
 800974a:	f00a fa51 	bl	8013bf0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800974e:	78fb      	ldrb	r3, [r7, #3]
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6818      	ldr	r0, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	b2d9      	uxtb	r1, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009768:	461a      	mov	r2, r3
 800976a:	f00a fc43 	bl	8013ff4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800978c:	78fb      	ldrb	r3, [r7, #3]
 800978e:	f003 020f 	and.w	r2, r3, #15
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	429a      	cmp	r2, r3
 8009798:	d901      	bls.n	800979e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e042      	b.n	8009824 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800979e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	da0f      	bge.n	80097c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097a6:	78fb      	ldrb	r3, [r7, #3]
 80097a8:	f003 020f 	and.w	r2, r3, #15
 80097ac:	4613      	mov	r3, r2
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	3338      	adds	r3, #56	; 0x38
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	4413      	add	r3, r2
 80097ba:	3304      	adds	r3, #4
 80097bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2201      	movs	r2, #1
 80097c2:	705a      	strb	r2, [r3, #1]
 80097c4:	e00f      	b.n	80097e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097c6:	78fb      	ldrb	r3, [r7, #3]
 80097c8:	f003 020f 	and.w	r2, r3, #15
 80097cc:	4613      	mov	r3, r2
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	4413      	add	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	4413      	add	r3, r2
 80097dc:	3304      	adds	r3, #4
 80097de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	f003 030f 	and.w	r3, r3, #15
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d101      	bne.n	8009806 <HAL_PCD_EP_ClrStall+0x86>
 8009802:	2302      	movs	r3, #2
 8009804:	e00e      	b.n	8009824 <HAL_PCD_EP_ClrStall+0xa4>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68f9      	ldr	r1, [r7, #12]
 8009814:	4618      	mov	r0, r3
 8009816:	f00a fa59 	bl	8013ccc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800983c:	2b00      	cmp	r3, #0
 800983e:	da0c      	bge.n	800985a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	f003 020f 	and.w	r2, r3, #15
 8009846:	4613      	mov	r3, r2
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	4413      	add	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	3338      	adds	r3, #56	; 0x38
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	4413      	add	r3, r2
 8009854:	3304      	adds	r3, #4
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	e00c      	b.n	8009874 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	f003 020f 	and.w	r2, r3, #15
 8009860:	4613      	mov	r3, r2
 8009862:	00db      	lsls	r3, r3, #3
 8009864:	4413      	add	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	4413      	add	r3, r2
 8009870:	3304      	adds	r3, #4
 8009872:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68f9      	ldr	r1, [r7, #12]
 800987a:	4618      	mov	r0, r3
 800987c:	f00a f878 	bl	8013970 <USB_EPStopXfer>
 8009880:	4603      	mov	r3, r0
 8009882:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009884:	7afb      	ldrb	r3, [r7, #11]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b08a      	sub	sp, #40	; 0x28
 8009892:	af02      	add	r7, sp, #8
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	4613      	mov	r3, r2
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	3338      	adds	r3, #56	; 0x38
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	4413      	add	r3, r2
 80098b2:	3304      	adds	r3, #4
 80098b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	695a      	ldr	r2, [r3, #20]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d901      	bls.n	80098c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e06c      	b.n	80099a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	691a      	ldr	r2, [r3, #16]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d902      	bls.n	80098e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	3303      	adds	r3, #3
 80098e6:	089b      	lsrs	r3, r3, #2
 80098e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098ea:	e02b      	b.n	8009944 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	691a      	ldr	r2, [r3, #16]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	69fa      	ldr	r2, [r7, #28]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d902      	bls.n	8009908 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	3303      	adds	r3, #3
 800990c:	089b      	lsrs	r3, r3, #2
 800990e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	68d9      	ldr	r1, [r3, #12]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	b2da      	uxtb	r2, r3
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009920:	b2db      	uxtb	r3, r3
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	4603      	mov	r3, r0
 8009926:	6978      	ldr	r0, [r7, #20]
 8009928:	f00a f8cc 	bl	8013ac4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	441a      	add	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	695a      	ldr	r2, [r3, #20]
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	441a      	add	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009954:	69ba      	ldr	r2, [r7, #24]
 8009956:	429a      	cmp	r2, r3
 8009958:	d809      	bhi.n	800996e <PCD_WriteEmptyTxFifo+0xe0>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	695a      	ldr	r2, [r3, #20]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009962:	429a      	cmp	r2, r3
 8009964:	d203      	bcs.n	800996e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1be      	bne.n	80098ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	691a      	ldr	r2, [r3, #16]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	429a      	cmp	r2, r3
 8009978:	d811      	bhi.n	800999e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	f003 030f 	and.w	r3, r3, #15
 8009980:	2201      	movs	r2, #1
 8009982:	fa02 f303 	lsl.w	r3, r2, r3
 8009986:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800998e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	43db      	mvns	r3, r3
 8009994:	6939      	ldr	r1, [r7, #16]
 8009996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800999a:	4013      	ands	r3, r2
 800999c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3720      	adds	r7, #32
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	333c      	adds	r3, #60	; 0x3c
 80099c0:	3304      	adds	r3, #4
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d17b      	bne.n	8009ad6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f003 0308 	and.w	r3, r3, #8
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d015      	beq.n	8009a14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	4a61      	ldr	r2, [pc, #388]	; (8009b70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	f240 80b9 	bls.w	8009b64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f000 80b3 	beq.w	8009b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a10:	6093      	str	r3, [r2, #8]
 8009a12:	e0a7      	b.n	8009b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	f003 0320 	and.w	r3, r3, #32
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	2320      	movs	r3, #32
 8009a2e:	6093      	str	r3, [r2, #8]
 8009a30:	e098      	b.n	8009b64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f040 8093 	bne.w	8009b64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	4a4b      	ldr	r2, [pc, #300]	; (8009b70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d90f      	bls.n	8009a66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00a      	beq.n	8009a66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a62:	6093      	str	r3, [r2, #8]
 8009a64:	e07e      	b.n	8009b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	4413      	add	r3, r2
 8009a78:	3304      	adds	r3, #4
 8009a7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6a1a      	ldr	r2, [r3, #32]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	0159      	lsls	r1, r3, #5
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	440b      	add	r3, r1
 8009a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a92:	1ad2      	subs	r2, r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d114      	bne.n	8009ac8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d109      	bne.n	8009aba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	f00a fa9e 	bl	8013ff4 <USB_EP0_OutStart>
 8009ab8:	e006      	b.n	8009ac8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	441a      	add	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f00c ffee 	bl	8016ab0 <HAL_PCD_DataOutStageCallback>
 8009ad4:	e046      	b.n	8009b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	4a26      	ldr	r2, [pc, #152]	; (8009b74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d124      	bne.n	8009b28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00a      	beq.n	8009afe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af4:	461a      	mov	r2, r3
 8009af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009afa:	6093      	str	r3, [r2, #8]
 8009afc:	e032      	b.n	8009b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f003 0320 	and.w	r3, r3, #32
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d008      	beq.n	8009b1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b14:	461a      	mov	r2, r3
 8009b16:	2320      	movs	r3, #32
 8009b18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f00c ffc5 	bl	8016ab0 <HAL_PCD_DataOutStageCallback>
 8009b26:	e01d      	b.n	8009b64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d114      	bne.n	8009b58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009b2e:	6879      	ldr	r1, [r7, #4]
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	4613      	mov	r3, r2
 8009b34:	00db      	lsls	r3, r3, #3
 8009b36:	4413      	add	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	440b      	add	r3, r1
 8009b3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d108      	bne.n	8009b58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6818      	ldr	r0, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b50:	461a      	mov	r2, r3
 8009b52:	2100      	movs	r1, #0
 8009b54:	f00a fa4e 	bl	8013ff4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f00c ffa6 	bl	8016ab0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	4f54300a 	.word	0x4f54300a
 8009b74:	4f54310a 	.word	0x4f54310a

08009b78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	333c      	adds	r3, #60	; 0x3c
 8009b90:	3304      	adds	r3, #4
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	015a      	lsls	r2, r3, #5
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4a15      	ldr	r2, [pc, #84]	; (8009c00 <PCD_EP_OutSetupPacket_int+0x88>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d90e      	bls.n	8009bcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d009      	beq.n	8009bcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f00c ff5d 	bl	8016a8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4a0a      	ldr	r2, [pc, #40]	; (8009c00 <PCD_EP_OutSetupPacket_int+0x88>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d90c      	bls.n	8009bf4 <PCD_EP_OutSetupPacket_int+0x7c>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d108      	bne.n	8009bf4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6818      	ldr	r0, [r3, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009bec:	461a      	mov	r2, r3
 8009bee:	2101      	movs	r1, #1
 8009bf0:	f00a fa00 	bl	8013ff4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	4f54300a 	.word	0x4f54300a

08009c04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
 8009c10:	4613      	mov	r3, r2
 8009c12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d107      	bne.n	8009c32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009c22:	883b      	ldrh	r3, [r7, #0]
 8009c24:	0419      	lsls	r1, r3, #16
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8009c30:	e028      	b.n	8009c84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c38:	0c1b      	lsrs	r3, r3, #16
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c40:	2300      	movs	r3, #0
 8009c42:	73fb      	strb	r3, [r7, #15]
 8009c44:	e00d      	b.n	8009c62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
 8009c4c:	3340      	adds	r3, #64	; 0x40
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	0c1b      	lsrs	r3, r3, #16
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	4413      	add	r3, r2
 8009c5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	73fb      	strb	r3, [r7, #15]
 8009c62:	7bfa      	ldrb	r2, [r7, #15]
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d3ec      	bcc.n	8009c46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009c6c:	883b      	ldrh	r3, [r7, #0]
 8009c6e:	0418      	lsls	r0, r3, #16
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	4302      	orrs	r2, r0
 8009c7c:	3340      	adds	r3, #64	; 0x40
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	440b      	add	r3, r1
 8009c82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	887a      	ldrh	r2, [r7, #2]
 8009ca4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ce2:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <HAL_PCDEx_ActivateLPM+0x44>)
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	10000003 	.word	0x10000003

08009cfc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	460b      	mov	r3, r1
 8009d06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d1c:	4b19      	ldr	r3, [pc, #100]	; (8009d84 <HAL_PWREx_ConfigSupply+0x70>)
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	f003 0304 	and.w	r3, r3, #4
 8009d24:	2b04      	cmp	r3, #4
 8009d26:	d00a      	beq.n	8009d3e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d28:	4b16      	ldr	r3, [pc, #88]	; (8009d84 <HAL_PWREx_ConfigSupply+0x70>)
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f003 0307 	and.w	r3, r3, #7
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d001      	beq.n	8009d3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e01f      	b.n	8009d7a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e01d      	b.n	8009d7a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009d3e:	4b11      	ldr	r3, [pc, #68]	; (8009d84 <HAL_PWREx_ConfigSupply+0x70>)
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	f023 0207 	bic.w	r2, r3, #7
 8009d46:	490f      	ldr	r1, [pc, #60]	; (8009d84 <HAL_PWREx_ConfigSupply+0x70>)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009d4e:	f7fa fd25 	bl	800479c <HAL_GetTick>
 8009d52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d54:	e009      	b.n	8009d6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009d56:	f7fa fd21 	bl	800479c <HAL_GetTick>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d64:	d901      	bls.n	8009d6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e007      	b.n	8009d7a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d6a:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <HAL_PWREx_ConfigSupply+0x70>)
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d76:	d1ee      	bne.n	8009d56 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	58024800 	.word	0x58024800

08009d88 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009d8c:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	4a04      	ldr	r2, [pc, #16]	; (8009da4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d96:	60d3      	str	r3, [r2, #12]
}
 8009d98:	bf00      	nop
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	58024800 	.word	0x58024800

08009da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08c      	sub	sp, #48	; 0x30
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e3c8      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f000 8087 	beq.w	8009ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dc8:	4b88      	ldr	r3, [pc, #544]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009dd2:	4b86      	ldr	r3, [pc, #536]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dda:	2b10      	cmp	r3, #16
 8009ddc:	d007      	beq.n	8009dee <HAL_RCC_OscConfig+0x46>
 8009dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de0:	2b18      	cmp	r3, #24
 8009de2:	d110      	bne.n	8009e06 <HAL_RCC_OscConfig+0x5e>
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	f003 0303 	and.w	r3, r3, #3
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d10b      	bne.n	8009e06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dee:	4b7f      	ldr	r3, [pc, #508]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d06c      	beq.n	8009ed4 <HAL_RCC_OscConfig+0x12c>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d168      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e3a2      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e0e:	d106      	bne.n	8009e1e <HAL_RCC_OscConfig+0x76>
 8009e10:	4b76      	ldr	r3, [pc, #472]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a75      	ldr	r2, [pc, #468]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	e02e      	b.n	8009e7c <HAL_RCC_OscConfig+0xd4>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10c      	bne.n	8009e40 <HAL_RCC_OscConfig+0x98>
 8009e26:	4b71      	ldr	r3, [pc, #452]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a70      	ldr	r2, [pc, #448]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e30:	6013      	str	r3, [r2, #0]
 8009e32:	4b6e      	ldr	r3, [pc, #440]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a6d      	ldr	r2, [pc, #436]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	e01d      	b.n	8009e7c <HAL_RCC_OscConfig+0xd4>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e48:	d10c      	bne.n	8009e64 <HAL_RCC_OscConfig+0xbc>
 8009e4a:	4b68      	ldr	r3, [pc, #416]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a67      	ldr	r2, [pc, #412]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	4b65      	ldr	r3, [pc, #404]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a64      	ldr	r2, [pc, #400]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	e00b      	b.n	8009e7c <HAL_RCC_OscConfig+0xd4>
 8009e64:	4b61      	ldr	r3, [pc, #388]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a60      	ldr	r2, [pc, #384]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	4b5e      	ldr	r3, [pc, #376]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a5d      	ldr	r2, [pc, #372]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d013      	beq.n	8009eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e84:	f7fa fc8a 	bl	800479c <HAL_GetTick>
 8009e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e8a:	e008      	b.n	8009e9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e8c:	f7fa fc86 	bl	800479c <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	2b64      	cmp	r3, #100	; 0x64
 8009e98:	d901      	bls.n	8009e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e356      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e9e:	4b53      	ldr	r3, [pc, #332]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0f0      	beq.n	8009e8c <HAL_RCC_OscConfig+0xe4>
 8009eaa:	e014      	b.n	8009ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eac:	f7fa fc76 	bl	800479c <HAL_GetTick>
 8009eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009eb2:	e008      	b.n	8009ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009eb4:	f7fa fc72 	bl	800479c <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	2b64      	cmp	r3, #100	; 0x64
 8009ec0:	d901      	bls.n	8009ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e342      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ec6:	4b49      	ldr	r3, [pc, #292]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f0      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x10c>
 8009ed2:	e000      	b.n	8009ed6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f000 808c 	beq.w	8009ffc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ee4:	4b41      	ldr	r3, [pc, #260]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009eec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009eee:	4b3f      	ldr	r3, [pc, #252]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d007      	beq.n	8009f0a <HAL_RCC_OscConfig+0x162>
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	2b18      	cmp	r3, #24
 8009efe:	d137      	bne.n	8009f70 <HAL_RCC_OscConfig+0x1c8>
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	f003 0303 	and.w	r3, r3, #3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d132      	bne.n	8009f70 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f0a:	4b38      	ldr	r3, [pc, #224]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0304 	and.w	r3, r3, #4
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <HAL_RCC_OscConfig+0x17a>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d101      	bne.n	8009f22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e314      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f22:	4b32      	ldr	r3, [pc, #200]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f023 0219 	bic.w	r2, r3, #25
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	492f      	ldr	r1, [pc, #188]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009f30:	4313      	orrs	r3, r2
 8009f32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f34:	f7fa fc32 	bl	800479c <HAL_GetTick>
 8009f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f3a:	e008      	b.n	8009f4e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f3c:	f7fa fc2e 	bl	800479c <HAL_GetTick>
 8009f40:	4602      	mov	r2, r0
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	1ad3      	subs	r3, r2, r3
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d901      	bls.n	8009f4e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e2fe      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f4e:	4b27      	ldr	r3, [pc, #156]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0304 	and.w	r3, r3, #4
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d0f0      	beq.n	8009f3c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f5a:	4b24      	ldr	r3, [pc, #144]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	061b      	lsls	r3, r3, #24
 8009f68:	4920      	ldr	r1, [pc, #128]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f6e:	e045      	b.n	8009ffc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d026      	beq.n	8009fc6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f78:	4b1c      	ldr	r3, [pc, #112]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f023 0219 	bic.w	r2, r3, #25
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	4919      	ldr	r1, [pc, #100]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f8a:	f7fa fc07 	bl	800479c <HAL_GetTick>
 8009f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f90:	e008      	b.n	8009fa4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f92:	f7fa fc03 	bl	800479c <HAL_GetTick>
 8009f96:	4602      	mov	r2, r0
 8009f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d901      	bls.n	8009fa4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e2d3      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fa4:	4b11      	ldr	r3, [pc, #68]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0304 	and.w	r3, r3, #4
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d0f0      	beq.n	8009f92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fb0:	4b0e      	ldr	r3, [pc, #56]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	061b      	lsls	r3, r3, #24
 8009fbe:	490b      	ldr	r1, [pc, #44]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	604b      	str	r3, [r1, #4]
 8009fc4:	e01a      	b.n	8009ffc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fc6:	4b09      	ldr	r3, [pc, #36]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a08      	ldr	r2, [pc, #32]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009fcc:	f023 0301 	bic.w	r3, r3, #1
 8009fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd2:	f7fa fbe3 	bl	800479c <HAL_GetTick>
 8009fd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009fd8:	e00a      	b.n	8009ff0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fda:	f7fa fbdf 	bl	800479c <HAL_GetTick>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d903      	bls.n	8009ff0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e2af      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
 8009fec:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ff0:	4b96      	ldr	r3, [pc, #600]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0304 	and.w	r3, r3, #4
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1ee      	bne.n	8009fda <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 0310 	and.w	r3, r3, #16
 800a004:	2b00      	cmp	r3, #0
 800a006:	d06a      	beq.n	800a0de <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a008:	4b90      	ldr	r3, [pc, #576]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a010:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a012:	4b8e      	ldr	r3, [pc, #568]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a016:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	2b08      	cmp	r3, #8
 800a01c:	d007      	beq.n	800a02e <HAL_RCC_OscConfig+0x286>
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	2b18      	cmp	r3, #24
 800a022:	d11b      	bne.n	800a05c <HAL_RCC_OscConfig+0x2b4>
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	f003 0303 	and.w	r3, r3, #3
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d116      	bne.n	800a05c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a02e:	4b87      	ldr	r3, [pc, #540]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a036:	2b00      	cmp	r3, #0
 800a038:	d005      	beq.n	800a046 <HAL_RCC_OscConfig+0x29e>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	2b80      	cmp	r3, #128	; 0x80
 800a040:	d001      	beq.n	800a046 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e282      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a046:	4b81      	ldr	r3, [pc, #516]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	061b      	lsls	r3, r3, #24
 800a054:	497d      	ldr	r1, [pc, #500]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a056:	4313      	orrs	r3, r2
 800a058:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a05a:	e040      	b.n	800a0de <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d023      	beq.n	800a0ac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a064:	4b79      	ldr	r3, [pc, #484]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a78      	ldr	r2, [pc, #480]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a06a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a06e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a070:	f7fa fb94 	bl	800479c <HAL_GetTick>
 800a074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a076:	e008      	b.n	800a08a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a078:	f7fa fb90 	bl	800479c <HAL_GetTick>
 800a07c:	4602      	mov	r2, r0
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	2b02      	cmp	r3, #2
 800a084:	d901      	bls.n	800a08a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e260      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a08a:	4b70      	ldr	r3, [pc, #448]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0f0      	beq.n	800a078 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a096:	4b6d      	ldr	r3, [pc, #436]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	061b      	lsls	r3, r3, #24
 800a0a4:	4969      	ldr	r1, [pc, #420]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60cb      	str	r3, [r1, #12]
 800a0aa:	e018      	b.n	800a0de <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a0ac:	4b67      	ldr	r3, [pc, #412]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a66      	ldr	r2, [pc, #408]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a0b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b8:	f7fa fb70 	bl	800479c <HAL_GetTick>
 800a0bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0be:	e008      	b.n	800a0d2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a0c0:	f7fa fb6c 	bl	800479c <HAL_GetTick>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d901      	bls.n	800a0d2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e23c      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0d2:	4b5e      	ldr	r3, [pc, #376]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1f0      	bne.n	800a0c0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 0308 	and.w	r3, r3, #8
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d036      	beq.n	800a158 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d019      	beq.n	800a126 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0f2:	4b56      	ldr	r3, [pc, #344]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a0f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f6:	4a55      	ldr	r2, [pc, #340]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a0f8:	f043 0301 	orr.w	r3, r3, #1
 800a0fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0fe:	f7fa fb4d 	bl	800479c <HAL_GetTick>
 800a102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a104:	e008      	b.n	800a118 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a106:	f7fa fb49 	bl	800479c <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	2b02      	cmp	r3, #2
 800a112:	d901      	bls.n	800a118 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e219      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a118:	4b4c      	ldr	r3, [pc, #304]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a11a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a11c:	f003 0302 	and.w	r3, r3, #2
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0f0      	beq.n	800a106 <HAL_RCC_OscConfig+0x35e>
 800a124:	e018      	b.n	800a158 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a126:	4b49      	ldr	r3, [pc, #292]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a12a:	4a48      	ldr	r2, [pc, #288]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a12c:	f023 0301 	bic.w	r3, r3, #1
 800a130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a132:	f7fa fb33 	bl	800479c <HAL_GetTick>
 800a136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a138:	e008      	b.n	800a14c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a13a:	f7fa fb2f 	bl	800479c <HAL_GetTick>
 800a13e:	4602      	mov	r2, r0
 800a140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	2b02      	cmp	r3, #2
 800a146:	d901      	bls.n	800a14c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e1ff      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a14c:	4b3f      	ldr	r3, [pc, #252]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a14e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a150:	f003 0302 	and.w	r3, r3, #2
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1f0      	bne.n	800a13a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 0320 	and.w	r3, r3, #32
 800a160:	2b00      	cmp	r3, #0
 800a162:	d036      	beq.n	800a1d2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d019      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a16c:	4b37      	ldr	r3, [pc, #220]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a36      	ldr	r2, [pc, #216]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a172:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a176:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a178:	f7fa fb10 	bl	800479c <HAL_GetTick>
 800a17c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a17e:	e008      	b.n	800a192 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a180:	f7fa fb0c 	bl	800479c <HAL_GetTick>
 800a184:	4602      	mov	r2, r0
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d901      	bls.n	800a192 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e1dc      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a192:	4b2e      	ldr	r3, [pc, #184]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0f0      	beq.n	800a180 <HAL_RCC_OscConfig+0x3d8>
 800a19e:	e018      	b.n	800a1d2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a1a0:	4b2a      	ldr	r3, [pc, #168]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a29      	ldr	r2, [pc, #164]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a1a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1ac:	f7fa faf6 	bl	800479c <HAL_GetTick>
 800a1b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1b2:	e008      	b.n	800a1c6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1b4:	f7fa faf2 	bl	800479c <HAL_GetTick>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d901      	bls.n	800a1c6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e1c2      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1c6:	4b21      	ldr	r3, [pc, #132]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1f0      	bne.n	800a1b4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0304 	and.w	r3, r3, #4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 8086 	beq.w	800a2ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a1e0:	4b1b      	ldr	r3, [pc, #108]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a1a      	ldr	r2, [pc, #104]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a1e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1ec:	f7fa fad6 	bl	800479c <HAL_GetTick>
 800a1f0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1f2:	e008      	b.n	800a206 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1f4:	f7fa fad2 	bl	800479c <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	2b64      	cmp	r3, #100	; 0x64
 800a200:	d901      	bls.n	800a206 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e1a2      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a206:	4b12      	ldr	r3, [pc, #72]	; (800a250 <HAL_RCC_OscConfig+0x4a8>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0f0      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	2b01      	cmp	r3, #1
 800a218:	d106      	bne.n	800a228 <HAL_RCC_OscConfig+0x480>
 800a21a:	4b0c      	ldr	r3, [pc, #48]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21e:	4a0b      	ldr	r2, [pc, #44]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a220:	f043 0301 	orr.w	r3, r3, #1
 800a224:	6713      	str	r3, [r2, #112]	; 0x70
 800a226:	e032      	b.n	800a28e <HAL_RCC_OscConfig+0x4e6>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d111      	bne.n	800a254 <HAL_RCC_OscConfig+0x4ac>
 800a230:	4b06      	ldr	r3, [pc, #24]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a234:	4a05      	ldr	r2, [pc, #20]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a236:	f023 0301 	bic.w	r3, r3, #1
 800a23a:	6713      	str	r3, [r2, #112]	; 0x70
 800a23c:	4b03      	ldr	r3, [pc, #12]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a240:	4a02      	ldr	r2, [pc, #8]	; (800a24c <HAL_RCC_OscConfig+0x4a4>)
 800a242:	f023 0304 	bic.w	r3, r3, #4
 800a246:	6713      	str	r3, [r2, #112]	; 0x70
 800a248:	e021      	b.n	800a28e <HAL_RCC_OscConfig+0x4e6>
 800a24a:	bf00      	nop
 800a24c:	58024400 	.word	0x58024400
 800a250:	58024800 	.word	0x58024800
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	2b05      	cmp	r3, #5
 800a25a:	d10c      	bne.n	800a276 <HAL_RCC_OscConfig+0x4ce>
 800a25c:	4b83      	ldr	r3, [pc, #524]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a25e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a260:	4a82      	ldr	r2, [pc, #520]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a262:	f043 0304 	orr.w	r3, r3, #4
 800a266:	6713      	str	r3, [r2, #112]	; 0x70
 800a268:	4b80      	ldr	r3, [pc, #512]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26c:	4a7f      	ldr	r2, [pc, #508]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	6713      	str	r3, [r2, #112]	; 0x70
 800a274:	e00b      	b.n	800a28e <HAL_RCC_OscConfig+0x4e6>
 800a276:	4b7d      	ldr	r3, [pc, #500]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27a:	4a7c      	ldr	r2, [pc, #496]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a27c:	f023 0301 	bic.w	r3, r3, #1
 800a280:	6713      	str	r3, [r2, #112]	; 0x70
 800a282:	4b7a      	ldr	r3, [pc, #488]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a286:	4a79      	ldr	r2, [pc, #484]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a288:	f023 0304 	bic.w	r3, r3, #4
 800a28c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d015      	beq.n	800a2c2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a296:	f7fa fa81 	bl	800479c <HAL_GetTick>
 800a29a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a29c:	e00a      	b.n	800a2b4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a29e:	f7fa fa7d 	bl	800479c <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d901      	bls.n	800a2b4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	e14b      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2b4:	4b6d      	ldr	r3, [pc, #436]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b8:	f003 0302 	and.w	r3, r3, #2
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d0ee      	beq.n	800a29e <HAL_RCC_OscConfig+0x4f6>
 800a2c0:	e014      	b.n	800a2ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2c2:	f7fa fa6b 	bl	800479c <HAL_GetTick>
 800a2c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2c8:	e00a      	b.n	800a2e0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2ca:	f7fa fa67 	bl	800479c <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d901      	bls.n	800a2e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e135      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2e0:	4b62      	ldr	r3, [pc, #392]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a2e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1ee      	bne.n	800a2ca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f000 812a 	beq.w	800a54a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a2f6:	4b5d      	ldr	r3, [pc, #372]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2fe:	2b18      	cmp	r3, #24
 800a300:	f000 80ba 	beq.w	800a478 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	2b02      	cmp	r3, #2
 800a30a:	f040 8095 	bne.w	800a438 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a30e:	4b57      	ldr	r3, [pc, #348]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a56      	ldr	r2, [pc, #344]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a31a:	f7fa fa3f 	bl	800479c <HAL_GetTick>
 800a31e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a320:	e008      	b.n	800a334 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a322:	f7fa fa3b 	bl	800479c <HAL_GetTick>
 800a326:	4602      	mov	r2, r0
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d901      	bls.n	800a334 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e10b      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a334:	4b4d      	ldr	r3, [pc, #308]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1f0      	bne.n	800a322 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a340:	4b4a      	ldr	r3, [pc, #296]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a344:	4b4a      	ldr	r3, [pc, #296]	; (800a470 <HAL_RCC_OscConfig+0x6c8>)
 800a346:	4013      	ands	r3, r2
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a350:	0112      	lsls	r2, r2, #4
 800a352:	430a      	orrs	r2, r1
 800a354:	4945      	ldr	r1, [pc, #276]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a356:	4313      	orrs	r3, r2
 800a358:	628b      	str	r3, [r1, #40]	; 0x28
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35e:	3b01      	subs	r3, #1
 800a360:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a368:	3b01      	subs	r3, #1
 800a36a:	025b      	lsls	r3, r3, #9
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	431a      	orrs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a374:	3b01      	subs	r3, #1
 800a376:	041b      	lsls	r3, r3, #16
 800a378:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a37c:	431a      	orrs	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a382:	3b01      	subs	r3, #1
 800a384:	061b      	lsls	r3, r3, #24
 800a386:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a38a:	4938      	ldr	r1, [pc, #224]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a390:	4b36      	ldr	r3, [pc, #216]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	4a35      	ldr	r2, [pc, #212]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a396:	f023 0301 	bic.w	r3, r3, #1
 800a39a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a39c:	4b33      	ldr	r3, [pc, #204]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a39e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3a0:	4b34      	ldr	r3, [pc, #208]	; (800a474 <HAL_RCC_OscConfig+0x6cc>)
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a3a8:	00d2      	lsls	r2, r2, #3
 800a3aa:	4930      	ldr	r1, [pc, #192]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a3b0:	4b2e      	ldr	r3, [pc, #184]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	f023 020c 	bic.w	r2, r3, #12
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3bc:	492b      	ldr	r1, [pc, #172]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a3c2:	4b2a      	ldr	r3, [pc, #168]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c6:	f023 0202 	bic.w	r2, r3, #2
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ce:	4927      	ldr	r1, [pc, #156]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a3d4:	4b25      	ldr	r3, [pc, #148]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d8:	4a24      	ldr	r2, [pc, #144]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3e0:	4b22      	ldr	r3, [pc, #136]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e4:	4a21      	ldr	r2, [pc, #132]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a3ec:	4b1f      	ldr	r3, [pc, #124]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f0:	4a1e      	ldr	r2, [pc, #120]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a3f8:	4b1c      	ldr	r3, [pc, #112]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fc:	4a1b      	ldr	r2, [pc, #108]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a3fe:	f043 0301 	orr.w	r3, r3, #1
 800a402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a404:	4b19      	ldr	r3, [pc, #100]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a18      	ldr	r2, [pc, #96]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a40a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a40e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a410:	f7fa f9c4 	bl	800479c <HAL_GetTick>
 800a414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a416:	e008      	b.n	800a42a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a418:	f7fa f9c0 	bl	800479c <HAL_GetTick>
 800a41c:	4602      	mov	r2, r0
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	2b02      	cmp	r3, #2
 800a424:	d901      	bls.n	800a42a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e090      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a42a:	4b10      	ldr	r3, [pc, #64]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a432:	2b00      	cmp	r3, #0
 800a434:	d0f0      	beq.n	800a418 <HAL_RCC_OscConfig+0x670>
 800a436:	e088      	b.n	800a54a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a438:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a0b      	ldr	r2, [pc, #44]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a43e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a444:	f7fa f9aa 	bl	800479c <HAL_GetTick>
 800a448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a44a:	e008      	b.n	800a45e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a44c:	f7fa f9a6 	bl	800479c <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	2b02      	cmp	r3, #2
 800a458:	d901      	bls.n	800a45e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e076      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a45e:	4b03      	ldr	r3, [pc, #12]	; (800a46c <HAL_RCC_OscConfig+0x6c4>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1f0      	bne.n	800a44c <HAL_RCC_OscConfig+0x6a4>
 800a46a:	e06e      	b.n	800a54a <HAL_RCC_OscConfig+0x7a2>
 800a46c:	58024400 	.word	0x58024400
 800a470:	fffffc0c 	.word	0xfffffc0c
 800a474:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a478:	4b36      	ldr	r3, [pc, #216]	; (800a554 <HAL_RCC_OscConfig+0x7ac>)
 800a47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a47e:	4b35      	ldr	r3, [pc, #212]	; (800a554 <HAL_RCC_OscConfig+0x7ac>)
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d031      	beq.n	800a4f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f003 0203 	and.w	r2, r3, #3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a496:	429a      	cmp	r2, r3
 800a498:	d12a      	bne.n	800a4f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	091b      	lsrs	r3, r3, #4
 800a49e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d122      	bne.n	800a4f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d11a      	bne.n	800a4f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	0a5b      	lsrs	r3, r3, #9
 800a4be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d111      	bne.n	800a4f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	0c1b      	lsrs	r3, r3, #16
 800a4d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d108      	bne.n	800a4f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	0e1b      	lsrs	r3, r3, #24
 800a4e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d001      	beq.n	800a4f4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e02b      	b.n	800a54c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a4f4:	4b17      	ldr	r3, [pc, #92]	; (800a554 <HAL_RCC_OscConfig+0x7ac>)
 800a4f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f8:	08db      	lsrs	r3, r3, #3
 800a4fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	429a      	cmp	r2, r3
 800a508:	d01f      	beq.n	800a54a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a50a:	4b12      	ldr	r3, [pc, #72]	; (800a554 <HAL_RCC_OscConfig+0x7ac>)
 800a50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50e:	4a11      	ldr	r2, [pc, #68]	; (800a554 <HAL_RCC_OscConfig+0x7ac>)
 800a510:	f023 0301 	bic.w	r3, r3, #1
 800a514:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a516:	f7fa f941 	bl	800479c <HAL_GetTick>
 800a51a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a51c:	bf00      	nop
 800a51e:	f7fa f93d 	bl	800479c <HAL_GetTick>
 800a522:	4602      	mov	r2, r0
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	4293      	cmp	r3, r2
 800a528:	d0f9      	beq.n	800a51e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a52a:	4b0a      	ldr	r3, [pc, #40]	; (800a554 <HAL_RCC_OscConfig+0x7ac>)
 800a52c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a52e:	4b0a      	ldr	r3, [pc, #40]	; (800a558 <HAL_RCC_OscConfig+0x7b0>)
 800a530:	4013      	ands	r3, r2
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a536:	00d2      	lsls	r2, r2, #3
 800a538:	4906      	ldr	r1, [pc, #24]	; (800a554 <HAL_RCC_OscConfig+0x7ac>)
 800a53a:	4313      	orrs	r3, r2
 800a53c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a53e:	4b05      	ldr	r3, [pc, #20]	; (800a554 <HAL_RCC_OscConfig+0x7ac>)
 800a540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a542:	4a04      	ldr	r2, [pc, #16]	; (800a554 <HAL_RCC_OscConfig+0x7ac>)
 800a544:	f043 0301 	orr.w	r3, r3, #1
 800a548:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3730      	adds	r7, #48	; 0x30
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	58024400 	.word	0x58024400
 800a558:	ffff0007 	.word	0xffff0007

0800a55c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e19c      	b.n	800a8aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a570:	4b8a      	ldr	r3, [pc, #552]	; (800a79c <HAL_RCC_ClockConfig+0x240>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 030f 	and.w	r3, r3, #15
 800a578:	683a      	ldr	r2, [r7, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d910      	bls.n	800a5a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a57e:	4b87      	ldr	r3, [pc, #540]	; (800a79c <HAL_RCC_ClockConfig+0x240>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f023 020f 	bic.w	r2, r3, #15
 800a586:	4985      	ldr	r1, [pc, #532]	; (800a79c <HAL_RCC_ClockConfig+0x240>)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a58e:	4b83      	ldr	r3, [pc, #524]	; (800a79c <HAL_RCC_ClockConfig+0x240>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 030f 	and.w	r3, r3, #15
 800a596:	683a      	ldr	r2, [r7, #0]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d001      	beq.n	800a5a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e184      	b.n	800a8aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 0304 	and.w	r3, r3, #4
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d010      	beq.n	800a5ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	691a      	ldr	r2, [r3, #16]
 800a5b0:	4b7b      	ldr	r3, [pc, #492]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d908      	bls.n	800a5ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5bc:	4b78      	ldr	r3, [pc, #480]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	4975      	ldr	r1, [pc, #468]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0308 	and.w	r3, r3, #8
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d010      	beq.n	800a5fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	695a      	ldr	r2, [r3, #20]
 800a5de:	4b70      	ldr	r3, [pc, #448]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d908      	bls.n	800a5fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a5ea:	4b6d      	ldr	r3, [pc, #436]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	496a      	ldr	r1, [pc, #424]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0310 	and.w	r3, r3, #16
 800a604:	2b00      	cmp	r3, #0
 800a606:	d010      	beq.n	800a62a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	699a      	ldr	r2, [r3, #24]
 800a60c:	4b64      	ldr	r3, [pc, #400]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a60e:	69db      	ldr	r3, [r3, #28]
 800a610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a614:	429a      	cmp	r2, r3
 800a616:	d908      	bls.n	800a62a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a618:	4b61      	ldr	r3, [pc, #388]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	495e      	ldr	r1, [pc, #376]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a626:	4313      	orrs	r3, r2
 800a628:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0320 	and.w	r3, r3, #32
 800a632:	2b00      	cmp	r3, #0
 800a634:	d010      	beq.n	800a658 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	69da      	ldr	r2, [r3, #28]
 800a63a:	4b59      	ldr	r3, [pc, #356]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a642:	429a      	cmp	r2, r3
 800a644:	d908      	bls.n	800a658 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a646:	4b56      	ldr	r3, [pc, #344]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	69db      	ldr	r3, [r3, #28]
 800a652:	4953      	ldr	r1, [pc, #332]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a654:	4313      	orrs	r3, r2
 800a656:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 0302 	and.w	r3, r3, #2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d010      	beq.n	800a686 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	68da      	ldr	r2, [r3, #12]
 800a668:	4b4d      	ldr	r3, [pc, #308]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	f003 030f 	and.w	r3, r3, #15
 800a670:	429a      	cmp	r2, r3
 800a672:	d908      	bls.n	800a686 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a674:	4b4a      	ldr	r3, [pc, #296]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	f023 020f 	bic.w	r2, r3, #15
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	4947      	ldr	r1, [pc, #284]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a682:	4313      	orrs	r3, r2
 800a684:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d055      	beq.n	800a73e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a692:	4b43      	ldr	r3, [pc, #268]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	4940      	ldr	r1, [pc, #256]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d107      	bne.n	800a6bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6ac:	4b3c      	ldr	r3, [pc, #240]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d121      	bne.n	800a6fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e0f6      	b.n	800a8aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	2b03      	cmp	r3, #3
 800a6c2:	d107      	bne.n	800a6d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6c4:	4b36      	ldr	r3, [pc, #216]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d115      	bne.n	800a6fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e0ea      	b.n	800a8aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d107      	bne.n	800a6ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6dc:	4b30      	ldr	r3, [pc, #192]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d109      	bne.n	800a6fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e0de      	b.n	800a8aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6ec:	4b2c      	ldr	r3, [pc, #176]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 0304 	and.w	r3, r3, #4
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e0d6      	b.n	800a8aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a6fc:	4b28      	ldr	r3, [pc, #160]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	f023 0207 	bic.w	r2, r3, #7
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	4925      	ldr	r1, [pc, #148]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a70a:	4313      	orrs	r3, r2
 800a70c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a70e:	f7fa f845 	bl	800479c <HAL_GetTick>
 800a712:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a714:	e00a      	b.n	800a72c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a716:	f7fa f841 	bl	800479c <HAL_GetTick>
 800a71a:	4602      	mov	r2, r0
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	f241 3288 	movw	r2, #5000	; 0x1388
 800a724:	4293      	cmp	r3, r2
 800a726:	d901      	bls.n	800a72c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a728:	2303      	movs	r3, #3
 800a72a:	e0be      	b.n	800a8aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a72c:	4b1c      	ldr	r3, [pc, #112]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	00db      	lsls	r3, r3, #3
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d1eb      	bne.n	800a716 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 0302 	and.w	r3, r3, #2
 800a746:	2b00      	cmp	r3, #0
 800a748:	d010      	beq.n	800a76c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68da      	ldr	r2, [r3, #12]
 800a74e:	4b14      	ldr	r3, [pc, #80]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	f003 030f 	and.w	r3, r3, #15
 800a756:	429a      	cmp	r2, r3
 800a758:	d208      	bcs.n	800a76c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a75a:	4b11      	ldr	r3, [pc, #68]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	f023 020f 	bic.w	r2, r3, #15
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	490e      	ldr	r1, [pc, #56]	; (800a7a0 <HAL_RCC_ClockConfig+0x244>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a76c:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <HAL_RCC_ClockConfig+0x240>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 030f 	and.w	r3, r3, #15
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d214      	bcs.n	800a7a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a77a:	4b08      	ldr	r3, [pc, #32]	; (800a79c <HAL_RCC_ClockConfig+0x240>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f023 020f 	bic.w	r2, r3, #15
 800a782:	4906      	ldr	r1, [pc, #24]	; (800a79c <HAL_RCC_ClockConfig+0x240>)
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	4313      	orrs	r3, r2
 800a788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a78a:	4b04      	ldr	r3, [pc, #16]	; (800a79c <HAL_RCC_ClockConfig+0x240>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 030f 	and.w	r3, r3, #15
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d005      	beq.n	800a7a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e086      	b.n	800a8aa <HAL_RCC_ClockConfig+0x34e>
 800a79c:	52002000 	.word	0x52002000
 800a7a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0304 	and.w	r3, r3, #4
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d010      	beq.n	800a7d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	691a      	ldr	r2, [r3, #16]
 800a7b4:	4b3f      	ldr	r3, [pc, #252]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d208      	bcs.n	800a7d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7c0:	4b3c      	ldr	r3, [pc, #240]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	4939      	ldr	r1, [pc, #228]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0308 	and.w	r3, r3, #8
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d010      	beq.n	800a800 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	695a      	ldr	r2, [r3, #20]
 800a7e2:	4b34      	ldr	r3, [pc, #208]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a7e4:	69db      	ldr	r3, [r3, #28]
 800a7e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d208      	bcs.n	800a800 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a7ee:	4b31      	ldr	r3, [pc, #196]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	492e      	ldr	r1, [pc, #184]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 0310 	and.w	r3, r3, #16
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d010      	beq.n	800a82e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	699a      	ldr	r2, [r3, #24]
 800a810:	4b28      	ldr	r3, [pc, #160]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a812:	69db      	ldr	r3, [r3, #28]
 800a814:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a818:	429a      	cmp	r2, r3
 800a81a:	d208      	bcs.n	800a82e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a81c:	4b25      	ldr	r3, [pc, #148]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a81e:	69db      	ldr	r3, [r3, #28]
 800a820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	4922      	ldr	r1, [pc, #136]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a82a:	4313      	orrs	r3, r2
 800a82c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d010      	beq.n	800a85c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	69da      	ldr	r2, [r3, #28]
 800a83e:	4b1d      	ldr	r3, [pc, #116]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a840:	6a1b      	ldr	r3, [r3, #32]
 800a842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a846:	429a      	cmp	r2, r3
 800a848:	d208      	bcs.n	800a85c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a84a:	4b1a      	ldr	r3, [pc, #104]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	69db      	ldr	r3, [r3, #28]
 800a856:	4917      	ldr	r1, [pc, #92]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a858:	4313      	orrs	r3, r2
 800a85a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a85c:	f000 f89e 	bl	800a99c <HAL_RCC_GetSysClockFreq>
 800a860:	4602      	mov	r2, r0
 800a862:	4b14      	ldr	r3, [pc, #80]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	0a1b      	lsrs	r3, r3, #8
 800a868:	f003 030f 	and.w	r3, r3, #15
 800a86c:	4912      	ldr	r1, [pc, #72]	; (800a8b8 <HAL_RCC_ClockConfig+0x35c>)
 800a86e:	5ccb      	ldrb	r3, [r1, r3]
 800a870:	f003 031f 	and.w	r3, r3, #31
 800a874:	fa22 f303 	lsr.w	r3, r2, r3
 800a878:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a87a:	4b0e      	ldr	r3, [pc, #56]	; (800a8b4 <HAL_RCC_ClockConfig+0x358>)
 800a87c:	699b      	ldr	r3, [r3, #24]
 800a87e:	f003 030f 	and.w	r3, r3, #15
 800a882:	4a0d      	ldr	r2, [pc, #52]	; (800a8b8 <HAL_RCC_ClockConfig+0x35c>)
 800a884:	5cd3      	ldrb	r3, [r2, r3]
 800a886:	f003 031f 	and.w	r3, r3, #31
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	fa22 f303 	lsr.w	r3, r2, r3
 800a890:	4a0a      	ldr	r2, [pc, #40]	; (800a8bc <HAL_RCC_ClockConfig+0x360>)
 800a892:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a894:	4a0a      	ldr	r2, [pc, #40]	; (800a8c0 <HAL_RCC_ClockConfig+0x364>)
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a89a:	4b0a      	ldr	r3, [pc, #40]	; (800a8c4 <HAL_RCC_ClockConfig+0x368>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7f9 ff32 	bl	8004708 <HAL_InitTick>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	58024400 	.word	0x58024400
 800a8b8:	0801c7a0 	.word	0x0801c7a0
 800a8bc:	24000004 	.word	0x24000004
 800a8c0:	24000000 	.word	0x24000000
 800a8c4:	24000008 	.word	0x24000008

0800a8c8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08c      	sub	sp, #48	; 0x30
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d12a      	bne.n	800a930 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a8da:	4b2d      	ldr	r3, [pc, #180]	; (800a990 <HAL_RCC_MCOConfig+0xc8>)
 800a8dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8e0:	4a2b      	ldr	r2, [pc, #172]	; (800a990 <HAL_RCC_MCOConfig+0xc8>)
 800a8e2:	f043 0301 	orr.w	r3, r3, #1
 800a8e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a8ea:	4b29      	ldr	r3, [pc, #164]	; (800a990 <HAL_RCC_MCOConfig+0xc8>)
 800a8ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8f0:	f003 0301 	and.w	r3, r3, #1
 800a8f4:	61bb      	str	r3, [r7, #24]
 800a8f6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a8f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8fe:	2302      	movs	r3, #2
 800a900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a902:	2303      	movs	r3, #3
 800a904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a906:	2300      	movs	r3, #0
 800a908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a90a:	2300      	movs	r3, #0
 800a90c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a90e:	f107 031c 	add.w	r3, r7, #28
 800a912:	4619      	mov	r1, r3
 800a914:	481f      	ldr	r0, [pc, #124]	; (800a994 <HAL_RCC_MCOConfig+0xcc>)
 800a916:	f7fd fc29 	bl	800816c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a91a:	4b1d      	ldr	r3, [pc, #116]	; (800a990 <HAL_RCC_MCOConfig+0xc8>)
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a922:	68b9      	ldr	r1, [r7, #8]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	430b      	orrs	r3, r1
 800a928:	4919      	ldr	r1, [pc, #100]	; (800a990 <HAL_RCC_MCOConfig+0xc8>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a92e:	e02a      	b.n	800a986 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a930:	4b17      	ldr	r3, [pc, #92]	; (800a990 <HAL_RCC_MCOConfig+0xc8>)
 800a932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a936:	4a16      	ldr	r2, [pc, #88]	; (800a990 <HAL_RCC_MCOConfig+0xc8>)
 800a938:	f043 0304 	orr.w	r3, r3, #4
 800a93c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a940:	4b13      	ldr	r3, [pc, #76]	; (800a990 <HAL_RCC_MCOConfig+0xc8>)
 800a942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a94e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a954:	2302      	movs	r3, #2
 800a956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a958:	2303      	movs	r3, #3
 800a95a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a95c:	2300      	movs	r3, #0
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a960:	2300      	movs	r3, #0
 800a962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a964:	f107 031c 	add.w	r3, r7, #28
 800a968:	4619      	mov	r1, r3
 800a96a:	480b      	ldr	r0, [pc, #44]	; (800a998 <HAL_RCC_MCOConfig+0xd0>)
 800a96c:	f7fd fbfe 	bl	800816c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a970:	4b07      	ldr	r3, [pc, #28]	; (800a990 <HAL_RCC_MCOConfig+0xc8>)
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	01d9      	lsls	r1, r3, #7
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	430b      	orrs	r3, r1
 800a980:	4903      	ldr	r1, [pc, #12]	; (800a990 <HAL_RCC_MCOConfig+0xc8>)
 800a982:	4313      	orrs	r3, r2
 800a984:	610b      	str	r3, [r1, #16]
}
 800a986:	bf00      	nop
 800a988:	3730      	adds	r7, #48	; 0x30
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	58024400 	.word	0x58024400
 800a994:	58020000 	.word	0x58020000
 800a998:	58020800 	.word	0x58020800

0800a99c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b089      	sub	sp, #36	; 0x24
 800a9a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a9a2:	4bb3      	ldr	r3, [pc, #716]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9aa:	2b18      	cmp	r3, #24
 800a9ac:	f200 8155 	bhi.w	800ac5a <HAL_RCC_GetSysClockFreq+0x2be>
 800a9b0:	a201      	add	r2, pc, #4	; (adr r2, 800a9b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b6:	bf00      	nop
 800a9b8:	0800aa1d 	.word	0x0800aa1d
 800a9bc:	0800ac5b 	.word	0x0800ac5b
 800a9c0:	0800ac5b 	.word	0x0800ac5b
 800a9c4:	0800ac5b 	.word	0x0800ac5b
 800a9c8:	0800ac5b 	.word	0x0800ac5b
 800a9cc:	0800ac5b 	.word	0x0800ac5b
 800a9d0:	0800ac5b 	.word	0x0800ac5b
 800a9d4:	0800ac5b 	.word	0x0800ac5b
 800a9d8:	0800aa43 	.word	0x0800aa43
 800a9dc:	0800ac5b 	.word	0x0800ac5b
 800a9e0:	0800ac5b 	.word	0x0800ac5b
 800a9e4:	0800ac5b 	.word	0x0800ac5b
 800a9e8:	0800ac5b 	.word	0x0800ac5b
 800a9ec:	0800ac5b 	.word	0x0800ac5b
 800a9f0:	0800ac5b 	.word	0x0800ac5b
 800a9f4:	0800ac5b 	.word	0x0800ac5b
 800a9f8:	0800aa49 	.word	0x0800aa49
 800a9fc:	0800ac5b 	.word	0x0800ac5b
 800aa00:	0800ac5b 	.word	0x0800ac5b
 800aa04:	0800ac5b 	.word	0x0800ac5b
 800aa08:	0800ac5b 	.word	0x0800ac5b
 800aa0c:	0800ac5b 	.word	0x0800ac5b
 800aa10:	0800ac5b 	.word	0x0800ac5b
 800aa14:	0800ac5b 	.word	0x0800ac5b
 800aa18:	0800aa4f 	.word	0x0800aa4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa1c:	4b94      	ldr	r3, [pc, #592]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0320 	and.w	r3, r3, #32
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d009      	beq.n	800aa3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa28:	4b91      	ldr	r3, [pc, #580]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	08db      	lsrs	r3, r3, #3
 800aa2e:	f003 0303 	and.w	r3, r3, #3
 800aa32:	4a90      	ldr	r2, [pc, #576]	; (800ac74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa34:	fa22 f303 	lsr.w	r3, r2, r3
 800aa38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800aa3a:	e111      	b.n	800ac60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aa3c:	4b8d      	ldr	r3, [pc, #564]	; (800ac74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa3e:	61bb      	str	r3, [r7, #24]
      break;
 800aa40:	e10e      	b.n	800ac60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aa42:	4b8d      	ldr	r3, [pc, #564]	; (800ac78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa44:	61bb      	str	r3, [r7, #24]
      break;
 800aa46:	e10b      	b.n	800ac60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aa48:	4b8c      	ldr	r3, [pc, #560]	; (800ac7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aa4a:	61bb      	str	r3, [r7, #24]
      break;
 800aa4c:	e108      	b.n	800ac60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa4e:	4b88      	ldr	r3, [pc, #544]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa52:	f003 0303 	and.w	r3, r3, #3
 800aa56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aa58:	4b85      	ldr	r3, [pc, #532]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5c:	091b      	lsrs	r3, r3, #4
 800aa5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aa64:	4b82      	ldr	r3, [pc, #520]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	f003 0301 	and.w	r3, r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aa6e:	4b80      	ldr	r3, [pc, #512]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa72:	08db      	lsrs	r3, r3, #3
 800aa74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	fb02 f303 	mul.w	r3, r2, r3
 800aa7e:	ee07 3a90 	vmov	s15, r3
 800aa82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 80e1 	beq.w	800ac54 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	f000 8083 	beq.w	800aba0 <HAL_RCC_GetSysClockFreq+0x204>
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	f200 80a1 	bhi.w	800abe4 <HAL_RCC_GetSysClockFreq+0x248>
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d003      	beq.n	800aab0 <HAL_RCC_GetSysClockFreq+0x114>
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d056      	beq.n	800ab5c <HAL_RCC_GetSysClockFreq+0x1c0>
 800aaae:	e099      	b.n	800abe4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aab0:	4b6f      	ldr	r3, [pc, #444]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0320 	and.w	r3, r3, #32
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d02d      	beq.n	800ab18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aabc:	4b6c      	ldr	r3, [pc, #432]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	08db      	lsrs	r3, r3, #3
 800aac2:	f003 0303 	and.w	r3, r3, #3
 800aac6:	4a6b      	ldr	r2, [pc, #428]	; (800ac74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aac8:	fa22 f303 	lsr.w	r3, r2, r3
 800aacc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	ee07 3a90 	vmov	s15, r3
 800aad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	ee07 3a90 	vmov	s15, r3
 800aade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae6:	4b62      	ldr	r3, [pc, #392]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aafa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ac80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aafe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ab16:	e087      	b.n	800ac28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	ee07 3a90 	vmov	s15, r3
 800ab1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab22:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ac84 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ab26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab2a:	4b51      	ldr	r3, [pc, #324]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ac80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab5a:	e065      	b.n	800ac28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab66:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ac88 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab6e:	4b40      	ldr	r3, [pc, #256]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ac80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab9e:	e043      	b.n	800ac28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	ee07 3a90 	vmov	s15, r3
 800aba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abaa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ac8c <HAL_RCC_GetSysClockFreq+0x2f0>
 800abae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abb2:	4b2f      	ldr	r3, [pc, #188]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abc2:	ed97 6a02 	vldr	s12, [r7, #8]
 800abc6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ac80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abe2:	e021      	b.n	800ac28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	ee07 3a90 	vmov	s15, r3
 800abea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abee:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ac88 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abf6:	4b1e      	ldr	r3, [pc, #120]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac06:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ac80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ac26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ac28:	4b11      	ldr	r3, [pc, #68]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2c:	0a5b      	lsrs	r3, r3, #9
 800ac2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac32:	3301      	adds	r3, #1
 800ac34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	ee07 3a90 	vmov	s15, r3
 800ac3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac4c:	ee17 3a90 	vmov	r3, s15
 800ac50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ac52:	e005      	b.n	800ac60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ac54:	2300      	movs	r3, #0
 800ac56:	61bb      	str	r3, [r7, #24]
      break;
 800ac58:	e002      	b.n	800ac60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ac5a:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac5c:	61bb      	str	r3, [r7, #24]
      break;
 800ac5e:	bf00      	nop
  }

  return sysclockfreq;
 800ac60:	69bb      	ldr	r3, [r7, #24]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3724      	adds	r7, #36	; 0x24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	58024400 	.word	0x58024400
 800ac74:	03d09000 	.word	0x03d09000
 800ac78:	003d0900 	.word	0x003d0900
 800ac7c:	02faf080 	.word	0x02faf080
 800ac80:	46000000 	.word	0x46000000
 800ac84:	4c742400 	.word	0x4c742400
 800ac88:	4a742400 	.word	0x4a742400
 800ac8c:	4c3ebc20 	.word	0x4c3ebc20

0800ac90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac96:	f7ff fe81 	bl	800a99c <HAL_RCC_GetSysClockFreq>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	4b10      	ldr	r3, [pc, #64]	; (800ace0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	0a1b      	lsrs	r3, r3, #8
 800aca2:	f003 030f 	and.w	r3, r3, #15
 800aca6:	490f      	ldr	r1, [pc, #60]	; (800ace4 <HAL_RCC_GetHCLKFreq+0x54>)
 800aca8:	5ccb      	ldrb	r3, [r1, r3]
 800acaa:	f003 031f 	and.w	r3, r3, #31
 800acae:	fa22 f303 	lsr.w	r3, r2, r3
 800acb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800acb4:	4b0a      	ldr	r3, [pc, #40]	; (800ace0 <HAL_RCC_GetHCLKFreq+0x50>)
 800acb6:	699b      	ldr	r3, [r3, #24]
 800acb8:	f003 030f 	and.w	r3, r3, #15
 800acbc:	4a09      	ldr	r2, [pc, #36]	; (800ace4 <HAL_RCC_GetHCLKFreq+0x54>)
 800acbe:	5cd3      	ldrb	r3, [r2, r3]
 800acc0:	f003 031f 	and.w	r3, r3, #31
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	fa22 f303 	lsr.w	r3, r2, r3
 800acca:	4a07      	ldr	r2, [pc, #28]	; (800ace8 <HAL_RCC_GetHCLKFreq+0x58>)
 800accc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800acce:	4a07      	ldr	r2, [pc, #28]	; (800acec <HAL_RCC_GetHCLKFreq+0x5c>)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800acd4:	4b04      	ldr	r3, [pc, #16]	; (800ace8 <HAL_RCC_GetHCLKFreq+0x58>)
 800acd6:	681b      	ldr	r3, [r3, #0]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	58024400 	.word	0x58024400
 800ace4:	0801c7a0 	.word	0x0801c7a0
 800ace8:	24000004 	.word	0x24000004
 800acec:	24000000 	.word	0x24000000

0800acf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800acf4:	f7ff ffcc 	bl	800ac90 <HAL_RCC_GetHCLKFreq>
 800acf8:	4602      	mov	r2, r0
 800acfa:	4b06      	ldr	r3, [pc, #24]	; (800ad14 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	091b      	lsrs	r3, r3, #4
 800ad00:	f003 0307 	and.w	r3, r3, #7
 800ad04:	4904      	ldr	r1, [pc, #16]	; (800ad18 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad06:	5ccb      	ldrb	r3, [r1, r3]
 800ad08:	f003 031f 	and.w	r3, r3, #31
 800ad0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	58024400 	.word	0x58024400
 800ad18:	0801c7a0 	.word	0x0801c7a0

0800ad1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad20:	f7ff ffb6 	bl	800ac90 <HAL_RCC_GetHCLKFreq>
 800ad24:	4602      	mov	r2, r0
 800ad26:	4b06      	ldr	r3, [pc, #24]	; (800ad40 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad28:	69db      	ldr	r3, [r3, #28]
 800ad2a:	0a1b      	lsrs	r3, r3, #8
 800ad2c:	f003 0307 	and.w	r3, r3, #7
 800ad30:	4904      	ldr	r1, [pc, #16]	; (800ad44 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad32:	5ccb      	ldrb	r3, [r1, r3]
 800ad34:	f003 031f 	and.w	r3, r3, #31
 800ad38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	58024400 	.word	0x58024400
 800ad44:	0801c7a0 	.word	0x0801c7a0

0800ad48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad4c:	b0c6      	sub	sp, #280	; 0x118
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad54:	2300      	movs	r3, #0
 800ad56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ad6c:	2500      	movs	r5, #0
 800ad6e:	ea54 0305 	orrs.w	r3, r4, r5
 800ad72:	d049      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ad74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad7e:	d02f      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ad80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad84:	d828      	bhi.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ad86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad8a:	d01a      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ad8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad90:	d822      	bhi.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ad96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad9a:	d007      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ad9c:	e01c      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad9e:	4bab      	ldr	r3, [pc, #684]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ada0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada2:	4aaa      	ldr	r2, [pc, #680]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ada4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ada8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800adaa:	e01a      	b.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800adac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb0:	3308      	adds	r3, #8
 800adb2:	2102      	movs	r1, #2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f002 fa49 	bl	800d24c <RCCEx_PLL2_Config>
 800adba:	4603      	mov	r3, r0
 800adbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800adc0:	e00f      	b.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc6:	3328      	adds	r3, #40	; 0x28
 800adc8:	2102      	movs	r1, #2
 800adca:	4618      	mov	r0, r3
 800adcc:	f002 faf0 	bl	800d3b0 <RCCEx_PLL3_Config>
 800add0:	4603      	mov	r3, r0
 800add2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800add6:	e004      	b.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adde:	e000      	b.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ade0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ade2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10a      	bne.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800adea:	4b98      	ldr	r3, [pc, #608]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800adf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adf8:	4a94      	ldr	r2, [pc, #592]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adfa:	430b      	orrs	r3, r1
 800adfc:	6513      	str	r3, [r2, #80]	; 0x50
 800adfe:	e003      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ae08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ae14:	f04f 0900 	mov.w	r9, #0
 800ae18:	ea58 0309 	orrs.w	r3, r8, r9
 800ae1c:	d047      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ae1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	d82a      	bhi.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ae28:	a201      	add	r2, pc, #4	; (adr r2, 800ae30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ae2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2e:	bf00      	nop
 800ae30:	0800ae45 	.word	0x0800ae45
 800ae34:	0800ae53 	.word	0x0800ae53
 800ae38:	0800ae69 	.word	0x0800ae69
 800ae3c:	0800ae87 	.word	0x0800ae87
 800ae40:	0800ae87 	.word	0x0800ae87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae44:	4b81      	ldr	r3, [pc, #516]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae48:	4a80      	ldr	r2, [pc, #512]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae50:	e01a      	b.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae56:	3308      	adds	r3, #8
 800ae58:	2100      	movs	r1, #0
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f002 f9f6 	bl	800d24c <RCCEx_PLL2_Config>
 800ae60:	4603      	mov	r3, r0
 800ae62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae66:	e00f      	b.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6c:	3328      	adds	r3, #40	; 0x28
 800ae6e:	2100      	movs	r1, #0
 800ae70:	4618      	mov	r0, r3
 800ae72:	f002 fa9d 	bl	800d3b0 <RCCEx_PLL3_Config>
 800ae76:	4603      	mov	r3, r0
 800ae78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae7c:	e004      	b.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae84:	e000      	b.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ae86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae90:	4b6e      	ldr	r3, [pc, #440]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae94:	f023 0107 	bic.w	r1, r3, #7
 800ae98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae9e:	4a6b      	ldr	r2, [pc, #428]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aea0:	430b      	orrs	r3, r1
 800aea2:	6513      	str	r3, [r2, #80]	; 0x50
 800aea4:	e003      	b.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeaa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aeae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800aeba:	f04f 0b00 	mov.w	fp, #0
 800aebe:	ea5a 030b 	orrs.w	r3, sl, fp
 800aec2:	d05b      	beq.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aecc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aed0:	d03b      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800aed2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aed6:	d834      	bhi.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aed8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aedc:	d037      	beq.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800aede:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aee2:	d82e      	bhi.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aee4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aee8:	d033      	beq.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800aeea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aeee:	d828      	bhi.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aef4:	d01a      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aefa:	d822      	bhi.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800af00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af04:	d007      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800af06:	e01c      	b.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af08:	4b50      	ldr	r3, [pc, #320]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0c:	4a4f      	ldr	r2, [pc, #316]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af14:	e01e      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1a:	3308      	adds	r3, #8
 800af1c:	2100      	movs	r1, #0
 800af1e:	4618      	mov	r0, r3
 800af20:	f002 f994 	bl	800d24c <RCCEx_PLL2_Config>
 800af24:	4603      	mov	r3, r0
 800af26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af2a:	e013      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af30:	3328      	adds	r3, #40	; 0x28
 800af32:	2100      	movs	r1, #0
 800af34:	4618      	mov	r0, r3
 800af36:	f002 fa3b 	bl	800d3b0 <RCCEx_PLL3_Config>
 800af3a:	4603      	mov	r3, r0
 800af3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af40:	e008      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af48:	e004      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800af4a:	bf00      	nop
 800af4c:	e002      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800af4e:	bf00      	nop
 800af50:	e000      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800af52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10b      	bne.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800af5c:	4b3b      	ldr	r3, [pc, #236]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af60:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800af64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af6c:	4a37      	ldr	r2, [pc, #220]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af6e:	430b      	orrs	r3, r1
 800af70:	6593      	str	r3, [r2, #88]	; 0x58
 800af72:	e003      	b.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800af7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af84:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800af88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af8c:	2300      	movs	r3, #0
 800af8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800af92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800af96:	460b      	mov	r3, r1
 800af98:	4313      	orrs	r3, r2
 800af9a:	d05d      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800af9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800afa4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800afa8:	d03b      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800afaa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800afae:	d834      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800afb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afb4:	d037      	beq.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800afb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afba:	d82e      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800afbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afc0:	d033      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800afc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afc6:	d828      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800afc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afcc:	d01a      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800afce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afd2:	d822      	bhi.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d003      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800afd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800afdc:	d007      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800afde:	e01c      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afe0:	4b1a      	ldr	r3, [pc, #104]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe4:	4a19      	ldr	r2, [pc, #100]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800afe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800afec:	e01e      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff2:	3308      	adds	r3, #8
 800aff4:	2100      	movs	r1, #0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f002 f928 	bl	800d24c <RCCEx_PLL2_Config>
 800affc:	4603      	mov	r3, r0
 800affe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b002:	e013      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b008:	3328      	adds	r3, #40	; 0x28
 800b00a:	2100      	movs	r1, #0
 800b00c:	4618      	mov	r0, r3
 800b00e:	f002 f9cf 	bl	800d3b0 <RCCEx_PLL3_Config>
 800b012:	4603      	mov	r3, r0
 800b014:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b018:	e008      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b020:	e004      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b022:	bf00      	nop
 800b024:	e002      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b026:	bf00      	nop
 800b028:	e000      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b02a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b02c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10d      	bne.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b038:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b040:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b044:	4a01      	ldr	r2, [pc, #4]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b046:	430b      	orrs	r3, r1
 800b048:	6593      	str	r3, [r2, #88]	; 0x58
 800b04a:	e005      	b.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b04c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b050:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b054:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b064:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b068:	2300      	movs	r3, #0
 800b06a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b06e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b072:	460b      	mov	r3, r1
 800b074:	4313      	orrs	r3, r2
 800b076:	d03a      	beq.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b07e:	2b30      	cmp	r3, #48	; 0x30
 800b080:	d01f      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b082:	2b30      	cmp	r3, #48	; 0x30
 800b084:	d819      	bhi.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b086:	2b20      	cmp	r3, #32
 800b088:	d00c      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b08a:	2b20      	cmp	r3, #32
 800b08c:	d815      	bhi.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d019      	beq.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b092:	2b10      	cmp	r3, #16
 800b094:	d111      	bne.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b096:	4baa      	ldr	r3, [pc, #680]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09a:	4aa9      	ldr	r2, [pc, #676]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b09c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b0a2:	e011      	b.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	2102      	movs	r1, #2
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f002 f8cd 	bl	800d24c <RCCEx_PLL2_Config>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b0b8:	e006      	b.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0c0:	e002      	b.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b0c2:	bf00      	nop
 800b0c4:	e000      	b.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b0c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10a      	bne.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b0d0:	4b9b      	ldr	r3, [pc, #620]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0d4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0de:	4a98      	ldr	r2, [pc, #608]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0e0:	430b      	orrs	r3, r1
 800b0e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0e4:	e003      	b.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b0fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b0fe:	2300      	movs	r3, #0
 800b100:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b104:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b108:	460b      	mov	r3, r1
 800b10a:	4313      	orrs	r3, r2
 800b10c:	d051      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b118:	d035      	beq.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b11a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b11e:	d82e      	bhi.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b120:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b124:	d031      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b126:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b12a:	d828      	bhi.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b12c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b130:	d01a      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b136:	d822      	bhi.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d003      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b13c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b140:	d007      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b142:	e01c      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b144:	4b7e      	ldr	r3, [pc, #504]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b148:	4a7d      	ldr	r2, [pc, #500]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b14a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b14e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b150:	e01c      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b156:	3308      	adds	r3, #8
 800b158:	2100      	movs	r1, #0
 800b15a:	4618      	mov	r0, r3
 800b15c:	f002 f876 	bl	800d24c <RCCEx_PLL2_Config>
 800b160:	4603      	mov	r3, r0
 800b162:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b166:	e011      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16c:	3328      	adds	r3, #40	; 0x28
 800b16e:	2100      	movs	r1, #0
 800b170:	4618      	mov	r0, r3
 800b172:	f002 f91d 	bl	800d3b0 <RCCEx_PLL3_Config>
 800b176:	4603      	mov	r3, r0
 800b178:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b17c:	e006      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b184:	e002      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b186:	bf00      	nop
 800b188:	e000      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b18a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b18c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10a      	bne.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b194:	4b6a      	ldr	r3, [pc, #424]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b198:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1a2:	4a67      	ldr	r2, [pc, #412]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1a4:	430b      	orrs	r3, r1
 800b1a6:	6513      	str	r3, [r2, #80]	; 0x50
 800b1a8:	e003      	b.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b1be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b1c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	d053      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1dc:	d033      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b1de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1e2:	d82c      	bhi.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b1e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1e8:	d02f      	beq.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b1ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1ee:	d826      	bhi.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b1f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1f4:	d02b      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b1f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1fa:	d820      	bhi.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b1fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b200:	d012      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b206:	d81a      	bhi.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d022      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b210:	d115      	bne.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b216:	3308      	adds	r3, #8
 800b218:	2101      	movs	r1, #1
 800b21a:	4618      	mov	r0, r3
 800b21c:	f002 f816 	bl	800d24c <RCCEx_PLL2_Config>
 800b220:	4603      	mov	r3, r0
 800b222:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b226:	e015      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b22c:	3328      	adds	r3, #40	; 0x28
 800b22e:	2101      	movs	r1, #1
 800b230:	4618      	mov	r0, r3
 800b232:	f002 f8bd 	bl	800d3b0 <RCCEx_PLL3_Config>
 800b236:	4603      	mov	r3, r0
 800b238:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b23c:	e00a      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b244:	e006      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b246:	bf00      	nop
 800b248:	e004      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b24a:	bf00      	nop
 800b24c:	e002      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b24e:	bf00      	nop
 800b250:	e000      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b252:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b254:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10a      	bne.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b25c:	4b38      	ldr	r3, [pc, #224]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b25e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b260:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b26a:	4a35      	ldr	r2, [pc, #212]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b26c:	430b      	orrs	r3, r1
 800b26e:	6513      	str	r3, [r2, #80]	; 0x50
 800b270:	e003      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b272:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b276:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b28a:	2300      	movs	r3, #0
 800b28c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b290:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b294:	460b      	mov	r3, r1
 800b296:	4313      	orrs	r3, r2
 800b298:	d058      	beq.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b29e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b2a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2a6:	d033      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b2a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2ac:	d82c      	bhi.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2b2:	d02f      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2b8:	d826      	bhi.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b2ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2be:	d02b      	beq.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b2c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2c4:	d820      	bhi.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b2c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ca:	d012      	beq.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2d0:	d81a      	bhi.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d022      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b2d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2da:	d115      	bne.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f001 ffb1 	bl	800d24c <RCCEx_PLL2_Config>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b2f0:	e015      	b.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f6:	3328      	adds	r3, #40	; 0x28
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f002 f858 	bl	800d3b0 <RCCEx_PLL3_Config>
 800b300:	4603      	mov	r3, r0
 800b302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b306:	e00a      	b.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b30e:	e006      	b.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b310:	bf00      	nop
 800b312:	e004      	b.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b314:	bf00      	nop
 800b316:	e002      	b.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b318:	bf00      	nop
 800b31a:	e000      	b.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b31c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b31e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10e      	bne.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b326:	4b06      	ldr	r3, [pc, #24]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b32a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b332:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b336:	4a02      	ldr	r2, [pc, #8]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b338:	430b      	orrs	r3, r1
 800b33a:	6593      	str	r3, [r2, #88]	; 0x58
 800b33c:	e006      	b.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b33e:	bf00      	nop
 800b340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b344:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b348:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b354:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b35c:	2300      	movs	r3, #0
 800b35e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b362:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b366:	460b      	mov	r3, r1
 800b368:	4313      	orrs	r3, r2
 800b36a:	d037      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b376:	d00e      	beq.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b37c:	d816      	bhi.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d018      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b386:	d111      	bne.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b388:	4bc4      	ldr	r3, [pc, #784]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38c:	4ac3      	ldr	r2, [pc, #780]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b38e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b392:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b394:	e00f      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39a:	3308      	adds	r3, #8
 800b39c:	2101      	movs	r1, #1
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f001 ff54 	bl	800d24c <RCCEx_PLL2_Config>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b3aa:	e004      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3b2:	e000      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b3b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10a      	bne.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b3be:	4bb7      	ldr	r3, [pc, #732]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3cc:	4ab3      	ldr	r2, [pc, #716]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3ce:	430b      	orrs	r3, r1
 800b3d0:	6513      	str	r3, [r2, #80]	; 0x50
 800b3d2:	e003      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b3e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b3f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	d039      	beq.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b402:	2b03      	cmp	r3, #3
 800b404:	d81c      	bhi.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b406:	a201      	add	r2, pc, #4	; (adr r2, 800b40c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40c:	0800b449 	.word	0x0800b449
 800b410:	0800b41d 	.word	0x0800b41d
 800b414:	0800b42b 	.word	0x0800b42b
 800b418:	0800b449 	.word	0x0800b449
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b41c:	4b9f      	ldr	r3, [pc, #636]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	4a9e      	ldr	r2, [pc, #632]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b426:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b428:	e00f      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42e:	3308      	adds	r3, #8
 800b430:	2102      	movs	r1, #2
 800b432:	4618      	mov	r0, r3
 800b434:	f001 ff0a 	bl	800d24c <RCCEx_PLL2_Config>
 800b438:	4603      	mov	r3, r0
 800b43a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b43e:	e004      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b446:	e000      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b44a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10a      	bne.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b452:	4b92      	ldr	r3, [pc, #584]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b456:	f023 0103 	bic.w	r1, r3, #3
 800b45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b460:	4a8e      	ldr	r2, [pc, #568]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b462:	430b      	orrs	r3, r1
 800b464:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b466:	e003      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b468:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b46c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b47c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b480:	2300      	movs	r3, #0
 800b482:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b486:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4313      	orrs	r3, r2
 800b48e:	f000 8099 	beq.w	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b492:	4b83      	ldr	r3, [pc, #524]	; (800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a82      	ldr	r2, [pc, #520]	; (800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b49c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b49e:	f7f9 f97d 	bl	800479c <HAL_GetTick>
 800b4a2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4a6:	e00b      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4a8:	f7f9 f978 	bl	800479c <HAL_GetTick>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	2b64      	cmp	r3, #100	; 0x64
 800b4b6:	d903      	bls.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4be:	e005      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4c0:	4b77      	ldr	r3, [pc, #476]	; (800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d0ed      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b4cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d173      	bne.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b4d4:	4b71      	ldr	r3, [pc, #452]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4e0:	4053      	eors	r3, r2
 800b4e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d015      	beq.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b4ea:	4b6c      	ldr	r3, [pc, #432]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b4f6:	4b69      	ldr	r3, [pc, #420]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4fa:	4a68      	ldr	r2, [pc, #416]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b500:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b502:	4b66      	ldr	r3, [pc, #408]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b506:	4a65      	ldr	r2, [pc, #404]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b50c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b50e:	4a63      	ldr	r2, [pc, #396]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b514:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b51e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b522:	d118      	bne.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b524:	f7f9 f93a 	bl	800479c <HAL_GetTick>
 800b528:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b52c:	e00d      	b.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b52e:	f7f9 f935 	bl	800479c <HAL_GetTick>
 800b532:	4602      	mov	r2, r0
 800b534:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b538:	1ad2      	subs	r2, r2, r3
 800b53a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b53e:	429a      	cmp	r2, r3
 800b540:	d903      	bls.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b548:	e005      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b54a:	4b54      	ldr	r3, [pc, #336]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b54e:	f003 0302 	and.w	r3, r3, #2
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0eb      	beq.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b556:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d129      	bne.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b562:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b56a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b56e:	d10e      	bne.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b570:	4b4a      	ldr	r3, [pc, #296]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b580:	091a      	lsrs	r2, r3, #4
 800b582:	4b48      	ldr	r3, [pc, #288]	; (800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b584:	4013      	ands	r3, r2
 800b586:	4a45      	ldr	r2, [pc, #276]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b588:	430b      	orrs	r3, r1
 800b58a:	6113      	str	r3, [r2, #16]
 800b58c:	e005      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b58e:	4b43      	ldr	r3, [pc, #268]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	4a42      	ldr	r2, [pc, #264]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b594:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b598:	6113      	str	r3, [r2, #16]
 800b59a:	4b40      	ldr	r3, [pc, #256]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b59c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5aa:	4a3c      	ldr	r2, [pc, #240]	; (800b69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5ac:	430b      	orrs	r3, r1
 800b5ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b5b0:	e008      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b5b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b5ba:	e003      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f002 0301 	and.w	r3, r2, #1
 800b5d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b5da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	f000 808f 	beq.w	800b704 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5ec:	2b28      	cmp	r3, #40	; 0x28
 800b5ee:	d871      	bhi.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b5f0:	a201      	add	r2, pc, #4	; (adr r2, 800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f6:	bf00      	nop
 800b5f8:	0800b6dd 	.word	0x0800b6dd
 800b5fc:	0800b6d5 	.word	0x0800b6d5
 800b600:	0800b6d5 	.word	0x0800b6d5
 800b604:	0800b6d5 	.word	0x0800b6d5
 800b608:	0800b6d5 	.word	0x0800b6d5
 800b60c:	0800b6d5 	.word	0x0800b6d5
 800b610:	0800b6d5 	.word	0x0800b6d5
 800b614:	0800b6d5 	.word	0x0800b6d5
 800b618:	0800b6a9 	.word	0x0800b6a9
 800b61c:	0800b6d5 	.word	0x0800b6d5
 800b620:	0800b6d5 	.word	0x0800b6d5
 800b624:	0800b6d5 	.word	0x0800b6d5
 800b628:	0800b6d5 	.word	0x0800b6d5
 800b62c:	0800b6d5 	.word	0x0800b6d5
 800b630:	0800b6d5 	.word	0x0800b6d5
 800b634:	0800b6d5 	.word	0x0800b6d5
 800b638:	0800b6bf 	.word	0x0800b6bf
 800b63c:	0800b6d5 	.word	0x0800b6d5
 800b640:	0800b6d5 	.word	0x0800b6d5
 800b644:	0800b6d5 	.word	0x0800b6d5
 800b648:	0800b6d5 	.word	0x0800b6d5
 800b64c:	0800b6d5 	.word	0x0800b6d5
 800b650:	0800b6d5 	.word	0x0800b6d5
 800b654:	0800b6d5 	.word	0x0800b6d5
 800b658:	0800b6dd 	.word	0x0800b6dd
 800b65c:	0800b6d5 	.word	0x0800b6d5
 800b660:	0800b6d5 	.word	0x0800b6d5
 800b664:	0800b6d5 	.word	0x0800b6d5
 800b668:	0800b6d5 	.word	0x0800b6d5
 800b66c:	0800b6d5 	.word	0x0800b6d5
 800b670:	0800b6d5 	.word	0x0800b6d5
 800b674:	0800b6d5 	.word	0x0800b6d5
 800b678:	0800b6dd 	.word	0x0800b6dd
 800b67c:	0800b6d5 	.word	0x0800b6d5
 800b680:	0800b6d5 	.word	0x0800b6d5
 800b684:	0800b6d5 	.word	0x0800b6d5
 800b688:	0800b6d5 	.word	0x0800b6d5
 800b68c:	0800b6d5 	.word	0x0800b6d5
 800b690:	0800b6d5 	.word	0x0800b6d5
 800b694:	0800b6d5 	.word	0x0800b6d5
 800b698:	0800b6dd 	.word	0x0800b6dd
 800b69c:	58024400 	.word	0x58024400
 800b6a0:	58024800 	.word	0x58024800
 800b6a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f001 fdcb 	bl	800d24c <RCCEx_PLL2_Config>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b6bc:	e00f      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c2:	3328      	adds	r3, #40	; 0x28
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f001 fe72 	bl	800d3b0 <RCCEx_PLL3_Config>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b6d2:	e004      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6da:	e000      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b6dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10a      	bne.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b6e6:	4bbf      	ldr	r3, [pc, #764]	; (800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6f4:	4abb      	ldr	r2, [pc, #748]	; (800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6f6:	430b      	orrs	r3, r1
 800b6f8:	6553      	str	r3, [r2, #84]	; 0x54
 800b6fa:	e003      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b700:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	f002 0302 	and.w	r3, r2, #2
 800b710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b714:	2300      	movs	r3, #0
 800b716:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b71a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b71e:	460b      	mov	r3, r1
 800b720:	4313      	orrs	r3, r2
 800b722:	d041      	beq.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b72a:	2b05      	cmp	r3, #5
 800b72c:	d824      	bhi.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b72e:	a201      	add	r2, pc, #4	; (adr r2, 800b734 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b734:	0800b781 	.word	0x0800b781
 800b738:	0800b74d 	.word	0x0800b74d
 800b73c:	0800b763 	.word	0x0800b763
 800b740:	0800b781 	.word	0x0800b781
 800b744:	0800b781 	.word	0x0800b781
 800b748:	0800b781 	.word	0x0800b781
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b750:	3308      	adds	r3, #8
 800b752:	2101      	movs	r1, #1
 800b754:	4618      	mov	r0, r3
 800b756:	f001 fd79 	bl	800d24c <RCCEx_PLL2_Config>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b760:	e00f      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b766:	3328      	adds	r3, #40	; 0x28
 800b768:	2101      	movs	r1, #1
 800b76a:	4618      	mov	r0, r3
 800b76c:	f001 fe20 	bl	800d3b0 <RCCEx_PLL3_Config>
 800b770:	4603      	mov	r3, r0
 800b772:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b776:	e004      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b77e:	e000      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b780:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b782:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10a      	bne.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b78a:	4b96      	ldr	r3, [pc, #600]	; (800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b78e:	f023 0107 	bic.w	r1, r3, #7
 800b792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b798:	4a92      	ldr	r2, [pc, #584]	; (800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b79a:	430b      	orrs	r3, r1
 800b79c:	6553      	str	r3, [r2, #84]	; 0x54
 800b79e:	e003      	b.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	f002 0304 	and.w	r3, r2, #4
 800b7b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b7be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	d044      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7d0:	2b05      	cmp	r3, #5
 800b7d2:	d825      	bhi.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b7d4:	a201      	add	r2, pc, #4	; (adr r2, 800b7dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7da:	bf00      	nop
 800b7dc:	0800b829 	.word	0x0800b829
 800b7e0:	0800b7f5 	.word	0x0800b7f5
 800b7e4:	0800b80b 	.word	0x0800b80b
 800b7e8:	0800b829 	.word	0x0800b829
 800b7ec:	0800b829 	.word	0x0800b829
 800b7f0:	0800b829 	.word	0x0800b829
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f8:	3308      	adds	r3, #8
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f001 fd25 	bl	800d24c <RCCEx_PLL2_Config>
 800b802:	4603      	mov	r3, r0
 800b804:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b808:	e00f      	b.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80e:	3328      	adds	r3, #40	; 0x28
 800b810:	2101      	movs	r1, #1
 800b812:	4618      	mov	r0, r3
 800b814:	f001 fdcc 	bl	800d3b0 <RCCEx_PLL3_Config>
 800b818:	4603      	mov	r3, r0
 800b81a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b81e:	e004      	b.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b826:	e000      	b.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b82a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10b      	bne.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b832:	4b6c      	ldr	r3, [pc, #432]	; (800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b836:	f023 0107 	bic.w	r1, r3, #7
 800b83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b842:	4a68      	ldr	r2, [pc, #416]	; (800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b844:	430b      	orrs	r3, r1
 800b846:	6593      	str	r3, [r2, #88]	; 0x58
 800b848:	e003      	b.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b84a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b84e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	f002 0320 	and.w	r3, r2, #32
 800b85e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b862:	2300      	movs	r3, #0
 800b864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b868:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4313      	orrs	r3, r2
 800b870:	d055      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b87a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b87e:	d033      	beq.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b884:	d82c      	bhi.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b88a:	d02f      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b88c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b890:	d826      	bhi.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b892:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b896:	d02b      	beq.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b898:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b89c:	d820      	bhi.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b89e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8a2:	d012      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b8a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8a8:	d81a      	bhi.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d022      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b8ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8b2:	d115      	bne.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b8:	3308      	adds	r3, #8
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f001 fcc5 	bl	800d24c <RCCEx_PLL2_Config>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b8c8:	e015      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ce:	3328      	adds	r3, #40	; 0x28
 800b8d0:	2102      	movs	r1, #2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f001 fd6c 	bl	800d3b0 <RCCEx_PLL3_Config>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b8de:	e00a      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8e6:	e006      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b8e8:	bf00      	nop
 800b8ea:	e004      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b8ec:	bf00      	nop
 800b8ee:	e002      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b8f0:	bf00      	nop
 800b8f2:	e000      	b.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b8f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10b      	bne.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b8fe:	4b39      	ldr	r3, [pc, #228]	; (800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b902:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b90e:	4a35      	ldr	r2, [pc, #212]	; (800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b910:	430b      	orrs	r3, r1
 800b912:	6553      	str	r3, [r2, #84]	; 0x54
 800b914:	e003      	b.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b916:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b91a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b926:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b92a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b92e:	2300      	movs	r3, #0
 800b930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b934:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b938:	460b      	mov	r3, r1
 800b93a:	4313      	orrs	r3, r2
 800b93c:	d058      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b946:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b94a:	d033      	beq.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b94c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b950:	d82c      	bhi.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b956:	d02f      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b95c:	d826      	bhi.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b95e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b962:	d02b      	beq.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b964:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b968:	d820      	bhi.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b96a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b96e:	d012      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b974:	d81a      	bhi.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b976:	2b00      	cmp	r3, #0
 800b978:	d022      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b97a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b97e:	d115      	bne.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b984:	3308      	adds	r3, #8
 800b986:	2100      	movs	r1, #0
 800b988:	4618      	mov	r0, r3
 800b98a:	f001 fc5f 	bl	800d24c <RCCEx_PLL2_Config>
 800b98e:	4603      	mov	r3, r0
 800b990:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b994:	e015      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99a:	3328      	adds	r3, #40	; 0x28
 800b99c:	2102      	movs	r1, #2
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f001 fd06 	bl	800d3b0 <RCCEx_PLL3_Config>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b9aa:	e00a      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9b2:	e006      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b9b4:	bf00      	nop
 800b9b6:	e004      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b9b8:	bf00      	nop
 800b9ba:	e002      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b9bc:	bf00      	nop
 800b9be:	e000      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b9c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10e      	bne.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b9ca:	4b06      	ldr	r3, [pc, #24]	; (800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b9cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b9da:	4a02      	ldr	r2, [pc, #8]	; (800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b9dc:	430b      	orrs	r3, r1
 800b9de:	6593      	str	r3, [r2, #88]	; 0x58
 800b9e0:	e006      	b.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b9e2:	bf00      	nop
 800b9e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b9fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba00:	2300      	movs	r3, #0
 800ba02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba06:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	d055      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ba10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba1c:	d033      	beq.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ba1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba22:	d82c      	bhi.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ba24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba28:	d02f      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ba2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba2e:	d826      	bhi.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ba30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba34:	d02b      	beq.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ba36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba3a:	d820      	bhi.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ba3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba40:	d012      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ba42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba46:	d81a      	bhi.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d022      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ba4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba50:	d115      	bne.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba56:	3308      	adds	r3, #8
 800ba58:	2100      	movs	r1, #0
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f001 fbf6 	bl	800d24c <RCCEx_PLL2_Config>
 800ba60:	4603      	mov	r3, r0
 800ba62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ba66:	e015      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6c:	3328      	adds	r3, #40	; 0x28
 800ba6e:	2102      	movs	r1, #2
 800ba70:	4618      	mov	r0, r3
 800ba72:	f001 fc9d 	bl	800d3b0 <RCCEx_PLL3_Config>
 800ba76:	4603      	mov	r3, r0
 800ba78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ba7c:	e00a      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba84:	e006      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ba86:	bf00      	nop
 800ba88:	e004      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ba8a:	bf00      	nop
 800ba8c:	e002      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ba8e:	bf00      	nop
 800ba90:	e000      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ba92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10b      	bne.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ba9c:	4ba0      	ldr	r3, [pc, #640]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baa0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800baa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800baac:	4a9c      	ldr	r2, [pc, #624]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800baae:	430b      	orrs	r3, r1
 800bab0:	6593      	str	r3, [r2, #88]	; 0x58
 800bab2:	e003      	b.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bab8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800babc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	f002 0308 	and.w	r3, r2, #8
 800bac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bacc:	2300      	movs	r3, #0
 800bace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bad2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bad6:	460b      	mov	r3, r1
 800bad8:	4313      	orrs	r3, r2
 800bada:	d01e      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800badc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bae8:	d10c      	bne.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800baea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baee:	3328      	adds	r3, #40	; 0x28
 800baf0:	2102      	movs	r1, #2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f001 fc5c 	bl	800d3b0 <RCCEx_PLL3_Config>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800bb04:	4b86      	ldr	r3, [pc, #536]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb14:	4a82      	ldr	r2, [pc, #520]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb16:	430b      	orrs	r3, r1
 800bb18:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	f002 0310 	and.w	r3, r2, #16
 800bb26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb30:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bb34:	460b      	mov	r3, r1
 800bb36:	4313      	orrs	r3, r2
 800bb38:	d01e      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bb3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb46:	d10c      	bne.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb4c:	3328      	adds	r3, #40	; 0x28
 800bb4e:	2102      	movs	r1, #2
 800bb50:	4618      	mov	r0, r3
 800bb52:	f001 fc2d 	bl	800d3b0 <RCCEx_PLL3_Config>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb62:	4b6f      	ldr	r3, [pc, #444]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb72:	4a6b      	ldr	r2, [pc, #428]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb74:	430b      	orrs	r3, r1
 800bb76:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bb84:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb86:	2300      	movs	r3, #0
 800bb88:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bb8a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4313      	orrs	r3, r2
 800bb92:	d03e      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bba0:	d022      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800bba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bba6:	d81b      	bhi.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d003      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800bbac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbb0:	d00b      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800bbb2:	e015      	b.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb8:	3308      	adds	r3, #8
 800bbba:	2100      	movs	r1, #0
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f001 fb45 	bl	800d24c <RCCEx_PLL2_Config>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bbc8:	e00f      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbce:	3328      	adds	r3, #40	; 0x28
 800bbd0:	2102      	movs	r1, #2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f001 fbec 	bl	800d3b0 <RCCEx_PLL3_Config>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bbde:	e004      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbe6:	e000      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800bbe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10b      	bne.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bbf2:	4b4b      	ldr	r3, [pc, #300]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bc02:	4a47      	ldr	r2, [pc, #284]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc04:	430b      	orrs	r3, r1
 800bc06:	6593      	str	r3, [r2, #88]	; 0x58
 800bc08:	e003      	b.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bc12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bc1e:	673b      	str	r3, [r7, #112]	; 0x70
 800bc20:	2300      	movs	r3, #0
 800bc22:	677b      	str	r3, [r7, #116]	; 0x74
 800bc24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	d03b      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bc2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bc3a:	d01f      	beq.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bc3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bc40:	d818      	bhi.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bc42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc46:	d003      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bc48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc4c:	d007      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800bc4e:	e011      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc50:	4b33      	ldr	r3, [pc, #204]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc54:	4a32      	ldr	r2, [pc, #200]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bc5c:	e00f      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc62:	3328      	adds	r3, #40	; 0x28
 800bc64:	2101      	movs	r1, #1
 800bc66:	4618      	mov	r0, r3
 800bc68:	f001 fba2 	bl	800d3b0 <RCCEx_PLL3_Config>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bc72:	e004      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc7a:	e000      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bc7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10b      	bne.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc86:	4b26      	ldr	r3, [pc, #152]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bc8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc96:	4a22      	ldr	r2, [pc, #136]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc98:	430b      	orrs	r3, r1
 800bc9a:	6553      	str	r3, [r2, #84]	; 0x54
 800bc9c:	e003      	b.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bca2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bcb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bcb8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	d034      	beq.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bcc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d003      	beq.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcd0:	d007      	beq.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bcd2:	e011      	b.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcd4:	4b12      	ldr	r3, [pc, #72]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd8:	4a11      	ldr	r2, [pc, #68]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bcda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bce0:	e00e      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce6:	3308      	adds	r3, #8
 800bce8:	2102      	movs	r1, #2
 800bcea:	4618      	mov	r0, r3
 800bcec:	f001 faae 	bl	800d24c <RCCEx_PLL2_Config>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bcf6:	e003      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bcfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10d      	bne.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bd08:	4b05      	ldr	r3, [pc, #20]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd16:	4a02      	ldr	r2, [pc, #8]	; (800bd20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd18:	430b      	orrs	r3, r1
 800bd1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd1c:	e006      	b.n	800bd2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bd1e:	bf00      	nop
 800bd20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bd2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bd38:	663b      	str	r3, [r7, #96]	; 0x60
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	667b      	str	r3, [r7, #100]	; 0x64
 800bd3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bd42:	460b      	mov	r3, r1
 800bd44:	4313      	orrs	r3, r2
 800bd46:	d00c      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd4c:	3328      	adds	r3, #40	; 0x28
 800bd4e:	2102      	movs	r1, #2
 800bd50:	4618      	mov	r0, r3
 800bd52:	f001 fb2d 	bl	800d3b0 <RCCEx_PLL3_Config>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d002      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bd62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bd6e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd70:	2300      	movs	r3, #0
 800bd72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	d036      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bd7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd88:	d018      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bd8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd8e:	d811      	bhi.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bd90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd94:	d014      	beq.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bd96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd9a:	d80b      	bhi.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d011      	beq.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bda0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bda4:	d106      	bne.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bda6:	4bb7      	ldr	r3, [pc, #732]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdaa:	4ab6      	ldr	r2, [pc, #728]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bdb2:	e008      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bdba:	e004      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bdbc:	bf00      	nop
 800bdbe:	e002      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bdc0:	bf00      	nop
 800bdc2:	e000      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bdc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d10a      	bne.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bdce:	4bad      	ldr	r3, [pc, #692]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bdd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bddc:	4aa9      	ldr	r2, [pc, #676]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdde:	430b      	orrs	r3, r1
 800bde0:	6553      	str	r3, [r2, #84]	; 0x54
 800bde2:	e003      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bde8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bdec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bdf8:	653b      	str	r3, [r7, #80]	; 0x50
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	657b      	str	r3, [r7, #84]	; 0x54
 800bdfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800be02:	460b      	mov	r3, r1
 800be04:	4313      	orrs	r3, r2
 800be06:	d009      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800be08:	4b9e      	ldr	r3, [pc, #632]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be16:	4a9b      	ldr	r2, [pc, #620]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be18:	430b      	orrs	r3, r1
 800be1a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800be1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be24:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800be28:	64bb      	str	r3, [r7, #72]	; 0x48
 800be2a:	2300      	movs	r3, #0
 800be2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800be32:	460b      	mov	r3, r1
 800be34:	4313      	orrs	r3, r2
 800be36:	d009      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800be38:	4b92      	ldr	r3, [pc, #584]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be3c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800be40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be46:	4a8f      	ldr	r2, [pc, #572]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be48:	430b      	orrs	r3, r1
 800be4a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800be4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800be58:	643b      	str	r3, [r7, #64]	; 0x40
 800be5a:	2300      	movs	r3, #0
 800be5c:	647b      	str	r3, [r7, #68]	; 0x44
 800be5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800be62:	460b      	mov	r3, r1
 800be64:	4313      	orrs	r3, r2
 800be66:	d00e      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800be68:	4b86      	ldr	r3, [pc, #536]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	4a85      	ldr	r2, [pc, #532]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800be72:	6113      	str	r3, [r2, #16]
 800be74:	4b83      	ldr	r3, [pc, #524]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be76:	6919      	ldr	r1, [r3, #16]
 800be78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be80:	4a80      	ldr	r2, [pc, #512]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be82:	430b      	orrs	r3, r1
 800be84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800be86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800be92:	63bb      	str	r3, [r7, #56]	; 0x38
 800be94:	2300      	movs	r3, #0
 800be96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800be9c:	460b      	mov	r3, r1
 800be9e:	4313      	orrs	r3, r2
 800bea0:	d009      	beq.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bea2:	4b78      	ldr	r3, [pc, #480]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bea6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800beaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb0:	4a74      	ldr	r2, [pc, #464]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800beb2:	430b      	orrs	r3, r1
 800beb4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800beb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bec2:	633b      	str	r3, [r7, #48]	; 0x30
 800bec4:	2300      	movs	r3, #0
 800bec6:	637b      	str	r3, [r7, #52]	; 0x34
 800bec8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800becc:	460b      	mov	r3, r1
 800bece:	4313      	orrs	r3, r2
 800bed0:	d00a      	beq.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bed2:	4b6c      	ldr	r3, [pc, #432]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800beda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bee2:	4a68      	ldr	r2, [pc, #416]	; (800c084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bee4:	430b      	orrs	r3, r1
 800bee6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	2100      	movs	r1, #0
 800bef2:	62b9      	str	r1, [r7, #40]	; 0x28
 800bef4:	f003 0301 	and.w	r3, r3, #1
 800bef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800befa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800befe:	460b      	mov	r3, r1
 800bf00:	4313      	orrs	r3, r2
 800bf02:	d011      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf08:	3308      	adds	r3, #8
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f001 f99d 	bl	800d24c <RCCEx_PLL2_Config>
 800bf12:	4603      	mov	r3, r0
 800bf14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d003      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bf28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	2100      	movs	r1, #0
 800bf32:	6239      	str	r1, [r7, #32]
 800bf34:	f003 0302 	and.w	r3, r3, #2
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24
 800bf3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4313      	orrs	r3, r2
 800bf42:	d011      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf48:	3308      	adds	r3, #8
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f001 f97d 	bl	800d24c <RCCEx_PLL2_Config>
 800bf52:	4603      	mov	r3, r0
 800bf54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bf68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	2100      	movs	r1, #0
 800bf72:	61b9      	str	r1, [r7, #24]
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	61fb      	str	r3, [r7, #28]
 800bf7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	4313      	orrs	r3, r2
 800bf82:	d011      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf88:	3308      	adds	r3, #8
 800bf8a:	2102      	movs	r1, #2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f001 f95d 	bl	800d24c <RCCEx_PLL2_Config>
 800bf92:	4603      	mov	r3, r0
 800bf94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfa4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bfa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	6139      	str	r1, [r7, #16]
 800bfb4:	f003 0308 	and.w	r3, r3, #8
 800bfb8:	617b      	str	r3, [r7, #20]
 800bfba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	d011      	beq.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfc8:	3328      	adds	r3, #40	; 0x28
 800bfca:	2100      	movs	r1, #0
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f001 f9ef 	bl	800d3b0 <RCCEx_PLL3_Config>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bfd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d003      	beq.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfe0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfe4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	2100      	movs	r1, #0
 800bff2:	60b9      	str	r1, [r7, #8]
 800bff4:	f003 0310 	and.w	r3, r3, #16
 800bff8:	60fb      	str	r3, [r7, #12]
 800bffa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bffe:	460b      	mov	r3, r1
 800c000:	4313      	orrs	r3, r2
 800c002:	d011      	beq.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c008:	3328      	adds	r3, #40	; 0x28
 800c00a:	2101      	movs	r1, #1
 800c00c:	4618      	mov	r0, r3
 800c00e:	f001 f9cf 	bl	800d3b0 <RCCEx_PLL3_Config>
 800c012:	4603      	mov	r3, r0
 800c014:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c018:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d003      	beq.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c020:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c024:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	2100      	movs	r1, #0
 800c032:	6039      	str	r1, [r7, #0]
 800c034:	f003 0320 	and.w	r3, r3, #32
 800c038:	607b      	str	r3, [r7, #4]
 800c03a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c03e:	460b      	mov	r3, r1
 800c040:	4313      	orrs	r3, r2
 800c042:	d011      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c048:	3328      	adds	r3, #40	; 0x28
 800c04a:	2102      	movs	r1, #2
 800c04c:	4618      	mov	r0, r3
 800c04e:	f001 f9af 	bl	800d3b0 <RCCEx_PLL3_Config>
 800c052:	4603      	mov	r3, r0
 800c054:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c058:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d003      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c060:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c064:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800c068:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	e000      	b.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c074:	2301      	movs	r3, #1
}
 800c076:	4618      	mov	r0, r3
 800c078:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c07c:	46bd      	mov	sp, r7
 800c07e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c082:	bf00      	nop
 800c084:	58024400 	.word	0x58024400

0800c088 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b090      	sub	sp, #64	; 0x40
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c096:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c09a:	430b      	orrs	r3, r1
 800c09c:	f040 8094 	bne.w	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c0a0:	4b9b      	ldr	r3, [pc, #620]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0a4:	f003 0307 	and.w	r3, r3, #7
 800c0a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	2b04      	cmp	r3, #4
 800c0ae:	f200 8087 	bhi.w	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c0b2:	a201      	add	r2, pc, #4	; (adr r2, 800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b8:	0800c0cd 	.word	0x0800c0cd
 800c0bc:	0800c0f5 	.word	0x0800c0f5
 800c0c0:	0800c11d 	.word	0x0800c11d
 800c0c4:	0800c1b9 	.word	0x0800c1b9
 800c0c8:	0800c145 	.word	0x0800c145
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0cc:	4b90      	ldr	r3, [pc, #576]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0d8:	d108      	bne.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f000 ff62 	bl	800cfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0e8:	f000 bc93 	b.w	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f0:	f000 bc8f 	b.w	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0f4:	4b86      	ldr	r3, [pc, #536]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c100:	d108      	bne.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c102:	f107 0318 	add.w	r3, r7, #24
 800c106:	4618      	mov	r0, r3
 800c108:	f000 fca6 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c110:	f000 bc7f 	b.w	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c118:	f000 bc7b 	b.w	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c11c:	4b7c      	ldr	r3, [pc, #496]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c128:	d108      	bne.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c12a:	f107 030c 	add.w	r3, r7, #12
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 fde6 	bl	800cd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c138:	f000 bc6b 	b.w	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c140:	f000 bc67 	b.w	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c144:	4b72      	ldr	r3, [pc, #456]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c14c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c14e:	4b70      	ldr	r3, [pc, #448]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	2b04      	cmp	r3, #4
 800c158:	d10c      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d109      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c160:	4b6b      	ldr	r3, [pc, #428]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	08db      	lsrs	r3, r3, #3
 800c166:	f003 0303 	and.w	r3, r3, #3
 800c16a:	4a6a      	ldr	r2, [pc, #424]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c16c:	fa22 f303 	lsr.w	r3, r2, r3
 800c170:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c172:	e01f      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c174:	4b66      	ldr	r3, [pc, #408]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c17c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c180:	d106      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c188:	d102      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c18a:	4b63      	ldr	r3, [pc, #396]	; (800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c18c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c18e:	e011      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c190:	4b5f      	ldr	r3, [pc, #380]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c19c:	d106      	bne.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1a4:	d102      	bne.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1a6:	4b5d      	ldr	r3, [pc, #372]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1aa:	e003      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c1b0:	f000 bc2f 	b.w	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1b4:	f000 bc2d 	b.w	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c1b8:	4b59      	ldr	r3, [pc, #356]	; (800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1bc:	f000 bc29 	b.w	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c4:	f000 bc25 	b.w	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1cc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c1d0:	430b      	orrs	r3, r1
 800c1d2:	f040 80a7 	bne.w	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c1d6:	4b4e      	ldr	r3, [pc, #312]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1da:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c1de:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1e6:	d054      	beq.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1ee:	f200 808b 	bhi.w	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c1f8:	f000 8083 	beq.w	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c202:	f200 8081 	bhi.w	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c20c:	d02f      	beq.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c214:	d878      	bhi.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d004      	beq.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c222:	d012      	beq.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c224:	e070      	b.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c226:	4b3a      	ldr	r3, [pc, #232]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c22e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c232:	d107      	bne.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 feb5 	bl	800cfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c242:	e3e6      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c244:	2300      	movs	r3, #0
 800c246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c248:	e3e3      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c24a:	4b31      	ldr	r3, [pc, #196]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c256:	d107      	bne.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c258:	f107 0318 	add.w	r3, r7, #24
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 fbfb 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c266:	e3d4      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c268:	2300      	movs	r3, #0
 800c26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c26c:	e3d1      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c26e:	4b28      	ldr	r3, [pc, #160]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c27a:	d107      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c27c:	f107 030c 	add.w	r3, r7, #12
 800c280:	4618      	mov	r0, r3
 800c282:	f000 fd3d 	bl	800cd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c28a:	e3c2      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c290:	e3bf      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c292:	4b1f      	ldr	r3, [pc, #124]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c296:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c29a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c29c:	4b1c      	ldr	r3, [pc, #112]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 0304 	and.w	r3, r3, #4
 800c2a4:	2b04      	cmp	r3, #4
 800c2a6:	d10c      	bne.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d109      	bne.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2ae:	4b18      	ldr	r3, [pc, #96]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	08db      	lsrs	r3, r3, #3
 800c2b4:	f003 0303 	and.w	r3, r3, #3
 800c2b8:	4a16      	ldr	r2, [pc, #88]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c2be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2c0:	e01e      	b.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2c2:	4b13      	ldr	r3, [pc, #76]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ce:	d106      	bne.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2d6:	d102      	bne.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2d8:	4b0f      	ldr	r3, [pc, #60]	; (800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2dc:	e010      	b.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2de:	4b0c      	ldr	r3, [pc, #48]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2ea:	d106      	bne.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2f2:	d102      	bne.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2f4:	4b09      	ldr	r3, [pc, #36]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2f8:	e002      	b.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2fe:	e388      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c300:	e387      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c302:	4b07      	ldr	r3, [pc, #28]	; (800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c306:	e384      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c30c:	e381      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c30e:	bf00      	nop
 800c310:	58024400 	.word	0x58024400
 800c314:	03d09000 	.word	0x03d09000
 800c318:	003d0900 	.word	0x003d0900
 800c31c:	02faf080 	.word	0x02faf080
 800c320:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c324:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c328:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c32c:	430b      	orrs	r3, r1
 800c32e:	f040 809c 	bne.w	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c332:	4b9e      	ldr	r3, [pc, #632]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c336:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c33a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c342:	d054      	beq.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c346:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c34a:	f200 808b 	bhi.w	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c354:	f000 8083 	beq.w	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c35e:	f200 8081 	bhi.w	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c368:	d02f      	beq.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c370:	d878      	bhi.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	2b00      	cmp	r3, #0
 800c376:	d004      	beq.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c37e:	d012      	beq.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c380:	e070      	b.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c382:	4b8a      	ldr	r3, [pc, #552]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c38a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c38e:	d107      	bne.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c394:	4618      	mov	r0, r3
 800c396:	f000 fe07 	bl	800cfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c39e:	e338      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a4:	e335      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3a6:	4b81      	ldr	r3, [pc, #516]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3b2:	d107      	bne.n	800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3b4:	f107 0318 	add.w	r3, r7, #24
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f000 fb4d 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c2:	e326      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3c8:	e323      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3ca:	4b78      	ldr	r3, [pc, #480]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3d6:	d107      	bne.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3d8:	f107 030c 	add.w	r3, r7, #12
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f000 fc8f 	bl	800cd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3e6:	e314      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ec:	e311      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3ee:	4b6f      	ldr	r3, [pc, #444]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3f8:	4b6c      	ldr	r3, [pc, #432]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 0304 	and.w	r3, r3, #4
 800c400:	2b04      	cmp	r3, #4
 800c402:	d10c      	bne.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c406:	2b00      	cmp	r3, #0
 800c408:	d109      	bne.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c40a:	4b68      	ldr	r3, [pc, #416]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	08db      	lsrs	r3, r3, #3
 800c410:	f003 0303 	and.w	r3, r3, #3
 800c414:	4a66      	ldr	r2, [pc, #408]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c416:	fa22 f303 	lsr.w	r3, r2, r3
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c41c:	e01e      	b.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c41e:	4b63      	ldr	r3, [pc, #396]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c42a:	d106      	bne.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c432:	d102      	bne.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c434:	4b5f      	ldr	r3, [pc, #380]	; (800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c438:	e010      	b.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c43a:	4b5c      	ldr	r3, [pc, #368]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c446:	d106      	bne.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c44e:	d102      	bne.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c450:	4b59      	ldr	r3, [pc, #356]	; (800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c454:	e002      	b.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c456:	2300      	movs	r3, #0
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c45a:	e2da      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c45c:	e2d9      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c45e:	4b57      	ldr	r3, [pc, #348]	; (800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c462:	e2d6      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c468:	e2d3      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c46a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c46e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c472:	430b      	orrs	r3, r1
 800c474:	f040 80a7 	bne.w	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c478:	4b4c      	ldr	r3, [pc, #304]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c47a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c47c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c480:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c488:	d055      	beq.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c490:	f200 8096 	bhi.w	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c49a:	f000 8084 	beq.w	800c5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c4a4:	f200 808c 	bhi.w	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4ae:	d030      	beq.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4b6:	f200 8083 	bhi.w	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d004      	beq.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4c6:	d012      	beq.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c4c8:	e07a      	b.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4ca:	4b38      	ldr	r3, [pc, #224]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4d6:	d107      	bne.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 fd63 	bl	800cfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4e6:	e294      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ec:	e291      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4ee:	4b2f      	ldr	r3, [pc, #188]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4fa:	d107      	bne.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4fc:	f107 0318 	add.w	r3, r7, #24
 800c500:	4618      	mov	r0, r3
 800c502:	f000 faa9 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c50a:	e282      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c510:	e27f      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c512:	4b26      	ldr	r3, [pc, #152]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c51a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c51e:	d107      	bne.n	800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c520:	f107 030c 	add.w	r3, r7, #12
 800c524:	4618      	mov	r0, r3
 800c526:	f000 fbeb 	bl	800cd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c52e:	e270      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c530:	2300      	movs	r3, #0
 800c532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c534:	e26d      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c536:	4b1d      	ldr	r3, [pc, #116]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c53a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c53e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c540:	4b1a      	ldr	r3, [pc, #104]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f003 0304 	and.w	r3, r3, #4
 800c548:	2b04      	cmp	r3, #4
 800c54a:	d10c      	bne.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d109      	bne.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c552:	4b16      	ldr	r3, [pc, #88]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	08db      	lsrs	r3, r3, #3
 800c558:	f003 0303 	and.w	r3, r3, #3
 800c55c:	4a14      	ldr	r2, [pc, #80]	; (800c5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c55e:	fa22 f303 	lsr.w	r3, r2, r3
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c564:	e01e      	b.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c566:	4b11      	ldr	r3, [pc, #68]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c56e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c572:	d106      	bne.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c57a:	d102      	bne.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c57c:	4b0d      	ldr	r3, [pc, #52]	; (800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c580:	e010      	b.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c582:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c58a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c58e:	d106      	bne.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c596:	d102      	bne.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c598:	4b07      	ldr	r3, [pc, #28]	; (800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c59c:	e002      	b.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5a2:	e236      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c5a4:	e235      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5a6:	4b05      	ldr	r3, [pc, #20]	; (800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5aa:	e232      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c5ac:	58024400 	.word	0x58024400
 800c5b0:	03d09000 	.word	0x03d09000
 800c5b4:	003d0900 	.word	0x003d0900
 800c5b8:	02faf080 	.word	0x02faf080
 800c5bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c4:	e225      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c5c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5ca:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c5ce:	430b      	orrs	r3, r1
 800c5d0:	f040 8085 	bne.w	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c5d4:	4b9c      	ldr	r3, [pc, #624]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c5dc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5e4:	d06b      	beq.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5ec:	d874      	bhi.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5f4:	d056      	beq.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5fc:	d86c      	bhi.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c600:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c604:	d03b      	beq.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c60c:	d864      	bhi.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c614:	d021      	beq.n	800c65a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c61c:	d85c      	bhi.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c620:	2b00      	cmp	r3, #0
 800c622:	d004      	beq.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c62a:	d004      	beq.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c62c:	e054      	b.n	800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c62e:	f7fe fb5f 	bl	800acf0 <HAL_RCC_GetPCLK1Freq>
 800c632:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c634:	e1ed      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c636:	4b84      	ldr	r3, [pc, #528]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c63e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c642:	d107      	bne.n	800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c644:	f107 0318 	add.w	r3, r7, #24
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 fa05 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c652:	e1de      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c654:	2300      	movs	r3, #0
 800c656:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c658:	e1db      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c65a:	4b7b      	ldr	r3, [pc, #492]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c666:	d107      	bne.n	800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c668:	f107 030c 	add.w	r3, r7, #12
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 fb47 	bl	800cd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c676:	e1cc      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c67c:	e1c9      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c67e:	4b72      	ldr	r3, [pc, #456]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f003 0304 	and.w	r3, r3, #4
 800c686:	2b04      	cmp	r3, #4
 800c688:	d109      	bne.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c68a:	4b6f      	ldr	r3, [pc, #444]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	08db      	lsrs	r3, r3, #3
 800c690:	f003 0303 	and.w	r3, r3, #3
 800c694:	4a6d      	ldr	r2, [pc, #436]	; (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c696:	fa22 f303 	lsr.w	r3, r2, r3
 800c69a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c69c:	e1b9      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6a2:	e1b6      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c6a4:	4b68      	ldr	r3, [pc, #416]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6b0:	d102      	bne.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c6b2:	4b67      	ldr	r3, [pc, #412]	; (800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6b6:	e1ac      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6bc:	e1a9      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c6be:	4b62      	ldr	r3, [pc, #392]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6ca:	d102      	bne.n	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c6cc:	4b61      	ldr	r3, [pc, #388]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6d0:	e19f      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d6:	e19c      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6dc:	e199      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c6de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6e2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c6e6:	430b      	orrs	r3, r1
 800c6e8:	d173      	bne.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c6ea:	4b57      	ldr	r3, [pc, #348]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c6f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6fa:	d02f      	beq.n	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c702:	d863      	bhi.n	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	2b00      	cmp	r3, #0
 800c708:	d004      	beq.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c710:	d012      	beq.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c712:	e05b      	b.n	800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c714:	4b4c      	ldr	r3, [pc, #304]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c71c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c720:	d107      	bne.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c722:	f107 0318 	add.w	r3, r7, #24
 800c726:	4618      	mov	r0, r3
 800c728:	f000 f996 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c730:	e16f      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c732:	2300      	movs	r3, #0
 800c734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c736:	e16c      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c738:	4b43      	ldr	r3, [pc, #268]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c744:	d107      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c746:	f107 030c 	add.w	r3, r7, #12
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 fad8 	bl	800cd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c754:	e15d      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75a:	e15a      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c75c:	4b3a      	ldr	r3, [pc, #232]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c75e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c764:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c766:	4b38      	ldr	r3, [pc, #224]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 0304 	and.w	r3, r3, #4
 800c76e:	2b04      	cmp	r3, #4
 800c770:	d10c      	bne.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c774:	2b00      	cmp	r3, #0
 800c776:	d109      	bne.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c778:	4b33      	ldr	r3, [pc, #204]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	08db      	lsrs	r3, r3, #3
 800c77e:	f003 0303 	and.w	r3, r3, #3
 800c782:	4a32      	ldr	r2, [pc, #200]	; (800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c784:	fa22 f303 	lsr.w	r3, r2, r3
 800c788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c78a:	e01e      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c78c:	4b2e      	ldr	r3, [pc, #184]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c798:	d106      	bne.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c79c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7a0:	d102      	bne.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c7a2:	4b2b      	ldr	r3, [pc, #172]	; (800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7a6:	e010      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7a8:	4b27      	ldr	r3, [pc, #156]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7b4:	d106      	bne.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7bc:	d102      	bne.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c7be:	4b25      	ldr	r3, [pc, #148]	; (800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7c2:	e002      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c7c8:	e123      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c7ca:	e122      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7d0:	e11f      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7d6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c7da:	430b      	orrs	r3, r1
 800c7dc:	d13c      	bne.n	800c858 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c7de:	4b1a      	ldr	r3, [pc, #104]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d004      	beq.n	800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7f4:	d012      	beq.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c7f6:	e023      	b.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7f8:	4b13      	ldr	r3, [pc, #76]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c804:	d107      	bne.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 fbcc 	bl	800cfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c814:	e0fd      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c816:	2300      	movs	r3, #0
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c81a:	e0fa      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c81c:	4b0a      	ldr	r3, [pc, #40]	; (800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c828:	d107      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c82a:	f107 0318 	add.w	r3, r7, #24
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 f912 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c834:	6a3b      	ldr	r3, [r7, #32]
 800c836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c838:	e0eb      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83e:	e0e8      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c840:	2300      	movs	r3, #0
 800c842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c844:	e0e5      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c846:	bf00      	nop
 800c848:	58024400 	.word	0x58024400
 800c84c:	03d09000 	.word	0x03d09000
 800c850:	003d0900 	.word	0x003d0900
 800c854:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c85c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c860:	430b      	orrs	r3, r1
 800c862:	f040 8085 	bne.w	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c866:	4b6d      	ldr	r3, [pc, #436]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c86a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c86e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c876:	d06b      	beq.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c87e:	d874      	bhi.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c886:	d056      	beq.n	800c936 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c88e:	d86c      	bhi.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c892:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c896:	d03b      	beq.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c89e:	d864      	bhi.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8a6:	d021      	beq.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8ae:	d85c      	bhi.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d004      	beq.n	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8bc:	d004      	beq.n	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c8be:	e054      	b.n	800c96a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c8c0:	f000 f8b4 	bl	800ca2c <HAL_RCCEx_GetD3PCLK1Freq>
 800c8c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c8c6:	e0a4      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8c8:	4b54      	ldr	r3, [pc, #336]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8d4:	d107      	bne.n	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8d6:	f107 0318 	add.w	r3, r7, #24
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 f8bc 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8e4:	e095      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ea:	e092      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8ec:	4b4b      	ldr	r3, [pc, #300]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8f8:	d107      	bne.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8fa:	f107 030c 	add.w	r3, r7, #12
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 f9fe 	bl	800cd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c908:	e083      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c90e:	e080      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c910:	4b42      	ldr	r3, [pc, #264]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 0304 	and.w	r3, r3, #4
 800c918:	2b04      	cmp	r3, #4
 800c91a:	d109      	bne.n	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c91c:	4b3f      	ldr	r3, [pc, #252]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	08db      	lsrs	r3, r3, #3
 800c922:	f003 0303 	and.w	r3, r3, #3
 800c926:	4a3e      	ldr	r2, [pc, #248]	; (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c928:	fa22 f303 	lsr.w	r3, r2, r3
 800c92c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c92e:	e070      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c930:	2300      	movs	r3, #0
 800c932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c934:	e06d      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c936:	4b39      	ldr	r3, [pc, #228]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c93e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c942:	d102      	bne.n	800c94a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c944:	4b37      	ldr	r3, [pc, #220]	; (800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c948:	e063      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c94e:	e060      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c950:	4b32      	ldr	r3, [pc, #200]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c95c:	d102      	bne.n	800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c95e:	4b32      	ldr	r3, [pc, #200]	; (800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c960:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c962:	e056      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c964:	2300      	movs	r3, #0
 800c966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c968:	e053      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c96e:	e050      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c970:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c974:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c978:	430b      	orrs	r3, r1
 800c97a:	d148      	bne.n	800ca0e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c97c:	4b27      	ldr	r3, [pc, #156]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c97e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c984:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c98c:	d02a      	beq.n	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c994:	d838      	bhi.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d004      	beq.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9a2:	d00d      	beq.n	800c9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c9a4:	e030      	b.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c9a6:	4b1d      	ldr	r3, [pc, #116]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9b2:	d102      	bne.n	800c9ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c9b4:	4b1c      	ldr	r3, [pc, #112]	; (800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9b8:	e02b      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9be:	e028      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9c0:	4b16      	ldr	r3, [pc, #88]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9cc:	d107      	bne.n	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 fae8 	bl	800cfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9dc:	e019      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e2:	e016      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9e4:	4b0d      	ldr	r3, [pc, #52]	; (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9f0:	d107      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9f2:	f107 0318 	add.w	r3, r7, #24
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 f82e 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca00:	e007      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca06:	e004      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca0c:	e001      	b.n	800ca12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ca12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3740      	adds	r7, #64	; 0x40
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	58024400 	.word	0x58024400
 800ca20:	03d09000 	.word	0x03d09000
 800ca24:	003d0900 	.word	0x003d0900
 800ca28:	02faf080 	.word	0x02faf080

0800ca2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ca30:	f7fe f92e 	bl	800ac90 <HAL_RCC_GetHCLKFreq>
 800ca34:	4602      	mov	r2, r0
 800ca36:	4b06      	ldr	r3, [pc, #24]	; (800ca50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ca38:	6a1b      	ldr	r3, [r3, #32]
 800ca3a:	091b      	lsrs	r3, r3, #4
 800ca3c:	f003 0307 	and.w	r3, r3, #7
 800ca40:	4904      	ldr	r1, [pc, #16]	; (800ca54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ca42:	5ccb      	ldrb	r3, [r1, r3]
 800ca44:	f003 031f 	and.w	r3, r3, #31
 800ca48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	58024400 	.word	0x58024400
 800ca54:	0801c7a0 	.word	0x0801c7a0

0800ca58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b089      	sub	sp, #36	; 0x24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca60:	4ba1      	ldr	r3, [pc, #644]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca64:	f003 0303 	and.w	r3, r3, #3
 800ca68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ca6a:	4b9f      	ldr	r3, [pc, #636]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6e:	0b1b      	lsrs	r3, r3, #12
 800ca70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ca76:	4b9c      	ldr	r3, [pc, #624]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7a:	091b      	lsrs	r3, r3, #4
 800ca7c:	f003 0301 	and.w	r3, r3, #1
 800ca80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ca82:	4b99      	ldr	r3, [pc, #612]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca86:	08db      	lsrs	r3, r3, #3
 800ca88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca8c:	693a      	ldr	r2, [r7, #16]
 800ca8e:	fb02 f303 	mul.w	r3, r2, r3
 800ca92:	ee07 3a90 	vmov	s15, r3
 800ca96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 8111 	beq.w	800ccc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	2b02      	cmp	r3, #2
 800caaa:	f000 8083 	beq.w	800cbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	2b02      	cmp	r3, #2
 800cab2:	f200 80a1 	bhi.w	800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d003      	beq.n	800cac4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d056      	beq.n	800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cac2:	e099      	b.n	800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cac4:	4b88      	ldr	r3, [pc, #544]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f003 0320 	and.w	r3, r3, #32
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d02d      	beq.n	800cb2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cad0:	4b85      	ldr	r3, [pc, #532]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	08db      	lsrs	r3, r3, #3
 800cad6:	f003 0303 	and.w	r3, r3, #3
 800cada:	4a84      	ldr	r2, [pc, #528]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cadc:	fa22 f303 	lsr.w	r3, r2, r3
 800cae0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	ee07 3a90 	vmov	s15, r3
 800cae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	ee07 3a90 	vmov	s15, r3
 800caf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cafa:	4b7b      	ldr	r3, [pc, #492]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb02:	ee07 3a90 	vmov	s15, r3
 800cb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ccf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb2a:	e087      	b.n	800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	ee07 3a90 	vmov	s15, r3
 800cb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ccf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cb3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb3e:	4b6a      	ldr	r3, [pc, #424]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb46:	ee07 3a90 	vmov	s15, r3
 800cb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb52:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ccf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb6e:	e065      	b.n	800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	ee07 3a90 	vmov	s15, r3
 800cb76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ccf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb82:	4b59      	ldr	r3, [pc, #356]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb8a:	ee07 3a90 	vmov	s15, r3
 800cb8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb92:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb96:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ccf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbb2:	e043      	b.n	800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	ee07 3a90 	vmov	s15, r3
 800cbba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ccfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cbc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbc6:	4b48      	ldr	r3, [pc, #288]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbce:	ee07 3a90 	vmov	s15, r3
 800cbd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbda:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ccf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbf6:	e021      	b.n	800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	ee07 3a90 	vmov	s15, r3
 800cbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ccf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cc06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc0a:	4b37      	ldr	r3, [pc, #220]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc12:	ee07 3a90 	vmov	s15, r3
 800cc16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ccf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cc3c:	4b2a      	ldr	r3, [pc, #168]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc40:	0a5b      	lsrs	r3, r3, #9
 800cc42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc46:	ee07 3a90 	vmov	s15, r3
 800cc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc56:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc62:	ee17 2a90 	vmov	r2, s15
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cc6a:	4b1f      	ldr	r3, [pc, #124]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc6e:	0c1b      	lsrs	r3, r3, #16
 800cc70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc74:	ee07 3a90 	vmov	s15, r3
 800cc78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc84:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc90:	ee17 2a90 	vmov	r2, s15
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cc98:	4b13      	ldr	r3, [pc, #76]	; (800cce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc9c:	0e1b      	lsrs	r3, r3, #24
 800cc9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccbe:	ee17 2a90 	vmov	r2, s15
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ccc6:	e008      	b.n	800ccda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	609a      	str	r2, [r3, #8]
}
 800ccda:	bf00      	nop
 800ccdc:	3724      	adds	r7, #36	; 0x24
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	58024400 	.word	0x58024400
 800ccec:	03d09000 	.word	0x03d09000
 800ccf0:	46000000 	.word	0x46000000
 800ccf4:	4c742400 	.word	0x4c742400
 800ccf8:	4a742400 	.word	0x4a742400
 800ccfc:	4c3ebc20 	.word	0x4c3ebc20

0800cd00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b089      	sub	sp, #36	; 0x24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd08:	4ba1      	ldr	r3, [pc, #644]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0c:	f003 0303 	and.w	r3, r3, #3
 800cd10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cd12:	4b9f      	ldr	r3, [pc, #636]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd16:	0d1b      	lsrs	r3, r3, #20
 800cd18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cd1e:	4b9c      	ldr	r3, [pc, #624]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd22:	0a1b      	lsrs	r3, r3, #8
 800cd24:	f003 0301 	and.w	r3, r3, #1
 800cd28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cd2a:	4b99      	ldr	r3, [pc, #612]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd2e:	08db      	lsrs	r3, r3, #3
 800cd30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd34:	693a      	ldr	r2, [r7, #16]
 800cd36:	fb02 f303 	mul.w	r3, r2, r3
 800cd3a:	ee07 3a90 	vmov	s15, r3
 800cd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f000 8111 	beq.w	800cf70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	f000 8083 	beq.w	800ce5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	2b02      	cmp	r3, #2
 800cd5a:	f200 80a1 	bhi.w	800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d003      	beq.n	800cd6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d056      	beq.n	800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cd6a:	e099      	b.n	800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd6c:	4b88      	ldr	r3, [pc, #544]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f003 0320 	and.w	r3, r3, #32
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d02d      	beq.n	800cdd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd78:	4b85      	ldr	r3, [pc, #532]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	08db      	lsrs	r3, r3, #3
 800cd7e:	f003 0303 	and.w	r3, r3, #3
 800cd82:	4a84      	ldr	r2, [pc, #528]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cd84:	fa22 f303 	lsr.w	r3, r2, r3
 800cd88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	ee07 3a90 	vmov	s15, r3
 800cd90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	ee07 3a90 	vmov	s15, r3
 800cd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cda2:	4b7b      	ldr	r3, [pc, #492]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdaa:	ee07 3a90 	vmov	s15, r3
 800cdae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cdd2:	e087      	b.n	800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	ee07 3a90 	vmov	s15, r3
 800cdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cf9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cde2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cde6:	4b6a      	ldr	r3, [pc, #424]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdee:	ee07 3a90 	vmov	s15, r3
 800cdf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce16:	e065      	b.n	800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	ee07 3a90 	vmov	s15, r3
 800ce1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce2a:	4b59      	ldr	r3, [pc, #356]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce32:	ee07 3a90 	vmov	s15, r3
 800ce36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce5a:	e043      	b.n	800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	ee07 3a90 	vmov	s15, r3
 800ce62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ce6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce6e:	4b48      	ldr	r3, [pc, #288]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce76:	ee07 3a90 	vmov	s15, r3
 800ce7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce9e:	e021      	b.n	800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	ee07 3a90 	vmov	s15, r3
 800cea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ceae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceb2:	4b37      	ldr	r3, [pc, #220]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceba:	ee07 3a90 	vmov	s15, r3
 800cebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cec2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cec6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ceca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ced2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ced6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cee2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cee4:	4b2a      	ldr	r3, [pc, #168]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee8:	0a5b      	lsrs	r3, r3, #9
 800ceea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceee:	ee07 3a90 	vmov	s15, r3
 800cef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cefa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cefe:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf0a:	ee17 2a90 	vmov	r2, s15
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cf12:	4b1f      	ldr	r3, [pc, #124]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf16:	0c1b      	lsrs	r3, r3, #16
 800cf18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf1c:	ee07 3a90 	vmov	s15, r3
 800cf20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf38:	ee17 2a90 	vmov	r2, s15
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cf40:	4b13      	ldr	r3, [pc, #76]	; (800cf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf44:	0e1b      	lsrs	r3, r3, #24
 800cf46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf4a:	ee07 3a90 	vmov	s15, r3
 800cf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf66:	ee17 2a90 	vmov	r2, s15
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cf6e:	e008      	b.n	800cf82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	609a      	str	r2, [r3, #8]
}
 800cf82:	bf00      	nop
 800cf84:	3724      	adds	r7, #36	; 0x24
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	58024400 	.word	0x58024400
 800cf94:	03d09000 	.word	0x03d09000
 800cf98:	46000000 	.word	0x46000000
 800cf9c:	4c742400 	.word	0x4c742400
 800cfa0:	4a742400 	.word	0x4a742400
 800cfa4:	4c3ebc20 	.word	0x4c3ebc20

0800cfa8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b089      	sub	sp, #36	; 0x24
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfb0:	4ba0      	ldr	r3, [pc, #640]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb4:	f003 0303 	and.w	r3, r3, #3
 800cfb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cfba:	4b9e      	ldr	r3, [pc, #632]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfbe:	091b      	lsrs	r3, r3, #4
 800cfc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cfc6:	4b9b      	ldr	r3, [pc, #620]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cfd0:	4b98      	ldr	r3, [pc, #608]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfd4:	08db      	lsrs	r3, r3, #3
 800cfd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfda:	693a      	ldr	r2, [r7, #16]
 800cfdc:	fb02 f303 	mul.w	r3, r2, r3
 800cfe0:	ee07 3a90 	vmov	s15, r3
 800cfe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfe8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	f000 8111 	beq.w	800d216 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	2b02      	cmp	r3, #2
 800cff8:	f000 8083 	beq.w	800d102 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	2b02      	cmp	r3, #2
 800d000:	f200 80a1 	bhi.w	800d146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d003      	beq.n	800d012 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d056      	beq.n	800d0be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d010:	e099      	b.n	800d146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d012:	4b88      	ldr	r3, [pc, #544]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 0320 	and.w	r3, r3, #32
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d02d      	beq.n	800d07a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d01e:	4b85      	ldr	r3, [pc, #532]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	08db      	lsrs	r3, r3, #3
 800d024:	f003 0303 	and.w	r3, r3, #3
 800d028:	4a83      	ldr	r2, [pc, #524]	; (800d238 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d02a:	fa22 f303 	lsr.w	r3, r2, r3
 800d02e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	ee07 3a90 	vmov	s15, r3
 800d036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	ee07 3a90 	vmov	s15, r3
 800d040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d048:	4b7a      	ldr	r3, [pc, #488]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d04c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d050:	ee07 3a90 	vmov	s15, r3
 800d054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d058:	ed97 6a03 	vldr	s12, [r7, #12]
 800d05c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d06c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d070:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d074:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d078:	e087      	b.n	800d18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	ee07 3a90 	vmov	s15, r3
 800d080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d084:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d08c:	4b69      	ldr	r3, [pc, #420]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d094:	ee07 3a90 	vmov	s15, r3
 800d098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d09c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0bc:	e065      	b.n	800d18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	ee07 3a90 	vmov	s15, r3
 800d0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d244 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d0cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0d0:	4b58      	ldr	r3, [pc, #352]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0d8:	ee07 3a90 	vmov	s15, r3
 800d0dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d100:	e043      	b.n	800d18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	ee07 3a90 	vmov	s15, r3
 800d108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d248 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d114:	4b47      	ldr	r3, [pc, #284]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d11c:	ee07 3a90 	vmov	s15, r3
 800d120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d124:	ed97 6a03 	vldr	s12, [r7, #12]
 800d128:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d12c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d13c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d140:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d144:	e021      	b.n	800d18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	ee07 3a90 	vmov	s15, r3
 800d14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d150:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d158:	4b36      	ldr	r3, [pc, #216]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d160:	ee07 3a90 	vmov	s15, r3
 800d164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d168:	ed97 6a03 	vldr	s12, [r7, #12]
 800d16c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d17c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d184:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d188:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d18a:	4b2a      	ldr	r3, [pc, #168]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d18e:	0a5b      	lsrs	r3, r3, #9
 800d190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d194:	ee07 3a90 	vmov	s15, r3
 800d198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1b0:	ee17 2a90 	vmov	r2, s15
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d1b8:	4b1e      	ldr	r3, [pc, #120]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1bc:	0c1b      	lsrs	r3, r3, #16
 800d1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1c2:	ee07 3a90 	vmov	s15, r3
 800d1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1de:	ee17 2a90 	vmov	r2, s15
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d1e6:	4b13      	ldr	r3, [pc, #76]	; (800d234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ea:	0e1b      	lsrs	r3, r3, #24
 800d1ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1f0:	ee07 3a90 	vmov	s15, r3
 800d1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d200:	edd7 6a07 	vldr	s13, [r7, #28]
 800d204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d20c:	ee17 2a90 	vmov	r2, s15
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d214:	e008      	b.n	800d228 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	609a      	str	r2, [r3, #8]
}
 800d228:	bf00      	nop
 800d22a:	3724      	adds	r7, #36	; 0x24
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr
 800d234:	58024400 	.word	0x58024400
 800d238:	03d09000 	.word	0x03d09000
 800d23c:	46000000 	.word	0x46000000
 800d240:	4c742400 	.word	0x4c742400
 800d244:	4a742400 	.word	0x4a742400
 800d248:	4c3ebc20 	.word	0x4c3ebc20

0800d24c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d25a:	4b53      	ldr	r3, [pc, #332]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25e:	f003 0303 	and.w	r3, r3, #3
 800d262:	2b03      	cmp	r3, #3
 800d264:	d101      	bne.n	800d26a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d266:	2301      	movs	r3, #1
 800d268:	e099      	b.n	800d39e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d26a:	4b4f      	ldr	r3, [pc, #316]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4a4e      	ldr	r2, [pc, #312]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d270:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d276:	f7f7 fa91 	bl	800479c <HAL_GetTick>
 800d27a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d27c:	e008      	b.n	800d290 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d27e:	f7f7 fa8d 	bl	800479c <HAL_GetTick>
 800d282:	4602      	mov	r2, r0
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d901      	bls.n	800d290 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d28c:	2303      	movs	r3, #3
 800d28e:	e086      	b.n	800d39e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d290:	4b45      	ldr	r3, [pc, #276]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1f0      	bne.n	800d27e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d29c:	4b42      	ldr	r3, [pc, #264]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	031b      	lsls	r3, r3, #12
 800d2aa:	493f      	ldr	r1, [pc, #252]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	628b      	str	r3, [r1, #40]	; 0x28
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	025b      	lsls	r3, r3, #9
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	431a      	orrs	r2, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	041b      	lsls	r3, r3, #16
 800d2ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d2d2:	431a      	orrs	r2, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	691b      	ldr	r3, [r3, #16]
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	061b      	lsls	r3, r3, #24
 800d2dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d2e0:	4931      	ldr	r1, [pc, #196]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d2e6:	4b30      	ldr	r3, [pc, #192]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	492d      	ldr	r1, [pc, #180]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d2f8:	4b2b      	ldr	r3, [pc, #172]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fc:	f023 0220 	bic.w	r2, r3, #32
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	4928      	ldr	r1, [pc, #160]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d306:	4313      	orrs	r3, r2
 800d308:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d30a:	4b27      	ldr	r3, [pc, #156]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d30e:	4a26      	ldr	r2, [pc, #152]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d310:	f023 0310 	bic.w	r3, r3, #16
 800d314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d316:	4b24      	ldr	r3, [pc, #144]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d31a:	4b24      	ldr	r3, [pc, #144]	; (800d3ac <RCCEx_PLL2_Config+0x160>)
 800d31c:	4013      	ands	r3, r2
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	69d2      	ldr	r2, [r2, #28]
 800d322:	00d2      	lsls	r2, r2, #3
 800d324:	4920      	ldr	r1, [pc, #128]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d326:	4313      	orrs	r3, r2
 800d328:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d32a:	4b1f      	ldr	r3, [pc, #124]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32e:	4a1e      	ldr	r2, [pc, #120]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d330:	f043 0310 	orr.w	r3, r3, #16
 800d334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d106      	bne.n	800d34a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d33c:	4b1a      	ldr	r3, [pc, #104]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d340:	4a19      	ldr	r2, [pc, #100]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d346:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d348:	e00f      	b.n	800d36a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d106      	bne.n	800d35e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d350:	4b15      	ldr	r3, [pc, #84]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d354:	4a14      	ldr	r2, [pc, #80]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d35a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d35c:	e005      	b.n	800d36a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d35e:	4b12      	ldr	r3, [pc, #72]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d362:	4a11      	ldr	r2, [pc, #68]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d368:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d36a:	4b0f      	ldr	r3, [pc, #60]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a0e      	ldr	r2, [pc, #56]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d370:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d376:	f7f7 fa11 	bl	800479c <HAL_GetTick>
 800d37a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d37c:	e008      	b.n	800d390 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d37e:	f7f7 fa0d 	bl	800479c <HAL_GetTick>
 800d382:	4602      	mov	r2, r0
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d901      	bls.n	800d390 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d38c:	2303      	movs	r3, #3
 800d38e:	e006      	b.n	800d39e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d390:	4b05      	ldr	r3, [pc, #20]	; (800d3a8 <RCCEx_PLL2_Config+0x15c>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d0f0      	beq.n	800d37e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	58024400 	.word	0x58024400
 800d3ac:	ffff0007 	.word	0xffff0007

0800d3b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d3be:	4b53      	ldr	r3, [pc, #332]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c2:	f003 0303 	and.w	r3, r3, #3
 800d3c6:	2b03      	cmp	r3, #3
 800d3c8:	d101      	bne.n	800d3ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e099      	b.n	800d502 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d3ce:	4b4f      	ldr	r3, [pc, #316]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a4e      	ldr	r2, [pc, #312]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d3d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3da:	f7f7 f9df 	bl	800479c <HAL_GetTick>
 800d3de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d3e0:	e008      	b.n	800d3f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d3e2:	f7f7 f9db 	bl	800479c <HAL_GetTick>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d901      	bls.n	800d3f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d3f0:	2303      	movs	r3, #3
 800d3f2:	e086      	b.n	800d502 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d3f4:	4b45      	ldr	r3, [pc, #276]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d1f0      	bne.n	800d3e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d400:	4b42      	ldr	r3, [pc, #264]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d404:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	051b      	lsls	r3, r3, #20
 800d40e:	493f      	ldr	r1, [pc, #252]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d410:	4313      	orrs	r3, r2
 800d412:	628b      	str	r3, [r1, #40]	; 0x28
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	3b01      	subs	r3, #1
 800d41a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	3b01      	subs	r3, #1
 800d424:	025b      	lsls	r3, r3, #9
 800d426:	b29b      	uxth	r3, r3
 800d428:	431a      	orrs	r2, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	3b01      	subs	r3, #1
 800d430:	041b      	lsls	r3, r3, #16
 800d432:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d436:	431a      	orrs	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	691b      	ldr	r3, [r3, #16]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	061b      	lsls	r3, r3, #24
 800d440:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d444:	4931      	ldr	r1, [pc, #196]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d446:	4313      	orrs	r3, r2
 800d448:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d44a:	4b30      	ldr	r3, [pc, #192]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	695b      	ldr	r3, [r3, #20]
 800d456:	492d      	ldr	r1, [pc, #180]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d458:	4313      	orrs	r3, r2
 800d45a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d45c:	4b2b      	ldr	r3, [pc, #172]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d460:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	699b      	ldr	r3, [r3, #24]
 800d468:	4928      	ldr	r1, [pc, #160]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d46a:	4313      	orrs	r3, r2
 800d46c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d46e:	4b27      	ldr	r3, [pc, #156]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d472:	4a26      	ldr	r2, [pc, #152]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d478:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d47a:	4b24      	ldr	r3, [pc, #144]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d47c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d47e:	4b24      	ldr	r3, [pc, #144]	; (800d510 <RCCEx_PLL3_Config+0x160>)
 800d480:	4013      	ands	r3, r2
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	69d2      	ldr	r2, [r2, #28]
 800d486:	00d2      	lsls	r2, r2, #3
 800d488:	4920      	ldr	r1, [pc, #128]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d48a:	4313      	orrs	r3, r2
 800d48c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d48e:	4b1f      	ldr	r3, [pc, #124]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d492:	4a1e      	ldr	r2, [pc, #120]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d498:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d106      	bne.n	800d4ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d4a0:	4b1a      	ldr	r3, [pc, #104]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a4:	4a19      	ldr	r2, [pc, #100]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d4a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d4aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d4ac:	e00f      	b.n	800d4ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d106      	bne.n	800d4c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d4b4:	4b15      	ldr	r3, [pc, #84]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b8:	4a14      	ldr	r2, [pc, #80]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d4ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d4be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d4c0:	e005      	b.n	800d4ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d4c2:	4b12      	ldr	r3, [pc, #72]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c6:	4a11      	ldr	r2, [pc, #68]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d4c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d4cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d4ce:	4b0f      	ldr	r3, [pc, #60]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	4a0e      	ldr	r2, [pc, #56]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d4d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4da:	f7f7 f95f 	bl	800479c <HAL_GetTick>
 800d4de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d4e0:	e008      	b.n	800d4f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d4e2:	f7f7 f95b 	bl	800479c <HAL_GetTick>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	1ad3      	subs	r3, r2, r3
 800d4ec:	2b02      	cmp	r3, #2
 800d4ee:	d901      	bls.n	800d4f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d4f0:	2303      	movs	r3, #3
 800d4f2:	e006      	b.n	800d502 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d4f4:	4b05      	ldr	r3, [pc, #20]	; (800d50c <RCCEx_PLL3_Config+0x15c>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d0f0      	beq.n	800d4e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d500:	7bfb      	ldrb	r3, [r7, #15]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	58024400 	.word	0x58024400
 800d510:	ffff0007 	.word	0xffff0007

0800d514 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b08a      	sub	sp, #40	; 0x28
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	e075      	b.n	800d612 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d105      	bne.n	800d53e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2200      	movs	r2, #0
 800d536:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f7f6 f9c7 	bl	80038cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2204      	movs	r2, #4
 800d542:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 f868 	bl	800d61c <HAL_SD_InitCard>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d001      	beq.n	800d556 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d552:	2301      	movs	r3, #1
 800d554:	e05d      	b.n	800d612 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d556:	f107 0308 	add.w	r3, r7, #8
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fdaf 	bl	800e0c0 <HAL_SD_GetCardStatus>
 800d562:	4603      	mov	r3, r0
 800d564:	2b00      	cmp	r3, #0
 800d566:	d001      	beq.n	800d56c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d568:	2301      	movs	r3, #1
 800d56a:	e052      	b.n	800d612 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d56c:	7e3b      	ldrb	r3, [r7, #24]
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d572:	7e7b      	ldrb	r3, [r7, #25]
 800d574:	b2db      	uxtb	r3, r3
 800d576:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d10a      	bne.n	800d596 <HAL_SD_Init+0x82>
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d582:	2b00      	cmp	r3, #0
 800d584:	d102      	bne.n	800d58c <HAL_SD_Init+0x78>
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d004      	beq.n	800d596 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d592:	659a      	str	r2, [r3, #88]	; 0x58
 800d594:	e00b      	b.n	800d5ae <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d104      	bne.n	800d5a8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5a4:	659a      	str	r2, [r3, #88]	; 0x58
 800d5a6:	e002      	b.n	800d5ae <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 fe6d 	bl	800e294 <HAL_SD_ConfigWideBusOperation>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d001      	beq.n	800d5c4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e026      	b.n	800d612 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d5c4:	f7f7 f8ea 	bl	800479c <HAL_GetTick>
 800d5c8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d5ca:	e011      	b.n	800d5f0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d5cc:	f7f7 f8e6 	bl	800479c <HAL_GetTick>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	1ad3      	subs	r3, r2, r3
 800d5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5da:	d109      	bne.n	800d5f0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d5e2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e010      	b.n	800d612 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 ff61 	bl	800e4b8 <HAL_SD_GetCardState>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b04      	cmp	r3, #4
 800d5fa:	d1e7      	bne.n	800d5cc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	3728      	adds	r7, #40	; 0x28
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
	...

0800d61c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d61c:	b590      	push	{r4, r7, lr}
 800d61e:	b08d      	sub	sp, #52	; 0x34
 800d620:	af02      	add	r7, sp, #8
 800d622:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d624:	2300      	movs	r3, #0
 800d626:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d628:	2300      	movs	r3, #0
 800d62a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d62c:	2300      	movs	r3, #0
 800d62e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d630:	2300      	movs	r3, #0
 800d632:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d634:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d638:	f04f 0100 	mov.w	r1, #0
 800d63c:	f7fe fd24 	bl	800c088 <HAL_RCCEx_GetPeriphCLKFreq>
 800d640:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d644:	2b00      	cmp	r3, #0
 800d646:	d109      	bne.n	800d65c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d656:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d658:	2301      	movs	r3, #1
 800d65a:	e070      	b.n	800d73e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	0a1b      	lsrs	r3, r3, #8
 800d660:	4a39      	ldr	r2, [pc, #228]	; (800d748 <HAL_SD_InitCard+0x12c>)
 800d662:	fba2 2303 	umull	r2, r3, r2, r3
 800d666:	091b      	lsrs	r3, r3, #4
 800d668:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681c      	ldr	r4, [r3, #0]
 800d66e:	466a      	mov	r2, sp
 800d670:	f107 0318 	add.w	r3, r7, #24
 800d674:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d678:	e882 0003 	stmia.w	r2, {r0, r1}
 800d67c:	f107 030c 	add.w	r3, r7, #12
 800d680:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d682:	4620      	mov	r0, r4
 800d684:	f004 fc28 	bl	8011ed8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4618      	mov	r0, r3
 800d68e:	f004 fc6b 	bl	8011f68 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d005      	beq.n	800d6a4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	005b      	lsls	r3, r3, #1
 800d69c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6a2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d007      	beq.n	800d6ba <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d6aa:	4a28      	ldr	r2, [pc, #160]	; (800d74c <HAL_SD_InitCard+0x130>)
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7f7 f87d 	bl	80047b4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 ffea 	bl	800e694 <SD_PowerON>
 800d6c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00b      	beq.n	800d6e0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6d4:	6a3b      	ldr	r3, [r7, #32]
 800d6d6:	431a      	orrs	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e02e      	b.n	800d73e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 ff09 	bl	800e4f8 <SD_InitCard>
 800d6e6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6e8:	6a3b      	ldr	r3, [r7, #32]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00b      	beq.n	800d706 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	431a      	orrs	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d702:	2301      	movs	r3, #1
 800d704:	e01b      	b.n	800d73e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d70e:	4618      	mov	r0, r3
 800d710:	f004 fcc0 	bl	8012094 <SDMMC_CmdBlockLength>
 800d714:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d716:	6a3b      	ldr	r3, [r7, #32]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00f      	beq.n	800d73c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a0b      	ldr	r2, [pc, #44]	; (800d750 <HAL_SD_InitCard+0x134>)
 800d722:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d728:	6a3b      	ldr	r3, [r7, #32]
 800d72a:	431a      	orrs	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2201      	movs	r2, #1
 800d734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d738:	2301      	movs	r3, #1
 800d73a:	e000      	b.n	800d73e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	372c      	adds	r7, #44	; 0x2c
 800d742:	46bd      	mov	sp, r7
 800d744:	bd90      	pop	{r4, r7, pc}
 800d746:	bf00      	nop
 800d748:	014f8b59 	.word	0x014f8b59
 800d74c:	00012110 	.word	0x00012110
 800d750:	1fe00fff 	.word	0x1fe00fff

0800d754 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b08c      	sub	sp, #48	; 0x30
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d107      	bne.n	800d77c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d770:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d778:	2301      	movs	r3, #1
 800d77a:	e08d      	b.n	800d898 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d782:	b2db      	uxtb	r3, r3
 800d784:	2b01      	cmp	r3, #1
 800d786:	f040 8086 	bne.w	800d896 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2200      	movs	r2, #0
 800d78e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	441a      	add	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d907      	bls.n	800d7ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	e074      	b.n	800d898 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2203      	movs	r2, #3
 800d7b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	68ba      	ldr	r2, [r7, #8]
 800d7c2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	025a      	lsls	r2, r3, #9
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d002      	beq.n	800d7da <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d6:	025b      	lsls	r3, r3, #9
 800d7d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d7da:	f04f 33ff 	mov.w	r3, #4294967295
 800d7de:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	025b      	lsls	r3, r3, #9
 800d7e4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d7e6:	2390      	movs	r3, #144	; 0x90
 800d7e8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d7ea:	2302      	movs	r3, #2
 800d7ec:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f107 0210 	add.w	r2, r7, #16
 800d7fe:	4611      	mov	r1, r2
 800d800:	4618      	mov	r0, r3
 800d802:	f004 fc1b 	bl	801203c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	68da      	ldr	r2, [r3, #12]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d814:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68ba      	ldr	r2, [r7, #8]
 800d81c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2201      	movs	r2, #1
 800d824:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d90a      	bls.n	800d842 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2282      	movs	r2, #130	; 0x82
 800d830:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d838:	4618      	mov	r0, r3
 800d83a:	f004 fc71 	bl	8012120 <SDMMC_CmdReadMultiBlock>
 800d83e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d840:	e009      	b.n	800d856 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2281      	movs	r2, #129	; 0x81
 800d846:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d84e:	4618      	mov	r0, r3
 800d850:	f004 fc43 	bl	80120da <SDMMC_CmdReadSingleBlock>
 800d854:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d012      	beq.n	800d882 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a0f      	ldr	r2, [pc, #60]	; (800d8a0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d862:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86a:	431a      	orrs	r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2200      	movs	r2, #0
 800d87c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	e00a      	b.n	800d898 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d890:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	e000      	b.n	800d898 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d896:	2302      	movs	r3, #2
  }
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3730      	adds	r7, #48	; 0x30
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	1fe00fff 	.word	0x1fe00fff

0800d8a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b08c      	sub	sp, #48	; 0x30
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
 800d8b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d107      	bne.n	800d8cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	e08d      	b.n	800d9e8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	f040 8086 	bne.w	800d9e6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d8e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	441a      	add	r2, r3
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d907      	bls.n	800d8fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e074      	b.n	800d9e8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2203      	movs	r2, #3
 800d902:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2200      	movs	r2, #0
 800d90c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	025a      	lsls	r2, r3, #9
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d920:	2b01      	cmp	r3, #1
 800d922:	d002      	beq.n	800d92a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d926:	025b      	lsls	r3, r3, #9
 800d928:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d92a:	f04f 33ff 	mov.w	r3, #4294967295
 800d92e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	025b      	lsls	r3, r3, #9
 800d934:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d936:	2390      	movs	r3, #144	; 0x90
 800d938:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d93a:	2300      	movs	r3, #0
 800d93c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d93e:	2300      	movs	r3, #0
 800d940:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d942:	2300      	movs	r3, #0
 800d944:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f107 0210 	add.w	r2, r7, #16
 800d94e:	4611      	mov	r1, r2
 800d950:	4618      	mov	r0, r3
 800d952:	f004 fb73 	bl	801203c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	68da      	ldr	r2, [r3, #12]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d964:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2201      	movs	r2, #1
 800d974:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d90a      	bls.n	800d992 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	22a0      	movs	r2, #160	; 0xa0
 800d980:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d988:	4618      	mov	r0, r3
 800d98a:	f004 fc0f 	bl	80121ac <SDMMC_CmdWriteMultiBlock>
 800d98e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d990:	e009      	b.n	800d9a6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2290      	movs	r2, #144	; 0x90
 800d996:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f004 fbe1 	bl	8012166 <SDMMC_CmdWriteSingleBlock>
 800d9a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d012      	beq.n	800d9d2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a0f      	ldr	r2, [pc, #60]	; (800d9f0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d9b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ba:	431a      	orrs	r2, r3
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e00a      	b.n	800d9e8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d9e0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e000      	b.n	800d9e8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d9e6:	2302      	movs	r3, #2
  }
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3730      	adds	r7, #48	; 0x30
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	1fe00fff 	.word	0x1fe00fff

0800d9f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da00:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d008      	beq.n	800da22 <HAL_SD_IRQHandler+0x2e>
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f003 0308 	and.w	r3, r3, #8
 800da16:	2b00      	cmp	r3, #0
 800da18:	d003      	beq.n	800da22 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f001 f926 	bl	800ec6c <SD_Read_IT>
 800da20:	e19a      	b.n	800dd58 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	f000 80ac 	beq.w	800db8a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f44f 7280 	mov.w	r2, #256	; 0x100
 800da3a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	4b59      	ldr	r3, [pc, #356]	; (800dbac <HAL_SD_IRQHandler+0x1b8>)
 800da48:	400b      	ands	r3, r1
 800da4a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800da5a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68da      	ldr	r2, [r3, #12]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da6a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f003 0308 	and.w	r3, r3, #8
 800da72:	2b00      	cmp	r3, #0
 800da74:	d038      	beq.n	800dae8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	f003 0302 	and.w	r3, r3, #2
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d104      	bne.n	800da8a <HAL_SD_IRQHandler+0x96>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f003 0320 	and.w	r3, r3, #32
 800da86:	2b00      	cmp	r3, #0
 800da88:	d011      	beq.n	800daae <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4618      	mov	r0, r3
 800da90:	f004 fbb0 	bl	80121f4 <SDMMC_CmdStopTransfer>
 800da94:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d008      	beq.n	800daae <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	431a      	orrs	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 f95b 	bl	800dd64 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a3f      	ldr	r2, [pc, #252]	; (800dbb0 <HAL_SD_IRQHandler+0x1bc>)
 800dab4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d104      	bne.n	800dad8 <HAL_SD_IRQHandler+0xe4>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f003 0302 	and.w	r3, r3, #2
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d003      	beq.n	800dae0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f006 fbb1 	bl	8014240 <HAL_SD_RxCpltCallback>
 800dade:	e13b      	b.n	800dd58 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f006 fba3 	bl	801422c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dae6:	e137      	b.n	800dd58 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f000 8132 	beq.w	800dd58 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2200      	movs	r2, #0
 800dafa:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2200      	movs	r2, #0
 800db02:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2200      	movs	r2, #0
 800db0a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f003 0302 	and.w	r3, r3, #2
 800db12:	2b00      	cmp	r3, #0
 800db14:	d104      	bne.n	800db20 <HAL_SD_IRQHandler+0x12c>
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f003 0320 	and.w	r3, r3, #32
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d011      	beq.n	800db44 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4618      	mov	r0, r3
 800db26:	f004 fb65 	bl	80121f4 <SDMMC_CmdStopTransfer>
 800db2a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d008      	beq.n	800db44 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	431a      	orrs	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f910 	bl	800dd64 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2201      	movs	r2, #1
 800db48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2200      	movs	r2, #0
 800db50:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f003 0310 	and.w	r3, r3, #16
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d104      	bne.n	800db66 <HAL_SD_IRQHandler+0x172>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f003 0320 	and.w	r3, r3, #32
 800db62:	2b00      	cmp	r3, #0
 800db64:	d002      	beq.n	800db6c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f006 fb60 	bl	801422c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	2b00      	cmp	r3, #0
 800db74:	d105      	bne.n	800db82 <HAL_SD_IRQHandler+0x18e>
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f003 0302 	and.w	r3, r3, #2
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f000 80eb 	beq.w	800dd58 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f006 fb5c 	bl	8014240 <HAL_SD_RxCpltCallback>
}
 800db88:	e0e6      	b.n	800dd58 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00d      	beq.n	800dbb4 <HAL_SD_IRQHandler+0x1c0>
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f003 0308 	and.w	r3, r3, #8
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d008      	beq.n	800dbb4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f001 f8a8 	bl	800ecf8 <SD_Write_IT>
 800dba8:	e0d6      	b.n	800dd58 <HAL_SD_IRQHandler+0x364>
 800dbaa:	bf00      	nop
 800dbac:	ffff3ec5 	.word	0xffff3ec5
 800dbb0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbba:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f000 809d 	beq.w	800dcfe <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbca:	f003 0302 	and.w	r3, r3, #2
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d005      	beq.n	800dbde <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbd6:	f043 0202 	orr.w	r2, r3, #2
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe4:	f003 0308 	and.w	r3, r3, #8
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d005      	beq.n	800dbf8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbf0:	f043 0208 	orr.w	r2, r3, #8
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbfe:	f003 0320 	and.w	r3, r3, #32
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d005      	beq.n	800dc12 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc0a:	f043 0220 	orr.w	r2, r3, #32
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc18:	f003 0310 	and.w	r3, r3, #16
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d005      	beq.n	800dc2c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc24:	f043 0210 	orr.w	r2, r3, #16
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a4b      	ldr	r2, [pc, #300]	; (800dd60 <HAL_SD_IRQHandler+0x36c>)
 800dc32:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dc42:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	68da      	ldr	r2, [r3, #12]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc52:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dc62:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68da      	ldr	r2, [r3, #12]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dc72:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f004 fabb 	bl	80121f4 <SDMMC_CmdStopTransfer>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc84:	431a      	orrs	r2, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	68da      	ldr	r2, [r3, #12]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc98:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dca2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f003 0308 	and.w	r3, r3, #8
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d00a      	beq.n	800dcc4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 f851 	bl	800dd64 <HAL_SD_ErrorCallback>
}
 800dcc2:	e049      	b.n	800dd58 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d044      	beq.n	800dd58 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d040      	beq.n	800dd58 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dce4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2200      	movs	r2, #0
 800dcec:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f834 	bl	800dd64 <HAL_SD_ErrorCallback>
}
 800dcfc:	e02c      	b.n	800dd58 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d025      	beq.n	800dd58 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd14:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd1c:	f003 0304 	and.w	r3, r3, #4
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10c      	bne.n	800dd3e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f003 0320 	and.w	r3, r3, #32
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d003      	beq.n	800dd36 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f001 f84a 	bl	800edc8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800dd34:	e010      	b.n	800dd58 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f001 f832 	bl	800eda0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dd3c:	e00c      	b.n	800dd58 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f003 0320 	and.w	r3, r3, #32
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d003      	beq.n	800dd50 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f001 f833 	bl	800edb4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800dd4e:	e003      	b.n	800dd58 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f001 f81b 	bl	800ed8c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800dd56:	e7ff      	b.n	800dd58 <HAL_SD_IRQHandler+0x364>
 800dd58:	bf00      	nop
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	18000f3a 	.word	0x18000f3a

0800dd64 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b083      	sub	sp, #12
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dd6c:	bf00      	nop
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd86:	0f9b      	lsrs	r3, r3, #30
 800dd88:	b2da      	uxtb	r2, r3
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd92:	0e9b      	lsrs	r3, r3, #26
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	f003 030f 	and.w	r3, r3, #15
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dda4:	0e1b      	lsrs	r3, r3, #24
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	f003 0303 	and.w	r3, r3, #3
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddb6:	0c1b      	lsrs	r3, r3, #16
 800ddb8:	b2da      	uxtb	r2, r3
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddc2:	0a1b      	lsrs	r3, r3, #8
 800ddc4:	b2da      	uxtb	r2, r3
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddd8:	0d1b      	lsrs	r3, r3, #20
 800ddda:	b29a      	uxth	r2, r3
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dde4:	0c1b      	lsrs	r3, r3, #16
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	f003 030f 	and.w	r3, r3, #15
 800ddec:	b2da      	uxtb	r2, r3
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddf6:	0bdb      	lsrs	r3, r3, #15
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	f003 0301 	and.w	r3, r3, #1
 800ddfe:	b2da      	uxtb	r2, r3
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de08:	0b9b      	lsrs	r3, r3, #14
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	f003 0301 	and.w	r3, r3, #1
 800de10:	b2da      	uxtb	r2, r3
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de1a:	0b5b      	lsrs	r3, r3, #13
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	f003 0301 	and.w	r3, r3, #1
 800de22:	b2da      	uxtb	r2, r3
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de2c:	0b1b      	lsrs	r3, r3, #12
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	b2da      	uxtb	r2, r3
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	2200      	movs	r2, #0
 800de3e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de44:	2b00      	cmp	r3, #0
 800de46:	d163      	bne.n	800df10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de4c:	009a      	lsls	r2, r3, #2
 800de4e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800de52:	4013      	ands	r3, r2
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800de58:	0f92      	lsrs	r2, r2, #30
 800de5a:	431a      	orrs	r2, r3
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de64:	0edb      	lsrs	r3, r3, #27
 800de66:	b2db      	uxtb	r3, r3
 800de68:	f003 0307 	and.w	r3, r3, #7
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de76:	0e1b      	lsrs	r3, r3, #24
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	f003 0307 	and.w	r3, r3, #7
 800de7e:	b2da      	uxtb	r2, r3
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de88:	0d5b      	lsrs	r3, r3, #21
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	f003 0307 	and.w	r3, r3, #7
 800de90:	b2da      	uxtb	r2, r3
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de9a:	0c9b      	lsrs	r3, r3, #18
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	f003 0307 	and.w	r3, r3, #7
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deac:	0bdb      	lsrs	r3, r3, #15
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	f003 0307 	and.w	r3, r3, #7
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	1c5a      	adds	r2, r3, #1
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	7e1b      	ldrb	r3, [r3, #24]
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	f003 0307 	and.w	r3, r3, #7
 800dece:	3302      	adds	r3, #2
 800ded0:	2201      	movs	r2, #1
 800ded2:	fa02 f303 	lsl.w	r3, r2, r3
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800deda:	fb03 f202 	mul.w	r2, r3, r2
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	7a1b      	ldrb	r3, [r3, #8]
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	f003 030f 	and.w	r3, r3, #15
 800deec:	2201      	movs	r2, #1
 800deee:	409a      	lsls	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800defc:	0a52      	lsrs	r2, r2, #9
 800defe:	fb03 f202 	mul.w	r2, r3, r2
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df0c:	655a      	str	r2, [r3, #84]	; 0x54
 800df0e:	e031      	b.n	800df74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df14:	2b01      	cmp	r3, #1
 800df16:	d11d      	bne.n	800df54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df1c:	041b      	lsls	r3, r3, #16
 800df1e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df26:	0c1b      	lsrs	r3, r3, #16
 800df28:	431a      	orrs	r2, r3
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	691b      	ldr	r3, [r3, #16]
 800df32:	3301      	adds	r3, #1
 800df34:	029a      	lsls	r2, r3, #10
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df48:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	655a      	str	r2, [r3, #84]	; 0x54
 800df52:	e00f      	b.n	800df74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a58      	ldr	r2, [pc, #352]	; (800e0bc <HAL_SD_GetCardCSD+0x344>)
 800df5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2201      	movs	r2, #1
 800df6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800df70:	2301      	movs	r3, #1
 800df72:	e09d      	b.n	800e0b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df78:	0b9b      	lsrs	r3, r3, #14
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	f003 0301 	and.w	r3, r3, #1
 800df80:	b2da      	uxtb	r2, r3
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df8a:	09db      	lsrs	r3, r3, #7
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df92:	b2da      	uxtb	r2, r3
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfa2:	b2da      	uxtb	r2, r3
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfac:	0fdb      	lsrs	r3, r3, #31
 800dfae:	b2da      	uxtb	r2, r3
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfb8:	0f5b      	lsrs	r3, r3, #29
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	f003 0303 	and.w	r3, r3, #3
 800dfc0:	b2da      	uxtb	r2, r3
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfca:	0e9b      	lsrs	r3, r3, #26
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	f003 0307 	and.w	r3, r3, #7
 800dfd2:	b2da      	uxtb	r2, r3
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfdc:	0d9b      	lsrs	r3, r3, #22
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	f003 030f 	and.w	r3, r3, #15
 800dfe4:	b2da      	uxtb	r2, r3
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfee:	0d5b      	lsrs	r3, r3, #21
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	f003 0301 	and.w	r3, r3, #1
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	2200      	movs	r2, #0
 800e002:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e00a:	0c1b      	lsrs	r3, r3, #16
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	f003 0301 	and.w	r3, r3, #1
 800e012:	b2da      	uxtb	r2, r3
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e01e:	0bdb      	lsrs	r3, r3, #15
 800e020:	b2db      	uxtb	r3, r3
 800e022:	f003 0301 	and.w	r3, r3, #1
 800e026:	b2da      	uxtb	r2, r3
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e032:	0b9b      	lsrs	r3, r3, #14
 800e034:	b2db      	uxtb	r3, r3
 800e036:	f003 0301 	and.w	r3, r3, #1
 800e03a:	b2da      	uxtb	r2, r3
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e046:	0b5b      	lsrs	r3, r3, #13
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	f003 0301 	and.w	r3, r3, #1
 800e04e:	b2da      	uxtb	r2, r3
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e05a:	0b1b      	lsrs	r3, r3, #12
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	f003 0301 	and.w	r3, r3, #1
 800e062:	b2da      	uxtb	r2, r3
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e06e:	0a9b      	lsrs	r3, r3, #10
 800e070:	b2db      	uxtb	r3, r3
 800e072:	f003 0303 	and.w	r3, r3, #3
 800e076:	b2da      	uxtb	r2, r3
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e082:	0a1b      	lsrs	r3, r3, #8
 800e084:	b2db      	uxtb	r3, r3
 800e086:	f003 0303 	and.w	r3, r3, #3
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e096:	085b      	lsrs	r3, r3, #1
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr
 800e0bc:	1fe00fff 	.word	0x1fe00fff

0800e0c0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b094      	sub	sp, #80	; 0x50
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	2b03      	cmp	r3, #3
 800e0da:	d101      	bne.n	800e0e0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	e0a7      	b.n	800e230 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e0e0:	f107 0308 	add.w	r3, r7, #8
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 fb62 	bl	800e7b0 <SD_SendSDStatus>
 800e0ec:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d011      	beq.n	800e118 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4a4f      	ldr	r2, [pc, #316]	; (800e238 <HAL_SD_GetCardStatus+0x178>)
 800e0fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e102:	431a      	orrs	r2, r3
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2201      	movs	r2, #1
 800e10c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e116:	e070      	b.n	800e1fa <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	099b      	lsrs	r3, r3, #6
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	f003 0303 	and.w	r3, r3, #3
 800e122:	b2da      	uxtb	r2, r3
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	095b      	lsrs	r3, r3, #5
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	f003 0301 	and.w	r3, r3, #1
 800e132:	b2da      	uxtb	r2, r3
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	0a1b      	lsrs	r3, r3, #8
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e142:	b29a      	uxth	r2, r3
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	0e1b      	lsrs	r3, r3, #24
 800e148:	b29b      	uxth	r3, r3
 800e14a:	4313      	orrs	r3, r2
 800e14c:	b29a      	uxth	r2, r3
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	061a      	lsls	r2, r3, #24
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	021b      	lsls	r3, r3, #8
 800e15a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e15e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	0a1b      	lsrs	r3, r3, #8
 800e164:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e168:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	0e1b      	lsrs	r3, r3, #24
 800e16e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	b2da      	uxtb	r2, r3
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	0a1b      	lsrs	r3, r3, #8
 800e180:	b2da      	uxtb	r2, r3
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	0d1b      	lsrs	r3, r3, #20
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	f003 030f 	and.w	r3, r3, #15
 800e190:	b2da      	uxtb	r2, r3
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	0c1b      	lsrs	r3, r3, #16
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	b29a      	uxth	r2, r3
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	0a9b      	lsrs	r3, r3, #10
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1bc:	b2da      	uxtb	r2, r3
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	0a1b      	lsrs	r3, r3, #8
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	f003 0303 	and.w	r3, r3, #3
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	091b      	lsrs	r3, r3, #4
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	f003 030f 	and.w	r3, r3, #15
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	f003 030f 	and.w	r3, r3, #15
 800e1ea:	b2da      	uxtb	r2, r3
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	0e1b      	lsrs	r3, r3, #24
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e202:	4618      	mov	r0, r3
 800e204:	f003 ff46 	bl	8012094 <SDMMC_CmdBlockLength>
 800e208:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e20a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d00d      	beq.n	800e22c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a08      	ldr	r2, [pc, #32]	; (800e238 <HAL_SD_GetCardStatus+0x178>)
 800e216:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e21c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e226:	2301      	movs	r3, #1
 800e228:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e22c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e230:	4618      	mov	r0, r3
 800e232:	3750      	adds	r7, #80	; 0x50
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	1fe00fff 	.word	0x1fe00fff

0800e23c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e294:	b590      	push	{r4, r7, lr}
 800e296:	b08d      	sub	sp, #52	; 0x34
 800e298:	af02      	add	r7, sp, #8
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2203      	movs	r2, #3
 800e2a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b0:	2b03      	cmp	r3, #3
 800e2b2:	d02e      	beq.n	800e312 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2ba:	d106      	bne.n	800e2ca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	635a      	str	r2, [r3, #52]	; 0x34
 800e2c8:	e029      	b.n	800e31e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2d0:	d10a      	bne.n	800e2e8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fb64 	bl	800e9a0 <SD_WideBus_Enable>
 800e2d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2de:	6a3b      	ldr	r3, [r7, #32]
 800e2e0:	431a      	orrs	r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	635a      	str	r2, [r3, #52]	; 0x34
 800e2e6:	e01a      	b.n	800e31e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10a      	bne.n	800e304 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 fba1 	bl	800ea36 <SD_WideBus_Disable>
 800e2f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2fa:	6a3b      	ldr	r3, [r7, #32]
 800e2fc:	431a      	orrs	r2, r3
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	635a      	str	r2, [r3, #52]	; 0x34
 800e302:	e00c      	b.n	800e31e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e308:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	635a      	str	r2, [r3, #52]	; 0x34
 800e310:	e005      	b.n	800e31e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e316:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e322:	2b00      	cmp	r3, #0
 800e324:	d007      	beq.n	800e336 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4a5f      	ldr	r2, [pc, #380]	; (800e4a8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e32c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e334:	e096      	b.n	800e464 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e336:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e33a:	f04f 0100 	mov.w	r1, #0
 800e33e:	f7fd fea3 	bl	800c088 <HAL_RCCEx_GetPeriphCLKFreq>
 800e342:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	2b00      	cmp	r3, #0
 800e348:	f000 8083 	beq.w	800e452 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	695a      	ldr	r2, [r3, #20]
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	4950      	ldr	r1, [pc, #320]	; (800e4ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800e36a:	fba1 1303 	umull	r1, r3, r1, r3
 800e36e:	0e1b      	lsrs	r3, r3, #24
 800e370:	429a      	cmp	r2, r3
 800e372:	d303      	bcc.n	800e37c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	61bb      	str	r3, [r7, #24]
 800e37a:	e05a      	b.n	800e432 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e384:	d103      	bne.n	800e38e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	695b      	ldr	r3, [r3, #20]
 800e38a:	61bb      	str	r3, [r7, #24]
 800e38c:	e051      	b.n	800e432 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e396:	d126      	bne.n	800e3e6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	695b      	ldr	r3, [r3, #20]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d10e      	bne.n	800e3be <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	4a43      	ldr	r2, [pc, #268]	; (800e4b0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d906      	bls.n	800e3b6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	4a40      	ldr	r2, [pc, #256]	; (800e4ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800e3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800e3b0:	0e5b      	lsrs	r3, r3, #25
 800e3b2:	61bb      	str	r3, [r7, #24]
 800e3b4:	e03d      	b.n	800e432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	695b      	ldr	r3, [r3, #20]
 800e3ba:	61bb      	str	r3, [r7, #24]
 800e3bc:	e039      	b.n	800e432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	695b      	ldr	r3, [r3, #20]
 800e3c2:	005b      	lsls	r3, r3, #1
 800e3c4:	69fa      	ldr	r2, [r7, #28]
 800e3c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3ca:	4a39      	ldr	r2, [pc, #228]	; (800e4b0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d906      	bls.n	800e3de <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	4a36      	ldr	r2, [pc, #216]	; (800e4ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800e3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e3d8:	0e5b      	lsrs	r3, r3, #25
 800e3da:	61bb      	str	r3, [r7, #24]
 800e3dc:	e029      	b.n	800e432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	695b      	ldr	r3, [r3, #20]
 800e3e2:	61bb      	str	r3, [r7, #24]
 800e3e4:	e025      	b.n	800e432 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	695b      	ldr	r3, [r3, #20]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d10e      	bne.n	800e40c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	4a30      	ldr	r2, [pc, #192]	; (800e4b4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d906      	bls.n	800e404 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	4a2c      	ldr	r2, [pc, #176]	; (800e4ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800e3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e3fe:	0e1b      	lsrs	r3, r3, #24
 800e400:	61bb      	str	r3, [r7, #24]
 800e402:	e016      	b.n	800e432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	695b      	ldr	r3, [r3, #20]
 800e408:	61bb      	str	r3, [r7, #24]
 800e40a:	e012      	b.n	800e432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	695b      	ldr	r3, [r3, #20]
 800e410:	005b      	lsls	r3, r3, #1
 800e412:	69fa      	ldr	r2, [r7, #28]
 800e414:	fbb2 f3f3 	udiv	r3, r2, r3
 800e418:	4a26      	ldr	r2, [pc, #152]	; (800e4b4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d906      	bls.n	800e42c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	4a22      	ldr	r2, [pc, #136]	; (800e4ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800e422:	fba2 2303 	umull	r2, r3, r2, r3
 800e426:	0e1b      	lsrs	r3, r3, #24
 800e428:	61bb      	str	r3, [r7, #24]
 800e42a:	e002      	b.n	800e432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	695b      	ldr	r3, [r3, #20]
 800e430:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681c      	ldr	r4, [r3, #0]
 800e436:	466a      	mov	r2, sp
 800e438:	f107 0314 	add.w	r3, r7, #20
 800e43c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e440:	e882 0003 	stmia.w	r2, {r0, r1}
 800e444:	f107 0308 	add.w	r3, r7, #8
 800e448:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e44a:	4620      	mov	r0, r4
 800e44c:	f003 fd44 	bl	8011ed8 <SDMMC_Init>
 800e450:	e008      	b.n	800e464 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e456:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e46c:	4618      	mov	r0, r3
 800e46e:	f003 fe11 	bl	8012094 <SDMMC_CmdBlockLength>
 800e472:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e474:	6a3b      	ldr	r3, [r7, #32]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00c      	beq.n	800e494 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	4a0a      	ldr	r2, [pc, #40]	; (800e4a8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e480:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e486:	6a3b      	ldr	r3, [r7, #32]
 800e488:	431a      	orrs	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e48e:	2301      	movs	r3, #1
 800e490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	372c      	adds	r7, #44	; 0x2c
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd90      	pop	{r4, r7, pc}
 800e4a8:	1fe00fff 	.word	0x1fe00fff
 800e4ac:	55e63b89 	.word	0x55e63b89
 800e4b0:	02faf080 	.word	0x02faf080
 800e4b4:	017d7840 	.word	0x017d7840

0800e4b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b086      	sub	sp, #24
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e4c4:	f107 030c 	add.w	r3, r7, #12
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f000 fa40 	bl	800e950 <SD_SendStatus>
 800e4d0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d005      	beq.n	800e4e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	431a      	orrs	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	0a5b      	lsrs	r3, r3, #9
 800e4e8:	f003 030f 	and.w	r3, r3, #15
 800e4ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e4ee:	693b      	ldr	r3, [r7, #16]
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3718      	adds	r7, #24
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b090      	sub	sp, #64	; 0x40
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e500:	2300      	movs	r3, #0
 800e502:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e504:	f7f6 f94a 	bl	800479c <HAL_GetTick>
 800e508:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	4618      	mov	r0, r3
 800e510:	f003 fd3b 	bl	8011f8a <SDMMC_GetPowerState>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d102      	bne.n	800e520 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e51a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e51e:	e0b5      	b.n	800e68c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e524:	2b03      	cmp	r3, #3
 800e526:	d02e      	beq.n	800e586 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f003 ff86 	bl	801243e <SDMMC_CmdSendCID>
 800e532:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <SD_InitCard+0x46>
    {
      return errorstate;
 800e53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53c:	e0a6      	b.n	800e68c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2100      	movs	r1, #0
 800e544:	4618      	mov	r0, r3
 800e546:	f003 fd66 	bl	8012016 <SDMMC_GetResponse>
 800e54a:	4602      	mov	r2, r0
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2104      	movs	r1, #4
 800e556:	4618      	mov	r0, r3
 800e558:	f003 fd5d 	bl	8012016 <SDMMC_GetResponse>
 800e55c:	4602      	mov	r2, r0
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2108      	movs	r1, #8
 800e568:	4618      	mov	r0, r3
 800e56a:	f003 fd54 	bl	8012016 <SDMMC_GetResponse>
 800e56e:	4602      	mov	r2, r0
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	210c      	movs	r1, #12
 800e57a:	4618      	mov	r0, r3
 800e57c:	f003 fd4b 	bl	8012016 <SDMMC_GetResponse>
 800e580:	4602      	mov	r2, r0
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e58a:	2b03      	cmp	r3, #3
 800e58c:	d01d      	beq.n	800e5ca <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e58e:	e019      	b.n	800e5c4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f107 020a 	add.w	r2, r7, #10
 800e598:	4611      	mov	r1, r2
 800e59a:	4618      	mov	r0, r3
 800e59c:	f003 ff8e 	bl	80124bc <SDMMC_CmdSetRelAdd>
 800e5a0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d001      	beq.n	800e5ac <SD_InitCard+0xb4>
      {
        return errorstate;
 800e5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5aa:	e06f      	b.n	800e68c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e5ac:	f7f6 f8f6 	bl	800479c <HAL_GetTick>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5b4:	1ad3      	subs	r3, r2, r3
 800e5b6:	f241 3287 	movw	r2, #4999	; 0x1387
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d902      	bls.n	800e5c4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e5be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e5c2:	e063      	b.n	800e68c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e5c4:	897b      	ldrh	r3, [r7, #10]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d0e2      	beq.n	800e590 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ce:	2b03      	cmp	r3, #3
 800e5d0:	d036      	beq.n	800e640 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e5d2:	897b      	ldrh	r3, [r7, #10]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5e2:	041b      	lsls	r3, r3, #16
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	4610      	mov	r0, r2
 800e5e8:	f003 ff48 	bl	801247c <SDMMC_CmdSendCSD>
 800e5ec:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <SD_InitCard+0x100>
    {
      return errorstate;
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	e049      	b.n	800e68c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	4618      	mov	r0, r3
 800e600:	f003 fd09 	bl	8012016 <SDMMC_GetResponse>
 800e604:	4602      	mov	r2, r0
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2104      	movs	r1, #4
 800e610:	4618      	mov	r0, r3
 800e612:	f003 fd00 	bl	8012016 <SDMMC_GetResponse>
 800e616:	4602      	mov	r2, r0
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2108      	movs	r1, #8
 800e622:	4618      	mov	r0, r3
 800e624:	f003 fcf7 	bl	8012016 <SDMMC_GetResponse>
 800e628:	4602      	mov	r2, r0
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	210c      	movs	r1, #12
 800e634:	4618      	mov	r0, r3
 800e636:	f003 fcee 	bl	8012016 <SDMMC_GetResponse>
 800e63a:	4602      	mov	r2, r0
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2104      	movs	r1, #4
 800e646:	4618      	mov	r0, r3
 800e648:	f003 fce5 	bl	8012016 <SDMMC_GetResponse>
 800e64c:	4603      	mov	r3, r0
 800e64e:	0d1a      	lsrs	r2, r3, #20
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e654:	f107 030c 	add.w	r3, r7, #12
 800e658:	4619      	mov	r1, r3
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f7ff fb8c 	bl	800dd78 <HAL_SD_GetCardCSD>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d002      	beq.n	800e66c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e666:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e66a:	e00f      	b.n	800e68c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e674:	041b      	lsls	r3, r3, #16
 800e676:	4619      	mov	r1, r3
 800e678:	4610      	mov	r0, r2
 800e67a:	f003 fdf7 	bl	801226c <SDMMC_CmdSelDesel>
 800e67e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e682:	2b00      	cmp	r3, #0
 800e684:	d001      	beq.n	800e68a <SD_InitCard+0x192>
  {
    return errorstate;
 800e686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e688:	e000      	b.n	800e68c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3740      	adds	r7, #64	; 0x40
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b086      	sub	sp, #24
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e69c:	2300      	movs	r3, #0
 800e69e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f003 fe00 	bl	80122b2 <SDMMC_CmdGoIdleState>
 800e6b2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d001      	beq.n	800e6be <SD_PowerON+0x2a>
  {
    return errorstate;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	e072      	b.n	800e7a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f003 fe13 	bl	80122ee <SDMMC_CmdOperCond>
 800e6c8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6d0:	d10d      	bne.n	800e6ee <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f003 fde8 	bl	80122b2 <SDMMC_CmdGoIdleState>
 800e6e2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d004      	beq.n	800e6f4 <SD_PowerON+0x60>
    {
      return errorstate;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	e05a      	b.n	800e7a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d137      	bne.n	800e76c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2100      	movs	r1, #0
 800e702:	4618      	mov	r0, r3
 800e704:	f003 fe13 	bl	801232e <SDMMC_CmdAppCommand>
 800e708:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d02d      	beq.n	800e76c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e710:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e714:	e046      	b.n	800e7a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2100      	movs	r1, #0
 800e71c:	4618      	mov	r0, r3
 800e71e:	f003 fe06 	bl	801232e <SDMMC_CmdAppCommand>
 800e722:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d001      	beq.n	800e72e <SD_PowerON+0x9a>
    {
      return errorstate;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	e03a      	b.n	800e7a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	491e      	ldr	r1, [pc, #120]	; (800e7ac <SD_PowerON+0x118>)
 800e734:	4618      	mov	r0, r3
 800e736:	f003 fe1d 	bl	8012374 <SDMMC_CmdAppOperCommand>
 800e73a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d002      	beq.n	800e748 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e742:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e746:	e02d      	b.n	800e7a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	2100      	movs	r1, #0
 800e74e:	4618      	mov	r0, r3
 800e750:	f003 fc61 	bl	8012016 <SDMMC_GetResponse>
 800e754:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	0fdb      	lsrs	r3, r3, #31
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d101      	bne.n	800e762 <SD_PowerON+0xce>
 800e75e:	2301      	movs	r3, #1
 800e760:	e000      	b.n	800e764 <SD_PowerON+0xd0>
 800e762:	2300      	movs	r3, #0
 800e764:	613b      	str	r3, [r7, #16]

    count++;
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	3301      	adds	r3, #1
 800e76a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e772:	4293      	cmp	r3, r2
 800e774:	d802      	bhi.n	800e77c <SD_PowerON+0xe8>
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d0cc      	beq.n	800e716 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e782:	4293      	cmp	r3, r2
 800e784:	d902      	bls.n	800e78c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e78a:	e00b      	b.n	800e7a4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d002      	beq.n	800e7a2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3718      	adds	r7, #24
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	c1100000 	.word	0xc1100000

0800e7b0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b08c      	sub	sp, #48	; 0x30
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e7ba:	f7f5 ffef 	bl	800479c <HAL_GetTick>
 800e7be:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2100      	movs	r1, #0
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f003 fc23 	bl	8012016 <SDMMC_GetResponse>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e7da:	d102      	bne.n	800e7e2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e7dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e7e0:	e0b0      	b.n	800e944 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2140      	movs	r1, #64	; 0x40
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f003 fc53 	bl	8012094 <SDMMC_CmdBlockLength>
 800e7ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7f0:	6a3b      	ldr	r3, [r7, #32]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d005      	beq.n	800e802 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e7fe:	6a3b      	ldr	r3, [r7, #32]
 800e800:	e0a0      	b.n	800e944 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e80a:	041b      	lsls	r3, r3, #16
 800e80c:	4619      	mov	r1, r3
 800e80e:	4610      	mov	r0, r2
 800e810:	f003 fd8d 	bl	801232e <SDMMC_CmdAppCommand>
 800e814:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e816:	6a3b      	ldr	r3, [r7, #32]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d005      	beq.n	800e828 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e824:	6a3b      	ldr	r3, [r7, #32]
 800e826:	e08d      	b.n	800e944 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e828:	f04f 33ff 	mov.w	r3, #4294967295
 800e82c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e82e:	2340      	movs	r3, #64	; 0x40
 800e830:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e832:	2360      	movs	r3, #96	; 0x60
 800e834:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e836:	2302      	movs	r3, #2
 800e838:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e83a:	2300      	movs	r3, #0
 800e83c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e83e:	2301      	movs	r3, #1
 800e840:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f107 0208 	add.w	r2, r7, #8
 800e84a:	4611      	mov	r1, r2
 800e84c:	4618      	mov	r0, r3
 800e84e:	f003 fbf5 	bl	801203c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4618      	mov	r0, r3
 800e858:	f003 fe75 	bl	8012546 <SDMMC_CmdStatusRegister>
 800e85c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e85e:	6a3b      	ldr	r3, [r7, #32]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d02b      	beq.n	800e8bc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e86c:	6a3b      	ldr	r3, [r7, #32]
 800e86e:	e069      	b.n	800e944 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d013      	beq.n	800e8a6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e87e:	2300      	movs	r3, #0
 800e880:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e882:	e00d      	b.n	800e8a0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4618      	mov	r0, r3
 800e88a:	f003 fb4f 	bl	8011f2c <SDMMC_ReadFIFO>
 800e88e:	4602      	mov	r2, r0
 800e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e892:	601a      	str	r2, [r3, #0]
        pData++;
 800e894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e896:	3304      	adds	r3, #4
 800e898:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89c:	3301      	adds	r3, #1
 800e89e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a2:	2b07      	cmp	r3, #7
 800e8a4:	d9ee      	bls.n	800e884 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e8a6:	f7f5 ff79 	bl	800479c <HAL_GetTick>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b4:	d102      	bne.n	800e8bc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e8b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8ba:	e043      	b.n	800e944 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d0d2      	beq.n	800e870 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d0:	f003 0308 	and.w	r3, r3, #8
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d001      	beq.n	800e8dc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e8d8:	2308      	movs	r3, #8
 800e8da:	e033      	b.n	800e944 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e2:	f003 0302 	and.w	r3, r3, #2
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d001      	beq.n	800e8ee <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e8ea:	2302      	movs	r3, #2
 800e8ec:	e02a      	b.n	800e944 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8f4:	f003 0320 	and.w	r3, r3, #32
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d017      	beq.n	800e92c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e8fc:	2320      	movs	r3, #32
 800e8fe:	e021      	b.n	800e944 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4618      	mov	r0, r3
 800e906:	f003 fb11 	bl	8011f2c <SDMMC_ReadFIFO>
 800e90a:	4602      	mov	r2, r0
 800e90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90e:	601a      	str	r2, [r3, #0]
    pData++;
 800e910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e912:	3304      	adds	r3, #4
 800e914:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e916:	f7f5 ff41 	bl	800479c <HAL_GetTick>
 800e91a:	4602      	mov	r2, r0
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	1ad3      	subs	r3, r2, r3
 800e920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e924:	d102      	bne.n	800e92c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e926:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e92a:	e00b      	b.n	800e944 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1e2      	bne.n	800e900 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a03      	ldr	r2, [pc, #12]	; (800e94c <SD_SendSDStatus+0x19c>)
 800e940:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3730      	adds	r7, #48	; 0x30
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	18000f3a 	.word	0x18000f3a

0800e950 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d102      	bne.n	800e966 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e960:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e964:	e018      	b.n	800e998 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e96e:	041b      	lsls	r3, r3, #16
 800e970:	4619      	mov	r1, r3
 800e972:	4610      	mov	r0, r2
 800e974:	f003 fdc4 	bl	8012500 <SDMMC_CmdSendStatus>
 800e978:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d001      	beq.n	800e984 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	e009      	b.n	800e998 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2100      	movs	r1, #0
 800e98a:	4618      	mov	r0, r3
 800e98c:	f003 fb43 	bl	8012016 <SDMMC_GetResponse>
 800e990:	4602      	mov	r2, r0
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e996:	2300      	movs	r3, #0
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b086      	sub	sp, #24
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	60fb      	str	r3, [r7, #12]
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f003 fb2d 	bl	8012016 <SDMMC_GetResponse>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e9c6:	d102      	bne.n	800e9ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e9c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9cc:	e02f      	b.n	800ea2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e9ce:	f107 030c 	add.w	r3, r7, #12
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 f879 	bl	800eacc <SD_FindSCR>
 800e9da:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d001      	beq.n	800e9e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	e023      	b.n	800ea2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d01c      	beq.n	800ea2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9f8:	041b      	lsls	r3, r3, #16
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	4610      	mov	r0, r2
 800e9fe:	f003 fc96 	bl	801232e <SDMMC_CmdAppCommand>
 800ea02:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d001      	beq.n	800ea0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	e00f      	b.n	800ea2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2102      	movs	r1, #2
 800ea14:	4618      	mov	r0, r3
 800ea16:	f003 fccd 	bl	80123b4 <SDMMC_CmdBusWidth>
 800ea1a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	e003      	b.n	800ea2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ea26:	2300      	movs	r3, #0
 800ea28:	e001      	b.n	800ea2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3718      	adds	r7, #24
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b086      	sub	sp, #24
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ea3e:	2300      	movs	r3, #0
 800ea40:	60fb      	str	r3, [r7, #12]
 800ea42:	2300      	movs	r3, #0
 800ea44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f003 fae2 	bl	8012016 <SDMMC_GetResponse>
 800ea52:	4603      	mov	r3, r0
 800ea54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea5c:	d102      	bne.n	800ea64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea62:	e02f      	b.n	800eac4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea64:	f107 030c 	add.w	r3, r7, #12
 800ea68:	4619      	mov	r1, r3
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 f82e 	bl	800eacc <SD_FindSCR>
 800ea70:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d001      	beq.n	800ea7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	e023      	b.n	800eac4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d01c      	beq.n	800eac0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea8e:	041b      	lsls	r3, r3, #16
 800ea90:	4619      	mov	r1, r3
 800ea92:	4610      	mov	r0, r2
 800ea94:	f003 fc4b 	bl	801232e <SDMMC_CmdAppCommand>
 800ea98:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d001      	beq.n	800eaa4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	e00f      	b.n	800eac4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f003 fc82 	bl	80123b4 <SDMMC_CmdBusWidth>
 800eab0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d001      	beq.n	800eabc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	e003      	b.n	800eac4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eabc:	2300      	movs	r3, #0
 800eabe:	e001      	b.n	800eac4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eac0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3718      	adds	r7, #24
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b08e      	sub	sp, #56	; 0x38
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ead6:	f7f5 fe61 	bl	800479c <HAL_GetTick>
 800eada:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800eadc:	2300      	movs	r3, #0
 800eade:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800eae0:	2300      	movs	r3, #0
 800eae2:	60bb      	str	r3, [r7, #8]
 800eae4:	2300      	movs	r3, #0
 800eae6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2108      	movs	r1, #8
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f003 face 	bl	8012094 <SDMMC_CmdBlockLength>
 800eaf8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d001      	beq.n	800eb04 <SD_FindSCR+0x38>
  {
    return errorstate;
 800eb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb02:	e0ad      	b.n	800ec60 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb0c:	041b      	lsls	r3, r3, #16
 800eb0e:	4619      	mov	r1, r3
 800eb10:	4610      	mov	r0, r2
 800eb12:	f003 fc0c 	bl	801232e <SDMMC_CmdAppCommand>
 800eb16:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d001      	beq.n	800eb22 <SD_FindSCR+0x56>
  {
    return errorstate;
 800eb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb20:	e09e      	b.n	800ec60 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eb22:	f04f 33ff 	mov.w	r3, #4294967295
 800eb26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800eb28:	2308      	movs	r3, #8
 800eb2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800eb2c:	2330      	movs	r3, #48	; 0x30
 800eb2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800eb30:	2302      	movs	r3, #2
 800eb32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800eb34:	2300      	movs	r3, #0
 800eb36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f107 0210 	add.w	r2, r7, #16
 800eb44:	4611      	mov	r1, r2
 800eb46:	4618      	mov	r0, r3
 800eb48:	f003 fa78 	bl	801203c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4618      	mov	r0, r3
 800eb52:	f003 fc52 	bl	80123fa <SDMMC_CmdSendSCR>
 800eb56:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d027      	beq.n	800ebae <SD_FindSCR+0xe2>
  {
    return errorstate;
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	e07e      	b.n	800ec60 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d113      	bne.n	800eb98 <SD_FindSCR+0xcc>
 800eb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d110      	bne.n	800eb98 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f003 f9d6 	bl	8011f2c <SDMMC_ReadFIFO>
 800eb80:	4603      	mov	r3, r0
 800eb82:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f003 f9cf 	bl	8011f2c <SDMMC_ReadFIFO>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	60fb      	str	r3, [r7, #12]
      index++;
 800eb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb94:	3301      	adds	r3, #1
 800eb96:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eb98:	f7f5 fe00 	bl	800479c <HAL_GetTick>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba6:	d102      	bne.n	800ebae <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eba8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebac:	e058      	b.n	800ec60 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebb4:	f240 532a 	movw	r3, #1322	; 0x52a
 800ebb8:	4013      	ands	r3, r2
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d0d1      	beq.n	800eb62 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc4:	f003 0308 	and.w	r3, r3, #8
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d005      	beq.n	800ebd8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2208      	movs	r2, #8
 800ebd2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ebd4:	2308      	movs	r3, #8
 800ebd6:	e043      	b.n	800ec60 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebde:	f003 0302 	and.w	r3, r3, #2
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d005      	beq.n	800ebf2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2202      	movs	r2, #2
 800ebec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ebee:	2302      	movs	r3, #2
 800ebf0:	e036      	b.n	800ec60 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebf8:	f003 0320 	and.w	r3, r3, #32
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d005      	beq.n	800ec0c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2220      	movs	r2, #32
 800ec06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ec08:	2320      	movs	r3, #32
 800ec0a:	e029      	b.n	800ec60 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a15      	ldr	r2, [pc, #84]	; (800ec68 <SD_FindSCR+0x19c>)
 800ec12:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	061a      	lsls	r2, r3, #24
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	021b      	lsls	r3, r3, #8
 800ec1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec20:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	0a1b      	lsrs	r3, r3, #8
 800ec26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec2a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	0e1b      	lsrs	r3, r3, #24
 800ec30:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ec32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec34:	601a      	str	r2, [r3, #0]
    scr++;
 800ec36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec38:	3304      	adds	r3, #4
 800ec3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	061a      	lsls	r2, r3, #24
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	021b      	lsls	r3, r3, #8
 800ec44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec48:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	0a1b      	lsrs	r3, r3, #8
 800ec4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ec52:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	0e1b      	lsrs	r3, r3, #24
 800ec58:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ec5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ec5e:	2300      	movs	r3, #0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3738      	adds	r7, #56	; 0x38
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	18000f3a 	.word	0x18000f3a

0800ec6c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec78:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7e:	2b1f      	cmp	r3, #31
 800ec80:	d936      	bls.n	800ecf0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ec82:	2300      	movs	r3, #0
 800ec84:	617b      	str	r3, [r7, #20]
 800ec86:	e027      	b.n	800ecd8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f003 f94d 	bl	8011f2c <SDMMC_ReadFIFO>
 800ec92:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	b2da      	uxtb	r2, r3
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	0a1b      	lsrs	r3, r3, #8
 800eca6:	b2da      	uxtb	r2, r3
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	0c1b      	lsrs	r3, r3, #16
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	0e1b      	lsrs	r3, r3, #24
 800ecc6:	b2da      	uxtb	r2, r3
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	617b      	str	r3, [r7, #20]
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	2b07      	cmp	r3, #7
 800ecdc:	d9d4      	bls.n	800ec88 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	693a      	ldr	r2, [r7, #16]
 800ece2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece8:	f1a3 0220 	sub.w	r2, r3, #32
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ecf0:	bf00      	nop
 800ecf2:	3718      	adds	r7, #24
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	69db      	ldr	r3, [r3, #28]
 800ed04:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	2b1f      	cmp	r3, #31
 800ed0c:	d93a      	bls.n	800ed84 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ed0e:	2300      	movs	r3, #0
 800ed10:	617b      	str	r3, [r7, #20]
 800ed12:	e02b      	b.n	800ed6c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	021a      	lsls	r2, r3, #8
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	041a      	lsls	r2, r3, #16
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	3301      	adds	r3, #1
 800ed42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	061a      	lsls	r2, r3, #24
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	3301      	adds	r3, #1
 800ed54:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f107 020c 	add.w	r2, r7, #12
 800ed5e:	4611      	mov	r1, r2
 800ed60:	4618      	mov	r0, r3
 800ed62:	f003 f8f0 	bl	8011f46 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	617b      	str	r3, [r7, #20]
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	2b07      	cmp	r3, #7
 800ed70:	d9d0      	bls.n	800ed14 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	693a      	ldr	r2, [r7, #16]
 800ed76:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6a1b      	ldr	r3, [r3, #32]
 800ed7c:	f1a3 0220 	sub.w	r2, r3, #32
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	621a      	str	r2, [r3, #32]
  }
}
 800ed84:	bf00      	nop
 800ed86:	3718      	adds	r7, #24
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b083      	sub	sp, #12
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ed94:	bf00      	nop
 800ed96:	370c      	adds	r7, #12
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b083      	sub	sp, #12
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800eda8:	bf00      	nop
 800edaa:	370c      	adds	r7, #12
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b083      	sub	sp, #12
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800edbc:	bf00      	nop
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr

0800edc8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800edd0:	bf00      	nop
 800edd2:	370c      	adds	r7, #12
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr

0800eddc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d101      	bne.n	800edee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800edea:	2301      	movs	r3, #1
 800edec:	e10f      	b.n	800f00e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2200      	movs	r2, #0
 800edf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a87      	ldr	r2, [pc, #540]	; (800f018 <HAL_SPI_Init+0x23c>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d00f      	beq.n	800ee1e <HAL_SPI_Init+0x42>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a86      	ldr	r2, [pc, #536]	; (800f01c <HAL_SPI_Init+0x240>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d00a      	beq.n	800ee1e <HAL_SPI_Init+0x42>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a84      	ldr	r2, [pc, #528]	; (800f020 <HAL_SPI_Init+0x244>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d005      	beq.n	800ee1e <HAL_SPI_Init+0x42>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	2b0f      	cmp	r3, #15
 800ee18:	d901      	bls.n	800ee1e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	e0f7      	b.n	800f00e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f000 fd5a 	bl	800f8d8 <SPI_GetPacketSize>
 800ee24:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4a7b      	ldr	r2, [pc, #492]	; (800f018 <HAL_SPI_Init+0x23c>)
 800ee2c:	4293      	cmp	r3, r2
 800ee2e:	d00c      	beq.n	800ee4a <HAL_SPI_Init+0x6e>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a79      	ldr	r2, [pc, #484]	; (800f01c <HAL_SPI_Init+0x240>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d007      	beq.n	800ee4a <HAL_SPI_Init+0x6e>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4a78      	ldr	r2, [pc, #480]	; (800f020 <HAL_SPI_Init+0x244>)
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d002      	beq.n	800ee4a <HAL_SPI_Init+0x6e>
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2b08      	cmp	r3, #8
 800ee48:	d811      	bhi.n	800ee6e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee4e:	4a72      	ldr	r2, [pc, #456]	; (800f018 <HAL_SPI_Init+0x23c>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d009      	beq.n	800ee68 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a70      	ldr	r2, [pc, #448]	; (800f01c <HAL_SPI_Init+0x240>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d004      	beq.n	800ee68 <HAL_SPI_Init+0x8c>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4a6f      	ldr	r2, [pc, #444]	; (800f020 <HAL_SPI_Init+0x244>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d104      	bne.n	800ee72 <HAL_SPI_Init+0x96>
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2b10      	cmp	r3, #16
 800ee6c:	d901      	bls.n	800ee72 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e0cd      	b.n	800f00e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ee78:	b2db      	uxtb	r3, r3
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d106      	bne.n	800ee8c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f7f4 fdf8 	bl	8003a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2202      	movs	r2, #2
 800ee90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f022 0201 	bic.w	r2, r2, #1
 800eea2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	689b      	ldr	r3, [r3, #8]
 800eeaa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800eeae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	699b      	ldr	r3, [r3, #24]
 800eeb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eeb8:	d119      	bne.n	800eeee <HAL_SPI_Init+0x112>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eec2:	d103      	bne.n	800eecc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d008      	beq.n	800eede <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d10c      	bne.n	800eeee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800eed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eedc:	d107      	bne.n	800eeee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800eeec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00f      	beq.n	800ef1a <HAL_SPI_Init+0x13e>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	2b06      	cmp	r3, #6
 800ef00:	d90b      	bls.n	800ef1a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	430a      	orrs	r2, r1
 800ef16:	601a      	str	r2, [r3, #0]
 800ef18:	e007      	b.n	800ef2a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ef28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	69da      	ldr	r2, [r3, #28]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef32:	431a      	orrs	r2, r3
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	431a      	orrs	r2, r3
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef3c:	ea42 0103 	orr.w	r1, r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	68da      	ldr	r2, [r3, #12]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	430a      	orrs	r2, r1
 800ef4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef54:	431a      	orrs	r2, r3
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef5a:	431a      	orrs	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	699b      	ldr	r3, [r3, #24]
 800ef60:	431a      	orrs	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	691b      	ldr	r3, [r3, #16]
 800ef66:	431a      	orrs	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	431a      	orrs	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6a1b      	ldr	r3, [r3, #32]
 800ef72:	431a      	orrs	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	431a      	orrs	r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef7e:	431a      	orrs	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	689b      	ldr	r3, [r3, #8]
 800ef84:	431a      	orrs	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef8a:	ea42 0103 	orr.w	r1, r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	430a      	orrs	r2, r1
 800ef98:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d113      	bne.n	800efca <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800efb4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800efc8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f022 0201 	bic.w	r2, r2, #1
 800efd8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00a      	beq.n	800effc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	430a      	orrs	r2, r1
 800effa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	40013000 	.word	0x40013000
 800f01c:	40003800 	.word	0x40003800
 800f020:	40003c00 	.word	0x40003c00

0800f024 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08a      	sub	sp, #40	; 0x28
 800f028:	af02      	add	r7, sp, #8
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	603b      	str	r3, [r7, #0]
 800f030:	4613      	mov	r3, r2
 800f032:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	3320      	adds	r3, #32
 800f03a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f03c:	2300      	movs	r3, #0
 800f03e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f046:	2b01      	cmp	r3, #1
 800f048:	d101      	bne.n	800f04e <HAL_SPI_Transmit+0x2a>
 800f04a:	2302      	movs	r3, #2
 800f04c:	e1e1      	b.n	800f412 <HAL_SPI_Transmit+0x3ee>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2201      	movs	r2, #1
 800f052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f056:	f7f5 fba1 	bl	800479c <HAL_GetTick>
 800f05a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f062:	b2db      	uxtb	r3, r3
 800f064:	2b01      	cmp	r3, #1
 800f066:	d007      	beq.n	800f078 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f068:	2302      	movs	r3, #2
 800f06a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f074:	7efb      	ldrb	r3, [r7, #27]
 800f076:	e1cc      	b.n	800f412 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d002      	beq.n	800f084 <HAL_SPI_Transmit+0x60>
 800f07e:	88fb      	ldrh	r3, [r7, #6]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d107      	bne.n	800f094 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f084:	2301      	movs	r3, #1
 800f086:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2200      	movs	r2, #0
 800f08c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f090:	7efb      	ldrb	r3, [r7, #27]
 800f092:	e1be      	b.n	800f412 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2203      	movs	r2, #3
 800f098:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	68ba      	ldr	r2, [r7, #8]
 800f0a8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	88fa      	ldrh	r2, [r7, #6]
 800f0ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	88fa      	ldrh	r2, [r7, #6]
 800f0b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f0e4:	d108      	bne.n	800f0f8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0f4:	601a      	str	r2, [r3, #0]
 800f0f6:	e009      	b.n	800f10c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f10a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	685a      	ldr	r2, [r3, #4]
 800f112:	4b96      	ldr	r3, [pc, #600]	; (800f36c <HAL_SPI_Transmit+0x348>)
 800f114:	4013      	ands	r3, r2
 800f116:	88f9      	ldrh	r1, [r7, #6]
 800f118:	68fa      	ldr	r2, [r7, #12]
 800f11a:	6812      	ldr	r2, [r2, #0]
 800f11c:	430b      	orrs	r3, r1
 800f11e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f042 0201 	orr.w	r2, r2, #1
 800f12e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f138:	d107      	bne.n	800f14a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	2b0f      	cmp	r3, #15
 800f150:	d947      	bls.n	800f1e2 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f152:	e03f      	b.n	800f1d4 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	695b      	ldr	r3, [r3, #20]
 800f15a:	f003 0302 	and.w	r3, r3, #2
 800f15e:	2b02      	cmp	r3, #2
 800f160:	d114      	bne.n	800f18c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	6812      	ldr	r2, [r2, #0]
 800f16c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f172:	1d1a      	adds	r2, r3, #4
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f17e:	b29b      	uxth	r3, r3
 800f180:	3b01      	subs	r3, #1
 800f182:	b29a      	uxth	r2, r3
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f18a:	e023      	b.n	800f1d4 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f18c:	f7f5 fb06 	bl	800479c <HAL_GetTick>
 800f190:	4602      	mov	r2, r0
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	1ad3      	subs	r3, r2, r3
 800f196:	683a      	ldr	r2, [r7, #0]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d803      	bhi.n	800f1a4 <HAL_SPI_Transmit+0x180>
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a2:	d102      	bne.n	800f1aa <HAL_SPI_Transmit+0x186>
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d114      	bne.n	800f1d4 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1aa:	68f8      	ldr	r0, [r7, #12]
 800f1ac:	f000 fac6 	bl	800f73c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f1d0:	2303      	movs	r3, #3
 800f1d2:	e11e      	b.n	800f412 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d1b9      	bne.n	800f154 <HAL_SPI_Transmit+0x130>
 800f1e0:	e0f1      	b.n	800f3c6 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	2b07      	cmp	r3, #7
 800f1e8:	f240 80e6 	bls.w	800f3b8 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f1ec:	e05d      	b.n	800f2aa <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	695b      	ldr	r3, [r3, #20]
 800f1f4:	f003 0302 	and.w	r3, r3, #2
 800f1f8:	2b02      	cmp	r3, #2
 800f1fa:	d132      	bne.n	800f262 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f202:	b29b      	uxth	r3, r3
 800f204:	2b01      	cmp	r3, #1
 800f206:	d918      	bls.n	800f23a <HAL_SPI_Transmit+0x216>
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d014      	beq.n	800f23a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	6812      	ldr	r2, [r2, #0]
 800f21a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f220:	1d1a      	adds	r2, r3, #4
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	3b02      	subs	r3, #2
 800f230:	b29a      	uxth	r2, r3
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f238:	e037      	b.n	800f2aa <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f23e:	881a      	ldrh	r2, [r3, #0]
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f248:	1c9a      	adds	r2, r3, #2
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f254:	b29b      	uxth	r3, r3
 800f256:	3b01      	subs	r3, #1
 800f258:	b29a      	uxth	r2, r3
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f260:	e023      	b.n	800f2aa <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f262:	f7f5 fa9b 	bl	800479c <HAL_GetTick>
 800f266:	4602      	mov	r2, r0
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	683a      	ldr	r2, [r7, #0]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d803      	bhi.n	800f27a <HAL_SPI_Transmit+0x256>
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f278:	d102      	bne.n	800f280 <HAL_SPI_Transmit+0x25c>
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d114      	bne.n	800f2aa <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f000 fa5b 	bl	800f73c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2200      	movs	r2, #0
 800f28a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f294:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f2a6:	2303      	movs	r3, #3
 800f2a8:	e0b3      	b.n	800f412 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d19b      	bne.n	800f1ee <HAL_SPI_Transmit+0x1ca>
 800f2b6:	e086      	b.n	800f3c6 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	695b      	ldr	r3, [r3, #20]
 800f2be:	f003 0302 	and.w	r3, r3, #2
 800f2c2:	2b02      	cmp	r3, #2
 800f2c4:	d154      	bne.n	800f370 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	2b03      	cmp	r3, #3
 800f2d0:	d918      	bls.n	800f304 <HAL_SPI_Transmit+0x2e0>
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2d6:	2b40      	cmp	r3, #64	; 0x40
 800f2d8:	d914      	bls.n	800f304 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	6812      	ldr	r2, [r2, #0]
 800f2e4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2ea:	1d1a      	adds	r2, r3, #4
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	3b04      	subs	r3, #4
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f302:	e059      	b.n	800f3b8 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d917      	bls.n	800f340 <HAL_SPI_Transmit+0x31c>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f314:	2b00      	cmp	r3, #0
 800f316:	d013      	beq.n	800f340 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f31c:	881a      	ldrh	r2, [r3, #0]
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f326:	1c9a      	adds	r2, r3, #2
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f332:	b29b      	uxth	r3, r3
 800f334:	3b02      	subs	r3, #2
 800f336:	b29a      	uxth	r2, r3
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f33e:	e03b      	b.n	800f3b8 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	3320      	adds	r3, #32
 800f34a:	7812      	ldrb	r2, [r2, #0]
 800f34c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f352:	1c5a      	adds	r2, r3, #1
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f35e:	b29b      	uxth	r3, r3
 800f360:	3b01      	subs	r3, #1
 800f362:	b29a      	uxth	r2, r3
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f36a:	e025      	b.n	800f3b8 <HAL_SPI_Transmit+0x394>
 800f36c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f370:	f7f5 fa14 	bl	800479c <HAL_GetTick>
 800f374:	4602      	mov	r2, r0
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	1ad3      	subs	r3, r2, r3
 800f37a:	683a      	ldr	r2, [r7, #0]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d803      	bhi.n	800f388 <HAL_SPI_Transmit+0x364>
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f386:	d102      	bne.n	800f38e <HAL_SPI_Transmit+0x36a>
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d114      	bne.n	800f3b8 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f000 f9d4 	bl	800f73c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2200      	movs	r2, #0
 800f398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f3b4:	2303      	movs	r3, #3
 800f3b6:	e02c      	b.n	800f412 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f47f af79 	bne.w	800f2b8 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	9300      	str	r3, [sp, #0]
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	2108      	movs	r1, #8
 800f3d0:	68f8      	ldr	r0, [r7, #12]
 800f3d2:	f000 fa53 	bl	800f87c <SPI_WaitOnFlagUntilTimeout>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d007      	beq.n	800f3ec <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3e2:	f043 0220 	orr.w	r2, r3, #32
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f000 f9a5 	bl	800f73c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d001      	beq.n	800f410 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f40c:	2301      	movs	r3, #1
 800f40e:	e000      	b.n	800f412 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f410:	7efb      	ldrb	r3, [r7, #27]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3720      	adds	r7, #32
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop

0800f41c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b088      	sub	sp, #32
 800f420:	af00      	add	r7, sp, #0
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	603b      	str	r3, [r7, #0]
 800f428:	4613      	mov	r3, r2
 800f42a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f42c:	2300      	movs	r3, #0
 800f42e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	3330      	adds	r3, #48	; 0x30
 800f436:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f43e:	2b01      	cmp	r3, #1
 800f440:	d101      	bne.n	800f446 <HAL_SPI_Receive+0x2a>
 800f442:	2302      	movs	r3, #2
 800f444:	e173      	b.n	800f72e <HAL_SPI_Receive+0x312>
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f44e:	f7f5 f9a5 	bl	800479c <HAL_GetTick>
 800f452:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d007      	beq.n	800f470 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f460:	2302      	movs	r3, #2
 800f462:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2200      	movs	r2, #0
 800f468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f46c:	7ffb      	ldrb	r3, [r7, #31]
 800f46e:	e15e      	b.n	800f72e <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d002      	beq.n	800f47c <HAL_SPI_Receive+0x60>
 800f476:	88fb      	ldrh	r3, [r7, #6]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d107      	bne.n	800f48c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f47c:	2301      	movs	r3, #1
 800f47e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2200      	movs	r2, #0
 800f484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f488:	7ffb      	ldrb	r3, [r7, #31]
 800f48a:	e150      	b.n	800f72e <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2204      	movs	r2, #4
 800f490:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	2200      	movs	r2, #0
 800f498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	68ba      	ldr	r2, [r7, #8]
 800f4a0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	88fa      	ldrh	r2, [r7, #6]
 800f4a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	88fa      	ldrh	r2, [r7, #6]
 800f4ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	689b      	ldr	r3, [r3, #8]
 800f4d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f4dc:	d108      	bne.n	800f4f0 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f4ec:	601a      	str	r2, [r3, #0]
 800f4ee:	e009      	b.n	800f504 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	68db      	ldr	r3, [r3, #12]
 800f4f6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f502:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	685a      	ldr	r2, [r3, #4]
 800f50a:	4b8b      	ldr	r3, [pc, #556]	; (800f738 <HAL_SPI_Receive+0x31c>)
 800f50c:	4013      	ands	r3, r2
 800f50e:	88f9      	ldrh	r1, [r7, #6]
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	6812      	ldr	r2, [r2, #0]
 800f514:	430b      	orrs	r3, r1
 800f516:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f042 0201 	orr.w	r2, r2, #1
 800f526:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f530:	d107      	bne.n	800f542 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f540:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	68db      	ldr	r3, [r3, #12]
 800f546:	2b0f      	cmp	r3, #15
 800f548:	d948      	bls.n	800f5dc <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f54a:	e040      	b.n	800f5ce <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	695a      	ldr	r2, [r3, #20]
 800f552:	f248 0308 	movw	r3, #32776	; 0x8008
 800f556:	4013      	ands	r3, r2
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d014      	beq.n	800f586 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f564:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f566:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f56c:	1d1a      	adds	r2, r3, #4
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f578:	b29b      	uxth	r3, r3
 800f57a:	3b01      	subs	r3, #1
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f584:	e023      	b.n	800f5ce <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f586:	f7f5 f909 	bl	800479c <HAL_GetTick>
 800f58a:	4602      	mov	r2, r0
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	1ad3      	subs	r3, r2, r3
 800f590:	683a      	ldr	r2, [r7, #0]
 800f592:	429a      	cmp	r2, r3
 800f594:	d803      	bhi.n	800f59e <HAL_SPI_Receive+0x182>
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f59c:	d102      	bne.n	800f5a4 <HAL_SPI_Receive+0x188>
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d114      	bne.n	800f5ce <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f000 f8c9 	bl	800f73c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f5ca:	2303      	movs	r3, #3
 800f5cc:	e0af      	b.n	800f72e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1b8      	bne.n	800f54c <HAL_SPI_Receive+0x130>
 800f5da:	e095      	b.n	800f708 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	2b07      	cmp	r3, #7
 800f5e2:	f240 808b 	bls.w	800f6fc <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f5e6:	e03f      	b.n	800f668 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	695b      	ldr	r3, [r3, #20]
 800f5ee:	f003 0301 	and.w	r3, r3, #1
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	d114      	bne.n	800f620 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5fa:	69ba      	ldr	r2, [r7, #24]
 800f5fc:	8812      	ldrh	r2, [r2, #0]
 800f5fe:	b292      	uxth	r2, r2
 800f600:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f606:	1c9a      	adds	r2, r3, #2
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f612:	b29b      	uxth	r3, r3
 800f614:	3b01      	subs	r3, #1
 800f616:	b29a      	uxth	r2, r3
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f61e:	e023      	b.n	800f668 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f620:	f7f5 f8bc 	bl	800479c <HAL_GetTick>
 800f624:	4602      	mov	r2, r0
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	1ad3      	subs	r3, r2, r3
 800f62a:	683a      	ldr	r2, [r7, #0]
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d803      	bhi.n	800f638 <HAL_SPI_Receive+0x21c>
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f636:	d102      	bne.n	800f63e <HAL_SPI_Receive+0x222>
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d114      	bne.n	800f668 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f63e:	68f8      	ldr	r0, [r7, #12]
 800f640:	f000 f87c 	bl	800f73c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2200      	movs	r2, #0
 800f648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f652:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2201      	movs	r2, #1
 800f660:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f664:	2303      	movs	r3, #3
 800f666:	e062      	b.n	800f72e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f66e:	b29b      	uxth	r3, r3
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1b9      	bne.n	800f5e8 <HAL_SPI_Receive+0x1cc>
 800f674:	e048      	b.n	800f708 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	695b      	ldr	r3, [r3, #20]
 800f67c:	f003 0301 	and.w	r3, r3, #1
 800f680:	2b01      	cmp	r3, #1
 800f682:	d117      	bne.n	800f6b4 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f690:	7812      	ldrb	r2, [r2, #0]
 800f692:	b2d2      	uxtb	r2, r2
 800f694:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f69a:	1c5a      	adds	r2, r3, #1
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	3b01      	subs	r3, #1
 800f6aa:	b29a      	uxth	r2, r3
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f6b2:	e023      	b.n	800f6fc <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f6b4:	f7f5 f872 	bl	800479c <HAL_GetTick>
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	1ad3      	subs	r3, r2, r3
 800f6be:	683a      	ldr	r2, [r7, #0]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d803      	bhi.n	800f6cc <HAL_SPI_Receive+0x2b0>
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ca:	d102      	bne.n	800f6d2 <HAL_SPI_Receive+0x2b6>
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d114      	bne.n	800f6fc <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	f000 f832 	bl	800f73c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f6f8:	2303      	movs	r3, #3
 800f6fa:	e018      	b.n	800f72e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f702:	b29b      	uxth	r3, r3
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1b6      	bne.n	800f676 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f000 f817 	bl	800f73c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2200      	movs	r2, #0
 800f712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	2201      	movs	r2, #1
 800f71a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f724:	2b00      	cmp	r3, #0
 800f726:	d001      	beq.n	800f72c <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f728:	2301      	movs	r3, #1
 800f72a:	e000      	b.n	800f72e <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f72c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3720      	adds	r7, #32
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	ffff0000 	.word	0xffff0000

0800f73c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b085      	sub	sp, #20
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	695b      	ldr	r3, [r3, #20]
 800f74a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	699a      	ldr	r2, [r3, #24]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	f042 0208 	orr.w	r2, r2, #8
 800f75a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	699a      	ldr	r2, [r3, #24]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f042 0210 	orr.w	r2, r2, #16
 800f76a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f022 0201 	bic.w	r2, r2, #1
 800f77a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	6919      	ldr	r1, [r3, #16]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	4b3c      	ldr	r3, [pc, #240]	; (800f878 <SPI_CloseTransfer+0x13c>)
 800f788:	400b      	ands	r3, r1
 800f78a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	689a      	ldr	r2, [r3, #8]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f79a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	2b04      	cmp	r3, #4
 800f7a6:	d014      	beq.n	800f7d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f003 0320 	and.w	r3, r3, #32
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00f      	beq.n	800f7d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	699a      	ldr	r2, [r3, #24]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f042 0220 	orr.w	r2, r2, #32
 800f7d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	2b03      	cmp	r3, #3
 800f7dc:	d014      	beq.n	800f808 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00f      	beq.n	800f808 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7ee:	f043 0204 	orr.w	r2, r3, #4
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	699a      	ldr	r2, [r3, #24]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f806:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00f      	beq.n	800f832 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f818:	f043 0201 	orr.w	r2, r3, #1
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	699a      	ldr	r2, [r3, #24]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f830:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00f      	beq.n	800f85c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f842:	f043 0208 	orr.w	r2, r3, #8
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	699a      	ldr	r2, [r3, #24]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f85a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2200      	movs	r2, #0
 800f860:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f86c:	bf00      	nop
 800f86e:	3714      	adds	r7, #20
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr
 800f878:	fffffc90 	.word	0xfffffc90

0800f87c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	603b      	str	r3, [r7, #0]
 800f888:	4613      	mov	r3, r2
 800f88a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f88c:	e010      	b.n	800f8b0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f88e:	f7f4 ff85 	bl	800479c <HAL_GetTick>
 800f892:	4602      	mov	r2, r0
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	1ad3      	subs	r3, r2, r3
 800f898:	683a      	ldr	r2, [r7, #0]
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d803      	bhi.n	800f8a6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8a4:	d102      	bne.n	800f8ac <SPI_WaitOnFlagUntilTimeout+0x30>
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d101      	bne.n	800f8b0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f8ac:	2303      	movs	r3, #3
 800f8ae:	e00f      	b.n	800f8d0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	695a      	ldr	r2, [r3, #20]
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	4013      	ands	r3, r2
 800f8ba:	68ba      	ldr	r2, [r7, #8]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	bf0c      	ite	eq
 800f8c0:	2301      	moveq	r3, #1
 800f8c2:	2300      	movne	r3, #0
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	79fb      	ldrb	r3, [r7, #7]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d0df      	beq.n	800f88e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3710      	adds	r7, #16
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b085      	sub	sp, #20
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8e4:	095b      	lsrs	r3, r3, #5
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	68db      	ldr	r3, [r3, #12]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	3307      	adds	r3, #7
 800f8f6:	08db      	lsrs	r3, r3, #3
 800f8f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	fb02 f303 	mul.w	r3, r2, r3
}
 800f902:	4618      	mov	r0, r3
 800f904:	3714      	adds	r7, #20
 800f906:	46bd      	mov	sp, r7
 800f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90c:	4770      	bx	lr

0800f90e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f90e:	b580      	push	{r7, lr}
 800f910:	b082      	sub	sp, #8
 800f912:	af00      	add	r7, sp, #0
 800f914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d101      	bne.n	800f920 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f91c:	2301      	movs	r3, #1
 800f91e:	e049      	b.n	800f9b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f926:	b2db      	uxtb	r3, r3
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d106      	bne.n	800f93a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7f4 faf3 	bl	8003f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2202      	movs	r2, #2
 800f93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	3304      	adds	r3, #4
 800f94a:	4619      	mov	r1, r3
 800f94c:	4610      	mov	r0, r2
 800f94e:	f000 fc8d 	bl	801026c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2201      	movs	r2, #1
 800f956:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2201      	movs	r2, #1
 800f95e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2201      	movs	r2, #1
 800f966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2201      	movs	r2, #1
 800f96e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2201      	movs	r2, #1
 800f976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2201      	movs	r2, #1
 800f97e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2201      	movs	r2, #1
 800f986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2201      	movs	r2, #1
 800f98e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2201      	movs	r2, #1
 800f996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2201      	movs	r2, #1
 800f99e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f9b2:	2300      	movs	r3, #0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	2b01      	cmp	r3, #1
 800f9ce:	d001      	beq.n	800f9d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	e056      	b.n	800fa82 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2202      	movs	r2, #2
 800f9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4a2b      	ldr	r2, [pc, #172]	; (800fa90 <HAL_TIM_Base_Start+0xd4>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d02c      	beq.n	800fa40 <HAL_TIM_Base_Start+0x84>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9ee:	d027      	beq.n	800fa40 <HAL_TIM_Base_Start+0x84>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a27      	ldr	r2, [pc, #156]	; (800fa94 <HAL_TIM_Base_Start+0xd8>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d022      	beq.n	800fa40 <HAL_TIM_Base_Start+0x84>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	4a26      	ldr	r2, [pc, #152]	; (800fa98 <HAL_TIM_Base_Start+0xdc>)
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d01d      	beq.n	800fa40 <HAL_TIM_Base_Start+0x84>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4a24      	ldr	r2, [pc, #144]	; (800fa9c <HAL_TIM_Base_Start+0xe0>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d018      	beq.n	800fa40 <HAL_TIM_Base_Start+0x84>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	4a23      	ldr	r2, [pc, #140]	; (800faa0 <HAL_TIM_Base_Start+0xe4>)
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d013      	beq.n	800fa40 <HAL_TIM_Base_Start+0x84>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4a21      	ldr	r2, [pc, #132]	; (800faa4 <HAL_TIM_Base_Start+0xe8>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d00e      	beq.n	800fa40 <HAL_TIM_Base_Start+0x84>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4a20      	ldr	r2, [pc, #128]	; (800faa8 <HAL_TIM_Base_Start+0xec>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d009      	beq.n	800fa40 <HAL_TIM_Base_Start+0x84>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	4a1e      	ldr	r2, [pc, #120]	; (800faac <HAL_TIM_Base_Start+0xf0>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d004      	beq.n	800fa40 <HAL_TIM_Base_Start+0x84>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	4a1d      	ldr	r2, [pc, #116]	; (800fab0 <HAL_TIM_Base_Start+0xf4>)
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d115      	bne.n	800fa6c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	689a      	ldr	r2, [r3, #8]
 800fa46:	4b1b      	ldr	r3, [pc, #108]	; (800fab4 <HAL_TIM_Base_Start+0xf8>)
 800fa48:	4013      	ands	r3, r2
 800fa4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2b06      	cmp	r3, #6
 800fa50:	d015      	beq.n	800fa7e <HAL_TIM_Base_Start+0xc2>
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa58:	d011      	beq.n	800fa7e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	681a      	ldr	r2, [r3, #0]
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f042 0201 	orr.w	r2, r2, #1
 800fa68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa6a:	e008      	b.n	800fa7e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f042 0201 	orr.w	r2, r2, #1
 800fa7a:	601a      	str	r2, [r3, #0]
 800fa7c:	e000      	b.n	800fa80 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fa80:	2300      	movs	r3, #0
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3714      	adds	r7, #20
 800fa86:	46bd      	mov	sp, r7
 800fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8c:	4770      	bx	lr
 800fa8e:	bf00      	nop
 800fa90:	40010000 	.word	0x40010000
 800fa94:	40000400 	.word	0x40000400
 800fa98:	40000800 	.word	0x40000800
 800fa9c:	40000c00 	.word	0x40000c00
 800faa0:	40010400 	.word	0x40010400
 800faa4:	40001800 	.word	0x40001800
 800faa8:	40014000 	.word	0x40014000
 800faac:	4000e000 	.word	0x4000e000
 800fab0:	4000e400 	.word	0x4000e400
 800fab4:	00010007 	.word	0x00010007

0800fab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d101      	bne.n	800faca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fac6:	2301      	movs	r3, #1
 800fac8:	e049      	b.n	800fb5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d106      	bne.n	800fae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2200      	movs	r2, #0
 800fada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7f4 f888 	bl	8003bf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2202      	movs	r2, #2
 800fae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	3304      	adds	r3, #4
 800faf4:	4619      	mov	r1, r3
 800faf6:	4610      	mov	r0, r2
 800faf8:	f000 fbb8 	bl	801026c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2201      	movs	r2, #1
 800fb08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2201      	movs	r2, #1
 800fb18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2201      	movs	r2, #1
 800fb20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2201      	movs	r2, #1
 800fb28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2201      	movs	r2, #1
 800fb38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2201      	movs	r2, #1
 800fb50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2201      	movs	r2, #1
 800fb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
	...

0800fb68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d109      	bne.n	800fb8c <HAL_TIM_PWM_Start+0x24>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	bf14      	ite	ne
 800fb84:	2301      	movne	r3, #1
 800fb86:	2300      	moveq	r3, #0
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	e03c      	b.n	800fc06 <HAL_TIM_PWM_Start+0x9e>
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	2b04      	cmp	r3, #4
 800fb90:	d109      	bne.n	800fba6 <HAL_TIM_PWM_Start+0x3e>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	bf14      	ite	ne
 800fb9e:	2301      	movne	r3, #1
 800fba0:	2300      	moveq	r3, #0
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	e02f      	b.n	800fc06 <HAL_TIM_PWM_Start+0x9e>
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	2b08      	cmp	r3, #8
 800fbaa:	d109      	bne.n	800fbc0 <HAL_TIM_PWM_Start+0x58>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	bf14      	ite	ne
 800fbb8:	2301      	movne	r3, #1
 800fbba:	2300      	moveq	r3, #0
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	e022      	b.n	800fc06 <HAL_TIM_PWM_Start+0x9e>
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	2b0c      	cmp	r3, #12
 800fbc4:	d109      	bne.n	800fbda <HAL_TIM_PWM_Start+0x72>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	2b01      	cmp	r3, #1
 800fbd0:	bf14      	ite	ne
 800fbd2:	2301      	movne	r3, #1
 800fbd4:	2300      	moveq	r3, #0
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	e015      	b.n	800fc06 <HAL_TIM_PWM_Start+0x9e>
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	2b10      	cmp	r3, #16
 800fbde:	d109      	bne.n	800fbf4 <HAL_TIM_PWM_Start+0x8c>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	bf14      	ite	ne
 800fbec:	2301      	movne	r3, #1
 800fbee:	2300      	moveq	r3, #0
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	e008      	b.n	800fc06 <HAL_TIM_PWM_Start+0x9e>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	bf14      	ite	ne
 800fc00:	2301      	movne	r3, #1
 800fc02:	2300      	moveq	r3, #0
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d001      	beq.n	800fc0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e0ab      	b.n	800fd66 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d104      	bne.n	800fc1e <HAL_TIM_PWM_Start+0xb6>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2202      	movs	r2, #2
 800fc18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc1c:	e023      	b.n	800fc66 <HAL_TIM_PWM_Start+0xfe>
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	2b04      	cmp	r3, #4
 800fc22:	d104      	bne.n	800fc2e <HAL_TIM_PWM_Start+0xc6>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2202      	movs	r2, #2
 800fc28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc2c:	e01b      	b.n	800fc66 <HAL_TIM_PWM_Start+0xfe>
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	2b08      	cmp	r3, #8
 800fc32:	d104      	bne.n	800fc3e <HAL_TIM_PWM_Start+0xd6>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2202      	movs	r2, #2
 800fc38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc3c:	e013      	b.n	800fc66 <HAL_TIM_PWM_Start+0xfe>
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	2b0c      	cmp	r3, #12
 800fc42:	d104      	bne.n	800fc4e <HAL_TIM_PWM_Start+0xe6>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2202      	movs	r2, #2
 800fc48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fc4c:	e00b      	b.n	800fc66 <HAL_TIM_PWM_Start+0xfe>
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	2b10      	cmp	r3, #16
 800fc52:	d104      	bne.n	800fc5e <HAL_TIM_PWM_Start+0xf6>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2202      	movs	r2, #2
 800fc58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fc5c:	e003      	b.n	800fc66 <HAL_TIM_PWM_Start+0xfe>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2202      	movs	r2, #2
 800fc62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	6839      	ldr	r1, [r7, #0]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f000 fe78 	bl	8010964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a3d      	ldr	r2, [pc, #244]	; (800fd70 <HAL_TIM_PWM_Start+0x208>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d013      	beq.n	800fca6 <HAL_TIM_PWM_Start+0x13e>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4a3c      	ldr	r2, [pc, #240]	; (800fd74 <HAL_TIM_PWM_Start+0x20c>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d00e      	beq.n	800fca6 <HAL_TIM_PWM_Start+0x13e>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a3a      	ldr	r2, [pc, #232]	; (800fd78 <HAL_TIM_PWM_Start+0x210>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d009      	beq.n	800fca6 <HAL_TIM_PWM_Start+0x13e>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	4a39      	ldr	r2, [pc, #228]	; (800fd7c <HAL_TIM_PWM_Start+0x214>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d004      	beq.n	800fca6 <HAL_TIM_PWM_Start+0x13e>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4a37      	ldr	r2, [pc, #220]	; (800fd80 <HAL_TIM_PWM_Start+0x218>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d101      	bne.n	800fcaa <HAL_TIM_PWM_Start+0x142>
 800fca6:	2301      	movs	r3, #1
 800fca8:	e000      	b.n	800fcac <HAL_TIM_PWM_Start+0x144>
 800fcaa:	2300      	movs	r3, #0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d007      	beq.n	800fcc0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fcbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4a2a      	ldr	r2, [pc, #168]	; (800fd70 <HAL_TIM_PWM_Start+0x208>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d02c      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcd2:	d027      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4a2a      	ldr	r2, [pc, #168]	; (800fd84 <HAL_TIM_PWM_Start+0x21c>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d022      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4a29      	ldr	r2, [pc, #164]	; (800fd88 <HAL_TIM_PWM_Start+0x220>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d01d      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4a27      	ldr	r2, [pc, #156]	; (800fd8c <HAL_TIM_PWM_Start+0x224>)
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d018      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	4a1f      	ldr	r2, [pc, #124]	; (800fd74 <HAL_TIM_PWM_Start+0x20c>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d013      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4a23      	ldr	r2, [pc, #140]	; (800fd90 <HAL_TIM_PWM_Start+0x228>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d00e      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4a1b      	ldr	r2, [pc, #108]	; (800fd78 <HAL_TIM_PWM_Start+0x210>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d009      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4a1f      	ldr	r2, [pc, #124]	; (800fd94 <HAL_TIM_PWM_Start+0x22c>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d004      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4a1e      	ldr	r2, [pc, #120]	; (800fd98 <HAL_TIM_PWM_Start+0x230>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d115      	bne.n	800fd50 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	689a      	ldr	r2, [r3, #8]
 800fd2a:	4b1c      	ldr	r3, [pc, #112]	; (800fd9c <HAL_TIM_PWM_Start+0x234>)
 800fd2c:	4013      	ands	r3, r2
 800fd2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2b06      	cmp	r3, #6
 800fd34:	d015      	beq.n	800fd62 <HAL_TIM_PWM_Start+0x1fa>
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd3c:	d011      	beq.n	800fd62 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f042 0201 	orr.w	r2, r2, #1
 800fd4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd4e:	e008      	b.n	800fd62 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f042 0201 	orr.w	r2, r2, #1
 800fd5e:	601a      	str	r2, [r3, #0]
 800fd60:	e000      	b.n	800fd64 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fd64:	2300      	movs	r3, #0
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	40010000 	.word	0x40010000
 800fd74:	40010400 	.word	0x40010400
 800fd78:	40014000 	.word	0x40014000
 800fd7c:	40014400 	.word	0x40014400
 800fd80:	40014800 	.word	0x40014800
 800fd84:	40000400 	.word	0x40000400
 800fd88:	40000800 	.word	0x40000800
 800fd8c:	40000c00 	.word	0x40000c00
 800fd90:	40001800 	.word	0x40001800
 800fd94:	4000e000 	.word	0x4000e000
 800fd98:	4000e400 	.word	0x4000e400
 800fd9c:	00010007 	.word	0x00010007

0800fda0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	691b      	ldr	r3, [r3, #16]
 800fdae:	f003 0302 	and.w	r3, r3, #2
 800fdb2:	2b02      	cmp	r3, #2
 800fdb4:	d122      	bne.n	800fdfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	f003 0302 	and.w	r3, r3, #2
 800fdc0:	2b02      	cmp	r3, #2
 800fdc2:	d11b      	bne.n	800fdfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f06f 0202 	mvn.w	r2, #2
 800fdcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	699b      	ldr	r3, [r3, #24]
 800fdda:	f003 0303 	and.w	r3, r3, #3
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d003      	beq.n	800fdea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 fa24 	bl	8010230 <HAL_TIM_IC_CaptureCallback>
 800fde8:	e005      	b.n	800fdf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 fa16 	bl	801021c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f000 fa27 	bl	8010244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	691b      	ldr	r3, [r3, #16]
 800fe02:	f003 0304 	and.w	r3, r3, #4
 800fe06:	2b04      	cmp	r3, #4
 800fe08:	d122      	bne.n	800fe50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	f003 0304 	and.w	r3, r3, #4
 800fe14:	2b04      	cmp	r3, #4
 800fe16:	d11b      	bne.n	800fe50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f06f 0204 	mvn.w	r2, #4
 800fe20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2202      	movs	r2, #2
 800fe26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	699b      	ldr	r3, [r3, #24]
 800fe2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d003      	beq.n	800fe3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 f9fa 	bl	8010230 <HAL_TIM_IC_CaptureCallback>
 800fe3c:	e005      	b.n	800fe4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 f9ec 	bl	801021c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 f9fd 	bl	8010244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	691b      	ldr	r3, [r3, #16]
 800fe56:	f003 0308 	and.w	r3, r3, #8
 800fe5a:	2b08      	cmp	r3, #8
 800fe5c:	d122      	bne.n	800fea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	f003 0308 	and.w	r3, r3, #8
 800fe68:	2b08      	cmp	r3, #8
 800fe6a:	d11b      	bne.n	800fea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f06f 0208 	mvn.w	r2, #8
 800fe74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2204      	movs	r2, #4
 800fe7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	69db      	ldr	r3, [r3, #28]
 800fe82:	f003 0303 	and.w	r3, r3, #3
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d003      	beq.n	800fe92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f000 f9d0 	bl	8010230 <HAL_TIM_IC_CaptureCallback>
 800fe90:	e005      	b.n	800fe9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f000 f9c2 	bl	801021c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 f9d3 	bl	8010244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2200      	movs	r2, #0
 800fea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	f003 0310 	and.w	r3, r3, #16
 800feae:	2b10      	cmp	r3, #16
 800feb0:	d122      	bne.n	800fef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	f003 0310 	and.w	r3, r3, #16
 800febc:	2b10      	cmp	r3, #16
 800febe:	d11b      	bne.n	800fef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	f06f 0210 	mvn.w	r2, #16
 800fec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2208      	movs	r2, #8
 800fece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	69db      	ldr	r3, [r3, #28]
 800fed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d003      	beq.n	800fee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 f9a6 	bl	8010230 <HAL_TIM_IC_CaptureCallback>
 800fee4:	e005      	b.n	800fef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f000 f998 	bl	801021c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 f9a9 	bl	8010244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	691b      	ldr	r3, [r3, #16]
 800fefe:	f003 0301 	and.w	r3, r3, #1
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d10e      	bne.n	800ff24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	f003 0301 	and.w	r3, r3, #1
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d107      	bne.n	800ff24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f06f 0201 	mvn.w	r2, #1
 800ff1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 f972 	bl	8010208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	691b      	ldr	r3, [r3, #16]
 800ff2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff2e:	2b80      	cmp	r3, #128	; 0x80
 800ff30:	d10e      	bne.n	800ff50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff3c:	2b80      	cmp	r3, #128	; 0x80
 800ff3e:	d107      	bne.n	800ff50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ff48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f000 fdd6 	bl	8010afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	691b      	ldr	r3, [r3, #16]
 800ff56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff5e:	d10e      	bne.n	800ff7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff6a:	2b80      	cmp	r3, #128	; 0x80
 800ff6c:	d107      	bne.n	800ff7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ff76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 fdc9 	bl	8010b10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	691b      	ldr	r3, [r3, #16]
 800ff84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff88:	2b40      	cmp	r3, #64	; 0x40
 800ff8a:	d10e      	bne.n	800ffaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff96:	2b40      	cmp	r3, #64	; 0x40
 800ff98:	d107      	bne.n	800ffaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ffa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f000 f957 	bl	8010258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	691b      	ldr	r3, [r3, #16]
 800ffb0:	f003 0320 	and.w	r3, r3, #32
 800ffb4:	2b20      	cmp	r3, #32
 800ffb6:	d10e      	bne.n	800ffd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	f003 0320 	and.w	r3, r3, #32
 800ffc2:	2b20      	cmp	r3, #32
 800ffc4:	d107      	bne.n	800ffd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	f06f 0220 	mvn.w	r2, #32
 800ffce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f000 fd89 	bl	8010ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ffd6:	bf00      	nop
 800ffd8:	3708      	adds	r7, #8
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
	...

0800ffe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ffec:	2300      	movs	r3, #0
 800ffee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d101      	bne.n	800fffe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fffa:	2302      	movs	r3, #2
 800fffc:	e0ff      	b.n	80101fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2201      	movs	r2, #1
 8010002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2b14      	cmp	r3, #20
 801000a:	f200 80f0 	bhi.w	80101ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 801000e:	a201      	add	r2, pc, #4	; (adr r2, 8010014 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010014:	08010069 	.word	0x08010069
 8010018:	080101ef 	.word	0x080101ef
 801001c:	080101ef 	.word	0x080101ef
 8010020:	080101ef 	.word	0x080101ef
 8010024:	080100a9 	.word	0x080100a9
 8010028:	080101ef 	.word	0x080101ef
 801002c:	080101ef 	.word	0x080101ef
 8010030:	080101ef 	.word	0x080101ef
 8010034:	080100eb 	.word	0x080100eb
 8010038:	080101ef 	.word	0x080101ef
 801003c:	080101ef 	.word	0x080101ef
 8010040:	080101ef 	.word	0x080101ef
 8010044:	0801012b 	.word	0x0801012b
 8010048:	080101ef 	.word	0x080101ef
 801004c:	080101ef 	.word	0x080101ef
 8010050:	080101ef 	.word	0x080101ef
 8010054:	0801016d 	.word	0x0801016d
 8010058:	080101ef 	.word	0x080101ef
 801005c:	080101ef 	.word	0x080101ef
 8010060:	080101ef 	.word	0x080101ef
 8010064:	080101ad 	.word	0x080101ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	68b9      	ldr	r1, [r7, #8]
 801006e:	4618      	mov	r0, r3
 8010070:	f000 f9a2 	bl	80103b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	699a      	ldr	r2, [r3, #24]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f042 0208 	orr.w	r2, r2, #8
 8010082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	699a      	ldr	r2, [r3, #24]
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f022 0204 	bic.w	r2, r2, #4
 8010092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	6999      	ldr	r1, [r3, #24]
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	691a      	ldr	r2, [r3, #16]
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	430a      	orrs	r2, r1
 80100a4:	619a      	str	r2, [r3, #24]
      break;
 80100a6:	e0a5      	b.n	80101f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68b9      	ldr	r1, [r7, #8]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f000 fa12 	bl	80104d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	699a      	ldr	r2, [r3, #24]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80100c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	699a      	ldr	r2, [r3, #24]
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80100d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	6999      	ldr	r1, [r3, #24]
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	691b      	ldr	r3, [r3, #16]
 80100de:	021a      	lsls	r2, r3, #8
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	430a      	orrs	r2, r1
 80100e6:	619a      	str	r2, [r3, #24]
      break;
 80100e8:	e084      	b.n	80101f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	68b9      	ldr	r1, [r7, #8]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f000 fa7b 	bl	80105ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	69da      	ldr	r2, [r3, #28]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f042 0208 	orr.w	r2, r2, #8
 8010104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	69da      	ldr	r2, [r3, #28]
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f022 0204 	bic.w	r2, r2, #4
 8010114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	69d9      	ldr	r1, [r3, #28]
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	691a      	ldr	r2, [r3, #16]
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	430a      	orrs	r2, r1
 8010126:	61da      	str	r2, [r3, #28]
      break;
 8010128:	e064      	b.n	80101f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	68b9      	ldr	r1, [r7, #8]
 8010130:	4618      	mov	r0, r3
 8010132:	f000 fae3 	bl	80106fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	69da      	ldr	r2, [r3, #28]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	69da      	ldr	r2, [r3, #28]
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	69d9      	ldr	r1, [r3, #28]
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	021a      	lsls	r2, r3, #8
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	430a      	orrs	r2, r1
 8010168:	61da      	str	r2, [r3, #28]
      break;
 801016a:	e043      	b.n	80101f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	68b9      	ldr	r1, [r7, #8]
 8010172:	4618      	mov	r0, r3
 8010174:	f000 fb2c 	bl	80107d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	f042 0208 	orr.w	r2, r2, #8
 8010186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f022 0204 	bic.w	r2, r2, #4
 8010196:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	691a      	ldr	r2, [r3, #16]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	430a      	orrs	r2, r1
 80101a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80101aa:	e023      	b.n	80101f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	68b9      	ldr	r1, [r7, #8]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f000 fb70 	bl	8010898 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80101c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80101d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	691b      	ldr	r3, [r3, #16]
 80101e2:	021a      	lsls	r2, r3, #8
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	430a      	orrs	r2, r1
 80101ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80101ec:	e002      	b.n	80101f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80101ee:	2301      	movs	r3, #1
 80101f0:	75fb      	strb	r3, [r7, #23]
      break;
 80101f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2200      	movs	r2, #0
 80101f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80101fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3718      	adds	r7, #24
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop

08010208 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010208:	b480      	push	{r7}
 801020a:	b083      	sub	sp, #12
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010210:	bf00      	nop
 8010212:	370c      	adds	r7, #12
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010224:	bf00      	nop
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010238:	bf00      	nop
 801023a:	370c      	adds	r7, #12
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr

08010244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801024c:	bf00      	nop
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010260:	bf00      	nop
 8010262:	370c      	adds	r7, #12
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr

0801026c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801026c:	b480      	push	{r7}
 801026e:	b085      	sub	sp, #20
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	4a44      	ldr	r2, [pc, #272]	; (8010390 <TIM_Base_SetConfig+0x124>)
 8010280:	4293      	cmp	r3, r2
 8010282:	d013      	beq.n	80102ac <TIM_Base_SetConfig+0x40>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801028a:	d00f      	beq.n	80102ac <TIM_Base_SetConfig+0x40>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4a41      	ldr	r2, [pc, #260]	; (8010394 <TIM_Base_SetConfig+0x128>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d00b      	beq.n	80102ac <TIM_Base_SetConfig+0x40>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4a40      	ldr	r2, [pc, #256]	; (8010398 <TIM_Base_SetConfig+0x12c>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d007      	beq.n	80102ac <TIM_Base_SetConfig+0x40>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	4a3f      	ldr	r2, [pc, #252]	; (801039c <TIM_Base_SetConfig+0x130>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d003      	beq.n	80102ac <TIM_Base_SetConfig+0x40>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	4a3e      	ldr	r2, [pc, #248]	; (80103a0 <TIM_Base_SetConfig+0x134>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d108      	bne.n	80102be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	4313      	orrs	r3, r2
 80102bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	4a33      	ldr	r2, [pc, #204]	; (8010390 <TIM_Base_SetConfig+0x124>)
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d027      	beq.n	8010316 <TIM_Base_SetConfig+0xaa>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102cc:	d023      	beq.n	8010316 <TIM_Base_SetConfig+0xaa>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	4a30      	ldr	r2, [pc, #192]	; (8010394 <TIM_Base_SetConfig+0x128>)
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d01f      	beq.n	8010316 <TIM_Base_SetConfig+0xaa>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4a2f      	ldr	r2, [pc, #188]	; (8010398 <TIM_Base_SetConfig+0x12c>)
 80102da:	4293      	cmp	r3, r2
 80102dc:	d01b      	beq.n	8010316 <TIM_Base_SetConfig+0xaa>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4a2e      	ldr	r2, [pc, #184]	; (801039c <TIM_Base_SetConfig+0x130>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d017      	beq.n	8010316 <TIM_Base_SetConfig+0xaa>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4a2d      	ldr	r2, [pc, #180]	; (80103a0 <TIM_Base_SetConfig+0x134>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d013      	beq.n	8010316 <TIM_Base_SetConfig+0xaa>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4a2c      	ldr	r2, [pc, #176]	; (80103a4 <TIM_Base_SetConfig+0x138>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d00f      	beq.n	8010316 <TIM_Base_SetConfig+0xaa>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	4a2b      	ldr	r2, [pc, #172]	; (80103a8 <TIM_Base_SetConfig+0x13c>)
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d00b      	beq.n	8010316 <TIM_Base_SetConfig+0xaa>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	4a2a      	ldr	r2, [pc, #168]	; (80103ac <TIM_Base_SetConfig+0x140>)
 8010302:	4293      	cmp	r3, r2
 8010304:	d007      	beq.n	8010316 <TIM_Base_SetConfig+0xaa>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	4a29      	ldr	r2, [pc, #164]	; (80103b0 <TIM_Base_SetConfig+0x144>)
 801030a:	4293      	cmp	r3, r2
 801030c:	d003      	beq.n	8010316 <TIM_Base_SetConfig+0xaa>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	4a28      	ldr	r2, [pc, #160]	; (80103b4 <TIM_Base_SetConfig+0x148>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d108      	bne.n	8010328 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801031c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	68db      	ldr	r3, [r3, #12]
 8010322:	68fa      	ldr	r2, [r7, #12]
 8010324:	4313      	orrs	r3, r2
 8010326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	695b      	ldr	r3, [r3, #20]
 8010332:	4313      	orrs	r3, r2
 8010334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	68fa      	ldr	r2, [r7, #12]
 801033a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	689a      	ldr	r2, [r3, #8]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4a10      	ldr	r2, [pc, #64]	; (8010390 <TIM_Base_SetConfig+0x124>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d00f      	beq.n	8010374 <TIM_Base_SetConfig+0x108>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4a12      	ldr	r2, [pc, #72]	; (80103a0 <TIM_Base_SetConfig+0x134>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d00b      	beq.n	8010374 <TIM_Base_SetConfig+0x108>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	4a11      	ldr	r2, [pc, #68]	; (80103a4 <TIM_Base_SetConfig+0x138>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d007      	beq.n	8010374 <TIM_Base_SetConfig+0x108>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	4a10      	ldr	r2, [pc, #64]	; (80103a8 <TIM_Base_SetConfig+0x13c>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d003      	beq.n	8010374 <TIM_Base_SetConfig+0x108>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	4a0f      	ldr	r2, [pc, #60]	; (80103ac <TIM_Base_SetConfig+0x140>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d103      	bne.n	801037c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	691a      	ldr	r2, [r3, #16]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2201      	movs	r2, #1
 8010380:	615a      	str	r2, [r3, #20]
}
 8010382:	bf00      	nop
 8010384:	3714      	adds	r7, #20
 8010386:	46bd      	mov	sp, r7
 8010388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop
 8010390:	40010000 	.word	0x40010000
 8010394:	40000400 	.word	0x40000400
 8010398:	40000800 	.word	0x40000800
 801039c:	40000c00 	.word	0x40000c00
 80103a0:	40010400 	.word	0x40010400
 80103a4:	40014000 	.word	0x40014000
 80103a8:	40014400 	.word	0x40014400
 80103ac:	40014800 	.word	0x40014800
 80103b0:	4000e000 	.word	0x4000e000
 80103b4:	4000e400 	.word	0x4000e400

080103b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b087      	sub	sp, #28
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6a1b      	ldr	r3, [r3, #32]
 80103c6:	f023 0201 	bic.w	r2, r3, #1
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6a1b      	ldr	r3, [r3, #32]
 80103d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	699b      	ldr	r3, [r3, #24]
 80103de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80103e0:	68fa      	ldr	r2, [r7, #12]
 80103e2:	4b37      	ldr	r3, [pc, #220]	; (80104c0 <TIM_OC1_SetConfig+0x108>)
 80103e4:	4013      	ands	r3, r2
 80103e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	f023 0303 	bic.w	r3, r3, #3
 80103ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	68fa      	ldr	r2, [r7, #12]
 80103f6:	4313      	orrs	r3, r2
 80103f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	f023 0302 	bic.w	r3, r3, #2
 8010400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	697a      	ldr	r2, [r7, #20]
 8010408:	4313      	orrs	r3, r2
 801040a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	4a2d      	ldr	r2, [pc, #180]	; (80104c4 <TIM_OC1_SetConfig+0x10c>)
 8010410:	4293      	cmp	r3, r2
 8010412:	d00f      	beq.n	8010434 <TIM_OC1_SetConfig+0x7c>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	4a2c      	ldr	r2, [pc, #176]	; (80104c8 <TIM_OC1_SetConfig+0x110>)
 8010418:	4293      	cmp	r3, r2
 801041a:	d00b      	beq.n	8010434 <TIM_OC1_SetConfig+0x7c>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	4a2b      	ldr	r2, [pc, #172]	; (80104cc <TIM_OC1_SetConfig+0x114>)
 8010420:	4293      	cmp	r3, r2
 8010422:	d007      	beq.n	8010434 <TIM_OC1_SetConfig+0x7c>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	4a2a      	ldr	r2, [pc, #168]	; (80104d0 <TIM_OC1_SetConfig+0x118>)
 8010428:	4293      	cmp	r3, r2
 801042a:	d003      	beq.n	8010434 <TIM_OC1_SetConfig+0x7c>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	4a29      	ldr	r2, [pc, #164]	; (80104d4 <TIM_OC1_SetConfig+0x11c>)
 8010430:	4293      	cmp	r3, r2
 8010432:	d10c      	bne.n	801044e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	f023 0308 	bic.w	r3, r3, #8
 801043a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	68db      	ldr	r3, [r3, #12]
 8010440:	697a      	ldr	r2, [r7, #20]
 8010442:	4313      	orrs	r3, r2
 8010444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	f023 0304 	bic.w	r3, r3, #4
 801044c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4a1c      	ldr	r2, [pc, #112]	; (80104c4 <TIM_OC1_SetConfig+0x10c>)
 8010452:	4293      	cmp	r3, r2
 8010454:	d00f      	beq.n	8010476 <TIM_OC1_SetConfig+0xbe>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	4a1b      	ldr	r2, [pc, #108]	; (80104c8 <TIM_OC1_SetConfig+0x110>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d00b      	beq.n	8010476 <TIM_OC1_SetConfig+0xbe>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4a1a      	ldr	r2, [pc, #104]	; (80104cc <TIM_OC1_SetConfig+0x114>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d007      	beq.n	8010476 <TIM_OC1_SetConfig+0xbe>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	4a19      	ldr	r2, [pc, #100]	; (80104d0 <TIM_OC1_SetConfig+0x118>)
 801046a:	4293      	cmp	r3, r2
 801046c:	d003      	beq.n	8010476 <TIM_OC1_SetConfig+0xbe>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	4a18      	ldr	r2, [pc, #96]	; (80104d4 <TIM_OC1_SetConfig+0x11c>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d111      	bne.n	801049a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801047c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	695b      	ldr	r3, [r3, #20]
 801048a:	693a      	ldr	r2, [r7, #16]
 801048c:	4313      	orrs	r3, r2
 801048e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	699b      	ldr	r3, [r3, #24]
 8010494:	693a      	ldr	r2, [r7, #16]
 8010496:	4313      	orrs	r3, r2
 8010498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	693a      	ldr	r2, [r7, #16]
 801049e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	68fa      	ldr	r2, [r7, #12]
 80104a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	685a      	ldr	r2, [r3, #4]
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	697a      	ldr	r2, [r7, #20]
 80104b2:	621a      	str	r2, [r3, #32]
}
 80104b4:	bf00      	nop
 80104b6:	371c      	adds	r7, #28
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr
 80104c0:	fffeff8f 	.word	0xfffeff8f
 80104c4:	40010000 	.word	0x40010000
 80104c8:	40010400 	.word	0x40010400
 80104cc:	40014000 	.word	0x40014000
 80104d0:	40014400 	.word	0x40014400
 80104d4:	40014800 	.word	0x40014800

080104d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80104d8:	b480      	push	{r7}
 80104da:	b087      	sub	sp, #28
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6a1b      	ldr	r3, [r3, #32]
 80104e6:	f023 0210 	bic.w	r2, r3, #16
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6a1b      	ldr	r3, [r3, #32]
 80104f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	699b      	ldr	r3, [r3, #24]
 80104fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010500:	68fa      	ldr	r2, [r7, #12]
 8010502:	4b34      	ldr	r3, [pc, #208]	; (80105d4 <TIM_OC2_SetConfig+0xfc>)
 8010504:	4013      	ands	r3, r2
 8010506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801050e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	021b      	lsls	r3, r3, #8
 8010516:	68fa      	ldr	r2, [r7, #12]
 8010518:	4313      	orrs	r3, r2
 801051a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	f023 0320 	bic.w	r3, r3, #32
 8010522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	011b      	lsls	r3, r3, #4
 801052a:	697a      	ldr	r2, [r7, #20]
 801052c:	4313      	orrs	r3, r2
 801052e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	4a29      	ldr	r2, [pc, #164]	; (80105d8 <TIM_OC2_SetConfig+0x100>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d003      	beq.n	8010540 <TIM_OC2_SetConfig+0x68>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	4a28      	ldr	r2, [pc, #160]	; (80105dc <TIM_OC2_SetConfig+0x104>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d10d      	bne.n	801055c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	011b      	lsls	r3, r3, #4
 801054e:	697a      	ldr	r2, [r7, #20]
 8010550:	4313      	orrs	r3, r2
 8010552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801055a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	4a1e      	ldr	r2, [pc, #120]	; (80105d8 <TIM_OC2_SetConfig+0x100>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d00f      	beq.n	8010584 <TIM_OC2_SetConfig+0xac>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	4a1d      	ldr	r2, [pc, #116]	; (80105dc <TIM_OC2_SetConfig+0x104>)
 8010568:	4293      	cmp	r3, r2
 801056a:	d00b      	beq.n	8010584 <TIM_OC2_SetConfig+0xac>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	4a1c      	ldr	r2, [pc, #112]	; (80105e0 <TIM_OC2_SetConfig+0x108>)
 8010570:	4293      	cmp	r3, r2
 8010572:	d007      	beq.n	8010584 <TIM_OC2_SetConfig+0xac>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	4a1b      	ldr	r2, [pc, #108]	; (80105e4 <TIM_OC2_SetConfig+0x10c>)
 8010578:	4293      	cmp	r3, r2
 801057a:	d003      	beq.n	8010584 <TIM_OC2_SetConfig+0xac>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	4a1a      	ldr	r2, [pc, #104]	; (80105e8 <TIM_OC2_SetConfig+0x110>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d113      	bne.n	80105ac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801058a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	695b      	ldr	r3, [r3, #20]
 8010598:	009b      	lsls	r3, r3, #2
 801059a:	693a      	ldr	r2, [r7, #16]
 801059c:	4313      	orrs	r3, r2
 801059e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	699b      	ldr	r3, [r3, #24]
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	693a      	ldr	r2, [r7, #16]
 80105a8:	4313      	orrs	r3, r2
 80105aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	693a      	ldr	r2, [r7, #16]
 80105b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	685a      	ldr	r2, [r3, #4]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	621a      	str	r2, [r3, #32]
}
 80105c6:	bf00      	nop
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr
 80105d2:	bf00      	nop
 80105d4:	feff8fff 	.word	0xfeff8fff
 80105d8:	40010000 	.word	0x40010000
 80105dc:	40010400 	.word	0x40010400
 80105e0:	40014000 	.word	0x40014000
 80105e4:	40014400 	.word	0x40014400
 80105e8:	40014800 	.word	0x40014800

080105ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b087      	sub	sp, #28
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6a1b      	ldr	r3, [r3, #32]
 80105fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6a1b      	ldr	r3, [r3, #32]
 8010606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	69db      	ldr	r3, [r3, #28]
 8010612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010614:	68fa      	ldr	r2, [r7, #12]
 8010616:	4b33      	ldr	r3, [pc, #204]	; (80106e4 <TIM_OC3_SetConfig+0xf8>)
 8010618:	4013      	ands	r3, r2
 801061a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f023 0303 	bic.w	r3, r3, #3
 8010622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	68fa      	ldr	r2, [r7, #12]
 801062a:	4313      	orrs	r3, r2
 801062c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	689b      	ldr	r3, [r3, #8]
 801063a:	021b      	lsls	r3, r3, #8
 801063c:	697a      	ldr	r2, [r7, #20]
 801063e:	4313      	orrs	r3, r2
 8010640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	4a28      	ldr	r2, [pc, #160]	; (80106e8 <TIM_OC3_SetConfig+0xfc>)
 8010646:	4293      	cmp	r3, r2
 8010648:	d003      	beq.n	8010652 <TIM_OC3_SetConfig+0x66>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4a27      	ldr	r2, [pc, #156]	; (80106ec <TIM_OC3_SetConfig+0x100>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d10d      	bne.n	801066e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	68db      	ldr	r3, [r3, #12]
 801065e:	021b      	lsls	r3, r3, #8
 8010660:	697a      	ldr	r2, [r7, #20]
 8010662:	4313      	orrs	r3, r2
 8010664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801066c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4a1d      	ldr	r2, [pc, #116]	; (80106e8 <TIM_OC3_SetConfig+0xfc>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d00f      	beq.n	8010696 <TIM_OC3_SetConfig+0xaa>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4a1c      	ldr	r2, [pc, #112]	; (80106ec <TIM_OC3_SetConfig+0x100>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d00b      	beq.n	8010696 <TIM_OC3_SetConfig+0xaa>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	4a1b      	ldr	r2, [pc, #108]	; (80106f0 <TIM_OC3_SetConfig+0x104>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d007      	beq.n	8010696 <TIM_OC3_SetConfig+0xaa>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	4a1a      	ldr	r2, [pc, #104]	; (80106f4 <TIM_OC3_SetConfig+0x108>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d003      	beq.n	8010696 <TIM_OC3_SetConfig+0xaa>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4a19      	ldr	r2, [pc, #100]	; (80106f8 <TIM_OC3_SetConfig+0x10c>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d113      	bne.n	80106be <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801069c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	695b      	ldr	r3, [r3, #20]
 80106aa:	011b      	lsls	r3, r3, #4
 80106ac:	693a      	ldr	r2, [r7, #16]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	699b      	ldr	r3, [r3, #24]
 80106b6:	011b      	lsls	r3, r3, #4
 80106b8:	693a      	ldr	r2, [r7, #16]
 80106ba:	4313      	orrs	r3, r2
 80106bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	693a      	ldr	r2, [r7, #16]
 80106c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	68fa      	ldr	r2, [r7, #12]
 80106c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	685a      	ldr	r2, [r3, #4]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	697a      	ldr	r2, [r7, #20]
 80106d6:	621a      	str	r2, [r3, #32]
}
 80106d8:	bf00      	nop
 80106da:	371c      	adds	r7, #28
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr
 80106e4:	fffeff8f 	.word	0xfffeff8f
 80106e8:	40010000 	.word	0x40010000
 80106ec:	40010400 	.word	0x40010400
 80106f0:	40014000 	.word	0x40014000
 80106f4:	40014400 	.word	0x40014400
 80106f8:	40014800 	.word	0x40014800

080106fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b087      	sub	sp, #28
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6a1b      	ldr	r3, [r3, #32]
 801070a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6a1b      	ldr	r3, [r3, #32]
 8010716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	69db      	ldr	r3, [r3, #28]
 8010722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010724:	68fa      	ldr	r2, [r7, #12]
 8010726:	4b24      	ldr	r3, [pc, #144]	; (80107b8 <TIM_OC4_SetConfig+0xbc>)
 8010728:	4013      	ands	r3, r2
 801072a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	021b      	lsls	r3, r3, #8
 801073a:	68fa      	ldr	r2, [r7, #12]
 801073c:	4313      	orrs	r3, r2
 801073e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	689b      	ldr	r3, [r3, #8]
 801074c:	031b      	lsls	r3, r3, #12
 801074e:	693a      	ldr	r2, [r7, #16]
 8010750:	4313      	orrs	r3, r2
 8010752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	4a19      	ldr	r2, [pc, #100]	; (80107bc <TIM_OC4_SetConfig+0xc0>)
 8010758:	4293      	cmp	r3, r2
 801075a:	d00f      	beq.n	801077c <TIM_OC4_SetConfig+0x80>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	4a18      	ldr	r2, [pc, #96]	; (80107c0 <TIM_OC4_SetConfig+0xc4>)
 8010760:	4293      	cmp	r3, r2
 8010762:	d00b      	beq.n	801077c <TIM_OC4_SetConfig+0x80>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	4a17      	ldr	r2, [pc, #92]	; (80107c4 <TIM_OC4_SetConfig+0xc8>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d007      	beq.n	801077c <TIM_OC4_SetConfig+0x80>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4a16      	ldr	r2, [pc, #88]	; (80107c8 <TIM_OC4_SetConfig+0xcc>)
 8010770:	4293      	cmp	r3, r2
 8010772:	d003      	beq.n	801077c <TIM_OC4_SetConfig+0x80>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4a15      	ldr	r2, [pc, #84]	; (80107cc <TIM_OC4_SetConfig+0xd0>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d109      	bne.n	8010790 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	695b      	ldr	r3, [r3, #20]
 8010788:	019b      	lsls	r3, r3, #6
 801078a:	697a      	ldr	r2, [r7, #20]
 801078c:	4313      	orrs	r3, r2
 801078e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	697a      	ldr	r2, [r7, #20]
 8010794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	68fa      	ldr	r2, [r7, #12]
 801079a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	685a      	ldr	r2, [r3, #4]
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	693a      	ldr	r2, [r7, #16]
 80107a8:	621a      	str	r2, [r3, #32]
}
 80107aa:	bf00      	nop
 80107ac:	371c      	adds	r7, #28
 80107ae:	46bd      	mov	sp, r7
 80107b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b4:	4770      	bx	lr
 80107b6:	bf00      	nop
 80107b8:	feff8fff 	.word	0xfeff8fff
 80107bc:	40010000 	.word	0x40010000
 80107c0:	40010400 	.word	0x40010400
 80107c4:	40014000 	.word	0x40014000
 80107c8:	40014400 	.word	0x40014400
 80107cc:	40014800 	.word	0x40014800

080107d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b087      	sub	sp, #28
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6a1b      	ldr	r3, [r3, #32]
 80107de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6a1b      	ldr	r3, [r3, #32]
 80107ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80107f8:	68fa      	ldr	r2, [r7, #12]
 80107fa:	4b21      	ldr	r3, [pc, #132]	; (8010880 <TIM_OC5_SetConfig+0xb0>)
 80107fc:	4013      	ands	r3, r2
 80107fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	68fa      	ldr	r2, [r7, #12]
 8010806:	4313      	orrs	r3, r2
 8010808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010810:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	689b      	ldr	r3, [r3, #8]
 8010816:	041b      	lsls	r3, r3, #16
 8010818:	693a      	ldr	r2, [r7, #16]
 801081a:	4313      	orrs	r3, r2
 801081c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	4a18      	ldr	r2, [pc, #96]	; (8010884 <TIM_OC5_SetConfig+0xb4>)
 8010822:	4293      	cmp	r3, r2
 8010824:	d00f      	beq.n	8010846 <TIM_OC5_SetConfig+0x76>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4a17      	ldr	r2, [pc, #92]	; (8010888 <TIM_OC5_SetConfig+0xb8>)
 801082a:	4293      	cmp	r3, r2
 801082c:	d00b      	beq.n	8010846 <TIM_OC5_SetConfig+0x76>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	4a16      	ldr	r2, [pc, #88]	; (801088c <TIM_OC5_SetConfig+0xbc>)
 8010832:	4293      	cmp	r3, r2
 8010834:	d007      	beq.n	8010846 <TIM_OC5_SetConfig+0x76>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	4a15      	ldr	r2, [pc, #84]	; (8010890 <TIM_OC5_SetConfig+0xc0>)
 801083a:	4293      	cmp	r3, r2
 801083c:	d003      	beq.n	8010846 <TIM_OC5_SetConfig+0x76>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4a14      	ldr	r2, [pc, #80]	; (8010894 <TIM_OC5_SetConfig+0xc4>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d109      	bne.n	801085a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801084c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	695b      	ldr	r3, [r3, #20]
 8010852:	021b      	lsls	r3, r3, #8
 8010854:	697a      	ldr	r2, [r7, #20]
 8010856:	4313      	orrs	r3, r2
 8010858:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	697a      	ldr	r2, [r7, #20]
 801085e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	685a      	ldr	r2, [r3, #4]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	693a      	ldr	r2, [r7, #16]
 8010872:	621a      	str	r2, [r3, #32]
}
 8010874:	bf00      	nop
 8010876:	371c      	adds	r7, #28
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr
 8010880:	fffeff8f 	.word	0xfffeff8f
 8010884:	40010000 	.word	0x40010000
 8010888:	40010400 	.word	0x40010400
 801088c:	40014000 	.word	0x40014000
 8010890:	40014400 	.word	0x40014400
 8010894:	40014800 	.word	0x40014800

08010898 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010898:	b480      	push	{r7}
 801089a:	b087      	sub	sp, #28
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6a1b      	ldr	r3, [r3, #32]
 80108a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6a1b      	ldr	r3, [r3, #32]
 80108b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80108c0:	68fa      	ldr	r2, [r7, #12]
 80108c2:	4b22      	ldr	r3, [pc, #136]	; (801094c <TIM_OC6_SetConfig+0xb4>)
 80108c4:	4013      	ands	r3, r2
 80108c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	021b      	lsls	r3, r3, #8
 80108ce:	68fa      	ldr	r2, [r7, #12]
 80108d0:	4313      	orrs	r3, r2
 80108d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80108da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	689b      	ldr	r3, [r3, #8]
 80108e0:	051b      	lsls	r3, r3, #20
 80108e2:	693a      	ldr	r2, [r7, #16]
 80108e4:	4313      	orrs	r3, r2
 80108e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	4a19      	ldr	r2, [pc, #100]	; (8010950 <TIM_OC6_SetConfig+0xb8>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d00f      	beq.n	8010910 <TIM_OC6_SetConfig+0x78>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	4a18      	ldr	r2, [pc, #96]	; (8010954 <TIM_OC6_SetConfig+0xbc>)
 80108f4:	4293      	cmp	r3, r2
 80108f6:	d00b      	beq.n	8010910 <TIM_OC6_SetConfig+0x78>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	4a17      	ldr	r2, [pc, #92]	; (8010958 <TIM_OC6_SetConfig+0xc0>)
 80108fc:	4293      	cmp	r3, r2
 80108fe:	d007      	beq.n	8010910 <TIM_OC6_SetConfig+0x78>
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4a16      	ldr	r2, [pc, #88]	; (801095c <TIM_OC6_SetConfig+0xc4>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d003      	beq.n	8010910 <TIM_OC6_SetConfig+0x78>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4a15      	ldr	r2, [pc, #84]	; (8010960 <TIM_OC6_SetConfig+0xc8>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d109      	bne.n	8010924 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010916:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	695b      	ldr	r3, [r3, #20]
 801091c:	029b      	lsls	r3, r3, #10
 801091e:	697a      	ldr	r2, [r7, #20]
 8010920:	4313      	orrs	r3, r2
 8010922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	697a      	ldr	r2, [r7, #20]
 8010928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	68fa      	ldr	r2, [r7, #12]
 801092e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	685a      	ldr	r2, [r3, #4]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	693a      	ldr	r2, [r7, #16]
 801093c:	621a      	str	r2, [r3, #32]
}
 801093e:	bf00      	nop
 8010940:	371c      	adds	r7, #28
 8010942:	46bd      	mov	sp, r7
 8010944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop
 801094c:	feff8fff 	.word	0xfeff8fff
 8010950:	40010000 	.word	0x40010000
 8010954:	40010400 	.word	0x40010400
 8010958:	40014000 	.word	0x40014000
 801095c:	40014400 	.word	0x40014400
 8010960:	40014800 	.word	0x40014800

08010964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010964:	b480      	push	{r7}
 8010966:	b087      	sub	sp, #28
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	60b9      	str	r1, [r7, #8]
 801096e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	f003 031f 	and.w	r3, r3, #31
 8010976:	2201      	movs	r2, #1
 8010978:	fa02 f303 	lsl.w	r3, r2, r3
 801097c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	6a1a      	ldr	r2, [r3, #32]
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	43db      	mvns	r3, r3
 8010986:	401a      	ands	r2, r3
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6a1a      	ldr	r2, [r3, #32]
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	f003 031f 	and.w	r3, r3, #31
 8010996:	6879      	ldr	r1, [r7, #4]
 8010998:	fa01 f303 	lsl.w	r3, r1, r3
 801099c:	431a      	orrs	r2, r3
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	621a      	str	r2, [r3, #32]
}
 80109a2:	bf00      	nop
 80109a4:	371c      	adds	r7, #28
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr
	...

080109b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b085      	sub	sp, #20
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d101      	bne.n	80109c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80109c4:	2302      	movs	r3, #2
 80109c6:	e077      	b.n	8010ab8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2201      	movs	r2, #1
 80109cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2202      	movs	r2, #2
 80109d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	689b      	ldr	r3, [r3, #8]
 80109e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	4a35      	ldr	r2, [pc, #212]	; (8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80109ee:	4293      	cmp	r3, r2
 80109f0:	d004      	beq.n	80109fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	4a34      	ldr	r2, [pc, #208]	; (8010ac8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80109f8:	4293      	cmp	r3, r2
 80109fa:	d108      	bne.n	8010a0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010a02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	68fa      	ldr	r2, [r7, #12]
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	68fa      	ldr	r2, [r7, #12]
 8010a1c:	4313      	orrs	r3, r2
 8010a1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	68fa      	ldr	r2, [r7, #12]
 8010a26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4a25      	ldr	r2, [pc, #148]	; (8010ac4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d02c      	beq.n	8010a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a3a:	d027      	beq.n	8010a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4a22      	ldr	r2, [pc, #136]	; (8010acc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010a42:	4293      	cmp	r3, r2
 8010a44:	d022      	beq.n	8010a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4a21      	ldr	r2, [pc, #132]	; (8010ad0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d01d      	beq.n	8010a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4a1f      	ldr	r2, [pc, #124]	; (8010ad4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d018      	beq.n	8010a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4a1a      	ldr	r2, [pc, #104]	; (8010ac8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d013      	beq.n	8010a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4a1b      	ldr	r2, [pc, #108]	; (8010ad8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d00e      	beq.n	8010a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4a1a      	ldr	r2, [pc, #104]	; (8010adc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d009      	beq.n	8010a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4a18      	ldr	r2, [pc, #96]	; (8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d004      	beq.n	8010a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4a17      	ldr	r2, [pc, #92]	; (8010ae4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d10c      	bne.n	8010aa6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	68ba      	ldr	r2, [r7, #8]
 8010a9a:	4313      	orrs	r3, r2
 8010a9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	68ba      	ldr	r2, [r7, #8]
 8010aa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010ab6:	2300      	movs	r3, #0
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3714      	adds	r7, #20
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr
 8010ac4:	40010000 	.word	0x40010000
 8010ac8:	40010400 	.word	0x40010400
 8010acc:	40000400 	.word	0x40000400
 8010ad0:	40000800 	.word	0x40000800
 8010ad4:	40000c00 	.word	0x40000c00
 8010ad8:	40001800 	.word	0x40001800
 8010adc:	40014000 	.word	0x40014000
 8010ae0:	4000e000 	.word	0x4000e000
 8010ae4:	4000e400 	.word	0x4000e400

08010ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010af0:	bf00      	nop
 8010af2:	370c      	adds	r7, #12
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr

08010afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b083      	sub	sp, #12
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010b04:	bf00      	nop
 8010b06:	370c      	adds	r7, #12
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr

08010b10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010b10:	b480      	push	{r7}
 8010b12:	b083      	sub	sp, #12
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010b18:	bf00      	nop
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d101      	bne.n	8010b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010b32:	2301      	movs	r3, #1
 8010b34:	e042      	b.n	8010bbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d106      	bne.n	8010b4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7f3 fae7 	bl	800411c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2224      	movs	r2, #36	; 0x24
 8010b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f022 0201 	bic.w	r2, r2, #1
 8010b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 f82c 	bl	8010bc4 <UART_SetConfig>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b01      	cmp	r3, #1
 8010b70:	d101      	bne.n	8010b76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010b72:	2301      	movs	r3, #1
 8010b74:	e022      	b.n	8010bbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d002      	beq.n	8010b84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 fe8c 	bl	801189c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	685a      	ldr	r2, [r3, #4]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	689a      	ldr	r2, [r3, #8]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f042 0201 	orr.w	r2, r2, #1
 8010bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 ff13 	bl	80119e0 <UART_CheckIdleState>
 8010bba:	4603      	mov	r3, r0
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010bc8:	b092      	sub	sp, #72	; 0x48
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	689a      	ldr	r2, [r3, #8]
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	691b      	ldr	r3, [r3, #16]
 8010bdc:	431a      	orrs	r2, r3
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	695b      	ldr	r3, [r3, #20]
 8010be2:	431a      	orrs	r2, r3
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	69db      	ldr	r3, [r3, #28]
 8010be8:	4313      	orrs	r3, r2
 8010bea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	681a      	ldr	r2, [r3, #0]
 8010bf2:	4bbe      	ldr	r3, [pc, #760]	; (8010eec <UART_SetConfig+0x328>)
 8010bf4:	4013      	ands	r3, r2
 8010bf6:	697a      	ldr	r2, [r7, #20]
 8010bf8:	6812      	ldr	r2, [r2, #0]
 8010bfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010bfc:	430b      	orrs	r3, r1
 8010bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	68da      	ldr	r2, [r3, #12]
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	430a      	orrs	r2, r1
 8010c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	699b      	ldr	r3, [r3, #24]
 8010c1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	4ab3      	ldr	r2, [pc, #716]	; (8010ef0 <UART_SetConfig+0x32c>)
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d004      	beq.n	8010c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	6a1b      	ldr	r3, [r3, #32]
 8010c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c2c:	4313      	orrs	r3, r2
 8010c2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	689a      	ldr	r2, [r3, #8]
 8010c36:	4baf      	ldr	r3, [pc, #700]	; (8010ef4 <UART_SetConfig+0x330>)
 8010c38:	4013      	ands	r3, r2
 8010c3a:	697a      	ldr	r2, [r7, #20]
 8010c3c:	6812      	ldr	r2, [r2, #0]
 8010c3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c40:	430b      	orrs	r3, r1
 8010c42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c4a:	f023 010f 	bic.w	r1, r3, #15
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	430a      	orrs	r2, r1
 8010c58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	4aa6      	ldr	r2, [pc, #664]	; (8010ef8 <UART_SetConfig+0x334>)
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d177      	bne.n	8010d54 <UART_SetConfig+0x190>
 8010c64:	4ba5      	ldr	r3, [pc, #660]	; (8010efc <UART_SetConfig+0x338>)
 8010c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010c6c:	2b28      	cmp	r3, #40	; 0x28
 8010c6e:	d86d      	bhi.n	8010d4c <UART_SetConfig+0x188>
 8010c70:	a201      	add	r2, pc, #4	; (adr r2, 8010c78 <UART_SetConfig+0xb4>)
 8010c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c76:	bf00      	nop
 8010c78:	08010d1d 	.word	0x08010d1d
 8010c7c:	08010d4d 	.word	0x08010d4d
 8010c80:	08010d4d 	.word	0x08010d4d
 8010c84:	08010d4d 	.word	0x08010d4d
 8010c88:	08010d4d 	.word	0x08010d4d
 8010c8c:	08010d4d 	.word	0x08010d4d
 8010c90:	08010d4d 	.word	0x08010d4d
 8010c94:	08010d4d 	.word	0x08010d4d
 8010c98:	08010d25 	.word	0x08010d25
 8010c9c:	08010d4d 	.word	0x08010d4d
 8010ca0:	08010d4d 	.word	0x08010d4d
 8010ca4:	08010d4d 	.word	0x08010d4d
 8010ca8:	08010d4d 	.word	0x08010d4d
 8010cac:	08010d4d 	.word	0x08010d4d
 8010cb0:	08010d4d 	.word	0x08010d4d
 8010cb4:	08010d4d 	.word	0x08010d4d
 8010cb8:	08010d2d 	.word	0x08010d2d
 8010cbc:	08010d4d 	.word	0x08010d4d
 8010cc0:	08010d4d 	.word	0x08010d4d
 8010cc4:	08010d4d 	.word	0x08010d4d
 8010cc8:	08010d4d 	.word	0x08010d4d
 8010ccc:	08010d4d 	.word	0x08010d4d
 8010cd0:	08010d4d 	.word	0x08010d4d
 8010cd4:	08010d4d 	.word	0x08010d4d
 8010cd8:	08010d35 	.word	0x08010d35
 8010cdc:	08010d4d 	.word	0x08010d4d
 8010ce0:	08010d4d 	.word	0x08010d4d
 8010ce4:	08010d4d 	.word	0x08010d4d
 8010ce8:	08010d4d 	.word	0x08010d4d
 8010cec:	08010d4d 	.word	0x08010d4d
 8010cf0:	08010d4d 	.word	0x08010d4d
 8010cf4:	08010d4d 	.word	0x08010d4d
 8010cf8:	08010d3d 	.word	0x08010d3d
 8010cfc:	08010d4d 	.word	0x08010d4d
 8010d00:	08010d4d 	.word	0x08010d4d
 8010d04:	08010d4d 	.word	0x08010d4d
 8010d08:	08010d4d 	.word	0x08010d4d
 8010d0c:	08010d4d 	.word	0x08010d4d
 8010d10:	08010d4d 	.word	0x08010d4d
 8010d14:	08010d4d 	.word	0x08010d4d
 8010d18:	08010d45 	.word	0x08010d45
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d22:	e326      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010d24:	2304      	movs	r3, #4
 8010d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d2a:	e322      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010d2c:	2308      	movs	r3, #8
 8010d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d32:	e31e      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010d34:	2310      	movs	r3, #16
 8010d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d3a:	e31a      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010d3c:	2320      	movs	r3, #32
 8010d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d42:	e316      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010d44:	2340      	movs	r3, #64	; 0x40
 8010d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d4a:	e312      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010d4c:	2380      	movs	r3, #128	; 0x80
 8010d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d52:	e30e      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	4a69      	ldr	r2, [pc, #420]	; (8010f00 <UART_SetConfig+0x33c>)
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d130      	bne.n	8010dc0 <UART_SetConfig+0x1fc>
 8010d5e:	4b67      	ldr	r3, [pc, #412]	; (8010efc <UART_SetConfig+0x338>)
 8010d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d62:	f003 0307 	and.w	r3, r3, #7
 8010d66:	2b05      	cmp	r3, #5
 8010d68:	d826      	bhi.n	8010db8 <UART_SetConfig+0x1f4>
 8010d6a:	a201      	add	r2, pc, #4	; (adr r2, 8010d70 <UART_SetConfig+0x1ac>)
 8010d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d70:	08010d89 	.word	0x08010d89
 8010d74:	08010d91 	.word	0x08010d91
 8010d78:	08010d99 	.word	0x08010d99
 8010d7c:	08010da1 	.word	0x08010da1
 8010d80:	08010da9 	.word	0x08010da9
 8010d84:	08010db1 	.word	0x08010db1
 8010d88:	2300      	movs	r3, #0
 8010d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8e:	e2f0      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010d90:	2304      	movs	r3, #4
 8010d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d96:	e2ec      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010d98:	2308      	movs	r3, #8
 8010d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d9e:	e2e8      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010da0:	2310      	movs	r3, #16
 8010da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010da6:	e2e4      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010da8:	2320      	movs	r3, #32
 8010daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dae:	e2e0      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010db0:	2340      	movs	r3, #64	; 0x40
 8010db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db6:	e2dc      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010db8:	2380      	movs	r3, #128	; 0x80
 8010dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dbe:	e2d8      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4a4f      	ldr	r2, [pc, #316]	; (8010f04 <UART_SetConfig+0x340>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d130      	bne.n	8010e2c <UART_SetConfig+0x268>
 8010dca:	4b4c      	ldr	r3, [pc, #304]	; (8010efc <UART_SetConfig+0x338>)
 8010dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dce:	f003 0307 	and.w	r3, r3, #7
 8010dd2:	2b05      	cmp	r3, #5
 8010dd4:	d826      	bhi.n	8010e24 <UART_SetConfig+0x260>
 8010dd6:	a201      	add	r2, pc, #4	; (adr r2, 8010ddc <UART_SetConfig+0x218>)
 8010dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ddc:	08010df5 	.word	0x08010df5
 8010de0:	08010dfd 	.word	0x08010dfd
 8010de4:	08010e05 	.word	0x08010e05
 8010de8:	08010e0d 	.word	0x08010e0d
 8010dec:	08010e15 	.word	0x08010e15
 8010df0:	08010e1d 	.word	0x08010e1d
 8010df4:	2300      	movs	r3, #0
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e2ba      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010dfc:	2304      	movs	r3, #4
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e2b6      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e04:	2308      	movs	r3, #8
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e2b2      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e0c:	2310      	movs	r3, #16
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e12:	e2ae      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e14:	2320      	movs	r3, #32
 8010e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1a:	e2aa      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e1c:	2340      	movs	r3, #64	; 0x40
 8010e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e22:	e2a6      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e24:	2380      	movs	r3, #128	; 0x80
 8010e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e2a:	e2a2      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	4a35      	ldr	r2, [pc, #212]	; (8010f08 <UART_SetConfig+0x344>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d130      	bne.n	8010e98 <UART_SetConfig+0x2d4>
 8010e36:	4b31      	ldr	r3, [pc, #196]	; (8010efc <UART_SetConfig+0x338>)
 8010e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e3a:	f003 0307 	and.w	r3, r3, #7
 8010e3e:	2b05      	cmp	r3, #5
 8010e40:	d826      	bhi.n	8010e90 <UART_SetConfig+0x2cc>
 8010e42:	a201      	add	r2, pc, #4	; (adr r2, 8010e48 <UART_SetConfig+0x284>)
 8010e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e48:	08010e61 	.word	0x08010e61
 8010e4c:	08010e69 	.word	0x08010e69
 8010e50:	08010e71 	.word	0x08010e71
 8010e54:	08010e79 	.word	0x08010e79
 8010e58:	08010e81 	.word	0x08010e81
 8010e5c:	08010e89 	.word	0x08010e89
 8010e60:	2300      	movs	r3, #0
 8010e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e66:	e284      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e68:	2304      	movs	r3, #4
 8010e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6e:	e280      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e70:	2308      	movs	r3, #8
 8010e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e76:	e27c      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e78:	2310      	movs	r3, #16
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e278      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e80:	2320      	movs	r3, #32
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e86:	e274      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e88:	2340      	movs	r3, #64	; 0x40
 8010e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8e:	e270      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e90:	2380      	movs	r3, #128	; 0x80
 8010e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e96:	e26c      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4a1b      	ldr	r2, [pc, #108]	; (8010f0c <UART_SetConfig+0x348>)
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d142      	bne.n	8010f28 <UART_SetConfig+0x364>
 8010ea2:	4b16      	ldr	r3, [pc, #88]	; (8010efc <UART_SetConfig+0x338>)
 8010ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ea6:	f003 0307 	and.w	r3, r3, #7
 8010eaa:	2b05      	cmp	r3, #5
 8010eac:	d838      	bhi.n	8010f20 <UART_SetConfig+0x35c>
 8010eae:	a201      	add	r2, pc, #4	; (adr r2, 8010eb4 <UART_SetConfig+0x2f0>)
 8010eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb4:	08010ecd 	.word	0x08010ecd
 8010eb8:	08010ed5 	.word	0x08010ed5
 8010ebc:	08010edd 	.word	0x08010edd
 8010ec0:	08010ee5 	.word	0x08010ee5
 8010ec4:	08010f11 	.word	0x08010f11
 8010ec8:	08010f19 	.word	0x08010f19
 8010ecc:	2300      	movs	r3, #0
 8010ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed2:	e24e      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010ed4:	2304      	movs	r3, #4
 8010ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eda:	e24a      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010edc:	2308      	movs	r3, #8
 8010ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee2:	e246      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010ee4:	2310      	movs	r3, #16
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eea:	e242      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010eec:	cfff69f3 	.word	0xcfff69f3
 8010ef0:	58000c00 	.word	0x58000c00
 8010ef4:	11fff4ff 	.word	0x11fff4ff
 8010ef8:	40011000 	.word	0x40011000
 8010efc:	58024400 	.word	0x58024400
 8010f00:	40004400 	.word	0x40004400
 8010f04:	40004800 	.word	0x40004800
 8010f08:	40004c00 	.word	0x40004c00
 8010f0c:	40005000 	.word	0x40005000
 8010f10:	2320      	movs	r3, #32
 8010f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f16:	e22c      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010f18:	2340      	movs	r3, #64	; 0x40
 8010f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1e:	e228      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010f20:	2380      	movs	r3, #128	; 0x80
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f26:	e224      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4ab1      	ldr	r2, [pc, #708]	; (80111f4 <UART_SetConfig+0x630>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d176      	bne.n	8011020 <UART_SetConfig+0x45c>
 8010f32:	4bb1      	ldr	r3, [pc, #708]	; (80111f8 <UART_SetConfig+0x634>)
 8010f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f3a:	2b28      	cmp	r3, #40	; 0x28
 8010f3c:	d86c      	bhi.n	8011018 <UART_SetConfig+0x454>
 8010f3e:	a201      	add	r2, pc, #4	; (adr r2, 8010f44 <UART_SetConfig+0x380>)
 8010f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f44:	08010fe9 	.word	0x08010fe9
 8010f48:	08011019 	.word	0x08011019
 8010f4c:	08011019 	.word	0x08011019
 8010f50:	08011019 	.word	0x08011019
 8010f54:	08011019 	.word	0x08011019
 8010f58:	08011019 	.word	0x08011019
 8010f5c:	08011019 	.word	0x08011019
 8010f60:	08011019 	.word	0x08011019
 8010f64:	08010ff1 	.word	0x08010ff1
 8010f68:	08011019 	.word	0x08011019
 8010f6c:	08011019 	.word	0x08011019
 8010f70:	08011019 	.word	0x08011019
 8010f74:	08011019 	.word	0x08011019
 8010f78:	08011019 	.word	0x08011019
 8010f7c:	08011019 	.word	0x08011019
 8010f80:	08011019 	.word	0x08011019
 8010f84:	08010ff9 	.word	0x08010ff9
 8010f88:	08011019 	.word	0x08011019
 8010f8c:	08011019 	.word	0x08011019
 8010f90:	08011019 	.word	0x08011019
 8010f94:	08011019 	.word	0x08011019
 8010f98:	08011019 	.word	0x08011019
 8010f9c:	08011019 	.word	0x08011019
 8010fa0:	08011019 	.word	0x08011019
 8010fa4:	08011001 	.word	0x08011001
 8010fa8:	08011019 	.word	0x08011019
 8010fac:	08011019 	.word	0x08011019
 8010fb0:	08011019 	.word	0x08011019
 8010fb4:	08011019 	.word	0x08011019
 8010fb8:	08011019 	.word	0x08011019
 8010fbc:	08011019 	.word	0x08011019
 8010fc0:	08011019 	.word	0x08011019
 8010fc4:	08011009 	.word	0x08011009
 8010fc8:	08011019 	.word	0x08011019
 8010fcc:	08011019 	.word	0x08011019
 8010fd0:	08011019 	.word	0x08011019
 8010fd4:	08011019 	.word	0x08011019
 8010fd8:	08011019 	.word	0x08011019
 8010fdc:	08011019 	.word	0x08011019
 8010fe0:	08011019 	.word	0x08011019
 8010fe4:	08011011 	.word	0x08011011
 8010fe8:	2301      	movs	r3, #1
 8010fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fee:	e1c0      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010ff0:	2304      	movs	r3, #4
 8010ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ff6:	e1bc      	b.n	8011372 <UART_SetConfig+0x7ae>
 8010ff8:	2308      	movs	r3, #8
 8010ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ffe:	e1b8      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011000:	2310      	movs	r3, #16
 8011002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011006:	e1b4      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011008:	2320      	movs	r3, #32
 801100a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100e:	e1b0      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011010:	2340      	movs	r3, #64	; 0x40
 8011012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011016:	e1ac      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011018:	2380      	movs	r3, #128	; 0x80
 801101a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801101e:	e1a8      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	4a75      	ldr	r2, [pc, #468]	; (80111fc <UART_SetConfig+0x638>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d130      	bne.n	801108c <UART_SetConfig+0x4c8>
 801102a:	4b73      	ldr	r3, [pc, #460]	; (80111f8 <UART_SetConfig+0x634>)
 801102c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801102e:	f003 0307 	and.w	r3, r3, #7
 8011032:	2b05      	cmp	r3, #5
 8011034:	d826      	bhi.n	8011084 <UART_SetConfig+0x4c0>
 8011036:	a201      	add	r2, pc, #4	; (adr r2, 801103c <UART_SetConfig+0x478>)
 8011038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801103c:	08011055 	.word	0x08011055
 8011040:	0801105d 	.word	0x0801105d
 8011044:	08011065 	.word	0x08011065
 8011048:	0801106d 	.word	0x0801106d
 801104c:	08011075 	.word	0x08011075
 8011050:	0801107d 	.word	0x0801107d
 8011054:	2300      	movs	r3, #0
 8011056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105a:	e18a      	b.n	8011372 <UART_SetConfig+0x7ae>
 801105c:	2304      	movs	r3, #4
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011062:	e186      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011064:	2308      	movs	r3, #8
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e182      	b.n	8011372 <UART_SetConfig+0x7ae>
 801106c:	2310      	movs	r3, #16
 801106e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011072:	e17e      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011074:	2320      	movs	r3, #32
 8011076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107a:	e17a      	b.n	8011372 <UART_SetConfig+0x7ae>
 801107c:	2340      	movs	r3, #64	; 0x40
 801107e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011082:	e176      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011084:	2380      	movs	r3, #128	; 0x80
 8011086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108a:	e172      	b.n	8011372 <UART_SetConfig+0x7ae>
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	4a5b      	ldr	r2, [pc, #364]	; (8011200 <UART_SetConfig+0x63c>)
 8011092:	4293      	cmp	r3, r2
 8011094:	d130      	bne.n	80110f8 <UART_SetConfig+0x534>
 8011096:	4b58      	ldr	r3, [pc, #352]	; (80111f8 <UART_SetConfig+0x634>)
 8011098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801109a:	f003 0307 	and.w	r3, r3, #7
 801109e:	2b05      	cmp	r3, #5
 80110a0:	d826      	bhi.n	80110f0 <UART_SetConfig+0x52c>
 80110a2:	a201      	add	r2, pc, #4	; (adr r2, 80110a8 <UART_SetConfig+0x4e4>)
 80110a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a8:	080110c1 	.word	0x080110c1
 80110ac:	080110c9 	.word	0x080110c9
 80110b0:	080110d1 	.word	0x080110d1
 80110b4:	080110d9 	.word	0x080110d9
 80110b8:	080110e1 	.word	0x080110e1
 80110bc:	080110e9 	.word	0x080110e9
 80110c0:	2300      	movs	r3, #0
 80110c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c6:	e154      	b.n	8011372 <UART_SetConfig+0x7ae>
 80110c8:	2304      	movs	r3, #4
 80110ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ce:	e150      	b.n	8011372 <UART_SetConfig+0x7ae>
 80110d0:	2308      	movs	r3, #8
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e14c      	b.n	8011372 <UART_SetConfig+0x7ae>
 80110d8:	2310      	movs	r3, #16
 80110da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110de:	e148      	b.n	8011372 <UART_SetConfig+0x7ae>
 80110e0:	2320      	movs	r3, #32
 80110e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e6:	e144      	b.n	8011372 <UART_SetConfig+0x7ae>
 80110e8:	2340      	movs	r3, #64	; 0x40
 80110ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ee:	e140      	b.n	8011372 <UART_SetConfig+0x7ae>
 80110f0:	2380      	movs	r3, #128	; 0x80
 80110f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110f6:	e13c      	b.n	8011372 <UART_SetConfig+0x7ae>
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	4a41      	ldr	r2, [pc, #260]	; (8011204 <UART_SetConfig+0x640>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	f040 8082 	bne.w	8011208 <UART_SetConfig+0x644>
 8011104:	4b3c      	ldr	r3, [pc, #240]	; (80111f8 <UART_SetConfig+0x634>)
 8011106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801110c:	2b28      	cmp	r3, #40	; 0x28
 801110e:	d86d      	bhi.n	80111ec <UART_SetConfig+0x628>
 8011110:	a201      	add	r2, pc, #4	; (adr r2, 8011118 <UART_SetConfig+0x554>)
 8011112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011116:	bf00      	nop
 8011118:	080111bd 	.word	0x080111bd
 801111c:	080111ed 	.word	0x080111ed
 8011120:	080111ed 	.word	0x080111ed
 8011124:	080111ed 	.word	0x080111ed
 8011128:	080111ed 	.word	0x080111ed
 801112c:	080111ed 	.word	0x080111ed
 8011130:	080111ed 	.word	0x080111ed
 8011134:	080111ed 	.word	0x080111ed
 8011138:	080111c5 	.word	0x080111c5
 801113c:	080111ed 	.word	0x080111ed
 8011140:	080111ed 	.word	0x080111ed
 8011144:	080111ed 	.word	0x080111ed
 8011148:	080111ed 	.word	0x080111ed
 801114c:	080111ed 	.word	0x080111ed
 8011150:	080111ed 	.word	0x080111ed
 8011154:	080111ed 	.word	0x080111ed
 8011158:	080111cd 	.word	0x080111cd
 801115c:	080111ed 	.word	0x080111ed
 8011160:	080111ed 	.word	0x080111ed
 8011164:	080111ed 	.word	0x080111ed
 8011168:	080111ed 	.word	0x080111ed
 801116c:	080111ed 	.word	0x080111ed
 8011170:	080111ed 	.word	0x080111ed
 8011174:	080111ed 	.word	0x080111ed
 8011178:	080111d5 	.word	0x080111d5
 801117c:	080111ed 	.word	0x080111ed
 8011180:	080111ed 	.word	0x080111ed
 8011184:	080111ed 	.word	0x080111ed
 8011188:	080111ed 	.word	0x080111ed
 801118c:	080111ed 	.word	0x080111ed
 8011190:	080111ed 	.word	0x080111ed
 8011194:	080111ed 	.word	0x080111ed
 8011198:	080111dd 	.word	0x080111dd
 801119c:	080111ed 	.word	0x080111ed
 80111a0:	080111ed 	.word	0x080111ed
 80111a4:	080111ed 	.word	0x080111ed
 80111a8:	080111ed 	.word	0x080111ed
 80111ac:	080111ed 	.word	0x080111ed
 80111b0:	080111ed 	.word	0x080111ed
 80111b4:	080111ed 	.word	0x080111ed
 80111b8:	080111e5 	.word	0x080111e5
 80111bc:	2301      	movs	r3, #1
 80111be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c2:	e0d6      	b.n	8011372 <UART_SetConfig+0x7ae>
 80111c4:	2304      	movs	r3, #4
 80111c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ca:	e0d2      	b.n	8011372 <UART_SetConfig+0x7ae>
 80111cc:	2308      	movs	r3, #8
 80111ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d2:	e0ce      	b.n	8011372 <UART_SetConfig+0x7ae>
 80111d4:	2310      	movs	r3, #16
 80111d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111da:	e0ca      	b.n	8011372 <UART_SetConfig+0x7ae>
 80111dc:	2320      	movs	r3, #32
 80111de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e2:	e0c6      	b.n	8011372 <UART_SetConfig+0x7ae>
 80111e4:	2340      	movs	r3, #64	; 0x40
 80111e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ea:	e0c2      	b.n	8011372 <UART_SetConfig+0x7ae>
 80111ec:	2380      	movs	r3, #128	; 0x80
 80111ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f2:	e0be      	b.n	8011372 <UART_SetConfig+0x7ae>
 80111f4:	40011400 	.word	0x40011400
 80111f8:	58024400 	.word	0x58024400
 80111fc:	40007800 	.word	0x40007800
 8011200:	40007c00 	.word	0x40007c00
 8011204:	40011800 	.word	0x40011800
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	4aad      	ldr	r2, [pc, #692]	; (80114c4 <UART_SetConfig+0x900>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d176      	bne.n	8011300 <UART_SetConfig+0x73c>
 8011212:	4bad      	ldr	r3, [pc, #692]	; (80114c8 <UART_SetConfig+0x904>)
 8011214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801121a:	2b28      	cmp	r3, #40	; 0x28
 801121c:	d86c      	bhi.n	80112f8 <UART_SetConfig+0x734>
 801121e:	a201      	add	r2, pc, #4	; (adr r2, 8011224 <UART_SetConfig+0x660>)
 8011220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011224:	080112c9 	.word	0x080112c9
 8011228:	080112f9 	.word	0x080112f9
 801122c:	080112f9 	.word	0x080112f9
 8011230:	080112f9 	.word	0x080112f9
 8011234:	080112f9 	.word	0x080112f9
 8011238:	080112f9 	.word	0x080112f9
 801123c:	080112f9 	.word	0x080112f9
 8011240:	080112f9 	.word	0x080112f9
 8011244:	080112d1 	.word	0x080112d1
 8011248:	080112f9 	.word	0x080112f9
 801124c:	080112f9 	.word	0x080112f9
 8011250:	080112f9 	.word	0x080112f9
 8011254:	080112f9 	.word	0x080112f9
 8011258:	080112f9 	.word	0x080112f9
 801125c:	080112f9 	.word	0x080112f9
 8011260:	080112f9 	.word	0x080112f9
 8011264:	080112d9 	.word	0x080112d9
 8011268:	080112f9 	.word	0x080112f9
 801126c:	080112f9 	.word	0x080112f9
 8011270:	080112f9 	.word	0x080112f9
 8011274:	080112f9 	.word	0x080112f9
 8011278:	080112f9 	.word	0x080112f9
 801127c:	080112f9 	.word	0x080112f9
 8011280:	080112f9 	.word	0x080112f9
 8011284:	080112e1 	.word	0x080112e1
 8011288:	080112f9 	.word	0x080112f9
 801128c:	080112f9 	.word	0x080112f9
 8011290:	080112f9 	.word	0x080112f9
 8011294:	080112f9 	.word	0x080112f9
 8011298:	080112f9 	.word	0x080112f9
 801129c:	080112f9 	.word	0x080112f9
 80112a0:	080112f9 	.word	0x080112f9
 80112a4:	080112e9 	.word	0x080112e9
 80112a8:	080112f9 	.word	0x080112f9
 80112ac:	080112f9 	.word	0x080112f9
 80112b0:	080112f9 	.word	0x080112f9
 80112b4:	080112f9 	.word	0x080112f9
 80112b8:	080112f9 	.word	0x080112f9
 80112bc:	080112f9 	.word	0x080112f9
 80112c0:	080112f9 	.word	0x080112f9
 80112c4:	080112f1 	.word	0x080112f1
 80112c8:	2301      	movs	r3, #1
 80112ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ce:	e050      	b.n	8011372 <UART_SetConfig+0x7ae>
 80112d0:	2304      	movs	r3, #4
 80112d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112d6:	e04c      	b.n	8011372 <UART_SetConfig+0x7ae>
 80112d8:	2308      	movs	r3, #8
 80112da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112de:	e048      	b.n	8011372 <UART_SetConfig+0x7ae>
 80112e0:	2310      	movs	r3, #16
 80112e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e6:	e044      	b.n	8011372 <UART_SetConfig+0x7ae>
 80112e8:	2320      	movs	r3, #32
 80112ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ee:	e040      	b.n	8011372 <UART_SetConfig+0x7ae>
 80112f0:	2340      	movs	r3, #64	; 0x40
 80112f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f6:	e03c      	b.n	8011372 <UART_SetConfig+0x7ae>
 80112f8:	2380      	movs	r3, #128	; 0x80
 80112fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fe:	e038      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4a71      	ldr	r2, [pc, #452]	; (80114cc <UART_SetConfig+0x908>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d130      	bne.n	801136c <UART_SetConfig+0x7a8>
 801130a:	4b6f      	ldr	r3, [pc, #444]	; (80114c8 <UART_SetConfig+0x904>)
 801130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801130e:	f003 0307 	and.w	r3, r3, #7
 8011312:	2b05      	cmp	r3, #5
 8011314:	d826      	bhi.n	8011364 <UART_SetConfig+0x7a0>
 8011316:	a201      	add	r2, pc, #4	; (adr r2, 801131c <UART_SetConfig+0x758>)
 8011318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801131c:	08011335 	.word	0x08011335
 8011320:	0801133d 	.word	0x0801133d
 8011324:	08011345 	.word	0x08011345
 8011328:	0801134d 	.word	0x0801134d
 801132c:	08011355 	.word	0x08011355
 8011330:	0801135d 	.word	0x0801135d
 8011334:	2302      	movs	r3, #2
 8011336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133a:	e01a      	b.n	8011372 <UART_SetConfig+0x7ae>
 801133c:	2304      	movs	r3, #4
 801133e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011342:	e016      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011344:	2308      	movs	r3, #8
 8011346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134a:	e012      	b.n	8011372 <UART_SetConfig+0x7ae>
 801134c:	2310      	movs	r3, #16
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011352:	e00e      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011354:	2320      	movs	r3, #32
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135a:	e00a      	b.n	8011372 <UART_SetConfig+0x7ae>
 801135c:	2340      	movs	r3, #64	; 0x40
 801135e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011362:	e006      	b.n	8011372 <UART_SetConfig+0x7ae>
 8011364:	2380      	movs	r3, #128	; 0x80
 8011366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136a:	e002      	b.n	8011372 <UART_SetConfig+0x7ae>
 801136c:	2380      	movs	r3, #128	; 0x80
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	4a55      	ldr	r2, [pc, #340]	; (80114cc <UART_SetConfig+0x908>)
 8011378:	4293      	cmp	r3, r2
 801137a:	f040 80f8 	bne.w	801156e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801137e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011382:	2b20      	cmp	r3, #32
 8011384:	dc46      	bgt.n	8011414 <UART_SetConfig+0x850>
 8011386:	2b02      	cmp	r3, #2
 8011388:	db75      	blt.n	8011476 <UART_SetConfig+0x8b2>
 801138a:	3b02      	subs	r3, #2
 801138c:	2b1e      	cmp	r3, #30
 801138e:	d872      	bhi.n	8011476 <UART_SetConfig+0x8b2>
 8011390:	a201      	add	r2, pc, #4	; (adr r2, 8011398 <UART_SetConfig+0x7d4>)
 8011392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011396:	bf00      	nop
 8011398:	0801141b 	.word	0x0801141b
 801139c:	08011477 	.word	0x08011477
 80113a0:	08011423 	.word	0x08011423
 80113a4:	08011477 	.word	0x08011477
 80113a8:	08011477 	.word	0x08011477
 80113ac:	08011477 	.word	0x08011477
 80113b0:	08011433 	.word	0x08011433
 80113b4:	08011477 	.word	0x08011477
 80113b8:	08011477 	.word	0x08011477
 80113bc:	08011477 	.word	0x08011477
 80113c0:	08011477 	.word	0x08011477
 80113c4:	08011477 	.word	0x08011477
 80113c8:	08011477 	.word	0x08011477
 80113cc:	08011477 	.word	0x08011477
 80113d0:	08011443 	.word	0x08011443
 80113d4:	08011477 	.word	0x08011477
 80113d8:	08011477 	.word	0x08011477
 80113dc:	08011477 	.word	0x08011477
 80113e0:	08011477 	.word	0x08011477
 80113e4:	08011477 	.word	0x08011477
 80113e8:	08011477 	.word	0x08011477
 80113ec:	08011477 	.word	0x08011477
 80113f0:	08011477 	.word	0x08011477
 80113f4:	08011477 	.word	0x08011477
 80113f8:	08011477 	.word	0x08011477
 80113fc:	08011477 	.word	0x08011477
 8011400:	08011477 	.word	0x08011477
 8011404:	08011477 	.word	0x08011477
 8011408:	08011477 	.word	0x08011477
 801140c:	08011477 	.word	0x08011477
 8011410:	08011469 	.word	0x08011469
 8011414:	2b40      	cmp	r3, #64	; 0x40
 8011416:	d02a      	beq.n	801146e <UART_SetConfig+0x8aa>
 8011418:	e02d      	b.n	8011476 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801141a:	f7fb fb07 	bl	800ca2c <HAL_RCCEx_GetD3PCLK1Freq>
 801141e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011420:	e02f      	b.n	8011482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011426:	4618      	mov	r0, r3
 8011428:	f7fb fb16 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011430:	e027      	b.n	8011482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011432:	f107 0318 	add.w	r3, r7, #24
 8011436:	4618      	mov	r0, r3
 8011438:	f7fb fc62 	bl	800cd00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011440:	e01f      	b.n	8011482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011442:	4b21      	ldr	r3, [pc, #132]	; (80114c8 <UART_SetConfig+0x904>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	f003 0320 	and.w	r3, r3, #32
 801144a:	2b00      	cmp	r3, #0
 801144c:	d009      	beq.n	8011462 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801144e:	4b1e      	ldr	r3, [pc, #120]	; (80114c8 <UART_SetConfig+0x904>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	08db      	lsrs	r3, r3, #3
 8011454:	f003 0303 	and.w	r3, r3, #3
 8011458:	4a1d      	ldr	r2, [pc, #116]	; (80114d0 <UART_SetConfig+0x90c>)
 801145a:	fa22 f303 	lsr.w	r3, r2, r3
 801145e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011460:	e00f      	b.n	8011482 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011462:	4b1b      	ldr	r3, [pc, #108]	; (80114d0 <UART_SetConfig+0x90c>)
 8011464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011466:	e00c      	b.n	8011482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011468:	4b1a      	ldr	r3, [pc, #104]	; (80114d4 <UART_SetConfig+0x910>)
 801146a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801146c:	e009      	b.n	8011482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801146e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011474:	e005      	b.n	8011482 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011476:	2300      	movs	r3, #0
 8011478:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801147a:	2301      	movs	r3, #1
 801147c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011480:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011484:	2b00      	cmp	r3, #0
 8011486:	f000 81ee 	beq.w	8011866 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801148e:	4a12      	ldr	r2, [pc, #72]	; (80114d8 <UART_SetConfig+0x914>)
 8011490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011494:	461a      	mov	r2, r3
 8011496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011498:	fbb3 f3f2 	udiv	r3, r3, r2
 801149c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	685a      	ldr	r2, [r3, #4]
 80114a2:	4613      	mov	r3, r2
 80114a4:	005b      	lsls	r3, r3, #1
 80114a6:	4413      	add	r3, r2
 80114a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d305      	bcc.n	80114ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d910      	bls.n	80114dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80114ba:	2301      	movs	r3, #1
 80114bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80114c0:	e1d1      	b.n	8011866 <UART_SetConfig+0xca2>
 80114c2:	bf00      	nop
 80114c4:	40011c00 	.word	0x40011c00
 80114c8:	58024400 	.word	0x58024400
 80114cc:	58000c00 	.word	0x58000c00
 80114d0:	03d09000 	.word	0x03d09000
 80114d4:	003d0900 	.word	0x003d0900
 80114d8:	0801c7b8 	.word	0x0801c7b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114de:	2200      	movs	r2, #0
 80114e0:	60bb      	str	r3, [r7, #8]
 80114e2:	60fa      	str	r2, [r7, #12]
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e8:	4ac0      	ldr	r2, [pc, #768]	; (80117ec <UART_SetConfig+0xc28>)
 80114ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	2200      	movs	r2, #0
 80114f2:	603b      	str	r3, [r7, #0]
 80114f4:	607a      	str	r2, [r7, #4]
 80114f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80114fe:	f7ef f91b 	bl	8000738 <__aeabi_uldivmod>
 8011502:	4602      	mov	r2, r0
 8011504:	460b      	mov	r3, r1
 8011506:	4610      	mov	r0, r2
 8011508:	4619      	mov	r1, r3
 801150a:	f04f 0200 	mov.w	r2, #0
 801150e:	f04f 0300 	mov.w	r3, #0
 8011512:	020b      	lsls	r3, r1, #8
 8011514:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011518:	0202      	lsls	r2, r0, #8
 801151a:	6979      	ldr	r1, [r7, #20]
 801151c:	6849      	ldr	r1, [r1, #4]
 801151e:	0849      	lsrs	r1, r1, #1
 8011520:	2000      	movs	r0, #0
 8011522:	460c      	mov	r4, r1
 8011524:	4605      	mov	r5, r0
 8011526:	eb12 0804 	adds.w	r8, r2, r4
 801152a:	eb43 0905 	adc.w	r9, r3, r5
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	2200      	movs	r2, #0
 8011534:	469a      	mov	sl, r3
 8011536:	4693      	mov	fp, r2
 8011538:	4652      	mov	r2, sl
 801153a:	465b      	mov	r3, fp
 801153c:	4640      	mov	r0, r8
 801153e:	4649      	mov	r1, r9
 8011540:	f7ef f8fa 	bl	8000738 <__aeabi_uldivmod>
 8011544:	4602      	mov	r2, r0
 8011546:	460b      	mov	r3, r1
 8011548:	4613      	mov	r3, r2
 801154a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801154c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801154e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011552:	d308      	bcc.n	8011566 <UART_SetConfig+0x9a2>
 8011554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801155a:	d204      	bcs.n	8011566 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011562:	60da      	str	r2, [r3, #12]
 8011564:	e17f      	b.n	8011866 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011566:	2301      	movs	r3, #1
 8011568:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801156c:	e17b      	b.n	8011866 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	69db      	ldr	r3, [r3, #28]
 8011572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011576:	f040 80bd 	bne.w	80116f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801157a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801157e:	2b20      	cmp	r3, #32
 8011580:	dc48      	bgt.n	8011614 <UART_SetConfig+0xa50>
 8011582:	2b00      	cmp	r3, #0
 8011584:	db7b      	blt.n	801167e <UART_SetConfig+0xaba>
 8011586:	2b20      	cmp	r3, #32
 8011588:	d879      	bhi.n	801167e <UART_SetConfig+0xaba>
 801158a:	a201      	add	r2, pc, #4	; (adr r2, 8011590 <UART_SetConfig+0x9cc>)
 801158c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011590:	0801161b 	.word	0x0801161b
 8011594:	08011623 	.word	0x08011623
 8011598:	0801167f 	.word	0x0801167f
 801159c:	0801167f 	.word	0x0801167f
 80115a0:	0801162b 	.word	0x0801162b
 80115a4:	0801167f 	.word	0x0801167f
 80115a8:	0801167f 	.word	0x0801167f
 80115ac:	0801167f 	.word	0x0801167f
 80115b0:	0801163b 	.word	0x0801163b
 80115b4:	0801167f 	.word	0x0801167f
 80115b8:	0801167f 	.word	0x0801167f
 80115bc:	0801167f 	.word	0x0801167f
 80115c0:	0801167f 	.word	0x0801167f
 80115c4:	0801167f 	.word	0x0801167f
 80115c8:	0801167f 	.word	0x0801167f
 80115cc:	0801167f 	.word	0x0801167f
 80115d0:	0801164b 	.word	0x0801164b
 80115d4:	0801167f 	.word	0x0801167f
 80115d8:	0801167f 	.word	0x0801167f
 80115dc:	0801167f 	.word	0x0801167f
 80115e0:	0801167f 	.word	0x0801167f
 80115e4:	0801167f 	.word	0x0801167f
 80115e8:	0801167f 	.word	0x0801167f
 80115ec:	0801167f 	.word	0x0801167f
 80115f0:	0801167f 	.word	0x0801167f
 80115f4:	0801167f 	.word	0x0801167f
 80115f8:	0801167f 	.word	0x0801167f
 80115fc:	0801167f 	.word	0x0801167f
 8011600:	0801167f 	.word	0x0801167f
 8011604:	0801167f 	.word	0x0801167f
 8011608:	0801167f 	.word	0x0801167f
 801160c:	0801167f 	.word	0x0801167f
 8011610:	08011671 	.word	0x08011671
 8011614:	2b40      	cmp	r3, #64	; 0x40
 8011616:	d02e      	beq.n	8011676 <UART_SetConfig+0xab2>
 8011618:	e031      	b.n	801167e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801161a:	f7f9 fb69 	bl	800acf0 <HAL_RCC_GetPCLK1Freq>
 801161e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011620:	e033      	b.n	801168a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011622:	f7f9 fb7b 	bl	800ad1c <HAL_RCC_GetPCLK2Freq>
 8011626:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011628:	e02f      	b.n	801168a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801162a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801162e:	4618      	mov	r0, r3
 8011630:	f7fb fa12 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011638:	e027      	b.n	801168a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801163a:	f107 0318 	add.w	r3, r7, #24
 801163e:	4618      	mov	r0, r3
 8011640:	f7fb fb5e 	bl	800cd00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011644:	69fb      	ldr	r3, [r7, #28]
 8011646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011648:	e01f      	b.n	801168a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801164a:	4b69      	ldr	r3, [pc, #420]	; (80117f0 <UART_SetConfig+0xc2c>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f003 0320 	and.w	r3, r3, #32
 8011652:	2b00      	cmp	r3, #0
 8011654:	d009      	beq.n	801166a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011656:	4b66      	ldr	r3, [pc, #408]	; (80117f0 <UART_SetConfig+0xc2c>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	08db      	lsrs	r3, r3, #3
 801165c:	f003 0303 	and.w	r3, r3, #3
 8011660:	4a64      	ldr	r2, [pc, #400]	; (80117f4 <UART_SetConfig+0xc30>)
 8011662:	fa22 f303 	lsr.w	r3, r2, r3
 8011666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011668:	e00f      	b.n	801168a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801166a:	4b62      	ldr	r3, [pc, #392]	; (80117f4 <UART_SetConfig+0xc30>)
 801166c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801166e:	e00c      	b.n	801168a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011670:	4b61      	ldr	r3, [pc, #388]	; (80117f8 <UART_SetConfig+0xc34>)
 8011672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011674:	e009      	b.n	801168a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801167a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801167c:	e005      	b.n	801168a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801167e:	2300      	movs	r3, #0
 8011680:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011682:	2301      	movs	r3, #1
 8011684:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801168a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801168c:	2b00      	cmp	r3, #0
 801168e:	f000 80ea 	beq.w	8011866 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011696:	4a55      	ldr	r2, [pc, #340]	; (80117ec <UART_SetConfig+0xc28>)
 8011698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801169c:	461a      	mov	r2, r3
 801169e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80116a4:	005a      	lsls	r2, r3, #1
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	085b      	lsrs	r3, r3, #1
 80116ac:	441a      	add	r2, r3
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	685b      	ldr	r3, [r3, #4]
 80116b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80116b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ba:	2b0f      	cmp	r3, #15
 80116bc:	d916      	bls.n	80116ec <UART_SetConfig+0xb28>
 80116be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116c4:	d212      	bcs.n	80116ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80116c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	f023 030f 	bic.w	r3, r3, #15
 80116ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80116d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d2:	085b      	lsrs	r3, r3, #1
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	f003 0307 	and.w	r3, r3, #7
 80116da:	b29a      	uxth	r2, r3
 80116dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80116de:	4313      	orrs	r3, r2
 80116e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80116e2:	697b      	ldr	r3, [r7, #20]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80116e8:	60da      	str	r2, [r3, #12]
 80116ea:	e0bc      	b.n	8011866 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80116ec:	2301      	movs	r3, #1
 80116ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80116f2:	e0b8      	b.n	8011866 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80116f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80116f8:	2b20      	cmp	r3, #32
 80116fa:	dc4b      	bgt.n	8011794 <UART_SetConfig+0xbd0>
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f2c0 8087 	blt.w	8011810 <UART_SetConfig+0xc4c>
 8011702:	2b20      	cmp	r3, #32
 8011704:	f200 8084 	bhi.w	8011810 <UART_SetConfig+0xc4c>
 8011708:	a201      	add	r2, pc, #4	; (adr r2, 8011710 <UART_SetConfig+0xb4c>)
 801170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801170e:	bf00      	nop
 8011710:	0801179b 	.word	0x0801179b
 8011714:	080117a3 	.word	0x080117a3
 8011718:	08011811 	.word	0x08011811
 801171c:	08011811 	.word	0x08011811
 8011720:	080117ab 	.word	0x080117ab
 8011724:	08011811 	.word	0x08011811
 8011728:	08011811 	.word	0x08011811
 801172c:	08011811 	.word	0x08011811
 8011730:	080117bb 	.word	0x080117bb
 8011734:	08011811 	.word	0x08011811
 8011738:	08011811 	.word	0x08011811
 801173c:	08011811 	.word	0x08011811
 8011740:	08011811 	.word	0x08011811
 8011744:	08011811 	.word	0x08011811
 8011748:	08011811 	.word	0x08011811
 801174c:	08011811 	.word	0x08011811
 8011750:	080117cb 	.word	0x080117cb
 8011754:	08011811 	.word	0x08011811
 8011758:	08011811 	.word	0x08011811
 801175c:	08011811 	.word	0x08011811
 8011760:	08011811 	.word	0x08011811
 8011764:	08011811 	.word	0x08011811
 8011768:	08011811 	.word	0x08011811
 801176c:	08011811 	.word	0x08011811
 8011770:	08011811 	.word	0x08011811
 8011774:	08011811 	.word	0x08011811
 8011778:	08011811 	.word	0x08011811
 801177c:	08011811 	.word	0x08011811
 8011780:	08011811 	.word	0x08011811
 8011784:	08011811 	.word	0x08011811
 8011788:	08011811 	.word	0x08011811
 801178c:	08011811 	.word	0x08011811
 8011790:	08011803 	.word	0x08011803
 8011794:	2b40      	cmp	r3, #64	; 0x40
 8011796:	d037      	beq.n	8011808 <UART_SetConfig+0xc44>
 8011798:	e03a      	b.n	8011810 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801179a:	f7f9 faa9 	bl	800acf0 <HAL_RCC_GetPCLK1Freq>
 801179e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117a0:	e03c      	b.n	801181c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80117a2:	f7f9 fabb 	bl	800ad1c <HAL_RCC_GetPCLK2Freq>
 80117a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117a8:	e038      	b.n	801181c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80117aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fb f952 	bl	800ca58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80117b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117b8:	e030      	b.n	801181c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80117ba:	f107 0318 	add.w	r3, r7, #24
 80117be:	4618      	mov	r0, r3
 80117c0:	f7fb fa9e 	bl	800cd00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117c8:	e028      	b.n	801181c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80117ca:	4b09      	ldr	r3, [pc, #36]	; (80117f0 <UART_SetConfig+0xc2c>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	f003 0320 	and.w	r3, r3, #32
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d012      	beq.n	80117fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80117d6:	4b06      	ldr	r3, [pc, #24]	; (80117f0 <UART_SetConfig+0xc2c>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	08db      	lsrs	r3, r3, #3
 80117dc:	f003 0303 	and.w	r3, r3, #3
 80117e0:	4a04      	ldr	r2, [pc, #16]	; (80117f4 <UART_SetConfig+0xc30>)
 80117e2:	fa22 f303 	lsr.w	r3, r2, r3
 80117e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80117e8:	e018      	b.n	801181c <UART_SetConfig+0xc58>
 80117ea:	bf00      	nop
 80117ec:	0801c7b8 	.word	0x0801c7b8
 80117f0:	58024400 	.word	0x58024400
 80117f4:	03d09000 	.word	0x03d09000
 80117f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80117fc:	4b24      	ldr	r3, [pc, #144]	; (8011890 <UART_SetConfig+0xccc>)
 80117fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011800:	e00c      	b.n	801181c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011802:	4b24      	ldr	r3, [pc, #144]	; (8011894 <UART_SetConfig+0xcd0>)
 8011804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011806:	e009      	b.n	801181c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801180c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801180e:	e005      	b.n	801181c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011810:	2300      	movs	r3, #0
 8011812:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011814:	2301      	movs	r3, #1
 8011816:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801181a:	bf00      	nop
    }

    if (pclk != 0U)
 801181c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801181e:	2b00      	cmp	r3, #0
 8011820:	d021      	beq.n	8011866 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011826:	4a1c      	ldr	r2, [pc, #112]	; (8011898 <UART_SetConfig+0xcd4>)
 8011828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801182c:	461a      	mov	r2, r3
 801182e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011830:	fbb3 f2f2 	udiv	r2, r3, r2
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	085b      	lsrs	r3, r3, #1
 801183a:	441a      	add	r2, r3
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	fbb2 f3f3 	udiv	r3, r2, r3
 8011844:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011848:	2b0f      	cmp	r3, #15
 801184a:	d909      	bls.n	8011860 <UART_SetConfig+0xc9c>
 801184c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011852:	d205      	bcs.n	8011860 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011856:	b29a      	uxth	r2, r3
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	60da      	str	r2, [r3, #12]
 801185e:	e002      	b.n	8011866 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011860:	2301      	movs	r3, #1
 8011862:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	2201      	movs	r2, #1
 801186a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	2201      	movs	r2, #1
 8011872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	2200      	movs	r2, #0
 801187a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	2200      	movs	r2, #0
 8011880:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011882:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011886:	4618      	mov	r0, r3
 8011888:	3748      	adds	r7, #72	; 0x48
 801188a:	46bd      	mov	sp, r7
 801188c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011890:	03d09000 	.word	0x03d09000
 8011894:	003d0900 	.word	0x003d0900
 8011898:	0801c7b8 	.word	0x0801c7b8

0801189c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801189c:	b480      	push	{r7}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118a8:	f003 0301 	and.w	r3, r3, #1
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d00a      	beq.n	80118c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	430a      	orrs	r2, r1
 80118c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ca:	f003 0302 	and.w	r3, r3, #2
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d00a      	beq.n	80118e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	430a      	orrs	r2, r1
 80118e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ec:	f003 0304 	and.w	r3, r3, #4
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d00a      	beq.n	801190a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	430a      	orrs	r2, r1
 8011908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801190e:	f003 0308 	and.w	r3, r3, #8
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00a      	beq.n	801192c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	430a      	orrs	r2, r1
 801192a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011930:	f003 0310 	and.w	r3, r3, #16
 8011934:	2b00      	cmp	r3, #0
 8011936:	d00a      	beq.n	801194e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	689b      	ldr	r3, [r3, #8]
 801193e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	430a      	orrs	r2, r1
 801194c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011952:	f003 0320 	and.w	r3, r3, #32
 8011956:	2b00      	cmp	r3, #0
 8011958:	d00a      	beq.n	8011970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	689b      	ldr	r3, [r3, #8]
 8011960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	430a      	orrs	r2, r1
 801196e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011978:	2b00      	cmp	r3, #0
 801197a:	d01a      	beq.n	80119b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	430a      	orrs	r2, r1
 8011990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801199a:	d10a      	bne.n	80119b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	430a      	orrs	r2, r1
 80119b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d00a      	beq.n	80119d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	430a      	orrs	r2, r1
 80119d2:	605a      	str	r2, [r3, #4]
  }
}
 80119d4:	bf00      	nop
 80119d6:	370c      	adds	r7, #12
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b098      	sub	sp, #96	; 0x60
 80119e4:	af02      	add	r7, sp, #8
 80119e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2200      	movs	r2, #0
 80119ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80119f0:	f7f2 fed4 	bl	800479c <HAL_GetTick>
 80119f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f003 0308 	and.w	r3, r3, #8
 8011a00:	2b08      	cmp	r3, #8
 8011a02:	d12f      	bne.n	8011a64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a08:	9300      	str	r3, [sp, #0]
 8011a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f000 f88e 	bl	8011b34 <UART_WaitOnFlagUntilTimeout>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d022      	beq.n	8011a64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a26:	e853 3f00 	ldrex	r3, [r3]
 8011a2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a32:	653b      	str	r3, [r7, #80]	; 0x50
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	461a      	mov	r2, r3
 8011a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8011a3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a44:	e841 2300 	strex	r3, r2, [r1]
 8011a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d1e6      	bne.n	8011a1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2220      	movs	r2, #32
 8011a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a60:	2303      	movs	r3, #3
 8011a62:	e063      	b.n	8011b2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f003 0304 	and.w	r3, r3, #4
 8011a6e:	2b04      	cmp	r3, #4
 8011a70:	d149      	bne.n	8011b06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a76:	9300      	str	r3, [sp, #0]
 8011a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f000 f857 	bl	8011b34 <UART_WaitOnFlagUntilTimeout>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d03c      	beq.n	8011b06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a94:	e853 3f00 	ldrex	r3, [r3]
 8011a98:	623b      	str	r3, [r7, #32]
   return(result);
 8011a9a:	6a3b      	ldr	r3, [r7, #32]
 8011a9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8011aac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ab2:	e841 2300 	strex	r3, r2, [r1]
 8011ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d1e6      	bne.n	8011a8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	3308      	adds	r3, #8
 8011ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	e853 3f00 	ldrex	r3, [r3]
 8011acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	f023 0301 	bic.w	r3, r3, #1
 8011ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	3308      	adds	r3, #8
 8011adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ade:	61fa      	str	r2, [r7, #28]
 8011ae0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ae2:	69b9      	ldr	r1, [r7, #24]
 8011ae4:	69fa      	ldr	r2, [r7, #28]
 8011ae6:	e841 2300 	strex	r3, r2, [r1]
 8011aea:	617b      	str	r3, [r7, #20]
   return(result);
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d1e5      	bne.n	8011abe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2220      	movs	r2, #32
 8011af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2200      	movs	r2, #0
 8011afe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b02:	2303      	movs	r3, #3
 8011b04:	e012      	b.n	8011b2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2220      	movs	r2, #32
 8011b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2220      	movs	r2, #32
 8011b12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2200      	movs	r2, #0
 8011b26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b2a:	2300      	movs	r3, #0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3758      	adds	r7, #88	; 0x58
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	60f8      	str	r0, [r7, #12]
 8011b3c:	60b9      	str	r1, [r7, #8]
 8011b3e:	603b      	str	r3, [r7, #0]
 8011b40:	4613      	mov	r3, r2
 8011b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b44:	e049      	b.n	8011bda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b4c:	d045      	beq.n	8011bda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b4e:	f7f2 fe25 	bl	800479c <HAL_GetTick>
 8011b52:	4602      	mov	r2, r0
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	1ad3      	subs	r3, r2, r3
 8011b58:	69ba      	ldr	r2, [r7, #24]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d302      	bcc.n	8011b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d101      	bne.n	8011b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011b64:	2303      	movs	r3, #3
 8011b66:	e048      	b.n	8011bfa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f003 0304 	and.w	r3, r3, #4
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d031      	beq.n	8011bda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	69db      	ldr	r3, [r3, #28]
 8011b7c:	f003 0308 	and.w	r3, r3, #8
 8011b80:	2b08      	cmp	r3, #8
 8011b82:	d110      	bne.n	8011ba6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	2208      	movs	r2, #8
 8011b8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011b8c:	68f8      	ldr	r0, [r7, #12]
 8011b8e:	f000 f839 	bl	8011c04 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2208      	movs	r2, #8
 8011b96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	e029      	b.n	8011bfa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	69db      	ldr	r3, [r3, #28]
 8011bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011bb4:	d111      	bne.n	8011bda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011bbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011bc0:	68f8      	ldr	r0, [r7, #12]
 8011bc2:	f000 f81f 	bl	8011c04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	2220      	movs	r2, #32
 8011bca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011bd6:	2303      	movs	r3, #3
 8011bd8:	e00f      	b.n	8011bfa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	69da      	ldr	r2, [r3, #28]
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	4013      	ands	r3, r2
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	bf0c      	ite	eq
 8011bea:	2301      	moveq	r3, #1
 8011bec:	2300      	movne	r3, #0
 8011bee:	b2db      	uxtb	r3, r3
 8011bf0:	461a      	mov	r2, r3
 8011bf2:	79fb      	ldrb	r3, [r7, #7]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d0a6      	beq.n	8011b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011bf8:	2300      	movs	r3, #0
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3710      	adds	r7, #16
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
	...

08011c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b095      	sub	sp, #84	; 0x54
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c14:	e853 3f00 	ldrex	r3, [r3]
 8011c18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	461a      	mov	r2, r3
 8011c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8011c2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c32:	e841 2300 	strex	r3, r2, [r1]
 8011c36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d1e6      	bne.n	8011c0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	3308      	adds	r3, #8
 8011c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c46:	6a3b      	ldr	r3, [r7, #32]
 8011c48:	e853 3f00 	ldrex	r3, [r3]
 8011c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c4e:	69fa      	ldr	r2, [r7, #28]
 8011c50:	4b1e      	ldr	r3, [pc, #120]	; (8011ccc <UART_EndRxTransfer+0xc8>)
 8011c52:	4013      	ands	r3, r2
 8011c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	3308      	adds	r3, #8
 8011c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011c60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c66:	e841 2300 	strex	r3, r2, [r1]
 8011c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d1e5      	bne.n	8011c3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d118      	bne.n	8011cac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	e853 3f00 	ldrex	r3, [r3]
 8011c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	f023 0310 	bic.w	r3, r3, #16
 8011c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	461a      	mov	r2, r3
 8011c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c98:	61bb      	str	r3, [r7, #24]
 8011c9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c9c:	6979      	ldr	r1, [r7, #20]
 8011c9e:	69ba      	ldr	r2, [r7, #24]
 8011ca0:	e841 2300 	strex	r3, r2, [r1]
 8011ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d1e6      	bne.n	8011c7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2220      	movs	r2, #32
 8011cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011cc0:	bf00      	nop
 8011cc2:	3754      	adds	r7, #84	; 0x54
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cca:	4770      	bx	lr
 8011ccc:	effffffe 	.word	0xeffffffe

08011cd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b085      	sub	sp, #20
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	d101      	bne.n	8011ce6 <HAL_UARTEx_DisableFifoMode+0x16>
 8011ce2:	2302      	movs	r3, #2
 8011ce4:	e027      	b.n	8011d36 <HAL_UARTEx_DisableFifoMode+0x66>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2201      	movs	r2, #1
 8011cea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2224      	movs	r2, #36	; 0x24
 8011cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f022 0201 	bic.w	r2, r2, #1
 8011d0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011d14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	68fa      	ldr	r2, [r7, #12]
 8011d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2220      	movs	r2, #32
 8011d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d34:	2300      	movs	r3, #0
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3714      	adds	r7, #20
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr

08011d42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b084      	sub	sp, #16
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
 8011d4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	d101      	bne.n	8011d5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011d56:	2302      	movs	r3, #2
 8011d58:	e02d      	b.n	8011db6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2224      	movs	r2, #36	; 0x24
 8011d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f022 0201 	bic.w	r2, r2, #1
 8011d80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	683a      	ldr	r2, [r7, #0]
 8011d92:	430a      	orrs	r2, r1
 8011d94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f000 f850 	bl	8011e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	68fa      	ldr	r2, [r7, #12]
 8011da2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2220      	movs	r2, #32
 8011da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2200      	movs	r2, #0
 8011db0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011db4:	2300      	movs	r3, #0
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}

08011dbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011dbe:	b580      	push	{r7, lr}
 8011dc0:	b084      	sub	sp, #16
 8011dc2:	af00      	add	r7, sp, #0
 8011dc4:	6078      	str	r0, [r7, #4]
 8011dc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011dce:	2b01      	cmp	r3, #1
 8011dd0:	d101      	bne.n	8011dd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011dd2:	2302      	movs	r3, #2
 8011dd4:	e02d      	b.n	8011e32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2201      	movs	r2, #1
 8011dda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2224      	movs	r2, #36	; 0x24
 8011de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	f022 0201 	bic.w	r2, r2, #1
 8011dfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	683a      	ldr	r2, [r7, #0]
 8011e0e:	430a      	orrs	r2, r1
 8011e10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f000 f812 	bl	8011e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	68fa      	ldr	r2, [r7, #12]
 8011e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2220      	movs	r2, #32
 8011e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e30:	2300      	movs	r3, #0
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	3710      	adds	r7, #16
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}
	...

08011e3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b085      	sub	sp, #20
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d108      	bne.n	8011e5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2201      	movs	r2, #1
 8011e50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2201      	movs	r2, #1
 8011e58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011e5c:	e031      	b.n	8011ec2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011e5e:	2310      	movs	r3, #16
 8011e60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011e62:	2310      	movs	r3, #16
 8011e64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	689b      	ldr	r3, [r3, #8]
 8011e6c:	0e5b      	lsrs	r3, r3, #25
 8011e6e:	b2db      	uxtb	r3, r3
 8011e70:	f003 0307 	and.w	r3, r3, #7
 8011e74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	689b      	ldr	r3, [r3, #8]
 8011e7c:	0f5b      	lsrs	r3, r3, #29
 8011e7e:	b2db      	uxtb	r3, r3
 8011e80:	f003 0307 	and.w	r3, r3, #7
 8011e84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e86:	7bbb      	ldrb	r3, [r7, #14]
 8011e88:	7b3a      	ldrb	r2, [r7, #12]
 8011e8a:	4911      	ldr	r1, [pc, #68]	; (8011ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8011e8c:	5c8a      	ldrb	r2, [r1, r2]
 8011e8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011e92:	7b3a      	ldrb	r2, [r7, #12]
 8011e94:	490f      	ldr	r1, [pc, #60]	; (8011ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8011e96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e9c:	b29a      	uxth	r2, r3
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ea4:	7bfb      	ldrb	r3, [r7, #15]
 8011ea6:	7b7a      	ldrb	r2, [r7, #13]
 8011ea8:	4909      	ldr	r1, [pc, #36]	; (8011ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8011eaa:	5c8a      	ldrb	r2, [r1, r2]
 8011eac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011eb0:	7b7a      	ldrb	r2, [r7, #13]
 8011eb2:	4908      	ldr	r1, [pc, #32]	; (8011ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8011eb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011eb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011ec2:	bf00      	nop
 8011ec4:	3714      	adds	r7, #20
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr
 8011ece:	bf00      	nop
 8011ed0:	0801c7d0 	.word	0x0801c7d0
 8011ed4:	0801c7d8 	.word	0x0801c7d8

08011ed8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011ed8:	b084      	sub	sp, #16
 8011eda:	b480      	push	{r7}
 8011edc:	b085      	sub	sp, #20
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	6078      	str	r0, [r7, #4]
 8011ee2:	f107 001c 	add.w	r0, r7, #28
 8011ee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011eea:	2300      	movs	r3, #0
 8011eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011eee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011ef0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011ef2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011ef6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011efa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011efe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011f00:	68fa      	ldr	r2, [r7, #12]
 8011f02:	4313      	orrs	r3, r2
 8011f04:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	685a      	ldr	r2, [r3, #4]
 8011f0a:	4b07      	ldr	r3, [pc, #28]	; (8011f28 <SDMMC_Init+0x50>)
 8011f0c:	4013      	ands	r3, r2
 8011f0e:	68fa      	ldr	r2, [r7, #12]
 8011f10:	431a      	orrs	r2, r3
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011f16:	2300      	movs	r3, #0
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3714      	adds	r7, #20
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	b004      	add	sp, #16
 8011f24:	4770      	bx	lr
 8011f26:	bf00      	nop
 8011f28:	ffc02c00 	.word	0xffc02c00

08011f2c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b083      	sub	sp, #12
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	370c      	adds	r7, #12
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f44:	4770      	bx	lr

08011f46 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011f46:	b480      	push	{r7}
 8011f48:	b083      	sub	sp, #12
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
 8011f4e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	681a      	ldr	r2, [r3, #0]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011f5a:	2300      	movs	r3, #0
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	370c      	adds	r7, #12
 8011f60:	46bd      	mov	sp, r7
 8011f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f66:	4770      	bx	lr

08011f68 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	f043 0203 	orr.w	r2, r3, #3
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011f7c:	2300      	movs	r3, #0
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	370c      	adds	r7, #12
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr

08011f8a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011f8a:	b480      	push	{r7}
 8011f8c:	b083      	sub	sp, #12
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f003 0303 	and.w	r3, r3, #3
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	370c      	adds	r7, #12
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa4:	4770      	bx	lr
	...

08011fa8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b085      	sub	sp, #20
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011fc6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011fcc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011fd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011fd4:	68fa      	ldr	r2, [r7, #12]
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	68da      	ldr	r2, [r3, #12]
 8011fde:	4b06      	ldr	r3, [pc, #24]	; (8011ff8 <SDMMC_SendCommand+0x50>)
 8011fe0:	4013      	ands	r3, r2
 8011fe2:	68fa      	ldr	r2, [r7, #12]
 8011fe4:	431a      	orrs	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011fea:	2300      	movs	r3, #0
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3714      	adds	r7, #20
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr
 8011ff8:	fffee0c0 	.word	0xfffee0c0

08011ffc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	691b      	ldr	r3, [r3, #16]
 8012008:	b2db      	uxtb	r3, r3
}
 801200a:	4618      	mov	r0, r3
 801200c:	370c      	adds	r7, #12
 801200e:	46bd      	mov	sp, r7
 8012010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012014:	4770      	bx	lr

08012016 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012016:	b480      	push	{r7}
 8012018:	b085      	sub	sp, #20
 801201a:	af00      	add	r7, sp, #0
 801201c:	6078      	str	r0, [r7, #4]
 801201e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	3314      	adds	r3, #20
 8012024:	461a      	mov	r2, r3
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	4413      	add	r3, r2
 801202a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
}
 8012030:	4618      	mov	r0, r3
 8012032:	3714      	adds	r7, #20
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr

0801203c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801203c:	b480      	push	{r7}
 801203e:	b085      	sub	sp, #20
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012046:	2300      	movs	r3, #0
 8012048:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	685a      	ldr	r2, [r3, #4]
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012062:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012068:	431a      	orrs	r2, r3
                       Data->DPSM);
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801206e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012070:	68fa      	ldr	r2, [r7, #12]
 8012072:	4313      	orrs	r3, r2
 8012074:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801207a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	431a      	orrs	r2, r3
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012086:	2300      	movs	r3, #0

}
 8012088:	4618      	mov	r0, r3
 801208a:	3714      	adds	r7, #20
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b088      	sub	sp, #32
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80120a2:	2310      	movs	r3, #16
 80120a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120ac:	2300      	movs	r3, #0
 80120ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120b6:	f107 0308 	add.w	r3, r7, #8
 80120ba:	4619      	mov	r1, r3
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f7ff ff73 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80120c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80120c6:	2110      	movs	r1, #16
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 fa5f 	bl	801258c <SDMMC_GetCmdResp1>
 80120ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120d0:	69fb      	ldr	r3, [r7, #28]
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3720      	adds	r7, #32
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80120da:	b580      	push	{r7, lr}
 80120dc:	b088      	sub	sp, #32
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
 80120e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80120e8:	2311      	movs	r3, #17
 80120ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120f2:	2300      	movs	r3, #0
 80120f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120fc:	f107 0308 	add.w	r3, r7, #8
 8012100:	4619      	mov	r1, r3
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f7ff ff50 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012108:	f241 3288 	movw	r2, #5000	; 0x1388
 801210c:	2111      	movs	r1, #17
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f000 fa3c 	bl	801258c <SDMMC_GetCmdResp1>
 8012114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012116:	69fb      	ldr	r3, [r7, #28]
}
 8012118:	4618      	mov	r0, r3
 801211a:	3720      	adds	r7, #32
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}

08012120 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b088      	sub	sp, #32
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801212e:	2312      	movs	r3, #18
 8012130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012138:	2300      	movs	r3, #0
 801213a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012140:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012142:	f107 0308 	add.w	r3, r7, #8
 8012146:	4619      	mov	r1, r3
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f7ff ff2d 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012152:	2112      	movs	r1, #18
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f000 fa19 	bl	801258c <SDMMC_GetCmdResp1>
 801215a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801215c:	69fb      	ldr	r3, [r7, #28]
}
 801215e:	4618      	mov	r0, r3
 8012160:	3720      	adds	r7, #32
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}

08012166 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012166:	b580      	push	{r7, lr}
 8012168:	b088      	sub	sp, #32
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
 801216e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012174:	2318      	movs	r3, #24
 8012176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012178:	f44f 7380 	mov.w	r3, #256	; 0x100
 801217c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801217e:	2300      	movs	r3, #0
 8012180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012186:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012188:	f107 0308 	add.w	r3, r7, #8
 801218c:	4619      	mov	r1, r3
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f7ff ff0a 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012194:	f241 3288 	movw	r2, #5000	; 0x1388
 8012198:	2118      	movs	r1, #24
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 f9f6 	bl	801258c <SDMMC_GetCmdResp1>
 80121a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121a2:	69fb      	ldr	r3, [r7, #28]
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	3720      	adds	r7, #32
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b088      	sub	sp, #32
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80121ba:	2319      	movs	r3, #25
 80121bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121c4:	2300      	movs	r3, #0
 80121c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121ce:	f107 0308 	add.w	r3, r7, #8
 80121d2:	4619      	mov	r1, r3
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f7ff fee7 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80121da:	f241 3288 	movw	r2, #5000	; 0x1388
 80121de:	2119      	movs	r1, #25
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f000 f9d3 	bl	801258c <SDMMC_GetCmdResp1>
 80121e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121e8:	69fb      	ldr	r3, [r7, #28]
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3720      	adds	r7, #32
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
	...

080121f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b088      	sub	sp, #32
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80121fc:	2300      	movs	r3, #0
 80121fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012200:	230c      	movs	r3, #12
 8012202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801220a:	2300      	movs	r3, #0
 801220c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801220e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012212:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	68db      	ldr	r3, [r3, #12]
 8012218:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	68db      	ldr	r3, [r3, #12]
 8012224:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801222c:	f107 0308 	add.w	r3, r7, #8
 8012230:	4619      	mov	r1, r3
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f7ff feb8 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012238:	4a0b      	ldr	r2, [pc, #44]	; (8012268 <SDMMC_CmdStopTransfer+0x74>)
 801223a:	210c      	movs	r1, #12
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f000 f9a5 	bl	801258c <SDMMC_GetCmdResp1>
 8012242:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	68db      	ldr	r3, [r3, #12]
 8012248:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012256:	d101      	bne.n	801225c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012258:	2300      	movs	r3, #0
 801225a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801225c:	69fb      	ldr	r3, [r7, #28]
}
 801225e:	4618      	mov	r0, r3
 8012260:	3720      	adds	r7, #32
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	05f5e100 	.word	0x05f5e100

0801226c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b088      	sub	sp, #32
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801227a:	2307      	movs	r3, #7
 801227c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801227e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012284:	2300      	movs	r3, #0
 8012286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801228c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801228e:	f107 0308 	add.w	r3, r7, #8
 8012292:	4619      	mov	r1, r3
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f7ff fe87 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801229a:	f241 3288 	movw	r2, #5000	; 0x1388
 801229e:	2107      	movs	r1, #7
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f000 f973 	bl	801258c <SDMMC_GetCmdResp1>
 80122a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122a8:	69fb      	ldr	r3, [r7, #28]
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3720      	adds	r7, #32
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}

080122b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80122b2:	b580      	push	{r7, lr}
 80122b4:	b088      	sub	sp, #32
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80122ba:	2300      	movs	r3, #0
 80122bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80122be:	2300      	movs	r3, #0
 80122c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80122c2:	2300      	movs	r3, #0
 80122c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122c6:	2300      	movs	r3, #0
 80122c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122d0:	f107 0308 	add.w	r3, r7, #8
 80122d4:	4619      	mov	r1, r3
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f7ff fe66 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f000 fb97 	bl	8012a10 <SDMMC_GetCmdError>
 80122e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122e4:	69fb      	ldr	r3, [r7, #28]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3720      	adds	r7, #32
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}

080122ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80122ee:	b580      	push	{r7, lr}
 80122f0:	b088      	sub	sp, #32
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80122f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80122fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80122fc:	2308      	movs	r3, #8
 80122fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012306:	2300      	movs	r3, #0
 8012308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801230a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801230e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012310:	f107 0308 	add.w	r3, r7, #8
 8012314:	4619      	mov	r1, r3
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f7ff fe46 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f000 fb29 	bl	8012974 <SDMMC_GetCmdResp7>
 8012322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012324:	69fb      	ldr	r3, [r7, #28]
}
 8012326:	4618      	mov	r0, r3
 8012328:	3720      	adds	r7, #32
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}

0801232e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801232e:	b580      	push	{r7, lr}
 8012330:	b088      	sub	sp, #32
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
 8012336:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801233c:	2337      	movs	r3, #55	; 0x37
 801233e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012346:	2300      	movs	r3, #0
 8012348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801234a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801234e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012350:	f107 0308 	add.w	r3, r7, #8
 8012354:	4619      	mov	r1, r3
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f7ff fe26 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012360:	2137      	movs	r1, #55	; 0x37
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f000 f912 	bl	801258c <SDMMC_GetCmdResp1>
 8012368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801236a:	69fb      	ldr	r3, [r7, #28]
}
 801236c:	4618      	mov	r0, r3
 801236e:	3720      	adds	r7, #32
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}

08012374 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b088      	sub	sp, #32
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012382:	2329      	movs	r3, #41	; 0x29
 8012384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012386:	f44f 7380 	mov.w	r3, #256	; 0x100
 801238a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801238c:	2300      	movs	r3, #0
 801238e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012394:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012396:	f107 0308 	add.w	r3, r7, #8
 801239a:	4619      	mov	r1, r3
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f7ff fe03 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f000 fa2e 	bl	8012804 <SDMMC_GetCmdResp3>
 80123a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123aa:	69fb      	ldr	r3, [r7, #28]
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3720      	adds	r7, #32
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b088      	sub	sp, #32
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80123c2:	2306      	movs	r3, #6
 80123c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123cc:	2300      	movs	r3, #0
 80123ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123d6:	f107 0308 	add.w	r3, r7, #8
 80123da:	4619      	mov	r1, r3
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f7ff fde3 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80123e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80123e6:	2106      	movs	r1, #6
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f000 f8cf 	bl	801258c <SDMMC_GetCmdResp1>
 80123ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123f0:	69fb      	ldr	r3, [r7, #28]
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3720      	adds	r7, #32
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}

080123fa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80123fa:	b580      	push	{r7, lr}
 80123fc:	b088      	sub	sp, #32
 80123fe:	af00      	add	r7, sp, #0
 8012400:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012402:	2300      	movs	r3, #0
 8012404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012406:	2333      	movs	r3, #51	; 0x33
 8012408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801240a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801240e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012410:	2300      	movs	r3, #0
 8012412:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012418:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801241a:	f107 0308 	add.w	r3, r7, #8
 801241e:	4619      	mov	r1, r3
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f7ff fdc1 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012426:	f241 3288 	movw	r2, #5000	; 0x1388
 801242a:	2133      	movs	r1, #51	; 0x33
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f000 f8ad 	bl	801258c <SDMMC_GetCmdResp1>
 8012432:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012434:	69fb      	ldr	r3, [r7, #28]
}
 8012436:	4618      	mov	r0, r3
 8012438:	3720      	adds	r7, #32
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}

0801243e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801243e:	b580      	push	{r7, lr}
 8012440:	b088      	sub	sp, #32
 8012442:	af00      	add	r7, sp, #0
 8012444:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012446:	2300      	movs	r3, #0
 8012448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801244a:	2302      	movs	r3, #2
 801244c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801244e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012454:	2300      	movs	r3, #0
 8012456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801245c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801245e:	f107 0308 	add.w	r3, r7, #8
 8012462:	4619      	mov	r1, r3
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f7ff fd9f 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f000 f980 	bl	8012770 <SDMMC_GetCmdResp2>
 8012470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012472:	69fb      	ldr	r3, [r7, #28]
}
 8012474:	4618      	mov	r0, r3
 8012476:	3720      	adds	r7, #32
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b088      	sub	sp, #32
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801248a:	2309      	movs	r3, #9
 801248c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801248e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012492:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012494:	2300      	movs	r3, #0
 8012496:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801249c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801249e:	f107 0308 	add.w	r3, r7, #8
 80124a2:	4619      	mov	r1, r3
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f7ff fd7f 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f000 f960 	bl	8012770 <SDMMC_GetCmdResp2>
 80124b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124b2:	69fb      	ldr	r3, [r7, #28]
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3720      	adds	r7, #32
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b088      	sub	sp, #32
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80124c6:	2300      	movs	r3, #0
 80124c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80124ca:	2303      	movs	r3, #3
 80124cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124d4:	2300      	movs	r3, #0
 80124d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124de:	f107 0308 	add.w	r3, r7, #8
 80124e2:	4619      	mov	r1, r3
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7ff fd5f 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80124ea:	683a      	ldr	r2, [r7, #0]
 80124ec:	2103      	movs	r1, #3
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f000 f9c8 	bl	8012884 <SDMMC_GetCmdResp6>
 80124f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124f6:	69fb      	ldr	r3, [r7, #28]
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3720      	adds	r7, #32
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b088      	sub	sp, #32
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801250e:	230d      	movs	r3, #13
 8012510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012518:	2300      	movs	r3, #0
 801251a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801251c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012520:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012522:	f107 0308 	add.w	r3, r7, #8
 8012526:	4619      	mov	r1, r3
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f7ff fd3d 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012532:	210d      	movs	r1, #13
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f000 f829 	bl	801258c <SDMMC_GetCmdResp1>
 801253a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801253c:	69fb      	ldr	r3, [r7, #28]
}
 801253e:	4618      	mov	r0, r3
 8012540:	3720      	adds	r7, #32
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}

08012546 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012546:	b580      	push	{r7, lr}
 8012548:	b088      	sub	sp, #32
 801254a:	af00      	add	r7, sp, #0
 801254c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801254e:	2300      	movs	r3, #0
 8012550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012552:	230d      	movs	r3, #13
 8012554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012556:	f44f 7380 	mov.w	r3, #256	; 0x100
 801255a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801255c:	2300      	movs	r3, #0
 801255e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012566:	f107 0308 	add.w	r3, r7, #8
 801256a:	4619      	mov	r1, r3
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f7ff fd1b 	bl	8011fa8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012572:	f241 3288 	movw	r2, #5000	; 0x1388
 8012576:	210d      	movs	r1, #13
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f000 f807 	bl	801258c <SDMMC_GetCmdResp1>
 801257e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012580:	69fb      	ldr	r3, [r7, #28]
}
 8012582:	4618      	mov	r0, r3
 8012584:	3720      	adds	r7, #32
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
	...

0801258c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b088      	sub	sp, #32
 8012590:	af00      	add	r7, sp, #0
 8012592:	60f8      	str	r0, [r7, #12]
 8012594:	460b      	mov	r3, r1
 8012596:	607a      	str	r2, [r7, #4]
 8012598:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801259a:	4b70      	ldr	r3, [pc, #448]	; (801275c <SDMMC_GetCmdResp1+0x1d0>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	4a70      	ldr	r2, [pc, #448]	; (8012760 <SDMMC_GetCmdResp1+0x1d4>)
 80125a0:	fba2 2303 	umull	r2, r3, r2, r3
 80125a4:	0a5a      	lsrs	r2, r3, #9
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	fb02 f303 	mul.w	r3, r2, r3
 80125ac:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	1e5a      	subs	r2, r3, #1
 80125b2:	61fa      	str	r2, [r7, #28]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d102      	bne.n	80125be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80125b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125bc:	e0c9      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125c2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80125c4:	69ba      	ldr	r2, [r7, #24]
 80125c6:	4b67      	ldr	r3, [pc, #412]	; (8012764 <SDMMC_GetCmdResp1+0x1d8>)
 80125c8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d0ef      	beq.n	80125ae <SDMMC_GetCmdResp1+0x22>
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d1ea      	bne.n	80125ae <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125dc:	f003 0304 	and.w	r3, r3, #4
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d004      	beq.n	80125ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	2204      	movs	r2, #4
 80125e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80125ea:	2304      	movs	r3, #4
 80125ec:	e0b1      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125f2:	f003 0301 	and.w	r3, r3, #1
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d004      	beq.n	8012604 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	2201      	movs	r2, #1
 80125fe:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012600:	2301      	movs	r3, #1
 8012602:	e0a6      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	4a58      	ldr	r2, [pc, #352]	; (8012768 <SDMMC_GetCmdResp1+0x1dc>)
 8012608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801260a:	68f8      	ldr	r0, [r7, #12]
 801260c:	f7ff fcf6 	bl	8011ffc <SDMMC_GetCommandResponse>
 8012610:	4603      	mov	r3, r0
 8012612:	461a      	mov	r2, r3
 8012614:	7afb      	ldrb	r3, [r7, #11]
 8012616:	4293      	cmp	r3, r2
 8012618:	d001      	beq.n	801261e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801261a:	2301      	movs	r3, #1
 801261c:	e099      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801261e:	2100      	movs	r1, #0
 8012620:	68f8      	ldr	r0, [r7, #12]
 8012622:	f7ff fcf8 	bl	8012016 <SDMMC_GetResponse>
 8012626:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012628:	697a      	ldr	r2, [r7, #20]
 801262a:	4b50      	ldr	r3, [pc, #320]	; (801276c <SDMMC_GetCmdResp1+0x1e0>)
 801262c:	4013      	ands	r3, r2
 801262e:	2b00      	cmp	r3, #0
 8012630:	d101      	bne.n	8012636 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012632:	2300      	movs	r3, #0
 8012634:	e08d      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	2b00      	cmp	r3, #0
 801263a:	da02      	bge.n	8012642 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801263c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012640:	e087      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012648:	2b00      	cmp	r3, #0
 801264a:	d001      	beq.n	8012650 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801264c:	2340      	movs	r3, #64	; 0x40
 801264e:	e080      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012656:	2b00      	cmp	r3, #0
 8012658:	d001      	beq.n	801265e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801265a:	2380      	movs	r3, #128	; 0x80
 801265c:	e079      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012664:	2b00      	cmp	r3, #0
 8012666:	d002      	beq.n	801266e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012668:	f44f 7380 	mov.w	r3, #256	; 0x100
 801266c:	e071      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012674:	2b00      	cmp	r3, #0
 8012676:	d002      	beq.n	801267e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012678:	f44f 7300 	mov.w	r3, #512	; 0x200
 801267c:	e069      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012684:	2b00      	cmp	r3, #0
 8012686:	d002      	beq.n	801268e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801268c:	e061      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012694:	2b00      	cmp	r3, #0
 8012696:	d002      	beq.n	801269e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801269c:	e059      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d002      	beq.n	80126ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80126a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126ac:	e051      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d002      	beq.n	80126be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80126b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80126bc:	e049      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d002      	beq.n	80126ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80126c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80126cc:	e041      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d002      	beq.n	80126de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80126d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80126dc:	e039      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d002      	beq.n	80126ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80126e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80126ec:	e031      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d002      	beq.n	80126fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80126f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80126fc:	e029      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012704:	2b00      	cmp	r3, #0
 8012706:	d002      	beq.n	801270e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012708:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801270c:	e021      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012714:	2b00      	cmp	r3, #0
 8012716:	d002      	beq.n	801271e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012718:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801271c:	e019      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012724:	2b00      	cmp	r3, #0
 8012726:	d002      	beq.n	801272e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012728:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801272c:	e011      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012734:	2b00      	cmp	r3, #0
 8012736:	d002      	beq.n	801273e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801273c:	e009      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	f003 0308 	and.w	r3, r3, #8
 8012744:	2b00      	cmp	r3, #0
 8012746:	d002      	beq.n	801274e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012748:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801274c:	e001      	b.n	8012752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801274e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012752:	4618      	mov	r0, r3
 8012754:	3720      	adds	r7, #32
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	24000000 	.word	0x24000000
 8012760:	10624dd3 	.word	0x10624dd3
 8012764:	00200045 	.word	0x00200045
 8012768:	002000c5 	.word	0x002000c5
 801276c:	fdffe008 	.word	0xfdffe008

08012770 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012770:	b480      	push	{r7}
 8012772:	b085      	sub	sp, #20
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012778:	4b1f      	ldr	r3, [pc, #124]	; (80127f8 <SDMMC_GetCmdResp2+0x88>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	4a1f      	ldr	r2, [pc, #124]	; (80127fc <SDMMC_GetCmdResp2+0x8c>)
 801277e:	fba2 2303 	umull	r2, r3, r2, r3
 8012782:	0a5b      	lsrs	r3, r3, #9
 8012784:	f241 3288 	movw	r2, #5000	; 0x1388
 8012788:	fb02 f303 	mul.w	r3, r2, r3
 801278c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	1e5a      	subs	r2, r3, #1
 8012792:	60fa      	str	r2, [r7, #12]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d102      	bne.n	801279e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801279c:	e026      	b.n	80127ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d0ef      	beq.n	801278e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d1ea      	bne.n	801278e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127bc:	f003 0304 	and.w	r3, r3, #4
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d004      	beq.n	80127ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2204      	movs	r2, #4
 80127c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80127ca:	2304      	movs	r3, #4
 80127cc:	e00e      	b.n	80127ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127d2:	f003 0301 	and.w	r3, r3, #1
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d004      	beq.n	80127e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2201      	movs	r2, #1
 80127de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80127e0:	2301      	movs	r3, #1
 80127e2:	e003      	b.n	80127ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	4a06      	ldr	r2, [pc, #24]	; (8012800 <SDMMC_GetCmdResp2+0x90>)
 80127e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80127ea:	2300      	movs	r3, #0
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3714      	adds	r7, #20
 80127f0:	46bd      	mov	sp, r7
 80127f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f6:	4770      	bx	lr
 80127f8:	24000000 	.word	0x24000000
 80127fc:	10624dd3 	.word	0x10624dd3
 8012800:	002000c5 	.word	0x002000c5

08012804 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012804:	b480      	push	{r7}
 8012806:	b085      	sub	sp, #20
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801280c:	4b1a      	ldr	r3, [pc, #104]	; (8012878 <SDMMC_GetCmdResp3+0x74>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4a1a      	ldr	r2, [pc, #104]	; (801287c <SDMMC_GetCmdResp3+0x78>)
 8012812:	fba2 2303 	umull	r2, r3, r2, r3
 8012816:	0a5b      	lsrs	r3, r3, #9
 8012818:	f241 3288 	movw	r2, #5000	; 0x1388
 801281c:	fb02 f303 	mul.w	r3, r2, r3
 8012820:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	1e5a      	subs	r2, r3, #1
 8012826:	60fa      	str	r2, [r7, #12]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d102      	bne.n	8012832 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801282c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012830:	e01b      	b.n	801286a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012836:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801283e:	2b00      	cmp	r3, #0
 8012840:	d0ef      	beq.n	8012822 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012848:	2b00      	cmp	r3, #0
 801284a:	d1ea      	bne.n	8012822 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012850:	f003 0304 	and.w	r3, r3, #4
 8012854:	2b00      	cmp	r3, #0
 8012856:	d004      	beq.n	8012862 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2204      	movs	r2, #4
 801285c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801285e:	2304      	movs	r3, #4
 8012860:	e003      	b.n	801286a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4a06      	ldr	r2, [pc, #24]	; (8012880 <SDMMC_GetCmdResp3+0x7c>)
 8012866:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012868:	2300      	movs	r3, #0
}
 801286a:	4618      	mov	r0, r3
 801286c:	3714      	adds	r7, #20
 801286e:	46bd      	mov	sp, r7
 8012870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop
 8012878:	24000000 	.word	0x24000000
 801287c:	10624dd3 	.word	0x10624dd3
 8012880:	002000c5 	.word	0x002000c5

08012884 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b088      	sub	sp, #32
 8012888:	af00      	add	r7, sp, #0
 801288a:	60f8      	str	r0, [r7, #12]
 801288c:	460b      	mov	r3, r1
 801288e:	607a      	str	r2, [r7, #4]
 8012890:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012892:	4b35      	ldr	r3, [pc, #212]	; (8012968 <SDMMC_GetCmdResp6+0xe4>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	4a35      	ldr	r2, [pc, #212]	; (801296c <SDMMC_GetCmdResp6+0xe8>)
 8012898:	fba2 2303 	umull	r2, r3, r2, r3
 801289c:	0a5b      	lsrs	r3, r3, #9
 801289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80128a2:	fb02 f303 	mul.w	r3, r2, r3
 80128a6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80128a8:	69fb      	ldr	r3, [r7, #28]
 80128aa:	1e5a      	subs	r2, r3, #1
 80128ac:	61fa      	str	r2, [r7, #28]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d102      	bne.n	80128b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128b6:	e052      	b.n	801295e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128bc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128be:	69bb      	ldr	r3, [r7, #24]
 80128c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d0ef      	beq.n	80128a8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80128c8:	69bb      	ldr	r3, [r7, #24]
 80128ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d1ea      	bne.n	80128a8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128d6:	f003 0304 	and.w	r3, r3, #4
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d004      	beq.n	80128e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	2204      	movs	r2, #4
 80128e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80128e4:	2304      	movs	r3, #4
 80128e6:	e03a      	b.n	801295e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128ec:	f003 0301 	and.w	r3, r3, #1
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d004      	beq.n	80128fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2201      	movs	r2, #1
 80128f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128fa:	2301      	movs	r3, #1
 80128fc:	e02f      	b.n	801295e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80128fe:	68f8      	ldr	r0, [r7, #12]
 8012900:	f7ff fb7c 	bl	8011ffc <SDMMC_GetCommandResponse>
 8012904:	4603      	mov	r3, r0
 8012906:	461a      	mov	r2, r3
 8012908:	7afb      	ldrb	r3, [r7, #11]
 801290a:	4293      	cmp	r3, r2
 801290c:	d001      	beq.n	8012912 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801290e:	2301      	movs	r3, #1
 8012910:	e025      	b.n	801295e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	4a16      	ldr	r2, [pc, #88]	; (8012970 <SDMMC_GetCmdResp6+0xec>)
 8012916:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012918:	2100      	movs	r1, #0
 801291a:	68f8      	ldr	r0, [r7, #12]
 801291c:	f7ff fb7b 	bl	8012016 <SDMMC_GetResponse>
 8012920:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012928:	2b00      	cmp	r3, #0
 801292a:	d106      	bne.n	801293a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	0c1b      	lsrs	r3, r3, #16
 8012930:	b29a      	uxth	r2, r3
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012936:	2300      	movs	r3, #0
 8012938:	e011      	b.n	801295e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012940:	2b00      	cmp	r3, #0
 8012942:	d002      	beq.n	801294a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012948:	e009      	b.n	801295e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012950:	2b00      	cmp	r3, #0
 8012952:	d002      	beq.n	801295a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012958:	e001      	b.n	801295e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801295a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801295e:	4618      	mov	r0, r3
 8012960:	3720      	adds	r7, #32
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	24000000 	.word	0x24000000
 801296c:	10624dd3 	.word	0x10624dd3
 8012970:	002000c5 	.word	0x002000c5

08012974 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012974:	b480      	push	{r7}
 8012976:	b085      	sub	sp, #20
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801297c:	4b22      	ldr	r3, [pc, #136]	; (8012a08 <SDMMC_GetCmdResp7+0x94>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4a22      	ldr	r2, [pc, #136]	; (8012a0c <SDMMC_GetCmdResp7+0x98>)
 8012982:	fba2 2303 	umull	r2, r3, r2, r3
 8012986:	0a5b      	lsrs	r3, r3, #9
 8012988:	f241 3288 	movw	r2, #5000	; 0x1388
 801298c:	fb02 f303 	mul.w	r3, r2, r3
 8012990:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	1e5a      	subs	r2, r3, #1
 8012996:	60fa      	str	r2, [r7, #12]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d102      	bne.n	80129a2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801299c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129a0:	e02c      	b.n	80129fc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d0ef      	beq.n	8012992 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d1ea      	bne.n	8012992 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129c0:	f003 0304 	and.w	r3, r3, #4
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d004      	beq.n	80129d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2204      	movs	r2, #4
 80129cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80129ce:	2304      	movs	r3, #4
 80129d0:	e014      	b.n	80129fc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129d6:	f003 0301 	and.w	r3, r3, #1
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d004      	beq.n	80129e8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2201      	movs	r2, #1
 80129e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80129e4:	2301      	movs	r3, #1
 80129e6:	e009      	b.n	80129fc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d002      	beq.n	80129fa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2240      	movs	r2, #64	; 0x40
 80129f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80129fa:	2300      	movs	r3, #0

}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3714      	adds	r7, #20
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr
 8012a08:	24000000 	.word	0x24000000
 8012a0c:	10624dd3 	.word	0x10624dd3

08012a10 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012a10:	b480      	push	{r7}
 8012a12:	b085      	sub	sp, #20
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012a18:	4b11      	ldr	r3, [pc, #68]	; (8012a60 <SDMMC_GetCmdError+0x50>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	4a11      	ldr	r2, [pc, #68]	; (8012a64 <SDMMC_GetCmdError+0x54>)
 8012a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8012a22:	0a5b      	lsrs	r3, r3, #9
 8012a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a28:	fb02 f303 	mul.w	r3, r2, r3
 8012a2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	1e5a      	subs	r2, r3, #1
 8012a32:	60fa      	str	r2, [r7, #12]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d102      	bne.n	8012a3e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a3c:	e009      	b.n	8012a52 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d0f1      	beq.n	8012a2e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	4a06      	ldr	r2, [pc, #24]	; (8012a68 <SDMMC_GetCmdError+0x58>)
 8012a4e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012a50:	2300      	movs	r3, #0
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3714      	adds	r7, #20
 8012a56:	46bd      	mov	sp, r7
 8012a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	24000000 	.word	0x24000000
 8012a64:	10624dd3 	.word	0x10624dd3
 8012a68:	002000c5 	.word	0x002000c5

08012a6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012a6c:	b084      	sub	sp, #16
 8012a6e:	b580      	push	{r7, lr}
 8012a70:	b084      	sub	sp, #16
 8012a72:	af00      	add	r7, sp, #0
 8012a74:	6078      	str	r0, [r7, #4]
 8012a76:	f107 001c 	add.w	r0, r7, #28
 8012a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	d120      	bne.n	8012ac6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	68da      	ldr	r2, [r3, #12]
 8012a94:	4b2a      	ldr	r3, [pc, #168]	; (8012b40 <USB_CoreInit+0xd4>)
 8012a96:	4013      	ands	r3, r2
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012aaa:	2b01      	cmp	r3, #1
 8012aac:	d105      	bne.n	8012aba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	68db      	ldr	r3, [r3, #12]
 8012ab2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f001 faf8 	bl	80140b0 <USB_CoreReset>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	73fb      	strb	r3, [r7, #15]
 8012ac4:	e01a      	b.n	8012afc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	68db      	ldr	r3, [r3, #12]
 8012aca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f001 faec 	bl	80140b0 <USB_CoreReset>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d106      	bne.n	8012af0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ae6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	639a      	str	r2, [r3, #56]	; 0x38
 8012aee:	e005      	b.n	8012afc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012af4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d116      	bne.n	8012b30 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b06:	b29a      	uxth	r2, r3
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012b10:	4b0c      	ldr	r3, [pc, #48]	; (8012b44 <USB_CoreInit+0xd8>)
 8012b12:	4313      	orrs	r3, r2
 8012b14:	687a      	ldr	r2, [r7, #4]
 8012b16:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	689b      	ldr	r3, [r3, #8]
 8012b1c:	f043 0206 	orr.w	r2, r3, #6
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	689b      	ldr	r3, [r3, #8]
 8012b28:	f043 0220 	orr.w	r2, r3, #32
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3710      	adds	r7, #16
 8012b36:	46bd      	mov	sp, r7
 8012b38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012b3c:	b004      	add	sp, #16
 8012b3e:	4770      	bx	lr
 8012b40:	ffbdffbf 	.word	0xffbdffbf
 8012b44:	03ee0000 	.word	0x03ee0000

08012b48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b087      	sub	sp, #28
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	4613      	mov	r3, r2
 8012b54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012b56:	79fb      	ldrb	r3, [r7, #7]
 8012b58:	2b02      	cmp	r3, #2
 8012b5a:	d165      	bne.n	8012c28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	4a41      	ldr	r2, [pc, #260]	; (8012c64 <USB_SetTurnaroundTime+0x11c>)
 8012b60:	4293      	cmp	r3, r2
 8012b62:	d906      	bls.n	8012b72 <USB_SetTurnaroundTime+0x2a>
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	4a40      	ldr	r2, [pc, #256]	; (8012c68 <USB_SetTurnaroundTime+0x120>)
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d202      	bcs.n	8012b72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012b6c:	230f      	movs	r3, #15
 8012b6e:	617b      	str	r3, [r7, #20]
 8012b70:	e062      	b.n	8012c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	4a3c      	ldr	r2, [pc, #240]	; (8012c68 <USB_SetTurnaroundTime+0x120>)
 8012b76:	4293      	cmp	r3, r2
 8012b78:	d306      	bcc.n	8012b88 <USB_SetTurnaroundTime+0x40>
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	4a3b      	ldr	r2, [pc, #236]	; (8012c6c <USB_SetTurnaroundTime+0x124>)
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	d202      	bcs.n	8012b88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012b82:	230e      	movs	r3, #14
 8012b84:	617b      	str	r3, [r7, #20]
 8012b86:	e057      	b.n	8012c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	4a38      	ldr	r2, [pc, #224]	; (8012c6c <USB_SetTurnaroundTime+0x124>)
 8012b8c:	4293      	cmp	r3, r2
 8012b8e:	d306      	bcc.n	8012b9e <USB_SetTurnaroundTime+0x56>
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	4a37      	ldr	r2, [pc, #220]	; (8012c70 <USB_SetTurnaroundTime+0x128>)
 8012b94:	4293      	cmp	r3, r2
 8012b96:	d202      	bcs.n	8012b9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012b98:	230d      	movs	r3, #13
 8012b9a:	617b      	str	r3, [r7, #20]
 8012b9c:	e04c      	b.n	8012c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	4a33      	ldr	r2, [pc, #204]	; (8012c70 <USB_SetTurnaroundTime+0x128>)
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	d306      	bcc.n	8012bb4 <USB_SetTurnaroundTime+0x6c>
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	4a32      	ldr	r2, [pc, #200]	; (8012c74 <USB_SetTurnaroundTime+0x12c>)
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d802      	bhi.n	8012bb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012bae:	230c      	movs	r3, #12
 8012bb0:	617b      	str	r3, [r7, #20]
 8012bb2:	e041      	b.n	8012c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	4a2f      	ldr	r2, [pc, #188]	; (8012c74 <USB_SetTurnaroundTime+0x12c>)
 8012bb8:	4293      	cmp	r3, r2
 8012bba:	d906      	bls.n	8012bca <USB_SetTurnaroundTime+0x82>
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	4a2e      	ldr	r2, [pc, #184]	; (8012c78 <USB_SetTurnaroundTime+0x130>)
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d802      	bhi.n	8012bca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012bc4:	230b      	movs	r3, #11
 8012bc6:	617b      	str	r3, [r7, #20]
 8012bc8:	e036      	b.n	8012c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	4a2a      	ldr	r2, [pc, #168]	; (8012c78 <USB_SetTurnaroundTime+0x130>)
 8012bce:	4293      	cmp	r3, r2
 8012bd0:	d906      	bls.n	8012be0 <USB_SetTurnaroundTime+0x98>
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	4a29      	ldr	r2, [pc, #164]	; (8012c7c <USB_SetTurnaroundTime+0x134>)
 8012bd6:	4293      	cmp	r3, r2
 8012bd8:	d802      	bhi.n	8012be0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012bda:	230a      	movs	r3, #10
 8012bdc:	617b      	str	r3, [r7, #20]
 8012bde:	e02b      	b.n	8012c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012be0:	68bb      	ldr	r3, [r7, #8]
 8012be2:	4a26      	ldr	r2, [pc, #152]	; (8012c7c <USB_SetTurnaroundTime+0x134>)
 8012be4:	4293      	cmp	r3, r2
 8012be6:	d906      	bls.n	8012bf6 <USB_SetTurnaroundTime+0xae>
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	4a25      	ldr	r2, [pc, #148]	; (8012c80 <USB_SetTurnaroundTime+0x138>)
 8012bec:	4293      	cmp	r3, r2
 8012bee:	d202      	bcs.n	8012bf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012bf0:	2309      	movs	r3, #9
 8012bf2:	617b      	str	r3, [r7, #20]
 8012bf4:	e020      	b.n	8012c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	4a21      	ldr	r2, [pc, #132]	; (8012c80 <USB_SetTurnaroundTime+0x138>)
 8012bfa:	4293      	cmp	r3, r2
 8012bfc:	d306      	bcc.n	8012c0c <USB_SetTurnaroundTime+0xc4>
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	4a20      	ldr	r2, [pc, #128]	; (8012c84 <USB_SetTurnaroundTime+0x13c>)
 8012c02:	4293      	cmp	r3, r2
 8012c04:	d802      	bhi.n	8012c0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012c06:	2308      	movs	r3, #8
 8012c08:	617b      	str	r3, [r7, #20]
 8012c0a:	e015      	b.n	8012c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	4a1d      	ldr	r2, [pc, #116]	; (8012c84 <USB_SetTurnaroundTime+0x13c>)
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d906      	bls.n	8012c22 <USB_SetTurnaroundTime+0xda>
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	4a1c      	ldr	r2, [pc, #112]	; (8012c88 <USB_SetTurnaroundTime+0x140>)
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	d202      	bcs.n	8012c22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012c1c:	2307      	movs	r3, #7
 8012c1e:	617b      	str	r3, [r7, #20]
 8012c20:	e00a      	b.n	8012c38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012c22:	2306      	movs	r3, #6
 8012c24:	617b      	str	r3, [r7, #20]
 8012c26:	e007      	b.n	8012c38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012c28:	79fb      	ldrb	r3, [r7, #7]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d102      	bne.n	8012c34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012c2e:	2309      	movs	r3, #9
 8012c30:	617b      	str	r3, [r7, #20]
 8012c32:	e001      	b.n	8012c38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012c34:	2309      	movs	r3, #9
 8012c36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	68db      	ldr	r3, [r3, #12]
 8012c3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	68da      	ldr	r2, [r3, #12]
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	029b      	lsls	r3, r3, #10
 8012c4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012c50:	431a      	orrs	r2, r3
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012c56:	2300      	movs	r3, #0
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	371c      	adds	r7, #28
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr
 8012c64:	00d8acbf 	.word	0x00d8acbf
 8012c68:	00e4e1c0 	.word	0x00e4e1c0
 8012c6c:	00f42400 	.word	0x00f42400
 8012c70:	01067380 	.word	0x01067380
 8012c74:	011a499f 	.word	0x011a499f
 8012c78:	01312cff 	.word	0x01312cff
 8012c7c:	014ca43f 	.word	0x014ca43f
 8012c80:	016e3600 	.word	0x016e3600
 8012c84:	01a6ab1f 	.word	0x01a6ab1f
 8012c88:	01e84800 	.word	0x01e84800

08012c8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b083      	sub	sp, #12
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	689b      	ldr	r3, [r3, #8]
 8012c98:	f043 0201 	orr.w	r2, r3, #1
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012ca0:	2300      	movs	r3, #0
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	370c      	adds	r7, #12
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cac:	4770      	bx	lr

08012cae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012cae:	b480      	push	{r7}
 8012cb0:	b083      	sub	sp, #12
 8012cb2:	af00      	add	r7, sp, #0
 8012cb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	689b      	ldr	r3, [r3, #8]
 8012cba:	f023 0201 	bic.w	r2, r3, #1
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012cc2:	2300      	movs	r3, #0
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	370c      	adds	r7, #12
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cce:	4770      	bx	lr

08012cd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b084      	sub	sp, #16
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	460b      	mov	r3, r1
 8012cda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	68db      	ldr	r3, [r3, #12]
 8012ce4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012cec:	78fb      	ldrb	r3, [r7, #3]
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d115      	bne.n	8012d1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	68db      	ldr	r3, [r3, #12]
 8012cf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012cfe:	2001      	movs	r0, #1
 8012d00:	f7f1 fd58 	bl	80047b4 <HAL_Delay>
      ms++;
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	3301      	adds	r3, #1
 8012d08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f001 f93f 	bl	8013f8e <USB_GetMode>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d01e      	beq.n	8012d54 <USB_SetCurrentMode+0x84>
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	2b31      	cmp	r3, #49	; 0x31
 8012d1a:	d9f0      	bls.n	8012cfe <USB_SetCurrentMode+0x2e>
 8012d1c:	e01a      	b.n	8012d54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012d1e:	78fb      	ldrb	r3, [r7, #3]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d115      	bne.n	8012d50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	68db      	ldr	r3, [r3, #12]
 8012d28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d30:	2001      	movs	r0, #1
 8012d32:	f7f1 fd3f 	bl	80047b4 <HAL_Delay>
      ms++;
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	3301      	adds	r3, #1
 8012d3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f001 f926 	bl	8013f8e <USB_GetMode>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d005      	beq.n	8012d54 <USB_SetCurrentMode+0x84>
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	2b31      	cmp	r3, #49	; 0x31
 8012d4c:	d9f0      	bls.n	8012d30 <USB_SetCurrentMode+0x60>
 8012d4e:	e001      	b.n	8012d54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012d50:	2301      	movs	r3, #1
 8012d52:	e005      	b.n	8012d60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	2b32      	cmp	r3, #50	; 0x32
 8012d58:	d101      	bne.n	8012d5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	e000      	b.n	8012d60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012d5e:	2300      	movs	r3, #0
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	3710      	adds	r7, #16
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}

08012d68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012d68:	b084      	sub	sp, #16
 8012d6a:	b580      	push	{r7, lr}
 8012d6c:	b086      	sub	sp, #24
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	6078      	str	r0, [r7, #4]
 8012d72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012d82:	2300      	movs	r3, #0
 8012d84:	613b      	str	r3, [r7, #16]
 8012d86:	e009      	b.n	8012d9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012d88:	687a      	ldr	r2, [r7, #4]
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	3340      	adds	r3, #64	; 0x40
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	4413      	add	r3, r2
 8012d92:	2200      	movs	r2, #0
 8012d94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	3301      	adds	r3, #1
 8012d9a:	613b      	str	r3, [r7, #16]
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	2b0e      	cmp	r3, #14
 8012da0:	d9f2      	bls.n	8012d88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d11c      	bne.n	8012de2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dae:	685b      	ldr	r3, [r3, #4]
 8012db0:	68fa      	ldr	r2, [r7, #12]
 8012db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012db6:	f043 0302 	orr.w	r3, r3, #2
 8012dba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	601a      	str	r2, [r3, #0]
 8012de0:	e005      	b.n	8012dee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012de6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012df4:	461a      	mov	r2, r3
 8012df6:	2300      	movs	r3, #0
 8012df8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e00:	4619      	mov	r1, r3
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e08:	461a      	mov	r2, r3
 8012e0a:	680b      	ldr	r3, [r1, #0]
 8012e0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d10c      	bne.n	8012e2e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d104      	bne.n	8012e24 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012e1a:	2100      	movs	r1, #0
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f000 f965 	bl	80130ec <USB_SetDevSpeed>
 8012e22:	e008      	b.n	8012e36 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012e24:	2101      	movs	r1, #1
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f000 f960 	bl	80130ec <USB_SetDevSpeed>
 8012e2c:	e003      	b.n	8012e36 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012e2e:	2103      	movs	r1, #3
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f000 f95b 	bl	80130ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012e36:	2110      	movs	r1, #16
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f000 f8f3 	bl	8013024 <USB_FlushTxFifo>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d001      	beq.n	8012e48 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012e44:	2301      	movs	r3, #1
 8012e46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f000 f91f 	bl	801308c <USB_FlushRxFifo>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d001      	beq.n	8012e58 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012e54:	2301      	movs	r3, #1
 8012e56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e5e:	461a      	mov	r2, r3
 8012e60:	2300      	movs	r3, #0
 8012e62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e76:	461a      	mov	r2, r3
 8012e78:	2300      	movs	r3, #0
 8012e7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	613b      	str	r3, [r7, #16]
 8012e80:	e043      	b.n	8012f0a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	015a      	lsls	r2, r3, #5
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	4413      	add	r3, r2
 8012e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e98:	d118      	bne.n	8012ecc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d10a      	bne.n	8012eb6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012ea0:	693b      	ldr	r3, [r7, #16]
 8012ea2:	015a      	lsls	r2, r3, #5
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	4413      	add	r3, r2
 8012ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eac:	461a      	mov	r2, r3
 8012eae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012eb2:	6013      	str	r3, [r2, #0]
 8012eb4:	e013      	b.n	8012ede <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	015a      	lsls	r2, r3, #5
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	4413      	add	r3, r2
 8012ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012ec8:	6013      	str	r3, [r2, #0]
 8012eca:	e008      	b.n	8012ede <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	015a      	lsls	r2, r3, #5
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	4413      	add	r3, r2
 8012ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ed8:	461a      	mov	r2, r3
 8012eda:	2300      	movs	r3, #0
 8012edc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	015a      	lsls	r2, r3, #5
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eea:	461a      	mov	r2, r3
 8012eec:	2300      	movs	r3, #0
 8012eee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012ef0:	693b      	ldr	r3, [r7, #16]
 8012ef2:	015a      	lsls	r2, r3, #5
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	4413      	add	r3, r2
 8012ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012efc:	461a      	mov	r2, r3
 8012efe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	3301      	adds	r3, #1
 8012f08:	613b      	str	r3, [r7, #16]
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0c:	693a      	ldr	r2, [r7, #16]
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d3b7      	bcc.n	8012e82 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f12:	2300      	movs	r3, #0
 8012f14:	613b      	str	r3, [r7, #16]
 8012f16:	e043      	b.n	8012fa0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	015a      	lsls	r2, r3, #5
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	4413      	add	r3, r2
 8012f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f2e:	d118      	bne.n	8012f62 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d10a      	bne.n	8012f4c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	015a      	lsls	r2, r3, #5
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	4413      	add	r3, r2
 8012f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f42:	461a      	mov	r2, r3
 8012f44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f48:	6013      	str	r3, [r2, #0]
 8012f4a:	e013      	b.n	8012f74 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	015a      	lsls	r2, r3, #5
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	4413      	add	r3, r2
 8012f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f58:	461a      	mov	r2, r3
 8012f5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f5e:	6013      	str	r3, [r2, #0]
 8012f60:	e008      	b.n	8012f74 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	015a      	lsls	r2, r3, #5
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	4413      	add	r3, r2
 8012f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f6e:	461a      	mov	r2, r3
 8012f70:	2300      	movs	r3, #0
 8012f72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012f74:	693b      	ldr	r3, [r7, #16]
 8012f76:	015a      	lsls	r2, r3, #5
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f80:	461a      	mov	r2, r3
 8012f82:	2300      	movs	r3, #0
 8012f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	015a      	lsls	r2, r3, #5
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	4413      	add	r3, r2
 8012f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f92:	461a      	mov	r2, r3
 8012f94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f9a:	693b      	ldr	r3, [r7, #16]
 8012f9c:	3301      	adds	r3, #1
 8012f9e:	613b      	str	r3, [r7, #16]
 8012fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa2:	693a      	ldr	r2, [r7, #16]
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	d3b7      	bcc.n	8012f18 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fae:	691b      	ldr	r3, [r3, #16]
 8012fb0:	68fa      	ldr	r2, [r7, #12]
 8012fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012fba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012fc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d105      	bne.n	8012fdc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	699b      	ldr	r3, [r3, #24]
 8012fd4:	f043 0210 	orr.w	r2, r3, #16
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	699a      	ldr	r2, [r3, #24]
 8012fe0:	4b0e      	ldr	r3, [pc, #56]	; (801301c <USB_DevInit+0x2b4>)
 8012fe2:	4313      	orrs	r3, r2
 8012fe4:	687a      	ldr	r2, [r7, #4]
 8012fe6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d005      	beq.n	8012ffa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	699b      	ldr	r3, [r3, #24]
 8012ff2:	f043 0208 	orr.w	r2, r3, #8
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	d105      	bne.n	801300c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	699a      	ldr	r2, [r3, #24]
 8013004:	4b06      	ldr	r3, [pc, #24]	; (8013020 <USB_DevInit+0x2b8>)
 8013006:	4313      	orrs	r3, r2
 8013008:	687a      	ldr	r2, [r7, #4]
 801300a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801300c:	7dfb      	ldrb	r3, [r7, #23]
}
 801300e:	4618      	mov	r0, r3
 8013010:	3718      	adds	r7, #24
 8013012:	46bd      	mov	sp, r7
 8013014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013018:	b004      	add	sp, #16
 801301a:	4770      	bx	lr
 801301c:	803c3800 	.word	0x803c3800
 8013020:	40000004 	.word	0x40000004

08013024 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013024:	b480      	push	{r7}
 8013026:	b085      	sub	sp, #20
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801302e:	2300      	movs	r3, #0
 8013030:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	3301      	adds	r3, #1
 8013036:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	4a13      	ldr	r2, [pc, #76]	; (8013088 <USB_FlushTxFifo+0x64>)
 801303c:	4293      	cmp	r3, r2
 801303e:	d901      	bls.n	8013044 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013040:	2303      	movs	r3, #3
 8013042:	e01b      	b.n	801307c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	691b      	ldr	r3, [r3, #16]
 8013048:	2b00      	cmp	r3, #0
 801304a:	daf2      	bge.n	8013032 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801304c:	2300      	movs	r3, #0
 801304e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	019b      	lsls	r3, r3, #6
 8013054:	f043 0220 	orr.w	r2, r3, #32
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	3301      	adds	r3, #1
 8013060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	4a08      	ldr	r2, [pc, #32]	; (8013088 <USB_FlushTxFifo+0x64>)
 8013066:	4293      	cmp	r3, r2
 8013068:	d901      	bls.n	801306e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801306a:	2303      	movs	r3, #3
 801306c:	e006      	b.n	801307c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	691b      	ldr	r3, [r3, #16]
 8013072:	f003 0320 	and.w	r3, r3, #32
 8013076:	2b20      	cmp	r3, #32
 8013078:	d0f0      	beq.n	801305c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801307a:	2300      	movs	r3, #0
}
 801307c:	4618      	mov	r0, r3
 801307e:	3714      	adds	r7, #20
 8013080:	46bd      	mov	sp, r7
 8013082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013086:	4770      	bx	lr
 8013088:	00030d40 	.word	0x00030d40

0801308c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801308c:	b480      	push	{r7}
 801308e:	b085      	sub	sp, #20
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013094:	2300      	movs	r3, #0
 8013096:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	3301      	adds	r3, #1
 801309c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	4a11      	ldr	r2, [pc, #68]	; (80130e8 <USB_FlushRxFifo+0x5c>)
 80130a2:	4293      	cmp	r3, r2
 80130a4:	d901      	bls.n	80130aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80130a6:	2303      	movs	r3, #3
 80130a8:	e018      	b.n	80130dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	691b      	ldr	r3, [r3, #16]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	daf2      	bge.n	8013098 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80130b2:	2300      	movs	r3, #0
 80130b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2210      	movs	r2, #16
 80130ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	3301      	adds	r3, #1
 80130c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	4a08      	ldr	r2, [pc, #32]	; (80130e8 <USB_FlushRxFifo+0x5c>)
 80130c6:	4293      	cmp	r3, r2
 80130c8:	d901      	bls.n	80130ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80130ca:	2303      	movs	r3, #3
 80130cc:	e006      	b.n	80130dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	691b      	ldr	r3, [r3, #16]
 80130d2:	f003 0310 	and.w	r3, r3, #16
 80130d6:	2b10      	cmp	r3, #16
 80130d8:	d0f0      	beq.n	80130bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80130da:	2300      	movs	r3, #0
}
 80130dc:	4618      	mov	r0, r3
 80130de:	3714      	adds	r7, #20
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr
 80130e8:	00030d40 	.word	0x00030d40

080130ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80130ec:	b480      	push	{r7}
 80130ee:	b085      	sub	sp, #20
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	460b      	mov	r3, r1
 80130f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	78fb      	ldrb	r3, [r7, #3]
 8013106:	68f9      	ldr	r1, [r7, #12]
 8013108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801310c:	4313      	orrs	r3, r2
 801310e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013110:	2300      	movs	r3, #0
}
 8013112:	4618      	mov	r0, r3
 8013114:	3714      	adds	r7, #20
 8013116:	46bd      	mov	sp, r7
 8013118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311c:	4770      	bx	lr

0801311e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801311e:	b480      	push	{r7}
 8013120:	b087      	sub	sp, #28
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013130:	689b      	ldr	r3, [r3, #8]
 8013132:	f003 0306 	and.w	r3, r3, #6
 8013136:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d102      	bne.n	8013144 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801313e:	2300      	movs	r3, #0
 8013140:	75fb      	strb	r3, [r7, #23]
 8013142:	e00a      	b.n	801315a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	2b02      	cmp	r3, #2
 8013148:	d002      	beq.n	8013150 <USB_GetDevSpeed+0x32>
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	2b06      	cmp	r3, #6
 801314e:	d102      	bne.n	8013156 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013150:	2302      	movs	r3, #2
 8013152:	75fb      	strb	r3, [r7, #23]
 8013154:	e001      	b.n	801315a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013156:	230f      	movs	r3, #15
 8013158:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801315a:	7dfb      	ldrb	r3, [r7, #23]
}
 801315c:	4618      	mov	r0, r3
 801315e:	371c      	adds	r7, #28
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr

08013168 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013168:	b480      	push	{r7}
 801316a:	b085      	sub	sp, #20
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	785b      	ldrb	r3, [r3, #1]
 8013180:	2b01      	cmp	r3, #1
 8013182:	d139      	bne.n	80131f8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801318a:	69da      	ldr	r2, [r3, #28]
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	f003 030f 	and.w	r3, r3, #15
 8013194:	2101      	movs	r1, #1
 8013196:	fa01 f303 	lsl.w	r3, r1, r3
 801319a:	b29b      	uxth	r3, r3
 801319c:	68f9      	ldr	r1, [r7, #12]
 801319e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131a2:	4313      	orrs	r3, r2
 80131a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	015a      	lsls	r2, r3, #5
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	4413      	add	r3, r2
 80131ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d153      	bne.n	8013264 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	015a      	lsls	r2, r3, #5
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	4413      	add	r3, r2
 80131c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131c8:	681a      	ldr	r2, [r3, #0]
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	689b      	ldr	r3, [r3, #8]
 80131ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	791b      	ldrb	r3, [r3, #4]
 80131d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80131d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	059b      	lsls	r3, r3, #22
 80131de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80131e0:	431a      	orrs	r2, r3
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	0159      	lsls	r1, r3, #5
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	440b      	add	r3, r1
 80131ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ee:	4619      	mov	r1, r3
 80131f0:	4b20      	ldr	r3, [pc, #128]	; (8013274 <USB_ActivateEndpoint+0x10c>)
 80131f2:	4313      	orrs	r3, r2
 80131f4:	600b      	str	r3, [r1, #0]
 80131f6:	e035      	b.n	8013264 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131fe:	69da      	ldr	r2, [r3, #28]
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	f003 030f 	and.w	r3, r3, #15
 8013208:	2101      	movs	r1, #1
 801320a:	fa01 f303 	lsl.w	r3, r1, r3
 801320e:	041b      	lsls	r3, r3, #16
 8013210:	68f9      	ldr	r1, [r7, #12]
 8013212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013216:	4313      	orrs	r3, r2
 8013218:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	015a      	lsls	r2, r3, #5
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	4413      	add	r3, r2
 8013222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801322c:	2b00      	cmp	r3, #0
 801322e:	d119      	bne.n	8013264 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	015a      	lsls	r2, r3, #5
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	4413      	add	r3, r2
 8013238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801323c:	681a      	ldr	r2, [r3, #0]
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	689b      	ldr	r3, [r3, #8]
 8013242:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	791b      	ldrb	r3, [r3, #4]
 801324a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801324c:	430b      	orrs	r3, r1
 801324e:	431a      	orrs	r2, r3
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	0159      	lsls	r1, r3, #5
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	440b      	add	r3, r1
 8013258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801325c:	4619      	mov	r1, r3
 801325e:	4b05      	ldr	r3, [pc, #20]	; (8013274 <USB_ActivateEndpoint+0x10c>)
 8013260:	4313      	orrs	r3, r2
 8013262:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013264:	2300      	movs	r3, #0
}
 8013266:	4618      	mov	r0, r3
 8013268:	3714      	adds	r7, #20
 801326a:	46bd      	mov	sp, r7
 801326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013270:	4770      	bx	lr
 8013272:	bf00      	nop
 8013274:	10008000 	.word	0x10008000

08013278 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013278:	b480      	push	{r7}
 801327a:	b085      	sub	sp, #20
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	785b      	ldrb	r3, [r3, #1]
 8013290:	2b01      	cmp	r3, #1
 8013292:	d161      	bne.n	8013358 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	015a      	lsls	r2, r3, #5
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	4413      	add	r3, r2
 801329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132aa:	d11f      	bne.n	80132ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	015a      	lsls	r2, r3, #5
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	4413      	add	r3, r2
 80132b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	68ba      	ldr	r2, [r7, #8]
 80132bc:	0151      	lsls	r1, r2, #5
 80132be:	68fa      	ldr	r2, [r7, #12]
 80132c0:	440a      	add	r2, r1
 80132c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80132ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	015a      	lsls	r2, r3, #5
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	4413      	add	r3, r2
 80132d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	68ba      	ldr	r2, [r7, #8]
 80132dc:	0151      	lsls	r1, r2, #5
 80132de:	68fa      	ldr	r2, [r7, #12]
 80132e0:	440a      	add	r2, r1
 80132e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80132ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	f003 030f 	and.w	r3, r3, #15
 80132fc:	2101      	movs	r1, #1
 80132fe:	fa01 f303 	lsl.w	r3, r1, r3
 8013302:	b29b      	uxth	r3, r3
 8013304:	43db      	mvns	r3, r3
 8013306:	68f9      	ldr	r1, [r7, #12]
 8013308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801330c:	4013      	ands	r3, r2
 801330e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013316:	69da      	ldr	r2, [r3, #28]
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	f003 030f 	and.w	r3, r3, #15
 8013320:	2101      	movs	r1, #1
 8013322:	fa01 f303 	lsl.w	r3, r1, r3
 8013326:	b29b      	uxth	r3, r3
 8013328:	43db      	mvns	r3, r3
 801332a:	68f9      	ldr	r1, [r7, #12]
 801332c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013330:	4013      	ands	r3, r2
 8013332:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	015a      	lsls	r2, r3, #5
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	4413      	add	r3, r2
 801333c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013340:	681a      	ldr	r2, [r3, #0]
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	0159      	lsls	r1, r3, #5
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	440b      	add	r3, r1
 801334a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801334e:	4619      	mov	r1, r3
 8013350:	4b35      	ldr	r3, [pc, #212]	; (8013428 <USB_DeactivateEndpoint+0x1b0>)
 8013352:	4013      	ands	r3, r2
 8013354:	600b      	str	r3, [r1, #0]
 8013356:	e060      	b.n	801341a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	015a      	lsls	r2, r3, #5
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	4413      	add	r3, r2
 8013360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801336a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801336e:	d11f      	bne.n	80133b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	015a      	lsls	r2, r3, #5
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	4413      	add	r3, r2
 8013378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	68ba      	ldr	r2, [r7, #8]
 8013380:	0151      	lsls	r1, r2, #5
 8013382:	68fa      	ldr	r2, [r7, #12]
 8013384:	440a      	add	r2, r1
 8013386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801338a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801338e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	015a      	lsls	r2, r3, #5
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	4413      	add	r3, r2
 8013398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	68ba      	ldr	r2, [r7, #8]
 80133a0:	0151      	lsls	r1, r2, #5
 80133a2:	68fa      	ldr	r2, [r7, #12]
 80133a4:	440a      	add	r2, r1
 80133a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80133ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	781b      	ldrb	r3, [r3, #0]
 80133bc:	f003 030f 	and.w	r3, r3, #15
 80133c0:	2101      	movs	r1, #1
 80133c2:	fa01 f303 	lsl.w	r3, r1, r3
 80133c6:	041b      	lsls	r3, r3, #16
 80133c8:	43db      	mvns	r3, r3
 80133ca:	68f9      	ldr	r1, [r7, #12]
 80133cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80133d0:	4013      	ands	r3, r2
 80133d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133da:	69da      	ldr	r2, [r3, #28]
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	f003 030f 	and.w	r3, r3, #15
 80133e4:	2101      	movs	r1, #1
 80133e6:	fa01 f303 	lsl.w	r3, r1, r3
 80133ea:	041b      	lsls	r3, r3, #16
 80133ec:	43db      	mvns	r3, r3
 80133ee:	68f9      	ldr	r1, [r7, #12]
 80133f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80133f4:	4013      	ands	r3, r2
 80133f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	015a      	lsls	r2, r3, #5
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	4413      	add	r3, r2
 8013400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013404:	681a      	ldr	r2, [r3, #0]
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	0159      	lsls	r1, r3, #5
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	440b      	add	r3, r1
 801340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013412:	4619      	mov	r1, r3
 8013414:	4b05      	ldr	r3, [pc, #20]	; (801342c <USB_DeactivateEndpoint+0x1b4>)
 8013416:	4013      	ands	r3, r2
 8013418:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801341a:	2300      	movs	r3, #0
}
 801341c:	4618      	mov	r0, r3
 801341e:	3714      	adds	r7, #20
 8013420:	46bd      	mov	sp, r7
 8013422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013426:	4770      	bx	lr
 8013428:	ec337800 	.word	0xec337800
 801342c:	eff37800 	.word	0xeff37800

08013430 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b08a      	sub	sp, #40	; 0x28
 8013434:	af02      	add	r7, sp, #8
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	60b9      	str	r1, [r7, #8]
 801343a:	4613      	mov	r3, r2
 801343c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	781b      	ldrb	r3, [r3, #0]
 8013446:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	785b      	ldrb	r3, [r3, #1]
 801344c:	2b01      	cmp	r3, #1
 801344e:	f040 8181 	bne.w	8013754 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	691b      	ldr	r3, [r3, #16]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d132      	bne.n	80134c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801345a:	69bb      	ldr	r3, [r7, #24]
 801345c:	015a      	lsls	r2, r3, #5
 801345e:	69fb      	ldr	r3, [r7, #28]
 8013460:	4413      	add	r3, r2
 8013462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013466:	691a      	ldr	r2, [r3, #16]
 8013468:	69bb      	ldr	r3, [r7, #24]
 801346a:	0159      	lsls	r1, r3, #5
 801346c:	69fb      	ldr	r3, [r7, #28]
 801346e:	440b      	add	r3, r1
 8013470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013474:	4619      	mov	r1, r3
 8013476:	4ba5      	ldr	r3, [pc, #660]	; (801370c <USB_EPStartXfer+0x2dc>)
 8013478:	4013      	ands	r3, r2
 801347a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801347c:	69bb      	ldr	r3, [r7, #24]
 801347e:	015a      	lsls	r2, r3, #5
 8013480:	69fb      	ldr	r3, [r7, #28]
 8013482:	4413      	add	r3, r2
 8013484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013488:	691b      	ldr	r3, [r3, #16]
 801348a:	69ba      	ldr	r2, [r7, #24]
 801348c:	0151      	lsls	r1, r2, #5
 801348e:	69fa      	ldr	r2, [r7, #28]
 8013490:	440a      	add	r2, r1
 8013492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013496:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801349a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801349c:	69bb      	ldr	r3, [r7, #24]
 801349e:	015a      	lsls	r2, r3, #5
 80134a0:	69fb      	ldr	r3, [r7, #28]
 80134a2:	4413      	add	r3, r2
 80134a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134a8:	691a      	ldr	r2, [r3, #16]
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	0159      	lsls	r1, r3, #5
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	440b      	add	r3, r1
 80134b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134b6:	4619      	mov	r1, r3
 80134b8:	4b95      	ldr	r3, [pc, #596]	; (8013710 <USB_EPStartXfer+0x2e0>)
 80134ba:	4013      	ands	r3, r2
 80134bc:	610b      	str	r3, [r1, #16]
 80134be:	e092      	b.n	80135e6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	015a      	lsls	r2, r3, #5
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	4413      	add	r3, r2
 80134c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134cc:	691a      	ldr	r2, [r3, #16]
 80134ce:	69bb      	ldr	r3, [r7, #24]
 80134d0:	0159      	lsls	r1, r3, #5
 80134d2:	69fb      	ldr	r3, [r7, #28]
 80134d4:	440b      	add	r3, r1
 80134d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134da:	4619      	mov	r1, r3
 80134dc:	4b8c      	ldr	r3, [pc, #560]	; (8013710 <USB_EPStartXfer+0x2e0>)
 80134de:	4013      	ands	r3, r2
 80134e0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80134e2:	69bb      	ldr	r3, [r7, #24]
 80134e4:	015a      	lsls	r2, r3, #5
 80134e6:	69fb      	ldr	r3, [r7, #28]
 80134e8:	4413      	add	r3, r2
 80134ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134ee:	691a      	ldr	r2, [r3, #16]
 80134f0:	69bb      	ldr	r3, [r7, #24]
 80134f2:	0159      	lsls	r1, r3, #5
 80134f4:	69fb      	ldr	r3, [r7, #28]
 80134f6:	440b      	add	r3, r1
 80134f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134fc:	4619      	mov	r1, r3
 80134fe:	4b83      	ldr	r3, [pc, #524]	; (801370c <USB_EPStartXfer+0x2dc>)
 8013500:	4013      	ands	r3, r2
 8013502:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013504:	69bb      	ldr	r3, [r7, #24]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d11a      	bne.n	8013540 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	691a      	ldr	r2, [r3, #16]
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	689b      	ldr	r3, [r3, #8]
 8013512:	429a      	cmp	r2, r3
 8013514:	d903      	bls.n	801351e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	689a      	ldr	r2, [r3, #8]
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	015a      	lsls	r2, r3, #5
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	4413      	add	r3, r2
 8013526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801352a:	691b      	ldr	r3, [r3, #16]
 801352c:	69ba      	ldr	r2, [r7, #24]
 801352e:	0151      	lsls	r1, r2, #5
 8013530:	69fa      	ldr	r2, [r7, #28]
 8013532:	440a      	add	r2, r1
 8013534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801353c:	6113      	str	r3, [r2, #16]
 801353e:	e01b      	b.n	8013578 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013540:	69bb      	ldr	r3, [r7, #24]
 8013542:	015a      	lsls	r2, r3, #5
 8013544:	69fb      	ldr	r3, [r7, #28]
 8013546:	4413      	add	r3, r2
 8013548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801354c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	6919      	ldr	r1, [r3, #16]
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	689b      	ldr	r3, [r3, #8]
 8013556:	440b      	add	r3, r1
 8013558:	1e59      	subs	r1, r3, #1
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	689b      	ldr	r3, [r3, #8]
 801355e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013562:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013564:	4b6b      	ldr	r3, [pc, #428]	; (8013714 <USB_EPStartXfer+0x2e4>)
 8013566:	400b      	ands	r3, r1
 8013568:	69b9      	ldr	r1, [r7, #24]
 801356a:	0148      	lsls	r0, r1, #5
 801356c:	69f9      	ldr	r1, [r7, #28]
 801356e:	4401      	add	r1, r0
 8013570:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013574:	4313      	orrs	r3, r2
 8013576:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013578:	69bb      	ldr	r3, [r7, #24]
 801357a:	015a      	lsls	r2, r3, #5
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	4413      	add	r3, r2
 8013580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013584:	691a      	ldr	r2, [r3, #16]
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	691b      	ldr	r3, [r3, #16]
 801358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801358e:	69b9      	ldr	r1, [r7, #24]
 8013590:	0148      	lsls	r0, r1, #5
 8013592:	69f9      	ldr	r1, [r7, #28]
 8013594:	4401      	add	r1, r0
 8013596:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801359a:	4313      	orrs	r3, r2
 801359c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	791b      	ldrb	r3, [r3, #4]
 80135a2:	2b01      	cmp	r3, #1
 80135a4:	d11f      	bne.n	80135e6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80135a6:	69bb      	ldr	r3, [r7, #24]
 80135a8:	015a      	lsls	r2, r3, #5
 80135aa:	69fb      	ldr	r3, [r7, #28]
 80135ac:	4413      	add	r3, r2
 80135ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135b2:	691b      	ldr	r3, [r3, #16]
 80135b4:	69ba      	ldr	r2, [r7, #24]
 80135b6:	0151      	lsls	r1, r2, #5
 80135b8:	69fa      	ldr	r2, [r7, #28]
 80135ba:	440a      	add	r2, r1
 80135bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80135c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	015a      	lsls	r2, r3, #5
 80135ca:	69fb      	ldr	r3, [r7, #28]
 80135cc:	4413      	add	r3, r2
 80135ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135d2:	691b      	ldr	r3, [r3, #16]
 80135d4:	69ba      	ldr	r2, [r7, #24]
 80135d6:	0151      	lsls	r1, r2, #5
 80135d8:	69fa      	ldr	r2, [r7, #28]
 80135da:	440a      	add	r2, r1
 80135dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80135e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80135e6:	79fb      	ldrb	r3, [r7, #7]
 80135e8:	2b01      	cmp	r3, #1
 80135ea:	d14b      	bne.n	8013684 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	69db      	ldr	r3, [r3, #28]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d009      	beq.n	8013608 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80135f4:	69bb      	ldr	r3, [r7, #24]
 80135f6:	015a      	lsls	r2, r3, #5
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	4413      	add	r3, r2
 80135fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013600:	461a      	mov	r2, r3
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	69db      	ldr	r3, [r3, #28]
 8013606:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	791b      	ldrb	r3, [r3, #4]
 801360c:	2b01      	cmp	r3, #1
 801360e:	d128      	bne.n	8013662 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013610:	69fb      	ldr	r3, [r7, #28]
 8013612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013616:	689b      	ldr	r3, [r3, #8]
 8013618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801361c:	2b00      	cmp	r3, #0
 801361e:	d110      	bne.n	8013642 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013620:	69bb      	ldr	r3, [r7, #24]
 8013622:	015a      	lsls	r2, r3, #5
 8013624:	69fb      	ldr	r3, [r7, #28]
 8013626:	4413      	add	r3, r2
 8013628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	69ba      	ldr	r2, [r7, #24]
 8013630:	0151      	lsls	r1, r2, #5
 8013632:	69fa      	ldr	r2, [r7, #28]
 8013634:	440a      	add	r2, r1
 8013636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801363a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801363e:	6013      	str	r3, [r2, #0]
 8013640:	e00f      	b.n	8013662 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013642:	69bb      	ldr	r3, [r7, #24]
 8013644:	015a      	lsls	r2, r3, #5
 8013646:	69fb      	ldr	r3, [r7, #28]
 8013648:	4413      	add	r3, r2
 801364a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	69ba      	ldr	r2, [r7, #24]
 8013652:	0151      	lsls	r1, r2, #5
 8013654:	69fa      	ldr	r2, [r7, #28]
 8013656:	440a      	add	r2, r1
 8013658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801365c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013660:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	015a      	lsls	r2, r3, #5
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	4413      	add	r3, r2
 801366a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	69ba      	ldr	r2, [r7, #24]
 8013672:	0151      	lsls	r1, r2, #5
 8013674:	69fa      	ldr	r2, [r7, #28]
 8013676:	440a      	add	r2, r1
 8013678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801367c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013680:	6013      	str	r3, [r2, #0]
 8013682:	e16a      	b.n	801395a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	015a      	lsls	r2, r3, #5
 8013688:	69fb      	ldr	r3, [r7, #28]
 801368a:	4413      	add	r3, r2
 801368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	69ba      	ldr	r2, [r7, #24]
 8013694:	0151      	lsls	r1, r2, #5
 8013696:	69fa      	ldr	r2, [r7, #28]
 8013698:	440a      	add	r2, r1
 801369a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801369e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	791b      	ldrb	r3, [r3, #4]
 80136a8:	2b01      	cmp	r3, #1
 80136aa:	d015      	beq.n	80136d8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	691b      	ldr	r3, [r3, #16]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	f000 8152 	beq.w	801395a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80136b6:	69fb      	ldr	r3, [r7, #28]
 80136b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	781b      	ldrb	r3, [r3, #0]
 80136c2:	f003 030f 	and.w	r3, r3, #15
 80136c6:	2101      	movs	r1, #1
 80136c8:	fa01 f303 	lsl.w	r3, r1, r3
 80136cc:	69f9      	ldr	r1, [r7, #28]
 80136ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136d2:	4313      	orrs	r3, r2
 80136d4:	634b      	str	r3, [r1, #52]	; 0x34
 80136d6:	e140      	b.n	801395a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80136d8:	69fb      	ldr	r3, [r7, #28]
 80136da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136de:	689b      	ldr	r3, [r3, #8]
 80136e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d117      	bne.n	8013718 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80136e8:	69bb      	ldr	r3, [r7, #24]
 80136ea:	015a      	lsls	r2, r3, #5
 80136ec:	69fb      	ldr	r3, [r7, #28]
 80136ee:	4413      	add	r3, r2
 80136f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	69ba      	ldr	r2, [r7, #24]
 80136f8:	0151      	lsls	r1, r2, #5
 80136fa:	69fa      	ldr	r2, [r7, #28]
 80136fc:	440a      	add	r2, r1
 80136fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013702:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013706:	6013      	str	r3, [r2, #0]
 8013708:	e016      	b.n	8013738 <USB_EPStartXfer+0x308>
 801370a:	bf00      	nop
 801370c:	e007ffff 	.word	0xe007ffff
 8013710:	fff80000 	.word	0xfff80000
 8013714:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	015a      	lsls	r2, r3, #5
 801371c:	69fb      	ldr	r3, [r7, #28]
 801371e:	4413      	add	r3, r2
 8013720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	69ba      	ldr	r2, [r7, #24]
 8013728:	0151      	lsls	r1, r2, #5
 801372a:	69fa      	ldr	r2, [r7, #28]
 801372c:	440a      	add	r2, r1
 801372e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013736:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	68d9      	ldr	r1, [r3, #12]
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	781a      	ldrb	r2, [r3, #0]
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	691b      	ldr	r3, [r3, #16]
 8013744:	b298      	uxth	r0, r3
 8013746:	79fb      	ldrb	r3, [r7, #7]
 8013748:	9300      	str	r3, [sp, #0]
 801374a:	4603      	mov	r3, r0
 801374c:	68f8      	ldr	r0, [r7, #12]
 801374e:	f000 f9b9 	bl	8013ac4 <USB_WritePacket>
 8013752:	e102      	b.n	801395a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013754:	69bb      	ldr	r3, [r7, #24]
 8013756:	015a      	lsls	r2, r3, #5
 8013758:	69fb      	ldr	r3, [r7, #28]
 801375a:	4413      	add	r3, r2
 801375c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013760:	691a      	ldr	r2, [r3, #16]
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	0159      	lsls	r1, r3, #5
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	440b      	add	r3, r1
 801376a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801376e:	4619      	mov	r1, r3
 8013770:	4b7c      	ldr	r3, [pc, #496]	; (8013964 <USB_EPStartXfer+0x534>)
 8013772:	4013      	ands	r3, r2
 8013774:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013776:	69bb      	ldr	r3, [r7, #24]
 8013778:	015a      	lsls	r2, r3, #5
 801377a:	69fb      	ldr	r3, [r7, #28]
 801377c:	4413      	add	r3, r2
 801377e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013782:	691a      	ldr	r2, [r3, #16]
 8013784:	69bb      	ldr	r3, [r7, #24]
 8013786:	0159      	lsls	r1, r3, #5
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	440b      	add	r3, r1
 801378c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013790:	4619      	mov	r1, r3
 8013792:	4b75      	ldr	r3, [pc, #468]	; (8013968 <USB_EPStartXfer+0x538>)
 8013794:	4013      	ands	r3, r2
 8013796:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013798:	69bb      	ldr	r3, [r7, #24]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d12f      	bne.n	80137fe <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	691b      	ldr	r3, [r3, #16]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d003      	beq.n	80137ae <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	689a      	ldr	r2, [r3, #8]
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	689a      	ldr	r2, [r3, #8]
 80137b2:	68bb      	ldr	r3, [r7, #8]
 80137b4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80137b6:	69bb      	ldr	r3, [r7, #24]
 80137b8:	015a      	lsls	r2, r3, #5
 80137ba:	69fb      	ldr	r3, [r7, #28]
 80137bc:	4413      	add	r3, r2
 80137be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137c2:	691a      	ldr	r2, [r3, #16]
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	6a1b      	ldr	r3, [r3, #32]
 80137c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80137cc:	69b9      	ldr	r1, [r7, #24]
 80137ce:	0148      	lsls	r0, r1, #5
 80137d0:	69f9      	ldr	r1, [r7, #28]
 80137d2:	4401      	add	r1, r0
 80137d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80137d8:	4313      	orrs	r3, r2
 80137da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80137dc:	69bb      	ldr	r3, [r7, #24]
 80137de:	015a      	lsls	r2, r3, #5
 80137e0:	69fb      	ldr	r3, [r7, #28]
 80137e2:	4413      	add	r3, r2
 80137e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137e8:	691b      	ldr	r3, [r3, #16]
 80137ea:	69ba      	ldr	r2, [r7, #24]
 80137ec:	0151      	lsls	r1, r2, #5
 80137ee:	69fa      	ldr	r2, [r7, #28]
 80137f0:	440a      	add	r2, r1
 80137f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80137fa:	6113      	str	r3, [r2, #16]
 80137fc:	e05f      	b.n	80138be <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	691b      	ldr	r3, [r3, #16]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d123      	bne.n	801384e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013806:	69bb      	ldr	r3, [r7, #24]
 8013808:	015a      	lsls	r2, r3, #5
 801380a:	69fb      	ldr	r3, [r7, #28]
 801380c:	4413      	add	r3, r2
 801380e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013812:	691a      	ldr	r2, [r3, #16]
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	689b      	ldr	r3, [r3, #8]
 8013818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801381c:	69b9      	ldr	r1, [r7, #24]
 801381e:	0148      	lsls	r0, r1, #5
 8013820:	69f9      	ldr	r1, [r7, #28]
 8013822:	4401      	add	r1, r0
 8013824:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013828:	4313      	orrs	r3, r2
 801382a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	015a      	lsls	r2, r3, #5
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	4413      	add	r3, r2
 8013834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013838:	691b      	ldr	r3, [r3, #16]
 801383a:	69ba      	ldr	r2, [r7, #24]
 801383c:	0151      	lsls	r1, r2, #5
 801383e:	69fa      	ldr	r2, [r7, #28]
 8013840:	440a      	add	r2, r1
 8013842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013846:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801384a:	6113      	str	r3, [r2, #16]
 801384c:	e037      	b.n	80138be <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	691a      	ldr	r2, [r3, #16]
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	689b      	ldr	r3, [r3, #8]
 8013856:	4413      	add	r3, r2
 8013858:	1e5a      	subs	r2, r3, #1
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	689b      	ldr	r3, [r3, #8]
 801385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013862:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013864:	68bb      	ldr	r3, [r7, #8]
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	8afa      	ldrh	r2, [r7, #22]
 801386a:	fb03 f202 	mul.w	r2, r3, r2
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	015a      	lsls	r2, r3, #5
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	4413      	add	r3, r2
 801387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801387e:	691a      	ldr	r2, [r3, #16]
 8013880:	8afb      	ldrh	r3, [r7, #22]
 8013882:	04d9      	lsls	r1, r3, #19
 8013884:	4b39      	ldr	r3, [pc, #228]	; (801396c <USB_EPStartXfer+0x53c>)
 8013886:	400b      	ands	r3, r1
 8013888:	69b9      	ldr	r1, [r7, #24]
 801388a:	0148      	lsls	r0, r1, #5
 801388c:	69f9      	ldr	r1, [r7, #28]
 801388e:	4401      	add	r1, r0
 8013890:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013894:	4313      	orrs	r3, r2
 8013896:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013898:	69bb      	ldr	r3, [r7, #24]
 801389a:	015a      	lsls	r2, r3, #5
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	4413      	add	r3, r2
 80138a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138a4:	691a      	ldr	r2, [r3, #16]
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	6a1b      	ldr	r3, [r3, #32]
 80138aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138ae:	69b9      	ldr	r1, [r7, #24]
 80138b0:	0148      	lsls	r0, r1, #5
 80138b2:	69f9      	ldr	r1, [r7, #28]
 80138b4:	4401      	add	r1, r0
 80138b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138ba:	4313      	orrs	r3, r2
 80138bc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80138be:	79fb      	ldrb	r3, [r7, #7]
 80138c0:	2b01      	cmp	r3, #1
 80138c2:	d10d      	bne.n	80138e0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	68db      	ldr	r3, [r3, #12]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d009      	beq.n	80138e0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	68d9      	ldr	r1, [r3, #12]
 80138d0:	69bb      	ldr	r3, [r7, #24]
 80138d2:	015a      	lsls	r2, r3, #5
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	4413      	add	r3, r2
 80138d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138dc:	460a      	mov	r2, r1
 80138de:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	791b      	ldrb	r3, [r3, #4]
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d128      	bne.n	801393a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138ee:	689b      	ldr	r3, [r3, #8]
 80138f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d110      	bne.n	801391a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80138f8:	69bb      	ldr	r3, [r7, #24]
 80138fa:	015a      	lsls	r2, r3, #5
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	4413      	add	r3, r2
 8013900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	69ba      	ldr	r2, [r7, #24]
 8013908:	0151      	lsls	r1, r2, #5
 801390a:	69fa      	ldr	r2, [r7, #28]
 801390c:	440a      	add	r2, r1
 801390e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013916:	6013      	str	r3, [r2, #0]
 8013918:	e00f      	b.n	801393a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801391a:	69bb      	ldr	r3, [r7, #24]
 801391c:	015a      	lsls	r2, r3, #5
 801391e:	69fb      	ldr	r3, [r7, #28]
 8013920:	4413      	add	r3, r2
 8013922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	69ba      	ldr	r2, [r7, #24]
 801392a:	0151      	lsls	r1, r2, #5
 801392c:	69fa      	ldr	r2, [r7, #28]
 801392e:	440a      	add	r2, r1
 8013930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013938:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801393a:	69bb      	ldr	r3, [r7, #24]
 801393c:	015a      	lsls	r2, r3, #5
 801393e:	69fb      	ldr	r3, [r7, #28]
 8013940:	4413      	add	r3, r2
 8013942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	69ba      	ldr	r2, [r7, #24]
 801394a:	0151      	lsls	r1, r2, #5
 801394c:	69fa      	ldr	r2, [r7, #28]
 801394e:	440a      	add	r2, r1
 8013950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013954:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013958:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801395a:	2300      	movs	r3, #0
}
 801395c:	4618      	mov	r0, r3
 801395e:	3720      	adds	r7, #32
 8013960:	46bd      	mov	sp, r7
 8013962:	bd80      	pop	{r7, pc}
 8013964:	fff80000 	.word	0xfff80000
 8013968:	e007ffff 	.word	0xe007ffff
 801396c:	1ff80000 	.word	0x1ff80000

08013970 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013970:	b480      	push	{r7}
 8013972:	b087      	sub	sp, #28
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801397a:	2300      	movs	r3, #0
 801397c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801397e:	2300      	movs	r3, #0
 8013980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	785b      	ldrb	r3, [r3, #1]
 801398a:	2b01      	cmp	r3, #1
 801398c:	d14a      	bne.n	8013a24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	015a      	lsls	r2, r3, #5
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	4413      	add	r3, r2
 8013998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139a6:	f040 8086 	bne.w	8013ab6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	015a      	lsls	r2, r3, #5
 80139b0:	693b      	ldr	r3, [r7, #16]
 80139b2:	4413      	add	r3, r2
 80139b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	683a      	ldr	r2, [r7, #0]
 80139bc:	7812      	ldrb	r2, [r2, #0]
 80139be:	0151      	lsls	r1, r2, #5
 80139c0:	693a      	ldr	r2, [r7, #16]
 80139c2:	440a      	add	r2, r1
 80139c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80139cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	781b      	ldrb	r3, [r3, #0]
 80139d2:	015a      	lsls	r2, r3, #5
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	4413      	add	r3, r2
 80139d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	683a      	ldr	r2, [r7, #0]
 80139e0:	7812      	ldrb	r2, [r2, #0]
 80139e2:	0151      	lsls	r1, r2, #5
 80139e4:	693a      	ldr	r2, [r7, #16]
 80139e6:	440a      	add	r2, r1
 80139e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	3301      	adds	r3, #1
 80139f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d902      	bls.n	8013a08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013a02:	2301      	movs	r3, #1
 8013a04:	75fb      	strb	r3, [r7, #23]
          break;
 8013a06:	e056      	b.n	8013ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	781b      	ldrb	r3, [r3, #0]
 8013a0c:	015a      	lsls	r2, r3, #5
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	4413      	add	r3, r2
 8013a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a20:	d0e7      	beq.n	80139f2 <USB_EPStopXfer+0x82>
 8013a22:	e048      	b.n	8013ab6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	015a      	lsls	r2, r3, #5
 8013a2a:	693b      	ldr	r3, [r7, #16]
 8013a2c:	4413      	add	r3, r2
 8013a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a3c:	d13b      	bne.n	8013ab6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	781b      	ldrb	r3, [r3, #0]
 8013a42:	015a      	lsls	r2, r3, #5
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	4413      	add	r3, r2
 8013a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	683a      	ldr	r2, [r7, #0]
 8013a50:	7812      	ldrb	r2, [r2, #0]
 8013a52:	0151      	lsls	r1, r2, #5
 8013a54:	693a      	ldr	r2, [r7, #16]
 8013a56:	440a      	add	r2, r1
 8013a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	015a      	lsls	r2, r3, #5
 8013a68:	693b      	ldr	r3, [r7, #16]
 8013a6a:	4413      	add	r3, r2
 8013a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	683a      	ldr	r2, [r7, #0]
 8013a74:	7812      	ldrb	r2, [r2, #0]
 8013a76:	0151      	lsls	r1, r2, #5
 8013a78:	693a      	ldr	r2, [r7, #16]
 8013a7a:	440a      	add	r2, r1
 8013a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	3301      	adds	r3, #1
 8013a8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a92:	4293      	cmp	r3, r2
 8013a94:	d902      	bls.n	8013a9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013a96:	2301      	movs	r3, #1
 8013a98:	75fb      	strb	r3, [r7, #23]
          break;
 8013a9a:	e00c      	b.n	8013ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	781b      	ldrb	r3, [r3, #0]
 8013aa0:	015a      	lsls	r2, r3, #5
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	4413      	add	r3, r2
 8013aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ab4:	d0e7      	beq.n	8013a86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	371c      	adds	r7, #28
 8013abc:	46bd      	mov	sp, r7
 8013abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac2:	4770      	bx	lr

08013ac4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b089      	sub	sp, #36	; 0x24
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	60f8      	str	r0, [r7, #12]
 8013acc:	60b9      	str	r1, [r7, #8]
 8013ace:	4611      	mov	r1, r2
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	460b      	mov	r3, r1
 8013ad4:	71fb      	strb	r3, [r7, #7]
 8013ad6:	4613      	mov	r3, r2
 8013ad8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d123      	bne.n	8013b32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013aea:	88bb      	ldrh	r3, [r7, #4]
 8013aec:	3303      	adds	r3, #3
 8013aee:	089b      	lsrs	r3, r3, #2
 8013af0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013af2:	2300      	movs	r3, #0
 8013af4:	61bb      	str	r3, [r7, #24]
 8013af6:	e018      	b.n	8013b2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013af8:	79fb      	ldrb	r3, [r7, #7]
 8013afa:	031a      	lsls	r2, r3, #12
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	4413      	add	r3, r2
 8013b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b04:	461a      	mov	r2, r3
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013b0c:	69fb      	ldr	r3, [r7, #28]
 8013b0e:	3301      	adds	r3, #1
 8013b10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b12:	69fb      	ldr	r3, [r7, #28]
 8013b14:	3301      	adds	r3, #1
 8013b16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	3301      	adds	r3, #1
 8013b22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013b24:	69bb      	ldr	r3, [r7, #24]
 8013b26:	3301      	adds	r3, #1
 8013b28:	61bb      	str	r3, [r7, #24]
 8013b2a:	69ba      	ldr	r2, [r7, #24]
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d3e2      	bcc.n	8013af8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013b32:	2300      	movs	r3, #0
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3724      	adds	r7, #36	; 0x24
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3e:	4770      	bx	lr

08013b40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013b40:	b480      	push	{r7}
 8013b42:	b08b      	sub	sp, #44	; 0x2c
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	60f8      	str	r0, [r7, #12]
 8013b48:	60b9      	str	r1, [r7, #8]
 8013b4a:	4613      	mov	r3, r2
 8013b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013b56:	88fb      	ldrh	r3, [r7, #6]
 8013b58:	089b      	lsrs	r3, r3, #2
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013b5e:	88fb      	ldrh	r3, [r7, #6]
 8013b60:	f003 0303 	and.w	r3, r3, #3
 8013b64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013b66:	2300      	movs	r3, #0
 8013b68:	623b      	str	r3, [r7, #32]
 8013b6a:	e014      	b.n	8013b96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013b6c:	69bb      	ldr	r3, [r7, #24]
 8013b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b72:	681a      	ldr	r2, [r3, #0]
 8013b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b76:	601a      	str	r2, [r3, #0]
    pDest++;
 8013b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b80:	3301      	adds	r3, #1
 8013b82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b86:	3301      	adds	r3, #1
 8013b88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8c:	3301      	adds	r3, #1
 8013b8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013b90:	6a3b      	ldr	r3, [r7, #32]
 8013b92:	3301      	adds	r3, #1
 8013b94:	623b      	str	r3, [r7, #32]
 8013b96:	6a3a      	ldr	r2, [r7, #32]
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	d3e6      	bcc.n	8013b6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013b9e:	8bfb      	ldrh	r3, [r7, #30]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d01e      	beq.n	8013be2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013ba8:	69bb      	ldr	r3, [r7, #24]
 8013baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bae:	461a      	mov	r2, r3
 8013bb0:	f107 0310 	add.w	r3, r7, #16
 8013bb4:	6812      	ldr	r2, [r2, #0]
 8013bb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013bb8:	693a      	ldr	r2, [r7, #16]
 8013bba:	6a3b      	ldr	r3, [r7, #32]
 8013bbc:	b2db      	uxtb	r3, r3
 8013bbe:	00db      	lsls	r3, r3, #3
 8013bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8013bc4:	b2da      	uxtb	r2, r3
 8013bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc8:	701a      	strb	r2, [r3, #0]
      i++;
 8013bca:	6a3b      	ldr	r3, [r7, #32]
 8013bcc:	3301      	adds	r3, #1
 8013bce:	623b      	str	r3, [r7, #32]
      pDest++;
 8013bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd2:	3301      	adds	r3, #1
 8013bd4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013bd6:	8bfb      	ldrh	r3, [r7, #30]
 8013bd8:	3b01      	subs	r3, #1
 8013bda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013bdc:	8bfb      	ldrh	r3, [r7, #30]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d1ea      	bne.n	8013bb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	372c      	adds	r7, #44	; 0x2c
 8013be8:	46bd      	mov	sp, r7
 8013bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bee:	4770      	bx	lr

08013bf0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b085      	sub	sp, #20
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
 8013bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	785b      	ldrb	r3, [r3, #1]
 8013c08:	2b01      	cmp	r3, #1
 8013c0a:	d12c      	bne.n	8013c66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	015a      	lsls	r2, r3, #5
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	4413      	add	r3, r2
 8013c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	db12      	blt.n	8013c44 <USB_EPSetStall+0x54>
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d00f      	beq.n	8013c44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	015a      	lsls	r2, r3, #5
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	4413      	add	r3, r2
 8013c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	68ba      	ldr	r2, [r7, #8]
 8013c34:	0151      	lsls	r1, r2, #5
 8013c36:	68fa      	ldr	r2, [r7, #12]
 8013c38:	440a      	add	r2, r1
 8013c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	015a      	lsls	r2, r3, #5
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	4413      	add	r3, r2
 8013c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	68ba      	ldr	r2, [r7, #8]
 8013c54:	0151      	lsls	r1, r2, #5
 8013c56:	68fa      	ldr	r2, [r7, #12]
 8013c58:	440a      	add	r2, r1
 8013c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013c62:	6013      	str	r3, [r2, #0]
 8013c64:	e02b      	b.n	8013cbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	015a      	lsls	r2, r3, #5
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	4413      	add	r3, r2
 8013c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	db12      	blt.n	8013c9e <USB_EPSetStall+0xae>
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d00f      	beq.n	8013c9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	015a      	lsls	r2, r3, #5
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	4413      	add	r3, r2
 8013c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	68ba      	ldr	r2, [r7, #8]
 8013c8e:	0151      	lsls	r1, r2, #5
 8013c90:	68fa      	ldr	r2, [r7, #12]
 8013c92:	440a      	add	r2, r1
 8013c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	015a      	lsls	r2, r3, #5
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	4413      	add	r3, r2
 8013ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	68ba      	ldr	r2, [r7, #8]
 8013cae:	0151      	lsls	r1, r2, #5
 8013cb0:	68fa      	ldr	r2, [r7, #12]
 8013cb2:	440a      	add	r2, r1
 8013cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013cbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013cbe:	2300      	movs	r3, #0
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3714      	adds	r7, #20
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr

08013ccc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013ccc:	b480      	push	{r7}
 8013cce:	b085      	sub	sp, #20
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	785b      	ldrb	r3, [r3, #1]
 8013ce4:	2b01      	cmp	r3, #1
 8013ce6:	d128      	bne.n	8013d3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	015a      	lsls	r2, r3, #5
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	4413      	add	r3, r2
 8013cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	68ba      	ldr	r2, [r7, #8]
 8013cf8:	0151      	lsls	r1, r2, #5
 8013cfa:	68fa      	ldr	r2, [r7, #12]
 8013cfc:	440a      	add	r2, r1
 8013cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	791b      	ldrb	r3, [r3, #4]
 8013d0c:	2b03      	cmp	r3, #3
 8013d0e:	d003      	beq.n	8013d18 <USB_EPClearStall+0x4c>
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	791b      	ldrb	r3, [r3, #4]
 8013d14:	2b02      	cmp	r3, #2
 8013d16:	d138      	bne.n	8013d8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	015a      	lsls	r2, r3, #5
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	4413      	add	r3, r2
 8013d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	68ba      	ldr	r2, [r7, #8]
 8013d28:	0151      	lsls	r1, r2, #5
 8013d2a:	68fa      	ldr	r2, [r7, #12]
 8013d2c:	440a      	add	r2, r1
 8013d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d36:	6013      	str	r3, [r2, #0]
 8013d38:	e027      	b.n	8013d8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	015a      	lsls	r2, r3, #5
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	4413      	add	r3, r2
 8013d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	68ba      	ldr	r2, [r7, #8]
 8013d4a:	0151      	lsls	r1, r2, #5
 8013d4c:	68fa      	ldr	r2, [r7, #12]
 8013d4e:	440a      	add	r2, r1
 8013d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	791b      	ldrb	r3, [r3, #4]
 8013d5e:	2b03      	cmp	r3, #3
 8013d60:	d003      	beq.n	8013d6a <USB_EPClearStall+0x9e>
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	791b      	ldrb	r3, [r3, #4]
 8013d66:	2b02      	cmp	r3, #2
 8013d68:	d10f      	bne.n	8013d8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d6a:	68bb      	ldr	r3, [r7, #8]
 8013d6c:	015a      	lsls	r2, r3, #5
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	4413      	add	r3, r2
 8013d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	68ba      	ldr	r2, [r7, #8]
 8013d7a:	0151      	lsls	r1, r2, #5
 8013d7c:	68fa      	ldr	r2, [r7, #12]
 8013d7e:	440a      	add	r2, r1
 8013d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013d8a:	2300      	movs	r3, #0
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3714      	adds	r7, #20
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr

08013d98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013d98:	b480      	push	{r7}
 8013d9a:	b085      	sub	sp, #20
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	460b      	mov	r3, r1
 8013da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	68fa      	ldr	r2, [r7, #12]
 8013db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013db6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013dba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dc2:	681a      	ldr	r2, [r3, #0]
 8013dc4:	78fb      	ldrb	r3, [r7, #3]
 8013dc6:	011b      	lsls	r3, r3, #4
 8013dc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013dcc:	68f9      	ldr	r1, [r7, #12]
 8013dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013dd2:	4313      	orrs	r3, r2
 8013dd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013dd6:	2300      	movs	r3, #0
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	3714      	adds	r7, #20
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de2:	4770      	bx	lr

08013de4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013de4:	b480      	push	{r7}
 8013de6:	b085      	sub	sp, #20
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	68fa      	ldr	r2, [r7, #12]
 8013dfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013dfe:	f023 0303 	bic.w	r3, r3, #3
 8013e02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e0a:	685b      	ldr	r3, [r3, #4]
 8013e0c:	68fa      	ldr	r2, [r7, #12]
 8013e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e12:	f023 0302 	bic.w	r3, r3, #2
 8013e16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e18:	2300      	movs	r3, #0
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	3714      	adds	r7, #20
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e24:	4770      	bx	lr

08013e26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e26:	b480      	push	{r7}
 8013e28:	b085      	sub	sp, #20
 8013e2a:	af00      	add	r7, sp, #0
 8013e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	68fa      	ldr	r2, [r7, #12]
 8013e3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e40:	f023 0303 	bic.w	r3, r3, #3
 8013e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e4c:	685b      	ldr	r3, [r3, #4]
 8013e4e:	68fa      	ldr	r2, [r7, #12]
 8013e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e54:	f043 0302 	orr.w	r3, r3, #2
 8013e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e5a:	2300      	movs	r3, #0
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3714      	adds	r7, #20
 8013e60:	46bd      	mov	sp, r7
 8013e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e66:	4770      	bx	lr

08013e68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013e68:	b480      	push	{r7}
 8013e6a:	b085      	sub	sp, #20
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	695b      	ldr	r3, [r3, #20]
 8013e74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	699b      	ldr	r3, [r3, #24]
 8013e7a:	68fa      	ldr	r2, [r7, #12]
 8013e7c:	4013      	ands	r3, r2
 8013e7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013e80:	68fb      	ldr	r3, [r7, #12]
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3714      	adds	r7, #20
 8013e86:	46bd      	mov	sp, r7
 8013e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8c:	4770      	bx	lr

08013e8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013e8e:	b480      	push	{r7}
 8013e90:	b085      	sub	sp, #20
 8013e92:	af00      	add	r7, sp, #0
 8013e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ea0:	699b      	ldr	r3, [r3, #24]
 8013ea2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013eaa:	69db      	ldr	r3, [r3, #28]
 8013eac:	68ba      	ldr	r2, [r7, #8]
 8013eae:	4013      	ands	r3, r2
 8013eb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	0c1b      	lsrs	r3, r3, #16
}
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3714      	adds	r7, #20
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec0:	4770      	bx	lr

08013ec2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013ec2:	b480      	push	{r7}
 8013ec4:	b085      	sub	sp, #20
 8013ec6:	af00      	add	r7, sp, #0
 8013ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ed4:	699b      	ldr	r3, [r3, #24]
 8013ed6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ede:	69db      	ldr	r3, [r3, #28]
 8013ee0:	68ba      	ldr	r2, [r7, #8]
 8013ee2:	4013      	ands	r3, r2
 8013ee4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	b29b      	uxth	r3, r3
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3714      	adds	r7, #20
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef4:	4770      	bx	lr

08013ef6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013ef6:	b480      	push	{r7}
 8013ef8:	b085      	sub	sp, #20
 8013efa:	af00      	add	r7, sp, #0
 8013efc:	6078      	str	r0, [r7, #4]
 8013efe:	460b      	mov	r3, r1
 8013f00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013f06:	78fb      	ldrb	r3, [r7, #3]
 8013f08:	015a      	lsls	r2, r3, #5
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	4413      	add	r3, r2
 8013f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f12:	689b      	ldr	r3, [r3, #8]
 8013f14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f1c:	695b      	ldr	r3, [r3, #20]
 8013f1e:	68ba      	ldr	r2, [r7, #8]
 8013f20:	4013      	ands	r3, r2
 8013f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f24:	68bb      	ldr	r3, [r7, #8]
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3714      	adds	r7, #20
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr

08013f32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f32:	b480      	push	{r7}
 8013f34:	b087      	sub	sp, #28
 8013f36:	af00      	add	r7, sp, #0
 8013f38:	6078      	str	r0, [r7, #4]
 8013f3a:	460b      	mov	r3, r1
 8013f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f48:	691b      	ldr	r3, [r3, #16]
 8013f4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013f56:	78fb      	ldrb	r3, [r7, #3]
 8013f58:	f003 030f 	and.w	r3, r3, #15
 8013f5c:	68fa      	ldr	r2, [r7, #12]
 8013f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8013f62:	01db      	lsls	r3, r3, #7
 8013f64:	b2db      	uxtb	r3, r3
 8013f66:	693a      	ldr	r2, [r7, #16]
 8013f68:	4313      	orrs	r3, r2
 8013f6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013f6c:	78fb      	ldrb	r3, [r7, #3]
 8013f6e:	015a      	lsls	r2, r3, #5
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	4413      	add	r3, r2
 8013f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f78:	689b      	ldr	r3, [r3, #8]
 8013f7a:	693a      	ldr	r2, [r7, #16]
 8013f7c:	4013      	ands	r3, r2
 8013f7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f80:	68bb      	ldr	r3, [r7, #8]
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	371c      	adds	r7, #28
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr

08013f8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013f8e:	b480      	push	{r7}
 8013f90:	b083      	sub	sp, #12
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	695b      	ldr	r3, [r3, #20]
 8013f9a:	f003 0301 	and.w	r3, r3, #1
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	370c      	adds	r7, #12
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa8:	4770      	bx	lr
	...

08013fac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013fac:	b480      	push	{r7}
 8013fae:	b085      	sub	sp, #20
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fbe:	681a      	ldr	r2, [r3, #0]
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	4b09      	ldr	r3, [pc, #36]	; (8013ff0 <USB_ActivateSetup+0x44>)
 8013fca:	4013      	ands	r3, r2
 8013fcc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fd4:	685b      	ldr	r3, [r3, #4]
 8013fd6:	68fa      	ldr	r2, [r7, #12]
 8013fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013fe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013fe2:	2300      	movs	r3, #0
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3714      	adds	r7, #20
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fee:	4770      	bx	lr
 8013ff0:	fffff800 	.word	0xfffff800

08013ff4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b087      	sub	sp, #28
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	60f8      	str	r0, [r7, #12]
 8013ffc:	460b      	mov	r3, r1
 8013ffe:	607a      	str	r2, [r7, #4]
 8014000:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	333c      	adds	r3, #60	; 0x3c
 801400a:	3304      	adds	r3, #4
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014010:	693b      	ldr	r3, [r7, #16]
 8014012:	4a26      	ldr	r2, [pc, #152]	; (80140ac <USB_EP0_OutStart+0xb8>)
 8014014:	4293      	cmp	r3, r2
 8014016:	d90a      	bls.n	801402e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014028:	d101      	bne.n	801402e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801402a:	2300      	movs	r3, #0
 801402c:	e037      	b.n	801409e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014034:	461a      	mov	r2, r3
 8014036:	2300      	movs	r3, #0
 8014038:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014040:	691b      	ldr	r3, [r3, #16]
 8014042:	697a      	ldr	r2, [r7, #20]
 8014044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014048:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801404c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014054:	691b      	ldr	r3, [r3, #16]
 8014056:	697a      	ldr	r2, [r7, #20]
 8014058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801405c:	f043 0318 	orr.w	r3, r3, #24
 8014060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014068:	691b      	ldr	r3, [r3, #16]
 801406a:	697a      	ldr	r2, [r7, #20]
 801406c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014070:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014074:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014076:	7afb      	ldrb	r3, [r7, #11]
 8014078:	2b01      	cmp	r3, #1
 801407a:	d10f      	bne.n	801409c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014082:	461a      	mov	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	697a      	ldr	r2, [r7, #20]
 8014092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014096:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801409a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801409c:	2300      	movs	r3, #0
}
 801409e:	4618      	mov	r0, r3
 80140a0:	371c      	adds	r7, #28
 80140a2:	46bd      	mov	sp, r7
 80140a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a8:	4770      	bx	lr
 80140aa:	bf00      	nop
 80140ac:	4f54300a 	.word	0x4f54300a

080140b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80140b0:	b480      	push	{r7}
 80140b2:	b085      	sub	sp, #20
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80140b8:	2300      	movs	r3, #0
 80140ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	3301      	adds	r3, #1
 80140c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	4a13      	ldr	r2, [pc, #76]	; (8014114 <USB_CoreReset+0x64>)
 80140c6:	4293      	cmp	r3, r2
 80140c8:	d901      	bls.n	80140ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80140ca:	2303      	movs	r3, #3
 80140cc:	e01b      	b.n	8014106 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	691b      	ldr	r3, [r3, #16]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	daf2      	bge.n	80140bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80140d6:	2300      	movs	r3, #0
 80140d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	691b      	ldr	r3, [r3, #16]
 80140de:	f043 0201 	orr.w	r2, r3, #1
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	3301      	adds	r3, #1
 80140ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	4a09      	ldr	r2, [pc, #36]	; (8014114 <USB_CoreReset+0x64>)
 80140f0:	4293      	cmp	r3, r2
 80140f2:	d901      	bls.n	80140f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80140f4:	2303      	movs	r3, #3
 80140f6:	e006      	b.n	8014106 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	691b      	ldr	r3, [r3, #16]
 80140fc:	f003 0301 	and.w	r3, r3, #1
 8014100:	2b01      	cmp	r3, #1
 8014102:	d0f0      	beq.n	80140e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8014104:	2300      	movs	r3, #0
}
 8014106:	4618      	mov	r0, r3
 8014108:	3714      	adds	r7, #20
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	00030d40 	.word	0x00030d40

08014118 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801411c:	4904      	ldr	r1, [pc, #16]	; (8014130 <MX_FATFS_Init+0x18>)
 801411e:	4805      	ldr	r0, [pc, #20]	; (8014134 <MX_FATFS_Init+0x1c>)
 8014120:	f002 fa56 	bl	80165d0 <FATFS_LinkDriver>
 8014124:	4603      	mov	r3, r0
 8014126:	461a      	mov	r2, r3
 8014128:	4b03      	ldr	r3, [pc, #12]	; (8014138 <MX_FATFS_Init+0x20>)
 801412a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801412c:	bf00      	nop
 801412e:	bd80      	pop	{r7, pc}
 8014130:	24000d74 	.word	0x24000d74
 8014134:	0801c7e0 	.word	0x0801c7e0
 8014138:	24000d70 	.word	0x24000d70

0801413c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014142:	2300      	movs	r3, #0
 8014144:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014146:	f000 f885 	bl	8014254 <BSP_SD_IsDetected>
 801414a:	4603      	mov	r3, r0
 801414c:	2b01      	cmp	r3, #1
 801414e:	d001      	beq.n	8014154 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014150:	2302      	movs	r3, #2
 8014152:	e012      	b.n	801417a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8014154:	480b      	ldr	r0, [pc, #44]	; (8014184 <BSP_SD_Init+0x48>)
 8014156:	f7f9 f9dd 	bl	800d514 <HAL_SD_Init>
 801415a:	4603      	mov	r3, r0
 801415c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801415e:	79fb      	ldrb	r3, [r7, #7]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d109      	bne.n	8014178 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014168:	4806      	ldr	r0, [pc, #24]	; (8014184 <BSP_SD_Init+0x48>)
 801416a:	f7fa f893 	bl	800e294 <HAL_SD_ConfigWideBusOperation>
 801416e:	4603      	mov	r3, r0
 8014170:	2b00      	cmp	r3, #0
 8014172:	d001      	beq.n	8014178 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014174:	2301      	movs	r3, #1
 8014176:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014178:	79fb      	ldrb	r3, [r7, #7]
}
 801417a:	4618      	mov	r0, r3
 801417c:	3708      	adds	r7, #8
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}
 8014182:	bf00      	nop
 8014184:	240005a8 	.word	0x240005a8

08014188 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b086      	sub	sp, #24
 801418c:	af00      	add	r7, sp, #0
 801418e:	60f8      	str	r0, [r7, #12]
 8014190:	60b9      	str	r1, [r7, #8]
 8014192:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014194:	2300      	movs	r3, #0
 8014196:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	68ba      	ldr	r2, [r7, #8]
 801419c:	68f9      	ldr	r1, [r7, #12]
 801419e:	4806      	ldr	r0, [pc, #24]	; (80141b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80141a0:	f7f9 fad8 	bl	800d754 <HAL_SD_ReadBlocks_DMA>
 80141a4:	4603      	mov	r3, r0
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d001      	beq.n	80141ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80141aa:	2301      	movs	r3, #1
 80141ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80141ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3718      	adds	r7, #24
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	240005a8 	.word	0x240005a8

080141bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b086      	sub	sp, #24
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	60f8      	str	r0, [r7, #12]
 80141c4:	60b9      	str	r1, [r7, #8]
 80141c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80141c8:	2300      	movs	r3, #0
 80141ca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	68ba      	ldr	r2, [r7, #8]
 80141d0:	68f9      	ldr	r1, [r7, #12]
 80141d2:	4806      	ldr	r0, [pc, #24]	; (80141ec <BSP_SD_WriteBlocks_DMA+0x30>)
 80141d4:	f7f9 fb66 	bl	800d8a4 <HAL_SD_WriteBlocks_DMA>
 80141d8:	4603      	mov	r3, r0
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d001      	beq.n	80141e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80141de:	2301      	movs	r3, #1
 80141e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80141e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3718      	adds	r7, #24
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	240005a8 	.word	0x240005a8

080141f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80141f4:	4805      	ldr	r0, [pc, #20]	; (801420c <BSP_SD_GetCardState+0x1c>)
 80141f6:	f7fa f95f 	bl	800e4b8 <HAL_SD_GetCardState>
 80141fa:	4603      	mov	r3, r0
 80141fc:	2b04      	cmp	r3, #4
 80141fe:	bf14      	ite	ne
 8014200:	2301      	movne	r3, #1
 8014202:	2300      	moveq	r3, #0
 8014204:	b2db      	uxtb	r3, r3
}
 8014206:	4618      	mov	r0, r3
 8014208:	bd80      	pop	{r7, pc}
 801420a:	bf00      	nop
 801420c:	240005a8 	.word	0x240005a8

08014210 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b082      	sub	sp, #8
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014218:	6879      	ldr	r1, [r7, #4]
 801421a:	4803      	ldr	r0, [pc, #12]	; (8014228 <BSP_SD_GetCardInfo+0x18>)
 801421c:	f7fa f80e 	bl	800e23c <HAL_SD_GetCardInfo>
}
 8014220:	bf00      	nop
 8014222:	3708      	adds	r7, #8
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}
 8014228:	240005a8 	.word	0x240005a8

0801422c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014234:	f000 f9a0 	bl	8014578 <BSP_SD_WriteCpltCallback>
}
 8014238:	bf00      	nop
 801423a:	3708      	adds	r7, #8
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}

08014240 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b082      	sub	sp, #8
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014248:	f000 f9a2 	bl	8014590 <BSP_SD_ReadCpltCallback>
}
 801424c:	bf00      	nop
 801424e:	3708      	adds	r7, #8
 8014250:	46bd      	mov	sp, r7
 8014252:	bd80      	pop	{r7, pc}

08014254 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b082      	sub	sp, #8
 8014258:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801425a:	2301      	movs	r3, #1
 801425c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801425e:	f000 f80b 	bl	8014278 <BSP_PlatformIsDetected>
 8014262:	4603      	mov	r3, r0
 8014264:	2b00      	cmp	r3, #0
 8014266:	d101      	bne.n	801426c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014268:	2300      	movs	r3, #0
 801426a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801426c:	79fb      	ldrb	r3, [r7, #7]
 801426e:	b2db      	uxtb	r3, r3
}
 8014270:	4618      	mov	r0, r3
 8014272:	3708      	adds	r7, #8
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}

08014278 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014278:	b580      	push	{r7, lr}
 801427a:	b082      	sub	sp, #8
 801427c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801427e:	2301      	movs	r3, #1
 8014280:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014282:	2104      	movs	r1, #4
 8014284:	4806      	ldr	r0, [pc, #24]	; (80142a0 <BSP_PlatformIsDetected+0x28>)
 8014286:	f7f4 f919 	bl	80084bc <HAL_GPIO_ReadPin>
 801428a:	4603      	mov	r3, r0
 801428c:	2b00      	cmp	r3, #0
 801428e:	d001      	beq.n	8014294 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014290:	2300      	movs	r3, #0
 8014292:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014294:	79fb      	ldrb	r3, [r7, #7]
}
 8014296:	4618      	mov	r0, r3
 8014298:	3708      	adds	r7, #8
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}
 801429e:	bf00      	nop
 80142a0:	58020400 	.word	0x58020400

080142a4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80142ac:	f7f0 fa76 	bl	800479c <HAL_GetTick>
 80142b0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80142b2:	e006      	b.n	80142c2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80142b4:	f7ff ff9c 	bl	80141f0 <BSP_SD_GetCardState>
 80142b8:	4603      	mov	r3, r0
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d101      	bne.n	80142c2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80142be:	2300      	movs	r3, #0
 80142c0:	e009      	b.n	80142d6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80142c2:	f7f0 fa6b 	bl	800479c <HAL_GetTick>
 80142c6:	4602      	mov	r2, r0
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	1ad3      	subs	r3, r2, r3
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d8f0      	bhi.n	80142b4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80142d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80142d6:	4618      	mov	r0, r3
 80142d8:	3710      	adds	r7, #16
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
	...

080142e0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	4603      	mov	r3, r0
 80142e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80142ea:	4b0b      	ldr	r3, [pc, #44]	; (8014318 <SD_CheckStatus+0x38>)
 80142ec:	2201      	movs	r2, #1
 80142ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80142f0:	f7ff ff7e 	bl	80141f0 <BSP_SD_GetCardState>
 80142f4:	4603      	mov	r3, r0
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d107      	bne.n	801430a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80142fa:	4b07      	ldr	r3, [pc, #28]	; (8014318 <SD_CheckStatus+0x38>)
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	b2db      	uxtb	r3, r3
 8014300:	f023 0301 	bic.w	r3, r3, #1
 8014304:	b2da      	uxtb	r2, r3
 8014306:	4b04      	ldr	r3, [pc, #16]	; (8014318 <SD_CheckStatus+0x38>)
 8014308:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801430a:	4b03      	ldr	r3, [pc, #12]	; (8014318 <SD_CheckStatus+0x38>)
 801430c:	781b      	ldrb	r3, [r3, #0]
 801430e:	b2db      	uxtb	r3, r3
}
 8014310:	4618      	mov	r0, r3
 8014312:	3708      	adds	r7, #8
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}
 8014318:	2400000d 	.word	0x2400000d

0801431c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
 8014322:	4603      	mov	r3, r0
 8014324:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014326:	f7ff ff09 	bl	801413c <BSP_SD_Init>
 801432a:	4603      	mov	r3, r0
 801432c:	2b00      	cmp	r3, #0
 801432e:	d107      	bne.n	8014340 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014330:	79fb      	ldrb	r3, [r7, #7]
 8014332:	4618      	mov	r0, r3
 8014334:	f7ff ffd4 	bl	80142e0 <SD_CheckStatus>
 8014338:	4603      	mov	r3, r0
 801433a:	461a      	mov	r2, r3
 801433c:	4b04      	ldr	r3, [pc, #16]	; (8014350 <SD_initialize+0x34>)
 801433e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014340:	4b03      	ldr	r3, [pc, #12]	; (8014350 <SD_initialize+0x34>)
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	b2db      	uxtb	r3, r3
}
 8014346:	4618      	mov	r0, r3
 8014348:	3708      	adds	r7, #8
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	2400000d 	.word	0x2400000d

08014354 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b082      	sub	sp, #8
 8014358:	af00      	add	r7, sp, #0
 801435a:	4603      	mov	r3, r0
 801435c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801435e:	79fb      	ldrb	r3, [r7, #7]
 8014360:	4618      	mov	r0, r3
 8014362:	f7ff ffbd 	bl	80142e0 <SD_CheckStatus>
 8014366:	4603      	mov	r3, r0
}
 8014368:	4618      	mov	r0, r3
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b086      	sub	sp, #24
 8014374:	af00      	add	r7, sp, #0
 8014376:	60b9      	str	r1, [r7, #8]
 8014378:	607a      	str	r2, [r7, #4]
 801437a:	603b      	str	r3, [r7, #0]
 801437c:	4603      	mov	r3, r0
 801437e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014380:	2301      	movs	r3, #1
 8014382:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014384:	f247 5030 	movw	r0, #30000	; 0x7530
 8014388:	f7ff ff8c 	bl	80142a4 <SD_CheckStatusWithTimeout>
 801438c:	4603      	mov	r3, r0
 801438e:	2b00      	cmp	r3, #0
 8014390:	da01      	bge.n	8014396 <SD_read+0x26>
  {
    return res;
 8014392:	7dfb      	ldrb	r3, [r7, #23]
 8014394:	e03b      	b.n	801440e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014396:	683a      	ldr	r2, [r7, #0]
 8014398:	6879      	ldr	r1, [r7, #4]
 801439a:	68b8      	ldr	r0, [r7, #8]
 801439c:	f7ff fef4 	bl	8014188 <BSP_SD_ReadBlocks_DMA>
 80143a0:	4603      	mov	r3, r0
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d132      	bne.n	801440c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80143a6:	4b1c      	ldr	r3, [pc, #112]	; (8014418 <SD_read+0xa8>)
 80143a8:	2200      	movs	r2, #0
 80143aa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80143ac:	f7f0 f9f6 	bl	800479c <HAL_GetTick>
 80143b0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80143b2:	bf00      	nop
 80143b4:	4b18      	ldr	r3, [pc, #96]	; (8014418 <SD_read+0xa8>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d108      	bne.n	80143ce <SD_read+0x5e>
 80143bc:	f7f0 f9ee 	bl	800479c <HAL_GetTick>
 80143c0:	4602      	mov	r2, r0
 80143c2:	693b      	ldr	r3, [r7, #16]
 80143c4:	1ad3      	subs	r3, r2, r3
 80143c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80143ca:	4293      	cmp	r3, r2
 80143cc:	d9f2      	bls.n	80143b4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80143ce:	4b12      	ldr	r3, [pc, #72]	; (8014418 <SD_read+0xa8>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d102      	bne.n	80143dc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80143d6:	2301      	movs	r3, #1
 80143d8:	75fb      	strb	r3, [r7, #23]
 80143da:	e017      	b.n	801440c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80143dc:	4b0e      	ldr	r3, [pc, #56]	; (8014418 <SD_read+0xa8>)
 80143de:	2200      	movs	r2, #0
 80143e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80143e2:	f7f0 f9db 	bl	800479c <HAL_GetTick>
 80143e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80143e8:	e007      	b.n	80143fa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80143ea:	f7ff ff01 	bl	80141f0 <BSP_SD_GetCardState>
 80143ee:	4603      	mov	r3, r0
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d102      	bne.n	80143fa <SD_read+0x8a>
          {
            res = RES_OK;
 80143f4:	2300      	movs	r3, #0
 80143f6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80143f8:	e008      	b.n	801440c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80143fa:	f7f0 f9cf 	bl	800479c <HAL_GetTick>
 80143fe:	4602      	mov	r2, r0
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	1ad3      	subs	r3, r2, r3
 8014404:	f247 522f 	movw	r2, #29999	; 0x752f
 8014408:	4293      	cmp	r3, r2
 801440a:	d9ee      	bls.n	80143ea <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801440c:	7dfb      	ldrb	r3, [r7, #23]
}
 801440e:	4618      	mov	r0, r3
 8014410:	3718      	adds	r7, #24
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	24000d7c 	.word	0x24000d7c

0801441c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b086      	sub	sp, #24
 8014420:	af00      	add	r7, sp, #0
 8014422:	60b9      	str	r1, [r7, #8]
 8014424:	607a      	str	r2, [r7, #4]
 8014426:	603b      	str	r3, [r7, #0]
 8014428:	4603      	mov	r3, r0
 801442a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801442c:	2301      	movs	r3, #1
 801442e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014430:	4b24      	ldr	r3, [pc, #144]	; (80144c4 <SD_write+0xa8>)
 8014432:	2200      	movs	r2, #0
 8014434:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014436:	f247 5030 	movw	r0, #30000	; 0x7530
 801443a:	f7ff ff33 	bl	80142a4 <SD_CheckStatusWithTimeout>
 801443e:	4603      	mov	r3, r0
 8014440:	2b00      	cmp	r3, #0
 8014442:	da01      	bge.n	8014448 <SD_write+0x2c>
  {
    return res;
 8014444:	7dfb      	ldrb	r3, [r7, #23]
 8014446:	e038      	b.n	80144ba <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014448:	683a      	ldr	r2, [r7, #0]
 801444a:	6879      	ldr	r1, [r7, #4]
 801444c:	68b8      	ldr	r0, [r7, #8]
 801444e:	f7ff feb5 	bl	80141bc <BSP_SD_WriteBlocks_DMA>
 8014452:	4603      	mov	r3, r0
 8014454:	2b00      	cmp	r3, #0
 8014456:	d12f      	bne.n	80144b8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014458:	f7f0 f9a0 	bl	800479c <HAL_GetTick>
 801445c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801445e:	bf00      	nop
 8014460:	4b18      	ldr	r3, [pc, #96]	; (80144c4 <SD_write+0xa8>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d108      	bne.n	801447a <SD_write+0x5e>
 8014468:	f7f0 f998 	bl	800479c <HAL_GetTick>
 801446c:	4602      	mov	r2, r0
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	1ad3      	subs	r3, r2, r3
 8014472:	f247 522f 	movw	r2, #29999	; 0x752f
 8014476:	4293      	cmp	r3, r2
 8014478:	d9f2      	bls.n	8014460 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801447a:	4b12      	ldr	r3, [pc, #72]	; (80144c4 <SD_write+0xa8>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d102      	bne.n	8014488 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014482:	2301      	movs	r3, #1
 8014484:	75fb      	strb	r3, [r7, #23]
 8014486:	e017      	b.n	80144b8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014488:	4b0e      	ldr	r3, [pc, #56]	; (80144c4 <SD_write+0xa8>)
 801448a:	2200      	movs	r2, #0
 801448c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801448e:	f7f0 f985 	bl	800479c <HAL_GetTick>
 8014492:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014494:	e007      	b.n	80144a6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014496:	f7ff feab 	bl	80141f0 <BSP_SD_GetCardState>
 801449a:	4603      	mov	r3, r0
 801449c:	2b00      	cmp	r3, #0
 801449e:	d102      	bne.n	80144a6 <SD_write+0x8a>
          {
            res = RES_OK;
 80144a0:	2300      	movs	r3, #0
 80144a2:	75fb      	strb	r3, [r7, #23]
            break;
 80144a4:	e008      	b.n	80144b8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144a6:	f7f0 f979 	bl	800479c <HAL_GetTick>
 80144aa:	4602      	mov	r2, r0
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	1ad3      	subs	r3, r2, r3
 80144b0:	f247 522f 	movw	r2, #29999	; 0x752f
 80144b4:	4293      	cmp	r3, r2
 80144b6:	d9ee      	bls.n	8014496 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80144b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3718      	adds	r7, #24
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	24000d78 	.word	0x24000d78

080144c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b08c      	sub	sp, #48	; 0x30
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	4603      	mov	r3, r0
 80144d0:	603a      	str	r2, [r7, #0]
 80144d2:	71fb      	strb	r3, [r7, #7]
 80144d4:	460b      	mov	r3, r1
 80144d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80144d8:	2301      	movs	r3, #1
 80144da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80144de:	4b25      	ldr	r3, [pc, #148]	; (8014574 <SD_ioctl+0xac>)
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	b2db      	uxtb	r3, r3
 80144e4:	f003 0301 	and.w	r3, r3, #1
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d001      	beq.n	80144f0 <SD_ioctl+0x28>
 80144ec:	2303      	movs	r3, #3
 80144ee:	e03c      	b.n	801456a <SD_ioctl+0xa2>

  switch (cmd)
 80144f0:	79bb      	ldrb	r3, [r7, #6]
 80144f2:	2b03      	cmp	r3, #3
 80144f4:	d834      	bhi.n	8014560 <SD_ioctl+0x98>
 80144f6:	a201      	add	r2, pc, #4	; (adr r2, 80144fc <SD_ioctl+0x34>)
 80144f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144fc:	0801450d 	.word	0x0801450d
 8014500:	08014515 	.word	0x08014515
 8014504:	0801452d 	.word	0x0801452d
 8014508:	08014547 	.word	0x08014547
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801450c:	2300      	movs	r3, #0
 801450e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014512:	e028      	b.n	8014566 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014514:	f107 0308 	add.w	r3, r7, #8
 8014518:	4618      	mov	r0, r3
 801451a:	f7ff fe79 	bl	8014210 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801451e:	6a3a      	ldr	r2, [r7, #32]
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014524:	2300      	movs	r3, #0
 8014526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801452a:	e01c      	b.n	8014566 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801452c:	f107 0308 	add.w	r3, r7, #8
 8014530:	4618      	mov	r0, r3
 8014532:	f7ff fe6d 	bl	8014210 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014538:	b29a      	uxth	r2, r3
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801453e:	2300      	movs	r3, #0
 8014540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014544:	e00f      	b.n	8014566 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014546:	f107 0308 	add.w	r3, r7, #8
 801454a:	4618      	mov	r0, r3
 801454c:	f7ff fe60 	bl	8014210 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014552:	0a5a      	lsrs	r2, r3, #9
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014558:	2300      	movs	r3, #0
 801455a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801455e:	e002      	b.n	8014566 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014560:	2304      	movs	r3, #4
 8014562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801456a:	4618      	mov	r0, r3
 801456c:	3730      	adds	r7, #48	; 0x30
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}
 8014572:	bf00      	nop
 8014574:	2400000d 	.word	0x2400000d

08014578 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014578:	b480      	push	{r7}
 801457a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801457c:	4b03      	ldr	r3, [pc, #12]	; (801458c <BSP_SD_WriteCpltCallback+0x14>)
 801457e:	2201      	movs	r2, #1
 8014580:	601a      	str	r2, [r3, #0]
}
 8014582:	bf00      	nop
 8014584:	46bd      	mov	sp, r7
 8014586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458a:	4770      	bx	lr
 801458c:	24000d78 	.word	0x24000d78

08014590 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014590:	b480      	push	{r7}
 8014592:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014594:	4b03      	ldr	r3, [pc, #12]	; (80145a4 <BSP_SD_ReadCpltCallback+0x14>)
 8014596:	2201      	movs	r2, #1
 8014598:	601a      	str	r2, [r3, #0]
}
 801459a:	bf00      	nop
 801459c:	46bd      	mov	sp, r7
 801459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a2:	4770      	bx	lr
 80145a4:	24000d7c 	.word	0x24000d7c

080145a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b084      	sub	sp, #16
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	460b      	mov	r3, r1
 80145b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80145b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80145b8:	f002 fcea 	bl	8016f90 <USBD_static_malloc>
 80145bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d109      	bne.n	80145d8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	32b0      	adds	r2, #176	; 0xb0
 80145ce:	2100      	movs	r1, #0
 80145d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80145d4:	2302      	movs	r3, #2
 80145d6:	e0d4      	b.n	8014782 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80145d8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80145dc:	2100      	movs	r1, #0
 80145de:	68f8      	ldr	r0, [r7, #12]
 80145e0:	f003 fc7d 	bl	8017ede <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	32b0      	adds	r2, #176	; 0xb0
 80145ee:	68f9      	ldr	r1, [r7, #12]
 80145f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	32b0      	adds	r2, #176	; 0xb0
 80145fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	7c1b      	ldrb	r3, [r3, #16]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d138      	bne.n	8014682 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014610:	4b5e      	ldr	r3, [pc, #376]	; (801478c <USBD_CDC_Init+0x1e4>)
 8014612:	7819      	ldrb	r1, [r3, #0]
 8014614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014618:	2202      	movs	r2, #2
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f002 fb95 	bl	8016d4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014620:	4b5a      	ldr	r3, [pc, #360]	; (801478c <USBD_CDC_Init+0x1e4>)
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	f003 020f 	and.w	r2, r3, #15
 8014628:	6879      	ldr	r1, [r7, #4]
 801462a:	4613      	mov	r3, r2
 801462c:	009b      	lsls	r3, r3, #2
 801462e:	4413      	add	r3, r2
 8014630:	009b      	lsls	r3, r3, #2
 8014632:	440b      	add	r3, r1
 8014634:	3324      	adds	r3, #36	; 0x24
 8014636:	2201      	movs	r2, #1
 8014638:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801463a:	4b55      	ldr	r3, [pc, #340]	; (8014790 <USBD_CDC_Init+0x1e8>)
 801463c:	7819      	ldrb	r1, [r3, #0]
 801463e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014642:	2202      	movs	r2, #2
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f002 fb80 	bl	8016d4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801464a:	4b51      	ldr	r3, [pc, #324]	; (8014790 <USBD_CDC_Init+0x1e8>)
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	f003 020f 	and.w	r2, r3, #15
 8014652:	6879      	ldr	r1, [r7, #4]
 8014654:	4613      	mov	r3, r2
 8014656:	009b      	lsls	r3, r3, #2
 8014658:	4413      	add	r3, r2
 801465a:	009b      	lsls	r3, r3, #2
 801465c:	440b      	add	r3, r1
 801465e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014662:	2201      	movs	r2, #1
 8014664:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014666:	4b4b      	ldr	r3, [pc, #300]	; (8014794 <USBD_CDC_Init+0x1ec>)
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	f003 020f 	and.w	r2, r3, #15
 801466e:	6879      	ldr	r1, [r7, #4]
 8014670:	4613      	mov	r3, r2
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	4413      	add	r3, r2
 8014676:	009b      	lsls	r3, r3, #2
 8014678:	440b      	add	r3, r1
 801467a:	3326      	adds	r3, #38	; 0x26
 801467c:	2210      	movs	r2, #16
 801467e:	801a      	strh	r2, [r3, #0]
 8014680:	e035      	b.n	80146ee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014682:	4b42      	ldr	r3, [pc, #264]	; (801478c <USBD_CDC_Init+0x1e4>)
 8014684:	7819      	ldrb	r1, [r3, #0]
 8014686:	2340      	movs	r3, #64	; 0x40
 8014688:	2202      	movs	r2, #2
 801468a:	6878      	ldr	r0, [r7, #4]
 801468c:	f002 fb5d 	bl	8016d4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014690:	4b3e      	ldr	r3, [pc, #248]	; (801478c <USBD_CDC_Init+0x1e4>)
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	f003 020f 	and.w	r2, r3, #15
 8014698:	6879      	ldr	r1, [r7, #4]
 801469a:	4613      	mov	r3, r2
 801469c:	009b      	lsls	r3, r3, #2
 801469e:	4413      	add	r3, r2
 80146a0:	009b      	lsls	r3, r3, #2
 80146a2:	440b      	add	r3, r1
 80146a4:	3324      	adds	r3, #36	; 0x24
 80146a6:	2201      	movs	r2, #1
 80146a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80146aa:	4b39      	ldr	r3, [pc, #228]	; (8014790 <USBD_CDC_Init+0x1e8>)
 80146ac:	7819      	ldrb	r1, [r3, #0]
 80146ae:	2340      	movs	r3, #64	; 0x40
 80146b0:	2202      	movs	r2, #2
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f002 fb49 	bl	8016d4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80146b8:	4b35      	ldr	r3, [pc, #212]	; (8014790 <USBD_CDC_Init+0x1e8>)
 80146ba:	781b      	ldrb	r3, [r3, #0]
 80146bc:	f003 020f 	and.w	r2, r3, #15
 80146c0:	6879      	ldr	r1, [r7, #4]
 80146c2:	4613      	mov	r3, r2
 80146c4:	009b      	lsls	r3, r3, #2
 80146c6:	4413      	add	r3, r2
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	440b      	add	r3, r1
 80146cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80146d0:	2201      	movs	r2, #1
 80146d2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80146d4:	4b2f      	ldr	r3, [pc, #188]	; (8014794 <USBD_CDC_Init+0x1ec>)
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	f003 020f 	and.w	r2, r3, #15
 80146dc:	6879      	ldr	r1, [r7, #4]
 80146de:	4613      	mov	r3, r2
 80146e0:	009b      	lsls	r3, r3, #2
 80146e2:	4413      	add	r3, r2
 80146e4:	009b      	lsls	r3, r3, #2
 80146e6:	440b      	add	r3, r1
 80146e8:	3326      	adds	r3, #38	; 0x26
 80146ea:	2210      	movs	r2, #16
 80146ec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80146ee:	4b29      	ldr	r3, [pc, #164]	; (8014794 <USBD_CDC_Init+0x1ec>)
 80146f0:	7819      	ldrb	r1, [r3, #0]
 80146f2:	2308      	movs	r3, #8
 80146f4:	2203      	movs	r2, #3
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f002 fb27 	bl	8016d4a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80146fc:	4b25      	ldr	r3, [pc, #148]	; (8014794 <USBD_CDC_Init+0x1ec>)
 80146fe:	781b      	ldrb	r3, [r3, #0]
 8014700:	f003 020f 	and.w	r2, r3, #15
 8014704:	6879      	ldr	r1, [r7, #4]
 8014706:	4613      	mov	r3, r2
 8014708:	009b      	lsls	r3, r3, #2
 801470a:	4413      	add	r3, r2
 801470c:	009b      	lsls	r3, r3, #2
 801470e:	440b      	add	r3, r1
 8014710:	3324      	adds	r3, #36	; 0x24
 8014712:	2201      	movs	r2, #1
 8014714:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	2200      	movs	r2, #0
 801471a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014724:	687a      	ldr	r2, [r7, #4]
 8014726:	33b0      	adds	r3, #176	; 0xb0
 8014728:	009b      	lsls	r3, r3, #2
 801472a:	4413      	add	r3, r2
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	2200      	movs	r2, #0
 8014736:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	2200      	movs	r2, #0
 801473e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014748:	2b00      	cmp	r3, #0
 801474a:	d101      	bne.n	8014750 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801474c:	2302      	movs	r3, #2
 801474e:	e018      	b.n	8014782 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	7c1b      	ldrb	r3, [r3, #16]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d10a      	bne.n	801476e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014758:	4b0d      	ldr	r3, [pc, #52]	; (8014790 <USBD_CDC_Init+0x1e8>)
 801475a:	7819      	ldrb	r1, [r3, #0]
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f002 fbde 	bl	8016f28 <USBD_LL_PrepareReceive>
 801476c:	e008      	b.n	8014780 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801476e:	4b08      	ldr	r3, [pc, #32]	; (8014790 <USBD_CDC_Init+0x1e8>)
 8014770:	7819      	ldrb	r1, [r3, #0]
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014778:	2340      	movs	r3, #64	; 0x40
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f002 fbd4 	bl	8016f28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014780:	2300      	movs	r3, #0
}
 8014782:	4618      	mov	r0, r3
 8014784:	3710      	adds	r7, #16
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}
 801478a:	bf00      	nop
 801478c:	24000097 	.word	0x24000097
 8014790:	24000098 	.word	0x24000098
 8014794:	24000099 	.word	0x24000099

08014798 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b082      	sub	sp, #8
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	460b      	mov	r3, r1
 80147a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80147a4:	4b3a      	ldr	r3, [pc, #232]	; (8014890 <USBD_CDC_DeInit+0xf8>)
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	4619      	mov	r1, r3
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f002 faf3 	bl	8016d96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80147b0:	4b37      	ldr	r3, [pc, #220]	; (8014890 <USBD_CDC_DeInit+0xf8>)
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	f003 020f 	and.w	r2, r3, #15
 80147b8:	6879      	ldr	r1, [r7, #4]
 80147ba:	4613      	mov	r3, r2
 80147bc:	009b      	lsls	r3, r3, #2
 80147be:	4413      	add	r3, r2
 80147c0:	009b      	lsls	r3, r3, #2
 80147c2:	440b      	add	r3, r1
 80147c4:	3324      	adds	r3, #36	; 0x24
 80147c6:	2200      	movs	r2, #0
 80147c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80147ca:	4b32      	ldr	r3, [pc, #200]	; (8014894 <USBD_CDC_DeInit+0xfc>)
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	4619      	mov	r1, r3
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f002 fae0 	bl	8016d96 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80147d6:	4b2f      	ldr	r3, [pc, #188]	; (8014894 <USBD_CDC_DeInit+0xfc>)
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	f003 020f 	and.w	r2, r3, #15
 80147de:	6879      	ldr	r1, [r7, #4]
 80147e0:	4613      	mov	r3, r2
 80147e2:	009b      	lsls	r3, r3, #2
 80147e4:	4413      	add	r3, r2
 80147e6:	009b      	lsls	r3, r3, #2
 80147e8:	440b      	add	r3, r1
 80147ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80147ee:	2200      	movs	r2, #0
 80147f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80147f2:	4b29      	ldr	r3, [pc, #164]	; (8014898 <USBD_CDC_DeInit+0x100>)
 80147f4:	781b      	ldrb	r3, [r3, #0]
 80147f6:	4619      	mov	r1, r3
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f002 facc 	bl	8016d96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80147fe:	4b26      	ldr	r3, [pc, #152]	; (8014898 <USBD_CDC_DeInit+0x100>)
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	f003 020f 	and.w	r2, r3, #15
 8014806:	6879      	ldr	r1, [r7, #4]
 8014808:	4613      	mov	r3, r2
 801480a:	009b      	lsls	r3, r3, #2
 801480c:	4413      	add	r3, r2
 801480e:	009b      	lsls	r3, r3, #2
 8014810:	440b      	add	r3, r1
 8014812:	3324      	adds	r3, #36	; 0x24
 8014814:	2200      	movs	r2, #0
 8014816:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014818:	4b1f      	ldr	r3, [pc, #124]	; (8014898 <USBD_CDC_DeInit+0x100>)
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	f003 020f 	and.w	r2, r3, #15
 8014820:	6879      	ldr	r1, [r7, #4]
 8014822:	4613      	mov	r3, r2
 8014824:	009b      	lsls	r3, r3, #2
 8014826:	4413      	add	r3, r2
 8014828:	009b      	lsls	r3, r3, #2
 801482a:	440b      	add	r3, r1
 801482c:	3326      	adds	r3, #38	; 0x26
 801482e:	2200      	movs	r2, #0
 8014830:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	32b0      	adds	r2, #176	; 0xb0
 801483c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d01f      	beq.n	8014884 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801484a:	687a      	ldr	r2, [r7, #4]
 801484c:	33b0      	adds	r3, #176	; 0xb0
 801484e:	009b      	lsls	r3, r3, #2
 8014850:	4413      	add	r3, r2
 8014852:	685b      	ldr	r3, [r3, #4]
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	32b0      	adds	r2, #176	; 0xb0
 8014862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014866:	4618      	mov	r0, r3
 8014868:	f002 fba0 	bl	8016fac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	32b0      	adds	r2, #176	; 0xb0
 8014876:	2100      	movs	r1, #0
 8014878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2200      	movs	r2, #0
 8014880:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014884:	2300      	movs	r3, #0
}
 8014886:	4618      	mov	r0, r3
 8014888:	3708      	adds	r7, #8
 801488a:	46bd      	mov	sp, r7
 801488c:	bd80      	pop	{r7, pc}
 801488e:	bf00      	nop
 8014890:	24000097 	.word	0x24000097
 8014894:	24000098 	.word	0x24000098
 8014898:	24000099 	.word	0x24000099

0801489c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b086      	sub	sp, #24
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	32b0      	adds	r2, #176	; 0xb0
 80148b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80148b6:	2300      	movs	r3, #0
 80148b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80148ba:	2300      	movs	r3, #0
 80148bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80148be:	2300      	movs	r3, #0
 80148c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80148c2:	693b      	ldr	r3, [r7, #16]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d101      	bne.n	80148cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80148c8:	2303      	movs	r3, #3
 80148ca:	e0bf      	b.n	8014a4c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	781b      	ldrb	r3, [r3, #0]
 80148d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d050      	beq.n	801497a <USBD_CDC_Setup+0xde>
 80148d8:	2b20      	cmp	r3, #32
 80148da:	f040 80af 	bne.w	8014a3c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	88db      	ldrh	r3, [r3, #6]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d03a      	beq.n	801495c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	781b      	ldrb	r3, [r3, #0]
 80148ea:	b25b      	sxtb	r3, r3
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	da1b      	bge.n	8014928 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148f6:	687a      	ldr	r2, [r7, #4]
 80148f8:	33b0      	adds	r3, #176	; 0xb0
 80148fa:	009b      	lsls	r3, r3, #2
 80148fc:	4413      	add	r3, r2
 80148fe:	685b      	ldr	r3, [r3, #4]
 8014900:	689b      	ldr	r3, [r3, #8]
 8014902:	683a      	ldr	r2, [r7, #0]
 8014904:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014906:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014908:	683a      	ldr	r2, [r7, #0]
 801490a:	88d2      	ldrh	r2, [r2, #6]
 801490c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	88db      	ldrh	r3, [r3, #6]
 8014912:	2b07      	cmp	r3, #7
 8014914:	bf28      	it	cs
 8014916:	2307      	movcs	r3, #7
 8014918:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	89fa      	ldrh	r2, [r7, #14]
 801491e:	4619      	mov	r1, r3
 8014920:	6878      	ldr	r0, [r7, #4]
 8014922:	f001 fd89 	bl	8016438 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014926:	e090      	b.n	8014a4a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	785a      	ldrb	r2, [r3, #1]
 801492c:	693b      	ldr	r3, [r7, #16]
 801492e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	88db      	ldrh	r3, [r3, #6]
 8014936:	2b3f      	cmp	r3, #63	; 0x3f
 8014938:	d803      	bhi.n	8014942 <USBD_CDC_Setup+0xa6>
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	88db      	ldrh	r3, [r3, #6]
 801493e:	b2da      	uxtb	r2, r3
 8014940:	e000      	b.n	8014944 <USBD_CDC_Setup+0xa8>
 8014942:	2240      	movs	r2, #64	; 0x40
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801494a:	6939      	ldr	r1, [r7, #16]
 801494c:	693b      	ldr	r3, [r7, #16]
 801494e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014952:	461a      	mov	r2, r3
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f001 fd9b 	bl	8016490 <USBD_CtlPrepareRx>
      break;
 801495a:	e076      	b.n	8014a4a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014962:	687a      	ldr	r2, [r7, #4]
 8014964:	33b0      	adds	r3, #176	; 0xb0
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	4413      	add	r3, r2
 801496a:	685b      	ldr	r3, [r3, #4]
 801496c:	689b      	ldr	r3, [r3, #8]
 801496e:	683a      	ldr	r2, [r7, #0]
 8014970:	7850      	ldrb	r0, [r2, #1]
 8014972:	2200      	movs	r2, #0
 8014974:	6839      	ldr	r1, [r7, #0]
 8014976:	4798      	blx	r3
      break;
 8014978:	e067      	b.n	8014a4a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	785b      	ldrb	r3, [r3, #1]
 801497e:	2b0b      	cmp	r3, #11
 8014980:	d851      	bhi.n	8014a26 <USBD_CDC_Setup+0x18a>
 8014982:	a201      	add	r2, pc, #4	; (adr r2, 8014988 <USBD_CDC_Setup+0xec>)
 8014984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014988:	080149b9 	.word	0x080149b9
 801498c:	08014a35 	.word	0x08014a35
 8014990:	08014a27 	.word	0x08014a27
 8014994:	08014a27 	.word	0x08014a27
 8014998:	08014a27 	.word	0x08014a27
 801499c:	08014a27 	.word	0x08014a27
 80149a0:	08014a27 	.word	0x08014a27
 80149a4:	08014a27 	.word	0x08014a27
 80149a8:	08014a27 	.word	0x08014a27
 80149ac:	08014a27 	.word	0x08014a27
 80149b0:	080149e3 	.word	0x080149e3
 80149b4:	08014a0d 	.word	0x08014a0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	2b03      	cmp	r3, #3
 80149c2:	d107      	bne.n	80149d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80149c4:	f107 030a 	add.w	r3, r7, #10
 80149c8:	2202      	movs	r2, #2
 80149ca:	4619      	mov	r1, r3
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f001 fd33 	bl	8016438 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80149d2:	e032      	b.n	8014a3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80149d4:	6839      	ldr	r1, [r7, #0]
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f001 fcbd 	bl	8016356 <USBD_CtlError>
            ret = USBD_FAIL;
 80149dc:	2303      	movs	r3, #3
 80149de:	75fb      	strb	r3, [r7, #23]
          break;
 80149e0:	e02b      	b.n	8014a3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149e8:	b2db      	uxtb	r3, r3
 80149ea:	2b03      	cmp	r3, #3
 80149ec:	d107      	bne.n	80149fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80149ee:	f107 030d 	add.w	r3, r7, #13
 80149f2:	2201      	movs	r2, #1
 80149f4:	4619      	mov	r1, r3
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f001 fd1e 	bl	8016438 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80149fc:	e01d      	b.n	8014a3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80149fe:	6839      	ldr	r1, [r7, #0]
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f001 fca8 	bl	8016356 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a06:	2303      	movs	r3, #3
 8014a08:	75fb      	strb	r3, [r7, #23]
          break;
 8014a0a:	e016      	b.n	8014a3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a12:	b2db      	uxtb	r3, r3
 8014a14:	2b03      	cmp	r3, #3
 8014a16:	d00f      	beq.n	8014a38 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014a18:	6839      	ldr	r1, [r7, #0]
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f001 fc9b 	bl	8016356 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a20:	2303      	movs	r3, #3
 8014a22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014a24:	e008      	b.n	8014a38 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014a26:	6839      	ldr	r1, [r7, #0]
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f001 fc94 	bl	8016356 <USBD_CtlError>
          ret = USBD_FAIL;
 8014a2e:	2303      	movs	r3, #3
 8014a30:	75fb      	strb	r3, [r7, #23]
          break;
 8014a32:	e002      	b.n	8014a3a <USBD_CDC_Setup+0x19e>
          break;
 8014a34:	bf00      	nop
 8014a36:	e008      	b.n	8014a4a <USBD_CDC_Setup+0x1ae>
          break;
 8014a38:	bf00      	nop
      }
      break;
 8014a3a:	e006      	b.n	8014a4a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014a3c:	6839      	ldr	r1, [r7, #0]
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f001 fc89 	bl	8016356 <USBD_CtlError>
      ret = USBD_FAIL;
 8014a44:	2303      	movs	r3, #3
 8014a46:	75fb      	strb	r3, [r7, #23]
      break;
 8014a48:	bf00      	nop
  }

  return (uint8_t)ret;
 8014a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	3718      	adds	r7, #24
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}

08014a54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b084      	sub	sp, #16
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
 8014a5c:	460b      	mov	r3, r1
 8014a5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014a66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	32b0      	adds	r2, #176	; 0xb0
 8014a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d101      	bne.n	8014a7e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014a7a:	2303      	movs	r3, #3
 8014a7c:	e065      	b.n	8014b4a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	32b0      	adds	r2, #176	; 0xb0
 8014a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014a8e:	78fb      	ldrb	r3, [r7, #3]
 8014a90:	f003 020f 	and.w	r2, r3, #15
 8014a94:	6879      	ldr	r1, [r7, #4]
 8014a96:	4613      	mov	r3, r2
 8014a98:	009b      	lsls	r3, r3, #2
 8014a9a:	4413      	add	r3, r2
 8014a9c:	009b      	lsls	r3, r3, #2
 8014a9e:	440b      	add	r3, r1
 8014aa0:	3318      	adds	r3, #24
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d02f      	beq.n	8014b08 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014aa8:	78fb      	ldrb	r3, [r7, #3]
 8014aaa:	f003 020f 	and.w	r2, r3, #15
 8014aae:	6879      	ldr	r1, [r7, #4]
 8014ab0:	4613      	mov	r3, r2
 8014ab2:	009b      	lsls	r3, r3, #2
 8014ab4:	4413      	add	r3, r2
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	440b      	add	r3, r1
 8014aba:	3318      	adds	r3, #24
 8014abc:	681a      	ldr	r2, [r3, #0]
 8014abe:	78fb      	ldrb	r3, [r7, #3]
 8014ac0:	f003 010f 	and.w	r1, r3, #15
 8014ac4:	68f8      	ldr	r0, [r7, #12]
 8014ac6:	460b      	mov	r3, r1
 8014ac8:	00db      	lsls	r3, r3, #3
 8014aca:	440b      	add	r3, r1
 8014acc:	009b      	lsls	r3, r3, #2
 8014ace:	4403      	add	r3, r0
 8014ad0:	3344      	adds	r3, #68	; 0x44
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	fbb2 f1f3 	udiv	r1, r2, r3
 8014ad8:	fb01 f303 	mul.w	r3, r1, r3
 8014adc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d112      	bne.n	8014b08 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014ae2:	78fb      	ldrb	r3, [r7, #3]
 8014ae4:	f003 020f 	and.w	r2, r3, #15
 8014ae8:	6879      	ldr	r1, [r7, #4]
 8014aea:	4613      	mov	r3, r2
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	4413      	add	r3, r2
 8014af0:	009b      	lsls	r3, r3, #2
 8014af2:	440b      	add	r3, r1
 8014af4:	3318      	adds	r3, #24
 8014af6:	2200      	movs	r2, #0
 8014af8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014afa:	78f9      	ldrb	r1, [r7, #3]
 8014afc:	2300      	movs	r3, #0
 8014afe:	2200      	movs	r2, #0
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	f002 f9f0 	bl	8016ee6 <USBD_LL_Transmit>
 8014b06:	e01f      	b.n	8014b48 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b16:	687a      	ldr	r2, [r7, #4]
 8014b18:	33b0      	adds	r3, #176	; 0xb0
 8014b1a:	009b      	lsls	r3, r3, #2
 8014b1c:	4413      	add	r3, r2
 8014b1e:	685b      	ldr	r3, [r3, #4]
 8014b20:	691b      	ldr	r3, [r3, #16]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d010      	beq.n	8014b48 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b2c:	687a      	ldr	r2, [r7, #4]
 8014b2e:	33b0      	adds	r3, #176	; 0xb0
 8014b30:	009b      	lsls	r3, r3, #2
 8014b32:	4413      	add	r3, r2
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	691b      	ldr	r3, [r3, #16]
 8014b38:	68ba      	ldr	r2, [r7, #8]
 8014b3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014b3e:	68ba      	ldr	r2, [r7, #8]
 8014b40:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014b44:	78fa      	ldrb	r2, [r7, #3]
 8014b46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014b48:	2300      	movs	r3, #0
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3710      	adds	r7, #16
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}

08014b52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014b52:	b580      	push	{r7, lr}
 8014b54:	b084      	sub	sp, #16
 8014b56:	af00      	add	r7, sp, #0
 8014b58:	6078      	str	r0, [r7, #4]
 8014b5a:	460b      	mov	r3, r1
 8014b5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	32b0      	adds	r2, #176	; 0xb0
 8014b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	32b0      	adds	r2, #176	; 0xb0
 8014b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d101      	bne.n	8014b84 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014b80:	2303      	movs	r3, #3
 8014b82:	e01a      	b.n	8014bba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014b84:	78fb      	ldrb	r3, [r7, #3]
 8014b86:	4619      	mov	r1, r3
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f002 f9ee 	bl	8016f6a <USBD_LL_GetRxDataSize>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b9c:	687a      	ldr	r2, [r7, #4]
 8014b9e:	33b0      	adds	r3, #176	; 0xb0
 8014ba0:	009b      	lsls	r3, r3, #2
 8014ba2:	4413      	add	r3, r2
 8014ba4:	685b      	ldr	r3, [r3, #4]
 8014ba6:	68db      	ldr	r3, [r3, #12]
 8014ba8:	68fa      	ldr	r2, [r7, #12]
 8014baa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014bae:	68fa      	ldr	r2, [r7, #12]
 8014bb0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014bb4:	4611      	mov	r1, r2
 8014bb6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014bb8:	2300      	movs	r3, #0
}
 8014bba:	4618      	mov	r0, r3
 8014bbc:	3710      	adds	r7, #16
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}

08014bc2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014bc2:	b580      	push	{r7, lr}
 8014bc4:	b084      	sub	sp, #16
 8014bc6:	af00      	add	r7, sp, #0
 8014bc8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	32b0      	adds	r2, #176	; 0xb0
 8014bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d101      	bne.n	8014be4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014be0:	2303      	movs	r3, #3
 8014be2:	e025      	b.n	8014c30 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bea:	687a      	ldr	r2, [r7, #4]
 8014bec:	33b0      	adds	r3, #176	; 0xb0
 8014bee:	009b      	lsls	r3, r3, #2
 8014bf0:	4413      	add	r3, r2
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d01a      	beq.n	8014c2e <USBD_CDC_EP0_RxReady+0x6c>
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014bfe:	2bff      	cmp	r3, #255	; 0xff
 8014c00:	d015      	beq.n	8014c2e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c08:	687a      	ldr	r2, [r7, #4]
 8014c0a:	33b0      	adds	r3, #176	; 0xb0
 8014c0c:	009b      	lsls	r3, r3, #2
 8014c0e:	4413      	add	r3, r2
 8014c10:	685b      	ldr	r3, [r3, #4]
 8014c12:	689b      	ldr	r3, [r3, #8]
 8014c14:	68fa      	ldr	r2, [r7, #12]
 8014c16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014c1a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014c1c:	68fa      	ldr	r2, [r7, #12]
 8014c1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c22:	b292      	uxth	r2, r2
 8014c24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	22ff      	movs	r2, #255	; 0xff
 8014c2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014c2e:	2300      	movs	r3, #0
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	3710      	adds	r7, #16
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}

08014c38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b086      	sub	sp, #24
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c40:	2182      	movs	r1, #130	; 0x82
 8014c42:	4818      	ldr	r0, [pc, #96]	; (8014ca4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c44:	f000 fd4f 	bl	80156e6 <USBD_GetEpDesc>
 8014c48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c4a:	2101      	movs	r1, #1
 8014c4c:	4815      	ldr	r0, [pc, #84]	; (8014ca4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c4e:	f000 fd4a 	bl	80156e6 <USBD_GetEpDesc>
 8014c52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014c54:	2181      	movs	r1, #129	; 0x81
 8014c56:	4813      	ldr	r0, [pc, #76]	; (8014ca4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c58:	f000 fd45 	bl	80156e6 <USBD_GetEpDesc>
 8014c5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d002      	beq.n	8014c6a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	2210      	movs	r2, #16
 8014c68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d006      	beq.n	8014c7e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c70:	693b      	ldr	r3, [r7, #16]
 8014c72:	2200      	movs	r2, #0
 8014c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c78:	711a      	strb	r2, [r3, #4]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d006      	beq.n	8014c92 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	2200      	movs	r2, #0
 8014c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c8c:	711a      	strb	r2, [r3, #4]
 8014c8e:	2200      	movs	r2, #0
 8014c90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2243      	movs	r2, #67	; 0x43
 8014c96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c98:	4b02      	ldr	r3, [pc, #8]	; (8014ca4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	3718      	adds	r7, #24
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bd80      	pop	{r7, pc}
 8014ca2:	bf00      	nop
 8014ca4:	24000054 	.word	0x24000054

08014ca8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b086      	sub	sp, #24
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014cb0:	2182      	movs	r1, #130	; 0x82
 8014cb2:	4818      	ldr	r0, [pc, #96]	; (8014d14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014cb4:	f000 fd17 	bl	80156e6 <USBD_GetEpDesc>
 8014cb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014cba:	2101      	movs	r1, #1
 8014cbc:	4815      	ldr	r0, [pc, #84]	; (8014d14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014cbe:	f000 fd12 	bl	80156e6 <USBD_GetEpDesc>
 8014cc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014cc4:	2181      	movs	r1, #129	; 0x81
 8014cc6:	4813      	ldr	r0, [pc, #76]	; (8014d14 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014cc8:	f000 fd0d 	bl	80156e6 <USBD_GetEpDesc>
 8014ccc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014cce:	697b      	ldr	r3, [r7, #20]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d002      	beq.n	8014cda <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014cd4:	697b      	ldr	r3, [r7, #20]
 8014cd6:	2210      	movs	r2, #16
 8014cd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014cda:	693b      	ldr	r3, [r7, #16]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d006      	beq.n	8014cee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	711a      	strb	r2, [r3, #4]
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	f042 0202 	orr.w	r2, r2, #2
 8014cec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d006      	beq.n	8014d02 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	711a      	strb	r2, [r3, #4]
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	f042 0202 	orr.w	r2, r2, #2
 8014d00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2243      	movs	r2, #67	; 0x43
 8014d06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d08:	4b02      	ldr	r3, [pc, #8]	; (8014d14 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	3718      	adds	r7, #24
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd80      	pop	{r7, pc}
 8014d12:	bf00      	nop
 8014d14:	24000054 	.word	0x24000054

08014d18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b086      	sub	sp, #24
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d20:	2182      	movs	r1, #130	; 0x82
 8014d22:	4818      	ldr	r0, [pc, #96]	; (8014d84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d24:	f000 fcdf 	bl	80156e6 <USBD_GetEpDesc>
 8014d28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d2a:	2101      	movs	r1, #1
 8014d2c:	4815      	ldr	r0, [pc, #84]	; (8014d84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d2e:	f000 fcda 	bl	80156e6 <USBD_GetEpDesc>
 8014d32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d34:	2181      	movs	r1, #129	; 0x81
 8014d36:	4813      	ldr	r0, [pc, #76]	; (8014d84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d38:	f000 fcd5 	bl	80156e6 <USBD_GetEpDesc>
 8014d3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d002      	beq.n	8014d4a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	2210      	movs	r2, #16
 8014d48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d4a:	693b      	ldr	r3, [r7, #16]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d006      	beq.n	8014d5e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	2200      	movs	r2, #0
 8014d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d58:	711a      	strb	r2, [r3, #4]
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d006      	beq.n	8014d72 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2200      	movs	r2, #0
 8014d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d6c:	711a      	strb	r2, [r3, #4]
 8014d6e:	2200      	movs	r2, #0
 8014d70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	2243      	movs	r2, #67	; 0x43
 8014d76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d78:	4b02      	ldr	r3, [pc, #8]	; (8014d84 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	3718      	adds	r7, #24
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd80      	pop	{r7, pc}
 8014d82:	bf00      	nop
 8014d84:	24000054 	.word	0x24000054

08014d88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014d88:	b480      	push	{r7}
 8014d8a:	b083      	sub	sp, #12
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	220a      	movs	r2, #10
 8014d94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014d96:	4b03      	ldr	r3, [pc, #12]	; (8014da4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	370c      	adds	r7, #12
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da2:	4770      	bx	lr
 8014da4:	24000010 	.word	0x24000010

08014da8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014da8:	b480      	push	{r7}
 8014daa:	b083      	sub	sp, #12
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d101      	bne.n	8014dbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014db8:	2303      	movs	r3, #3
 8014dba:	e009      	b.n	8014dd0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	33b0      	adds	r3, #176	; 0xb0
 8014dc6:	009b      	lsls	r3, r3, #2
 8014dc8:	4413      	add	r3, r2
 8014dca:	683a      	ldr	r2, [r7, #0]
 8014dcc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014dce:	2300      	movs	r3, #0
}
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	370c      	adds	r7, #12
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dda:	4770      	bx	lr

08014ddc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014ddc:	b480      	push	{r7}
 8014dde:	b087      	sub	sp, #28
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	60f8      	str	r0, [r7, #12]
 8014de4:	60b9      	str	r1, [r7, #8]
 8014de6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	32b0      	adds	r2, #176	; 0xb0
 8014df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014df6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014df8:	697b      	ldr	r3, [r7, #20]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d101      	bne.n	8014e02 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014dfe:	2303      	movs	r3, #3
 8014e00:	e008      	b.n	8014e14 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	68ba      	ldr	r2, [r7, #8]
 8014e06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014e12:	2300      	movs	r3, #0
}
 8014e14:	4618      	mov	r0, r3
 8014e16:	371c      	adds	r7, #28
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1e:	4770      	bx	lr

08014e20 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014e20:	b480      	push	{r7}
 8014e22:	b085      	sub	sp, #20
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	32b0      	adds	r2, #176	; 0xb0
 8014e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d101      	bne.n	8014e44 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014e40:	2303      	movs	r3, #3
 8014e42:	e004      	b.n	8014e4e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	683a      	ldr	r2, [r7, #0]
 8014e48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014e4c:	2300      	movs	r3, #0
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3714      	adds	r7, #20
 8014e52:	46bd      	mov	sp, r7
 8014e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e58:	4770      	bx	lr
	...

08014e5c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b084      	sub	sp, #16
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	32b0      	adds	r2, #176	; 0xb0
 8014e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e72:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014e74:	2301      	movs	r3, #1
 8014e76:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d101      	bne.n	8014e82 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014e7e:	2303      	movs	r3, #3
 8014e80:	e025      	b.n	8014ece <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d11f      	bne.n	8014ecc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	2201      	movs	r2, #1
 8014e90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014e94:	4b10      	ldr	r3, [pc, #64]	; (8014ed8 <USBD_CDC_TransmitPacket+0x7c>)
 8014e96:	781b      	ldrb	r3, [r3, #0]
 8014e98:	f003 020f 	and.w	r2, r3, #15
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	4613      	mov	r3, r2
 8014ea6:	009b      	lsls	r3, r3, #2
 8014ea8:	4413      	add	r3, r2
 8014eaa:	009b      	lsls	r3, r3, #2
 8014eac:	4403      	add	r3, r0
 8014eae:	3318      	adds	r3, #24
 8014eb0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014eb2:	4b09      	ldr	r3, [pc, #36]	; (8014ed8 <USBD_CDC_TransmitPacket+0x7c>)
 8014eb4:	7819      	ldrb	r1, [r3, #0]
 8014eb6:	68bb      	ldr	r3, [r7, #8]
 8014eb8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014ebc:	68bb      	ldr	r3, [r7, #8]
 8014ebe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014ec2:	6878      	ldr	r0, [r7, #4]
 8014ec4:	f002 f80f 	bl	8016ee6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ece:	4618      	mov	r0, r3
 8014ed0:	3710      	adds	r7, #16
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}
 8014ed6:	bf00      	nop
 8014ed8:	24000097 	.word	0x24000097

08014edc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b084      	sub	sp, #16
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	32b0      	adds	r2, #176	; 0xb0
 8014eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ef2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	32b0      	adds	r2, #176	; 0xb0
 8014efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d101      	bne.n	8014f0a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014f06:	2303      	movs	r3, #3
 8014f08:	e018      	b.n	8014f3c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	7c1b      	ldrb	r3, [r3, #16]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d10a      	bne.n	8014f28 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f12:	4b0c      	ldr	r3, [pc, #48]	; (8014f44 <USBD_CDC_ReceivePacket+0x68>)
 8014f14:	7819      	ldrb	r1, [r3, #0]
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	f002 f801 	bl	8016f28 <USBD_LL_PrepareReceive>
 8014f26:	e008      	b.n	8014f3a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f28:	4b06      	ldr	r3, [pc, #24]	; (8014f44 <USBD_CDC_ReceivePacket+0x68>)
 8014f2a:	7819      	ldrb	r1, [r3, #0]
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f32:	2340      	movs	r3, #64	; 0x40
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f001 fff7 	bl	8016f28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014f3a:	2300      	movs	r3, #0
}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	3710      	adds	r7, #16
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}
 8014f44:	24000098 	.word	0x24000098

08014f48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b086      	sub	sp, #24
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	60b9      	str	r1, [r7, #8]
 8014f52:	4613      	mov	r3, r2
 8014f54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d101      	bne.n	8014f60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014f5c:	2303      	movs	r3, #3
 8014f5e:	e01f      	b.n	8014fa0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	2200      	movs	r2, #0
 8014f64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	2200      	movs	r2, #0
 8014f74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014f78:	68bb      	ldr	r3, [r7, #8]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d003      	beq.n	8014f86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	68ba      	ldr	r2, [r7, #8]
 8014f82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	2201      	movs	r2, #1
 8014f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	79fa      	ldrb	r2, [r7, #7]
 8014f92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	f001 fe6b 	bl	8016c70 <USBD_LL_Init>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	3718      	adds	r7, #24
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}

08014fa8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b084      	sub	sp, #16
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d101      	bne.n	8014fc0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014fbc:	2303      	movs	r3, #3
 8014fbe:	e025      	b.n	801500c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	683a      	ldr	r2, [r7, #0]
 8014fc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	32ae      	adds	r2, #174	; 0xae
 8014fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d00f      	beq.n	8014ffc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	32ae      	adds	r2, #174	; 0xae
 8014fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fec:	f107 020e 	add.w	r2, r7, #14
 8014ff0:	4610      	mov	r0, r2
 8014ff2:	4798      	blx	r3
 8014ff4:	4602      	mov	r2, r0
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015002:	1c5a      	adds	r2, r3, #1
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801500a:	2300      	movs	r3, #0
}
 801500c:	4618      	mov	r0, r3
 801500e:	3710      	adds	r7, #16
 8015010:	46bd      	mov	sp, r7
 8015012:	bd80      	pop	{r7, pc}

08015014 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b082      	sub	sp, #8
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f001 fe79 	bl	8016d14 <USBD_LL_Start>
 8015022:	4603      	mov	r3, r0
}
 8015024:	4618      	mov	r0, r3
 8015026:	3708      	adds	r7, #8
 8015028:	46bd      	mov	sp, r7
 801502a:	bd80      	pop	{r7, pc}

0801502c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801502c:	b480      	push	{r7}
 801502e:	b083      	sub	sp, #12
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015034:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015036:	4618      	mov	r0, r3
 8015038:	370c      	adds	r7, #12
 801503a:	46bd      	mov	sp, r7
 801503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015040:	4770      	bx	lr

08015042 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015042:	b580      	push	{r7, lr}
 8015044:	b084      	sub	sp, #16
 8015046:	af00      	add	r7, sp, #0
 8015048:	6078      	str	r0, [r7, #4]
 801504a:	460b      	mov	r3, r1
 801504c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801504e:	2300      	movs	r3, #0
 8015050:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015058:	2b00      	cmp	r3, #0
 801505a:	d009      	beq.n	8015070 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	78fa      	ldrb	r2, [r7, #3]
 8015066:	4611      	mov	r1, r2
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	4798      	blx	r3
 801506c:	4603      	mov	r3, r0
 801506e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015070:	7bfb      	ldrb	r3, [r7, #15]
}
 8015072:	4618      	mov	r0, r3
 8015074:	3710      	adds	r7, #16
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}

0801507a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801507a:	b580      	push	{r7, lr}
 801507c:	b084      	sub	sp, #16
 801507e:	af00      	add	r7, sp, #0
 8015080:	6078      	str	r0, [r7, #4]
 8015082:	460b      	mov	r3, r1
 8015084:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015086:	2300      	movs	r3, #0
 8015088:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015090:	685b      	ldr	r3, [r3, #4]
 8015092:	78fa      	ldrb	r2, [r7, #3]
 8015094:	4611      	mov	r1, r2
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	4798      	blx	r3
 801509a:	4603      	mov	r3, r0
 801509c:	2b00      	cmp	r3, #0
 801509e:	d001      	beq.n	80150a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80150a0:	2303      	movs	r3, #3
 80150a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80150a6:	4618      	mov	r0, r3
 80150a8:	3710      	adds	r7, #16
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bd80      	pop	{r7, pc}

080150ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80150ae:	b580      	push	{r7, lr}
 80150b0:	b084      	sub	sp, #16
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
 80150b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80150be:	6839      	ldr	r1, [r7, #0]
 80150c0:	4618      	mov	r0, r3
 80150c2:	f001 f90e 	bl	80162e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	2201      	movs	r2, #1
 80150ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80150d4:	461a      	mov	r2, r3
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80150e2:	f003 031f 	and.w	r3, r3, #31
 80150e6:	2b02      	cmp	r3, #2
 80150e8:	d01a      	beq.n	8015120 <USBD_LL_SetupStage+0x72>
 80150ea:	2b02      	cmp	r3, #2
 80150ec:	d822      	bhi.n	8015134 <USBD_LL_SetupStage+0x86>
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d002      	beq.n	80150f8 <USBD_LL_SetupStage+0x4a>
 80150f2:	2b01      	cmp	r3, #1
 80150f4:	d00a      	beq.n	801510c <USBD_LL_SetupStage+0x5e>
 80150f6:	e01d      	b.n	8015134 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80150fe:	4619      	mov	r1, r3
 8015100:	6878      	ldr	r0, [r7, #4]
 8015102:	f000 fb65 	bl	80157d0 <USBD_StdDevReq>
 8015106:	4603      	mov	r3, r0
 8015108:	73fb      	strb	r3, [r7, #15]
      break;
 801510a:	e020      	b.n	801514e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015112:	4619      	mov	r1, r3
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f000 fbcd 	bl	80158b4 <USBD_StdItfReq>
 801511a:	4603      	mov	r3, r0
 801511c:	73fb      	strb	r3, [r7, #15]
      break;
 801511e:	e016      	b.n	801514e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015126:	4619      	mov	r1, r3
 8015128:	6878      	ldr	r0, [r7, #4]
 801512a:	f000 fc2f 	bl	801598c <USBD_StdEPReq>
 801512e:	4603      	mov	r3, r0
 8015130:	73fb      	strb	r3, [r7, #15]
      break;
 8015132:	e00c      	b.n	801514e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801513a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801513e:	b2db      	uxtb	r3, r3
 8015140:	4619      	mov	r1, r3
 8015142:	6878      	ldr	r0, [r7, #4]
 8015144:	f001 fe46 	bl	8016dd4 <USBD_LL_StallEP>
 8015148:	4603      	mov	r3, r0
 801514a:	73fb      	strb	r3, [r7, #15]
      break;
 801514c:	bf00      	nop
  }

  return ret;
 801514e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015150:	4618      	mov	r0, r3
 8015152:	3710      	adds	r7, #16
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}

08015158 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b086      	sub	sp, #24
 801515c:	af00      	add	r7, sp, #0
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	460b      	mov	r3, r1
 8015162:	607a      	str	r2, [r7, #4]
 8015164:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015166:	2300      	movs	r3, #0
 8015168:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801516a:	7afb      	ldrb	r3, [r7, #11]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d16e      	bne.n	801524e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015176:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801517e:	2b03      	cmp	r3, #3
 8015180:	f040 8098 	bne.w	80152b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	689a      	ldr	r2, [r3, #8]
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	68db      	ldr	r3, [r3, #12]
 801518c:	429a      	cmp	r2, r3
 801518e:	d913      	bls.n	80151b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	689a      	ldr	r2, [r3, #8]
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	68db      	ldr	r3, [r3, #12]
 8015198:	1ad2      	subs	r2, r2, r3
 801519a:	693b      	ldr	r3, [r7, #16]
 801519c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801519e:	693b      	ldr	r3, [r7, #16]
 80151a0:	68da      	ldr	r2, [r3, #12]
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	689b      	ldr	r3, [r3, #8]
 80151a6:	4293      	cmp	r3, r2
 80151a8:	bf28      	it	cs
 80151aa:	4613      	movcs	r3, r2
 80151ac:	461a      	mov	r2, r3
 80151ae:	6879      	ldr	r1, [r7, #4]
 80151b0:	68f8      	ldr	r0, [r7, #12]
 80151b2:	f001 f98a 	bl	80164ca <USBD_CtlContinueRx>
 80151b6:	e07d      	b.n	80152b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80151be:	f003 031f 	and.w	r3, r3, #31
 80151c2:	2b02      	cmp	r3, #2
 80151c4:	d014      	beq.n	80151f0 <USBD_LL_DataOutStage+0x98>
 80151c6:	2b02      	cmp	r3, #2
 80151c8:	d81d      	bhi.n	8015206 <USBD_LL_DataOutStage+0xae>
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d002      	beq.n	80151d4 <USBD_LL_DataOutStage+0x7c>
 80151ce:	2b01      	cmp	r3, #1
 80151d0:	d003      	beq.n	80151da <USBD_LL_DataOutStage+0x82>
 80151d2:	e018      	b.n	8015206 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80151d4:	2300      	movs	r3, #0
 80151d6:	75bb      	strb	r3, [r7, #22]
            break;
 80151d8:	e018      	b.n	801520c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80151e0:	b2db      	uxtb	r3, r3
 80151e2:	4619      	mov	r1, r3
 80151e4:	68f8      	ldr	r0, [r7, #12]
 80151e6:	f000 fa64 	bl	80156b2 <USBD_CoreFindIF>
 80151ea:	4603      	mov	r3, r0
 80151ec:	75bb      	strb	r3, [r7, #22]
            break;
 80151ee:	e00d      	b.n	801520c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80151f6:	b2db      	uxtb	r3, r3
 80151f8:	4619      	mov	r1, r3
 80151fa:	68f8      	ldr	r0, [r7, #12]
 80151fc:	f000 fa66 	bl	80156cc <USBD_CoreFindEP>
 8015200:	4603      	mov	r3, r0
 8015202:	75bb      	strb	r3, [r7, #22]
            break;
 8015204:	e002      	b.n	801520c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015206:	2300      	movs	r3, #0
 8015208:	75bb      	strb	r3, [r7, #22]
            break;
 801520a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801520c:	7dbb      	ldrb	r3, [r7, #22]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d119      	bne.n	8015246 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015218:	b2db      	uxtb	r3, r3
 801521a:	2b03      	cmp	r3, #3
 801521c:	d113      	bne.n	8015246 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801521e:	7dba      	ldrb	r2, [r7, #22]
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	32ae      	adds	r2, #174	; 0xae
 8015224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015228:	691b      	ldr	r3, [r3, #16]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d00b      	beq.n	8015246 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801522e:	7dba      	ldrb	r2, [r7, #22]
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015236:	7dba      	ldrb	r2, [r7, #22]
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	32ae      	adds	r2, #174	; 0xae
 801523c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015240:	691b      	ldr	r3, [r3, #16]
 8015242:	68f8      	ldr	r0, [r7, #12]
 8015244:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015246:	68f8      	ldr	r0, [r7, #12]
 8015248:	f001 f950 	bl	80164ec <USBD_CtlSendStatus>
 801524c:	e032      	b.n	80152b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801524e:	7afb      	ldrb	r3, [r7, #11]
 8015250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015254:	b2db      	uxtb	r3, r3
 8015256:	4619      	mov	r1, r3
 8015258:	68f8      	ldr	r0, [r7, #12]
 801525a:	f000 fa37 	bl	80156cc <USBD_CoreFindEP>
 801525e:	4603      	mov	r3, r0
 8015260:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015262:	7dbb      	ldrb	r3, [r7, #22]
 8015264:	2bff      	cmp	r3, #255	; 0xff
 8015266:	d025      	beq.n	80152b4 <USBD_LL_DataOutStage+0x15c>
 8015268:	7dbb      	ldrb	r3, [r7, #22]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d122      	bne.n	80152b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015274:	b2db      	uxtb	r3, r3
 8015276:	2b03      	cmp	r3, #3
 8015278:	d117      	bne.n	80152aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801527a:	7dba      	ldrb	r2, [r7, #22]
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	32ae      	adds	r2, #174	; 0xae
 8015280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015284:	699b      	ldr	r3, [r3, #24]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d00f      	beq.n	80152aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801528a:	7dba      	ldrb	r2, [r7, #22]
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015292:	7dba      	ldrb	r2, [r7, #22]
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	32ae      	adds	r2, #174	; 0xae
 8015298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801529c:	699b      	ldr	r3, [r3, #24]
 801529e:	7afa      	ldrb	r2, [r7, #11]
 80152a0:	4611      	mov	r1, r2
 80152a2:	68f8      	ldr	r0, [r7, #12]
 80152a4:	4798      	blx	r3
 80152a6:	4603      	mov	r3, r0
 80152a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80152aa:	7dfb      	ldrb	r3, [r7, #23]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d001      	beq.n	80152b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80152b0:	7dfb      	ldrb	r3, [r7, #23]
 80152b2:	e000      	b.n	80152b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80152b4:	2300      	movs	r3, #0
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	3718      	adds	r7, #24
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}

080152be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80152be:	b580      	push	{r7, lr}
 80152c0:	b086      	sub	sp, #24
 80152c2:	af00      	add	r7, sp, #0
 80152c4:	60f8      	str	r0, [r7, #12]
 80152c6:	460b      	mov	r3, r1
 80152c8:	607a      	str	r2, [r7, #4]
 80152ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80152cc:	7afb      	ldrb	r3, [r7, #11]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d16f      	bne.n	80153b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	3314      	adds	r3, #20
 80152d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80152de:	2b02      	cmp	r3, #2
 80152e0:	d15a      	bne.n	8015398 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80152e2:	693b      	ldr	r3, [r7, #16]
 80152e4:	689a      	ldr	r2, [r3, #8]
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	68db      	ldr	r3, [r3, #12]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d914      	bls.n	8015318 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80152ee:	693b      	ldr	r3, [r7, #16]
 80152f0:	689a      	ldr	r2, [r3, #8]
 80152f2:	693b      	ldr	r3, [r7, #16]
 80152f4:	68db      	ldr	r3, [r3, #12]
 80152f6:	1ad2      	subs	r2, r2, r3
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80152fc:	693b      	ldr	r3, [r7, #16]
 80152fe:	689b      	ldr	r3, [r3, #8]
 8015300:	461a      	mov	r2, r3
 8015302:	6879      	ldr	r1, [r7, #4]
 8015304:	68f8      	ldr	r0, [r7, #12]
 8015306:	f001 f8b2 	bl	801646e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801530a:	2300      	movs	r3, #0
 801530c:	2200      	movs	r2, #0
 801530e:	2100      	movs	r1, #0
 8015310:	68f8      	ldr	r0, [r7, #12]
 8015312:	f001 fe09 	bl	8016f28 <USBD_LL_PrepareReceive>
 8015316:	e03f      	b.n	8015398 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	68da      	ldr	r2, [r3, #12]
 801531c:	693b      	ldr	r3, [r7, #16]
 801531e:	689b      	ldr	r3, [r3, #8]
 8015320:	429a      	cmp	r2, r3
 8015322:	d11c      	bne.n	801535e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	685a      	ldr	r2, [r3, #4]
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801532c:	429a      	cmp	r2, r3
 801532e:	d316      	bcc.n	801535e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	685a      	ldr	r2, [r3, #4]
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801533a:	429a      	cmp	r2, r3
 801533c:	d20f      	bcs.n	801535e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801533e:	2200      	movs	r2, #0
 8015340:	2100      	movs	r1, #0
 8015342:	68f8      	ldr	r0, [r7, #12]
 8015344:	f001 f893 	bl	801646e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	2200      	movs	r2, #0
 801534c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015350:	2300      	movs	r3, #0
 8015352:	2200      	movs	r2, #0
 8015354:	2100      	movs	r1, #0
 8015356:	68f8      	ldr	r0, [r7, #12]
 8015358:	f001 fde6 	bl	8016f28 <USBD_LL_PrepareReceive>
 801535c:	e01c      	b.n	8015398 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015364:	b2db      	uxtb	r3, r3
 8015366:	2b03      	cmp	r3, #3
 8015368:	d10f      	bne.n	801538a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015370:	68db      	ldr	r3, [r3, #12]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d009      	beq.n	801538a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2200      	movs	r2, #0
 801537a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015384:	68db      	ldr	r3, [r3, #12]
 8015386:	68f8      	ldr	r0, [r7, #12]
 8015388:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801538a:	2180      	movs	r1, #128	; 0x80
 801538c:	68f8      	ldr	r0, [r7, #12]
 801538e:	f001 fd21 	bl	8016dd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015392:	68f8      	ldr	r0, [r7, #12]
 8015394:	f001 f8bd 	bl	8016512 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d03a      	beq.n	8015418 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80153a2:	68f8      	ldr	r0, [r7, #12]
 80153a4:	f7ff fe42 	bl	801502c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	2200      	movs	r2, #0
 80153ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80153b0:	e032      	b.n	8015418 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80153b2:	7afb      	ldrb	r3, [r7, #11]
 80153b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80153b8:	b2db      	uxtb	r3, r3
 80153ba:	4619      	mov	r1, r3
 80153bc:	68f8      	ldr	r0, [r7, #12]
 80153be:	f000 f985 	bl	80156cc <USBD_CoreFindEP>
 80153c2:	4603      	mov	r3, r0
 80153c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80153c6:	7dfb      	ldrb	r3, [r7, #23]
 80153c8:	2bff      	cmp	r3, #255	; 0xff
 80153ca:	d025      	beq.n	8015418 <USBD_LL_DataInStage+0x15a>
 80153cc:	7dfb      	ldrb	r3, [r7, #23]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d122      	bne.n	8015418 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153d8:	b2db      	uxtb	r3, r3
 80153da:	2b03      	cmp	r3, #3
 80153dc:	d11c      	bne.n	8015418 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80153de:	7dfa      	ldrb	r2, [r7, #23]
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	32ae      	adds	r2, #174	; 0xae
 80153e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153e8:	695b      	ldr	r3, [r3, #20]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d014      	beq.n	8015418 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80153ee:	7dfa      	ldrb	r2, [r7, #23]
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80153f6:	7dfa      	ldrb	r2, [r7, #23]
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	32ae      	adds	r2, #174	; 0xae
 80153fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015400:	695b      	ldr	r3, [r3, #20]
 8015402:	7afa      	ldrb	r2, [r7, #11]
 8015404:	4611      	mov	r1, r2
 8015406:	68f8      	ldr	r0, [r7, #12]
 8015408:	4798      	blx	r3
 801540a:	4603      	mov	r3, r0
 801540c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801540e:	7dbb      	ldrb	r3, [r7, #22]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d001      	beq.n	8015418 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015414:	7dbb      	ldrb	r3, [r7, #22]
 8015416:	e000      	b.n	801541a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015418:	2300      	movs	r3, #0
}
 801541a:	4618      	mov	r0, r3
 801541c:	3718      	adds	r7, #24
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}

08015422 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015422:	b580      	push	{r7, lr}
 8015424:	b084      	sub	sp, #16
 8015426:	af00      	add	r7, sp, #0
 8015428:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801542a:	2300      	movs	r3, #0
 801542c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2201      	movs	r2, #1
 8015432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	2200      	movs	r2, #0
 801543a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2200      	movs	r2, #0
 8015442:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2200      	movs	r2, #0
 8015448:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2200      	movs	r2, #0
 8015450:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801545a:	2b00      	cmp	r3, #0
 801545c:	d014      	beq.n	8015488 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d00e      	beq.n	8015488 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015470:	685b      	ldr	r3, [r3, #4]
 8015472:	687a      	ldr	r2, [r7, #4]
 8015474:	6852      	ldr	r2, [r2, #4]
 8015476:	b2d2      	uxtb	r2, r2
 8015478:	4611      	mov	r1, r2
 801547a:	6878      	ldr	r0, [r7, #4]
 801547c:	4798      	blx	r3
 801547e:	4603      	mov	r3, r0
 8015480:	2b00      	cmp	r3, #0
 8015482:	d001      	beq.n	8015488 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015484:	2303      	movs	r3, #3
 8015486:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015488:	2340      	movs	r3, #64	; 0x40
 801548a:	2200      	movs	r2, #0
 801548c:	2100      	movs	r1, #0
 801548e:	6878      	ldr	r0, [r7, #4]
 8015490:	f001 fc5b 	bl	8016d4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2201      	movs	r2, #1
 8015498:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2240      	movs	r2, #64	; 0x40
 80154a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154a4:	2340      	movs	r3, #64	; 0x40
 80154a6:	2200      	movs	r2, #0
 80154a8:	2180      	movs	r1, #128	; 0x80
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f001 fc4d 	bl	8016d4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2201      	movs	r2, #1
 80154b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2240      	movs	r2, #64	; 0x40
 80154ba:	621a      	str	r2, [r3, #32]

  return ret;
 80154bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80154be:	4618      	mov	r0, r3
 80154c0:	3710      	adds	r7, #16
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}

080154c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80154c6:	b480      	push	{r7}
 80154c8:	b083      	sub	sp, #12
 80154ca:	af00      	add	r7, sp, #0
 80154cc:	6078      	str	r0, [r7, #4]
 80154ce:	460b      	mov	r3, r1
 80154d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	78fa      	ldrb	r2, [r7, #3]
 80154d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80154d8:	2300      	movs	r3, #0
}
 80154da:	4618      	mov	r0, r3
 80154dc:	370c      	adds	r7, #12
 80154de:	46bd      	mov	sp, r7
 80154e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e4:	4770      	bx	lr

080154e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80154e6:	b480      	push	{r7}
 80154e8:	b083      	sub	sp, #12
 80154ea:	af00      	add	r7, sp, #0
 80154ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154f4:	b2db      	uxtb	r3, r3
 80154f6:	2b04      	cmp	r3, #4
 80154f8:	d006      	beq.n	8015508 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015500:	b2da      	uxtb	r2, r3
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2204      	movs	r2, #4
 801550c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015510:	2300      	movs	r3, #0
}
 8015512:	4618      	mov	r0, r3
 8015514:	370c      	adds	r7, #12
 8015516:	46bd      	mov	sp, r7
 8015518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551c:	4770      	bx	lr

0801551e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801551e:	b480      	push	{r7}
 8015520:	b083      	sub	sp, #12
 8015522:	af00      	add	r7, sp, #0
 8015524:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801552c:	b2db      	uxtb	r3, r3
 801552e:	2b04      	cmp	r3, #4
 8015530:	d106      	bne.n	8015540 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015538:	b2da      	uxtb	r2, r3
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015540:	2300      	movs	r3, #0
}
 8015542:	4618      	mov	r0, r3
 8015544:	370c      	adds	r7, #12
 8015546:	46bd      	mov	sp, r7
 8015548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554c:	4770      	bx	lr

0801554e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801554e:	b580      	push	{r7, lr}
 8015550:	b082      	sub	sp, #8
 8015552:	af00      	add	r7, sp, #0
 8015554:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801555c:	b2db      	uxtb	r3, r3
 801555e:	2b03      	cmp	r3, #3
 8015560:	d110      	bne.n	8015584 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015568:	2b00      	cmp	r3, #0
 801556a:	d00b      	beq.n	8015584 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015572:	69db      	ldr	r3, [r3, #28]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d005      	beq.n	8015584 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801557e:	69db      	ldr	r3, [r3, #28]
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015584:	2300      	movs	r3, #0
}
 8015586:	4618      	mov	r0, r3
 8015588:	3708      	adds	r7, #8
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}

0801558e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801558e:	b580      	push	{r7, lr}
 8015590:	b082      	sub	sp, #8
 8015592:	af00      	add	r7, sp, #0
 8015594:	6078      	str	r0, [r7, #4]
 8015596:	460b      	mov	r3, r1
 8015598:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	32ae      	adds	r2, #174	; 0xae
 80155a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d101      	bne.n	80155b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80155ac:	2303      	movs	r3, #3
 80155ae:	e01c      	b.n	80155ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155b6:	b2db      	uxtb	r3, r3
 80155b8:	2b03      	cmp	r3, #3
 80155ba:	d115      	bne.n	80155e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	32ae      	adds	r2, #174	; 0xae
 80155c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155ca:	6a1b      	ldr	r3, [r3, #32]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d00b      	beq.n	80155e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	32ae      	adds	r2, #174	; 0xae
 80155da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155de:	6a1b      	ldr	r3, [r3, #32]
 80155e0:	78fa      	ldrb	r2, [r7, #3]
 80155e2:	4611      	mov	r1, r2
 80155e4:	6878      	ldr	r0, [r7, #4]
 80155e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80155e8:	2300      	movs	r3, #0
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3708      	adds	r7, #8
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bd80      	pop	{r7, pc}

080155f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80155f2:	b580      	push	{r7, lr}
 80155f4:	b082      	sub	sp, #8
 80155f6:	af00      	add	r7, sp, #0
 80155f8:	6078      	str	r0, [r7, #4]
 80155fa:	460b      	mov	r3, r1
 80155fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	32ae      	adds	r2, #174	; 0xae
 8015608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d101      	bne.n	8015614 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015610:	2303      	movs	r3, #3
 8015612:	e01c      	b.n	801564e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801561a:	b2db      	uxtb	r3, r3
 801561c:	2b03      	cmp	r3, #3
 801561e:	d115      	bne.n	801564c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	32ae      	adds	r2, #174	; 0xae
 801562a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015630:	2b00      	cmp	r3, #0
 8015632:	d00b      	beq.n	801564c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	32ae      	adds	r2, #174	; 0xae
 801563e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015644:	78fa      	ldrb	r2, [r7, #3]
 8015646:	4611      	mov	r1, r2
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801564c:	2300      	movs	r3, #0
}
 801564e:	4618      	mov	r0, r3
 8015650:	3708      	adds	r7, #8
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}

08015656 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015656:	b480      	push	{r7}
 8015658:	b083      	sub	sp, #12
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801565e:	2300      	movs	r3, #0
}
 8015660:	4618      	mov	r0, r3
 8015662:	370c      	adds	r7, #12
 8015664:	46bd      	mov	sp, r7
 8015666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566a:	4770      	bx	lr

0801566c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b084      	sub	sp, #16
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015674:	2300      	movs	r3, #0
 8015676:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	2201      	movs	r2, #1
 801567c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015686:	2b00      	cmp	r3, #0
 8015688:	d00e      	beq.n	80156a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015690:	685b      	ldr	r3, [r3, #4]
 8015692:	687a      	ldr	r2, [r7, #4]
 8015694:	6852      	ldr	r2, [r2, #4]
 8015696:	b2d2      	uxtb	r2, r2
 8015698:	4611      	mov	r1, r2
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	4798      	blx	r3
 801569e:	4603      	mov	r3, r0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d001      	beq.n	80156a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80156a4:	2303      	movs	r3, #3
 80156a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80156a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3710      	adds	r7, #16
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}

080156b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80156b2:	b480      	push	{r7}
 80156b4:	b083      	sub	sp, #12
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
 80156ba:	460b      	mov	r3, r1
 80156bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80156be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	370c      	adds	r7, #12
 80156c4:	46bd      	mov	sp, r7
 80156c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ca:	4770      	bx	lr

080156cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80156cc:	b480      	push	{r7}
 80156ce:	b083      	sub	sp, #12
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
 80156d4:	460b      	mov	r3, r1
 80156d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80156d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80156da:	4618      	mov	r0, r3
 80156dc:	370c      	adds	r7, #12
 80156de:	46bd      	mov	sp, r7
 80156e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e4:	4770      	bx	lr

080156e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80156e6:	b580      	push	{r7, lr}
 80156e8:	b086      	sub	sp, #24
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	6078      	str	r0, [r7, #4]
 80156ee:	460b      	mov	r3, r1
 80156f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80156fa:	2300      	movs	r3, #0
 80156fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	885b      	ldrh	r3, [r3, #2]
 8015702:	b29a      	uxth	r2, r3
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	b29b      	uxth	r3, r3
 801570a:	429a      	cmp	r2, r3
 801570c:	d920      	bls.n	8015750 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	b29b      	uxth	r3, r3
 8015714:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015716:	e013      	b.n	8015740 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015718:	f107 030a 	add.w	r3, r7, #10
 801571c:	4619      	mov	r1, r3
 801571e:	6978      	ldr	r0, [r7, #20]
 8015720:	f000 f81b 	bl	801575a <USBD_GetNextDesc>
 8015724:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	785b      	ldrb	r3, [r3, #1]
 801572a:	2b05      	cmp	r3, #5
 801572c:	d108      	bne.n	8015740 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015732:	693b      	ldr	r3, [r7, #16]
 8015734:	789b      	ldrb	r3, [r3, #2]
 8015736:	78fa      	ldrb	r2, [r7, #3]
 8015738:	429a      	cmp	r2, r3
 801573a:	d008      	beq.n	801574e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801573c:	2300      	movs	r3, #0
 801573e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	885b      	ldrh	r3, [r3, #2]
 8015744:	b29a      	uxth	r2, r3
 8015746:	897b      	ldrh	r3, [r7, #10]
 8015748:	429a      	cmp	r2, r3
 801574a:	d8e5      	bhi.n	8015718 <USBD_GetEpDesc+0x32>
 801574c:	e000      	b.n	8015750 <USBD_GetEpDesc+0x6a>
          break;
 801574e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015750:	693b      	ldr	r3, [r7, #16]
}
 8015752:	4618      	mov	r0, r3
 8015754:	3718      	adds	r7, #24
 8015756:	46bd      	mov	sp, r7
 8015758:	bd80      	pop	{r7, pc}

0801575a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801575a:	b480      	push	{r7}
 801575c:	b085      	sub	sp, #20
 801575e:	af00      	add	r7, sp, #0
 8015760:	6078      	str	r0, [r7, #4]
 8015762:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	881a      	ldrh	r2, [r3, #0]
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	781b      	ldrb	r3, [r3, #0]
 8015770:	b29b      	uxth	r3, r3
 8015772:	4413      	add	r3, r2
 8015774:	b29a      	uxth	r2, r3
 8015776:	683b      	ldr	r3, [r7, #0]
 8015778:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	781b      	ldrb	r3, [r3, #0]
 801577e:	461a      	mov	r2, r3
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	4413      	add	r3, r2
 8015784:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015786:	68fb      	ldr	r3, [r7, #12]
}
 8015788:	4618      	mov	r0, r3
 801578a:	3714      	adds	r7, #20
 801578c:	46bd      	mov	sp, r7
 801578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015792:	4770      	bx	lr

08015794 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015794:	b480      	push	{r7}
 8015796:	b087      	sub	sp, #28
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	3301      	adds	r3, #1
 80157aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80157b2:	8a3b      	ldrh	r3, [r7, #16]
 80157b4:	021b      	lsls	r3, r3, #8
 80157b6:	b21a      	sxth	r2, r3
 80157b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80157bc:	4313      	orrs	r3, r2
 80157be:	b21b      	sxth	r3, r3
 80157c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80157c2:	89fb      	ldrh	r3, [r7, #14]
}
 80157c4:	4618      	mov	r0, r3
 80157c6:	371c      	adds	r7, #28
 80157c8:	46bd      	mov	sp, r7
 80157ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ce:	4770      	bx	lr

080157d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80157da:	2300      	movs	r3, #0
 80157dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	781b      	ldrb	r3, [r3, #0]
 80157e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80157e6:	2b40      	cmp	r3, #64	; 0x40
 80157e8:	d005      	beq.n	80157f6 <USBD_StdDevReq+0x26>
 80157ea:	2b40      	cmp	r3, #64	; 0x40
 80157ec:	d857      	bhi.n	801589e <USBD_StdDevReq+0xce>
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d00f      	beq.n	8015812 <USBD_StdDevReq+0x42>
 80157f2:	2b20      	cmp	r3, #32
 80157f4:	d153      	bne.n	801589e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	32ae      	adds	r2, #174	; 0xae
 8015800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015804:	689b      	ldr	r3, [r3, #8]
 8015806:	6839      	ldr	r1, [r7, #0]
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	4798      	blx	r3
 801580c:	4603      	mov	r3, r0
 801580e:	73fb      	strb	r3, [r7, #15]
      break;
 8015810:	e04a      	b.n	80158a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	785b      	ldrb	r3, [r3, #1]
 8015816:	2b09      	cmp	r3, #9
 8015818:	d83b      	bhi.n	8015892 <USBD_StdDevReq+0xc2>
 801581a:	a201      	add	r2, pc, #4	; (adr r2, 8015820 <USBD_StdDevReq+0x50>)
 801581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015820:	08015875 	.word	0x08015875
 8015824:	08015889 	.word	0x08015889
 8015828:	08015893 	.word	0x08015893
 801582c:	0801587f 	.word	0x0801587f
 8015830:	08015893 	.word	0x08015893
 8015834:	08015853 	.word	0x08015853
 8015838:	08015849 	.word	0x08015849
 801583c:	08015893 	.word	0x08015893
 8015840:	0801586b 	.word	0x0801586b
 8015844:	0801585d 	.word	0x0801585d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015848:	6839      	ldr	r1, [r7, #0]
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	f000 fa3c 	bl	8015cc8 <USBD_GetDescriptor>
          break;
 8015850:	e024      	b.n	801589c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015852:	6839      	ldr	r1, [r7, #0]
 8015854:	6878      	ldr	r0, [r7, #4]
 8015856:	f000 fba1 	bl	8015f9c <USBD_SetAddress>
          break;
 801585a:	e01f      	b.n	801589c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801585c:	6839      	ldr	r1, [r7, #0]
 801585e:	6878      	ldr	r0, [r7, #4]
 8015860:	f000 fbe0 	bl	8016024 <USBD_SetConfig>
 8015864:	4603      	mov	r3, r0
 8015866:	73fb      	strb	r3, [r7, #15]
          break;
 8015868:	e018      	b.n	801589c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801586a:	6839      	ldr	r1, [r7, #0]
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f000 fc83 	bl	8016178 <USBD_GetConfig>
          break;
 8015872:	e013      	b.n	801589c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015874:	6839      	ldr	r1, [r7, #0]
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f000 fcb4 	bl	80161e4 <USBD_GetStatus>
          break;
 801587c:	e00e      	b.n	801589c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801587e:	6839      	ldr	r1, [r7, #0]
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f000 fce3 	bl	801624c <USBD_SetFeature>
          break;
 8015886:	e009      	b.n	801589c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015888:	6839      	ldr	r1, [r7, #0]
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f000 fd07 	bl	801629e <USBD_ClrFeature>
          break;
 8015890:	e004      	b.n	801589c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015892:	6839      	ldr	r1, [r7, #0]
 8015894:	6878      	ldr	r0, [r7, #4]
 8015896:	f000 fd5e 	bl	8016356 <USBD_CtlError>
          break;
 801589a:	bf00      	nop
      }
      break;
 801589c:	e004      	b.n	80158a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801589e:	6839      	ldr	r1, [r7, #0]
 80158a0:	6878      	ldr	r0, [r7, #4]
 80158a2:	f000 fd58 	bl	8016356 <USBD_CtlError>
      break;
 80158a6:	bf00      	nop
  }

  return ret;
 80158a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80158aa:	4618      	mov	r0, r3
 80158ac:	3710      	adds	r7, #16
 80158ae:	46bd      	mov	sp, r7
 80158b0:	bd80      	pop	{r7, pc}
 80158b2:	bf00      	nop

080158b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b084      	sub	sp, #16
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80158be:	2300      	movs	r3, #0
 80158c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	781b      	ldrb	r3, [r3, #0]
 80158c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158ca:	2b40      	cmp	r3, #64	; 0x40
 80158cc:	d005      	beq.n	80158da <USBD_StdItfReq+0x26>
 80158ce:	2b40      	cmp	r3, #64	; 0x40
 80158d0:	d852      	bhi.n	8015978 <USBD_StdItfReq+0xc4>
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d001      	beq.n	80158da <USBD_StdItfReq+0x26>
 80158d6:	2b20      	cmp	r3, #32
 80158d8:	d14e      	bne.n	8015978 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158e0:	b2db      	uxtb	r3, r3
 80158e2:	3b01      	subs	r3, #1
 80158e4:	2b02      	cmp	r3, #2
 80158e6:	d840      	bhi.n	801596a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	889b      	ldrh	r3, [r3, #4]
 80158ec:	b2db      	uxtb	r3, r3
 80158ee:	2b01      	cmp	r3, #1
 80158f0:	d836      	bhi.n	8015960 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	889b      	ldrh	r3, [r3, #4]
 80158f6:	b2db      	uxtb	r3, r3
 80158f8:	4619      	mov	r1, r3
 80158fa:	6878      	ldr	r0, [r7, #4]
 80158fc:	f7ff fed9 	bl	80156b2 <USBD_CoreFindIF>
 8015900:	4603      	mov	r3, r0
 8015902:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015904:	7bbb      	ldrb	r3, [r7, #14]
 8015906:	2bff      	cmp	r3, #255	; 0xff
 8015908:	d01d      	beq.n	8015946 <USBD_StdItfReq+0x92>
 801590a:	7bbb      	ldrb	r3, [r7, #14]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d11a      	bne.n	8015946 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015910:	7bba      	ldrb	r2, [r7, #14]
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	32ae      	adds	r2, #174	; 0xae
 8015916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801591a:	689b      	ldr	r3, [r3, #8]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d00f      	beq.n	8015940 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015920:	7bba      	ldrb	r2, [r7, #14]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015928:	7bba      	ldrb	r2, [r7, #14]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	32ae      	adds	r2, #174	; 0xae
 801592e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015932:	689b      	ldr	r3, [r3, #8]
 8015934:	6839      	ldr	r1, [r7, #0]
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	4798      	blx	r3
 801593a:	4603      	mov	r3, r0
 801593c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801593e:	e004      	b.n	801594a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015940:	2303      	movs	r3, #3
 8015942:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015944:	e001      	b.n	801594a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015946:	2303      	movs	r3, #3
 8015948:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	88db      	ldrh	r3, [r3, #6]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d110      	bne.n	8015974 <USBD_StdItfReq+0xc0>
 8015952:	7bfb      	ldrb	r3, [r7, #15]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d10d      	bne.n	8015974 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	f000 fdc7 	bl	80164ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801595e:	e009      	b.n	8015974 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015960:	6839      	ldr	r1, [r7, #0]
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	f000 fcf7 	bl	8016356 <USBD_CtlError>
          break;
 8015968:	e004      	b.n	8015974 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801596a:	6839      	ldr	r1, [r7, #0]
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f000 fcf2 	bl	8016356 <USBD_CtlError>
          break;
 8015972:	e000      	b.n	8015976 <USBD_StdItfReq+0xc2>
          break;
 8015974:	bf00      	nop
      }
      break;
 8015976:	e004      	b.n	8015982 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015978:	6839      	ldr	r1, [r7, #0]
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f000 fceb 	bl	8016356 <USBD_CtlError>
      break;
 8015980:	bf00      	nop
  }

  return ret;
 8015982:	7bfb      	ldrb	r3, [r7, #15]
}
 8015984:	4618      	mov	r0, r3
 8015986:	3710      	adds	r7, #16
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}

0801598c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015996:	2300      	movs	r3, #0
 8015998:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	889b      	ldrh	r3, [r3, #4]
 801599e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	781b      	ldrb	r3, [r3, #0]
 80159a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159a8:	2b40      	cmp	r3, #64	; 0x40
 80159aa:	d007      	beq.n	80159bc <USBD_StdEPReq+0x30>
 80159ac:	2b40      	cmp	r3, #64	; 0x40
 80159ae:	f200 817f 	bhi.w	8015cb0 <USBD_StdEPReq+0x324>
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d02a      	beq.n	8015a0c <USBD_StdEPReq+0x80>
 80159b6:	2b20      	cmp	r3, #32
 80159b8:	f040 817a 	bne.w	8015cb0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80159bc:	7bbb      	ldrb	r3, [r7, #14]
 80159be:	4619      	mov	r1, r3
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f7ff fe83 	bl	80156cc <USBD_CoreFindEP>
 80159c6:	4603      	mov	r3, r0
 80159c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80159ca:	7b7b      	ldrb	r3, [r7, #13]
 80159cc:	2bff      	cmp	r3, #255	; 0xff
 80159ce:	f000 8174 	beq.w	8015cba <USBD_StdEPReq+0x32e>
 80159d2:	7b7b      	ldrb	r3, [r7, #13]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	f040 8170 	bne.w	8015cba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80159da:	7b7a      	ldrb	r2, [r7, #13]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80159e2:	7b7a      	ldrb	r2, [r7, #13]
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	32ae      	adds	r2, #174	; 0xae
 80159e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159ec:	689b      	ldr	r3, [r3, #8]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	f000 8163 	beq.w	8015cba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80159f4:	7b7a      	ldrb	r2, [r7, #13]
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	32ae      	adds	r2, #174	; 0xae
 80159fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159fe:	689b      	ldr	r3, [r3, #8]
 8015a00:	6839      	ldr	r1, [r7, #0]
 8015a02:	6878      	ldr	r0, [r7, #4]
 8015a04:	4798      	blx	r3
 8015a06:	4603      	mov	r3, r0
 8015a08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015a0a:	e156      	b.n	8015cba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	785b      	ldrb	r3, [r3, #1]
 8015a10:	2b03      	cmp	r3, #3
 8015a12:	d008      	beq.n	8015a26 <USBD_StdEPReq+0x9a>
 8015a14:	2b03      	cmp	r3, #3
 8015a16:	f300 8145 	bgt.w	8015ca4 <USBD_StdEPReq+0x318>
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	f000 809b 	beq.w	8015b56 <USBD_StdEPReq+0x1ca>
 8015a20:	2b01      	cmp	r3, #1
 8015a22:	d03c      	beq.n	8015a9e <USBD_StdEPReq+0x112>
 8015a24:	e13e      	b.n	8015ca4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a2c:	b2db      	uxtb	r3, r3
 8015a2e:	2b02      	cmp	r3, #2
 8015a30:	d002      	beq.n	8015a38 <USBD_StdEPReq+0xac>
 8015a32:	2b03      	cmp	r3, #3
 8015a34:	d016      	beq.n	8015a64 <USBD_StdEPReq+0xd8>
 8015a36:	e02c      	b.n	8015a92 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a38:	7bbb      	ldrb	r3, [r7, #14]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d00d      	beq.n	8015a5a <USBD_StdEPReq+0xce>
 8015a3e:	7bbb      	ldrb	r3, [r7, #14]
 8015a40:	2b80      	cmp	r3, #128	; 0x80
 8015a42:	d00a      	beq.n	8015a5a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a44:	7bbb      	ldrb	r3, [r7, #14]
 8015a46:	4619      	mov	r1, r3
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	f001 f9c3 	bl	8016dd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a4e:	2180      	movs	r1, #128	; 0x80
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f001 f9bf 	bl	8016dd4 <USBD_LL_StallEP>
 8015a56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a58:	e020      	b.n	8015a9c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015a5a:	6839      	ldr	r1, [r7, #0]
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	f000 fc7a 	bl	8016356 <USBD_CtlError>
              break;
 8015a62:	e01b      	b.n	8015a9c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	885b      	ldrh	r3, [r3, #2]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d10e      	bne.n	8015a8a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015a6c:	7bbb      	ldrb	r3, [r7, #14]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d00b      	beq.n	8015a8a <USBD_StdEPReq+0xfe>
 8015a72:	7bbb      	ldrb	r3, [r7, #14]
 8015a74:	2b80      	cmp	r3, #128	; 0x80
 8015a76:	d008      	beq.n	8015a8a <USBD_StdEPReq+0xfe>
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	88db      	ldrh	r3, [r3, #6]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d104      	bne.n	8015a8a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a80:	7bbb      	ldrb	r3, [r7, #14]
 8015a82:	4619      	mov	r1, r3
 8015a84:	6878      	ldr	r0, [r7, #4]
 8015a86:	f001 f9a5 	bl	8016dd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f000 fd2e 	bl	80164ec <USBD_CtlSendStatus>

              break;
 8015a90:	e004      	b.n	8015a9c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015a92:	6839      	ldr	r1, [r7, #0]
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f000 fc5e 	bl	8016356 <USBD_CtlError>
              break;
 8015a9a:	bf00      	nop
          }
          break;
 8015a9c:	e107      	b.n	8015cae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015aa4:	b2db      	uxtb	r3, r3
 8015aa6:	2b02      	cmp	r3, #2
 8015aa8:	d002      	beq.n	8015ab0 <USBD_StdEPReq+0x124>
 8015aaa:	2b03      	cmp	r3, #3
 8015aac:	d016      	beq.n	8015adc <USBD_StdEPReq+0x150>
 8015aae:	e04b      	b.n	8015b48 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ab0:	7bbb      	ldrb	r3, [r7, #14]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d00d      	beq.n	8015ad2 <USBD_StdEPReq+0x146>
 8015ab6:	7bbb      	ldrb	r3, [r7, #14]
 8015ab8:	2b80      	cmp	r3, #128	; 0x80
 8015aba:	d00a      	beq.n	8015ad2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015abc:	7bbb      	ldrb	r3, [r7, #14]
 8015abe:	4619      	mov	r1, r3
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f001 f987 	bl	8016dd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015ac6:	2180      	movs	r1, #128	; 0x80
 8015ac8:	6878      	ldr	r0, [r7, #4]
 8015aca:	f001 f983 	bl	8016dd4 <USBD_LL_StallEP>
 8015ace:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015ad0:	e040      	b.n	8015b54 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015ad2:	6839      	ldr	r1, [r7, #0]
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f000 fc3e 	bl	8016356 <USBD_CtlError>
              break;
 8015ada:	e03b      	b.n	8015b54 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	885b      	ldrh	r3, [r3, #2]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d136      	bne.n	8015b52 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015ae4:	7bbb      	ldrb	r3, [r7, #14]
 8015ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d004      	beq.n	8015af8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015aee:	7bbb      	ldrb	r3, [r7, #14]
 8015af0:	4619      	mov	r1, r3
 8015af2:	6878      	ldr	r0, [r7, #4]
 8015af4:	f001 f98d 	bl	8016e12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f000 fcf7 	bl	80164ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015afe:	7bbb      	ldrb	r3, [r7, #14]
 8015b00:	4619      	mov	r1, r3
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f7ff fde2 	bl	80156cc <USBD_CoreFindEP>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b0c:	7b7b      	ldrb	r3, [r7, #13]
 8015b0e:	2bff      	cmp	r3, #255	; 0xff
 8015b10:	d01f      	beq.n	8015b52 <USBD_StdEPReq+0x1c6>
 8015b12:	7b7b      	ldrb	r3, [r7, #13]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d11c      	bne.n	8015b52 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015b18:	7b7a      	ldrb	r2, [r7, #13]
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015b20:	7b7a      	ldrb	r2, [r7, #13]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	32ae      	adds	r2, #174	; 0xae
 8015b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b2a:	689b      	ldr	r3, [r3, #8]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d010      	beq.n	8015b52 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015b30:	7b7a      	ldrb	r2, [r7, #13]
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	32ae      	adds	r2, #174	; 0xae
 8015b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b3a:	689b      	ldr	r3, [r3, #8]
 8015b3c:	6839      	ldr	r1, [r7, #0]
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	4798      	blx	r3
 8015b42:	4603      	mov	r3, r0
 8015b44:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015b46:	e004      	b.n	8015b52 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015b48:	6839      	ldr	r1, [r7, #0]
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	f000 fc03 	bl	8016356 <USBD_CtlError>
              break;
 8015b50:	e000      	b.n	8015b54 <USBD_StdEPReq+0x1c8>
              break;
 8015b52:	bf00      	nop
          }
          break;
 8015b54:	e0ab      	b.n	8015cae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	2b02      	cmp	r3, #2
 8015b60:	d002      	beq.n	8015b68 <USBD_StdEPReq+0x1dc>
 8015b62:	2b03      	cmp	r3, #3
 8015b64:	d032      	beq.n	8015bcc <USBD_StdEPReq+0x240>
 8015b66:	e097      	b.n	8015c98 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b68:	7bbb      	ldrb	r3, [r7, #14]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d007      	beq.n	8015b7e <USBD_StdEPReq+0x1f2>
 8015b6e:	7bbb      	ldrb	r3, [r7, #14]
 8015b70:	2b80      	cmp	r3, #128	; 0x80
 8015b72:	d004      	beq.n	8015b7e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015b74:	6839      	ldr	r1, [r7, #0]
 8015b76:	6878      	ldr	r0, [r7, #4]
 8015b78:	f000 fbed 	bl	8016356 <USBD_CtlError>
                break;
 8015b7c:	e091      	b.n	8015ca2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	da0b      	bge.n	8015b9e <USBD_StdEPReq+0x212>
 8015b86:	7bbb      	ldrb	r3, [r7, #14]
 8015b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b8c:	4613      	mov	r3, r2
 8015b8e:	009b      	lsls	r3, r3, #2
 8015b90:	4413      	add	r3, r2
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	3310      	adds	r3, #16
 8015b96:	687a      	ldr	r2, [r7, #4]
 8015b98:	4413      	add	r3, r2
 8015b9a:	3304      	adds	r3, #4
 8015b9c:	e00b      	b.n	8015bb6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015b9e:	7bbb      	ldrb	r3, [r7, #14]
 8015ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ba4:	4613      	mov	r3, r2
 8015ba6:	009b      	lsls	r3, r3, #2
 8015ba8:	4413      	add	r3, r2
 8015baa:	009b      	lsls	r3, r3, #2
 8015bac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015bb0:	687a      	ldr	r2, [r7, #4]
 8015bb2:	4413      	add	r3, r2
 8015bb4:	3304      	adds	r3, #4
 8015bb6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015bb8:	68bb      	ldr	r3, [r7, #8]
 8015bba:	2200      	movs	r2, #0
 8015bbc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015bbe:	68bb      	ldr	r3, [r7, #8]
 8015bc0:	2202      	movs	r2, #2
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f000 fc37 	bl	8016438 <USBD_CtlSendData>
              break;
 8015bca:	e06a      	b.n	8015ca2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	da11      	bge.n	8015bf8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015bd4:	7bbb      	ldrb	r3, [r7, #14]
 8015bd6:	f003 020f 	and.w	r2, r3, #15
 8015bda:	6879      	ldr	r1, [r7, #4]
 8015bdc:	4613      	mov	r3, r2
 8015bde:	009b      	lsls	r3, r3, #2
 8015be0:	4413      	add	r3, r2
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	440b      	add	r3, r1
 8015be6:	3324      	adds	r3, #36	; 0x24
 8015be8:	881b      	ldrh	r3, [r3, #0]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d117      	bne.n	8015c1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015bee:	6839      	ldr	r1, [r7, #0]
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f000 fbb0 	bl	8016356 <USBD_CtlError>
                  break;
 8015bf6:	e054      	b.n	8015ca2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015bf8:	7bbb      	ldrb	r3, [r7, #14]
 8015bfa:	f003 020f 	and.w	r2, r3, #15
 8015bfe:	6879      	ldr	r1, [r7, #4]
 8015c00:	4613      	mov	r3, r2
 8015c02:	009b      	lsls	r3, r3, #2
 8015c04:	4413      	add	r3, r2
 8015c06:	009b      	lsls	r3, r3, #2
 8015c08:	440b      	add	r3, r1
 8015c0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c0e:	881b      	ldrh	r3, [r3, #0]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d104      	bne.n	8015c1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c14:	6839      	ldr	r1, [r7, #0]
 8015c16:	6878      	ldr	r0, [r7, #4]
 8015c18:	f000 fb9d 	bl	8016356 <USBD_CtlError>
                  break;
 8015c1c:	e041      	b.n	8015ca2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	da0b      	bge.n	8015c3e <USBD_StdEPReq+0x2b2>
 8015c26:	7bbb      	ldrb	r3, [r7, #14]
 8015c28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c2c:	4613      	mov	r3, r2
 8015c2e:	009b      	lsls	r3, r3, #2
 8015c30:	4413      	add	r3, r2
 8015c32:	009b      	lsls	r3, r3, #2
 8015c34:	3310      	adds	r3, #16
 8015c36:	687a      	ldr	r2, [r7, #4]
 8015c38:	4413      	add	r3, r2
 8015c3a:	3304      	adds	r3, #4
 8015c3c:	e00b      	b.n	8015c56 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c3e:	7bbb      	ldrb	r3, [r7, #14]
 8015c40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c44:	4613      	mov	r3, r2
 8015c46:	009b      	lsls	r3, r3, #2
 8015c48:	4413      	add	r3, r2
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c50:	687a      	ldr	r2, [r7, #4]
 8015c52:	4413      	add	r3, r2
 8015c54:	3304      	adds	r3, #4
 8015c56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015c58:	7bbb      	ldrb	r3, [r7, #14]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d002      	beq.n	8015c64 <USBD_StdEPReq+0x2d8>
 8015c5e:	7bbb      	ldrb	r3, [r7, #14]
 8015c60:	2b80      	cmp	r3, #128	; 0x80
 8015c62:	d103      	bne.n	8015c6c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015c64:	68bb      	ldr	r3, [r7, #8]
 8015c66:	2200      	movs	r2, #0
 8015c68:	601a      	str	r2, [r3, #0]
 8015c6a:	e00e      	b.n	8015c8a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015c6c:	7bbb      	ldrb	r3, [r7, #14]
 8015c6e:	4619      	mov	r1, r3
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f001 f8ed 	bl	8016e50 <USBD_LL_IsStallEP>
 8015c76:	4603      	mov	r3, r0
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d003      	beq.n	8015c84 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015c7c:	68bb      	ldr	r3, [r7, #8]
 8015c7e:	2201      	movs	r2, #1
 8015c80:	601a      	str	r2, [r3, #0]
 8015c82:	e002      	b.n	8015c8a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	2200      	movs	r2, #0
 8015c88:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	2202      	movs	r2, #2
 8015c8e:	4619      	mov	r1, r3
 8015c90:	6878      	ldr	r0, [r7, #4]
 8015c92:	f000 fbd1 	bl	8016438 <USBD_CtlSendData>
              break;
 8015c96:	e004      	b.n	8015ca2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015c98:	6839      	ldr	r1, [r7, #0]
 8015c9a:	6878      	ldr	r0, [r7, #4]
 8015c9c:	f000 fb5b 	bl	8016356 <USBD_CtlError>
              break;
 8015ca0:	bf00      	nop
          }
          break;
 8015ca2:	e004      	b.n	8015cae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015ca4:	6839      	ldr	r1, [r7, #0]
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f000 fb55 	bl	8016356 <USBD_CtlError>
          break;
 8015cac:	bf00      	nop
      }
      break;
 8015cae:	e005      	b.n	8015cbc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015cb0:	6839      	ldr	r1, [r7, #0]
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f000 fb4f 	bl	8016356 <USBD_CtlError>
      break;
 8015cb8:	e000      	b.n	8015cbc <USBD_StdEPReq+0x330>
      break;
 8015cba:	bf00      	nop
  }

  return ret;
 8015cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3710      	adds	r7, #16
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}
	...

08015cc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b084      	sub	sp, #16
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	885b      	ldrh	r3, [r3, #2]
 8015ce2:	0a1b      	lsrs	r3, r3, #8
 8015ce4:	b29b      	uxth	r3, r3
 8015ce6:	3b01      	subs	r3, #1
 8015ce8:	2b06      	cmp	r3, #6
 8015cea:	f200 8128 	bhi.w	8015f3e <USBD_GetDescriptor+0x276>
 8015cee:	a201      	add	r2, pc, #4	; (adr r2, 8015cf4 <USBD_GetDescriptor+0x2c>)
 8015cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cf4:	08015d11 	.word	0x08015d11
 8015cf8:	08015d29 	.word	0x08015d29
 8015cfc:	08015d69 	.word	0x08015d69
 8015d00:	08015f3f 	.word	0x08015f3f
 8015d04:	08015f3f 	.word	0x08015f3f
 8015d08:	08015edf 	.word	0x08015edf
 8015d0c:	08015f0b 	.word	0x08015f0b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	687a      	ldr	r2, [r7, #4]
 8015d1a:	7c12      	ldrb	r2, [r2, #16]
 8015d1c:	f107 0108 	add.w	r1, r7, #8
 8015d20:	4610      	mov	r0, r2
 8015d22:	4798      	blx	r3
 8015d24:	60f8      	str	r0, [r7, #12]
      break;
 8015d26:	e112      	b.n	8015f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	7c1b      	ldrb	r3, [r3, #16]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d10d      	bne.n	8015d4c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d38:	f107 0208 	add.w	r2, r7, #8
 8015d3c:	4610      	mov	r0, r2
 8015d3e:	4798      	blx	r3
 8015d40:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	3301      	adds	r3, #1
 8015d46:	2202      	movs	r2, #2
 8015d48:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015d4a:	e100      	b.n	8015f4e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d54:	f107 0208 	add.w	r2, r7, #8
 8015d58:	4610      	mov	r0, r2
 8015d5a:	4798      	blx	r3
 8015d5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	3301      	adds	r3, #1
 8015d62:	2202      	movs	r2, #2
 8015d64:	701a      	strb	r2, [r3, #0]
      break;
 8015d66:	e0f2      	b.n	8015f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	885b      	ldrh	r3, [r3, #2]
 8015d6c:	b2db      	uxtb	r3, r3
 8015d6e:	2b05      	cmp	r3, #5
 8015d70:	f200 80ac 	bhi.w	8015ecc <USBD_GetDescriptor+0x204>
 8015d74:	a201      	add	r2, pc, #4	; (adr r2, 8015d7c <USBD_GetDescriptor+0xb4>)
 8015d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d7a:	bf00      	nop
 8015d7c:	08015d95 	.word	0x08015d95
 8015d80:	08015dc9 	.word	0x08015dc9
 8015d84:	08015dfd 	.word	0x08015dfd
 8015d88:	08015e31 	.word	0x08015e31
 8015d8c:	08015e65 	.word	0x08015e65
 8015d90:	08015e99 	.word	0x08015e99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d9a:	685b      	ldr	r3, [r3, #4]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d00b      	beq.n	8015db8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	687a      	ldr	r2, [r7, #4]
 8015daa:	7c12      	ldrb	r2, [r2, #16]
 8015dac:	f107 0108 	add.w	r1, r7, #8
 8015db0:	4610      	mov	r0, r2
 8015db2:	4798      	blx	r3
 8015db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015db6:	e091      	b.n	8015edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015db8:	6839      	ldr	r1, [r7, #0]
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f000 facb 	bl	8016356 <USBD_CtlError>
            err++;
 8015dc0:	7afb      	ldrb	r3, [r7, #11]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8015dc6:	e089      	b.n	8015edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dce:	689b      	ldr	r3, [r3, #8]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d00b      	beq.n	8015dec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dda:	689b      	ldr	r3, [r3, #8]
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	7c12      	ldrb	r2, [r2, #16]
 8015de0:	f107 0108 	add.w	r1, r7, #8
 8015de4:	4610      	mov	r0, r2
 8015de6:	4798      	blx	r3
 8015de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dea:	e077      	b.n	8015edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015dec:	6839      	ldr	r1, [r7, #0]
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	f000 fab1 	bl	8016356 <USBD_CtlError>
            err++;
 8015df4:	7afb      	ldrb	r3, [r7, #11]
 8015df6:	3301      	adds	r3, #1
 8015df8:	72fb      	strb	r3, [r7, #11]
          break;
 8015dfa:	e06f      	b.n	8015edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e02:	68db      	ldr	r3, [r3, #12]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d00b      	beq.n	8015e20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e0e:	68db      	ldr	r3, [r3, #12]
 8015e10:	687a      	ldr	r2, [r7, #4]
 8015e12:	7c12      	ldrb	r2, [r2, #16]
 8015e14:	f107 0108 	add.w	r1, r7, #8
 8015e18:	4610      	mov	r0, r2
 8015e1a:	4798      	blx	r3
 8015e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e1e:	e05d      	b.n	8015edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e20:	6839      	ldr	r1, [r7, #0]
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f000 fa97 	bl	8016356 <USBD_CtlError>
            err++;
 8015e28:	7afb      	ldrb	r3, [r7, #11]
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8015e2e:	e055      	b.n	8015edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e36:	691b      	ldr	r3, [r3, #16]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d00b      	beq.n	8015e54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e42:	691b      	ldr	r3, [r3, #16]
 8015e44:	687a      	ldr	r2, [r7, #4]
 8015e46:	7c12      	ldrb	r2, [r2, #16]
 8015e48:	f107 0108 	add.w	r1, r7, #8
 8015e4c:	4610      	mov	r0, r2
 8015e4e:	4798      	blx	r3
 8015e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e52:	e043      	b.n	8015edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e54:	6839      	ldr	r1, [r7, #0]
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f000 fa7d 	bl	8016356 <USBD_CtlError>
            err++;
 8015e5c:	7afb      	ldrb	r3, [r7, #11]
 8015e5e:	3301      	adds	r3, #1
 8015e60:	72fb      	strb	r3, [r7, #11]
          break;
 8015e62:	e03b      	b.n	8015edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e6a:	695b      	ldr	r3, [r3, #20]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d00b      	beq.n	8015e88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e76:	695b      	ldr	r3, [r3, #20]
 8015e78:	687a      	ldr	r2, [r7, #4]
 8015e7a:	7c12      	ldrb	r2, [r2, #16]
 8015e7c:	f107 0108 	add.w	r1, r7, #8
 8015e80:	4610      	mov	r0, r2
 8015e82:	4798      	blx	r3
 8015e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e86:	e029      	b.n	8015edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e88:	6839      	ldr	r1, [r7, #0]
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	f000 fa63 	bl	8016356 <USBD_CtlError>
            err++;
 8015e90:	7afb      	ldrb	r3, [r7, #11]
 8015e92:	3301      	adds	r3, #1
 8015e94:	72fb      	strb	r3, [r7, #11]
          break;
 8015e96:	e021      	b.n	8015edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e9e:	699b      	ldr	r3, [r3, #24]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d00b      	beq.n	8015ebc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eaa:	699b      	ldr	r3, [r3, #24]
 8015eac:	687a      	ldr	r2, [r7, #4]
 8015eae:	7c12      	ldrb	r2, [r2, #16]
 8015eb0:	f107 0108 	add.w	r1, r7, #8
 8015eb4:	4610      	mov	r0, r2
 8015eb6:	4798      	blx	r3
 8015eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015eba:	e00f      	b.n	8015edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ebc:	6839      	ldr	r1, [r7, #0]
 8015ebe:	6878      	ldr	r0, [r7, #4]
 8015ec0:	f000 fa49 	bl	8016356 <USBD_CtlError>
            err++;
 8015ec4:	7afb      	ldrb	r3, [r7, #11]
 8015ec6:	3301      	adds	r3, #1
 8015ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8015eca:	e007      	b.n	8015edc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015ecc:	6839      	ldr	r1, [r7, #0]
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f000 fa41 	bl	8016356 <USBD_CtlError>
          err++;
 8015ed4:	7afb      	ldrb	r3, [r7, #11]
 8015ed6:	3301      	adds	r3, #1
 8015ed8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015eda:	bf00      	nop
      }
      break;
 8015edc:	e037      	b.n	8015f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	7c1b      	ldrb	r3, [r3, #16]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d109      	bne.n	8015efa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eee:	f107 0208 	add.w	r2, r7, #8
 8015ef2:	4610      	mov	r0, r2
 8015ef4:	4798      	blx	r3
 8015ef6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015ef8:	e029      	b.n	8015f4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015efa:	6839      	ldr	r1, [r7, #0]
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f000 fa2a 	bl	8016356 <USBD_CtlError>
        err++;
 8015f02:	7afb      	ldrb	r3, [r7, #11]
 8015f04:	3301      	adds	r3, #1
 8015f06:	72fb      	strb	r3, [r7, #11]
      break;
 8015f08:	e021      	b.n	8015f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	7c1b      	ldrb	r3, [r3, #16]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d10d      	bne.n	8015f2e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f1a:	f107 0208 	add.w	r2, r7, #8
 8015f1e:	4610      	mov	r0, r2
 8015f20:	4798      	blx	r3
 8015f22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	3301      	adds	r3, #1
 8015f28:	2207      	movs	r2, #7
 8015f2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f2c:	e00f      	b.n	8015f4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f2e:	6839      	ldr	r1, [r7, #0]
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 fa10 	bl	8016356 <USBD_CtlError>
        err++;
 8015f36:	7afb      	ldrb	r3, [r7, #11]
 8015f38:	3301      	adds	r3, #1
 8015f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8015f3c:	e007      	b.n	8015f4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015f3e:	6839      	ldr	r1, [r7, #0]
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	f000 fa08 	bl	8016356 <USBD_CtlError>
      err++;
 8015f46:	7afb      	ldrb	r3, [r7, #11]
 8015f48:	3301      	adds	r3, #1
 8015f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8015f4c:	bf00      	nop
  }

  if (err != 0U)
 8015f4e:	7afb      	ldrb	r3, [r7, #11]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d11e      	bne.n	8015f92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	88db      	ldrh	r3, [r3, #6]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d016      	beq.n	8015f8a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015f5c:	893b      	ldrh	r3, [r7, #8]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d00e      	beq.n	8015f80 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015f62:	683b      	ldr	r3, [r7, #0]
 8015f64:	88da      	ldrh	r2, [r3, #6]
 8015f66:	893b      	ldrh	r3, [r7, #8]
 8015f68:	4293      	cmp	r3, r2
 8015f6a:	bf28      	it	cs
 8015f6c:	4613      	movcs	r3, r2
 8015f6e:	b29b      	uxth	r3, r3
 8015f70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015f72:	893b      	ldrh	r3, [r7, #8]
 8015f74:	461a      	mov	r2, r3
 8015f76:	68f9      	ldr	r1, [r7, #12]
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f000 fa5d 	bl	8016438 <USBD_CtlSendData>
 8015f7e:	e009      	b.n	8015f94 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015f80:	6839      	ldr	r1, [r7, #0]
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	f000 f9e7 	bl	8016356 <USBD_CtlError>
 8015f88:	e004      	b.n	8015f94 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015f8a:	6878      	ldr	r0, [r7, #4]
 8015f8c:	f000 faae 	bl	80164ec <USBD_CtlSendStatus>
 8015f90:	e000      	b.n	8015f94 <USBD_GetDescriptor+0x2cc>
    return;
 8015f92:	bf00      	nop
  }
}
 8015f94:	3710      	adds	r7, #16
 8015f96:	46bd      	mov	sp, r7
 8015f98:	bd80      	pop	{r7, pc}
 8015f9a:	bf00      	nop

08015f9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b084      	sub	sp, #16
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
 8015fa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	889b      	ldrh	r3, [r3, #4]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d131      	bne.n	8016012 <USBD_SetAddress+0x76>
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	88db      	ldrh	r3, [r3, #6]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d12d      	bne.n	8016012 <USBD_SetAddress+0x76>
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	885b      	ldrh	r3, [r3, #2]
 8015fba:	2b7f      	cmp	r3, #127	; 0x7f
 8015fbc:	d829      	bhi.n	8016012 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	885b      	ldrh	r3, [r3, #2]
 8015fc2:	b2db      	uxtb	r3, r3
 8015fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015fc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fd0:	b2db      	uxtb	r3, r3
 8015fd2:	2b03      	cmp	r3, #3
 8015fd4:	d104      	bne.n	8015fe0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015fd6:	6839      	ldr	r1, [r7, #0]
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f000 f9bc 	bl	8016356 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fde:	e01d      	b.n	801601c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	7bfa      	ldrb	r2, [r7, #15]
 8015fe4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015fe8:	7bfb      	ldrb	r3, [r7, #15]
 8015fea:	4619      	mov	r1, r3
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f000 ff5b 	bl	8016ea8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f000 fa7a 	bl	80164ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015ff8:	7bfb      	ldrb	r3, [r7, #15]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d004      	beq.n	8016008 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	2202      	movs	r2, #2
 8016002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016006:	e009      	b.n	801601c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2201      	movs	r2, #1
 801600c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016010:	e004      	b.n	801601c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016012:	6839      	ldr	r1, [r7, #0]
 8016014:	6878      	ldr	r0, [r7, #4]
 8016016:	f000 f99e 	bl	8016356 <USBD_CtlError>
  }
}
 801601a:	bf00      	nop
 801601c:	bf00      	nop
 801601e:	3710      	adds	r7, #16
 8016020:	46bd      	mov	sp, r7
 8016022:	bd80      	pop	{r7, pc}

08016024 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b084      	sub	sp, #16
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
 801602c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801602e:	2300      	movs	r3, #0
 8016030:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016032:	683b      	ldr	r3, [r7, #0]
 8016034:	885b      	ldrh	r3, [r3, #2]
 8016036:	b2da      	uxtb	r2, r3
 8016038:	4b4e      	ldr	r3, [pc, #312]	; (8016174 <USBD_SetConfig+0x150>)
 801603a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801603c:	4b4d      	ldr	r3, [pc, #308]	; (8016174 <USBD_SetConfig+0x150>)
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	2b01      	cmp	r3, #1
 8016042:	d905      	bls.n	8016050 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016044:	6839      	ldr	r1, [r7, #0]
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f000 f985 	bl	8016356 <USBD_CtlError>
    return USBD_FAIL;
 801604c:	2303      	movs	r3, #3
 801604e:	e08c      	b.n	801616a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016056:	b2db      	uxtb	r3, r3
 8016058:	2b02      	cmp	r3, #2
 801605a:	d002      	beq.n	8016062 <USBD_SetConfig+0x3e>
 801605c:	2b03      	cmp	r3, #3
 801605e:	d029      	beq.n	80160b4 <USBD_SetConfig+0x90>
 8016060:	e075      	b.n	801614e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016062:	4b44      	ldr	r3, [pc, #272]	; (8016174 <USBD_SetConfig+0x150>)
 8016064:	781b      	ldrb	r3, [r3, #0]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d020      	beq.n	80160ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801606a:	4b42      	ldr	r3, [pc, #264]	; (8016174 <USBD_SetConfig+0x150>)
 801606c:	781b      	ldrb	r3, [r3, #0]
 801606e:	461a      	mov	r2, r3
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016074:	4b3f      	ldr	r3, [pc, #252]	; (8016174 <USBD_SetConfig+0x150>)
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	4619      	mov	r1, r3
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	f7fe ffe1 	bl	8015042 <USBD_SetClassConfig>
 8016080:	4603      	mov	r3, r0
 8016082:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016084:	7bfb      	ldrb	r3, [r7, #15]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d008      	beq.n	801609c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801608a:	6839      	ldr	r1, [r7, #0]
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f000 f962 	bl	8016356 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	2202      	movs	r2, #2
 8016096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801609a:	e065      	b.n	8016168 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f000 fa25 	bl	80164ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	2203      	movs	r2, #3
 80160a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80160aa:	e05d      	b.n	8016168 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f000 fa1d 	bl	80164ec <USBD_CtlSendStatus>
      break;
 80160b2:	e059      	b.n	8016168 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80160b4:	4b2f      	ldr	r3, [pc, #188]	; (8016174 <USBD_SetConfig+0x150>)
 80160b6:	781b      	ldrb	r3, [r3, #0]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d112      	bne.n	80160e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2202      	movs	r2, #2
 80160c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80160c4:	4b2b      	ldr	r3, [pc, #172]	; (8016174 <USBD_SetConfig+0x150>)
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	461a      	mov	r2, r3
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80160ce:	4b29      	ldr	r3, [pc, #164]	; (8016174 <USBD_SetConfig+0x150>)
 80160d0:	781b      	ldrb	r3, [r3, #0]
 80160d2:	4619      	mov	r1, r3
 80160d4:	6878      	ldr	r0, [r7, #4]
 80160d6:	f7fe ffd0 	bl	801507a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f000 fa06 	bl	80164ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80160e0:	e042      	b.n	8016168 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80160e2:	4b24      	ldr	r3, [pc, #144]	; (8016174 <USBD_SetConfig+0x150>)
 80160e4:	781b      	ldrb	r3, [r3, #0]
 80160e6:	461a      	mov	r2, r3
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	685b      	ldr	r3, [r3, #4]
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d02a      	beq.n	8016146 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	685b      	ldr	r3, [r3, #4]
 80160f4:	b2db      	uxtb	r3, r3
 80160f6:	4619      	mov	r1, r3
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	f7fe ffbe 	bl	801507a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80160fe:	4b1d      	ldr	r3, [pc, #116]	; (8016174 <USBD_SetConfig+0x150>)
 8016100:	781b      	ldrb	r3, [r3, #0]
 8016102:	461a      	mov	r2, r3
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016108:	4b1a      	ldr	r3, [pc, #104]	; (8016174 <USBD_SetConfig+0x150>)
 801610a:	781b      	ldrb	r3, [r3, #0]
 801610c:	4619      	mov	r1, r3
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f7fe ff97 	bl	8015042 <USBD_SetClassConfig>
 8016114:	4603      	mov	r3, r0
 8016116:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016118:	7bfb      	ldrb	r3, [r7, #15]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d00f      	beq.n	801613e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801611e:	6839      	ldr	r1, [r7, #0]
 8016120:	6878      	ldr	r0, [r7, #4]
 8016122:	f000 f918 	bl	8016356 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	b2db      	uxtb	r3, r3
 801612c:	4619      	mov	r1, r3
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f7fe ffa3 	bl	801507a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2202      	movs	r2, #2
 8016138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801613c:	e014      	b.n	8016168 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801613e:	6878      	ldr	r0, [r7, #4]
 8016140:	f000 f9d4 	bl	80164ec <USBD_CtlSendStatus>
      break;
 8016144:	e010      	b.n	8016168 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f000 f9d0 	bl	80164ec <USBD_CtlSendStatus>
      break;
 801614c:	e00c      	b.n	8016168 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801614e:	6839      	ldr	r1, [r7, #0]
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f000 f900 	bl	8016356 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016156:	4b07      	ldr	r3, [pc, #28]	; (8016174 <USBD_SetConfig+0x150>)
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	4619      	mov	r1, r3
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f7fe ff8c 	bl	801507a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016162:	2303      	movs	r3, #3
 8016164:	73fb      	strb	r3, [r7, #15]
      break;
 8016166:	bf00      	nop
  }

  return ret;
 8016168:	7bfb      	ldrb	r3, [r7, #15]
}
 801616a:	4618      	mov	r0, r3
 801616c:	3710      	adds	r7, #16
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
 8016172:	bf00      	nop
 8016174:	24000d80 	.word	0x24000d80

08016178 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b082      	sub	sp, #8
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
 8016180:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	88db      	ldrh	r3, [r3, #6]
 8016186:	2b01      	cmp	r3, #1
 8016188:	d004      	beq.n	8016194 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801618a:	6839      	ldr	r1, [r7, #0]
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f000 f8e2 	bl	8016356 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016192:	e023      	b.n	80161dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801619a:	b2db      	uxtb	r3, r3
 801619c:	2b02      	cmp	r3, #2
 801619e:	dc02      	bgt.n	80161a6 <USBD_GetConfig+0x2e>
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	dc03      	bgt.n	80161ac <USBD_GetConfig+0x34>
 80161a4:	e015      	b.n	80161d2 <USBD_GetConfig+0x5a>
 80161a6:	2b03      	cmp	r3, #3
 80161a8:	d00b      	beq.n	80161c2 <USBD_GetConfig+0x4a>
 80161aa:	e012      	b.n	80161d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	2200      	movs	r2, #0
 80161b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	3308      	adds	r3, #8
 80161b6:	2201      	movs	r2, #1
 80161b8:	4619      	mov	r1, r3
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f000 f93c 	bl	8016438 <USBD_CtlSendData>
        break;
 80161c0:	e00c      	b.n	80161dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	3304      	adds	r3, #4
 80161c6:	2201      	movs	r2, #1
 80161c8:	4619      	mov	r1, r3
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	f000 f934 	bl	8016438 <USBD_CtlSendData>
        break;
 80161d0:	e004      	b.n	80161dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80161d2:	6839      	ldr	r1, [r7, #0]
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f000 f8be 	bl	8016356 <USBD_CtlError>
        break;
 80161da:	bf00      	nop
}
 80161dc:	bf00      	nop
 80161de:	3708      	adds	r7, #8
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd80      	pop	{r7, pc}

080161e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b082      	sub	sp, #8
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
 80161ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161f4:	b2db      	uxtb	r3, r3
 80161f6:	3b01      	subs	r3, #1
 80161f8:	2b02      	cmp	r3, #2
 80161fa:	d81e      	bhi.n	801623a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80161fc:	683b      	ldr	r3, [r7, #0]
 80161fe:	88db      	ldrh	r3, [r3, #6]
 8016200:	2b02      	cmp	r3, #2
 8016202:	d004      	beq.n	801620e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016204:	6839      	ldr	r1, [r7, #0]
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 f8a5 	bl	8016356 <USBD_CtlError>
        break;
 801620c:	e01a      	b.n	8016244 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2201      	movs	r2, #1
 8016212:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801621a:	2b00      	cmp	r3, #0
 801621c:	d005      	beq.n	801622a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	68db      	ldr	r3, [r3, #12]
 8016222:	f043 0202 	orr.w	r2, r3, #2
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	330c      	adds	r3, #12
 801622e:	2202      	movs	r2, #2
 8016230:	4619      	mov	r1, r3
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	f000 f900 	bl	8016438 <USBD_CtlSendData>
      break;
 8016238:	e004      	b.n	8016244 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801623a:	6839      	ldr	r1, [r7, #0]
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f000 f88a 	bl	8016356 <USBD_CtlError>
      break;
 8016242:	bf00      	nop
  }
}
 8016244:	bf00      	nop
 8016246:	3708      	adds	r7, #8
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}

0801624c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b082      	sub	sp, #8
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
 8016254:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	885b      	ldrh	r3, [r3, #2]
 801625a:	2b01      	cmp	r3, #1
 801625c:	d107      	bne.n	801626e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	2201      	movs	r2, #1
 8016262:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016266:	6878      	ldr	r0, [r7, #4]
 8016268:	f000 f940 	bl	80164ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801626c:	e013      	b.n	8016296 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	885b      	ldrh	r3, [r3, #2]
 8016272:	2b02      	cmp	r3, #2
 8016274:	d10b      	bne.n	801628e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016276:	683b      	ldr	r3, [r7, #0]
 8016278:	889b      	ldrh	r3, [r3, #4]
 801627a:	0a1b      	lsrs	r3, r3, #8
 801627c:	b29b      	uxth	r3, r3
 801627e:	b2da      	uxtb	r2, r3
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016286:	6878      	ldr	r0, [r7, #4]
 8016288:	f000 f930 	bl	80164ec <USBD_CtlSendStatus>
}
 801628c:	e003      	b.n	8016296 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801628e:	6839      	ldr	r1, [r7, #0]
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f000 f860 	bl	8016356 <USBD_CtlError>
}
 8016296:	bf00      	nop
 8016298:	3708      	adds	r7, #8
 801629a:	46bd      	mov	sp, r7
 801629c:	bd80      	pop	{r7, pc}

0801629e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801629e:	b580      	push	{r7, lr}
 80162a0:	b082      	sub	sp, #8
 80162a2:	af00      	add	r7, sp, #0
 80162a4:	6078      	str	r0, [r7, #4]
 80162a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162ae:	b2db      	uxtb	r3, r3
 80162b0:	3b01      	subs	r3, #1
 80162b2:	2b02      	cmp	r3, #2
 80162b4:	d80b      	bhi.n	80162ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	885b      	ldrh	r3, [r3, #2]
 80162ba:	2b01      	cmp	r3, #1
 80162bc:	d10c      	bne.n	80162d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2200      	movs	r2, #0
 80162c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f000 f910 	bl	80164ec <USBD_CtlSendStatus>
      }
      break;
 80162cc:	e004      	b.n	80162d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80162ce:	6839      	ldr	r1, [r7, #0]
 80162d0:	6878      	ldr	r0, [r7, #4]
 80162d2:	f000 f840 	bl	8016356 <USBD_CtlError>
      break;
 80162d6:	e000      	b.n	80162da <USBD_ClrFeature+0x3c>
      break;
 80162d8:	bf00      	nop
  }
}
 80162da:	bf00      	nop
 80162dc:	3708      	adds	r7, #8
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}

080162e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80162e2:	b580      	push	{r7, lr}
 80162e4:	b084      	sub	sp, #16
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	6078      	str	r0, [r7, #4]
 80162ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80162ec:	683b      	ldr	r3, [r7, #0]
 80162ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	781a      	ldrb	r2, [r3, #0]
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	3301      	adds	r3, #1
 80162fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	781a      	ldrb	r2, [r3, #0]
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	3301      	adds	r3, #1
 801630a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801630c:	68f8      	ldr	r0, [r7, #12]
 801630e:	f7ff fa41 	bl	8015794 <SWAPBYTE>
 8016312:	4603      	mov	r3, r0
 8016314:	461a      	mov	r2, r3
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	3301      	adds	r3, #1
 801631e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	3301      	adds	r3, #1
 8016324:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016326:	68f8      	ldr	r0, [r7, #12]
 8016328:	f7ff fa34 	bl	8015794 <SWAPBYTE>
 801632c:	4603      	mov	r3, r0
 801632e:	461a      	mov	r2, r3
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	3301      	adds	r3, #1
 8016338:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	3301      	adds	r3, #1
 801633e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016340:	68f8      	ldr	r0, [r7, #12]
 8016342:	f7ff fa27 	bl	8015794 <SWAPBYTE>
 8016346:	4603      	mov	r3, r0
 8016348:	461a      	mov	r2, r3
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	80da      	strh	r2, [r3, #6]
}
 801634e:	bf00      	nop
 8016350:	3710      	adds	r7, #16
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}

08016356 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016356:	b580      	push	{r7, lr}
 8016358:	b082      	sub	sp, #8
 801635a:	af00      	add	r7, sp, #0
 801635c:	6078      	str	r0, [r7, #4]
 801635e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016360:	2180      	movs	r1, #128	; 0x80
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f000 fd36 	bl	8016dd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016368:	2100      	movs	r1, #0
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f000 fd32 	bl	8016dd4 <USBD_LL_StallEP>
}
 8016370:	bf00      	nop
 8016372:	3708      	adds	r7, #8
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}

08016378 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b086      	sub	sp, #24
 801637c:	af00      	add	r7, sp, #0
 801637e:	60f8      	str	r0, [r7, #12]
 8016380:	60b9      	str	r1, [r7, #8]
 8016382:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016384:	2300      	movs	r3, #0
 8016386:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d036      	beq.n	80163fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016392:	6938      	ldr	r0, [r7, #16]
 8016394:	f000 f836 	bl	8016404 <USBD_GetLen>
 8016398:	4603      	mov	r3, r0
 801639a:	3301      	adds	r3, #1
 801639c:	b29b      	uxth	r3, r3
 801639e:	005b      	lsls	r3, r3, #1
 80163a0:	b29a      	uxth	r2, r3
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80163a6:	7dfb      	ldrb	r3, [r7, #23]
 80163a8:	68ba      	ldr	r2, [r7, #8]
 80163aa:	4413      	add	r3, r2
 80163ac:	687a      	ldr	r2, [r7, #4]
 80163ae:	7812      	ldrb	r2, [r2, #0]
 80163b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80163b2:	7dfb      	ldrb	r3, [r7, #23]
 80163b4:	3301      	adds	r3, #1
 80163b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80163b8:	7dfb      	ldrb	r3, [r7, #23]
 80163ba:	68ba      	ldr	r2, [r7, #8]
 80163bc:	4413      	add	r3, r2
 80163be:	2203      	movs	r2, #3
 80163c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80163c2:	7dfb      	ldrb	r3, [r7, #23]
 80163c4:	3301      	adds	r3, #1
 80163c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80163c8:	e013      	b.n	80163f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80163ca:	7dfb      	ldrb	r3, [r7, #23]
 80163cc:	68ba      	ldr	r2, [r7, #8]
 80163ce:	4413      	add	r3, r2
 80163d0:	693a      	ldr	r2, [r7, #16]
 80163d2:	7812      	ldrb	r2, [r2, #0]
 80163d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	3301      	adds	r3, #1
 80163da:	613b      	str	r3, [r7, #16]
    idx++;
 80163dc:	7dfb      	ldrb	r3, [r7, #23]
 80163de:	3301      	adds	r3, #1
 80163e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80163e2:	7dfb      	ldrb	r3, [r7, #23]
 80163e4:	68ba      	ldr	r2, [r7, #8]
 80163e6:	4413      	add	r3, r2
 80163e8:	2200      	movs	r2, #0
 80163ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80163ec:	7dfb      	ldrb	r3, [r7, #23]
 80163ee:	3301      	adds	r3, #1
 80163f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80163f2:	693b      	ldr	r3, [r7, #16]
 80163f4:	781b      	ldrb	r3, [r3, #0]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d1e7      	bne.n	80163ca <USBD_GetString+0x52>
 80163fa:	e000      	b.n	80163fe <USBD_GetString+0x86>
    return;
 80163fc:	bf00      	nop
  }
}
 80163fe:	3718      	adds	r7, #24
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}

08016404 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016404:	b480      	push	{r7}
 8016406:	b085      	sub	sp, #20
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801640c:	2300      	movs	r3, #0
 801640e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016414:	e005      	b.n	8016422 <USBD_GetLen+0x1e>
  {
    len++;
 8016416:	7bfb      	ldrb	r3, [r7, #15]
 8016418:	3301      	adds	r3, #1
 801641a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	3301      	adds	r3, #1
 8016420:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	781b      	ldrb	r3, [r3, #0]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d1f5      	bne.n	8016416 <USBD_GetLen+0x12>
  }

  return len;
 801642a:	7bfb      	ldrb	r3, [r7, #15]
}
 801642c:	4618      	mov	r0, r3
 801642e:	3714      	adds	r7, #20
 8016430:	46bd      	mov	sp, r7
 8016432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016436:	4770      	bx	lr

08016438 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b084      	sub	sp, #16
 801643c:	af00      	add	r7, sp, #0
 801643e:	60f8      	str	r0, [r7, #12]
 8016440:	60b9      	str	r1, [r7, #8]
 8016442:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	2202      	movs	r2, #2
 8016448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	687a      	ldr	r2, [r7, #4]
 8016450:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	687a      	ldr	r2, [r7, #4]
 8016456:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	68ba      	ldr	r2, [r7, #8]
 801645c:	2100      	movs	r1, #0
 801645e:	68f8      	ldr	r0, [r7, #12]
 8016460:	f000 fd41 	bl	8016ee6 <USBD_LL_Transmit>

  return USBD_OK;
 8016464:	2300      	movs	r3, #0
}
 8016466:	4618      	mov	r0, r3
 8016468:	3710      	adds	r7, #16
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}

0801646e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801646e:	b580      	push	{r7, lr}
 8016470:	b084      	sub	sp, #16
 8016472:	af00      	add	r7, sp, #0
 8016474:	60f8      	str	r0, [r7, #12]
 8016476:	60b9      	str	r1, [r7, #8]
 8016478:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	68ba      	ldr	r2, [r7, #8]
 801647e:	2100      	movs	r1, #0
 8016480:	68f8      	ldr	r0, [r7, #12]
 8016482:	f000 fd30 	bl	8016ee6 <USBD_LL_Transmit>

  return USBD_OK;
 8016486:	2300      	movs	r3, #0
}
 8016488:	4618      	mov	r0, r3
 801648a:	3710      	adds	r7, #16
 801648c:	46bd      	mov	sp, r7
 801648e:	bd80      	pop	{r7, pc}

08016490 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016490:	b580      	push	{r7, lr}
 8016492:	b084      	sub	sp, #16
 8016494:	af00      	add	r7, sp, #0
 8016496:	60f8      	str	r0, [r7, #12]
 8016498:	60b9      	str	r1, [r7, #8]
 801649a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	2203      	movs	r2, #3
 80164a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	687a      	ldr	r2, [r7, #4]
 80164a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	687a      	ldr	r2, [r7, #4]
 80164b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	68ba      	ldr	r2, [r7, #8]
 80164b8:	2100      	movs	r1, #0
 80164ba:	68f8      	ldr	r0, [r7, #12]
 80164bc:	f000 fd34 	bl	8016f28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164c0:	2300      	movs	r3, #0
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	3710      	adds	r7, #16
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd80      	pop	{r7, pc}

080164ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80164ca:	b580      	push	{r7, lr}
 80164cc:	b084      	sub	sp, #16
 80164ce:	af00      	add	r7, sp, #0
 80164d0:	60f8      	str	r0, [r7, #12]
 80164d2:	60b9      	str	r1, [r7, #8]
 80164d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	68ba      	ldr	r2, [r7, #8]
 80164da:	2100      	movs	r1, #0
 80164dc:	68f8      	ldr	r0, [r7, #12]
 80164de:	f000 fd23 	bl	8016f28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164e2:	2300      	movs	r3, #0
}
 80164e4:	4618      	mov	r0, r3
 80164e6:	3710      	adds	r7, #16
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}

080164ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b082      	sub	sp, #8
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	2204      	movs	r2, #4
 80164f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80164fc:	2300      	movs	r3, #0
 80164fe:	2200      	movs	r2, #0
 8016500:	2100      	movs	r1, #0
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f000 fcef 	bl	8016ee6 <USBD_LL_Transmit>

  return USBD_OK;
 8016508:	2300      	movs	r3, #0
}
 801650a:	4618      	mov	r0, r3
 801650c:	3708      	adds	r7, #8
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}

08016512 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016512:	b580      	push	{r7, lr}
 8016514:	b082      	sub	sp, #8
 8016516:	af00      	add	r7, sp, #0
 8016518:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	2205      	movs	r2, #5
 801651e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016522:	2300      	movs	r3, #0
 8016524:	2200      	movs	r2, #0
 8016526:	2100      	movs	r1, #0
 8016528:	6878      	ldr	r0, [r7, #4]
 801652a:	f000 fcfd 	bl	8016f28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801652e:	2300      	movs	r3, #0
}
 8016530:	4618      	mov	r0, r3
 8016532:	3708      	adds	r7, #8
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}

08016538 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016538:	b480      	push	{r7}
 801653a:	b087      	sub	sp, #28
 801653c:	af00      	add	r7, sp, #0
 801653e:	60f8      	str	r0, [r7, #12]
 8016540:	60b9      	str	r1, [r7, #8]
 8016542:	4613      	mov	r3, r2
 8016544:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016546:	2301      	movs	r3, #1
 8016548:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801654a:	2300      	movs	r3, #0
 801654c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801654e:	4b1f      	ldr	r3, [pc, #124]	; (80165cc <FATFS_LinkDriverEx+0x94>)
 8016550:	7a5b      	ldrb	r3, [r3, #9]
 8016552:	b2db      	uxtb	r3, r3
 8016554:	2b00      	cmp	r3, #0
 8016556:	d131      	bne.n	80165bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016558:	4b1c      	ldr	r3, [pc, #112]	; (80165cc <FATFS_LinkDriverEx+0x94>)
 801655a:	7a5b      	ldrb	r3, [r3, #9]
 801655c:	b2db      	uxtb	r3, r3
 801655e:	461a      	mov	r2, r3
 8016560:	4b1a      	ldr	r3, [pc, #104]	; (80165cc <FATFS_LinkDriverEx+0x94>)
 8016562:	2100      	movs	r1, #0
 8016564:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016566:	4b19      	ldr	r3, [pc, #100]	; (80165cc <FATFS_LinkDriverEx+0x94>)
 8016568:	7a5b      	ldrb	r3, [r3, #9]
 801656a:	b2db      	uxtb	r3, r3
 801656c:	4a17      	ldr	r2, [pc, #92]	; (80165cc <FATFS_LinkDriverEx+0x94>)
 801656e:	009b      	lsls	r3, r3, #2
 8016570:	4413      	add	r3, r2
 8016572:	68fa      	ldr	r2, [r7, #12]
 8016574:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016576:	4b15      	ldr	r3, [pc, #84]	; (80165cc <FATFS_LinkDriverEx+0x94>)
 8016578:	7a5b      	ldrb	r3, [r3, #9]
 801657a:	b2db      	uxtb	r3, r3
 801657c:	461a      	mov	r2, r3
 801657e:	4b13      	ldr	r3, [pc, #76]	; (80165cc <FATFS_LinkDriverEx+0x94>)
 8016580:	4413      	add	r3, r2
 8016582:	79fa      	ldrb	r2, [r7, #7]
 8016584:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016586:	4b11      	ldr	r3, [pc, #68]	; (80165cc <FATFS_LinkDriverEx+0x94>)
 8016588:	7a5b      	ldrb	r3, [r3, #9]
 801658a:	b2db      	uxtb	r3, r3
 801658c:	1c5a      	adds	r2, r3, #1
 801658e:	b2d1      	uxtb	r1, r2
 8016590:	4a0e      	ldr	r2, [pc, #56]	; (80165cc <FATFS_LinkDriverEx+0x94>)
 8016592:	7251      	strb	r1, [r2, #9]
 8016594:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016596:	7dbb      	ldrb	r3, [r7, #22]
 8016598:	3330      	adds	r3, #48	; 0x30
 801659a:	b2da      	uxtb	r2, r3
 801659c:	68bb      	ldr	r3, [r7, #8]
 801659e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	3301      	adds	r3, #1
 80165a4:	223a      	movs	r2, #58	; 0x3a
 80165a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	3302      	adds	r3, #2
 80165ac:	222f      	movs	r2, #47	; 0x2f
 80165ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	3303      	adds	r3, #3
 80165b4:	2200      	movs	r2, #0
 80165b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80165b8:	2300      	movs	r3, #0
 80165ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80165bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80165be:	4618      	mov	r0, r3
 80165c0:	371c      	adds	r7, #28
 80165c2:	46bd      	mov	sp, r7
 80165c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c8:	4770      	bx	lr
 80165ca:	bf00      	nop
 80165cc:	24000d84 	.word	0x24000d84

080165d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b082      	sub	sp, #8
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
 80165d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80165da:	2200      	movs	r2, #0
 80165dc:	6839      	ldr	r1, [r7, #0]
 80165de:	6878      	ldr	r0, [r7, #4]
 80165e0:	f7ff ffaa 	bl	8016538 <FATFS_LinkDriverEx>
 80165e4:	4603      	mov	r3, r0
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3708      	adds	r7, #8
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
	...

080165f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80165f4:	2201      	movs	r2, #1
 80165f6:	4913      	ldr	r1, [pc, #76]	; (8016644 <MX_USB_DEVICE_Init+0x54>)
 80165f8:	4813      	ldr	r0, [pc, #76]	; (8016648 <MX_USB_DEVICE_Init+0x58>)
 80165fa:	f7fe fca5 	bl	8014f48 <USBD_Init>
 80165fe:	4603      	mov	r3, r0
 8016600:	2b00      	cmp	r3, #0
 8016602:	d001      	beq.n	8016608 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016604:	f7ec ff90 	bl	8003528 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016608:	4910      	ldr	r1, [pc, #64]	; (801664c <MX_USB_DEVICE_Init+0x5c>)
 801660a:	480f      	ldr	r0, [pc, #60]	; (8016648 <MX_USB_DEVICE_Init+0x58>)
 801660c:	f7fe fccc 	bl	8014fa8 <USBD_RegisterClass>
 8016610:	4603      	mov	r3, r0
 8016612:	2b00      	cmp	r3, #0
 8016614:	d001      	beq.n	801661a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016616:	f7ec ff87 	bl	8003528 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801661a:	490d      	ldr	r1, [pc, #52]	; (8016650 <MX_USB_DEVICE_Init+0x60>)
 801661c:	480a      	ldr	r0, [pc, #40]	; (8016648 <MX_USB_DEVICE_Init+0x58>)
 801661e:	f7fe fbc3 	bl	8014da8 <USBD_CDC_RegisterInterface>
 8016622:	4603      	mov	r3, r0
 8016624:	2b00      	cmp	r3, #0
 8016626:	d001      	beq.n	801662c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016628:	f7ec ff7e 	bl	8003528 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801662c:	4806      	ldr	r0, [pc, #24]	; (8016648 <MX_USB_DEVICE_Init+0x58>)
 801662e:	f7fe fcf1 	bl	8015014 <USBD_Start>
 8016632:	4603      	mov	r3, r0
 8016634:	2b00      	cmp	r3, #0
 8016636:	d001      	beq.n	801663c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016638:	f7ec ff76 	bl	8003528 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801663c:	f7f3 fba4 	bl	8009d88 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016640:	bf00      	nop
 8016642:	bd80      	pop	{r7, pc}
 8016644:	240000b0 	.word	0x240000b0
 8016648:	24000d90 	.word	0x24000d90
 801664c:	2400001c 	.word	0x2400001c
 8016650:	2400009c 	.word	0x2400009c

08016654 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016658:	2200      	movs	r2, #0
 801665a:	4905      	ldr	r1, [pc, #20]	; (8016670 <CDC_Init_HS+0x1c>)
 801665c:	4805      	ldr	r0, [pc, #20]	; (8016674 <CDC_Init_HS+0x20>)
 801665e:	f7fe fbbd 	bl	8014ddc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016662:	4905      	ldr	r1, [pc, #20]	; (8016678 <CDC_Init_HS+0x24>)
 8016664:	4803      	ldr	r0, [pc, #12]	; (8016674 <CDC_Init_HS+0x20>)
 8016666:	f7fe fbdb 	bl	8014e20 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801666a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801666c:	4618      	mov	r0, r3
 801666e:	bd80      	pop	{r7, pc}
 8016670:	2400186c 	.word	0x2400186c
 8016674:	24000d90 	.word	0x24000d90
 8016678:	2400106c 	.word	0x2400106c

0801667c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801667c:	b480      	push	{r7}
 801667e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016680:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016682:	4618      	mov	r0, r3
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr

0801668c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801668c:	b480      	push	{r7}
 801668e:	b083      	sub	sp, #12
 8016690:	af00      	add	r7, sp, #0
 8016692:	4603      	mov	r3, r0
 8016694:	6039      	str	r1, [r7, #0]
 8016696:	71fb      	strb	r3, [r7, #7]
 8016698:	4613      	mov	r3, r2
 801669a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801669c:	79fb      	ldrb	r3, [r7, #7]
 801669e:	2b23      	cmp	r3, #35	; 0x23
 80166a0:	d84a      	bhi.n	8016738 <CDC_Control_HS+0xac>
 80166a2:	a201      	add	r2, pc, #4	; (adr r2, 80166a8 <CDC_Control_HS+0x1c>)
 80166a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166a8:	08016739 	.word	0x08016739
 80166ac:	08016739 	.word	0x08016739
 80166b0:	08016739 	.word	0x08016739
 80166b4:	08016739 	.word	0x08016739
 80166b8:	08016739 	.word	0x08016739
 80166bc:	08016739 	.word	0x08016739
 80166c0:	08016739 	.word	0x08016739
 80166c4:	08016739 	.word	0x08016739
 80166c8:	08016739 	.word	0x08016739
 80166cc:	08016739 	.word	0x08016739
 80166d0:	08016739 	.word	0x08016739
 80166d4:	08016739 	.word	0x08016739
 80166d8:	08016739 	.word	0x08016739
 80166dc:	08016739 	.word	0x08016739
 80166e0:	08016739 	.word	0x08016739
 80166e4:	08016739 	.word	0x08016739
 80166e8:	08016739 	.word	0x08016739
 80166ec:	08016739 	.word	0x08016739
 80166f0:	08016739 	.word	0x08016739
 80166f4:	08016739 	.word	0x08016739
 80166f8:	08016739 	.word	0x08016739
 80166fc:	08016739 	.word	0x08016739
 8016700:	08016739 	.word	0x08016739
 8016704:	08016739 	.word	0x08016739
 8016708:	08016739 	.word	0x08016739
 801670c:	08016739 	.word	0x08016739
 8016710:	08016739 	.word	0x08016739
 8016714:	08016739 	.word	0x08016739
 8016718:	08016739 	.word	0x08016739
 801671c:	08016739 	.word	0x08016739
 8016720:	08016739 	.word	0x08016739
 8016724:	08016739 	.word	0x08016739
 8016728:	08016739 	.word	0x08016739
 801672c:	08016739 	.word	0x08016739
 8016730:	08016739 	.word	0x08016739
 8016734:	08016739 	.word	0x08016739
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016738:	bf00      	nop
  }

  return (USBD_OK);
 801673a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801673c:	4618      	mov	r0, r3
 801673e:	370c      	adds	r7, #12
 8016740:	46bd      	mov	sp, r7
 8016742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016746:	4770      	bx	lr

08016748 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016748:	b580      	push	{r7, lr}
 801674a:	b082      	sub	sp, #8
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]
 8016750:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016752:	6879      	ldr	r1, [r7, #4]
 8016754:	4805      	ldr	r0, [pc, #20]	; (801676c <CDC_Receive_HS+0x24>)
 8016756:	f7fe fb63 	bl	8014e20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801675a:	4804      	ldr	r0, [pc, #16]	; (801676c <CDC_Receive_HS+0x24>)
 801675c:	f7fe fbbe 	bl	8014edc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016760:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016762:	4618      	mov	r0, r3
 8016764:	3708      	adds	r7, #8
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	24000d90 	.word	0x24000d90

08016770 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b084      	sub	sp, #16
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
 8016778:	460b      	mov	r3, r1
 801677a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801677c:	2300      	movs	r3, #0
 801677e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016780:	4b0d      	ldr	r3, [pc, #52]	; (80167b8 <CDC_Transmit_HS+0x48>)
 8016782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016786:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016788:	68bb      	ldr	r3, [r7, #8]
 801678a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801678e:	2b00      	cmp	r3, #0
 8016790:	d001      	beq.n	8016796 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016792:	2301      	movs	r3, #1
 8016794:	e00b      	b.n	80167ae <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016796:	887b      	ldrh	r3, [r7, #2]
 8016798:	461a      	mov	r2, r3
 801679a:	6879      	ldr	r1, [r7, #4]
 801679c:	4806      	ldr	r0, [pc, #24]	; (80167b8 <CDC_Transmit_HS+0x48>)
 801679e:	f7fe fb1d 	bl	8014ddc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80167a2:	4805      	ldr	r0, [pc, #20]	; (80167b8 <CDC_Transmit_HS+0x48>)
 80167a4:	f7fe fb5a 	bl	8014e5c <USBD_CDC_TransmitPacket>
 80167a8:	4603      	mov	r3, r0
 80167aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80167ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80167ae:	4618      	mov	r0, r3
 80167b0:	3710      	adds	r7, #16
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}
 80167b6:	bf00      	nop
 80167b8:	24000d90 	.word	0x24000d90

080167bc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80167bc:	b480      	push	{r7}
 80167be:	b087      	sub	sp, #28
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	60f8      	str	r0, [r7, #12]
 80167c4:	60b9      	str	r1, [r7, #8]
 80167c6:	4613      	mov	r3, r2
 80167c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80167ca:	2300      	movs	r3, #0
 80167cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80167ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80167d2:	4618      	mov	r0, r3
 80167d4:	371c      	adds	r7, #28
 80167d6:	46bd      	mov	sp, r7
 80167d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167dc:	4770      	bx	lr
	...

080167e0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167e0:	b480      	push	{r7}
 80167e2:	b083      	sub	sp, #12
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	4603      	mov	r3, r0
 80167e8:	6039      	str	r1, [r7, #0]
 80167ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80167ec:	683b      	ldr	r3, [r7, #0]
 80167ee:	2212      	movs	r2, #18
 80167f0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80167f2:	4b03      	ldr	r3, [pc, #12]	; (8016800 <USBD_HS_DeviceDescriptor+0x20>)
}
 80167f4:	4618      	mov	r0, r3
 80167f6:	370c      	adds	r7, #12
 80167f8:	46bd      	mov	sp, r7
 80167fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fe:	4770      	bx	lr
 8016800:	240000cc 	.word	0x240000cc

08016804 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016804:	b480      	push	{r7}
 8016806:	b083      	sub	sp, #12
 8016808:	af00      	add	r7, sp, #0
 801680a:	4603      	mov	r3, r0
 801680c:	6039      	str	r1, [r7, #0]
 801680e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016810:	683b      	ldr	r3, [r7, #0]
 8016812:	2204      	movs	r2, #4
 8016814:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016816:	4b03      	ldr	r3, [pc, #12]	; (8016824 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016818:	4618      	mov	r0, r3
 801681a:	370c      	adds	r7, #12
 801681c:	46bd      	mov	sp, r7
 801681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016822:	4770      	bx	lr
 8016824:	240000e0 	.word	0x240000e0

08016828 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b082      	sub	sp, #8
 801682c:	af00      	add	r7, sp, #0
 801682e:	4603      	mov	r3, r0
 8016830:	6039      	str	r1, [r7, #0]
 8016832:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016834:	79fb      	ldrb	r3, [r7, #7]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d105      	bne.n	8016846 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801683a:	683a      	ldr	r2, [r7, #0]
 801683c:	4907      	ldr	r1, [pc, #28]	; (801685c <USBD_HS_ProductStrDescriptor+0x34>)
 801683e:	4808      	ldr	r0, [pc, #32]	; (8016860 <USBD_HS_ProductStrDescriptor+0x38>)
 8016840:	f7ff fd9a 	bl	8016378 <USBD_GetString>
 8016844:	e004      	b.n	8016850 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016846:	683a      	ldr	r2, [r7, #0]
 8016848:	4904      	ldr	r1, [pc, #16]	; (801685c <USBD_HS_ProductStrDescriptor+0x34>)
 801684a:	4805      	ldr	r0, [pc, #20]	; (8016860 <USBD_HS_ProductStrDescriptor+0x38>)
 801684c:	f7ff fd94 	bl	8016378 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016850:	4b02      	ldr	r3, [pc, #8]	; (801685c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016852:	4618      	mov	r0, r3
 8016854:	3708      	adds	r7, #8
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
 801685a:	bf00      	nop
 801685c:	2400206c 	.word	0x2400206c
 8016860:	0801c764 	.word	0x0801c764

08016864 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b082      	sub	sp, #8
 8016868:	af00      	add	r7, sp, #0
 801686a:	4603      	mov	r3, r0
 801686c:	6039      	str	r1, [r7, #0]
 801686e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016870:	683a      	ldr	r2, [r7, #0]
 8016872:	4904      	ldr	r1, [pc, #16]	; (8016884 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016874:	4804      	ldr	r0, [pc, #16]	; (8016888 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016876:	f7ff fd7f 	bl	8016378 <USBD_GetString>
  return USBD_StrDesc;
 801687a:	4b02      	ldr	r3, [pc, #8]	; (8016884 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801687c:	4618      	mov	r0, r3
 801687e:	3708      	adds	r7, #8
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}
 8016884:	2400206c 	.word	0x2400206c
 8016888:	0801c780 	.word	0x0801c780

0801688c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	4603      	mov	r3, r0
 8016894:	6039      	str	r1, [r7, #0]
 8016896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	221a      	movs	r2, #26
 801689c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801689e:	f000 f843 	bl	8016928 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80168a2:	4b02      	ldr	r3, [pc, #8]	; (80168ac <USBD_HS_SerialStrDescriptor+0x20>)
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	3708      	adds	r7, #8
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}
 80168ac:	240000e4 	.word	0x240000e4

080168b0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	4603      	mov	r3, r0
 80168b8:	6039      	str	r1, [r7, #0]
 80168ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80168bc:	79fb      	ldrb	r3, [r7, #7]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d105      	bne.n	80168ce <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80168c2:	683a      	ldr	r2, [r7, #0]
 80168c4:	4907      	ldr	r1, [pc, #28]	; (80168e4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80168c6:	4808      	ldr	r0, [pc, #32]	; (80168e8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80168c8:	f7ff fd56 	bl	8016378 <USBD_GetString>
 80168cc:	e004      	b.n	80168d8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80168ce:	683a      	ldr	r2, [r7, #0]
 80168d0:	4904      	ldr	r1, [pc, #16]	; (80168e4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80168d2:	4805      	ldr	r0, [pc, #20]	; (80168e8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80168d4:	f7ff fd50 	bl	8016378 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168d8:	4b02      	ldr	r3, [pc, #8]	; (80168e4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80168da:	4618      	mov	r0, r3
 80168dc:	3708      	adds	r7, #8
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}
 80168e2:	bf00      	nop
 80168e4:	2400206c 	.word	0x2400206c
 80168e8:	0801c784 	.word	0x0801c784

080168ec <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b082      	sub	sp, #8
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	4603      	mov	r3, r0
 80168f4:	6039      	str	r1, [r7, #0]
 80168f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80168f8:	79fb      	ldrb	r3, [r7, #7]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d105      	bne.n	801690a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80168fe:	683a      	ldr	r2, [r7, #0]
 8016900:	4907      	ldr	r1, [pc, #28]	; (8016920 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016902:	4808      	ldr	r0, [pc, #32]	; (8016924 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016904:	f7ff fd38 	bl	8016378 <USBD_GetString>
 8016908:	e004      	b.n	8016914 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801690a:	683a      	ldr	r2, [r7, #0]
 801690c:	4904      	ldr	r1, [pc, #16]	; (8016920 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801690e:	4805      	ldr	r0, [pc, #20]	; (8016924 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016910:	f7ff fd32 	bl	8016378 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016914:	4b02      	ldr	r3, [pc, #8]	; (8016920 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016916:	4618      	mov	r0, r3
 8016918:	3708      	adds	r7, #8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop
 8016920:	2400206c 	.word	0x2400206c
 8016924:	0801c790 	.word	0x0801c790

08016928 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b084      	sub	sp, #16
 801692c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801692e:	4b0f      	ldr	r3, [pc, #60]	; (801696c <Get_SerialNum+0x44>)
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016934:	4b0e      	ldr	r3, [pc, #56]	; (8016970 <Get_SerialNum+0x48>)
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801693a:	4b0e      	ldr	r3, [pc, #56]	; (8016974 <Get_SerialNum+0x4c>)
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016940:	68fa      	ldr	r2, [r7, #12]
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	4413      	add	r3, r2
 8016946:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d009      	beq.n	8016962 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801694e:	2208      	movs	r2, #8
 8016950:	4909      	ldr	r1, [pc, #36]	; (8016978 <Get_SerialNum+0x50>)
 8016952:	68f8      	ldr	r0, [r7, #12]
 8016954:	f000 f814 	bl	8016980 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016958:	2204      	movs	r2, #4
 801695a:	4908      	ldr	r1, [pc, #32]	; (801697c <Get_SerialNum+0x54>)
 801695c:	68b8      	ldr	r0, [r7, #8]
 801695e:	f000 f80f 	bl	8016980 <IntToUnicode>
  }
}
 8016962:	bf00      	nop
 8016964:	3710      	adds	r7, #16
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}
 801696a:	bf00      	nop
 801696c:	1ff1e800 	.word	0x1ff1e800
 8016970:	1ff1e804 	.word	0x1ff1e804
 8016974:	1ff1e808 	.word	0x1ff1e808
 8016978:	240000e6 	.word	0x240000e6
 801697c:	240000f6 	.word	0x240000f6

08016980 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016980:	b480      	push	{r7}
 8016982:	b087      	sub	sp, #28
 8016984:	af00      	add	r7, sp, #0
 8016986:	60f8      	str	r0, [r7, #12]
 8016988:	60b9      	str	r1, [r7, #8]
 801698a:	4613      	mov	r3, r2
 801698c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801698e:	2300      	movs	r3, #0
 8016990:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016992:	2300      	movs	r3, #0
 8016994:	75fb      	strb	r3, [r7, #23]
 8016996:	e027      	b.n	80169e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	0f1b      	lsrs	r3, r3, #28
 801699c:	2b09      	cmp	r3, #9
 801699e:	d80b      	bhi.n	80169b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	0f1b      	lsrs	r3, r3, #28
 80169a4:	b2da      	uxtb	r2, r3
 80169a6:	7dfb      	ldrb	r3, [r7, #23]
 80169a8:	005b      	lsls	r3, r3, #1
 80169aa:	4619      	mov	r1, r3
 80169ac:	68bb      	ldr	r3, [r7, #8]
 80169ae:	440b      	add	r3, r1
 80169b0:	3230      	adds	r2, #48	; 0x30
 80169b2:	b2d2      	uxtb	r2, r2
 80169b4:	701a      	strb	r2, [r3, #0]
 80169b6:	e00a      	b.n	80169ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	0f1b      	lsrs	r3, r3, #28
 80169bc:	b2da      	uxtb	r2, r3
 80169be:	7dfb      	ldrb	r3, [r7, #23]
 80169c0:	005b      	lsls	r3, r3, #1
 80169c2:	4619      	mov	r1, r3
 80169c4:	68bb      	ldr	r3, [r7, #8]
 80169c6:	440b      	add	r3, r1
 80169c8:	3237      	adds	r2, #55	; 0x37
 80169ca:	b2d2      	uxtb	r2, r2
 80169cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	011b      	lsls	r3, r3, #4
 80169d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80169d4:	7dfb      	ldrb	r3, [r7, #23]
 80169d6:	005b      	lsls	r3, r3, #1
 80169d8:	3301      	adds	r3, #1
 80169da:	68ba      	ldr	r2, [r7, #8]
 80169dc:	4413      	add	r3, r2
 80169de:	2200      	movs	r2, #0
 80169e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80169e2:	7dfb      	ldrb	r3, [r7, #23]
 80169e4:	3301      	adds	r3, #1
 80169e6:	75fb      	strb	r3, [r7, #23]
 80169e8:	7dfa      	ldrb	r2, [r7, #23]
 80169ea:	79fb      	ldrb	r3, [r7, #7]
 80169ec:	429a      	cmp	r2, r3
 80169ee:	d3d3      	bcc.n	8016998 <IntToUnicode+0x18>
  }
}
 80169f0:	bf00      	nop
 80169f2:	bf00      	nop
 80169f4:	371c      	adds	r7, #28
 80169f6:	46bd      	mov	sp, r7
 80169f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fc:	4770      	bx	lr
	...

08016a00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b0b2      	sub	sp, #200	; 0xc8
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016a08:	f107 0310 	add.w	r3, r7, #16
 8016a0c:	22b8      	movs	r2, #184	; 0xb8
 8016a0e:	2100      	movs	r1, #0
 8016a10:	4618      	mov	r0, r3
 8016a12:	f001 fa64 	bl	8017ede <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	4a1a      	ldr	r2, [pc, #104]	; (8016a84 <HAL_PCD_MspInit+0x84>)
 8016a1c:	4293      	cmp	r3, r2
 8016a1e:	d12c      	bne.n	8016a7a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016a20:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016a24:	f04f 0300 	mov.w	r3, #0
 8016a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016a2c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016a30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016a34:	f107 0310 	add.w	r3, r7, #16
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f7f4 f985 	bl	800ad48 <HAL_RCCEx_PeriphCLKConfig>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d001      	beq.n	8016a48 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016a44:	f7ec fd70 	bl	8003528 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016a48:	f7f3 f99e 	bl	8009d88 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016a4c:	4b0e      	ldr	r3, [pc, #56]	; (8016a88 <HAL_PCD_MspInit+0x88>)
 8016a4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016a52:	4a0d      	ldr	r2, [pc, #52]	; (8016a88 <HAL_PCD_MspInit+0x88>)
 8016a54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016a58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016a5c:	4b0a      	ldr	r3, [pc, #40]	; (8016a88 <HAL_PCD_MspInit+0x88>)
 8016a5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016a66:	60fb      	str	r3, [r7, #12]
 8016a68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	2100      	movs	r1, #0
 8016a6e:	204d      	movs	r0, #77	; 0x4d
 8016a70:	f7ef fb25 	bl	80060be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016a74:	204d      	movs	r0, #77	; 0x4d
 8016a76:	f7ef fb3c 	bl	80060f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016a7a:	bf00      	nop
 8016a7c:	37c8      	adds	r7, #200	; 0xc8
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	bd80      	pop	{r7, pc}
 8016a82:	bf00      	nop
 8016a84:	40040000 	.word	0x40040000
 8016a88:	58024400 	.word	0x58024400

08016a8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b082      	sub	sp, #8
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016aa0:	4619      	mov	r1, r3
 8016aa2:	4610      	mov	r0, r2
 8016aa4:	f7fe fb03 	bl	80150ae <USBD_LL_SetupStage>
}
 8016aa8:	bf00      	nop
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b082      	sub	sp, #8
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	460b      	mov	r3, r1
 8016aba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016ac2:	78fa      	ldrb	r2, [r7, #3]
 8016ac4:	6879      	ldr	r1, [r7, #4]
 8016ac6:	4613      	mov	r3, r2
 8016ac8:	00db      	lsls	r3, r3, #3
 8016aca:	4413      	add	r3, r2
 8016acc:	009b      	lsls	r3, r3, #2
 8016ace:	440b      	add	r3, r1
 8016ad0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016ad4:	681a      	ldr	r2, [r3, #0]
 8016ad6:	78fb      	ldrb	r3, [r7, #3]
 8016ad8:	4619      	mov	r1, r3
 8016ada:	f7fe fb3d 	bl	8015158 <USBD_LL_DataOutStage>
}
 8016ade:	bf00      	nop
 8016ae0:	3708      	adds	r7, #8
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bd80      	pop	{r7, pc}

08016ae6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ae6:	b580      	push	{r7, lr}
 8016ae8:	b082      	sub	sp, #8
 8016aea:	af00      	add	r7, sp, #0
 8016aec:	6078      	str	r0, [r7, #4]
 8016aee:	460b      	mov	r3, r1
 8016af0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016af8:	78fa      	ldrb	r2, [r7, #3]
 8016afa:	6879      	ldr	r1, [r7, #4]
 8016afc:	4613      	mov	r3, r2
 8016afe:	00db      	lsls	r3, r3, #3
 8016b00:	4413      	add	r3, r2
 8016b02:	009b      	lsls	r3, r3, #2
 8016b04:	440b      	add	r3, r1
 8016b06:	3348      	adds	r3, #72	; 0x48
 8016b08:	681a      	ldr	r2, [r3, #0]
 8016b0a:	78fb      	ldrb	r3, [r7, #3]
 8016b0c:	4619      	mov	r1, r3
 8016b0e:	f7fe fbd6 	bl	80152be <USBD_LL_DataInStage>
}
 8016b12:	bf00      	nop
 8016b14:	3708      	adds	r7, #8
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}

08016b1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b1a:	b580      	push	{r7, lr}
 8016b1c:	b082      	sub	sp, #8
 8016b1e:	af00      	add	r7, sp, #0
 8016b20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7fe fd10 	bl	801554e <USBD_LL_SOF>
}
 8016b2e:	bf00      	nop
 8016b30:	3708      	adds	r7, #8
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}

08016b36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b36:	b580      	push	{r7, lr}
 8016b38:	b084      	sub	sp, #16
 8016b3a:	af00      	add	r7, sp, #0
 8016b3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b3e:	2301      	movs	r3, #1
 8016b40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	691b      	ldr	r3, [r3, #16]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d102      	bne.n	8016b50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	73fb      	strb	r3, [r7, #15]
 8016b4e:	e008      	b.n	8016b62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	691b      	ldr	r3, [r3, #16]
 8016b54:	2b02      	cmp	r3, #2
 8016b56:	d102      	bne.n	8016b5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016b58:	2301      	movs	r3, #1
 8016b5a:	73fb      	strb	r3, [r7, #15]
 8016b5c:	e001      	b.n	8016b62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016b5e:	f7ec fce3 	bl	8003528 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b68:	7bfa      	ldrb	r2, [r7, #15]
 8016b6a:	4611      	mov	r1, r2
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7fe fcaa 	bl	80154c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7fe fc52 	bl	8015422 <USBD_LL_Reset>
}
 8016b7e:	bf00      	nop
 8016b80:	3710      	adds	r7, #16
 8016b82:	46bd      	mov	sp, r7
 8016b84:	bd80      	pop	{r7, pc}
	...

08016b88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7fe fca5 	bl	80154e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	687a      	ldr	r2, [r7, #4]
 8016ba8:	6812      	ldr	r2, [r2, #0]
 8016baa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016bae:	f043 0301 	orr.w	r3, r3, #1
 8016bb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	6a1b      	ldr	r3, [r3, #32]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d005      	beq.n	8016bc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016bbc:	4b04      	ldr	r3, [pc, #16]	; (8016bd0 <HAL_PCD_SuspendCallback+0x48>)
 8016bbe:	691b      	ldr	r3, [r3, #16]
 8016bc0:	4a03      	ldr	r2, [pc, #12]	; (8016bd0 <HAL_PCD_SuspendCallback+0x48>)
 8016bc2:	f043 0306 	orr.w	r3, r3, #6
 8016bc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016bc8:	bf00      	nop
 8016bca:	3708      	adds	r7, #8
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}
 8016bd0:	e000ed00 	.word	0xe000ed00

08016bd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b082      	sub	sp, #8
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7fe fc9b 	bl	801551e <USBD_LL_Resume>
}
 8016be8:	bf00      	nop
 8016bea:	3708      	adds	r7, #8
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}

08016bf0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b082      	sub	sp, #8
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c02:	78fa      	ldrb	r2, [r7, #3]
 8016c04:	4611      	mov	r1, r2
 8016c06:	4618      	mov	r0, r3
 8016c08:	f7fe fcf3 	bl	80155f2 <USBD_LL_IsoOUTIncomplete>
}
 8016c0c:	bf00      	nop
 8016c0e:	3708      	adds	r7, #8
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bd80      	pop	{r7, pc}

08016c14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c14:	b580      	push	{r7, lr}
 8016c16:	b082      	sub	sp, #8
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	6078      	str	r0, [r7, #4]
 8016c1c:	460b      	mov	r3, r1
 8016c1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c26:	78fa      	ldrb	r2, [r7, #3]
 8016c28:	4611      	mov	r1, r2
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f7fe fcaf 	bl	801558e <USBD_LL_IsoINIncomplete>
}
 8016c30:	bf00      	nop
 8016c32:	3708      	adds	r7, #8
 8016c34:	46bd      	mov	sp, r7
 8016c36:	bd80      	pop	{r7, pc}

08016c38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b082      	sub	sp, #8
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7fe fd05 	bl	8015656 <USBD_LL_DevConnected>
}
 8016c4c:	bf00      	nop
 8016c4e:	3708      	adds	r7, #8
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}

08016c54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c62:	4618      	mov	r0, r3
 8016c64:	f7fe fd02 	bl	801566c <USBD_LL_DevDisconnected>
}
 8016c68:	bf00      	nop
 8016c6a:	3708      	adds	r7, #8
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	781b      	ldrb	r3, [r3, #0]
 8016c7c:	2b01      	cmp	r3, #1
 8016c7e:	d140      	bne.n	8016d02 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016c80:	4a22      	ldr	r2, [pc, #136]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	4a20      	ldr	r2, [pc, #128]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016c8c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016c90:	4b1e      	ldr	r3, [pc, #120]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016c92:	4a1f      	ldr	r2, [pc, #124]	; (8016d10 <USBD_LL_Init+0xa0>)
 8016c94:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016c96:	4b1d      	ldr	r3, [pc, #116]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016c98:	2209      	movs	r2, #9
 8016c9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016c9c:	4b1b      	ldr	r3, [pc, #108]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016c9e:	2202      	movs	r2, #2
 8016ca0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016ca2:	4b1a      	ldr	r3, [pc, #104]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016ca8:	4b18      	ldr	r3, [pc, #96]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016caa:	2202      	movs	r2, #2
 8016cac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016cae:	4b17      	ldr	r3, [pc, #92]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016cb4:	4b15      	ldr	r3, [pc, #84]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016cba:	4b14      	ldr	r3, [pc, #80]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016cc0:	4b12      	ldr	r3, [pc, #72]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016cc6:	4b11      	ldr	r3, [pc, #68]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016cc8:	2200      	movs	r2, #0
 8016cca:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016ccc:	4b0f      	ldr	r3, [pc, #60]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016cce:	2200      	movs	r2, #0
 8016cd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016cd2:	480e      	ldr	r0, [pc, #56]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016cd4:	f7f1 fd65 	bl	80087a2 <HAL_PCD_Init>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d001      	beq.n	8016ce2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016cde:	f7ec fc23 	bl	8003528 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016ce6:	4809      	ldr	r0, [pc, #36]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016ce8:	f7f2 ffd3 	bl	8009c92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016cec:	2280      	movs	r2, #128	; 0x80
 8016cee:	2100      	movs	r1, #0
 8016cf0:	4806      	ldr	r0, [pc, #24]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016cf2:	f7f2 ff87 	bl	8009c04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016cf6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016cfa:	2101      	movs	r1, #1
 8016cfc:	4803      	ldr	r0, [pc, #12]	; (8016d0c <USBD_LL_Init+0x9c>)
 8016cfe:	f7f2 ff81 	bl	8009c04 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016d02:	2300      	movs	r3, #0
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	3708      	adds	r7, #8
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	bd80      	pop	{r7, pc}
 8016d0c:	2400226c 	.word	0x2400226c
 8016d10:	40040000 	.word	0x40040000

08016d14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b084      	sub	sp, #16
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d20:	2300      	movs	r3, #0
 8016d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f7f1 fe5d 	bl	80089ea <HAL_PCD_Start>
 8016d30:	4603      	mov	r3, r0
 8016d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d34:	7bfb      	ldrb	r3, [r7, #15]
 8016d36:	4618      	mov	r0, r3
 8016d38:	f000 f942 	bl	8016fc0 <USBD_Get_USB_Status>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d42:	4618      	mov	r0, r3
 8016d44:	3710      	adds	r7, #16
 8016d46:	46bd      	mov	sp, r7
 8016d48:	bd80      	pop	{r7, pc}

08016d4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016d4a:	b580      	push	{r7, lr}
 8016d4c:	b084      	sub	sp, #16
 8016d4e:	af00      	add	r7, sp, #0
 8016d50:	6078      	str	r0, [r7, #4]
 8016d52:	4608      	mov	r0, r1
 8016d54:	4611      	mov	r1, r2
 8016d56:	461a      	mov	r2, r3
 8016d58:	4603      	mov	r3, r0
 8016d5a:	70fb      	strb	r3, [r7, #3]
 8016d5c:	460b      	mov	r3, r1
 8016d5e:	70bb      	strb	r3, [r7, #2]
 8016d60:	4613      	mov	r3, r2
 8016d62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d64:	2300      	movs	r3, #0
 8016d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d68:	2300      	movs	r3, #0
 8016d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016d72:	78bb      	ldrb	r3, [r7, #2]
 8016d74:	883a      	ldrh	r2, [r7, #0]
 8016d76:	78f9      	ldrb	r1, [r7, #3]
 8016d78:	f7f2 fb5d 	bl	8009436 <HAL_PCD_EP_Open>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d80:	7bfb      	ldrb	r3, [r7, #15]
 8016d82:	4618      	mov	r0, r3
 8016d84:	f000 f91c 	bl	8016fc0 <USBD_Get_USB_Status>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d8e:	4618      	mov	r0, r3
 8016d90:	3710      	adds	r7, #16
 8016d92:	46bd      	mov	sp, r7
 8016d94:	bd80      	pop	{r7, pc}

08016d96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d96:	b580      	push	{r7, lr}
 8016d98:	b084      	sub	sp, #16
 8016d9a:	af00      	add	r7, sp, #0
 8016d9c:	6078      	str	r0, [r7, #4]
 8016d9e:	460b      	mov	r3, r1
 8016da0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016da2:	2300      	movs	r3, #0
 8016da4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016da6:	2300      	movs	r3, #0
 8016da8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016db0:	78fa      	ldrb	r2, [r7, #3]
 8016db2:	4611      	mov	r1, r2
 8016db4:	4618      	mov	r0, r3
 8016db6:	f7f2 fba6 	bl	8009506 <HAL_PCD_EP_Close>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dbe:	7bfb      	ldrb	r3, [r7, #15]
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f000 f8fd 	bl	8016fc0 <USBD_Get_USB_Status>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	3710      	adds	r7, #16
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bd80      	pop	{r7, pc}

08016dd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b084      	sub	sp, #16
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
 8016ddc:	460b      	mov	r3, r1
 8016dde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016de0:	2300      	movs	r3, #0
 8016de2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016de4:	2300      	movs	r3, #0
 8016de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016dee:	78fa      	ldrb	r2, [r7, #3]
 8016df0:	4611      	mov	r1, r2
 8016df2:	4618      	mov	r0, r3
 8016df4:	f7f2 fc60 	bl	80096b8 <HAL_PCD_EP_SetStall>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dfc:	7bfb      	ldrb	r3, [r7, #15]
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f000 f8de 	bl	8016fc0 <USBD_Get_USB_Status>
 8016e04:	4603      	mov	r3, r0
 8016e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	3710      	adds	r7, #16
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}

08016e12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e12:	b580      	push	{r7, lr}
 8016e14:	b084      	sub	sp, #16
 8016e16:	af00      	add	r7, sp, #0
 8016e18:	6078      	str	r0, [r7, #4]
 8016e1a:	460b      	mov	r3, r1
 8016e1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e1e:	2300      	movs	r3, #0
 8016e20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e22:	2300      	movs	r3, #0
 8016e24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e2c:	78fa      	ldrb	r2, [r7, #3]
 8016e2e:	4611      	mov	r1, r2
 8016e30:	4618      	mov	r0, r3
 8016e32:	f7f2 fca5 	bl	8009780 <HAL_PCD_EP_ClrStall>
 8016e36:	4603      	mov	r3, r0
 8016e38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e3a:	7bfb      	ldrb	r3, [r7, #15]
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	f000 f8bf 	bl	8016fc0 <USBD_Get_USB_Status>
 8016e42:	4603      	mov	r3, r0
 8016e44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e46:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	3710      	adds	r7, #16
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e50:	b480      	push	{r7}
 8016e52:	b085      	sub	sp, #20
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
 8016e58:	460b      	mov	r3, r1
 8016e5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	da0b      	bge.n	8016e84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016e6c:	78fb      	ldrb	r3, [r7, #3]
 8016e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e72:	68f9      	ldr	r1, [r7, #12]
 8016e74:	4613      	mov	r3, r2
 8016e76:	00db      	lsls	r3, r3, #3
 8016e78:	4413      	add	r3, r2
 8016e7a:	009b      	lsls	r3, r3, #2
 8016e7c:	440b      	add	r3, r1
 8016e7e:	333e      	adds	r3, #62	; 0x3e
 8016e80:	781b      	ldrb	r3, [r3, #0]
 8016e82:	e00b      	b.n	8016e9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016e84:	78fb      	ldrb	r3, [r7, #3]
 8016e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e8a:	68f9      	ldr	r1, [r7, #12]
 8016e8c:	4613      	mov	r3, r2
 8016e8e:	00db      	lsls	r3, r3, #3
 8016e90:	4413      	add	r3, r2
 8016e92:	009b      	lsls	r3, r3, #2
 8016e94:	440b      	add	r3, r1
 8016e96:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016e9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	3714      	adds	r7, #20
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea6:	4770      	bx	lr

08016ea8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b084      	sub	sp, #16
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
 8016eb0:	460b      	mov	r3, r1
 8016eb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016eb8:	2300      	movs	r3, #0
 8016eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ec2:	78fa      	ldrb	r2, [r7, #3]
 8016ec4:	4611      	mov	r1, r2
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	f7f2 fa90 	bl	80093ec <HAL_PCD_SetAddress>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ed0:	7bfb      	ldrb	r3, [r7, #15]
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	f000 f874 	bl	8016fc0 <USBD_Get_USB_Status>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016edc:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ede:	4618      	mov	r0, r3
 8016ee0:	3710      	adds	r7, #16
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	bd80      	pop	{r7, pc}

08016ee6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016ee6:	b580      	push	{r7, lr}
 8016ee8:	b086      	sub	sp, #24
 8016eea:	af00      	add	r7, sp, #0
 8016eec:	60f8      	str	r0, [r7, #12]
 8016eee:	607a      	str	r2, [r7, #4]
 8016ef0:	603b      	str	r3, [r7, #0]
 8016ef2:	460b      	mov	r3, r1
 8016ef4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016efa:	2300      	movs	r3, #0
 8016efc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016f04:	7af9      	ldrb	r1, [r7, #11]
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	687a      	ldr	r2, [r7, #4]
 8016f0a:	f7f2 fb9a 	bl	8009642 <HAL_PCD_EP_Transmit>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f12:	7dfb      	ldrb	r3, [r7, #23]
 8016f14:	4618      	mov	r0, r3
 8016f16:	f000 f853 	bl	8016fc0 <USBD_Get_USB_Status>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f20:	4618      	mov	r0, r3
 8016f22:	3718      	adds	r7, #24
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}

08016f28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b086      	sub	sp, #24
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	60f8      	str	r0, [r7, #12]
 8016f30:	607a      	str	r2, [r7, #4]
 8016f32:	603b      	str	r3, [r7, #0]
 8016f34:	460b      	mov	r3, r1
 8016f36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f38:	2300      	movs	r3, #0
 8016f3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016f46:	7af9      	ldrb	r1, [r7, #11]
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	687a      	ldr	r2, [r7, #4]
 8016f4c:	f7f2 fb25 	bl	800959a <HAL_PCD_EP_Receive>
 8016f50:	4603      	mov	r3, r0
 8016f52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f54:	7dfb      	ldrb	r3, [r7, #23]
 8016f56:	4618      	mov	r0, r3
 8016f58:	f000 f832 	bl	8016fc0 <USBD_Get_USB_Status>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f60:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f62:	4618      	mov	r0, r3
 8016f64:	3718      	adds	r7, #24
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd80      	pop	{r7, pc}

08016f6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f6a:	b580      	push	{r7, lr}
 8016f6c:	b082      	sub	sp, #8
 8016f6e:	af00      	add	r7, sp, #0
 8016f70:	6078      	str	r0, [r7, #4]
 8016f72:	460b      	mov	r3, r1
 8016f74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f7c:	78fa      	ldrb	r2, [r7, #3]
 8016f7e:	4611      	mov	r1, r2
 8016f80:	4618      	mov	r0, r3
 8016f82:	f7f2 fb46 	bl	8009612 <HAL_PCD_EP_GetRxCount>
 8016f86:	4603      	mov	r3, r0
}
 8016f88:	4618      	mov	r0, r3
 8016f8a:	3708      	adds	r7, #8
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}

08016f90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016f90:	b480      	push	{r7}
 8016f92:	b083      	sub	sp, #12
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016f98:	4b03      	ldr	r3, [pc, #12]	; (8016fa8 <USBD_static_malloc+0x18>)
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	370c      	adds	r7, #12
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa4:	4770      	bx	lr
 8016fa6:	bf00      	nop
 8016fa8:	24002778 	.word	0x24002778

08016fac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016fac:	b480      	push	{r7}
 8016fae:	b083      	sub	sp, #12
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016fb4:	bf00      	nop
 8016fb6:	370c      	adds	r7, #12
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fbe:	4770      	bx	lr

08016fc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016fc0:	b480      	push	{r7}
 8016fc2:	b085      	sub	sp, #20
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fca:	2300      	movs	r3, #0
 8016fcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016fce:	79fb      	ldrb	r3, [r7, #7]
 8016fd0:	2b03      	cmp	r3, #3
 8016fd2:	d817      	bhi.n	8017004 <USBD_Get_USB_Status+0x44>
 8016fd4:	a201      	add	r2, pc, #4	; (adr r2, 8016fdc <USBD_Get_USB_Status+0x1c>)
 8016fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fda:	bf00      	nop
 8016fdc:	08016fed 	.word	0x08016fed
 8016fe0:	08016ff3 	.word	0x08016ff3
 8016fe4:	08016ff9 	.word	0x08016ff9
 8016fe8:	08016fff 	.word	0x08016fff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016fec:	2300      	movs	r3, #0
 8016fee:	73fb      	strb	r3, [r7, #15]
    break;
 8016ff0:	e00b      	b.n	801700a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016ff2:	2303      	movs	r3, #3
 8016ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8016ff6:	e008      	b.n	801700a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016ff8:	2301      	movs	r3, #1
 8016ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8016ffc:	e005      	b.n	801700a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016ffe:	2303      	movs	r3, #3
 8017000:	73fb      	strb	r3, [r7, #15]
    break;
 8017002:	e002      	b.n	801700a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017004:	2303      	movs	r3, #3
 8017006:	73fb      	strb	r3, [r7, #15]
    break;
 8017008:	bf00      	nop
  }
  return usb_status;
 801700a:	7bfb      	ldrb	r3, [r7, #15]
}
 801700c:	4618      	mov	r0, r3
 801700e:	3714      	adds	r7, #20
 8017010:	46bd      	mov	sp, r7
 8017012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017016:	4770      	bx	lr

08017018 <__cvt>:
 8017018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801701a:	ed2d 8b02 	vpush	{d8}
 801701e:	eeb0 8b40 	vmov.f64	d8, d0
 8017022:	b085      	sub	sp, #20
 8017024:	4617      	mov	r7, r2
 8017026:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017028:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801702a:	ee18 2a90 	vmov	r2, s17
 801702e:	f025 0520 	bic.w	r5, r5, #32
 8017032:	2a00      	cmp	r2, #0
 8017034:	bfb6      	itet	lt
 8017036:	222d      	movlt	r2, #45	; 0x2d
 8017038:	2200      	movge	r2, #0
 801703a:	eeb1 8b40 	vneglt.f64	d8, d0
 801703e:	2d46      	cmp	r5, #70	; 0x46
 8017040:	460c      	mov	r4, r1
 8017042:	701a      	strb	r2, [r3, #0]
 8017044:	d004      	beq.n	8017050 <__cvt+0x38>
 8017046:	2d45      	cmp	r5, #69	; 0x45
 8017048:	d100      	bne.n	801704c <__cvt+0x34>
 801704a:	3401      	adds	r4, #1
 801704c:	2102      	movs	r1, #2
 801704e:	e000      	b.n	8017052 <__cvt+0x3a>
 8017050:	2103      	movs	r1, #3
 8017052:	ab03      	add	r3, sp, #12
 8017054:	9301      	str	r3, [sp, #4]
 8017056:	ab02      	add	r3, sp, #8
 8017058:	9300      	str	r3, [sp, #0]
 801705a:	4622      	mov	r2, r4
 801705c:	4633      	mov	r3, r6
 801705e:	eeb0 0b48 	vmov.f64	d0, d8
 8017062:	f001 f859 	bl	8018118 <_dtoa_r>
 8017066:	2d47      	cmp	r5, #71	; 0x47
 8017068:	d101      	bne.n	801706e <__cvt+0x56>
 801706a:	07fb      	lsls	r3, r7, #31
 801706c:	d51a      	bpl.n	80170a4 <__cvt+0x8c>
 801706e:	2d46      	cmp	r5, #70	; 0x46
 8017070:	eb00 0204 	add.w	r2, r0, r4
 8017074:	d10c      	bne.n	8017090 <__cvt+0x78>
 8017076:	7803      	ldrb	r3, [r0, #0]
 8017078:	2b30      	cmp	r3, #48	; 0x30
 801707a:	d107      	bne.n	801708c <__cvt+0x74>
 801707c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017084:	bf1c      	itt	ne
 8017086:	f1c4 0401 	rsbne	r4, r4, #1
 801708a:	6034      	strne	r4, [r6, #0]
 801708c:	6833      	ldr	r3, [r6, #0]
 801708e:	441a      	add	r2, r3
 8017090:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017098:	bf08      	it	eq
 801709a:	9203      	streq	r2, [sp, #12]
 801709c:	2130      	movs	r1, #48	; 0x30
 801709e:	9b03      	ldr	r3, [sp, #12]
 80170a0:	4293      	cmp	r3, r2
 80170a2:	d307      	bcc.n	80170b4 <__cvt+0x9c>
 80170a4:	9b03      	ldr	r3, [sp, #12]
 80170a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170a8:	1a1b      	subs	r3, r3, r0
 80170aa:	6013      	str	r3, [r2, #0]
 80170ac:	b005      	add	sp, #20
 80170ae:	ecbd 8b02 	vpop	{d8}
 80170b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170b4:	1c5c      	adds	r4, r3, #1
 80170b6:	9403      	str	r4, [sp, #12]
 80170b8:	7019      	strb	r1, [r3, #0]
 80170ba:	e7f0      	b.n	801709e <__cvt+0x86>

080170bc <__exponent>:
 80170bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170be:	4603      	mov	r3, r0
 80170c0:	2900      	cmp	r1, #0
 80170c2:	bfb8      	it	lt
 80170c4:	4249      	neglt	r1, r1
 80170c6:	f803 2b02 	strb.w	r2, [r3], #2
 80170ca:	bfb4      	ite	lt
 80170cc:	222d      	movlt	r2, #45	; 0x2d
 80170ce:	222b      	movge	r2, #43	; 0x2b
 80170d0:	2909      	cmp	r1, #9
 80170d2:	7042      	strb	r2, [r0, #1]
 80170d4:	dd2a      	ble.n	801712c <__exponent+0x70>
 80170d6:	f10d 0207 	add.w	r2, sp, #7
 80170da:	4617      	mov	r7, r2
 80170dc:	260a      	movs	r6, #10
 80170de:	4694      	mov	ip, r2
 80170e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80170e4:	fb06 1415 	mls	r4, r6, r5, r1
 80170e8:	3430      	adds	r4, #48	; 0x30
 80170ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80170ee:	460c      	mov	r4, r1
 80170f0:	2c63      	cmp	r4, #99	; 0x63
 80170f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80170f6:	4629      	mov	r1, r5
 80170f8:	dcf1      	bgt.n	80170de <__exponent+0x22>
 80170fa:	3130      	adds	r1, #48	; 0x30
 80170fc:	f1ac 0402 	sub.w	r4, ip, #2
 8017100:	f802 1c01 	strb.w	r1, [r2, #-1]
 8017104:	1c41      	adds	r1, r0, #1
 8017106:	4622      	mov	r2, r4
 8017108:	42ba      	cmp	r2, r7
 801710a:	d30a      	bcc.n	8017122 <__exponent+0x66>
 801710c:	f10d 0209 	add.w	r2, sp, #9
 8017110:	eba2 020c 	sub.w	r2, r2, ip
 8017114:	42bc      	cmp	r4, r7
 8017116:	bf88      	it	hi
 8017118:	2200      	movhi	r2, #0
 801711a:	4413      	add	r3, r2
 801711c:	1a18      	subs	r0, r3, r0
 801711e:	b003      	add	sp, #12
 8017120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017122:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017126:	f801 5f01 	strb.w	r5, [r1, #1]!
 801712a:	e7ed      	b.n	8017108 <__exponent+0x4c>
 801712c:	2330      	movs	r3, #48	; 0x30
 801712e:	3130      	adds	r1, #48	; 0x30
 8017130:	7083      	strb	r3, [r0, #2]
 8017132:	70c1      	strb	r1, [r0, #3]
 8017134:	1d03      	adds	r3, r0, #4
 8017136:	e7f1      	b.n	801711c <__exponent+0x60>

08017138 <_printf_float>:
 8017138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713c:	b08b      	sub	sp, #44	; 0x2c
 801713e:	460c      	mov	r4, r1
 8017140:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8017144:	4616      	mov	r6, r2
 8017146:	461f      	mov	r7, r3
 8017148:	4605      	mov	r5, r0
 801714a:	f000 fed1 	bl	8017ef0 <_localeconv_r>
 801714e:	f8d0 b000 	ldr.w	fp, [r0]
 8017152:	4658      	mov	r0, fp
 8017154:	f7e9 f92c 	bl	80003b0 <strlen>
 8017158:	2300      	movs	r3, #0
 801715a:	9308      	str	r3, [sp, #32]
 801715c:	f8d8 3000 	ldr.w	r3, [r8]
 8017160:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017164:	6822      	ldr	r2, [r4, #0]
 8017166:	3307      	adds	r3, #7
 8017168:	f023 0307 	bic.w	r3, r3, #7
 801716c:	f103 0108 	add.w	r1, r3, #8
 8017170:	f8c8 1000 	str.w	r1, [r8]
 8017174:	ed93 0b00 	vldr	d0, [r3]
 8017178:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80173d8 <_printf_float+0x2a0>
 801717c:	eeb0 7bc0 	vabs.f64	d7, d0
 8017180:	eeb4 7b46 	vcmp.f64	d7, d6
 8017184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017188:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801718c:	4682      	mov	sl, r0
 801718e:	dd24      	ble.n	80171da <_printf_float+0xa2>
 8017190:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017198:	d502      	bpl.n	80171a0 <_printf_float+0x68>
 801719a:	232d      	movs	r3, #45	; 0x2d
 801719c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80171a0:	498f      	ldr	r1, [pc, #572]	; (80173e0 <_printf_float+0x2a8>)
 80171a2:	4b90      	ldr	r3, [pc, #576]	; (80173e4 <_printf_float+0x2ac>)
 80171a4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80171a8:	bf94      	ite	ls
 80171aa:	4688      	movls	r8, r1
 80171ac:	4698      	movhi	r8, r3
 80171ae:	2303      	movs	r3, #3
 80171b0:	6123      	str	r3, [r4, #16]
 80171b2:	f022 0204 	bic.w	r2, r2, #4
 80171b6:	2300      	movs	r3, #0
 80171b8:	6022      	str	r2, [r4, #0]
 80171ba:	9304      	str	r3, [sp, #16]
 80171bc:	9700      	str	r7, [sp, #0]
 80171be:	4633      	mov	r3, r6
 80171c0:	aa09      	add	r2, sp, #36	; 0x24
 80171c2:	4621      	mov	r1, r4
 80171c4:	4628      	mov	r0, r5
 80171c6:	f000 f9d1 	bl	801756c <_printf_common>
 80171ca:	3001      	adds	r0, #1
 80171cc:	f040 808a 	bne.w	80172e4 <_printf_float+0x1ac>
 80171d0:	f04f 30ff 	mov.w	r0, #4294967295
 80171d4:	b00b      	add	sp, #44	; 0x2c
 80171d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171da:	eeb4 0b40 	vcmp.f64	d0, d0
 80171de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171e2:	d709      	bvc.n	80171f8 <_printf_float+0xc0>
 80171e4:	ee10 3a90 	vmov	r3, s1
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	bfbc      	itt	lt
 80171ec:	232d      	movlt	r3, #45	; 0x2d
 80171ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80171f2:	497d      	ldr	r1, [pc, #500]	; (80173e8 <_printf_float+0x2b0>)
 80171f4:	4b7d      	ldr	r3, [pc, #500]	; (80173ec <_printf_float+0x2b4>)
 80171f6:	e7d5      	b.n	80171a4 <_printf_float+0x6c>
 80171f8:	6863      	ldr	r3, [r4, #4]
 80171fa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80171fe:	9104      	str	r1, [sp, #16]
 8017200:	1c59      	adds	r1, r3, #1
 8017202:	d13c      	bne.n	801727e <_printf_float+0x146>
 8017204:	2306      	movs	r3, #6
 8017206:	6063      	str	r3, [r4, #4]
 8017208:	2300      	movs	r3, #0
 801720a:	9303      	str	r3, [sp, #12]
 801720c:	ab08      	add	r3, sp, #32
 801720e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017216:	ab07      	add	r3, sp, #28
 8017218:	6861      	ldr	r1, [r4, #4]
 801721a:	9300      	str	r3, [sp, #0]
 801721c:	6022      	str	r2, [r4, #0]
 801721e:	f10d 031b 	add.w	r3, sp, #27
 8017222:	4628      	mov	r0, r5
 8017224:	f7ff fef8 	bl	8017018 <__cvt>
 8017228:	9b04      	ldr	r3, [sp, #16]
 801722a:	9907      	ldr	r1, [sp, #28]
 801722c:	2b47      	cmp	r3, #71	; 0x47
 801722e:	4680      	mov	r8, r0
 8017230:	d108      	bne.n	8017244 <_printf_float+0x10c>
 8017232:	1cc8      	adds	r0, r1, #3
 8017234:	db02      	blt.n	801723c <_printf_float+0x104>
 8017236:	6863      	ldr	r3, [r4, #4]
 8017238:	4299      	cmp	r1, r3
 801723a:	dd41      	ble.n	80172c0 <_printf_float+0x188>
 801723c:	f1a9 0902 	sub.w	r9, r9, #2
 8017240:	fa5f f989 	uxtb.w	r9, r9
 8017244:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017248:	d820      	bhi.n	801728c <_printf_float+0x154>
 801724a:	3901      	subs	r1, #1
 801724c:	464a      	mov	r2, r9
 801724e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017252:	9107      	str	r1, [sp, #28]
 8017254:	f7ff ff32 	bl	80170bc <__exponent>
 8017258:	9a08      	ldr	r2, [sp, #32]
 801725a:	9004      	str	r0, [sp, #16]
 801725c:	1813      	adds	r3, r2, r0
 801725e:	2a01      	cmp	r2, #1
 8017260:	6123      	str	r3, [r4, #16]
 8017262:	dc02      	bgt.n	801726a <_printf_float+0x132>
 8017264:	6822      	ldr	r2, [r4, #0]
 8017266:	07d2      	lsls	r2, r2, #31
 8017268:	d501      	bpl.n	801726e <_printf_float+0x136>
 801726a:	3301      	adds	r3, #1
 801726c:	6123      	str	r3, [r4, #16]
 801726e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d0a2      	beq.n	80171bc <_printf_float+0x84>
 8017276:	232d      	movs	r3, #45	; 0x2d
 8017278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801727c:	e79e      	b.n	80171bc <_printf_float+0x84>
 801727e:	9904      	ldr	r1, [sp, #16]
 8017280:	2947      	cmp	r1, #71	; 0x47
 8017282:	d1c1      	bne.n	8017208 <_printf_float+0xd0>
 8017284:	2b00      	cmp	r3, #0
 8017286:	d1bf      	bne.n	8017208 <_printf_float+0xd0>
 8017288:	2301      	movs	r3, #1
 801728a:	e7bc      	b.n	8017206 <_printf_float+0xce>
 801728c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8017290:	d118      	bne.n	80172c4 <_printf_float+0x18c>
 8017292:	2900      	cmp	r1, #0
 8017294:	6863      	ldr	r3, [r4, #4]
 8017296:	dd0b      	ble.n	80172b0 <_printf_float+0x178>
 8017298:	6121      	str	r1, [r4, #16]
 801729a:	b913      	cbnz	r3, 80172a2 <_printf_float+0x16a>
 801729c:	6822      	ldr	r2, [r4, #0]
 801729e:	07d0      	lsls	r0, r2, #31
 80172a0:	d502      	bpl.n	80172a8 <_printf_float+0x170>
 80172a2:	3301      	adds	r3, #1
 80172a4:	440b      	add	r3, r1
 80172a6:	6123      	str	r3, [r4, #16]
 80172a8:	2300      	movs	r3, #0
 80172aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80172ac:	9304      	str	r3, [sp, #16]
 80172ae:	e7de      	b.n	801726e <_printf_float+0x136>
 80172b0:	b913      	cbnz	r3, 80172b8 <_printf_float+0x180>
 80172b2:	6822      	ldr	r2, [r4, #0]
 80172b4:	07d2      	lsls	r2, r2, #31
 80172b6:	d501      	bpl.n	80172bc <_printf_float+0x184>
 80172b8:	3302      	adds	r3, #2
 80172ba:	e7f4      	b.n	80172a6 <_printf_float+0x16e>
 80172bc:	2301      	movs	r3, #1
 80172be:	e7f2      	b.n	80172a6 <_printf_float+0x16e>
 80172c0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80172c4:	9b08      	ldr	r3, [sp, #32]
 80172c6:	4299      	cmp	r1, r3
 80172c8:	db05      	blt.n	80172d6 <_printf_float+0x19e>
 80172ca:	6823      	ldr	r3, [r4, #0]
 80172cc:	6121      	str	r1, [r4, #16]
 80172ce:	07d8      	lsls	r0, r3, #31
 80172d0:	d5ea      	bpl.n	80172a8 <_printf_float+0x170>
 80172d2:	1c4b      	adds	r3, r1, #1
 80172d4:	e7e7      	b.n	80172a6 <_printf_float+0x16e>
 80172d6:	2900      	cmp	r1, #0
 80172d8:	bfd4      	ite	le
 80172da:	f1c1 0202 	rsble	r2, r1, #2
 80172de:	2201      	movgt	r2, #1
 80172e0:	4413      	add	r3, r2
 80172e2:	e7e0      	b.n	80172a6 <_printf_float+0x16e>
 80172e4:	6823      	ldr	r3, [r4, #0]
 80172e6:	055a      	lsls	r2, r3, #21
 80172e8:	d407      	bmi.n	80172fa <_printf_float+0x1c2>
 80172ea:	6923      	ldr	r3, [r4, #16]
 80172ec:	4642      	mov	r2, r8
 80172ee:	4631      	mov	r1, r6
 80172f0:	4628      	mov	r0, r5
 80172f2:	47b8      	blx	r7
 80172f4:	3001      	adds	r0, #1
 80172f6:	d12a      	bne.n	801734e <_printf_float+0x216>
 80172f8:	e76a      	b.n	80171d0 <_printf_float+0x98>
 80172fa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80172fe:	f240 80e0 	bls.w	80174c2 <_printf_float+0x38a>
 8017302:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017306:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801730a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801730e:	d133      	bne.n	8017378 <_printf_float+0x240>
 8017310:	4a37      	ldr	r2, [pc, #220]	; (80173f0 <_printf_float+0x2b8>)
 8017312:	2301      	movs	r3, #1
 8017314:	4631      	mov	r1, r6
 8017316:	4628      	mov	r0, r5
 8017318:	47b8      	blx	r7
 801731a:	3001      	adds	r0, #1
 801731c:	f43f af58 	beq.w	80171d0 <_printf_float+0x98>
 8017320:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017324:	429a      	cmp	r2, r3
 8017326:	db02      	blt.n	801732e <_printf_float+0x1f6>
 8017328:	6823      	ldr	r3, [r4, #0]
 801732a:	07d8      	lsls	r0, r3, #31
 801732c:	d50f      	bpl.n	801734e <_printf_float+0x216>
 801732e:	4653      	mov	r3, sl
 8017330:	465a      	mov	r2, fp
 8017332:	4631      	mov	r1, r6
 8017334:	4628      	mov	r0, r5
 8017336:	47b8      	blx	r7
 8017338:	3001      	adds	r0, #1
 801733a:	f43f af49 	beq.w	80171d0 <_printf_float+0x98>
 801733e:	f04f 0800 	mov.w	r8, #0
 8017342:	f104 091a 	add.w	r9, r4, #26
 8017346:	9b08      	ldr	r3, [sp, #32]
 8017348:	3b01      	subs	r3, #1
 801734a:	4543      	cmp	r3, r8
 801734c:	dc09      	bgt.n	8017362 <_printf_float+0x22a>
 801734e:	6823      	ldr	r3, [r4, #0]
 8017350:	079b      	lsls	r3, r3, #30
 8017352:	f100 8106 	bmi.w	8017562 <_printf_float+0x42a>
 8017356:	68e0      	ldr	r0, [r4, #12]
 8017358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801735a:	4298      	cmp	r0, r3
 801735c:	bfb8      	it	lt
 801735e:	4618      	movlt	r0, r3
 8017360:	e738      	b.n	80171d4 <_printf_float+0x9c>
 8017362:	2301      	movs	r3, #1
 8017364:	464a      	mov	r2, r9
 8017366:	4631      	mov	r1, r6
 8017368:	4628      	mov	r0, r5
 801736a:	47b8      	blx	r7
 801736c:	3001      	adds	r0, #1
 801736e:	f43f af2f 	beq.w	80171d0 <_printf_float+0x98>
 8017372:	f108 0801 	add.w	r8, r8, #1
 8017376:	e7e6      	b.n	8017346 <_printf_float+0x20e>
 8017378:	9b07      	ldr	r3, [sp, #28]
 801737a:	2b00      	cmp	r3, #0
 801737c:	dc3a      	bgt.n	80173f4 <_printf_float+0x2bc>
 801737e:	4a1c      	ldr	r2, [pc, #112]	; (80173f0 <_printf_float+0x2b8>)
 8017380:	2301      	movs	r3, #1
 8017382:	4631      	mov	r1, r6
 8017384:	4628      	mov	r0, r5
 8017386:	47b8      	blx	r7
 8017388:	3001      	adds	r0, #1
 801738a:	f43f af21 	beq.w	80171d0 <_printf_float+0x98>
 801738e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8017392:	4313      	orrs	r3, r2
 8017394:	d102      	bne.n	801739c <_printf_float+0x264>
 8017396:	6823      	ldr	r3, [r4, #0]
 8017398:	07d9      	lsls	r1, r3, #31
 801739a:	d5d8      	bpl.n	801734e <_printf_float+0x216>
 801739c:	4653      	mov	r3, sl
 801739e:	465a      	mov	r2, fp
 80173a0:	4631      	mov	r1, r6
 80173a2:	4628      	mov	r0, r5
 80173a4:	47b8      	blx	r7
 80173a6:	3001      	adds	r0, #1
 80173a8:	f43f af12 	beq.w	80171d0 <_printf_float+0x98>
 80173ac:	f04f 0900 	mov.w	r9, #0
 80173b0:	f104 0a1a 	add.w	sl, r4, #26
 80173b4:	9b07      	ldr	r3, [sp, #28]
 80173b6:	425b      	negs	r3, r3
 80173b8:	454b      	cmp	r3, r9
 80173ba:	dc01      	bgt.n	80173c0 <_printf_float+0x288>
 80173bc:	9b08      	ldr	r3, [sp, #32]
 80173be:	e795      	b.n	80172ec <_printf_float+0x1b4>
 80173c0:	2301      	movs	r3, #1
 80173c2:	4652      	mov	r2, sl
 80173c4:	4631      	mov	r1, r6
 80173c6:	4628      	mov	r0, r5
 80173c8:	47b8      	blx	r7
 80173ca:	3001      	adds	r0, #1
 80173cc:	f43f af00 	beq.w	80171d0 <_printf_float+0x98>
 80173d0:	f109 0901 	add.w	r9, r9, #1
 80173d4:	e7ee      	b.n	80173b4 <_printf_float+0x27c>
 80173d6:	bf00      	nop
 80173d8:	ffffffff 	.word	0xffffffff
 80173dc:	7fefffff 	.word	0x7fefffff
 80173e0:	0801c7f4 	.word	0x0801c7f4
 80173e4:	0801c7f8 	.word	0x0801c7f8
 80173e8:	0801c7fc 	.word	0x0801c7fc
 80173ec:	0801c800 	.word	0x0801c800
 80173f0:	0801c804 	.word	0x0801c804
 80173f4:	9a08      	ldr	r2, [sp, #32]
 80173f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80173f8:	429a      	cmp	r2, r3
 80173fa:	bfa8      	it	ge
 80173fc:	461a      	movge	r2, r3
 80173fe:	2a00      	cmp	r2, #0
 8017400:	4691      	mov	r9, r2
 8017402:	dc38      	bgt.n	8017476 <_printf_float+0x33e>
 8017404:	2300      	movs	r3, #0
 8017406:	9305      	str	r3, [sp, #20]
 8017408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801740c:	f104 021a 	add.w	r2, r4, #26
 8017410:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017412:	9905      	ldr	r1, [sp, #20]
 8017414:	9304      	str	r3, [sp, #16]
 8017416:	eba3 0309 	sub.w	r3, r3, r9
 801741a:	428b      	cmp	r3, r1
 801741c:	dc33      	bgt.n	8017486 <_printf_float+0x34e>
 801741e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017422:	429a      	cmp	r2, r3
 8017424:	db3c      	blt.n	80174a0 <_printf_float+0x368>
 8017426:	6823      	ldr	r3, [r4, #0]
 8017428:	07da      	lsls	r2, r3, #31
 801742a:	d439      	bmi.n	80174a0 <_printf_float+0x368>
 801742c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8017430:	eba2 0903 	sub.w	r9, r2, r3
 8017434:	9b04      	ldr	r3, [sp, #16]
 8017436:	1ad2      	subs	r2, r2, r3
 8017438:	4591      	cmp	r9, r2
 801743a:	bfa8      	it	ge
 801743c:	4691      	movge	r9, r2
 801743e:	f1b9 0f00 	cmp.w	r9, #0
 8017442:	dc35      	bgt.n	80174b0 <_printf_float+0x378>
 8017444:	f04f 0800 	mov.w	r8, #0
 8017448:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801744c:	f104 0a1a 	add.w	sl, r4, #26
 8017450:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017454:	1a9b      	subs	r3, r3, r2
 8017456:	eba3 0309 	sub.w	r3, r3, r9
 801745a:	4543      	cmp	r3, r8
 801745c:	f77f af77 	ble.w	801734e <_printf_float+0x216>
 8017460:	2301      	movs	r3, #1
 8017462:	4652      	mov	r2, sl
 8017464:	4631      	mov	r1, r6
 8017466:	4628      	mov	r0, r5
 8017468:	47b8      	blx	r7
 801746a:	3001      	adds	r0, #1
 801746c:	f43f aeb0 	beq.w	80171d0 <_printf_float+0x98>
 8017470:	f108 0801 	add.w	r8, r8, #1
 8017474:	e7ec      	b.n	8017450 <_printf_float+0x318>
 8017476:	4613      	mov	r3, r2
 8017478:	4631      	mov	r1, r6
 801747a:	4642      	mov	r2, r8
 801747c:	4628      	mov	r0, r5
 801747e:	47b8      	blx	r7
 8017480:	3001      	adds	r0, #1
 8017482:	d1bf      	bne.n	8017404 <_printf_float+0x2cc>
 8017484:	e6a4      	b.n	80171d0 <_printf_float+0x98>
 8017486:	2301      	movs	r3, #1
 8017488:	4631      	mov	r1, r6
 801748a:	4628      	mov	r0, r5
 801748c:	9204      	str	r2, [sp, #16]
 801748e:	47b8      	blx	r7
 8017490:	3001      	adds	r0, #1
 8017492:	f43f ae9d 	beq.w	80171d0 <_printf_float+0x98>
 8017496:	9b05      	ldr	r3, [sp, #20]
 8017498:	9a04      	ldr	r2, [sp, #16]
 801749a:	3301      	adds	r3, #1
 801749c:	9305      	str	r3, [sp, #20]
 801749e:	e7b7      	b.n	8017410 <_printf_float+0x2d8>
 80174a0:	4653      	mov	r3, sl
 80174a2:	465a      	mov	r2, fp
 80174a4:	4631      	mov	r1, r6
 80174a6:	4628      	mov	r0, r5
 80174a8:	47b8      	blx	r7
 80174aa:	3001      	adds	r0, #1
 80174ac:	d1be      	bne.n	801742c <_printf_float+0x2f4>
 80174ae:	e68f      	b.n	80171d0 <_printf_float+0x98>
 80174b0:	9a04      	ldr	r2, [sp, #16]
 80174b2:	464b      	mov	r3, r9
 80174b4:	4442      	add	r2, r8
 80174b6:	4631      	mov	r1, r6
 80174b8:	4628      	mov	r0, r5
 80174ba:	47b8      	blx	r7
 80174bc:	3001      	adds	r0, #1
 80174be:	d1c1      	bne.n	8017444 <_printf_float+0x30c>
 80174c0:	e686      	b.n	80171d0 <_printf_float+0x98>
 80174c2:	9a08      	ldr	r2, [sp, #32]
 80174c4:	2a01      	cmp	r2, #1
 80174c6:	dc01      	bgt.n	80174cc <_printf_float+0x394>
 80174c8:	07db      	lsls	r3, r3, #31
 80174ca:	d537      	bpl.n	801753c <_printf_float+0x404>
 80174cc:	2301      	movs	r3, #1
 80174ce:	4642      	mov	r2, r8
 80174d0:	4631      	mov	r1, r6
 80174d2:	4628      	mov	r0, r5
 80174d4:	47b8      	blx	r7
 80174d6:	3001      	adds	r0, #1
 80174d8:	f43f ae7a 	beq.w	80171d0 <_printf_float+0x98>
 80174dc:	4653      	mov	r3, sl
 80174de:	465a      	mov	r2, fp
 80174e0:	4631      	mov	r1, r6
 80174e2:	4628      	mov	r0, r5
 80174e4:	47b8      	blx	r7
 80174e6:	3001      	adds	r0, #1
 80174e8:	f43f ae72 	beq.w	80171d0 <_printf_float+0x98>
 80174ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80174f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80174f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f8:	9b08      	ldr	r3, [sp, #32]
 80174fa:	d01a      	beq.n	8017532 <_printf_float+0x3fa>
 80174fc:	3b01      	subs	r3, #1
 80174fe:	f108 0201 	add.w	r2, r8, #1
 8017502:	4631      	mov	r1, r6
 8017504:	4628      	mov	r0, r5
 8017506:	47b8      	blx	r7
 8017508:	3001      	adds	r0, #1
 801750a:	d10e      	bne.n	801752a <_printf_float+0x3f2>
 801750c:	e660      	b.n	80171d0 <_printf_float+0x98>
 801750e:	2301      	movs	r3, #1
 8017510:	464a      	mov	r2, r9
 8017512:	4631      	mov	r1, r6
 8017514:	4628      	mov	r0, r5
 8017516:	47b8      	blx	r7
 8017518:	3001      	adds	r0, #1
 801751a:	f43f ae59 	beq.w	80171d0 <_printf_float+0x98>
 801751e:	f108 0801 	add.w	r8, r8, #1
 8017522:	9b08      	ldr	r3, [sp, #32]
 8017524:	3b01      	subs	r3, #1
 8017526:	4543      	cmp	r3, r8
 8017528:	dcf1      	bgt.n	801750e <_printf_float+0x3d6>
 801752a:	9b04      	ldr	r3, [sp, #16]
 801752c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017530:	e6dd      	b.n	80172ee <_printf_float+0x1b6>
 8017532:	f04f 0800 	mov.w	r8, #0
 8017536:	f104 091a 	add.w	r9, r4, #26
 801753a:	e7f2      	b.n	8017522 <_printf_float+0x3ea>
 801753c:	2301      	movs	r3, #1
 801753e:	4642      	mov	r2, r8
 8017540:	e7df      	b.n	8017502 <_printf_float+0x3ca>
 8017542:	2301      	movs	r3, #1
 8017544:	464a      	mov	r2, r9
 8017546:	4631      	mov	r1, r6
 8017548:	4628      	mov	r0, r5
 801754a:	47b8      	blx	r7
 801754c:	3001      	adds	r0, #1
 801754e:	f43f ae3f 	beq.w	80171d0 <_printf_float+0x98>
 8017552:	f108 0801 	add.w	r8, r8, #1
 8017556:	68e3      	ldr	r3, [r4, #12]
 8017558:	9909      	ldr	r1, [sp, #36]	; 0x24
 801755a:	1a5b      	subs	r3, r3, r1
 801755c:	4543      	cmp	r3, r8
 801755e:	dcf0      	bgt.n	8017542 <_printf_float+0x40a>
 8017560:	e6f9      	b.n	8017356 <_printf_float+0x21e>
 8017562:	f04f 0800 	mov.w	r8, #0
 8017566:	f104 0919 	add.w	r9, r4, #25
 801756a:	e7f4      	b.n	8017556 <_printf_float+0x41e>

0801756c <_printf_common>:
 801756c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017570:	4616      	mov	r6, r2
 8017572:	4699      	mov	r9, r3
 8017574:	688a      	ldr	r2, [r1, #8]
 8017576:	690b      	ldr	r3, [r1, #16]
 8017578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801757c:	4293      	cmp	r3, r2
 801757e:	bfb8      	it	lt
 8017580:	4613      	movlt	r3, r2
 8017582:	6033      	str	r3, [r6, #0]
 8017584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017588:	4607      	mov	r7, r0
 801758a:	460c      	mov	r4, r1
 801758c:	b10a      	cbz	r2, 8017592 <_printf_common+0x26>
 801758e:	3301      	adds	r3, #1
 8017590:	6033      	str	r3, [r6, #0]
 8017592:	6823      	ldr	r3, [r4, #0]
 8017594:	0699      	lsls	r1, r3, #26
 8017596:	bf42      	ittt	mi
 8017598:	6833      	ldrmi	r3, [r6, #0]
 801759a:	3302      	addmi	r3, #2
 801759c:	6033      	strmi	r3, [r6, #0]
 801759e:	6825      	ldr	r5, [r4, #0]
 80175a0:	f015 0506 	ands.w	r5, r5, #6
 80175a4:	d106      	bne.n	80175b4 <_printf_common+0x48>
 80175a6:	f104 0a19 	add.w	sl, r4, #25
 80175aa:	68e3      	ldr	r3, [r4, #12]
 80175ac:	6832      	ldr	r2, [r6, #0]
 80175ae:	1a9b      	subs	r3, r3, r2
 80175b0:	42ab      	cmp	r3, r5
 80175b2:	dc26      	bgt.n	8017602 <_printf_common+0x96>
 80175b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80175b8:	1e13      	subs	r3, r2, #0
 80175ba:	6822      	ldr	r2, [r4, #0]
 80175bc:	bf18      	it	ne
 80175be:	2301      	movne	r3, #1
 80175c0:	0692      	lsls	r2, r2, #26
 80175c2:	d42b      	bmi.n	801761c <_printf_common+0xb0>
 80175c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80175c8:	4649      	mov	r1, r9
 80175ca:	4638      	mov	r0, r7
 80175cc:	47c0      	blx	r8
 80175ce:	3001      	adds	r0, #1
 80175d0:	d01e      	beq.n	8017610 <_printf_common+0xa4>
 80175d2:	6823      	ldr	r3, [r4, #0]
 80175d4:	6922      	ldr	r2, [r4, #16]
 80175d6:	f003 0306 	and.w	r3, r3, #6
 80175da:	2b04      	cmp	r3, #4
 80175dc:	bf02      	ittt	eq
 80175de:	68e5      	ldreq	r5, [r4, #12]
 80175e0:	6833      	ldreq	r3, [r6, #0]
 80175e2:	1aed      	subeq	r5, r5, r3
 80175e4:	68a3      	ldr	r3, [r4, #8]
 80175e6:	bf0c      	ite	eq
 80175e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175ec:	2500      	movne	r5, #0
 80175ee:	4293      	cmp	r3, r2
 80175f0:	bfc4      	itt	gt
 80175f2:	1a9b      	subgt	r3, r3, r2
 80175f4:	18ed      	addgt	r5, r5, r3
 80175f6:	2600      	movs	r6, #0
 80175f8:	341a      	adds	r4, #26
 80175fa:	42b5      	cmp	r5, r6
 80175fc:	d11a      	bne.n	8017634 <_printf_common+0xc8>
 80175fe:	2000      	movs	r0, #0
 8017600:	e008      	b.n	8017614 <_printf_common+0xa8>
 8017602:	2301      	movs	r3, #1
 8017604:	4652      	mov	r2, sl
 8017606:	4649      	mov	r1, r9
 8017608:	4638      	mov	r0, r7
 801760a:	47c0      	blx	r8
 801760c:	3001      	adds	r0, #1
 801760e:	d103      	bne.n	8017618 <_printf_common+0xac>
 8017610:	f04f 30ff 	mov.w	r0, #4294967295
 8017614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017618:	3501      	adds	r5, #1
 801761a:	e7c6      	b.n	80175aa <_printf_common+0x3e>
 801761c:	18e1      	adds	r1, r4, r3
 801761e:	1c5a      	adds	r2, r3, #1
 8017620:	2030      	movs	r0, #48	; 0x30
 8017622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017626:	4422      	add	r2, r4
 8017628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801762c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017630:	3302      	adds	r3, #2
 8017632:	e7c7      	b.n	80175c4 <_printf_common+0x58>
 8017634:	2301      	movs	r3, #1
 8017636:	4622      	mov	r2, r4
 8017638:	4649      	mov	r1, r9
 801763a:	4638      	mov	r0, r7
 801763c:	47c0      	blx	r8
 801763e:	3001      	adds	r0, #1
 8017640:	d0e6      	beq.n	8017610 <_printf_common+0xa4>
 8017642:	3601      	adds	r6, #1
 8017644:	e7d9      	b.n	80175fa <_printf_common+0x8e>
	...

08017648 <_printf_i>:
 8017648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801764c:	7e0f      	ldrb	r7, [r1, #24]
 801764e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017650:	2f78      	cmp	r7, #120	; 0x78
 8017652:	4691      	mov	r9, r2
 8017654:	4680      	mov	r8, r0
 8017656:	460c      	mov	r4, r1
 8017658:	469a      	mov	sl, r3
 801765a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801765e:	d807      	bhi.n	8017670 <_printf_i+0x28>
 8017660:	2f62      	cmp	r7, #98	; 0x62
 8017662:	d80a      	bhi.n	801767a <_printf_i+0x32>
 8017664:	2f00      	cmp	r7, #0
 8017666:	f000 80d4 	beq.w	8017812 <_printf_i+0x1ca>
 801766a:	2f58      	cmp	r7, #88	; 0x58
 801766c:	f000 80c0 	beq.w	80177f0 <_printf_i+0x1a8>
 8017670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017678:	e03a      	b.n	80176f0 <_printf_i+0xa8>
 801767a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801767e:	2b15      	cmp	r3, #21
 8017680:	d8f6      	bhi.n	8017670 <_printf_i+0x28>
 8017682:	a101      	add	r1, pc, #4	; (adr r1, 8017688 <_printf_i+0x40>)
 8017684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017688:	080176e1 	.word	0x080176e1
 801768c:	080176f5 	.word	0x080176f5
 8017690:	08017671 	.word	0x08017671
 8017694:	08017671 	.word	0x08017671
 8017698:	08017671 	.word	0x08017671
 801769c:	08017671 	.word	0x08017671
 80176a0:	080176f5 	.word	0x080176f5
 80176a4:	08017671 	.word	0x08017671
 80176a8:	08017671 	.word	0x08017671
 80176ac:	08017671 	.word	0x08017671
 80176b0:	08017671 	.word	0x08017671
 80176b4:	080177f9 	.word	0x080177f9
 80176b8:	08017721 	.word	0x08017721
 80176bc:	080177b3 	.word	0x080177b3
 80176c0:	08017671 	.word	0x08017671
 80176c4:	08017671 	.word	0x08017671
 80176c8:	0801781b 	.word	0x0801781b
 80176cc:	08017671 	.word	0x08017671
 80176d0:	08017721 	.word	0x08017721
 80176d4:	08017671 	.word	0x08017671
 80176d8:	08017671 	.word	0x08017671
 80176dc:	080177bb 	.word	0x080177bb
 80176e0:	682b      	ldr	r3, [r5, #0]
 80176e2:	1d1a      	adds	r2, r3, #4
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	602a      	str	r2, [r5, #0]
 80176e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80176ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80176f0:	2301      	movs	r3, #1
 80176f2:	e09f      	b.n	8017834 <_printf_i+0x1ec>
 80176f4:	6820      	ldr	r0, [r4, #0]
 80176f6:	682b      	ldr	r3, [r5, #0]
 80176f8:	0607      	lsls	r7, r0, #24
 80176fa:	f103 0104 	add.w	r1, r3, #4
 80176fe:	6029      	str	r1, [r5, #0]
 8017700:	d501      	bpl.n	8017706 <_printf_i+0xbe>
 8017702:	681e      	ldr	r6, [r3, #0]
 8017704:	e003      	b.n	801770e <_printf_i+0xc6>
 8017706:	0646      	lsls	r6, r0, #25
 8017708:	d5fb      	bpl.n	8017702 <_printf_i+0xba>
 801770a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801770e:	2e00      	cmp	r6, #0
 8017710:	da03      	bge.n	801771a <_printf_i+0xd2>
 8017712:	232d      	movs	r3, #45	; 0x2d
 8017714:	4276      	negs	r6, r6
 8017716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801771a:	485a      	ldr	r0, [pc, #360]	; (8017884 <_printf_i+0x23c>)
 801771c:	230a      	movs	r3, #10
 801771e:	e012      	b.n	8017746 <_printf_i+0xfe>
 8017720:	682b      	ldr	r3, [r5, #0]
 8017722:	6820      	ldr	r0, [r4, #0]
 8017724:	1d19      	adds	r1, r3, #4
 8017726:	6029      	str	r1, [r5, #0]
 8017728:	0605      	lsls	r5, r0, #24
 801772a:	d501      	bpl.n	8017730 <_printf_i+0xe8>
 801772c:	681e      	ldr	r6, [r3, #0]
 801772e:	e002      	b.n	8017736 <_printf_i+0xee>
 8017730:	0641      	lsls	r1, r0, #25
 8017732:	d5fb      	bpl.n	801772c <_printf_i+0xe4>
 8017734:	881e      	ldrh	r6, [r3, #0]
 8017736:	4853      	ldr	r0, [pc, #332]	; (8017884 <_printf_i+0x23c>)
 8017738:	2f6f      	cmp	r7, #111	; 0x6f
 801773a:	bf0c      	ite	eq
 801773c:	2308      	moveq	r3, #8
 801773e:	230a      	movne	r3, #10
 8017740:	2100      	movs	r1, #0
 8017742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017746:	6865      	ldr	r5, [r4, #4]
 8017748:	60a5      	str	r5, [r4, #8]
 801774a:	2d00      	cmp	r5, #0
 801774c:	bfa2      	ittt	ge
 801774e:	6821      	ldrge	r1, [r4, #0]
 8017750:	f021 0104 	bicge.w	r1, r1, #4
 8017754:	6021      	strge	r1, [r4, #0]
 8017756:	b90e      	cbnz	r6, 801775c <_printf_i+0x114>
 8017758:	2d00      	cmp	r5, #0
 801775a:	d04b      	beq.n	80177f4 <_printf_i+0x1ac>
 801775c:	4615      	mov	r5, r2
 801775e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017762:	fb03 6711 	mls	r7, r3, r1, r6
 8017766:	5dc7      	ldrb	r7, [r0, r7]
 8017768:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801776c:	4637      	mov	r7, r6
 801776e:	42bb      	cmp	r3, r7
 8017770:	460e      	mov	r6, r1
 8017772:	d9f4      	bls.n	801775e <_printf_i+0x116>
 8017774:	2b08      	cmp	r3, #8
 8017776:	d10b      	bne.n	8017790 <_printf_i+0x148>
 8017778:	6823      	ldr	r3, [r4, #0]
 801777a:	07de      	lsls	r6, r3, #31
 801777c:	d508      	bpl.n	8017790 <_printf_i+0x148>
 801777e:	6923      	ldr	r3, [r4, #16]
 8017780:	6861      	ldr	r1, [r4, #4]
 8017782:	4299      	cmp	r1, r3
 8017784:	bfde      	ittt	le
 8017786:	2330      	movle	r3, #48	; 0x30
 8017788:	f805 3c01 	strble.w	r3, [r5, #-1]
 801778c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017790:	1b52      	subs	r2, r2, r5
 8017792:	6122      	str	r2, [r4, #16]
 8017794:	f8cd a000 	str.w	sl, [sp]
 8017798:	464b      	mov	r3, r9
 801779a:	aa03      	add	r2, sp, #12
 801779c:	4621      	mov	r1, r4
 801779e:	4640      	mov	r0, r8
 80177a0:	f7ff fee4 	bl	801756c <_printf_common>
 80177a4:	3001      	adds	r0, #1
 80177a6:	d14a      	bne.n	801783e <_printf_i+0x1f6>
 80177a8:	f04f 30ff 	mov.w	r0, #4294967295
 80177ac:	b004      	add	sp, #16
 80177ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177b2:	6823      	ldr	r3, [r4, #0]
 80177b4:	f043 0320 	orr.w	r3, r3, #32
 80177b8:	6023      	str	r3, [r4, #0]
 80177ba:	4833      	ldr	r0, [pc, #204]	; (8017888 <_printf_i+0x240>)
 80177bc:	2778      	movs	r7, #120	; 0x78
 80177be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80177c2:	6823      	ldr	r3, [r4, #0]
 80177c4:	6829      	ldr	r1, [r5, #0]
 80177c6:	061f      	lsls	r7, r3, #24
 80177c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80177cc:	d402      	bmi.n	80177d4 <_printf_i+0x18c>
 80177ce:	065f      	lsls	r7, r3, #25
 80177d0:	bf48      	it	mi
 80177d2:	b2b6      	uxthmi	r6, r6
 80177d4:	07df      	lsls	r7, r3, #31
 80177d6:	bf48      	it	mi
 80177d8:	f043 0320 	orrmi.w	r3, r3, #32
 80177dc:	6029      	str	r1, [r5, #0]
 80177de:	bf48      	it	mi
 80177e0:	6023      	strmi	r3, [r4, #0]
 80177e2:	b91e      	cbnz	r6, 80177ec <_printf_i+0x1a4>
 80177e4:	6823      	ldr	r3, [r4, #0]
 80177e6:	f023 0320 	bic.w	r3, r3, #32
 80177ea:	6023      	str	r3, [r4, #0]
 80177ec:	2310      	movs	r3, #16
 80177ee:	e7a7      	b.n	8017740 <_printf_i+0xf8>
 80177f0:	4824      	ldr	r0, [pc, #144]	; (8017884 <_printf_i+0x23c>)
 80177f2:	e7e4      	b.n	80177be <_printf_i+0x176>
 80177f4:	4615      	mov	r5, r2
 80177f6:	e7bd      	b.n	8017774 <_printf_i+0x12c>
 80177f8:	682b      	ldr	r3, [r5, #0]
 80177fa:	6826      	ldr	r6, [r4, #0]
 80177fc:	6961      	ldr	r1, [r4, #20]
 80177fe:	1d18      	adds	r0, r3, #4
 8017800:	6028      	str	r0, [r5, #0]
 8017802:	0635      	lsls	r5, r6, #24
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	d501      	bpl.n	801780c <_printf_i+0x1c4>
 8017808:	6019      	str	r1, [r3, #0]
 801780a:	e002      	b.n	8017812 <_printf_i+0x1ca>
 801780c:	0670      	lsls	r0, r6, #25
 801780e:	d5fb      	bpl.n	8017808 <_printf_i+0x1c0>
 8017810:	8019      	strh	r1, [r3, #0]
 8017812:	2300      	movs	r3, #0
 8017814:	6123      	str	r3, [r4, #16]
 8017816:	4615      	mov	r5, r2
 8017818:	e7bc      	b.n	8017794 <_printf_i+0x14c>
 801781a:	682b      	ldr	r3, [r5, #0]
 801781c:	1d1a      	adds	r2, r3, #4
 801781e:	602a      	str	r2, [r5, #0]
 8017820:	681d      	ldr	r5, [r3, #0]
 8017822:	6862      	ldr	r2, [r4, #4]
 8017824:	2100      	movs	r1, #0
 8017826:	4628      	mov	r0, r5
 8017828:	f7e8 fd72 	bl	8000310 <memchr>
 801782c:	b108      	cbz	r0, 8017832 <_printf_i+0x1ea>
 801782e:	1b40      	subs	r0, r0, r5
 8017830:	6060      	str	r0, [r4, #4]
 8017832:	6863      	ldr	r3, [r4, #4]
 8017834:	6123      	str	r3, [r4, #16]
 8017836:	2300      	movs	r3, #0
 8017838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801783c:	e7aa      	b.n	8017794 <_printf_i+0x14c>
 801783e:	6923      	ldr	r3, [r4, #16]
 8017840:	462a      	mov	r2, r5
 8017842:	4649      	mov	r1, r9
 8017844:	4640      	mov	r0, r8
 8017846:	47d0      	blx	sl
 8017848:	3001      	adds	r0, #1
 801784a:	d0ad      	beq.n	80177a8 <_printf_i+0x160>
 801784c:	6823      	ldr	r3, [r4, #0]
 801784e:	079b      	lsls	r3, r3, #30
 8017850:	d413      	bmi.n	801787a <_printf_i+0x232>
 8017852:	68e0      	ldr	r0, [r4, #12]
 8017854:	9b03      	ldr	r3, [sp, #12]
 8017856:	4298      	cmp	r0, r3
 8017858:	bfb8      	it	lt
 801785a:	4618      	movlt	r0, r3
 801785c:	e7a6      	b.n	80177ac <_printf_i+0x164>
 801785e:	2301      	movs	r3, #1
 8017860:	4632      	mov	r2, r6
 8017862:	4649      	mov	r1, r9
 8017864:	4640      	mov	r0, r8
 8017866:	47d0      	blx	sl
 8017868:	3001      	adds	r0, #1
 801786a:	d09d      	beq.n	80177a8 <_printf_i+0x160>
 801786c:	3501      	adds	r5, #1
 801786e:	68e3      	ldr	r3, [r4, #12]
 8017870:	9903      	ldr	r1, [sp, #12]
 8017872:	1a5b      	subs	r3, r3, r1
 8017874:	42ab      	cmp	r3, r5
 8017876:	dcf2      	bgt.n	801785e <_printf_i+0x216>
 8017878:	e7eb      	b.n	8017852 <_printf_i+0x20a>
 801787a:	2500      	movs	r5, #0
 801787c:	f104 0619 	add.w	r6, r4, #25
 8017880:	e7f5      	b.n	801786e <_printf_i+0x226>
 8017882:	bf00      	nop
 8017884:	0801c806 	.word	0x0801c806
 8017888:	0801c817 	.word	0x0801c817

0801788c <_scanf_float>:
 801788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017890:	b087      	sub	sp, #28
 8017892:	4617      	mov	r7, r2
 8017894:	9303      	str	r3, [sp, #12]
 8017896:	688b      	ldr	r3, [r1, #8]
 8017898:	1e5a      	subs	r2, r3, #1
 801789a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801789e:	bf83      	ittte	hi
 80178a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80178a4:	195b      	addhi	r3, r3, r5
 80178a6:	9302      	strhi	r3, [sp, #8]
 80178a8:	2300      	movls	r3, #0
 80178aa:	bf86      	itte	hi
 80178ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80178b0:	608b      	strhi	r3, [r1, #8]
 80178b2:	9302      	strls	r3, [sp, #8]
 80178b4:	680b      	ldr	r3, [r1, #0]
 80178b6:	468b      	mov	fp, r1
 80178b8:	2500      	movs	r5, #0
 80178ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80178be:	f84b 3b1c 	str.w	r3, [fp], #28
 80178c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80178c6:	4680      	mov	r8, r0
 80178c8:	460c      	mov	r4, r1
 80178ca:	465e      	mov	r6, fp
 80178cc:	46aa      	mov	sl, r5
 80178ce:	46a9      	mov	r9, r5
 80178d0:	9501      	str	r5, [sp, #4]
 80178d2:	68a2      	ldr	r2, [r4, #8]
 80178d4:	b152      	cbz	r2, 80178ec <_scanf_float+0x60>
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	781b      	ldrb	r3, [r3, #0]
 80178da:	2b4e      	cmp	r3, #78	; 0x4e
 80178dc:	d864      	bhi.n	80179a8 <_scanf_float+0x11c>
 80178de:	2b40      	cmp	r3, #64	; 0x40
 80178e0:	d83c      	bhi.n	801795c <_scanf_float+0xd0>
 80178e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80178e6:	b2c8      	uxtb	r0, r1
 80178e8:	280e      	cmp	r0, #14
 80178ea:	d93a      	bls.n	8017962 <_scanf_float+0xd6>
 80178ec:	f1b9 0f00 	cmp.w	r9, #0
 80178f0:	d003      	beq.n	80178fa <_scanf_float+0x6e>
 80178f2:	6823      	ldr	r3, [r4, #0]
 80178f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80178f8:	6023      	str	r3, [r4, #0]
 80178fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80178fe:	f1ba 0f01 	cmp.w	sl, #1
 8017902:	f200 8113 	bhi.w	8017b2c <_scanf_float+0x2a0>
 8017906:	455e      	cmp	r6, fp
 8017908:	f200 8105 	bhi.w	8017b16 <_scanf_float+0x28a>
 801790c:	2501      	movs	r5, #1
 801790e:	4628      	mov	r0, r5
 8017910:	b007      	add	sp, #28
 8017912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017916:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801791a:	2a0d      	cmp	r2, #13
 801791c:	d8e6      	bhi.n	80178ec <_scanf_float+0x60>
 801791e:	a101      	add	r1, pc, #4	; (adr r1, 8017924 <_scanf_float+0x98>)
 8017920:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017924:	08017a63 	.word	0x08017a63
 8017928:	080178ed 	.word	0x080178ed
 801792c:	080178ed 	.word	0x080178ed
 8017930:	080178ed 	.word	0x080178ed
 8017934:	08017ac3 	.word	0x08017ac3
 8017938:	08017a9b 	.word	0x08017a9b
 801793c:	080178ed 	.word	0x080178ed
 8017940:	080178ed 	.word	0x080178ed
 8017944:	08017a71 	.word	0x08017a71
 8017948:	080178ed 	.word	0x080178ed
 801794c:	080178ed 	.word	0x080178ed
 8017950:	080178ed 	.word	0x080178ed
 8017954:	080178ed 	.word	0x080178ed
 8017958:	08017a29 	.word	0x08017a29
 801795c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017960:	e7db      	b.n	801791a <_scanf_float+0x8e>
 8017962:	290e      	cmp	r1, #14
 8017964:	d8c2      	bhi.n	80178ec <_scanf_float+0x60>
 8017966:	a001      	add	r0, pc, #4	; (adr r0, 801796c <_scanf_float+0xe0>)
 8017968:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801796c:	08017a1b 	.word	0x08017a1b
 8017970:	080178ed 	.word	0x080178ed
 8017974:	08017a1b 	.word	0x08017a1b
 8017978:	08017aaf 	.word	0x08017aaf
 801797c:	080178ed 	.word	0x080178ed
 8017980:	080179c9 	.word	0x080179c9
 8017984:	08017a05 	.word	0x08017a05
 8017988:	08017a05 	.word	0x08017a05
 801798c:	08017a05 	.word	0x08017a05
 8017990:	08017a05 	.word	0x08017a05
 8017994:	08017a05 	.word	0x08017a05
 8017998:	08017a05 	.word	0x08017a05
 801799c:	08017a05 	.word	0x08017a05
 80179a0:	08017a05 	.word	0x08017a05
 80179a4:	08017a05 	.word	0x08017a05
 80179a8:	2b6e      	cmp	r3, #110	; 0x6e
 80179aa:	d809      	bhi.n	80179c0 <_scanf_float+0x134>
 80179ac:	2b60      	cmp	r3, #96	; 0x60
 80179ae:	d8b2      	bhi.n	8017916 <_scanf_float+0x8a>
 80179b0:	2b54      	cmp	r3, #84	; 0x54
 80179b2:	d077      	beq.n	8017aa4 <_scanf_float+0x218>
 80179b4:	2b59      	cmp	r3, #89	; 0x59
 80179b6:	d199      	bne.n	80178ec <_scanf_float+0x60>
 80179b8:	2d07      	cmp	r5, #7
 80179ba:	d197      	bne.n	80178ec <_scanf_float+0x60>
 80179bc:	2508      	movs	r5, #8
 80179be:	e029      	b.n	8017a14 <_scanf_float+0x188>
 80179c0:	2b74      	cmp	r3, #116	; 0x74
 80179c2:	d06f      	beq.n	8017aa4 <_scanf_float+0x218>
 80179c4:	2b79      	cmp	r3, #121	; 0x79
 80179c6:	e7f6      	b.n	80179b6 <_scanf_float+0x12a>
 80179c8:	6821      	ldr	r1, [r4, #0]
 80179ca:	05c8      	lsls	r0, r1, #23
 80179cc:	d51a      	bpl.n	8017a04 <_scanf_float+0x178>
 80179ce:	9b02      	ldr	r3, [sp, #8]
 80179d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80179d4:	6021      	str	r1, [r4, #0]
 80179d6:	f109 0901 	add.w	r9, r9, #1
 80179da:	b11b      	cbz	r3, 80179e4 <_scanf_float+0x158>
 80179dc:	3b01      	subs	r3, #1
 80179de:	3201      	adds	r2, #1
 80179e0:	9302      	str	r3, [sp, #8]
 80179e2:	60a2      	str	r2, [r4, #8]
 80179e4:	68a3      	ldr	r3, [r4, #8]
 80179e6:	3b01      	subs	r3, #1
 80179e8:	60a3      	str	r3, [r4, #8]
 80179ea:	6923      	ldr	r3, [r4, #16]
 80179ec:	3301      	adds	r3, #1
 80179ee:	6123      	str	r3, [r4, #16]
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	3b01      	subs	r3, #1
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	607b      	str	r3, [r7, #4]
 80179f8:	f340 8084 	ble.w	8017b04 <_scanf_float+0x278>
 80179fc:	683b      	ldr	r3, [r7, #0]
 80179fe:	3301      	adds	r3, #1
 8017a00:	603b      	str	r3, [r7, #0]
 8017a02:	e766      	b.n	80178d2 <_scanf_float+0x46>
 8017a04:	eb1a 0f05 	cmn.w	sl, r5
 8017a08:	f47f af70 	bne.w	80178ec <_scanf_float+0x60>
 8017a0c:	6822      	ldr	r2, [r4, #0]
 8017a0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017a12:	6022      	str	r2, [r4, #0]
 8017a14:	f806 3b01 	strb.w	r3, [r6], #1
 8017a18:	e7e4      	b.n	80179e4 <_scanf_float+0x158>
 8017a1a:	6822      	ldr	r2, [r4, #0]
 8017a1c:	0610      	lsls	r0, r2, #24
 8017a1e:	f57f af65 	bpl.w	80178ec <_scanf_float+0x60>
 8017a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017a26:	e7f4      	b.n	8017a12 <_scanf_float+0x186>
 8017a28:	f1ba 0f00 	cmp.w	sl, #0
 8017a2c:	d10e      	bne.n	8017a4c <_scanf_float+0x1c0>
 8017a2e:	f1b9 0f00 	cmp.w	r9, #0
 8017a32:	d10e      	bne.n	8017a52 <_scanf_float+0x1c6>
 8017a34:	6822      	ldr	r2, [r4, #0]
 8017a36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017a3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017a3e:	d108      	bne.n	8017a52 <_scanf_float+0x1c6>
 8017a40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017a44:	6022      	str	r2, [r4, #0]
 8017a46:	f04f 0a01 	mov.w	sl, #1
 8017a4a:	e7e3      	b.n	8017a14 <_scanf_float+0x188>
 8017a4c:	f1ba 0f02 	cmp.w	sl, #2
 8017a50:	d055      	beq.n	8017afe <_scanf_float+0x272>
 8017a52:	2d01      	cmp	r5, #1
 8017a54:	d002      	beq.n	8017a5c <_scanf_float+0x1d0>
 8017a56:	2d04      	cmp	r5, #4
 8017a58:	f47f af48 	bne.w	80178ec <_scanf_float+0x60>
 8017a5c:	3501      	adds	r5, #1
 8017a5e:	b2ed      	uxtb	r5, r5
 8017a60:	e7d8      	b.n	8017a14 <_scanf_float+0x188>
 8017a62:	f1ba 0f01 	cmp.w	sl, #1
 8017a66:	f47f af41 	bne.w	80178ec <_scanf_float+0x60>
 8017a6a:	f04f 0a02 	mov.w	sl, #2
 8017a6e:	e7d1      	b.n	8017a14 <_scanf_float+0x188>
 8017a70:	b97d      	cbnz	r5, 8017a92 <_scanf_float+0x206>
 8017a72:	f1b9 0f00 	cmp.w	r9, #0
 8017a76:	f47f af3c 	bne.w	80178f2 <_scanf_float+0x66>
 8017a7a:	6822      	ldr	r2, [r4, #0]
 8017a7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017a80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017a84:	f47f af39 	bne.w	80178fa <_scanf_float+0x6e>
 8017a88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017a8c:	6022      	str	r2, [r4, #0]
 8017a8e:	2501      	movs	r5, #1
 8017a90:	e7c0      	b.n	8017a14 <_scanf_float+0x188>
 8017a92:	2d03      	cmp	r5, #3
 8017a94:	d0e2      	beq.n	8017a5c <_scanf_float+0x1d0>
 8017a96:	2d05      	cmp	r5, #5
 8017a98:	e7de      	b.n	8017a58 <_scanf_float+0x1cc>
 8017a9a:	2d02      	cmp	r5, #2
 8017a9c:	f47f af26 	bne.w	80178ec <_scanf_float+0x60>
 8017aa0:	2503      	movs	r5, #3
 8017aa2:	e7b7      	b.n	8017a14 <_scanf_float+0x188>
 8017aa4:	2d06      	cmp	r5, #6
 8017aa6:	f47f af21 	bne.w	80178ec <_scanf_float+0x60>
 8017aaa:	2507      	movs	r5, #7
 8017aac:	e7b2      	b.n	8017a14 <_scanf_float+0x188>
 8017aae:	6822      	ldr	r2, [r4, #0]
 8017ab0:	0591      	lsls	r1, r2, #22
 8017ab2:	f57f af1b 	bpl.w	80178ec <_scanf_float+0x60>
 8017ab6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017aba:	6022      	str	r2, [r4, #0]
 8017abc:	f8cd 9004 	str.w	r9, [sp, #4]
 8017ac0:	e7a8      	b.n	8017a14 <_scanf_float+0x188>
 8017ac2:	6822      	ldr	r2, [r4, #0]
 8017ac4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017ac8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017acc:	d006      	beq.n	8017adc <_scanf_float+0x250>
 8017ace:	0550      	lsls	r0, r2, #21
 8017ad0:	f57f af0c 	bpl.w	80178ec <_scanf_float+0x60>
 8017ad4:	f1b9 0f00 	cmp.w	r9, #0
 8017ad8:	f43f af0f 	beq.w	80178fa <_scanf_float+0x6e>
 8017adc:	0591      	lsls	r1, r2, #22
 8017ade:	bf58      	it	pl
 8017ae0:	9901      	ldrpl	r1, [sp, #4]
 8017ae2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017ae6:	bf58      	it	pl
 8017ae8:	eba9 0101 	subpl.w	r1, r9, r1
 8017aec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017af0:	bf58      	it	pl
 8017af2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017af6:	6022      	str	r2, [r4, #0]
 8017af8:	f04f 0900 	mov.w	r9, #0
 8017afc:	e78a      	b.n	8017a14 <_scanf_float+0x188>
 8017afe:	f04f 0a03 	mov.w	sl, #3
 8017b02:	e787      	b.n	8017a14 <_scanf_float+0x188>
 8017b04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017b08:	4639      	mov	r1, r7
 8017b0a:	4640      	mov	r0, r8
 8017b0c:	4798      	blx	r3
 8017b0e:	2800      	cmp	r0, #0
 8017b10:	f43f aedf 	beq.w	80178d2 <_scanf_float+0x46>
 8017b14:	e6ea      	b.n	80178ec <_scanf_float+0x60>
 8017b16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017b1e:	463a      	mov	r2, r7
 8017b20:	4640      	mov	r0, r8
 8017b22:	4798      	blx	r3
 8017b24:	6923      	ldr	r3, [r4, #16]
 8017b26:	3b01      	subs	r3, #1
 8017b28:	6123      	str	r3, [r4, #16]
 8017b2a:	e6ec      	b.n	8017906 <_scanf_float+0x7a>
 8017b2c:	1e6b      	subs	r3, r5, #1
 8017b2e:	2b06      	cmp	r3, #6
 8017b30:	d825      	bhi.n	8017b7e <_scanf_float+0x2f2>
 8017b32:	2d02      	cmp	r5, #2
 8017b34:	d836      	bhi.n	8017ba4 <_scanf_float+0x318>
 8017b36:	455e      	cmp	r6, fp
 8017b38:	f67f aee8 	bls.w	801790c <_scanf_float+0x80>
 8017b3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017b44:	463a      	mov	r2, r7
 8017b46:	4640      	mov	r0, r8
 8017b48:	4798      	blx	r3
 8017b4a:	6923      	ldr	r3, [r4, #16]
 8017b4c:	3b01      	subs	r3, #1
 8017b4e:	6123      	str	r3, [r4, #16]
 8017b50:	e7f1      	b.n	8017b36 <_scanf_float+0x2aa>
 8017b52:	9802      	ldr	r0, [sp, #8]
 8017b54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b58:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017b5c:	9002      	str	r0, [sp, #8]
 8017b5e:	463a      	mov	r2, r7
 8017b60:	4640      	mov	r0, r8
 8017b62:	4798      	blx	r3
 8017b64:	6923      	ldr	r3, [r4, #16]
 8017b66:	3b01      	subs	r3, #1
 8017b68:	6123      	str	r3, [r4, #16]
 8017b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b6e:	fa5f fa8a 	uxtb.w	sl, sl
 8017b72:	f1ba 0f02 	cmp.w	sl, #2
 8017b76:	d1ec      	bne.n	8017b52 <_scanf_float+0x2c6>
 8017b78:	3d03      	subs	r5, #3
 8017b7a:	b2ed      	uxtb	r5, r5
 8017b7c:	1b76      	subs	r6, r6, r5
 8017b7e:	6823      	ldr	r3, [r4, #0]
 8017b80:	05da      	lsls	r2, r3, #23
 8017b82:	d52f      	bpl.n	8017be4 <_scanf_float+0x358>
 8017b84:	055b      	lsls	r3, r3, #21
 8017b86:	d510      	bpl.n	8017baa <_scanf_float+0x31e>
 8017b88:	455e      	cmp	r6, fp
 8017b8a:	f67f aebf 	bls.w	801790c <_scanf_float+0x80>
 8017b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017b96:	463a      	mov	r2, r7
 8017b98:	4640      	mov	r0, r8
 8017b9a:	4798      	blx	r3
 8017b9c:	6923      	ldr	r3, [r4, #16]
 8017b9e:	3b01      	subs	r3, #1
 8017ba0:	6123      	str	r3, [r4, #16]
 8017ba2:	e7f1      	b.n	8017b88 <_scanf_float+0x2fc>
 8017ba4:	46aa      	mov	sl, r5
 8017ba6:	9602      	str	r6, [sp, #8]
 8017ba8:	e7df      	b.n	8017b6a <_scanf_float+0x2de>
 8017baa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017bae:	6923      	ldr	r3, [r4, #16]
 8017bb0:	2965      	cmp	r1, #101	; 0x65
 8017bb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8017bb6:	f106 35ff 	add.w	r5, r6, #4294967295
 8017bba:	6123      	str	r3, [r4, #16]
 8017bbc:	d00c      	beq.n	8017bd8 <_scanf_float+0x34c>
 8017bbe:	2945      	cmp	r1, #69	; 0x45
 8017bc0:	d00a      	beq.n	8017bd8 <_scanf_float+0x34c>
 8017bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017bc6:	463a      	mov	r2, r7
 8017bc8:	4640      	mov	r0, r8
 8017bca:	4798      	blx	r3
 8017bcc:	6923      	ldr	r3, [r4, #16]
 8017bce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017bd2:	3b01      	subs	r3, #1
 8017bd4:	1eb5      	subs	r5, r6, #2
 8017bd6:	6123      	str	r3, [r4, #16]
 8017bd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017bdc:	463a      	mov	r2, r7
 8017bde:	4640      	mov	r0, r8
 8017be0:	4798      	blx	r3
 8017be2:	462e      	mov	r6, r5
 8017be4:	6825      	ldr	r5, [r4, #0]
 8017be6:	f015 0510 	ands.w	r5, r5, #16
 8017bea:	d14d      	bne.n	8017c88 <_scanf_float+0x3fc>
 8017bec:	7035      	strb	r5, [r6, #0]
 8017bee:	6823      	ldr	r3, [r4, #0]
 8017bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017bf8:	d11a      	bne.n	8017c30 <_scanf_float+0x3a4>
 8017bfa:	9b01      	ldr	r3, [sp, #4]
 8017bfc:	454b      	cmp	r3, r9
 8017bfe:	eba3 0209 	sub.w	r2, r3, r9
 8017c02:	d122      	bne.n	8017c4a <_scanf_float+0x3be>
 8017c04:	2200      	movs	r2, #0
 8017c06:	4659      	mov	r1, fp
 8017c08:	4640      	mov	r0, r8
 8017c0a:	f002 fb67 	bl	801a2dc <_strtod_r>
 8017c0e:	9b03      	ldr	r3, [sp, #12]
 8017c10:	6821      	ldr	r1, [r4, #0]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	f011 0f02 	tst.w	r1, #2
 8017c18:	f103 0204 	add.w	r2, r3, #4
 8017c1c:	d020      	beq.n	8017c60 <_scanf_float+0x3d4>
 8017c1e:	9903      	ldr	r1, [sp, #12]
 8017c20:	600a      	str	r2, [r1, #0]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	ed83 0b00 	vstr	d0, [r3]
 8017c28:	68e3      	ldr	r3, [r4, #12]
 8017c2a:	3301      	adds	r3, #1
 8017c2c:	60e3      	str	r3, [r4, #12]
 8017c2e:	e66e      	b.n	801790e <_scanf_float+0x82>
 8017c30:	9b04      	ldr	r3, [sp, #16]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d0e6      	beq.n	8017c04 <_scanf_float+0x378>
 8017c36:	9905      	ldr	r1, [sp, #20]
 8017c38:	230a      	movs	r3, #10
 8017c3a:	462a      	mov	r2, r5
 8017c3c:	3101      	adds	r1, #1
 8017c3e:	4640      	mov	r0, r8
 8017c40:	f002 fbd4 	bl	801a3ec <_strtol_r>
 8017c44:	9b04      	ldr	r3, [sp, #16]
 8017c46:	9e05      	ldr	r6, [sp, #20]
 8017c48:	1ac2      	subs	r2, r0, r3
 8017c4a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017c4e:	429e      	cmp	r6, r3
 8017c50:	bf28      	it	cs
 8017c52:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017c56:	490d      	ldr	r1, [pc, #52]	; (8017c8c <_scanf_float+0x400>)
 8017c58:	4630      	mov	r0, r6
 8017c5a:	f000 f8dd 	bl	8017e18 <siprintf>
 8017c5e:	e7d1      	b.n	8017c04 <_scanf_float+0x378>
 8017c60:	f011 0f04 	tst.w	r1, #4
 8017c64:	9903      	ldr	r1, [sp, #12]
 8017c66:	600a      	str	r2, [r1, #0]
 8017c68:	d1db      	bne.n	8017c22 <_scanf_float+0x396>
 8017c6a:	eeb4 0b40 	vcmp.f64	d0, d0
 8017c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c72:	681e      	ldr	r6, [r3, #0]
 8017c74:	d705      	bvc.n	8017c82 <_scanf_float+0x3f6>
 8017c76:	4806      	ldr	r0, [pc, #24]	; (8017c90 <_scanf_float+0x404>)
 8017c78:	f000 f9c0 	bl	8017ffc <nanf>
 8017c7c:	ed86 0a00 	vstr	s0, [r6]
 8017c80:	e7d2      	b.n	8017c28 <_scanf_float+0x39c>
 8017c82:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017c86:	e7f9      	b.n	8017c7c <_scanf_float+0x3f0>
 8017c88:	2500      	movs	r5, #0
 8017c8a:	e640      	b.n	801790e <_scanf_float+0x82>
 8017c8c:	0801c828 	.word	0x0801c828
 8017c90:	0801cbbd 	.word	0x0801cbbd

08017c94 <std>:
 8017c94:	2300      	movs	r3, #0
 8017c96:	b510      	push	{r4, lr}
 8017c98:	4604      	mov	r4, r0
 8017c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8017c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017ca2:	6083      	str	r3, [r0, #8]
 8017ca4:	8181      	strh	r1, [r0, #12]
 8017ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8017ca8:	81c2      	strh	r2, [r0, #14]
 8017caa:	6183      	str	r3, [r0, #24]
 8017cac:	4619      	mov	r1, r3
 8017cae:	2208      	movs	r2, #8
 8017cb0:	305c      	adds	r0, #92	; 0x5c
 8017cb2:	f000 f914 	bl	8017ede <memset>
 8017cb6:	4b0d      	ldr	r3, [pc, #52]	; (8017cec <std+0x58>)
 8017cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8017cba:	4b0d      	ldr	r3, [pc, #52]	; (8017cf0 <std+0x5c>)
 8017cbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8017cbe:	4b0d      	ldr	r3, [pc, #52]	; (8017cf4 <std+0x60>)
 8017cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017cc2:	4b0d      	ldr	r3, [pc, #52]	; (8017cf8 <std+0x64>)
 8017cc4:	6323      	str	r3, [r4, #48]	; 0x30
 8017cc6:	4b0d      	ldr	r3, [pc, #52]	; (8017cfc <std+0x68>)
 8017cc8:	6224      	str	r4, [r4, #32]
 8017cca:	429c      	cmp	r4, r3
 8017ccc:	d006      	beq.n	8017cdc <std+0x48>
 8017cce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017cd2:	4294      	cmp	r4, r2
 8017cd4:	d002      	beq.n	8017cdc <std+0x48>
 8017cd6:	33d0      	adds	r3, #208	; 0xd0
 8017cd8:	429c      	cmp	r4, r3
 8017cda:	d105      	bne.n	8017ce8 <std+0x54>
 8017cdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ce4:	f000 b978 	b.w	8017fd8 <__retarget_lock_init_recursive>
 8017ce8:	bd10      	pop	{r4, pc}
 8017cea:	bf00      	nop
 8017cec:	08017e59 	.word	0x08017e59
 8017cf0:	08017e7b 	.word	0x08017e7b
 8017cf4:	08017eb3 	.word	0x08017eb3
 8017cf8:	08017ed7 	.word	0x08017ed7
 8017cfc:	24002998 	.word	0x24002998

08017d00 <stdio_exit_handler>:
 8017d00:	4a02      	ldr	r2, [pc, #8]	; (8017d0c <stdio_exit_handler+0xc>)
 8017d02:	4903      	ldr	r1, [pc, #12]	; (8017d10 <stdio_exit_handler+0x10>)
 8017d04:	4803      	ldr	r0, [pc, #12]	; (8017d14 <stdio_exit_handler+0x14>)
 8017d06:	f000 b869 	b.w	8017ddc <_fwalk_sglue>
 8017d0a:	bf00      	nop
 8017d0c:	24000100 	.word	0x24000100
 8017d10:	0801a7ad 	.word	0x0801a7ad
 8017d14:	2400010c 	.word	0x2400010c

08017d18 <cleanup_stdio>:
 8017d18:	6841      	ldr	r1, [r0, #4]
 8017d1a:	4b0c      	ldr	r3, [pc, #48]	; (8017d4c <cleanup_stdio+0x34>)
 8017d1c:	4299      	cmp	r1, r3
 8017d1e:	b510      	push	{r4, lr}
 8017d20:	4604      	mov	r4, r0
 8017d22:	d001      	beq.n	8017d28 <cleanup_stdio+0x10>
 8017d24:	f002 fd42 	bl	801a7ac <_fflush_r>
 8017d28:	68a1      	ldr	r1, [r4, #8]
 8017d2a:	4b09      	ldr	r3, [pc, #36]	; (8017d50 <cleanup_stdio+0x38>)
 8017d2c:	4299      	cmp	r1, r3
 8017d2e:	d002      	beq.n	8017d36 <cleanup_stdio+0x1e>
 8017d30:	4620      	mov	r0, r4
 8017d32:	f002 fd3b 	bl	801a7ac <_fflush_r>
 8017d36:	68e1      	ldr	r1, [r4, #12]
 8017d38:	4b06      	ldr	r3, [pc, #24]	; (8017d54 <cleanup_stdio+0x3c>)
 8017d3a:	4299      	cmp	r1, r3
 8017d3c:	d004      	beq.n	8017d48 <cleanup_stdio+0x30>
 8017d3e:	4620      	mov	r0, r4
 8017d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d44:	f002 bd32 	b.w	801a7ac <_fflush_r>
 8017d48:	bd10      	pop	{r4, pc}
 8017d4a:	bf00      	nop
 8017d4c:	24002998 	.word	0x24002998
 8017d50:	24002a00 	.word	0x24002a00
 8017d54:	24002a68 	.word	0x24002a68

08017d58 <global_stdio_init.part.0>:
 8017d58:	b510      	push	{r4, lr}
 8017d5a:	4b0b      	ldr	r3, [pc, #44]	; (8017d88 <global_stdio_init.part.0+0x30>)
 8017d5c:	4c0b      	ldr	r4, [pc, #44]	; (8017d8c <global_stdio_init.part.0+0x34>)
 8017d5e:	4a0c      	ldr	r2, [pc, #48]	; (8017d90 <global_stdio_init.part.0+0x38>)
 8017d60:	601a      	str	r2, [r3, #0]
 8017d62:	4620      	mov	r0, r4
 8017d64:	2200      	movs	r2, #0
 8017d66:	2104      	movs	r1, #4
 8017d68:	f7ff ff94 	bl	8017c94 <std>
 8017d6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017d70:	2201      	movs	r2, #1
 8017d72:	2109      	movs	r1, #9
 8017d74:	f7ff ff8e 	bl	8017c94 <std>
 8017d78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017d7c:	2202      	movs	r2, #2
 8017d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d82:	2112      	movs	r1, #18
 8017d84:	f7ff bf86 	b.w	8017c94 <std>
 8017d88:	24002ad0 	.word	0x24002ad0
 8017d8c:	24002998 	.word	0x24002998
 8017d90:	08017d01 	.word	0x08017d01

08017d94 <__sfp_lock_acquire>:
 8017d94:	4801      	ldr	r0, [pc, #4]	; (8017d9c <__sfp_lock_acquire+0x8>)
 8017d96:	f000 b920 	b.w	8017fda <__retarget_lock_acquire_recursive>
 8017d9a:	bf00      	nop
 8017d9c:	24002ad9 	.word	0x24002ad9

08017da0 <__sfp_lock_release>:
 8017da0:	4801      	ldr	r0, [pc, #4]	; (8017da8 <__sfp_lock_release+0x8>)
 8017da2:	f000 b91b 	b.w	8017fdc <__retarget_lock_release_recursive>
 8017da6:	bf00      	nop
 8017da8:	24002ad9 	.word	0x24002ad9

08017dac <__sinit>:
 8017dac:	b510      	push	{r4, lr}
 8017dae:	4604      	mov	r4, r0
 8017db0:	f7ff fff0 	bl	8017d94 <__sfp_lock_acquire>
 8017db4:	6a23      	ldr	r3, [r4, #32]
 8017db6:	b11b      	cbz	r3, 8017dc0 <__sinit+0x14>
 8017db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017dbc:	f7ff bff0 	b.w	8017da0 <__sfp_lock_release>
 8017dc0:	4b04      	ldr	r3, [pc, #16]	; (8017dd4 <__sinit+0x28>)
 8017dc2:	6223      	str	r3, [r4, #32]
 8017dc4:	4b04      	ldr	r3, [pc, #16]	; (8017dd8 <__sinit+0x2c>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d1f5      	bne.n	8017db8 <__sinit+0xc>
 8017dcc:	f7ff ffc4 	bl	8017d58 <global_stdio_init.part.0>
 8017dd0:	e7f2      	b.n	8017db8 <__sinit+0xc>
 8017dd2:	bf00      	nop
 8017dd4:	08017d19 	.word	0x08017d19
 8017dd8:	24002ad0 	.word	0x24002ad0

08017ddc <_fwalk_sglue>:
 8017ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017de0:	4607      	mov	r7, r0
 8017de2:	4688      	mov	r8, r1
 8017de4:	4614      	mov	r4, r2
 8017de6:	2600      	movs	r6, #0
 8017de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017dec:	f1b9 0901 	subs.w	r9, r9, #1
 8017df0:	d505      	bpl.n	8017dfe <_fwalk_sglue+0x22>
 8017df2:	6824      	ldr	r4, [r4, #0]
 8017df4:	2c00      	cmp	r4, #0
 8017df6:	d1f7      	bne.n	8017de8 <_fwalk_sglue+0xc>
 8017df8:	4630      	mov	r0, r6
 8017dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dfe:	89ab      	ldrh	r3, [r5, #12]
 8017e00:	2b01      	cmp	r3, #1
 8017e02:	d907      	bls.n	8017e14 <_fwalk_sglue+0x38>
 8017e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017e08:	3301      	adds	r3, #1
 8017e0a:	d003      	beq.n	8017e14 <_fwalk_sglue+0x38>
 8017e0c:	4629      	mov	r1, r5
 8017e0e:	4638      	mov	r0, r7
 8017e10:	47c0      	blx	r8
 8017e12:	4306      	orrs	r6, r0
 8017e14:	3568      	adds	r5, #104	; 0x68
 8017e16:	e7e9      	b.n	8017dec <_fwalk_sglue+0x10>

08017e18 <siprintf>:
 8017e18:	b40e      	push	{r1, r2, r3}
 8017e1a:	b500      	push	{lr}
 8017e1c:	b09c      	sub	sp, #112	; 0x70
 8017e1e:	ab1d      	add	r3, sp, #116	; 0x74
 8017e20:	9002      	str	r0, [sp, #8]
 8017e22:	9006      	str	r0, [sp, #24]
 8017e24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017e28:	4809      	ldr	r0, [pc, #36]	; (8017e50 <siprintf+0x38>)
 8017e2a:	9107      	str	r1, [sp, #28]
 8017e2c:	9104      	str	r1, [sp, #16]
 8017e2e:	4909      	ldr	r1, [pc, #36]	; (8017e54 <siprintf+0x3c>)
 8017e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e34:	9105      	str	r1, [sp, #20]
 8017e36:	6800      	ldr	r0, [r0, #0]
 8017e38:	9301      	str	r3, [sp, #4]
 8017e3a:	a902      	add	r1, sp, #8
 8017e3c:	f002 fb32 	bl	801a4a4 <_svfiprintf_r>
 8017e40:	9b02      	ldr	r3, [sp, #8]
 8017e42:	2200      	movs	r2, #0
 8017e44:	701a      	strb	r2, [r3, #0]
 8017e46:	b01c      	add	sp, #112	; 0x70
 8017e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e4c:	b003      	add	sp, #12
 8017e4e:	4770      	bx	lr
 8017e50:	24000158 	.word	0x24000158
 8017e54:	ffff0208 	.word	0xffff0208

08017e58 <__sread>:
 8017e58:	b510      	push	{r4, lr}
 8017e5a:	460c      	mov	r4, r1
 8017e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e60:	f000 f86c 	bl	8017f3c <_read_r>
 8017e64:	2800      	cmp	r0, #0
 8017e66:	bfab      	itete	ge
 8017e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8017e6c:	181b      	addge	r3, r3, r0
 8017e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017e72:	bfac      	ite	ge
 8017e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8017e76:	81a3      	strhlt	r3, [r4, #12]
 8017e78:	bd10      	pop	{r4, pc}

08017e7a <__swrite>:
 8017e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e7e:	461f      	mov	r7, r3
 8017e80:	898b      	ldrh	r3, [r1, #12]
 8017e82:	05db      	lsls	r3, r3, #23
 8017e84:	4605      	mov	r5, r0
 8017e86:	460c      	mov	r4, r1
 8017e88:	4616      	mov	r6, r2
 8017e8a:	d505      	bpl.n	8017e98 <__swrite+0x1e>
 8017e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e90:	2302      	movs	r3, #2
 8017e92:	2200      	movs	r2, #0
 8017e94:	f000 f840 	bl	8017f18 <_lseek_r>
 8017e98:	89a3      	ldrh	r3, [r4, #12]
 8017e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017ea2:	81a3      	strh	r3, [r4, #12]
 8017ea4:	4632      	mov	r2, r6
 8017ea6:	463b      	mov	r3, r7
 8017ea8:	4628      	mov	r0, r5
 8017eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017eae:	f000 b857 	b.w	8017f60 <_write_r>

08017eb2 <__sseek>:
 8017eb2:	b510      	push	{r4, lr}
 8017eb4:	460c      	mov	r4, r1
 8017eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017eba:	f000 f82d 	bl	8017f18 <_lseek_r>
 8017ebe:	1c43      	adds	r3, r0, #1
 8017ec0:	89a3      	ldrh	r3, [r4, #12]
 8017ec2:	bf15      	itete	ne
 8017ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8017ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017ece:	81a3      	strheq	r3, [r4, #12]
 8017ed0:	bf18      	it	ne
 8017ed2:	81a3      	strhne	r3, [r4, #12]
 8017ed4:	bd10      	pop	{r4, pc}

08017ed6 <__sclose>:
 8017ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017eda:	f000 b80d 	b.w	8017ef8 <_close_r>

08017ede <memset>:
 8017ede:	4402      	add	r2, r0
 8017ee0:	4603      	mov	r3, r0
 8017ee2:	4293      	cmp	r3, r2
 8017ee4:	d100      	bne.n	8017ee8 <memset+0xa>
 8017ee6:	4770      	bx	lr
 8017ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8017eec:	e7f9      	b.n	8017ee2 <memset+0x4>
	...

08017ef0 <_localeconv_r>:
 8017ef0:	4800      	ldr	r0, [pc, #0]	; (8017ef4 <_localeconv_r+0x4>)
 8017ef2:	4770      	bx	lr
 8017ef4:	2400024c 	.word	0x2400024c

08017ef8 <_close_r>:
 8017ef8:	b538      	push	{r3, r4, r5, lr}
 8017efa:	4d06      	ldr	r5, [pc, #24]	; (8017f14 <_close_r+0x1c>)
 8017efc:	2300      	movs	r3, #0
 8017efe:	4604      	mov	r4, r0
 8017f00:	4608      	mov	r0, r1
 8017f02:	602b      	str	r3, [r5, #0]
 8017f04:	f7ec fab7 	bl	8004476 <_close>
 8017f08:	1c43      	adds	r3, r0, #1
 8017f0a:	d102      	bne.n	8017f12 <_close_r+0x1a>
 8017f0c:	682b      	ldr	r3, [r5, #0]
 8017f0e:	b103      	cbz	r3, 8017f12 <_close_r+0x1a>
 8017f10:	6023      	str	r3, [r4, #0]
 8017f12:	bd38      	pop	{r3, r4, r5, pc}
 8017f14:	24002ad4 	.word	0x24002ad4

08017f18 <_lseek_r>:
 8017f18:	b538      	push	{r3, r4, r5, lr}
 8017f1a:	4d07      	ldr	r5, [pc, #28]	; (8017f38 <_lseek_r+0x20>)
 8017f1c:	4604      	mov	r4, r0
 8017f1e:	4608      	mov	r0, r1
 8017f20:	4611      	mov	r1, r2
 8017f22:	2200      	movs	r2, #0
 8017f24:	602a      	str	r2, [r5, #0]
 8017f26:	461a      	mov	r2, r3
 8017f28:	f7ec facc 	bl	80044c4 <_lseek>
 8017f2c:	1c43      	adds	r3, r0, #1
 8017f2e:	d102      	bne.n	8017f36 <_lseek_r+0x1e>
 8017f30:	682b      	ldr	r3, [r5, #0]
 8017f32:	b103      	cbz	r3, 8017f36 <_lseek_r+0x1e>
 8017f34:	6023      	str	r3, [r4, #0]
 8017f36:	bd38      	pop	{r3, r4, r5, pc}
 8017f38:	24002ad4 	.word	0x24002ad4

08017f3c <_read_r>:
 8017f3c:	b538      	push	{r3, r4, r5, lr}
 8017f3e:	4d07      	ldr	r5, [pc, #28]	; (8017f5c <_read_r+0x20>)
 8017f40:	4604      	mov	r4, r0
 8017f42:	4608      	mov	r0, r1
 8017f44:	4611      	mov	r1, r2
 8017f46:	2200      	movs	r2, #0
 8017f48:	602a      	str	r2, [r5, #0]
 8017f4a:	461a      	mov	r2, r3
 8017f4c:	f7ec fa5a 	bl	8004404 <_read>
 8017f50:	1c43      	adds	r3, r0, #1
 8017f52:	d102      	bne.n	8017f5a <_read_r+0x1e>
 8017f54:	682b      	ldr	r3, [r5, #0]
 8017f56:	b103      	cbz	r3, 8017f5a <_read_r+0x1e>
 8017f58:	6023      	str	r3, [r4, #0]
 8017f5a:	bd38      	pop	{r3, r4, r5, pc}
 8017f5c:	24002ad4 	.word	0x24002ad4

08017f60 <_write_r>:
 8017f60:	b538      	push	{r3, r4, r5, lr}
 8017f62:	4d07      	ldr	r5, [pc, #28]	; (8017f80 <_write_r+0x20>)
 8017f64:	4604      	mov	r4, r0
 8017f66:	4608      	mov	r0, r1
 8017f68:	4611      	mov	r1, r2
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	602a      	str	r2, [r5, #0]
 8017f6e:	461a      	mov	r2, r3
 8017f70:	f7ec fa65 	bl	800443e <_write>
 8017f74:	1c43      	adds	r3, r0, #1
 8017f76:	d102      	bne.n	8017f7e <_write_r+0x1e>
 8017f78:	682b      	ldr	r3, [r5, #0]
 8017f7a:	b103      	cbz	r3, 8017f7e <_write_r+0x1e>
 8017f7c:	6023      	str	r3, [r4, #0]
 8017f7e:	bd38      	pop	{r3, r4, r5, pc}
 8017f80:	24002ad4 	.word	0x24002ad4

08017f84 <__errno>:
 8017f84:	4b01      	ldr	r3, [pc, #4]	; (8017f8c <__errno+0x8>)
 8017f86:	6818      	ldr	r0, [r3, #0]
 8017f88:	4770      	bx	lr
 8017f8a:	bf00      	nop
 8017f8c:	24000158 	.word	0x24000158

08017f90 <__libc_init_array>:
 8017f90:	b570      	push	{r4, r5, r6, lr}
 8017f92:	4d0d      	ldr	r5, [pc, #52]	; (8017fc8 <__libc_init_array+0x38>)
 8017f94:	4c0d      	ldr	r4, [pc, #52]	; (8017fcc <__libc_init_array+0x3c>)
 8017f96:	1b64      	subs	r4, r4, r5
 8017f98:	10a4      	asrs	r4, r4, #2
 8017f9a:	2600      	movs	r6, #0
 8017f9c:	42a6      	cmp	r6, r4
 8017f9e:	d109      	bne.n	8017fb4 <__libc_init_array+0x24>
 8017fa0:	4d0b      	ldr	r5, [pc, #44]	; (8017fd0 <__libc_init_array+0x40>)
 8017fa2:	4c0c      	ldr	r4, [pc, #48]	; (8017fd4 <__libc_init_array+0x44>)
 8017fa4:	f004 fac4 	bl	801c530 <_init>
 8017fa8:	1b64      	subs	r4, r4, r5
 8017faa:	10a4      	asrs	r4, r4, #2
 8017fac:	2600      	movs	r6, #0
 8017fae:	42a6      	cmp	r6, r4
 8017fb0:	d105      	bne.n	8017fbe <__libc_init_array+0x2e>
 8017fb2:	bd70      	pop	{r4, r5, r6, pc}
 8017fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fb8:	4798      	blx	r3
 8017fba:	3601      	adds	r6, #1
 8017fbc:	e7ee      	b.n	8017f9c <__libc_init_array+0xc>
 8017fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fc2:	4798      	blx	r3
 8017fc4:	3601      	adds	r6, #1
 8017fc6:	e7f2      	b.n	8017fae <__libc_init_array+0x1e>
 8017fc8:	0801ce00 	.word	0x0801ce00
 8017fcc:	0801ce00 	.word	0x0801ce00
 8017fd0:	0801ce00 	.word	0x0801ce00
 8017fd4:	0801ce04 	.word	0x0801ce04

08017fd8 <__retarget_lock_init_recursive>:
 8017fd8:	4770      	bx	lr

08017fda <__retarget_lock_acquire_recursive>:
 8017fda:	4770      	bx	lr

08017fdc <__retarget_lock_release_recursive>:
 8017fdc:	4770      	bx	lr

08017fde <memcpy>:
 8017fde:	440a      	add	r2, r1
 8017fe0:	4291      	cmp	r1, r2
 8017fe2:	f100 33ff 	add.w	r3, r0, #4294967295
 8017fe6:	d100      	bne.n	8017fea <memcpy+0xc>
 8017fe8:	4770      	bx	lr
 8017fea:	b510      	push	{r4, lr}
 8017fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ff4:	4291      	cmp	r1, r2
 8017ff6:	d1f9      	bne.n	8017fec <memcpy+0xe>
 8017ff8:	bd10      	pop	{r4, pc}
	...

08017ffc <nanf>:
 8017ffc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018004 <nanf+0x8>
 8018000:	4770      	bx	lr
 8018002:	bf00      	nop
 8018004:	7fc00000 	.word	0x7fc00000

08018008 <quorem>:
 8018008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801800c:	6903      	ldr	r3, [r0, #16]
 801800e:	690c      	ldr	r4, [r1, #16]
 8018010:	42a3      	cmp	r3, r4
 8018012:	4607      	mov	r7, r0
 8018014:	db7e      	blt.n	8018114 <quorem+0x10c>
 8018016:	3c01      	subs	r4, #1
 8018018:	f101 0814 	add.w	r8, r1, #20
 801801c:	f100 0514 	add.w	r5, r0, #20
 8018020:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018024:	9301      	str	r3, [sp, #4]
 8018026:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801802a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801802e:	3301      	adds	r3, #1
 8018030:	429a      	cmp	r2, r3
 8018032:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018036:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801803a:	fbb2 f6f3 	udiv	r6, r2, r3
 801803e:	d331      	bcc.n	80180a4 <quorem+0x9c>
 8018040:	f04f 0e00 	mov.w	lr, #0
 8018044:	4640      	mov	r0, r8
 8018046:	46ac      	mov	ip, r5
 8018048:	46f2      	mov	sl, lr
 801804a:	f850 2b04 	ldr.w	r2, [r0], #4
 801804e:	b293      	uxth	r3, r2
 8018050:	fb06 e303 	mla	r3, r6, r3, lr
 8018054:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018058:	0c1a      	lsrs	r2, r3, #16
 801805a:	b29b      	uxth	r3, r3
 801805c:	ebaa 0303 	sub.w	r3, sl, r3
 8018060:	f8dc a000 	ldr.w	sl, [ip]
 8018064:	fa13 f38a 	uxtah	r3, r3, sl
 8018068:	fb06 220e 	mla	r2, r6, lr, r2
 801806c:	9300      	str	r3, [sp, #0]
 801806e:	9b00      	ldr	r3, [sp, #0]
 8018070:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018074:	b292      	uxth	r2, r2
 8018076:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801807a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801807e:	f8bd 3000 	ldrh.w	r3, [sp]
 8018082:	4581      	cmp	r9, r0
 8018084:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018088:	f84c 3b04 	str.w	r3, [ip], #4
 801808c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018090:	d2db      	bcs.n	801804a <quorem+0x42>
 8018092:	f855 300b 	ldr.w	r3, [r5, fp]
 8018096:	b92b      	cbnz	r3, 80180a4 <quorem+0x9c>
 8018098:	9b01      	ldr	r3, [sp, #4]
 801809a:	3b04      	subs	r3, #4
 801809c:	429d      	cmp	r5, r3
 801809e:	461a      	mov	r2, r3
 80180a0:	d32c      	bcc.n	80180fc <quorem+0xf4>
 80180a2:	613c      	str	r4, [r7, #16]
 80180a4:	4638      	mov	r0, r7
 80180a6:	f001 f969 	bl	801937c <__mcmp>
 80180aa:	2800      	cmp	r0, #0
 80180ac:	db22      	blt.n	80180f4 <quorem+0xec>
 80180ae:	3601      	adds	r6, #1
 80180b0:	4629      	mov	r1, r5
 80180b2:	2000      	movs	r0, #0
 80180b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80180b8:	f8d1 c000 	ldr.w	ip, [r1]
 80180bc:	b293      	uxth	r3, r2
 80180be:	1ac3      	subs	r3, r0, r3
 80180c0:	0c12      	lsrs	r2, r2, #16
 80180c2:	fa13 f38c 	uxtah	r3, r3, ip
 80180c6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80180ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80180ce:	b29b      	uxth	r3, r3
 80180d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80180d4:	45c1      	cmp	r9, r8
 80180d6:	f841 3b04 	str.w	r3, [r1], #4
 80180da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80180de:	d2e9      	bcs.n	80180b4 <quorem+0xac>
 80180e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80180e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80180e8:	b922      	cbnz	r2, 80180f4 <quorem+0xec>
 80180ea:	3b04      	subs	r3, #4
 80180ec:	429d      	cmp	r5, r3
 80180ee:	461a      	mov	r2, r3
 80180f0:	d30a      	bcc.n	8018108 <quorem+0x100>
 80180f2:	613c      	str	r4, [r7, #16]
 80180f4:	4630      	mov	r0, r6
 80180f6:	b003      	add	sp, #12
 80180f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180fc:	6812      	ldr	r2, [r2, #0]
 80180fe:	3b04      	subs	r3, #4
 8018100:	2a00      	cmp	r2, #0
 8018102:	d1ce      	bne.n	80180a2 <quorem+0x9a>
 8018104:	3c01      	subs	r4, #1
 8018106:	e7c9      	b.n	801809c <quorem+0x94>
 8018108:	6812      	ldr	r2, [r2, #0]
 801810a:	3b04      	subs	r3, #4
 801810c:	2a00      	cmp	r2, #0
 801810e:	d1f0      	bne.n	80180f2 <quorem+0xea>
 8018110:	3c01      	subs	r4, #1
 8018112:	e7eb      	b.n	80180ec <quorem+0xe4>
 8018114:	2000      	movs	r0, #0
 8018116:	e7ee      	b.n	80180f6 <quorem+0xee>

08018118 <_dtoa_r>:
 8018118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801811c:	ed2d 8b02 	vpush	{d8}
 8018120:	69c5      	ldr	r5, [r0, #28]
 8018122:	b091      	sub	sp, #68	; 0x44
 8018124:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018128:	ec59 8b10 	vmov	r8, r9, d0
 801812c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801812e:	9106      	str	r1, [sp, #24]
 8018130:	4606      	mov	r6, r0
 8018132:	9208      	str	r2, [sp, #32]
 8018134:	930c      	str	r3, [sp, #48]	; 0x30
 8018136:	b975      	cbnz	r5, 8018156 <_dtoa_r+0x3e>
 8018138:	2010      	movs	r0, #16
 801813a:	f000 fda5 	bl	8018c88 <malloc>
 801813e:	4602      	mov	r2, r0
 8018140:	61f0      	str	r0, [r6, #28]
 8018142:	b920      	cbnz	r0, 801814e <_dtoa_r+0x36>
 8018144:	4ba6      	ldr	r3, [pc, #664]	; (80183e0 <_dtoa_r+0x2c8>)
 8018146:	21ef      	movs	r1, #239	; 0xef
 8018148:	48a6      	ldr	r0, [pc, #664]	; (80183e4 <_dtoa_r+0x2cc>)
 801814a:	f002 fb9d 	bl	801a888 <__assert_func>
 801814e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018152:	6005      	str	r5, [r0, #0]
 8018154:	60c5      	str	r5, [r0, #12]
 8018156:	69f3      	ldr	r3, [r6, #28]
 8018158:	6819      	ldr	r1, [r3, #0]
 801815a:	b151      	cbz	r1, 8018172 <_dtoa_r+0x5a>
 801815c:	685a      	ldr	r2, [r3, #4]
 801815e:	604a      	str	r2, [r1, #4]
 8018160:	2301      	movs	r3, #1
 8018162:	4093      	lsls	r3, r2
 8018164:	608b      	str	r3, [r1, #8]
 8018166:	4630      	mov	r0, r6
 8018168:	f000 fe82 	bl	8018e70 <_Bfree>
 801816c:	69f3      	ldr	r3, [r6, #28]
 801816e:	2200      	movs	r2, #0
 8018170:	601a      	str	r2, [r3, #0]
 8018172:	f1b9 0300 	subs.w	r3, r9, #0
 8018176:	bfbb      	ittet	lt
 8018178:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801817c:	9303      	strlt	r3, [sp, #12]
 801817e:	2300      	movge	r3, #0
 8018180:	2201      	movlt	r2, #1
 8018182:	bfac      	ite	ge
 8018184:	6023      	strge	r3, [r4, #0]
 8018186:	6022      	strlt	r2, [r4, #0]
 8018188:	4b97      	ldr	r3, [pc, #604]	; (80183e8 <_dtoa_r+0x2d0>)
 801818a:	9c03      	ldr	r4, [sp, #12]
 801818c:	43a3      	bics	r3, r4
 801818e:	d11c      	bne.n	80181ca <_dtoa_r+0xb2>
 8018190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018192:	f242 730f 	movw	r3, #9999	; 0x270f
 8018196:	6013      	str	r3, [r2, #0]
 8018198:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801819c:	ea53 0308 	orrs.w	r3, r3, r8
 80181a0:	f000 84fb 	beq.w	8018b9a <_dtoa_r+0xa82>
 80181a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80181a6:	b963      	cbnz	r3, 80181c2 <_dtoa_r+0xaa>
 80181a8:	4b90      	ldr	r3, [pc, #576]	; (80183ec <_dtoa_r+0x2d4>)
 80181aa:	e020      	b.n	80181ee <_dtoa_r+0xd6>
 80181ac:	4b90      	ldr	r3, [pc, #576]	; (80183f0 <_dtoa_r+0x2d8>)
 80181ae:	9301      	str	r3, [sp, #4]
 80181b0:	3308      	adds	r3, #8
 80181b2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80181b4:	6013      	str	r3, [r2, #0]
 80181b6:	9801      	ldr	r0, [sp, #4]
 80181b8:	b011      	add	sp, #68	; 0x44
 80181ba:	ecbd 8b02 	vpop	{d8}
 80181be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181c2:	4b8a      	ldr	r3, [pc, #552]	; (80183ec <_dtoa_r+0x2d4>)
 80181c4:	9301      	str	r3, [sp, #4]
 80181c6:	3303      	adds	r3, #3
 80181c8:	e7f3      	b.n	80181b2 <_dtoa_r+0x9a>
 80181ca:	ed9d 8b02 	vldr	d8, [sp, #8]
 80181ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80181d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d6:	d10c      	bne.n	80181f2 <_dtoa_r+0xda>
 80181d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80181da:	2301      	movs	r3, #1
 80181dc:	6013      	str	r3, [r2, #0]
 80181de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	f000 84d7 	beq.w	8018b94 <_dtoa_r+0xa7c>
 80181e6:	4b83      	ldr	r3, [pc, #524]	; (80183f4 <_dtoa_r+0x2dc>)
 80181e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80181ea:	6013      	str	r3, [r2, #0]
 80181ec:	3b01      	subs	r3, #1
 80181ee:	9301      	str	r3, [sp, #4]
 80181f0:	e7e1      	b.n	80181b6 <_dtoa_r+0x9e>
 80181f2:	aa0e      	add	r2, sp, #56	; 0x38
 80181f4:	a90f      	add	r1, sp, #60	; 0x3c
 80181f6:	4630      	mov	r0, r6
 80181f8:	eeb0 0b48 	vmov.f64	d0, d8
 80181fc:	f001 f9d4 	bl	80195a8 <__d2b>
 8018200:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8018204:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018206:	4605      	mov	r5, r0
 8018208:	2b00      	cmp	r3, #0
 801820a:	d046      	beq.n	801829a <_dtoa_r+0x182>
 801820c:	eeb0 7b48 	vmov.f64	d7, d8
 8018210:	ee18 1a90 	vmov	r1, s17
 8018214:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018218:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801821c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018220:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018224:	2000      	movs	r0, #0
 8018226:	ee07 1a90 	vmov	s15, r1
 801822a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801822e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80183c8 <_dtoa_r+0x2b0>
 8018232:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018236:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80183d0 <_dtoa_r+0x2b8>
 801823a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801823e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80183d8 <_dtoa_r+0x2c0>
 8018242:	ee07 3a90 	vmov	s15, r3
 8018246:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801824a:	eeb0 7b46 	vmov.f64	d7, d6
 801824e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018252:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8018256:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801825a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801825e:	ee16 ba90 	vmov	fp, s13
 8018262:	9009      	str	r0, [sp, #36]	; 0x24
 8018264:	d508      	bpl.n	8018278 <_dtoa_r+0x160>
 8018266:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801826a:	eeb4 6b47 	vcmp.f64	d6, d7
 801826e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018272:	bf18      	it	ne
 8018274:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8018278:	f1bb 0f16 	cmp.w	fp, #22
 801827c:	d82b      	bhi.n	80182d6 <_dtoa_r+0x1be>
 801827e:	495e      	ldr	r1, [pc, #376]	; (80183f8 <_dtoa_r+0x2e0>)
 8018280:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8018284:	ed91 7b00 	vldr	d7, [r1]
 8018288:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801828c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018290:	d501      	bpl.n	8018296 <_dtoa_r+0x17e>
 8018292:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018296:	2100      	movs	r1, #0
 8018298:	e01e      	b.n	80182d8 <_dtoa_r+0x1c0>
 801829a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801829c:	4413      	add	r3, r2
 801829e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80182a2:	2920      	cmp	r1, #32
 80182a4:	bfc1      	itttt	gt
 80182a6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80182aa:	408c      	lslgt	r4, r1
 80182ac:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80182b0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80182b4:	bfd6      	itet	le
 80182b6:	f1c1 0120 	rsble	r1, r1, #32
 80182ba:	4321      	orrgt	r1, r4
 80182bc:	fa08 f101 	lslle.w	r1, r8, r1
 80182c0:	ee07 1a90 	vmov	s15, r1
 80182c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80182c8:	3b01      	subs	r3, #1
 80182ca:	ee17 1a90 	vmov	r1, s15
 80182ce:	2001      	movs	r0, #1
 80182d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80182d4:	e7a7      	b.n	8018226 <_dtoa_r+0x10e>
 80182d6:	2101      	movs	r1, #1
 80182d8:	1ad2      	subs	r2, r2, r3
 80182da:	1e53      	subs	r3, r2, #1
 80182dc:	9305      	str	r3, [sp, #20]
 80182de:	bf45      	ittet	mi
 80182e0:	f1c2 0301 	rsbmi	r3, r2, #1
 80182e4:	9304      	strmi	r3, [sp, #16]
 80182e6:	2300      	movpl	r3, #0
 80182e8:	2300      	movmi	r3, #0
 80182ea:	bf4c      	ite	mi
 80182ec:	9305      	strmi	r3, [sp, #20]
 80182ee:	9304      	strpl	r3, [sp, #16]
 80182f0:	f1bb 0f00 	cmp.w	fp, #0
 80182f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80182f6:	db18      	blt.n	801832a <_dtoa_r+0x212>
 80182f8:	9b05      	ldr	r3, [sp, #20]
 80182fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80182fe:	445b      	add	r3, fp
 8018300:	9305      	str	r3, [sp, #20]
 8018302:	2300      	movs	r3, #0
 8018304:	9a06      	ldr	r2, [sp, #24]
 8018306:	2a09      	cmp	r2, #9
 8018308:	d848      	bhi.n	801839c <_dtoa_r+0x284>
 801830a:	2a05      	cmp	r2, #5
 801830c:	bfc4      	itt	gt
 801830e:	3a04      	subgt	r2, #4
 8018310:	9206      	strgt	r2, [sp, #24]
 8018312:	9a06      	ldr	r2, [sp, #24]
 8018314:	f1a2 0202 	sub.w	r2, r2, #2
 8018318:	bfcc      	ite	gt
 801831a:	2400      	movgt	r4, #0
 801831c:	2401      	movle	r4, #1
 801831e:	2a03      	cmp	r2, #3
 8018320:	d847      	bhi.n	80183b2 <_dtoa_r+0x29a>
 8018322:	e8df f002 	tbb	[pc, r2]
 8018326:	2d0b      	.short	0x2d0b
 8018328:	392b      	.short	0x392b
 801832a:	9b04      	ldr	r3, [sp, #16]
 801832c:	2200      	movs	r2, #0
 801832e:	eba3 030b 	sub.w	r3, r3, fp
 8018332:	9304      	str	r3, [sp, #16]
 8018334:	920a      	str	r2, [sp, #40]	; 0x28
 8018336:	f1cb 0300 	rsb	r3, fp, #0
 801833a:	e7e3      	b.n	8018304 <_dtoa_r+0x1ec>
 801833c:	2200      	movs	r2, #0
 801833e:	9207      	str	r2, [sp, #28]
 8018340:	9a08      	ldr	r2, [sp, #32]
 8018342:	2a00      	cmp	r2, #0
 8018344:	dc38      	bgt.n	80183b8 <_dtoa_r+0x2a0>
 8018346:	f04f 0a01 	mov.w	sl, #1
 801834a:	46d1      	mov	r9, sl
 801834c:	4652      	mov	r2, sl
 801834e:	f8cd a020 	str.w	sl, [sp, #32]
 8018352:	69f7      	ldr	r7, [r6, #28]
 8018354:	2100      	movs	r1, #0
 8018356:	2004      	movs	r0, #4
 8018358:	f100 0c14 	add.w	ip, r0, #20
 801835c:	4594      	cmp	ip, r2
 801835e:	d930      	bls.n	80183c2 <_dtoa_r+0x2aa>
 8018360:	6079      	str	r1, [r7, #4]
 8018362:	4630      	mov	r0, r6
 8018364:	930d      	str	r3, [sp, #52]	; 0x34
 8018366:	f000 fd43 	bl	8018df0 <_Balloc>
 801836a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801836c:	9001      	str	r0, [sp, #4]
 801836e:	4602      	mov	r2, r0
 8018370:	2800      	cmp	r0, #0
 8018372:	d145      	bne.n	8018400 <_dtoa_r+0x2e8>
 8018374:	4b21      	ldr	r3, [pc, #132]	; (80183fc <_dtoa_r+0x2e4>)
 8018376:	f240 11af 	movw	r1, #431	; 0x1af
 801837a:	e6e5      	b.n	8018148 <_dtoa_r+0x30>
 801837c:	2201      	movs	r2, #1
 801837e:	e7de      	b.n	801833e <_dtoa_r+0x226>
 8018380:	2200      	movs	r2, #0
 8018382:	9207      	str	r2, [sp, #28]
 8018384:	9a08      	ldr	r2, [sp, #32]
 8018386:	eb0b 0a02 	add.w	sl, fp, r2
 801838a:	f10a 0901 	add.w	r9, sl, #1
 801838e:	464a      	mov	r2, r9
 8018390:	2a01      	cmp	r2, #1
 8018392:	bfb8      	it	lt
 8018394:	2201      	movlt	r2, #1
 8018396:	e7dc      	b.n	8018352 <_dtoa_r+0x23a>
 8018398:	2201      	movs	r2, #1
 801839a:	e7f2      	b.n	8018382 <_dtoa_r+0x26a>
 801839c:	2401      	movs	r4, #1
 801839e:	2200      	movs	r2, #0
 80183a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80183a4:	f04f 3aff 	mov.w	sl, #4294967295
 80183a8:	2100      	movs	r1, #0
 80183aa:	46d1      	mov	r9, sl
 80183ac:	2212      	movs	r2, #18
 80183ae:	9108      	str	r1, [sp, #32]
 80183b0:	e7cf      	b.n	8018352 <_dtoa_r+0x23a>
 80183b2:	2201      	movs	r2, #1
 80183b4:	9207      	str	r2, [sp, #28]
 80183b6:	e7f5      	b.n	80183a4 <_dtoa_r+0x28c>
 80183b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80183bc:	46d1      	mov	r9, sl
 80183be:	4652      	mov	r2, sl
 80183c0:	e7c7      	b.n	8018352 <_dtoa_r+0x23a>
 80183c2:	3101      	adds	r1, #1
 80183c4:	0040      	lsls	r0, r0, #1
 80183c6:	e7c7      	b.n	8018358 <_dtoa_r+0x240>
 80183c8:	636f4361 	.word	0x636f4361
 80183cc:	3fd287a7 	.word	0x3fd287a7
 80183d0:	8b60c8b3 	.word	0x8b60c8b3
 80183d4:	3fc68a28 	.word	0x3fc68a28
 80183d8:	509f79fb 	.word	0x509f79fb
 80183dc:	3fd34413 	.word	0x3fd34413
 80183e0:	0801c83a 	.word	0x0801c83a
 80183e4:	0801c851 	.word	0x0801c851
 80183e8:	7ff00000 	.word	0x7ff00000
 80183ec:	0801c836 	.word	0x0801c836
 80183f0:	0801c82d 	.word	0x0801c82d
 80183f4:	0801c805 	.word	0x0801c805
 80183f8:	0801c940 	.word	0x0801c940
 80183fc:	0801c8a9 	.word	0x0801c8a9
 8018400:	69f2      	ldr	r2, [r6, #28]
 8018402:	9901      	ldr	r1, [sp, #4]
 8018404:	6011      	str	r1, [r2, #0]
 8018406:	f1b9 0f0e 	cmp.w	r9, #14
 801840a:	d86c      	bhi.n	80184e6 <_dtoa_r+0x3ce>
 801840c:	2c00      	cmp	r4, #0
 801840e:	d06a      	beq.n	80184e6 <_dtoa_r+0x3ce>
 8018410:	f1bb 0f00 	cmp.w	fp, #0
 8018414:	f340 80a0 	ble.w	8018558 <_dtoa_r+0x440>
 8018418:	4ac1      	ldr	r2, [pc, #772]	; (8018720 <_dtoa_r+0x608>)
 801841a:	f00b 010f 	and.w	r1, fp, #15
 801841e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018422:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018426:	ed92 7b00 	vldr	d7, [r2]
 801842a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801842e:	f000 8087 	beq.w	8018540 <_dtoa_r+0x428>
 8018432:	49bc      	ldr	r1, [pc, #752]	; (8018724 <_dtoa_r+0x60c>)
 8018434:	ed91 6b08 	vldr	d6, [r1, #32]
 8018438:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801843c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018440:	f002 020f 	and.w	r2, r2, #15
 8018444:	2103      	movs	r1, #3
 8018446:	48b7      	ldr	r0, [pc, #732]	; (8018724 <_dtoa_r+0x60c>)
 8018448:	2a00      	cmp	r2, #0
 801844a:	d17b      	bne.n	8018544 <_dtoa_r+0x42c>
 801844c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018450:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018454:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801845a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801845e:	2a00      	cmp	r2, #0
 8018460:	f000 80a0 	beq.w	80185a4 <_dtoa_r+0x48c>
 8018464:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018468:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801846c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018470:	f140 8098 	bpl.w	80185a4 <_dtoa_r+0x48c>
 8018474:	f1b9 0f00 	cmp.w	r9, #0
 8018478:	f000 8094 	beq.w	80185a4 <_dtoa_r+0x48c>
 801847c:	f1ba 0f00 	cmp.w	sl, #0
 8018480:	dd2f      	ble.n	80184e2 <_dtoa_r+0x3ca>
 8018482:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8018486:	ee27 7b06 	vmul.f64	d7, d7, d6
 801848a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801848e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8018492:	3101      	adds	r1, #1
 8018494:	4654      	mov	r4, sl
 8018496:	ed9d 6b02 	vldr	d6, [sp, #8]
 801849a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801849e:	ee07 1a90 	vmov	s15, r1
 80184a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80184a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80184aa:	ee15 7a90 	vmov	r7, s11
 80184ae:	ec51 0b15 	vmov	r0, r1, d5
 80184b2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80184b6:	2c00      	cmp	r4, #0
 80184b8:	d177      	bne.n	80185aa <_dtoa_r+0x492>
 80184ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80184be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80184c2:	ec41 0b17 	vmov	d7, r0, r1
 80184c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80184ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184ce:	f300 826a 	bgt.w	80189a6 <_dtoa_r+0x88e>
 80184d2:	eeb1 7b47 	vneg.f64	d7, d7
 80184d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80184da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184de:	f100 8260 	bmi.w	80189a2 <_dtoa_r+0x88a>
 80184e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80184e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80184e8:	2a00      	cmp	r2, #0
 80184ea:	f2c0 811d 	blt.w	8018728 <_dtoa_r+0x610>
 80184ee:	f1bb 0f0e 	cmp.w	fp, #14
 80184f2:	f300 8119 	bgt.w	8018728 <_dtoa_r+0x610>
 80184f6:	4b8a      	ldr	r3, [pc, #552]	; (8018720 <_dtoa_r+0x608>)
 80184f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80184fc:	ed93 6b00 	vldr	d6, [r3]
 8018500:	9b08      	ldr	r3, [sp, #32]
 8018502:	2b00      	cmp	r3, #0
 8018504:	f280 80b7 	bge.w	8018676 <_dtoa_r+0x55e>
 8018508:	f1b9 0f00 	cmp.w	r9, #0
 801850c:	f300 80b3 	bgt.w	8018676 <_dtoa_r+0x55e>
 8018510:	f040 8246 	bne.w	80189a0 <_dtoa_r+0x888>
 8018514:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018518:	ee26 6b07 	vmul.f64	d6, d6, d7
 801851c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018520:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018528:	464c      	mov	r4, r9
 801852a:	464f      	mov	r7, r9
 801852c:	f280 821c 	bge.w	8018968 <_dtoa_r+0x850>
 8018530:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018534:	2331      	movs	r3, #49	; 0x31
 8018536:	f808 3b01 	strb.w	r3, [r8], #1
 801853a:	f10b 0b01 	add.w	fp, fp, #1
 801853e:	e218      	b.n	8018972 <_dtoa_r+0x85a>
 8018540:	2102      	movs	r1, #2
 8018542:	e780      	b.n	8018446 <_dtoa_r+0x32e>
 8018544:	07d4      	lsls	r4, r2, #31
 8018546:	d504      	bpl.n	8018552 <_dtoa_r+0x43a>
 8018548:	ed90 6b00 	vldr	d6, [r0]
 801854c:	3101      	adds	r1, #1
 801854e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018552:	1052      	asrs	r2, r2, #1
 8018554:	3008      	adds	r0, #8
 8018556:	e777      	b.n	8018448 <_dtoa_r+0x330>
 8018558:	d022      	beq.n	80185a0 <_dtoa_r+0x488>
 801855a:	f1cb 0200 	rsb	r2, fp, #0
 801855e:	4970      	ldr	r1, [pc, #448]	; (8018720 <_dtoa_r+0x608>)
 8018560:	f002 000f 	and.w	r0, r2, #15
 8018564:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018568:	ed91 7b00 	vldr	d7, [r1]
 801856c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018570:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018574:	486b      	ldr	r0, [pc, #428]	; (8018724 <_dtoa_r+0x60c>)
 8018576:	1112      	asrs	r2, r2, #4
 8018578:	2400      	movs	r4, #0
 801857a:	2102      	movs	r1, #2
 801857c:	b92a      	cbnz	r2, 801858a <_dtoa_r+0x472>
 801857e:	2c00      	cmp	r4, #0
 8018580:	f43f af6a 	beq.w	8018458 <_dtoa_r+0x340>
 8018584:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018588:	e766      	b.n	8018458 <_dtoa_r+0x340>
 801858a:	07d7      	lsls	r7, r2, #31
 801858c:	d505      	bpl.n	801859a <_dtoa_r+0x482>
 801858e:	ed90 6b00 	vldr	d6, [r0]
 8018592:	3101      	adds	r1, #1
 8018594:	2401      	movs	r4, #1
 8018596:	ee27 7b06 	vmul.f64	d7, d7, d6
 801859a:	1052      	asrs	r2, r2, #1
 801859c:	3008      	adds	r0, #8
 801859e:	e7ed      	b.n	801857c <_dtoa_r+0x464>
 80185a0:	2102      	movs	r1, #2
 80185a2:	e759      	b.n	8018458 <_dtoa_r+0x340>
 80185a4:	465a      	mov	r2, fp
 80185a6:	464c      	mov	r4, r9
 80185a8:	e775      	b.n	8018496 <_dtoa_r+0x37e>
 80185aa:	ec41 0b17 	vmov	d7, r0, r1
 80185ae:	495c      	ldr	r1, [pc, #368]	; (8018720 <_dtoa_r+0x608>)
 80185b0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80185b4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80185b8:	9901      	ldr	r1, [sp, #4]
 80185ba:	440c      	add	r4, r1
 80185bc:	9907      	ldr	r1, [sp, #28]
 80185be:	b351      	cbz	r1, 8018616 <_dtoa_r+0x4fe>
 80185c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80185c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80185c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80185cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80185d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80185d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80185d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80185dc:	ee14 1a90 	vmov	r1, s9
 80185e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80185e4:	3130      	adds	r1, #48	; 0x30
 80185e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80185ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80185ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185f2:	f808 1b01 	strb.w	r1, [r8], #1
 80185f6:	d439      	bmi.n	801866c <_dtoa_r+0x554>
 80185f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80185fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018604:	d472      	bmi.n	80186ec <_dtoa_r+0x5d4>
 8018606:	45a0      	cmp	r8, r4
 8018608:	f43f af6b 	beq.w	80184e2 <_dtoa_r+0x3ca>
 801860c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018610:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018614:	e7e0      	b.n	80185d8 <_dtoa_r+0x4c0>
 8018616:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801861a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801861e:	4620      	mov	r0, r4
 8018620:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018624:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018628:	ee14 1a90 	vmov	r1, s9
 801862c:	3130      	adds	r1, #48	; 0x30
 801862e:	f808 1b01 	strb.w	r1, [r8], #1
 8018632:	45a0      	cmp	r8, r4
 8018634:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018638:	ee36 6b45 	vsub.f64	d6, d6, d5
 801863c:	d118      	bne.n	8018670 <_dtoa_r+0x558>
 801863e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8018642:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018646:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801864a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801864e:	dc4d      	bgt.n	80186ec <_dtoa_r+0x5d4>
 8018650:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018654:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8018658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801865c:	f57f af41 	bpl.w	80184e2 <_dtoa_r+0x3ca>
 8018660:	4680      	mov	r8, r0
 8018662:	3801      	subs	r0, #1
 8018664:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8018668:	2b30      	cmp	r3, #48	; 0x30
 801866a:	d0f9      	beq.n	8018660 <_dtoa_r+0x548>
 801866c:	4693      	mov	fp, r2
 801866e:	e02a      	b.n	80186c6 <_dtoa_r+0x5ae>
 8018670:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018674:	e7d6      	b.n	8018624 <_dtoa_r+0x50c>
 8018676:	ed9d 7b02 	vldr	d7, [sp, #8]
 801867a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801867e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018682:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018686:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801868a:	ee15 3a10 	vmov	r3, s10
 801868e:	3330      	adds	r3, #48	; 0x30
 8018690:	f808 3b01 	strb.w	r3, [r8], #1
 8018694:	9b01      	ldr	r3, [sp, #4]
 8018696:	eba8 0303 	sub.w	r3, r8, r3
 801869a:	4599      	cmp	r9, r3
 801869c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80186a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80186a4:	d133      	bne.n	801870e <_dtoa_r+0x5f6>
 80186a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80186aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80186ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186b2:	dc1a      	bgt.n	80186ea <_dtoa_r+0x5d2>
 80186b4:	eeb4 7b46 	vcmp.f64	d7, d6
 80186b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186bc:	d103      	bne.n	80186c6 <_dtoa_r+0x5ae>
 80186be:	ee15 3a10 	vmov	r3, s10
 80186c2:	07d9      	lsls	r1, r3, #31
 80186c4:	d411      	bmi.n	80186ea <_dtoa_r+0x5d2>
 80186c6:	4629      	mov	r1, r5
 80186c8:	4630      	mov	r0, r6
 80186ca:	f000 fbd1 	bl	8018e70 <_Bfree>
 80186ce:	2300      	movs	r3, #0
 80186d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80186d2:	f888 3000 	strb.w	r3, [r8]
 80186d6:	f10b 0301 	add.w	r3, fp, #1
 80186da:	6013      	str	r3, [r2, #0]
 80186dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80186de:	2b00      	cmp	r3, #0
 80186e0:	f43f ad69 	beq.w	80181b6 <_dtoa_r+0x9e>
 80186e4:	f8c3 8000 	str.w	r8, [r3]
 80186e8:	e565      	b.n	80181b6 <_dtoa_r+0x9e>
 80186ea:	465a      	mov	r2, fp
 80186ec:	4643      	mov	r3, r8
 80186ee:	4698      	mov	r8, r3
 80186f0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80186f4:	2939      	cmp	r1, #57	; 0x39
 80186f6:	d106      	bne.n	8018706 <_dtoa_r+0x5ee>
 80186f8:	9901      	ldr	r1, [sp, #4]
 80186fa:	4299      	cmp	r1, r3
 80186fc:	d1f7      	bne.n	80186ee <_dtoa_r+0x5d6>
 80186fe:	9801      	ldr	r0, [sp, #4]
 8018700:	2130      	movs	r1, #48	; 0x30
 8018702:	3201      	adds	r2, #1
 8018704:	7001      	strb	r1, [r0, #0]
 8018706:	7819      	ldrb	r1, [r3, #0]
 8018708:	3101      	adds	r1, #1
 801870a:	7019      	strb	r1, [r3, #0]
 801870c:	e7ae      	b.n	801866c <_dtoa_r+0x554>
 801870e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018712:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801871a:	d1b2      	bne.n	8018682 <_dtoa_r+0x56a>
 801871c:	e7d3      	b.n	80186c6 <_dtoa_r+0x5ae>
 801871e:	bf00      	nop
 8018720:	0801c940 	.word	0x0801c940
 8018724:	0801c918 	.word	0x0801c918
 8018728:	9907      	ldr	r1, [sp, #28]
 801872a:	2900      	cmp	r1, #0
 801872c:	f000 80d0 	beq.w	80188d0 <_dtoa_r+0x7b8>
 8018730:	9906      	ldr	r1, [sp, #24]
 8018732:	2901      	cmp	r1, #1
 8018734:	f300 80b4 	bgt.w	80188a0 <_dtoa_r+0x788>
 8018738:	9909      	ldr	r1, [sp, #36]	; 0x24
 801873a:	2900      	cmp	r1, #0
 801873c:	f000 80ac 	beq.w	8018898 <_dtoa_r+0x780>
 8018740:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018744:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018748:	461c      	mov	r4, r3
 801874a:	9309      	str	r3, [sp, #36]	; 0x24
 801874c:	9b04      	ldr	r3, [sp, #16]
 801874e:	4413      	add	r3, r2
 8018750:	9304      	str	r3, [sp, #16]
 8018752:	9b05      	ldr	r3, [sp, #20]
 8018754:	2101      	movs	r1, #1
 8018756:	4413      	add	r3, r2
 8018758:	4630      	mov	r0, r6
 801875a:	9305      	str	r3, [sp, #20]
 801875c:	f000 fc88 	bl	8019070 <__i2b>
 8018760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018762:	4607      	mov	r7, r0
 8018764:	f1b8 0f00 	cmp.w	r8, #0
 8018768:	d00d      	beq.n	8018786 <_dtoa_r+0x66e>
 801876a:	9a05      	ldr	r2, [sp, #20]
 801876c:	2a00      	cmp	r2, #0
 801876e:	dd0a      	ble.n	8018786 <_dtoa_r+0x66e>
 8018770:	4542      	cmp	r2, r8
 8018772:	9904      	ldr	r1, [sp, #16]
 8018774:	bfa8      	it	ge
 8018776:	4642      	movge	r2, r8
 8018778:	1a89      	subs	r1, r1, r2
 801877a:	9104      	str	r1, [sp, #16]
 801877c:	9905      	ldr	r1, [sp, #20]
 801877e:	eba8 0802 	sub.w	r8, r8, r2
 8018782:	1a8a      	subs	r2, r1, r2
 8018784:	9205      	str	r2, [sp, #20]
 8018786:	b303      	cbz	r3, 80187ca <_dtoa_r+0x6b2>
 8018788:	9a07      	ldr	r2, [sp, #28]
 801878a:	2a00      	cmp	r2, #0
 801878c:	f000 80a5 	beq.w	80188da <_dtoa_r+0x7c2>
 8018790:	2c00      	cmp	r4, #0
 8018792:	dd13      	ble.n	80187bc <_dtoa_r+0x6a4>
 8018794:	4639      	mov	r1, r7
 8018796:	4622      	mov	r2, r4
 8018798:	4630      	mov	r0, r6
 801879a:	930d      	str	r3, [sp, #52]	; 0x34
 801879c:	f000 fd28 	bl	80191f0 <__pow5mult>
 80187a0:	462a      	mov	r2, r5
 80187a2:	4601      	mov	r1, r0
 80187a4:	4607      	mov	r7, r0
 80187a6:	4630      	mov	r0, r6
 80187a8:	f000 fc78 	bl	801909c <__multiply>
 80187ac:	4629      	mov	r1, r5
 80187ae:	9009      	str	r0, [sp, #36]	; 0x24
 80187b0:	4630      	mov	r0, r6
 80187b2:	f000 fb5d 	bl	8018e70 <_Bfree>
 80187b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80187b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187ba:	4615      	mov	r5, r2
 80187bc:	1b1a      	subs	r2, r3, r4
 80187be:	d004      	beq.n	80187ca <_dtoa_r+0x6b2>
 80187c0:	4629      	mov	r1, r5
 80187c2:	4630      	mov	r0, r6
 80187c4:	f000 fd14 	bl	80191f0 <__pow5mult>
 80187c8:	4605      	mov	r5, r0
 80187ca:	2101      	movs	r1, #1
 80187cc:	4630      	mov	r0, r6
 80187ce:	f000 fc4f 	bl	8019070 <__i2b>
 80187d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	4604      	mov	r4, r0
 80187d8:	f340 8081 	ble.w	80188de <_dtoa_r+0x7c6>
 80187dc:	461a      	mov	r2, r3
 80187de:	4601      	mov	r1, r0
 80187e0:	4630      	mov	r0, r6
 80187e2:	f000 fd05 	bl	80191f0 <__pow5mult>
 80187e6:	9b06      	ldr	r3, [sp, #24]
 80187e8:	2b01      	cmp	r3, #1
 80187ea:	4604      	mov	r4, r0
 80187ec:	dd7a      	ble.n	80188e4 <_dtoa_r+0x7cc>
 80187ee:	2300      	movs	r3, #0
 80187f0:	9309      	str	r3, [sp, #36]	; 0x24
 80187f2:	6922      	ldr	r2, [r4, #16]
 80187f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80187f8:	6910      	ldr	r0, [r2, #16]
 80187fa:	f000 fbeb 	bl	8018fd4 <__hi0bits>
 80187fe:	f1c0 0020 	rsb	r0, r0, #32
 8018802:	9b05      	ldr	r3, [sp, #20]
 8018804:	4418      	add	r0, r3
 8018806:	f010 001f 	ands.w	r0, r0, #31
 801880a:	f000 8093 	beq.w	8018934 <_dtoa_r+0x81c>
 801880e:	f1c0 0220 	rsb	r2, r0, #32
 8018812:	2a04      	cmp	r2, #4
 8018814:	f340 8085 	ble.w	8018922 <_dtoa_r+0x80a>
 8018818:	9b04      	ldr	r3, [sp, #16]
 801881a:	f1c0 001c 	rsb	r0, r0, #28
 801881e:	4403      	add	r3, r0
 8018820:	9304      	str	r3, [sp, #16]
 8018822:	9b05      	ldr	r3, [sp, #20]
 8018824:	4480      	add	r8, r0
 8018826:	4403      	add	r3, r0
 8018828:	9305      	str	r3, [sp, #20]
 801882a:	9b04      	ldr	r3, [sp, #16]
 801882c:	2b00      	cmp	r3, #0
 801882e:	dd05      	ble.n	801883c <_dtoa_r+0x724>
 8018830:	4629      	mov	r1, r5
 8018832:	461a      	mov	r2, r3
 8018834:	4630      	mov	r0, r6
 8018836:	f000 fd35 	bl	80192a4 <__lshift>
 801883a:	4605      	mov	r5, r0
 801883c:	9b05      	ldr	r3, [sp, #20]
 801883e:	2b00      	cmp	r3, #0
 8018840:	dd05      	ble.n	801884e <_dtoa_r+0x736>
 8018842:	4621      	mov	r1, r4
 8018844:	461a      	mov	r2, r3
 8018846:	4630      	mov	r0, r6
 8018848:	f000 fd2c 	bl	80192a4 <__lshift>
 801884c:	4604      	mov	r4, r0
 801884e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018850:	2b00      	cmp	r3, #0
 8018852:	d071      	beq.n	8018938 <_dtoa_r+0x820>
 8018854:	4621      	mov	r1, r4
 8018856:	4628      	mov	r0, r5
 8018858:	f000 fd90 	bl	801937c <__mcmp>
 801885c:	2800      	cmp	r0, #0
 801885e:	da6b      	bge.n	8018938 <_dtoa_r+0x820>
 8018860:	2300      	movs	r3, #0
 8018862:	4629      	mov	r1, r5
 8018864:	220a      	movs	r2, #10
 8018866:	4630      	mov	r0, r6
 8018868:	f000 fb24 	bl	8018eb4 <__multadd>
 801886c:	9b07      	ldr	r3, [sp, #28]
 801886e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018872:	4605      	mov	r5, r0
 8018874:	2b00      	cmp	r3, #0
 8018876:	f000 8197 	beq.w	8018ba8 <_dtoa_r+0xa90>
 801887a:	4639      	mov	r1, r7
 801887c:	2300      	movs	r3, #0
 801887e:	220a      	movs	r2, #10
 8018880:	4630      	mov	r0, r6
 8018882:	f000 fb17 	bl	8018eb4 <__multadd>
 8018886:	f1ba 0f00 	cmp.w	sl, #0
 801888a:	4607      	mov	r7, r0
 801888c:	f300 8093 	bgt.w	80189b6 <_dtoa_r+0x89e>
 8018890:	9b06      	ldr	r3, [sp, #24]
 8018892:	2b02      	cmp	r3, #2
 8018894:	dc57      	bgt.n	8018946 <_dtoa_r+0x82e>
 8018896:	e08e      	b.n	80189b6 <_dtoa_r+0x89e>
 8018898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801889a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801889e:	e751      	b.n	8018744 <_dtoa_r+0x62c>
 80188a0:	f109 34ff 	add.w	r4, r9, #4294967295
 80188a4:	42a3      	cmp	r3, r4
 80188a6:	bfbf      	itttt	lt
 80188a8:	1ae2      	sublt	r2, r4, r3
 80188aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80188ac:	189b      	addlt	r3, r3, r2
 80188ae:	930a      	strlt	r3, [sp, #40]	; 0x28
 80188b0:	bfae      	itee	ge
 80188b2:	1b1c      	subge	r4, r3, r4
 80188b4:	4623      	movlt	r3, r4
 80188b6:	2400      	movlt	r4, #0
 80188b8:	f1b9 0f00 	cmp.w	r9, #0
 80188bc:	bfb5      	itete	lt
 80188be:	9a04      	ldrlt	r2, [sp, #16]
 80188c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80188c4:	eba2 0809 	sublt.w	r8, r2, r9
 80188c8:	464a      	movge	r2, r9
 80188ca:	bfb8      	it	lt
 80188cc:	2200      	movlt	r2, #0
 80188ce:	e73c      	b.n	801874a <_dtoa_r+0x632>
 80188d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80188d4:	9f07      	ldr	r7, [sp, #28]
 80188d6:	461c      	mov	r4, r3
 80188d8:	e744      	b.n	8018764 <_dtoa_r+0x64c>
 80188da:	461a      	mov	r2, r3
 80188dc:	e770      	b.n	80187c0 <_dtoa_r+0x6a8>
 80188de:	9b06      	ldr	r3, [sp, #24]
 80188e0:	2b01      	cmp	r3, #1
 80188e2:	dc18      	bgt.n	8018916 <_dtoa_r+0x7fe>
 80188e4:	9b02      	ldr	r3, [sp, #8]
 80188e6:	b9b3      	cbnz	r3, 8018916 <_dtoa_r+0x7fe>
 80188e8:	9b03      	ldr	r3, [sp, #12]
 80188ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80188ee:	b9a2      	cbnz	r2, 801891a <_dtoa_r+0x802>
 80188f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80188f4:	0d12      	lsrs	r2, r2, #20
 80188f6:	0512      	lsls	r2, r2, #20
 80188f8:	b18a      	cbz	r2, 801891e <_dtoa_r+0x806>
 80188fa:	9b04      	ldr	r3, [sp, #16]
 80188fc:	3301      	adds	r3, #1
 80188fe:	9304      	str	r3, [sp, #16]
 8018900:	9b05      	ldr	r3, [sp, #20]
 8018902:	3301      	adds	r3, #1
 8018904:	9305      	str	r3, [sp, #20]
 8018906:	2301      	movs	r3, #1
 8018908:	9309      	str	r3, [sp, #36]	; 0x24
 801890a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801890c:	2b00      	cmp	r3, #0
 801890e:	f47f af70 	bne.w	80187f2 <_dtoa_r+0x6da>
 8018912:	2001      	movs	r0, #1
 8018914:	e775      	b.n	8018802 <_dtoa_r+0x6ea>
 8018916:	2300      	movs	r3, #0
 8018918:	e7f6      	b.n	8018908 <_dtoa_r+0x7f0>
 801891a:	9b02      	ldr	r3, [sp, #8]
 801891c:	e7f4      	b.n	8018908 <_dtoa_r+0x7f0>
 801891e:	9209      	str	r2, [sp, #36]	; 0x24
 8018920:	e7f3      	b.n	801890a <_dtoa_r+0x7f2>
 8018922:	d082      	beq.n	801882a <_dtoa_r+0x712>
 8018924:	9b04      	ldr	r3, [sp, #16]
 8018926:	321c      	adds	r2, #28
 8018928:	4413      	add	r3, r2
 801892a:	9304      	str	r3, [sp, #16]
 801892c:	9b05      	ldr	r3, [sp, #20]
 801892e:	4490      	add	r8, r2
 8018930:	4413      	add	r3, r2
 8018932:	e779      	b.n	8018828 <_dtoa_r+0x710>
 8018934:	4602      	mov	r2, r0
 8018936:	e7f5      	b.n	8018924 <_dtoa_r+0x80c>
 8018938:	f1b9 0f00 	cmp.w	r9, #0
 801893c:	dc36      	bgt.n	80189ac <_dtoa_r+0x894>
 801893e:	9b06      	ldr	r3, [sp, #24]
 8018940:	2b02      	cmp	r3, #2
 8018942:	dd33      	ble.n	80189ac <_dtoa_r+0x894>
 8018944:	46ca      	mov	sl, r9
 8018946:	f1ba 0f00 	cmp.w	sl, #0
 801894a:	d10d      	bne.n	8018968 <_dtoa_r+0x850>
 801894c:	4621      	mov	r1, r4
 801894e:	4653      	mov	r3, sl
 8018950:	2205      	movs	r2, #5
 8018952:	4630      	mov	r0, r6
 8018954:	f000 faae 	bl	8018eb4 <__multadd>
 8018958:	4601      	mov	r1, r0
 801895a:	4604      	mov	r4, r0
 801895c:	4628      	mov	r0, r5
 801895e:	f000 fd0d 	bl	801937c <__mcmp>
 8018962:	2800      	cmp	r0, #0
 8018964:	f73f ade4 	bgt.w	8018530 <_dtoa_r+0x418>
 8018968:	9b08      	ldr	r3, [sp, #32]
 801896a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801896e:	ea6f 0b03 	mvn.w	fp, r3
 8018972:	f04f 0900 	mov.w	r9, #0
 8018976:	4621      	mov	r1, r4
 8018978:	4630      	mov	r0, r6
 801897a:	f000 fa79 	bl	8018e70 <_Bfree>
 801897e:	2f00      	cmp	r7, #0
 8018980:	f43f aea1 	beq.w	80186c6 <_dtoa_r+0x5ae>
 8018984:	f1b9 0f00 	cmp.w	r9, #0
 8018988:	d005      	beq.n	8018996 <_dtoa_r+0x87e>
 801898a:	45b9      	cmp	r9, r7
 801898c:	d003      	beq.n	8018996 <_dtoa_r+0x87e>
 801898e:	4649      	mov	r1, r9
 8018990:	4630      	mov	r0, r6
 8018992:	f000 fa6d 	bl	8018e70 <_Bfree>
 8018996:	4639      	mov	r1, r7
 8018998:	4630      	mov	r0, r6
 801899a:	f000 fa69 	bl	8018e70 <_Bfree>
 801899e:	e692      	b.n	80186c6 <_dtoa_r+0x5ae>
 80189a0:	2400      	movs	r4, #0
 80189a2:	4627      	mov	r7, r4
 80189a4:	e7e0      	b.n	8018968 <_dtoa_r+0x850>
 80189a6:	4693      	mov	fp, r2
 80189a8:	4627      	mov	r7, r4
 80189aa:	e5c1      	b.n	8018530 <_dtoa_r+0x418>
 80189ac:	9b07      	ldr	r3, [sp, #28]
 80189ae:	46ca      	mov	sl, r9
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	f000 8100 	beq.w	8018bb6 <_dtoa_r+0xa9e>
 80189b6:	f1b8 0f00 	cmp.w	r8, #0
 80189ba:	dd05      	ble.n	80189c8 <_dtoa_r+0x8b0>
 80189bc:	4639      	mov	r1, r7
 80189be:	4642      	mov	r2, r8
 80189c0:	4630      	mov	r0, r6
 80189c2:	f000 fc6f 	bl	80192a4 <__lshift>
 80189c6:	4607      	mov	r7, r0
 80189c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d05d      	beq.n	8018a8a <_dtoa_r+0x972>
 80189ce:	6879      	ldr	r1, [r7, #4]
 80189d0:	4630      	mov	r0, r6
 80189d2:	f000 fa0d 	bl	8018df0 <_Balloc>
 80189d6:	4680      	mov	r8, r0
 80189d8:	b928      	cbnz	r0, 80189e6 <_dtoa_r+0x8ce>
 80189da:	4b82      	ldr	r3, [pc, #520]	; (8018be4 <_dtoa_r+0xacc>)
 80189dc:	4602      	mov	r2, r0
 80189de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80189e2:	f7ff bbb1 	b.w	8018148 <_dtoa_r+0x30>
 80189e6:	693a      	ldr	r2, [r7, #16]
 80189e8:	3202      	adds	r2, #2
 80189ea:	0092      	lsls	r2, r2, #2
 80189ec:	f107 010c 	add.w	r1, r7, #12
 80189f0:	300c      	adds	r0, #12
 80189f2:	f7ff faf4 	bl	8017fde <memcpy>
 80189f6:	2201      	movs	r2, #1
 80189f8:	4641      	mov	r1, r8
 80189fa:	4630      	mov	r0, r6
 80189fc:	f000 fc52 	bl	80192a4 <__lshift>
 8018a00:	9b01      	ldr	r3, [sp, #4]
 8018a02:	3301      	adds	r3, #1
 8018a04:	9304      	str	r3, [sp, #16]
 8018a06:	9b01      	ldr	r3, [sp, #4]
 8018a08:	4453      	add	r3, sl
 8018a0a:	9308      	str	r3, [sp, #32]
 8018a0c:	9b02      	ldr	r3, [sp, #8]
 8018a0e:	f003 0301 	and.w	r3, r3, #1
 8018a12:	46b9      	mov	r9, r7
 8018a14:	9307      	str	r3, [sp, #28]
 8018a16:	4607      	mov	r7, r0
 8018a18:	9b04      	ldr	r3, [sp, #16]
 8018a1a:	4621      	mov	r1, r4
 8018a1c:	3b01      	subs	r3, #1
 8018a1e:	4628      	mov	r0, r5
 8018a20:	9302      	str	r3, [sp, #8]
 8018a22:	f7ff faf1 	bl	8018008 <quorem>
 8018a26:	4603      	mov	r3, r0
 8018a28:	3330      	adds	r3, #48	; 0x30
 8018a2a:	9005      	str	r0, [sp, #20]
 8018a2c:	4649      	mov	r1, r9
 8018a2e:	4628      	mov	r0, r5
 8018a30:	9309      	str	r3, [sp, #36]	; 0x24
 8018a32:	f000 fca3 	bl	801937c <__mcmp>
 8018a36:	463a      	mov	r2, r7
 8018a38:	4682      	mov	sl, r0
 8018a3a:	4621      	mov	r1, r4
 8018a3c:	4630      	mov	r0, r6
 8018a3e:	f000 fcb9 	bl	80193b4 <__mdiff>
 8018a42:	68c2      	ldr	r2, [r0, #12]
 8018a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a46:	4680      	mov	r8, r0
 8018a48:	bb0a      	cbnz	r2, 8018a8e <_dtoa_r+0x976>
 8018a4a:	4601      	mov	r1, r0
 8018a4c:	4628      	mov	r0, r5
 8018a4e:	f000 fc95 	bl	801937c <__mcmp>
 8018a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a54:	4602      	mov	r2, r0
 8018a56:	4641      	mov	r1, r8
 8018a58:	4630      	mov	r0, r6
 8018a5a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8018a5e:	f000 fa07 	bl	8018e70 <_Bfree>
 8018a62:	9b06      	ldr	r3, [sp, #24]
 8018a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a66:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018a6a:	ea43 0102 	orr.w	r1, r3, r2
 8018a6e:	9b07      	ldr	r3, [sp, #28]
 8018a70:	4319      	orrs	r1, r3
 8018a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a74:	d10d      	bne.n	8018a92 <_dtoa_r+0x97a>
 8018a76:	2b39      	cmp	r3, #57	; 0x39
 8018a78:	d029      	beq.n	8018ace <_dtoa_r+0x9b6>
 8018a7a:	f1ba 0f00 	cmp.w	sl, #0
 8018a7e:	dd01      	ble.n	8018a84 <_dtoa_r+0x96c>
 8018a80:	9b05      	ldr	r3, [sp, #20]
 8018a82:	3331      	adds	r3, #49	; 0x31
 8018a84:	9a02      	ldr	r2, [sp, #8]
 8018a86:	7013      	strb	r3, [r2, #0]
 8018a88:	e775      	b.n	8018976 <_dtoa_r+0x85e>
 8018a8a:	4638      	mov	r0, r7
 8018a8c:	e7b8      	b.n	8018a00 <_dtoa_r+0x8e8>
 8018a8e:	2201      	movs	r2, #1
 8018a90:	e7e1      	b.n	8018a56 <_dtoa_r+0x93e>
 8018a92:	f1ba 0f00 	cmp.w	sl, #0
 8018a96:	db06      	blt.n	8018aa6 <_dtoa_r+0x98e>
 8018a98:	9906      	ldr	r1, [sp, #24]
 8018a9a:	ea41 0a0a 	orr.w	sl, r1, sl
 8018a9e:	9907      	ldr	r1, [sp, #28]
 8018aa0:	ea5a 0a01 	orrs.w	sl, sl, r1
 8018aa4:	d120      	bne.n	8018ae8 <_dtoa_r+0x9d0>
 8018aa6:	2a00      	cmp	r2, #0
 8018aa8:	ddec      	ble.n	8018a84 <_dtoa_r+0x96c>
 8018aaa:	4629      	mov	r1, r5
 8018aac:	2201      	movs	r2, #1
 8018aae:	4630      	mov	r0, r6
 8018ab0:	9304      	str	r3, [sp, #16]
 8018ab2:	f000 fbf7 	bl	80192a4 <__lshift>
 8018ab6:	4621      	mov	r1, r4
 8018ab8:	4605      	mov	r5, r0
 8018aba:	f000 fc5f 	bl	801937c <__mcmp>
 8018abe:	2800      	cmp	r0, #0
 8018ac0:	9b04      	ldr	r3, [sp, #16]
 8018ac2:	dc02      	bgt.n	8018aca <_dtoa_r+0x9b2>
 8018ac4:	d1de      	bne.n	8018a84 <_dtoa_r+0x96c>
 8018ac6:	07da      	lsls	r2, r3, #31
 8018ac8:	d5dc      	bpl.n	8018a84 <_dtoa_r+0x96c>
 8018aca:	2b39      	cmp	r3, #57	; 0x39
 8018acc:	d1d8      	bne.n	8018a80 <_dtoa_r+0x968>
 8018ace:	9a02      	ldr	r2, [sp, #8]
 8018ad0:	2339      	movs	r3, #57	; 0x39
 8018ad2:	7013      	strb	r3, [r2, #0]
 8018ad4:	4643      	mov	r3, r8
 8018ad6:	4698      	mov	r8, r3
 8018ad8:	3b01      	subs	r3, #1
 8018ada:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8018ade:	2a39      	cmp	r2, #57	; 0x39
 8018ae0:	d051      	beq.n	8018b86 <_dtoa_r+0xa6e>
 8018ae2:	3201      	adds	r2, #1
 8018ae4:	701a      	strb	r2, [r3, #0]
 8018ae6:	e746      	b.n	8018976 <_dtoa_r+0x85e>
 8018ae8:	2a00      	cmp	r2, #0
 8018aea:	dd03      	ble.n	8018af4 <_dtoa_r+0x9dc>
 8018aec:	2b39      	cmp	r3, #57	; 0x39
 8018aee:	d0ee      	beq.n	8018ace <_dtoa_r+0x9b6>
 8018af0:	3301      	adds	r3, #1
 8018af2:	e7c7      	b.n	8018a84 <_dtoa_r+0x96c>
 8018af4:	9a04      	ldr	r2, [sp, #16]
 8018af6:	9908      	ldr	r1, [sp, #32]
 8018af8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018afc:	428a      	cmp	r2, r1
 8018afe:	d02b      	beq.n	8018b58 <_dtoa_r+0xa40>
 8018b00:	4629      	mov	r1, r5
 8018b02:	2300      	movs	r3, #0
 8018b04:	220a      	movs	r2, #10
 8018b06:	4630      	mov	r0, r6
 8018b08:	f000 f9d4 	bl	8018eb4 <__multadd>
 8018b0c:	45b9      	cmp	r9, r7
 8018b0e:	4605      	mov	r5, r0
 8018b10:	f04f 0300 	mov.w	r3, #0
 8018b14:	f04f 020a 	mov.w	r2, #10
 8018b18:	4649      	mov	r1, r9
 8018b1a:	4630      	mov	r0, r6
 8018b1c:	d107      	bne.n	8018b2e <_dtoa_r+0xa16>
 8018b1e:	f000 f9c9 	bl	8018eb4 <__multadd>
 8018b22:	4681      	mov	r9, r0
 8018b24:	4607      	mov	r7, r0
 8018b26:	9b04      	ldr	r3, [sp, #16]
 8018b28:	3301      	adds	r3, #1
 8018b2a:	9304      	str	r3, [sp, #16]
 8018b2c:	e774      	b.n	8018a18 <_dtoa_r+0x900>
 8018b2e:	f000 f9c1 	bl	8018eb4 <__multadd>
 8018b32:	4639      	mov	r1, r7
 8018b34:	4681      	mov	r9, r0
 8018b36:	2300      	movs	r3, #0
 8018b38:	220a      	movs	r2, #10
 8018b3a:	4630      	mov	r0, r6
 8018b3c:	f000 f9ba 	bl	8018eb4 <__multadd>
 8018b40:	4607      	mov	r7, r0
 8018b42:	e7f0      	b.n	8018b26 <_dtoa_r+0xa0e>
 8018b44:	f1ba 0f00 	cmp.w	sl, #0
 8018b48:	9a01      	ldr	r2, [sp, #4]
 8018b4a:	bfcc      	ite	gt
 8018b4c:	46d0      	movgt	r8, sl
 8018b4e:	f04f 0801 	movle.w	r8, #1
 8018b52:	4490      	add	r8, r2
 8018b54:	f04f 0900 	mov.w	r9, #0
 8018b58:	4629      	mov	r1, r5
 8018b5a:	2201      	movs	r2, #1
 8018b5c:	4630      	mov	r0, r6
 8018b5e:	9302      	str	r3, [sp, #8]
 8018b60:	f000 fba0 	bl	80192a4 <__lshift>
 8018b64:	4621      	mov	r1, r4
 8018b66:	4605      	mov	r5, r0
 8018b68:	f000 fc08 	bl	801937c <__mcmp>
 8018b6c:	2800      	cmp	r0, #0
 8018b6e:	dcb1      	bgt.n	8018ad4 <_dtoa_r+0x9bc>
 8018b70:	d102      	bne.n	8018b78 <_dtoa_r+0xa60>
 8018b72:	9b02      	ldr	r3, [sp, #8]
 8018b74:	07db      	lsls	r3, r3, #31
 8018b76:	d4ad      	bmi.n	8018ad4 <_dtoa_r+0x9bc>
 8018b78:	4643      	mov	r3, r8
 8018b7a:	4698      	mov	r8, r3
 8018b7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018b80:	2a30      	cmp	r2, #48	; 0x30
 8018b82:	d0fa      	beq.n	8018b7a <_dtoa_r+0xa62>
 8018b84:	e6f7      	b.n	8018976 <_dtoa_r+0x85e>
 8018b86:	9a01      	ldr	r2, [sp, #4]
 8018b88:	429a      	cmp	r2, r3
 8018b8a:	d1a4      	bne.n	8018ad6 <_dtoa_r+0x9be>
 8018b8c:	f10b 0b01 	add.w	fp, fp, #1
 8018b90:	2331      	movs	r3, #49	; 0x31
 8018b92:	e778      	b.n	8018a86 <_dtoa_r+0x96e>
 8018b94:	4b14      	ldr	r3, [pc, #80]	; (8018be8 <_dtoa_r+0xad0>)
 8018b96:	f7ff bb2a 	b.w	80181ee <_dtoa_r+0xd6>
 8018b9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	f47f ab05 	bne.w	80181ac <_dtoa_r+0x94>
 8018ba2:	4b12      	ldr	r3, [pc, #72]	; (8018bec <_dtoa_r+0xad4>)
 8018ba4:	f7ff bb23 	b.w	80181ee <_dtoa_r+0xd6>
 8018ba8:	f1ba 0f00 	cmp.w	sl, #0
 8018bac:	dc03      	bgt.n	8018bb6 <_dtoa_r+0xa9e>
 8018bae:	9b06      	ldr	r3, [sp, #24]
 8018bb0:	2b02      	cmp	r3, #2
 8018bb2:	f73f aec8 	bgt.w	8018946 <_dtoa_r+0x82e>
 8018bb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018bba:	4621      	mov	r1, r4
 8018bbc:	4628      	mov	r0, r5
 8018bbe:	f7ff fa23 	bl	8018008 <quorem>
 8018bc2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018bc6:	f808 3b01 	strb.w	r3, [r8], #1
 8018bca:	9a01      	ldr	r2, [sp, #4]
 8018bcc:	eba8 0202 	sub.w	r2, r8, r2
 8018bd0:	4592      	cmp	sl, r2
 8018bd2:	ddb7      	ble.n	8018b44 <_dtoa_r+0xa2c>
 8018bd4:	4629      	mov	r1, r5
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	220a      	movs	r2, #10
 8018bda:	4630      	mov	r0, r6
 8018bdc:	f000 f96a 	bl	8018eb4 <__multadd>
 8018be0:	4605      	mov	r5, r0
 8018be2:	e7ea      	b.n	8018bba <_dtoa_r+0xaa2>
 8018be4:	0801c8a9 	.word	0x0801c8a9
 8018be8:	0801c804 	.word	0x0801c804
 8018bec:	0801c82d 	.word	0x0801c82d

08018bf0 <_free_r>:
 8018bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018bf2:	2900      	cmp	r1, #0
 8018bf4:	d044      	beq.n	8018c80 <_free_r+0x90>
 8018bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018bfa:	9001      	str	r0, [sp, #4]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8018c02:	bfb8      	it	lt
 8018c04:	18e4      	addlt	r4, r4, r3
 8018c06:	f000 f8e7 	bl	8018dd8 <__malloc_lock>
 8018c0a:	4a1e      	ldr	r2, [pc, #120]	; (8018c84 <_free_r+0x94>)
 8018c0c:	9801      	ldr	r0, [sp, #4]
 8018c0e:	6813      	ldr	r3, [r2, #0]
 8018c10:	b933      	cbnz	r3, 8018c20 <_free_r+0x30>
 8018c12:	6063      	str	r3, [r4, #4]
 8018c14:	6014      	str	r4, [r2, #0]
 8018c16:	b003      	add	sp, #12
 8018c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c1c:	f000 b8e2 	b.w	8018de4 <__malloc_unlock>
 8018c20:	42a3      	cmp	r3, r4
 8018c22:	d908      	bls.n	8018c36 <_free_r+0x46>
 8018c24:	6825      	ldr	r5, [r4, #0]
 8018c26:	1961      	adds	r1, r4, r5
 8018c28:	428b      	cmp	r3, r1
 8018c2a:	bf01      	itttt	eq
 8018c2c:	6819      	ldreq	r1, [r3, #0]
 8018c2e:	685b      	ldreq	r3, [r3, #4]
 8018c30:	1949      	addeq	r1, r1, r5
 8018c32:	6021      	streq	r1, [r4, #0]
 8018c34:	e7ed      	b.n	8018c12 <_free_r+0x22>
 8018c36:	461a      	mov	r2, r3
 8018c38:	685b      	ldr	r3, [r3, #4]
 8018c3a:	b10b      	cbz	r3, 8018c40 <_free_r+0x50>
 8018c3c:	42a3      	cmp	r3, r4
 8018c3e:	d9fa      	bls.n	8018c36 <_free_r+0x46>
 8018c40:	6811      	ldr	r1, [r2, #0]
 8018c42:	1855      	adds	r5, r2, r1
 8018c44:	42a5      	cmp	r5, r4
 8018c46:	d10b      	bne.n	8018c60 <_free_r+0x70>
 8018c48:	6824      	ldr	r4, [r4, #0]
 8018c4a:	4421      	add	r1, r4
 8018c4c:	1854      	adds	r4, r2, r1
 8018c4e:	42a3      	cmp	r3, r4
 8018c50:	6011      	str	r1, [r2, #0]
 8018c52:	d1e0      	bne.n	8018c16 <_free_r+0x26>
 8018c54:	681c      	ldr	r4, [r3, #0]
 8018c56:	685b      	ldr	r3, [r3, #4]
 8018c58:	6053      	str	r3, [r2, #4]
 8018c5a:	440c      	add	r4, r1
 8018c5c:	6014      	str	r4, [r2, #0]
 8018c5e:	e7da      	b.n	8018c16 <_free_r+0x26>
 8018c60:	d902      	bls.n	8018c68 <_free_r+0x78>
 8018c62:	230c      	movs	r3, #12
 8018c64:	6003      	str	r3, [r0, #0]
 8018c66:	e7d6      	b.n	8018c16 <_free_r+0x26>
 8018c68:	6825      	ldr	r5, [r4, #0]
 8018c6a:	1961      	adds	r1, r4, r5
 8018c6c:	428b      	cmp	r3, r1
 8018c6e:	bf04      	itt	eq
 8018c70:	6819      	ldreq	r1, [r3, #0]
 8018c72:	685b      	ldreq	r3, [r3, #4]
 8018c74:	6063      	str	r3, [r4, #4]
 8018c76:	bf04      	itt	eq
 8018c78:	1949      	addeq	r1, r1, r5
 8018c7a:	6021      	streq	r1, [r4, #0]
 8018c7c:	6054      	str	r4, [r2, #4]
 8018c7e:	e7ca      	b.n	8018c16 <_free_r+0x26>
 8018c80:	b003      	add	sp, #12
 8018c82:	bd30      	pop	{r4, r5, pc}
 8018c84:	24002adc 	.word	0x24002adc

08018c88 <malloc>:
 8018c88:	4b02      	ldr	r3, [pc, #8]	; (8018c94 <malloc+0xc>)
 8018c8a:	4601      	mov	r1, r0
 8018c8c:	6818      	ldr	r0, [r3, #0]
 8018c8e:	f000 b823 	b.w	8018cd8 <_malloc_r>
 8018c92:	bf00      	nop
 8018c94:	24000158 	.word	0x24000158

08018c98 <sbrk_aligned>:
 8018c98:	b570      	push	{r4, r5, r6, lr}
 8018c9a:	4e0e      	ldr	r6, [pc, #56]	; (8018cd4 <sbrk_aligned+0x3c>)
 8018c9c:	460c      	mov	r4, r1
 8018c9e:	6831      	ldr	r1, [r6, #0]
 8018ca0:	4605      	mov	r5, r0
 8018ca2:	b911      	cbnz	r1, 8018caa <sbrk_aligned+0x12>
 8018ca4:	f001 fdd6 	bl	801a854 <_sbrk_r>
 8018ca8:	6030      	str	r0, [r6, #0]
 8018caa:	4621      	mov	r1, r4
 8018cac:	4628      	mov	r0, r5
 8018cae:	f001 fdd1 	bl	801a854 <_sbrk_r>
 8018cb2:	1c43      	adds	r3, r0, #1
 8018cb4:	d00a      	beq.n	8018ccc <sbrk_aligned+0x34>
 8018cb6:	1cc4      	adds	r4, r0, #3
 8018cb8:	f024 0403 	bic.w	r4, r4, #3
 8018cbc:	42a0      	cmp	r0, r4
 8018cbe:	d007      	beq.n	8018cd0 <sbrk_aligned+0x38>
 8018cc0:	1a21      	subs	r1, r4, r0
 8018cc2:	4628      	mov	r0, r5
 8018cc4:	f001 fdc6 	bl	801a854 <_sbrk_r>
 8018cc8:	3001      	adds	r0, #1
 8018cca:	d101      	bne.n	8018cd0 <sbrk_aligned+0x38>
 8018ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	bd70      	pop	{r4, r5, r6, pc}
 8018cd4:	24002ae0 	.word	0x24002ae0

08018cd8 <_malloc_r>:
 8018cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cdc:	1ccd      	adds	r5, r1, #3
 8018cde:	f025 0503 	bic.w	r5, r5, #3
 8018ce2:	3508      	adds	r5, #8
 8018ce4:	2d0c      	cmp	r5, #12
 8018ce6:	bf38      	it	cc
 8018ce8:	250c      	movcc	r5, #12
 8018cea:	2d00      	cmp	r5, #0
 8018cec:	4607      	mov	r7, r0
 8018cee:	db01      	blt.n	8018cf4 <_malloc_r+0x1c>
 8018cf0:	42a9      	cmp	r1, r5
 8018cf2:	d905      	bls.n	8018d00 <_malloc_r+0x28>
 8018cf4:	230c      	movs	r3, #12
 8018cf6:	603b      	str	r3, [r7, #0]
 8018cf8:	2600      	movs	r6, #0
 8018cfa:	4630      	mov	r0, r6
 8018cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018dd4 <_malloc_r+0xfc>
 8018d04:	f000 f868 	bl	8018dd8 <__malloc_lock>
 8018d08:	f8d8 3000 	ldr.w	r3, [r8]
 8018d0c:	461c      	mov	r4, r3
 8018d0e:	bb5c      	cbnz	r4, 8018d68 <_malloc_r+0x90>
 8018d10:	4629      	mov	r1, r5
 8018d12:	4638      	mov	r0, r7
 8018d14:	f7ff ffc0 	bl	8018c98 <sbrk_aligned>
 8018d18:	1c43      	adds	r3, r0, #1
 8018d1a:	4604      	mov	r4, r0
 8018d1c:	d155      	bne.n	8018dca <_malloc_r+0xf2>
 8018d1e:	f8d8 4000 	ldr.w	r4, [r8]
 8018d22:	4626      	mov	r6, r4
 8018d24:	2e00      	cmp	r6, #0
 8018d26:	d145      	bne.n	8018db4 <_malloc_r+0xdc>
 8018d28:	2c00      	cmp	r4, #0
 8018d2a:	d048      	beq.n	8018dbe <_malloc_r+0xe6>
 8018d2c:	6823      	ldr	r3, [r4, #0]
 8018d2e:	4631      	mov	r1, r6
 8018d30:	4638      	mov	r0, r7
 8018d32:	eb04 0903 	add.w	r9, r4, r3
 8018d36:	f001 fd8d 	bl	801a854 <_sbrk_r>
 8018d3a:	4581      	cmp	r9, r0
 8018d3c:	d13f      	bne.n	8018dbe <_malloc_r+0xe6>
 8018d3e:	6821      	ldr	r1, [r4, #0]
 8018d40:	1a6d      	subs	r5, r5, r1
 8018d42:	4629      	mov	r1, r5
 8018d44:	4638      	mov	r0, r7
 8018d46:	f7ff ffa7 	bl	8018c98 <sbrk_aligned>
 8018d4a:	3001      	adds	r0, #1
 8018d4c:	d037      	beq.n	8018dbe <_malloc_r+0xe6>
 8018d4e:	6823      	ldr	r3, [r4, #0]
 8018d50:	442b      	add	r3, r5
 8018d52:	6023      	str	r3, [r4, #0]
 8018d54:	f8d8 3000 	ldr.w	r3, [r8]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d038      	beq.n	8018dce <_malloc_r+0xf6>
 8018d5c:	685a      	ldr	r2, [r3, #4]
 8018d5e:	42a2      	cmp	r2, r4
 8018d60:	d12b      	bne.n	8018dba <_malloc_r+0xe2>
 8018d62:	2200      	movs	r2, #0
 8018d64:	605a      	str	r2, [r3, #4]
 8018d66:	e00f      	b.n	8018d88 <_malloc_r+0xb0>
 8018d68:	6822      	ldr	r2, [r4, #0]
 8018d6a:	1b52      	subs	r2, r2, r5
 8018d6c:	d41f      	bmi.n	8018dae <_malloc_r+0xd6>
 8018d6e:	2a0b      	cmp	r2, #11
 8018d70:	d917      	bls.n	8018da2 <_malloc_r+0xca>
 8018d72:	1961      	adds	r1, r4, r5
 8018d74:	42a3      	cmp	r3, r4
 8018d76:	6025      	str	r5, [r4, #0]
 8018d78:	bf18      	it	ne
 8018d7a:	6059      	strne	r1, [r3, #4]
 8018d7c:	6863      	ldr	r3, [r4, #4]
 8018d7e:	bf08      	it	eq
 8018d80:	f8c8 1000 	streq.w	r1, [r8]
 8018d84:	5162      	str	r2, [r4, r5]
 8018d86:	604b      	str	r3, [r1, #4]
 8018d88:	4638      	mov	r0, r7
 8018d8a:	f104 060b 	add.w	r6, r4, #11
 8018d8e:	f000 f829 	bl	8018de4 <__malloc_unlock>
 8018d92:	f026 0607 	bic.w	r6, r6, #7
 8018d96:	1d23      	adds	r3, r4, #4
 8018d98:	1af2      	subs	r2, r6, r3
 8018d9a:	d0ae      	beq.n	8018cfa <_malloc_r+0x22>
 8018d9c:	1b9b      	subs	r3, r3, r6
 8018d9e:	50a3      	str	r3, [r4, r2]
 8018da0:	e7ab      	b.n	8018cfa <_malloc_r+0x22>
 8018da2:	42a3      	cmp	r3, r4
 8018da4:	6862      	ldr	r2, [r4, #4]
 8018da6:	d1dd      	bne.n	8018d64 <_malloc_r+0x8c>
 8018da8:	f8c8 2000 	str.w	r2, [r8]
 8018dac:	e7ec      	b.n	8018d88 <_malloc_r+0xb0>
 8018dae:	4623      	mov	r3, r4
 8018db0:	6864      	ldr	r4, [r4, #4]
 8018db2:	e7ac      	b.n	8018d0e <_malloc_r+0x36>
 8018db4:	4634      	mov	r4, r6
 8018db6:	6876      	ldr	r6, [r6, #4]
 8018db8:	e7b4      	b.n	8018d24 <_malloc_r+0x4c>
 8018dba:	4613      	mov	r3, r2
 8018dbc:	e7cc      	b.n	8018d58 <_malloc_r+0x80>
 8018dbe:	230c      	movs	r3, #12
 8018dc0:	603b      	str	r3, [r7, #0]
 8018dc2:	4638      	mov	r0, r7
 8018dc4:	f000 f80e 	bl	8018de4 <__malloc_unlock>
 8018dc8:	e797      	b.n	8018cfa <_malloc_r+0x22>
 8018dca:	6025      	str	r5, [r4, #0]
 8018dcc:	e7dc      	b.n	8018d88 <_malloc_r+0xb0>
 8018dce:	605b      	str	r3, [r3, #4]
 8018dd0:	deff      	udf	#255	; 0xff
 8018dd2:	bf00      	nop
 8018dd4:	24002adc 	.word	0x24002adc

08018dd8 <__malloc_lock>:
 8018dd8:	4801      	ldr	r0, [pc, #4]	; (8018de0 <__malloc_lock+0x8>)
 8018dda:	f7ff b8fe 	b.w	8017fda <__retarget_lock_acquire_recursive>
 8018dde:	bf00      	nop
 8018de0:	24002ad8 	.word	0x24002ad8

08018de4 <__malloc_unlock>:
 8018de4:	4801      	ldr	r0, [pc, #4]	; (8018dec <__malloc_unlock+0x8>)
 8018de6:	f7ff b8f9 	b.w	8017fdc <__retarget_lock_release_recursive>
 8018dea:	bf00      	nop
 8018dec:	24002ad8 	.word	0x24002ad8

08018df0 <_Balloc>:
 8018df0:	b570      	push	{r4, r5, r6, lr}
 8018df2:	69c6      	ldr	r6, [r0, #28]
 8018df4:	4604      	mov	r4, r0
 8018df6:	460d      	mov	r5, r1
 8018df8:	b976      	cbnz	r6, 8018e18 <_Balloc+0x28>
 8018dfa:	2010      	movs	r0, #16
 8018dfc:	f7ff ff44 	bl	8018c88 <malloc>
 8018e00:	4602      	mov	r2, r0
 8018e02:	61e0      	str	r0, [r4, #28]
 8018e04:	b920      	cbnz	r0, 8018e10 <_Balloc+0x20>
 8018e06:	4b18      	ldr	r3, [pc, #96]	; (8018e68 <_Balloc+0x78>)
 8018e08:	4818      	ldr	r0, [pc, #96]	; (8018e6c <_Balloc+0x7c>)
 8018e0a:	216b      	movs	r1, #107	; 0x6b
 8018e0c:	f001 fd3c 	bl	801a888 <__assert_func>
 8018e10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e14:	6006      	str	r6, [r0, #0]
 8018e16:	60c6      	str	r6, [r0, #12]
 8018e18:	69e6      	ldr	r6, [r4, #28]
 8018e1a:	68f3      	ldr	r3, [r6, #12]
 8018e1c:	b183      	cbz	r3, 8018e40 <_Balloc+0x50>
 8018e1e:	69e3      	ldr	r3, [r4, #28]
 8018e20:	68db      	ldr	r3, [r3, #12]
 8018e22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018e26:	b9b8      	cbnz	r0, 8018e58 <_Balloc+0x68>
 8018e28:	2101      	movs	r1, #1
 8018e2a:	fa01 f605 	lsl.w	r6, r1, r5
 8018e2e:	1d72      	adds	r2, r6, #5
 8018e30:	0092      	lsls	r2, r2, #2
 8018e32:	4620      	mov	r0, r4
 8018e34:	f001 fd46 	bl	801a8c4 <_calloc_r>
 8018e38:	b160      	cbz	r0, 8018e54 <_Balloc+0x64>
 8018e3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018e3e:	e00e      	b.n	8018e5e <_Balloc+0x6e>
 8018e40:	2221      	movs	r2, #33	; 0x21
 8018e42:	2104      	movs	r1, #4
 8018e44:	4620      	mov	r0, r4
 8018e46:	f001 fd3d 	bl	801a8c4 <_calloc_r>
 8018e4a:	69e3      	ldr	r3, [r4, #28]
 8018e4c:	60f0      	str	r0, [r6, #12]
 8018e4e:	68db      	ldr	r3, [r3, #12]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d1e4      	bne.n	8018e1e <_Balloc+0x2e>
 8018e54:	2000      	movs	r0, #0
 8018e56:	bd70      	pop	{r4, r5, r6, pc}
 8018e58:	6802      	ldr	r2, [r0, #0]
 8018e5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018e5e:	2300      	movs	r3, #0
 8018e60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018e64:	e7f7      	b.n	8018e56 <_Balloc+0x66>
 8018e66:	bf00      	nop
 8018e68:	0801c83a 	.word	0x0801c83a
 8018e6c:	0801c8ba 	.word	0x0801c8ba

08018e70 <_Bfree>:
 8018e70:	b570      	push	{r4, r5, r6, lr}
 8018e72:	69c6      	ldr	r6, [r0, #28]
 8018e74:	4605      	mov	r5, r0
 8018e76:	460c      	mov	r4, r1
 8018e78:	b976      	cbnz	r6, 8018e98 <_Bfree+0x28>
 8018e7a:	2010      	movs	r0, #16
 8018e7c:	f7ff ff04 	bl	8018c88 <malloc>
 8018e80:	4602      	mov	r2, r0
 8018e82:	61e8      	str	r0, [r5, #28]
 8018e84:	b920      	cbnz	r0, 8018e90 <_Bfree+0x20>
 8018e86:	4b09      	ldr	r3, [pc, #36]	; (8018eac <_Bfree+0x3c>)
 8018e88:	4809      	ldr	r0, [pc, #36]	; (8018eb0 <_Bfree+0x40>)
 8018e8a:	218f      	movs	r1, #143	; 0x8f
 8018e8c:	f001 fcfc 	bl	801a888 <__assert_func>
 8018e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e94:	6006      	str	r6, [r0, #0]
 8018e96:	60c6      	str	r6, [r0, #12]
 8018e98:	b13c      	cbz	r4, 8018eaa <_Bfree+0x3a>
 8018e9a:	69eb      	ldr	r3, [r5, #28]
 8018e9c:	6862      	ldr	r2, [r4, #4]
 8018e9e:	68db      	ldr	r3, [r3, #12]
 8018ea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ea4:	6021      	str	r1, [r4, #0]
 8018ea6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018eaa:	bd70      	pop	{r4, r5, r6, pc}
 8018eac:	0801c83a 	.word	0x0801c83a
 8018eb0:	0801c8ba 	.word	0x0801c8ba

08018eb4 <__multadd>:
 8018eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eb8:	690d      	ldr	r5, [r1, #16]
 8018eba:	4607      	mov	r7, r0
 8018ebc:	460c      	mov	r4, r1
 8018ebe:	461e      	mov	r6, r3
 8018ec0:	f101 0c14 	add.w	ip, r1, #20
 8018ec4:	2000      	movs	r0, #0
 8018ec6:	f8dc 3000 	ldr.w	r3, [ip]
 8018eca:	b299      	uxth	r1, r3
 8018ecc:	fb02 6101 	mla	r1, r2, r1, r6
 8018ed0:	0c1e      	lsrs	r6, r3, #16
 8018ed2:	0c0b      	lsrs	r3, r1, #16
 8018ed4:	fb02 3306 	mla	r3, r2, r6, r3
 8018ed8:	b289      	uxth	r1, r1
 8018eda:	3001      	adds	r0, #1
 8018edc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018ee0:	4285      	cmp	r5, r0
 8018ee2:	f84c 1b04 	str.w	r1, [ip], #4
 8018ee6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018eea:	dcec      	bgt.n	8018ec6 <__multadd+0x12>
 8018eec:	b30e      	cbz	r6, 8018f32 <__multadd+0x7e>
 8018eee:	68a3      	ldr	r3, [r4, #8]
 8018ef0:	42ab      	cmp	r3, r5
 8018ef2:	dc19      	bgt.n	8018f28 <__multadd+0x74>
 8018ef4:	6861      	ldr	r1, [r4, #4]
 8018ef6:	4638      	mov	r0, r7
 8018ef8:	3101      	adds	r1, #1
 8018efa:	f7ff ff79 	bl	8018df0 <_Balloc>
 8018efe:	4680      	mov	r8, r0
 8018f00:	b928      	cbnz	r0, 8018f0e <__multadd+0x5a>
 8018f02:	4602      	mov	r2, r0
 8018f04:	4b0c      	ldr	r3, [pc, #48]	; (8018f38 <__multadd+0x84>)
 8018f06:	480d      	ldr	r0, [pc, #52]	; (8018f3c <__multadd+0x88>)
 8018f08:	21ba      	movs	r1, #186	; 0xba
 8018f0a:	f001 fcbd 	bl	801a888 <__assert_func>
 8018f0e:	6922      	ldr	r2, [r4, #16]
 8018f10:	3202      	adds	r2, #2
 8018f12:	f104 010c 	add.w	r1, r4, #12
 8018f16:	0092      	lsls	r2, r2, #2
 8018f18:	300c      	adds	r0, #12
 8018f1a:	f7ff f860 	bl	8017fde <memcpy>
 8018f1e:	4621      	mov	r1, r4
 8018f20:	4638      	mov	r0, r7
 8018f22:	f7ff ffa5 	bl	8018e70 <_Bfree>
 8018f26:	4644      	mov	r4, r8
 8018f28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018f2c:	3501      	adds	r5, #1
 8018f2e:	615e      	str	r6, [r3, #20]
 8018f30:	6125      	str	r5, [r4, #16]
 8018f32:	4620      	mov	r0, r4
 8018f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f38:	0801c8a9 	.word	0x0801c8a9
 8018f3c:	0801c8ba 	.word	0x0801c8ba

08018f40 <__s2b>:
 8018f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f44:	460c      	mov	r4, r1
 8018f46:	4615      	mov	r5, r2
 8018f48:	461f      	mov	r7, r3
 8018f4a:	2209      	movs	r2, #9
 8018f4c:	3308      	adds	r3, #8
 8018f4e:	4606      	mov	r6, r0
 8018f50:	fb93 f3f2 	sdiv	r3, r3, r2
 8018f54:	2100      	movs	r1, #0
 8018f56:	2201      	movs	r2, #1
 8018f58:	429a      	cmp	r2, r3
 8018f5a:	db09      	blt.n	8018f70 <__s2b+0x30>
 8018f5c:	4630      	mov	r0, r6
 8018f5e:	f7ff ff47 	bl	8018df0 <_Balloc>
 8018f62:	b940      	cbnz	r0, 8018f76 <__s2b+0x36>
 8018f64:	4602      	mov	r2, r0
 8018f66:	4b19      	ldr	r3, [pc, #100]	; (8018fcc <__s2b+0x8c>)
 8018f68:	4819      	ldr	r0, [pc, #100]	; (8018fd0 <__s2b+0x90>)
 8018f6a:	21d3      	movs	r1, #211	; 0xd3
 8018f6c:	f001 fc8c 	bl	801a888 <__assert_func>
 8018f70:	0052      	lsls	r2, r2, #1
 8018f72:	3101      	adds	r1, #1
 8018f74:	e7f0      	b.n	8018f58 <__s2b+0x18>
 8018f76:	9b08      	ldr	r3, [sp, #32]
 8018f78:	6143      	str	r3, [r0, #20]
 8018f7a:	2d09      	cmp	r5, #9
 8018f7c:	f04f 0301 	mov.w	r3, #1
 8018f80:	6103      	str	r3, [r0, #16]
 8018f82:	dd16      	ble.n	8018fb2 <__s2b+0x72>
 8018f84:	f104 0909 	add.w	r9, r4, #9
 8018f88:	46c8      	mov	r8, r9
 8018f8a:	442c      	add	r4, r5
 8018f8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018f90:	4601      	mov	r1, r0
 8018f92:	3b30      	subs	r3, #48	; 0x30
 8018f94:	220a      	movs	r2, #10
 8018f96:	4630      	mov	r0, r6
 8018f98:	f7ff ff8c 	bl	8018eb4 <__multadd>
 8018f9c:	45a0      	cmp	r8, r4
 8018f9e:	d1f5      	bne.n	8018f8c <__s2b+0x4c>
 8018fa0:	f1a5 0408 	sub.w	r4, r5, #8
 8018fa4:	444c      	add	r4, r9
 8018fa6:	1b2d      	subs	r5, r5, r4
 8018fa8:	1963      	adds	r3, r4, r5
 8018faa:	42bb      	cmp	r3, r7
 8018fac:	db04      	blt.n	8018fb8 <__s2b+0x78>
 8018fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fb2:	340a      	adds	r4, #10
 8018fb4:	2509      	movs	r5, #9
 8018fb6:	e7f6      	b.n	8018fa6 <__s2b+0x66>
 8018fb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018fbc:	4601      	mov	r1, r0
 8018fbe:	3b30      	subs	r3, #48	; 0x30
 8018fc0:	220a      	movs	r2, #10
 8018fc2:	4630      	mov	r0, r6
 8018fc4:	f7ff ff76 	bl	8018eb4 <__multadd>
 8018fc8:	e7ee      	b.n	8018fa8 <__s2b+0x68>
 8018fca:	bf00      	nop
 8018fcc:	0801c8a9 	.word	0x0801c8a9
 8018fd0:	0801c8ba 	.word	0x0801c8ba

08018fd4 <__hi0bits>:
 8018fd4:	0c03      	lsrs	r3, r0, #16
 8018fd6:	041b      	lsls	r3, r3, #16
 8018fd8:	b9d3      	cbnz	r3, 8019010 <__hi0bits+0x3c>
 8018fda:	0400      	lsls	r0, r0, #16
 8018fdc:	2310      	movs	r3, #16
 8018fde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018fe2:	bf04      	itt	eq
 8018fe4:	0200      	lsleq	r0, r0, #8
 8018fe6:	3308      	addeq	r3, #8
 8018fe8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018fec:	bf04      	itt	eq
 8018fee:	0100      	lsleq	r0, r0, #4
 8018ff0:	3304      	addeq	r3, #4
 8018ff2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018ff6:	bf04      	itt	eq
 8018ff8:	0080      	lsleq	r0, r0, #2
 8018ffa:	3302      	addeq	r3, #2
 8018ffc:	2800      	cmp	r0, #0
 8018ffe:	db05      	blt.n	801900c <__hi0bits+0x38>
 8019000:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019004:	f103 0301 	add.w	r3, r3, #1
 8019008:	bf08      	it	eq
 801900a:	2320      	moveq	r3, #32
 801900c:	4618      	mov	r0, r3
 801900e:	4770      	bx	lr
 8019010:	2300      	movs	r3, #0
 8019012:	e7e4      	b.n	8018fde <__hi0bits+0xa>

08019014 <__lo0bits>:
 8019014:	6803      	ldr	r3, [r0, #0]
 8019016:	f013 0207 	ands.w	r2, r3, #7
 801901a:	d00c      	beq.n	8019036 <__lo0bits+0x22>
 801901c:	07d9      	lsls	r1, r3, #31
 801901e:	d422      	bmi.n	8019066 <__lo0bits+0x52>
 8019020:	079a      	lsls	r2, r3, #30
 8019022:	bf49      	itett	mi
 8019024:	085b      	lsrmi	r3, r3, #1
 8019026:	089b      	lsrpl	r3, r3, #2
 8019028:	6003      	strmi	r3, [r0, #0]
 801902a:	2201      	movmi	r2, #1
 801902c:	bf5c      	itt	pl
 801902e:	6003      	strpl	r3, [r0, #0]
 8019030:	2202      	movpl	r2, #2
 8019032:	4610      	mov	r0, r2
 8019034:	4770      	bx	lr
 8019036:	b299      	uxth	r1, r3
 8019038:	b909      	cbnz	r1, 801903e <__lo0bits+0x2a>
 801903a:	0c1b      	lsrs	r3, r3, #16
 801903c:	2210      	movs	r2, #16
 801903e:	b2d9      	uxtb	r1, r3
 8019040:	b909      	cbnz	r1, 8019046 <__lo0bits+0x32>
 8019042:	3208      	adds	r2, #8
 8019044:	0a1b      	lsrs	r3, r3, #8
 8019046:	0719      	lsls	r1, r3, #28
 8019048:	bf04      	itt	eq
 801904a:	091b      	lsreq	r3, r3, #4
 801904c:	3204      	addeq	r2, #4
 801904e:	0799      	lsls	r1, r3, #30
 8019050:	bf04      	itt	eq
 8019052:	089b      	lsreq	r3, r3, #2
 8019054:	3202      	addeq	r2, #2
 8019056:	07d9      	lsls	r1, r3, #31
 8019058:	d403      	bmi.n	8019062 <__lo0bits+0x4e>
 801905a:	085b      	lsrs	r3, r3, #1
 801905c:	f102 0201 	add.w	r2, r2, #1
 8019060:	d003      	beq.n	801906a <__lo0bits+0x56>
 8019062:	6003      	str	r3, [r0, #0]
 8019064:	e7e5      	b.n	8019032 <__lo0bits+0x1e>
 8019066:	2200      	movs	r2, #0
 8019068:	e7e3      	b.n	8019032 <__lo0bits+0x1e>
 801906a:	2220      	movs	r2, #32
 801906c:	e7e1      	b.n	8019032 <__lo0bits+0x1e>
	...

08019070 <__i2b>:
 8019070:	b510      	push	{r4, lr}
 8019072:	460c      	mov	r4, r1
 8019074:	2101      	movs	r1, #1
 8019076:	f7ff febb 	bl	8018df0 <_Balloc>
 801907a:	4602      	mov	r2, r0
 801907c:	b928      	cbnz	r0, 801908a <__i2b+0x1a>
 801907e:	4b05      	ldr	r3, [pc, #20]	; (8019094 <__i2b+0x24>)
 8019080:	4805      	ldr	r0, [pc, #20]	; (8019098 <__i2b+0x28>)
 8019082:	f240 1145 	movw	r1, #325	; 0x145
 8019086:	f001 fbff 	bl	801a888 <__assert_func>
 801908a:	2301      	movs	r3, #1
 801908c:	6144      	str	r4, [r0, #20]
 801908e:	6103      	str	r3, [r0, #16]
 8019090:	bd10      	pop	{r4, pc}
 8019092:	bf00      	nop
 8019094:	0801c8a9 	.word	0x0801c8a9
 8019098:	0801c8ba 	.word	0x0801c8ba

0801909c <__multiply>:
 801909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a0:	4691      	mov	r9, r2
 80190a2:	690a      	ldr	r2, [r1, #16]
 80190a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80190a8:	429a      	cmp	r2, r3
 80190aa:	bfb8      	it	lt
 80190ac:	460b      	movlt	r3, r1
 80190ae:	460c      	mov	r4, r1
 80190b0:	bfbc      	itt	lt
 80190b2:	464c      	movlt	r4, r9
 80190b4:	4699      	movlt	r9, r3
 80190b6:	6927      	ldr	r7, [r4, #16]
 80190b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80190bc:	68a3      	ldr	r3, [r4, #8]
 80190be:	6861      	ldr	r1, [r4, #4]
 80190c0:	eb07 060a 	add.w	r6, r7, sl
 80190c4:	42b3      	cmp	r3, r6
 80190c6:	b085      	sub	sp, #20
 80190c8:	bfb8      	it	lt
 80190ca:	3101      	addlt	r1, #1
 80190cc:	f7ff fe90 	bl	8018df0 <_Balloc>
 80190d0:	b930      	cbnz	r0, 80190e0 <__multiply+0x44>
 80190d2:	4602      	mov	r2, r0
 80190d4:	4b44      	ldr	r3, [pc, #272]	; (80191e8 <__multiply+0x14c>)
 80190d6:	4845      	ldr	r0, [pc, #276]	; (80191ec <__multiply+0x150>)
 80190d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80190dc:	f001 fbd4 	bl	801a888 <__assert_func>
 80190e0:	f100 0514 	add.w	r5, r0, #20
 80190e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80190e8:	462b      	mov	r3, r5
 80190ea:	2200      	movs	r2, #0
 80190ec:	4543      	cmp	r3, r8
 80190ee:	d321      	bcc.n	8019134 <__multiply+0x98>
 80190f0:	f104 0314 	add.w	r3, r4, #20
 80190f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80190f8:	f109 0314 	add.w	r3, r9, #20
 80190fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019100:	9202      	str	r2, [sp, #8]
 8019102:	1b3a      	subs	r2, r7, r4
 8019104:	3a15      	subs	r2, #21
 8019106:	f022 0203 	bic.w	r2, r2, #3
 801910a:	3204      	adds	r2, #4
 801910c:	f104 0115 	add.w	r1, r4, #21
 8019110:	428f      	cmp	r7, r1
 8019112:	bf38      	it	cc
 8019114:	2204      	movcc	r2, #4
 8019116:	9201      	str	r2, [sp, #4]
 8019118:	9a02      	ldr	r2, [sp, #8]
 801911a:	9303      	str	r3, [sp, #12]
 801911c:	429a      	cmp	r2, r3
 801911e:	d80c      	bhi.n	801913a <__multiply+0x9e>
 8019120:	2e00      	cmp	r6, #0
 8019122:	dd03      	ble.n	801912c <__multiply+0x90>
 8019124:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019128:	2b00      	cmp	r3, #0
 801912a:	d05b      	beq.n	80191e4 <__multiply+0x148>
 801912c:	6106      	str	r6, [r0, #16]
 801912e:	b005      	add	sp, #20
 8019130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019134:	f843 2b04 	str.w	r2, [r3], #4
 8019138:	e7d8      	b.n	80190ec <__multiply+0x50>
 801913a:	f8b3 a000 	ldrh.w	sl, [r3]
 801913e:	f1ba 0f00 	cmp.w	sl, #0
 8019142:	d024      	beq.n	801918e <__multiply+0xf2>
 8019144:	f104 0e14 	add.w	lr, r4, #20
 8019148:	46a9      	mov	r9, r5
 801914a:	f04f 0c00 	mov.w	ip, #0
 801914e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019152:	f8d9 1000 	ldr.w	r1, [r9]
 8019156:	fa1f fb82 	uxth.w	fp, r2
 801915a:	b289      	uxth	r1, r1
 801915c:	fb0a 110b 	mla	r1, sl, fp, r1
 8019160:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019164:	f8d9 2000 	ldr.w	r2, [r9]
 8019168:	4461      	add	r1, ip
 801916a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801916e:	fb0a c20b 	mla	r2, sl, fp, ip
 8019172:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019176:	b289      	uxth	r1, r1
 8019178:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801917c:	4577      	cmp	r7, lr
 801917e:	f849 1b04 	str.w	r1, [r9], #4
 8019182:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019186:	d8e2      	bhi.n	801914e <__multiply+0xb2>
 8019188:	9a01      	ldr	r2, [sp, #4]
 801918a:	f845 c002 	str.w	ip, [r5, r2]
 801918e:	9a03      	ldr	r2, [sp, #12]
 8019190:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019194:	3304      	adds	r3, #4
 8019196:	f1b9 0f00 	cmp.w	r9, #0
 801919a:	d021      	beq.n	80191e0 <__multiply+0x144>
 801919c:	6829      	ldr	r1, [r5, #0]
 801919e:	f104 0c14 	add.w	ip, r4, #20
 80191a2:	46ae      	mov	lr, r5
 80191a4:	f04f 0a00 	mov.w	sl, #0
 80191a8:	f8bc b000 	ldrh.w	fp, [ip]
 80191ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80191b0:	fb09 220b 	mla	r2, r9, fp, r2
 80191b4:	4452      	add	r2, sl
 80191b6:	b289      	uxth	r1, r1
 80191b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80191bc:	f84e 1b04 	str.w	r1, [lr], #4
 80191c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80191c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80191c8:	f8be 1000 	ldrh.w	r1, [lr]
 80191cc:	fb09 110a 	mla	r1, r9, sl, r1
 80191d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80191d4:	4567      	cmp	r7, ip
 80191d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80191da:	d8e5      	bhi.n	80191a8 <__multiply+0x10c>
 80191dc:	9a01      	ldr	r2, [sp, #4]
 80191de:	50a9      	str	r1, [r5, r2]
 80191e0:	3504      	adds	r5, #4
 80191e2:	e799      	b.n	8019118 <__multiply+0x7c>
 80191e4:	3e01      	subs	r6, #1
 80191e6:	e79b      	b.n	8019120 <__multiply+0x84>
 80191e8:	0801c8a9 	.word	0x0801c8a9
 80191ec:	0801c8ba 	.word	0x0801c8ba

080191f0 <__pow5mult>:
 80191f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191f4:	4615      	mov	r5, r2
 80191f6:	f012 0203 	ands.w	r2, r2, #3
 80191fa:	4606      	mov	r6, r0
 80191fc:	460f      	mov	r7, r1
 80191fe:	d007      	beq.n	8019210 <__pow5mult+0x20>
 8019200:	4c25      	ldr	r4, [pc, #148]	; (8019298 <__pow5mult+0xa8>)
 8019202:	3a01      	subs	r2, #1
 8019204:	2300      	movs	r3, #0
 8019206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801920a:	f7ff fe53 	bl	8018eb4 <__multadd>
 801920e:	4607      	mov	r7, r0
 8019210:	10ad      	asrs	r5, r5, #2
 8019212:	d03d      	beq.n	8019290 <__pow5mult+0xa0>
 8019214:	69f4      	ldr	r4, [r6, #28]
 8019216:	b97c      	cbnz	r4, 8019238 <__pow5mult+0x48>
 8019218:	2010      	movs	r0, #16
 801921a:	f7ff fd35 	bl	8018c88 <malloc>
 801921e:	4602      	mov	r2, r0
 8019220:	61f0      	str	r0, [r6, #28]
 8019222:	b928      	cbnz	r0, 8019230 <__pow5mult+0x40>
 8019224:	4b1d      	ldr	r3, [pc, #116]	; (801929c <__pow5mult+0xac>)
 8019226:	481e      	ldr	r0, [pc, #120]	; (80192a0 <__pow5mult+0xb0>)
 8019228:	f240 11b3 	movw	r1, #435	; 0x1b3
 801922c:	f001 fb2c 	bl	801a888 <__assert_func>
 8019230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019234:	6004      	str	r4, [r0, #0]
 8019236:	60c4      	str	r4, [r0, #12]
 8019238:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801923c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019240:	b94c      	cbnz	r4, 8019256 <__pow5mult+0x66>
 8019242:	f240 2171 	movw	r1, #625	; 0x271
 8019246:	4630      	mov	r0, r6
 8019248:	f7ff ff12 	bl	8019070 <__i2b>
 801924c:	2300      	movs	r3, #0
 801924e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019252:	4604      	mov	r4, r0
 8019254:	6003      	str	r3, [r0, #0]
 8019256:	f04f 0900 	mov.w	r9, #0
 801925a:	07eb      	lsls	r3, r5, #31
 801925c:	d50a      	bpl.n	8019274 <__pow5mult+0x84>
 801925e:	4639      	mov	r1, r7
 8019260:	4622      	mov	r2, r4
 8019262:	4630      	mov	r0, r6
 8019264:	f7ff ff1a 	bl	801909c <__multiply>
 8019268:	4639      	mov	r1, r7
 801926a:	4680      	mov	r8, r0
 801926c:	4630      	mov	r0, r6
 801926e:	f7ff fdff 	bl	8018e70 <_Bfree>
 8019272:	4647      	mov	r7, r8
 8019274:	106d      	asrs	r5, r5, #1
 8019276:	d00b      	beq.n	8019290 <__pow5mult+0xa0>
 8019278:	6820      	ldr	r0, [r4, #0]
 801927a:	b938      	cbnz	r0, 801928c <__pow5mult+0x9c>
 801927c:	4622      	mov	r2, r4
 801927e:	4621      	mov	r1, r4
 8019280:	4630      	mov	r0, r6
 8019282:	f7ff ff0b 	bl	801909c <__multiply>
 8019286:	6020      	str	r0, [r4, #0]
 8019288:	f8c0 9000 	str.w	r9, [r0]
 801928c:	4604      	mov	r4, r0
 801928e:	e7e4      	b.n	801925a <__pow5mult+0x6a>
 8019290:	4638      	mov	r0, r7
 8019292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019296:	bf00      	nop
 8019298:	0801ca08 	.word	0x0801ca08
 801929c:	0801c83a 	.word	0x0801c83a
 80192a0:	0801c8ba 	.word	0x0801c8ba

080192a4 <__lshift>:
 80192a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192a8:	460c      	mov	r4, r1
 80192aa:	6849      	ldr	r1, [r1, #4]
 80192ac:	6923      	ldr	r3, [r4, #16]
 80192ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80192b2:	68a3      	ldr	r3, [r4, #8]
 80192b4:	4607      	mov	r7, r0
 80192b6:	4691      	mov	r9, r2
 80192b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80192bc:	f108 0601 	add.w	r6, r8, #1
 80192c0:	42b3      	cmp	r3, r6
 80192c2:	db0b      	blt.n	80192dc <__lshift+0x38>
 80192c4:	4638      	mov	r0, r7
 80192c6:	f7ff fd93 	bl	8018df0 <_Balloc>
 80192ca:	4605      	mov	r5, r0
 80192cc:	b948      	cbnz	r0, 80192e2 <__lshift+0x3e>
 80192ce:	4602      	mov	r2, r0
 80192d0:	4b28      	ldr	r3, [pc, #160]	; (8019374 <__lshift+0xd0>)
 80192d2:	4829      	ldr	r0, [pc, #164]	; (8019378 <__lshift+0xd4>)
 80192d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80192d8:	f001 fad6 	bl	801a888 <__assert_func>
 80192dc:	3101      	adds	r1, #1
 80192de:	005b      	lsls	r3, r3, #1
 80192e0:	e7ee      	b.n	80192c0 <__lshift+0x1c>
 80192e2:	2300      	movs	r3, #0
 80192e4:	f100 0114 	add.w	r1, r0, #20
 80192e8:	f100 0210 	add.w	r2, r0, #16
 80192ec:	4618      	mov	r0, r3
 80192ee:	4553      	cmp	r3, sl
 80192f0:	db33      	blt.n	801935a <__lshift+0xb6>
 80192f2:	6920      	ldr	r0, [r4, #16]
 80192f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80192f8:	f104 0314 	add.w	r3, r4, #20
 80192fc:	f019 091f 	ands.w	r9, r9, #31
 8019300:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019304:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019308:	d02b      	beq.n	8019362 <__lshift+0xbe>
 801930a:	f1c9 0e20 	rsb	lr, r9, #32
 801930e:	468a      	mov	sl, r1
 8019310:	2200      	movs	r2, #0
 8019312:	6818      	ldr	r0, [r3, #0]
 8019314:	fa00 f009 	lsl.w	r0, r0, r9
 8019318:	4310      	orrs	r0, r2
 801931a:	f84a 0b04 	str.w	r0, [sl], #4
 801931e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019322:	459c      	cmp	ip, r3
 8019324:	fa22 f20e 	lsr.w	r2, r2, lr
 8019328:	d8f3      	bhi.n	8019312 <__lshift+0x6e>
 801932a:	ebac 0304 	sub.w	r3, ip, r4
 801932e:	3b15      	subs	r3, #21
 8019330:	f023 0303 	bic.w	r3, r3, #3
 8019334:	3304      	adds	r3, #4
 8019336:	f104 0015 	add.w	r0, r4, #21
 801933a:	4584      	cmp	ip, r0
 801933c:	bf38      	it	cc
 801933e:	2304      	movcc	r3, #4
 8019340:	50ca      	str	r2, [r1, r3]
 8019342:	b10a      	cbz	r2, 8019348 <__lshift+0xa4>
 8019344:	f108 0602 	add.w	r6, r8, #2
 8019348:	3e01      	subs	r6, #1
 801934a:	4638      	mov	r0, r7
 801934c:	612e      	str	r6, [r5, #16]
 801934e:	4621      	mov	r1, r4
 8019350:	f7ff fd8e 	bl	8018e70 <_Bfree>
 8019354:	4628      	mov	r0, r5
 8019356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801935a:	f842 0f04 	str.w	r0, [r2, #4]!
 801935e:	3301      	adds	r3, #1
 8019360:	e7c5      	b.n	80192ee <__lshift+0x4a>
 8019362:	3904      	subs	r1, #4
 8019364:	f853 2b04 	ldr.w	r2, [r3], #4
 8019368:	f841 2f04 	str.w	r2, [r1, #4]!
 801936c:	459c      	cmp	ip, r3
 801936e:	d8f9      	bhi.n	8019364 <__lshift+0xc0>
 8019370:	e7ea      	b.n	8019348 <__lshift+0xa4>
 8019372:	bf00      	nop
 8019374:	0801c8a9 	.word	0x0801c8a9
 8019378:	0801c8ba 	.word	0x0801c8ba

0801937c <__mcmp>:
 801937c:	b530      	push	{r4, r5, lr}
 801937e:	6902      	ldr	r2, [r0, #16]
 8019380:	690c      	ldr	r4, [r1, #16]
 8019382:	1b12      	subs	r2, r2, r4
 8019384:	d10e      	bne.n	80193a4 <__mcmp+0x28>
 8019386:	f100 0314 	add.w	r3, r0, #20
 801938a:	3114      	adds	r1, #20
 801938c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019390:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019394:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019398:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801939c:	42a5      	cmp	r5, r4
 801939e:	d003      	beq.n	80193a8 <__mcmp+0x2c>
 80193a0:	d305      	bcc.n	80193ae <__mcmp+0x32>
 80193a2:	2201      	movs	r2, #1
 80193a4:	4610      	mov	r0, r2
 80193a6:	bd30      	pop	{r4, r5, pc}
 80193a8:	4283      	cmp	r3, r0
 80193aa:	d3f3      	bcc.n	8019394 <__mcmp+0x18>
 80193ac:	e7fa      	b.n	80193a4 <__mcmp+0x28>
 80193ae:	f04f 32ff 	mov.w	r2, #4294967295
 80193b2:	e7f7      	b.n	80193a4 <__mcmp+0x28>

080193b4 <__mdiff>:
 80193b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193b8:	460c      	mov	r4, r1
 80193ba:	4606      	mov	r6, r0
 80193bc:	4611      	mov	r1, r2
 80193be:	4620      	mov	r0, r4
 80193c0:	4690      	mov	r8, r2
 80193c2:	f7ff ffdb 	bl	801937c <__mcmp>
 80193c6:	1e05      	subs	r5, r0, #0
 80193c8:	d110      	bne.n	80193ec <__mdiff+0x38>
 80193ca:	4629      	mov	r1, r5
 80193cc:	4630      	mov	r0, r6
 80193ce:	f7ff fd0f 	bl	8018df0 <_Balloc>
 80193d2:	b930      	cbnz	r0, 80193e2 <__mdiff+0x2e>
 80193d4:	4b3a      	ldr	r3, [pc, #232]	; (80194c0 <__mdiff+0x10c>)
 80193d6:	4602      	mov	r2, r0
 80193d8:	f240 2137 	movw	r1, #567	; 0x237
 80193dc:	4839      	ldr	r0, [pc, #228]	; (80194c4 <__mdiff+0x110>)
 80193de:	f001 fa53 	bl	801a888 <__assert_func>
 80193e2:	2301      	movs	r3, #1
 80193e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80193e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193ec:	bfa4      	itt	ge
 80193ee:	4643      	movge	r3, r8
 80193f0:	46a0      	movge	r8, r4
 80193f2:	4630      	mov	r0, r6
 80193f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80193f8:	bfa6      	itte	ge
 80193fa:	461c      	movge	r4, r3
 80193fc:	2500      	movge	r5, #0
 80193fe:	2501      	movlt	r5, #1
 8019400:	f7ff fcf6 	bl	8018df0 <_Balloc>
 8019404:	b920      	cbnz	r0, 8019410 <__mdiff+0x5c>
 8019406:	4b2e      	ldr	r3, [pc, #184]	; (80194c0 <__mdiff+0x10c>)
 8019408:	4602      	mov	r2, r0
 801940a:	f240 2145 	movw	r1, #581	; 0x245
 801940e:	e7e5      	b.n	80193dc <__mdiff+0x28>
 8019410:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019414:	6926      	ldr	r6, [r4, #16]
 8019416:	60c5      	str	r5, [r0, #12]
 8019418:	f104 0914 	add.w	r9, r4, #20
 801941c:	f108 0514 	add.w	r5, r8, #20
 8019420:	f100 0e14 	add.w	lr, r0, #20
 8019424:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019428:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801942c:	f108 0210 	add.w	r2, r8, #16
 8019430:	46f2      	mov	sl, lr
 8019432:	2100      	movs	r1, #0
 8019434:	f859 3b04 	ldr.w	r3, [r9], #4
 8019438:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801943c:	fa11 f88b 	uxtah	r8, r1, fp
 8019440:	b299      	uxth	r1, r3
 8019442:	0c1b      	lsrs	r3, r3, #16
 8019444:	eba8 0801 	sub.w	r8, r8, r1
 8019448:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801944c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019450:	fa1f f888 	uxth.w	r8, r8
 8019454:	1419      	asrs	r1, r3, #16
 8019456:	454e      	cmp	r6, r9
 8019458:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801945c:	f84a 3b04 	str.w	r3, [sl], #4
 8019460:	d8e8      	bhi.n	8019434 <__mdiff+0x80>
 8019462:	1b33      	subs	r3, r6, r4
 8019464:	3b15      	subs	r3, #21
 8019466:	f023 0303 	bic.w	r3, r3, #3
 801946a:	3304      	adds	r3, #4
 801946c:	3415      	adds	r4, #21
 801946e:	42a6      	cmp	r6, r4
 8019470:	bf38      	it	cc
 8019472:	2304      	movcc	r3, #4
 8019474:	441d      	add	r5, r3
 8019476:	4473      	add	r3, lr
 8019478:	469e      	mov	lr, r3
 801947a:	462e      	mov	r6, r5
 801947c:	4566      	cmp	r6, ip
 801947e:	d30e      	bcc.n	801949e <__mdiff+0xea>
 8019480:	f10c 0203 	add.w	r2, ip, #3
 8019484:	1b52      	subs	r2, r2, r5
 8019486:	f022 0203 	bic.w	r2, r2, #3
 801948a:	3d03      	subs	r5, #3
 801948c:	45ac      	cmp	ip, r5
 801948e:	bf38      	it	cc
 8019490:	2200      	movcc	r2, #0
 8019492:	4413      	add	r3, r2
 8019494:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019498:	b17a      	cbz	r2, 80194ba <__mdiff+0x106>
 801949a:	6107      	str	r7, [r0, #16]
 801949c:	e7a4      	b.n	80193e8 <__mdiff+0x34>
 801949e:	f856 8b04 	ldr.w	r8, [r6], #4
 80194a2:	fa11 f288 	uxtah	r2, r1, r8
 80194a6:	1414      	asrs	r4, r2, #16
 80194a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80194ac:	b292      	uxth	r2, r2
 80194ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80194b2:	f84e 2b04 	str.w	r2, [lr], #4
 80194b6:	1421      	asrs	r1, r4, #16
 80194b8:	e7e0      	b.n	801947c <__mdiff+0xc8>
 80194ba:	3f01      	subs	r7, #1
 80194bc:	e7ea      	b.n	8019494 <__mdiff+0xe0>
 80194be:	bf00      	nop
 80194c0:	0801c8a9 	.word	0x0801c8a9
 80194c4:	0801c8ba 	.word	0x0801c8ba

080194c8 <__ulp>:
 80194c8:	b082      	sub	sp, #8
 80194ca:	ed8d 0b00 	vstr	d0, [sp]
 80194ce:	9a01      	ldr	r2, [sp, #4]
 80194d0:	4b0f      	ldr	r3, [pc, #60]	; (8019510 <__ulp+0x48>)
 80194d2:	4013      	ands	r3, r2
 80194d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80194d8:	2b00      	cmp	r3, #0
 80194da:	dc08      	bgt.n	80194ee <__ulp+0x26>
 80194dc:	425b      	negs	r3, r3
 80194de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80194e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80194e6:	da04      	bge.n	80194f2 <__ulp+0x2a>
 80194e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80194ec:	4113      	asrs	r3, r2
 80194ee:	2200      	movs	r2, #0
 80194f0:	e008      	b.n	8019504 <__ulp+0x3c>
 80194f2:	f1a2 0314 	sub.w	r3, r2, #20
 80194f6:	2b1e      	cmp	r3, #30
 80194f8:	bfda      	itte	le
 80194fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80194fe:	40da      	lsrle	r2, r3
 8019500:	2201      	movgt	r2, #1
 8019502:	2300      	movs	r3, #0
 8019504:	4619      	mov	r1, r3
 8019506:	4610      	mov	r0, r2
 8019508:	ec41 0b10 	vmov	d0, r0, r1
 801950c:	b002      	add	sp, #8
 801950e:	4770      	bx	lr
 8019510:	7ff00000 	.word	0x7ff00000

08019514 <__b2d>:
 8019514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019518:	6906      	ldr	r6, [r0, #16]
 801951a:	f100 0814 	add.w	r8, r0, #20
 801951e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019522:	1f37      	subs	r7, r6, #4
 8019524:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019528:	4610      	mov	r0, r2
 801952a:	f7ff fd53 	bl	8018fd4 <__hi0bits>
 801952e:	f1c0 0320 	rsb	r3, r0, #32
 8019532:	280a      	cmp	r0, #10
 8019534:	600b      	str	r3, [r1, #0]
 8019536:	491b      	ldr	r1, [pc, #108]	; (80195a4 <__b2d+0x90>)
 8019538:	dc15      	bgt.n	8019566 <__b2d+0x52>
 801953a:	f1c0 0c0b 	rsb	ip, r0, #11
 801953e:	fa22 f30c 	lsr.w	r3, r2, ip
 8019542:	45b8      	cmp	r8, r7
 8019544:	ea43 0501 	orr.w	r5, r3, r1
 8019548:	bf34      	ite	cc
 801954a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801954e:	2300      	movcs	r3, #0
 8019550:	3015      	adds	r0, #21
 8019552:	fa02 f000 	lsl.w	r0, r2, r0
 8019556:	fa23 f30c 	lsr.w	r3, r3, ip
 801955a:	4303      	orrs	r3, r0
 801955c:	461c      	mov	r4, r3
 801955e:	ec45 4b10 	vmov	d0, r4, r5
 8019562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019566:	45b8      	cmp	r8, r7
 8019568:	bf3a      	itte	cc
 801956a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801956e:	f1a6 0708 	subcc.w	r7, r6, #8
 8019572:	2300      	movcs	r3, #0
 8019574:	380b      	subs	r0, #11
 8019576:	d012      	beq.n	801959e <__b2d+0x8a>
 8019578:	f1c0 0120 	rsb	r1, r0, #32
 801957c:	fa23 f401 	lsr.w	r4, r3, r1
 8019580:	4082      	lsls	r2, r0
 8019582:	4322      	orrs	r2, r4
 8019584:	4547      	cmp	r7, r8
 8019586:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801958a:	bf8c      	ite	hi
 801958c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019590:	2200      	movls	r2, #0
 8019592:	4083      	lsls	r3, r0
 8019594:	40ca      	lsrs	r2, r1
 8019596:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801959a:	4313      	orrs	r3, r2
 801959c:	e7de      	b.n	801955c <__b2d+0x48>
 801959e:	ea42 0501 	orr.w	r5, r2, r1
 80195a2:	e7db      	b.n	801955c <__b2d+0x48>
 80195a4:	3ff00000 	.word	0x3ff00000

080195a8 <__d2b>:
 80195a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80195ac:	460f      	mov	r7, r1
 80195ae:	2101      	movs	r1, #1
 80195b0:	ec59 8b10 	vmov	r8, r9, d0
 80195b4:	4616      	mov	r6, r2
 80195b6:	f7ff fc1b 	bl	8018df0 <_Balloc>
 80195ba:	4604      	mov	r4, r0
 80195bc:	b930      	cbnz	r0, 80195cc <__d2b+0x24>
 80195be:	4602      	mov	r2, r0
 80195c0:	4b24      	ldr	r3, [pc, #144]	; (8019654 <__d2b+0xac>)
 80195c2:	4825      	ldr	r0, [pc, #148]	; (8019658 <__d2b+0xb0>)
 80195c4:	f240 310f 	movw	r1, #783	; 0x30f
 80195c8:	f001 f95e 	bl	801a888 <__assert_func>
 80195cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80195d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80195d4:	bb2d      	cbnz	r5, 8019622 <__d2b+0x7a>
 80195d6:	9301      	str	r3, [sp, #4]
 80195d8:	f1b8 0300 	subs.w	r3, r8, #0
 80195dc:	d026      	beq.n	801962c <__d2b+0x84>
 80195de:	4668      	mov	r0, sp
 80195e0:	9300      	str	r3, [sp, #0]
 80195e2:	f7ff fd17 	bl	8019014 <__lo0bits>
 80195e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80195ea:	b1e8      	cbz	r0, 8019628 <__d2b+0x80>
 80195ec:	f1c0 0320 	rsb	r3, r0, #32
 80195f0:	fa02 f303 	lsl.w	r3, r2, r3
 80195f4:	430b      	orrs	r3, r1
 80195f6:	40c2      	lsrs	r2, r0
 80195f8:	6163      	str	r3, [r4, #20]
 80195fa:	9201      	str	r2, [sp, #4]
 80195fc:	9b01      	ldr	r3, [sp, #4]
 80195fe:	61a3      	str	r3, [r4, #24]
 8019600:	2b00      	cmp	r3, #0
 8019602:	bf14      	ite	ne
 8019604:	2202      	movne	r2, #2
 8019606:	2201      	moveq	r2, #1
 8019608:	6122      	str	r2, [r4, #16]
 801960a:	b1bd      	cbz	r5, 801963c <__d2b+0x94>
 801960c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019610:	4405      	add	r5, r0
 8019612:	603d      	str	r5, [r7, #0]
 8019614:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019618:	6030      	str	r0, [r6, #0]
 801961a:	4620      	mov	r0, r4
 801961c:	b003      	add	sp, #12
 801961e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019626:	e7d6      	b.n	80195d6 <__d2b+0x2e>
 8019628:	6161      	str	r1, [r4, #20]
 801962a:	e7e7      	b.n	80195fc <__d2b+0x54>
 801962c:	a801      	add	r0, sp, #4
 801962e:	f7ff fcf1 	bl	8019014 <__lo0bits>
 8019632:	9b01      	ldr	r3, [sp, #4]
 8019634:	6163      	str	r3, [r4, #20]
 8019636:	3020      	adds	r0, #32
 8019638:	2201      	movs	r2, #1
 801963a:	e7e5      	b.n	8019608 <__d2b+0x60>
 801963c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019640:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019644:	6038      	str	r0, [r7, #0]
 8019646:	6918      	ldr	r0, [r3, #16]
 8019648:	f7ff fcc4 	bl	8018fd4 <__hi0bits>
 801964c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019650:	e7e2      	b.n	8019618 <__d2b+0x70>
 8019652:	bf00      	nop
 8019654:	0801c8a9 	.word	0x0801c8a9
 8019658:	0801c8ba 	.word	0x0801c8ba

0801965c <__ratio>:
 801965c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019660:	4688      	mov	r8, r1
 8019662:	4669      	mov	r1, sp
 8019664:	4681      	mov	r9, r0
 8019666:	f7ff ff55 	bl	8019514 <__b2d>
 801966a:	a901      	add	r1, sp, #4
 801966c:	4640      	mov	r0, r8
 801966e:	ec55 4b10 	vmov	r4, r5, d0
 8019672:	ee10 aa10 	vmov	sl, s0
 8019676:	f7ff ff4d 	bl	8019514 <__b2d>
 801967a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801967e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8019682:	1ad2      	subs	r2, r2, r3
 8019684:	e9dd 3100 	ldrd	r3, r1, [sp]
 8019688:	1a5b      	subs	r3, r3, r1
 801968a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801968e:	ec57 6b10 	vmov	r6, r7, d0
 8019692:	2b00      	cmp	r3, #0
 8019694:	bfd6      	itet	le
 8019696:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801969a:	462a      	movgt	r2, r5
 801969c:	463a      	movle	r2, r7
 801969e:	46ab      	mov	fp, r5
 80196a0:	bfd6      	itet	le
 80196a2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80196a6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80196aa:	ee00 3a90 	vmovle	s1, r3
 80196ae:	ec4b ab17 	vmov	d7, sl, fp
 80196b2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80196b6:	b003      	add	sp, #12
 80196b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080196bc <__copybits>:
 80196bc:	3901      	subs	r1, #1
 80196be:	b570      	push	{r4, r5, r6, lr}
 80196c0:	1149      	asrs	r1, r1, #5
 80196c2:	6914      	ldr	r4, [r2, #16]
 80196c4:	3101      	adds	r1, #1
 80196c6:	f102 0314 	add.w	r3, r2, #20
 80196ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80196ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80196d2:	1f05      	subs	r5, r0, #4
 80196d4:	42a3      	cmp	r3, r4
 80196d6:	d30c      	bcc.n	80196f2 <__copybits+0x36>
 80196d8:	1aa3      	subs	r3, r4, r2
 80196da:	3b11      	subs	r3, #17
 80196dc:	f023 0303 	bic.w	r3, r3, #3
 80196e0:	3211      	adds	r2, #17
 80196e2:	42a2      	cmp	r2, r4
 80196e4:	bf88      	it	hi
 80196e6:	2300      	movhi	r3, #0
 80196e8:	4418      	add	r0, r3
 80196ea:	2300      	movs	r3, #0
 80196ec:	4288      	cmp	r0, r1
 80196ee:	d305      	bcc.n	80196fc <__copybits+0x40>
 80196f0:	bd70      	pop	{r4, r5, r6, pc}
 80196f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80196f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80196fa:	e7eb      	b.n	80196d4 <__copybits+0x18>
 80196fc:	f840 3b04 	str.w	r3, [r0], #4
 8019700:	e7f4      	b.n	80196ec <__copybits+0x30>

08019702 <__any_on>:
 8019702:	f100 0214 	add.w	r2, r0, #20
 8019706:	6900      	ldr	r0, [r0, #16]
 8019708:	114b      	asrs	r3, r1, #5
 801970a:	4298      	cmp	r0, r3
 801970c:	b510      	push	{r4, lr}
 801970e:	db11      	blt.n	8019734 <__any_on+0x32>
 8019710:	dd0a      	ble.n	8019728 <__any_on+0x26>
 8019712:	f011 011f 	ands.w	r1, r1, #31
 8019716:	d007      	beq.n	8019728 <__any_on+0x26>
 8019718:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801971c:	fa24 f001 	lsr.w	r0, r4, r1
 8019720:	fa00 f101 	lsl.w	r1, r0, r1
 8019724:	428c      	cmp	r4, r1
 8019726:	d10b      	bne.n	8019740 <__any_on+0x3e>
 8019728:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801972c:	4293      	cmp	r3, r2
 801972e:	d803      	bhi.n	8019738 <__any_on+0x36>
 8019730:	2000      	movs	r0, #0
 8019732:	bd10      	pop	{r4, pc}
 8019734:	4603      	mov	r3, r0
 8019736:	e7f7      	b.n	8019728 <__any_on+0x26>
 8019738:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801973c:	2900      	cmp	r1, #0
 801973e:	d0f5      	beq.n	801972c <__any_on+0x2a>
 8019740:	2001      	movs	r0, #1
 8019742:	e7f6      	b.n	8019732 <__any_on+0x30>

08019744 <sulp>:
 8019744:	b570      	push	{r4, r5, r6, lr}
 8019746:	4604      	mov	r4, r0
 8019748:	460d      	mov	r5, r1
 801974a:	4616      	mov	r6, r2
 801974c:	ec45 4b10 	vmov	d0, r4, r5
 8019750:	f7ff feba 	bl	80194c8 <__ulp>
 8019754:	b17e      	cbz	r6, 8019776 <sulp+0x32>
 8019756:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801975a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801975e:	2b00      	cmp	r3, #0
 8019760:	dd09      	ble.n	8019776 <sulp+0x32>
 8019762:	051b      	lsls	r3, r3, #20
 8019764:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8019768:	2000      	movs	r0, #0
 801976a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801976e:	ec41 0b17 	vmov	d7, r0, r1
 8019772:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019776:	bd70      	pop	{r4, r5, r6, pc}

08019778 <_strtod_l>:
 8019778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801977c:	ed2d 8b0e 	vpush	{d8-d14}
 8019780:	b097      	sub	sp, #92	; 0x5c
 8019782:	4604      	mov	r4, r0
 8019784:	920d      	str	r2, [sp, #52]	; 0x34
 8019786:	2200      	movs	r2, #0
 8019788:	9212      	str	r2, [sp, #72]	; 0x48
 801978a:	468a      	mov	sl, r1
 801978c:	f04f 0800 	mov.w	r8, #0
 8019790:	f04f 0900 	mov.w	r9, #0
 8019794:	460a      	mov	r2, r1
 8019796:	9211      	str	r2, [sp, #68]	; 0x44
 8019798:	7811      	ldrb	r1, [r2, #0]
 801979a:	292b      	cmp	r1, #43	; 0x2b
 801979c:	d04c      	beq.n	8019838 <_strtod_l+0xc0>
 801979e:	d839      	bhi.n	8019814 <_strtod_l+0x9c>
 80197a0:	290d      	cmp	r1, #13
 80197a2:	d833      	bhi.n	801980c <_strtod_l+0x94>
 80197a4:	2908      	cmp	r1, #8
 80197a6:	d833      	bhi.n	8019810 <_strtod_l+0x98>
 80197a8:	2900      	cmp	r1, #0
 80197aa:	d03c      	beq.n	8019826 <_strtod_l+0xae>
 80197ac:	2200      	movs	r2, #0
 80197ae:	9208      	str	r2, [sp, #32]
 80197b0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80197b2:	7832      	ldrb	r2, [r6, #0]
 80197b4:	2a30      	cmp	r2, #48	; 0x30
 80197b6:	f040 80b8 	bne.w	801992a <_strtod_l+0x1b2>
 80197ba:	7872      	ldrb	r2, [r6, #1]
 80197bc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80197c0:	2a58      	cmp	r2, #88	; 0x58
 80197c2:	d170      	bne.n	80198a6 <_strtod_l+0x12e>
 80197c4:	9302      	str	r3, [sp, #8]
 80197c6:	9b08      	ldr	r3, [sp, #32]
 80197c8:	9301      	str	r3, [sp, #4]
 80197ca:	ab12      	add	r3, sp, #72	; 0x48
 80197cc:	9300      	str	r3, [sp, #0]
 80197ce:	4a91      	ldr	r2, [pc, #580]	; (8019a14 <_strtod_l+0x29c>)
 80197d0:	ab13      	add	r3, sp, #76	; 0x4c
 80197d2:	a911      	add	r1, sp, #68	; 0x44
 80197d4:	4620      	mov	r0, r4
 80197d6:	f001 f8f3 	bl	801a9c0 <__gethex>
 80197da:	f010 070f 	ands.w	r7, r0, #15
 80197de:	4605      	mov	r5, r0
 80197e0:	d005      	beq.n	80197ee <_strtod_l+0x76>
 80197e2:	2f06      	cmp	r7, #6
 80197e4:	d12a      	bne.n	801983c <_strtod_l+0xc4>
 80197e6:	3601      	adds	r6, #1
 80197e8:	2300      	movs	r3, #0
 80197ea:	9611      	str	r6, [sp, #68]	; 0x44
 80197ec:	9308      	str	r3, [sp, #32]
 80197ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	f040 8555 	bne.w	801a2a0 <_strtod_l+0xb28>
 80197f6:	9b08      	ldr	r3, [sp, #32]
 80197f8:	ec49 8b10 	vmov	d0, r8, r9
 80197fc:	b1cb      	cbz	r3, 8019832 <_strtod_l+0xba>
 80197fe:	eeb1 0b40 	vneg.f64	d0, d0
 8019802:	b017      	add	sp, #92	; 0x5c
 8019804:	ecbd 8b0e 	vpop	{d8-d14}
 8019808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801980c:	2920      	cmp	r1, #32
 801980e:	d1cd      	bne.n	80197ac <_strtod_l+0x34>
 8019810:	3201      	adds	r2, #1
 8019812:	e7c0      	b.n	8019796 <_strtod_l+0x1e>
 8019814:	292d      	cmp	r1, #45	; 0x2d
 8019816:	d1c9      	bne.n	80197ac <_strtod_l+0x34>
 8019818:	2101      	movs	r1, #1
 801981a:	9108      	str	r1, [sp, #32]
 801981c:	1c51      	adds	r1, r2, #1
 801981e:	9111      	str	r1, [sp, #68]	; 0x44
 8019820:	7852      	ldrb	r2, [r2, #1]
 8019822:	2a00      	cmp	r2, #0
 8019824:	d1c4      	bne.n	80197b0 <_strtod_l+0x38>
 8019826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019828:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801982c:	2b00      	cmp	r3, #0
 801982e:	f040 8535 	bne.w	801a29c <_strtod_l+0xb24>
 8019832:	ec49 8b10 	vmov	d0, r8, r9
 8019836:	e7e4      	b.n	8019802 <_strtod_l+0x8a>
 8019838:	2100      	movs	r1, #0
 801983a:	e7ee      	b.n	801981a <_strtod_l+0xa2>
 801983c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801983e:	b13a      	cbz	r2, 8019850 <_strtod_l+0xd8>
 8019840:	2135      	movs	r1, #53	; 0x35
 8019842:	a814      	add	r0, sp, #80	; 0x50
 8019844:	f7ff ff3a 	bl	80196bc <__copybits>
 8019848:	9912      	ldr	r1, [sp, #72]	; 0x48
 801984a:	4620      	mov	r0, r4
 801984c:	f7ff fb10 	bl	8018e70 <_Bfree>
 8019850:	1e7b      	subs	r3, r7, #1
 8019852:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019854:	2b04      	cmp	r3, #4
 8019856:	d806      	bhi.n	8019866 <_strtod_l+0xee>
 8019858:	e8df f003 	tbb	[pc, r3]
 801985c:	201d0314 	.word	0x201d0314
 8019860:	14          	.byte	0x14
 8019861:	00          	.byte	0x00
 8019862:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8019866:	05eb      	lsls	r3, r5, #23
 8019868:	bf48      	it	mi
 801986a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801986e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019872:	0d1b      	lsrs	r3, r3, #20
 8019874:	051b      	lsls	r3, r3, #20
 8019876:	2b00      	cmp	r3, #0
 8019878:	d1b9      	bne.n	80197ee <_strtod_l+0x76>
 801987a:	f7fe fb83 	bl	8017f84 <__errno>
 801987e:	2322      	movs	r3, #34	; 0x22
 8019880:	6003      	str	r3, [r0, #0]
 8019882:	e7b4      	b.n	80197ee <_strtod_l+0x76>
 8019884:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8019888:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801988c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019890:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8019894:	e7e7      	b.n	8019866 <_strtod_l+0xee>
 8019896:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8019a1c <_strtod_l+0x2a4>
 801989a:	e7e4      	b.n	8019866 <_strtod_l+0xee>
 801989c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80198a0:	f04f 38ff 	mov.w	r8, #4294967295
 80198a4:	e7df      	b.n	8019866 <_strtod_l+0xee>
 80198a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80198a8:	1c5a      	adds	r2, r3, #1
 80198aa:	9211      	str	r2, [sp, #68]	; 0x44
 80198ac:	785b      	ldrb	r3, [r3, #1]
 80198ae:	2b30      	cmp	r3, #48	; 0x30
 80198b0:	d0f9      	beq.n	80198a6 <_strtod_l+0x12e>
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d09b      	beq.n	80197ee <_strtod_l+0x76>
 80198b6:	2301      	movs	r3, #1
 80198b8:	9306      	str	r3, [sp, #24]
 80198ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80198bc:	9309      	str	r3, [sp, #36]	; 0x24
 80198be:	2300      	movs	r3, #0
 80198c0:	9305      	str	r3, [sp, #20]
 80198c2:	9307      	str	r3, [sp, #28]
 80198c4:	461e      	mov	r6, r3
 80198c6:	220a      	movs	r2, #10
 80198c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80198ca:	7805      	ldrb	r5, [r0, #0]
 80198cc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80198d0:	b2d9      	uxtb	r1, r3
 80198d2:	2909      	cmp	r1, #9
 80198d4:	d92b      	bls.n	801992e <_strtod_l+0x1b6>
 80198d6:	4950      	ldr	r1, [pc, #320]	; (8019a18 <_strtod_l+0x2a0>)
 80198d8:	2201      	movs	r2, #1
 80198da:	f000 ffa9 	bl	801a830 <strncmp>
 80198de:	2800      	cmp	r0, #0
 80198e0:	d035      	beq.n	801994e <_strtod_l+0x1d6>
 80198e2:	2000      	movs	r0, #0
 80198e4:	462a      	mov	r2, r5
 80198e6:	4633      	mov	r3, r6
 80198e8:	4683      	mov	fp, r0
 80198ea:	4601      	mov	r1, r0
 80198ec:	2a65      	cmp	r2, #101	; 0x65
 80198ee:	d001      	beq.n	80198f4 <_strtod_l+0x17c>
 80198f0:	2a45      	cmp	r2, #69	; 0x45
 80198f2:	d118      	bne.n	8019926 <_strtod_l+0x1ae>
 80198f4:	b91b      	cbnz	r3, 80198fe <_strtod_l+0x186>
 80198f6:	9b06      	ldr	r3, [sp, #24]
 80198f8:	4303      	orrs	r3, r0
 80198fa:	d094      	beq.n	8019826 <_strtod_l+0xae>
 80198fc:	2300      	movs	r3, #0
 80198fe:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8019902:	f10a 0201 	add.w	r2, sl, #1
 8019906:	9211      	str	r2, [sp, #68]	; 0x44
 8019908:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801990c:	2a2b      	cmp	r2, #43	; 0x2b
 801990e:	d075      	beq.n	80199fc <_strtod_l+0x284>
 8019910:	2a2d      	cmp	r2, #45	; 0x2d
 8019912:	d07b      	beq.n	8019a0c <_strtod_l+0x294>
 8019914:	f04f 0e00 	mov.w	lr, #0
 8019918:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801991c:	2d09      	cmp	r5, #9
 801991e:	f240 8083 	bls.w	8019a28 <_strtod_l+0x2b0>
 8019922:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8019926:	2500      	movs	r5, #0
 8019928:	e09e      	b.n	8019a68 <_strtod_l+0x2f0>
 801992a:	2300      	movs	r3, #0
 801992c:	e7c4      	b.n	80198b8 <_strtod_l+0x140>
 801992e:	2e08      	cmp	r6, #8
 8019930:	bfd5      	itete	le
 8019932:	9907      	ldrle	r1, [sp, #28]
 8019934:	9905      	ldrgt	r1, [sp, #20]
 8019936:	fb02 3301 	mlale	r3, r2, r1, r3
 801993a:	fb02 3301 	mlagt	r3, r2, r1, r3
 801993e:	f100 0001 	add.w	r0, r0, #1
 8019942:	bfd4      	ite	le
 8019944:	9307      	strle	r3, [sp, #28]
 8019946:	9305      	strgt	r3, [sp, #20]
 8019948:	3601      	adds	r6, #1
 801994a:	9011      	str	r0, [sp, #68]	; 0x44
 801994c:	e7bc      	b.n	80198c8 <_strtod_l+0x150>
 801994e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019950:	1c5a      	adds	r2, r3, #1
 8019952:	9211      	str	r2, [sp, #68]	; 0x44
 8019954:	785a      	ldrb	r2, [r3, #1]
 8019956:	b3ae      	cbz	r6, 80199c4 <_strtod_l+0x24c>
 8019958:	4683      	mov	fp, r0
 801995a:	4633      	mov	r3, r6
 801995c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019960:	2909      	cmp	r1, #9
 8019962:	d912      	bls.n	801998a <_strtod_l+0x212>
 8019964:	2101      	movs	r1, #1
 8019966:	e7c1      	b.n	80198ec <_strtod_l+0x174>
 8019968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801996a:	1c5a      	adds	r2, r3, #1
 801996c:	9211      	str	r2, [sp, #68]	; 0x44
 801996e:	785a      	ldrb	r2, [r3, #1]
 8019970:	3001      	adds	r0, #1
 8019972:	2a30      	cmp	r2, #48	; 0x30
 8019974:	d0f8      	beq.n	8019968 <_strtod_l+0x1f0>
 8019976:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801997a:	2b08      	cmp	r3, #8
 801997c:	f200 8495 	bhi.w	801a2aa <_strtod_l+0xb32>
 8019980:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019982:	9309      	str	r3, [sp, #36]	; 0x24
 8019984:	4683      	mov	fp, r0
 8019986:	2000      	movs	r0, #0
 8019988:	4603      	mov	r3, r0
 801998a:	3a30      	subs	r2, #48	; 0x30
 801998c:	f100 0101 	add.w	r1, r0, #1
 8019990:	d012      	beq.n	80199b8 <_strtod_l+0x240>
 8019992:	448b      	add	fp, r1
 8019994:	eb00 0c03 	add.w	ip, r0, r3
 8019998:	4619      	mov	r1, r3
 801999a:	250a      	movs	r5, #10
 801999c:	4561      	cmp	r1, ip
 801999e:	d113      	bne.n	80199c8 <_strtod_l+0x250>
 80199a0:	1819      	adds	r1, r3, r0
 80199a2:	2908      	cmp	r1, #8
 80199a4:	f103 0301 	add.w	r3, r3, #1
 80199a8:	4403      	add	r3, r0
 80199aa:	dc1b      	bgt.n	80199e4 <_strtod_l+0x26c>
 80199ac:	9807      	ldr	r0, [sp, #28]
 80199ae:	210a      	movs	r1, #10
 80199b0:	fb01 2200 	mla	r2, r1, r0, r2
 80199b4:	9207      	str	r2, [sp, #28]
 80199b6:	2100      	movs	r1, #0
 80199b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80199ba:	1c50      	adds	r0, r2, #1
 80199bc:	9011      	str	r0, [sp, #68]	; 0x44
 80199be:	7852      	ldrb	r2, [r2, #1]
 80199c0:	4608      	mov	r0, r1
 80199c2:	e7cb      	b.n	801995c <_strtod_l+0x1e4>
 80199c4:	4630      	mov	r0, r6
 80199c6:	e7d4      	b.n	8019972 <_strtod_l+0x1fa>
 80199c8:	2908      	cmp	r1, #8
 80199ca:	f101 0101 	add.w	r1, r1, #1
 80199ce:	dc03      	bgt.n	80199d8 <_strtod_l+0x260>
 80199d0:	9f07      	ldr	r7, [sp, #28]
 80199d2:	436f      	muls	r7, r5
 80199d4:	9707      	str	r7, [sp, #28]
 80199d6:	e7e1      	b.n	801999c <_strtod_l+0x224>
 80199d8:	2910      	cmp	r1, #16
 80199da:	bfde      	ittt	le
 80199dc:	9f05      	ldrle	r7, [sp, #20]
 80199de:	436f      	mulle	r7, r5
 80199e0:	9705      	strle	r7, [sp, #20]
 80199e2:	e7db      	b.n	801999c <_strtod_l+0x224>
 80199e4:	2b10      	cmp	r3, #16
 80199e6:	bfdf      	itttt	le
 80199e8:	9805      	ldrle	r0, [sp, #20]
 80199ea:	210a      	movle	r1, #10
 80199ec:	fb01 2200 	mlale	r2, r1, r0, r2
 80199f0:	9205      	strle	r2, [sp, #20]
 80199f2:	e7e0      	b.n	80199b6 <_strtod_l+0x23e>
 80199f4:	f04f 0b00 	mov.w	fp, #0
 80199f8:	2101      	movs	r1, #1
 80199fa:	e77c      	b.n	80198f6 <_strtod_l+0x17e>
 80199fc:	f04f 0e00 	mov.w	lr, #0
 8019a00:	f10a 0202 	add.w	r2, sl, #2
 8019a04:	9211      	str	r2, [sp, #68]	; 0x44
 8019a06:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8019a0a:	e785      	b.n	8019918 <_strtod_l+0x1a0>
 8019a0c:	f04f 0e01 	mov.w	lr, #1
 8019a10:	e7f6      	b.n	8019a00 <_strtod_l+0x288>
 8019a12:	bf00      	nop
 8019a14:	0801ca18 	.word	0x0801ca18
 8019a18:	0801ca14 	.word	0x0801ca14
 8019a1c:	7ff00000 	.word	0x7ff00000
 8019a20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019a22:	1c55      	adds	r5, r2, #1
 8019a24:	9511      	str	r5, [sp, #68]	; 0x44
 8019a26:	7852      	ldrb	r2, [r2, #1]
 8019a28:	2a30      	cmp	r2, #48	; 0x30
 8019a2a:	d0f9      	beq.n	8019a20 <_strtod_l+0x2a8>
 8019a2c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8019a30:	2d08      	cmp	r5, #8
 8019a32:	f63f af78 	bhi.w	8019926 <_strtod_l+0x1ae>
 8019a36:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8019a3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8019a3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019a40:	1c55      	adds	r5, r2, #1
 8019a42:	9511      	str	r5, [sp, #68]	; 0x44
 8019a44:	7852      	ldrb	r2, [r2, #1]
 8019a46:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8019a4a:	2f09      	cmp	r7, #9
 8019a4c:	d937      	bls.n	8019abe <_strtod_l+0x346>
 8019a4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019a50:	1bed      	subs	r5, r5, r7
 8019a52:	2d08      	cmp	r5, #8
 8019a54:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8019a58:	dc02      	bgt.n	8019a60 <_strtod_l+0x2e8>
 8019a5a:	4565      	cmp	r5, ip
 8019a5c:	bfa8      	it	ge
 8019a5e:	4665      	movge	r5, ip
 8019a60:	f1be 0f00 	cmp.w	lr, #0
 8019a64:	d000      	beq.n	8019a68 <_strtod_l+0x2f0>
 8019a66:	426d      	negs	r5, r5
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d14d      	bne.n	8019b08 <_strtod_l+0x390>
 8019a6c:	9b06      	ldr	r3, [sp, #24]
 8019a6e:	4303      	orrs	r3, r0
 8019a70:	f47f aebd 	bne.w	80197ee <_strtod_l+0x76>
 8019a74:	2900      	cmp	r1, #0
 8019a76:	f47f aed6 	bne.w	8019826 <_strtod_l+0xae>
 8019a7a:	2a69      	cmp	r2, #105	; 0x69
 8019a7c:	d027      	beq.n	8019ace <_strtod_l+0x356>
 8019a7e:	dc24      	bgt.n	8019aca <_strtod_l+0x352>
 8019a80:	2a49      	cmp	r2, #73	; 0x49
 8019a82:	d024      	beq.n	8019ace <_strtod_l+0x356>
 8019a84:	2a4e      	cmp	r2, #78	; 0x4e
 8019a86:	f47f aece 	bne.w	8019826 <_strtod_l+0xae>
 8019a8a:	4995      	ldr	r1, [pc, #596]	; (8019ce0 <_strtod_l+0x568>)
 8019a8c:	a811      	add	r0, sp, #68	; 0x44
 8019a8e:	f001 f9d7 	bl	801ae40 <__match>
 8019a92:	2800      	cmp	r0, #0
 8019a94:	f43f aec7 	beq.w	8019826 <_strtod_l+0xae>
 8019a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019a9a:	781b      	ldrb	r3, [r3, #0]
 8019a9c:	2b28      	cmp	r3, #40	; 0x28
 8019a9e:	d12d      	bne.n	8019afc <_strtod_l+0x384>
 8019aa0:	4990      	ldr	r1, [pc, #576]	; (8019ce4 <_strtod_l+0x56c>)
 8019aa2:	aa14      	add	r2, sp, #80	; 0x50
 8019aa4:	a811      	add	r0, sp, #68	; 0x44
 8019aa6:	f001 f9df 	bl	801ae68 <__hexnan>
 8019aaa:	2805      	cmp	r0, #5
 8019aac:	d126      	bne.n	8019afc <_strtod_l+0x384>
 8019aae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ab0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019ab4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019ab8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019abc:	e697      	b.n	80197ee <_strtod_l+0x76>
 8019abe:	250a      	movs	r5, #10
 8019ac0:	fb05 2c0c 	mla	ip, r5, ip, r2
 8019ac4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8019ac8:	e7b9      	b.n	8019a3e <_strtod_l+0x2c6>
 8019aca:	2a6e      	cmp	r2, #110	; 0x6e
 8019acc:	e7db      	b.n	8019a86 <_strtod_l+0x30e>
 8019ace:	4986      	ldr	r1, [pc, #536]	; (8019ce8 <_strtod_l+0x570>)
 8019ad0:	a811      	add	r0, sp, #68	; 0x44
 8019ad2:	f001 f9b5 	bl	801ae40 <__match>
 8019ad6:	2800      	cmp	r0, #0
 8019ad8:	f43f aea5 	beq.w	8019826 <_strtod_l+0xae>
 8019adc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019ade:	4983      	ldr	r1, [pc, #524]	; (8019cec <_strtod_l+0x574>)
 8019ae0:	3b01      	subs	r3, #1
 8019ae2:	a811      	add	r0, sp, #68	; 0x44
 8019ae4:	9311      	str	r3, [sp, #68]	; 0x44
 8019ae6:	f001 f9ab 	bl	801ae40 <__match>
 8019aea:	b910      	cbnz	r0, 8019af2 <_strtod_l+0x37a>
 8019aec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019aee:	3301      	adds	r3, #1
 8019af0:	9311      	str	r3, [sp, #68]	; 0x44
 8019af2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8019d00 <_strtod_l+0x588>
 8019af6:	f04f 0800 	mov.w	r8, #0
 8019afa:	e678      	b.n	80197ee <_strtod_l+0x76>
 8019afc:	487c      	ldr	r0, [pc, #496]	; (8019cf0 <_strtod_l+0x578>)
 8019afe:	f000 febb 	bl	801a878 <nan>
 8019b02:	ec59 8b10 	vmov	r8, r9, d0
 8019b06:	e672      	b.n	80197ee <_strtod_l+0x76>
 8019b08:	eddd 7a07 	vldr	s15, [sp, #28]
 8019b0c:	eba5 020b 	sub.w	r2, r5, fp
 8019b10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019b14:	2e00      	cmp	r6, #0
 8019b16:	bf08      	it	eq
 8019b18:	461e      	moveq	r6, r3
 8019b1a:	2b10      	cmp	r3, #16
 8019b1c:	9206      	str	r2, [sp, #24]
 8019b1e:	461a      	mov	r2, r3
 8019b20:	bfa8      	it	ge
 8019b22:	2210      	movge	r2, #16
 8019b24:	2b09      	cmp	r3, #9
 8019b26:	ec59 8b17 	vmov	r8, r9, d7
 8019b2a:	dd0c      	ble.n	8019b46 <_strtod_l+0x3ce>
 8019b2c:	4971      	ldr	r1, [pc, #452]	; (8019cf4 <_strtod_l+0x57c>)
 8019b2e:	eddd 6a05 	vldr	s13, [sp, #20]
 8019b32:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019b36:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8019b3a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8019b3e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019b42:	ec59 8b16 	vmov	r8, r9, d6
 8019b46:	2b0f      	cmp	r3, #15
 8019b48:	dc37      	bgt.n	8019bba <_strtod_l+0x442>
 8019b4a:	9906      	ldr	r1, [sp, #24]
 8019b4c:	2900      	cmp	r1, #0
 8019b4e:	f43f ae4e 	beq.w	80197ee <_strtod_l+0x76>
 8019b52:	dd23      	ble.n	8019b9c <_strtod_l+0x424>
 8019b54:	2916      	cmp	r1, #22
 8019b56:	dc0b      	bgt.n	8019b70 <_strtod_l+0x3f8>
 8019b58:	4b66      	ldr	r3, [pc, #408]	; (8019cf4 <_strtod_l+0x57c>)
 8019b5a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8019b5e:	ed93 7b00 	vldr	d7, [r3]
 8019b62:	ec49 8b16 	vmov	d6, r8, r9
 8019b66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019b6a:	ec59 8b17 	vmov	r8, r9, d7
 8019b6e:	e63e      	b.n	80197ee <_strtod_l+0x76>
 8019b70:	9806      	ldr	r0, [sp, #24]
 8019b72:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8019b76:	4281      	cmp	r1, r0
 8019b78:	db1f      	blt.n	8019bba <_strtod_l+0x442>
 8019b7a:	4a5e      	ldr	r2, [pc, #376]	; (8019cf4 <_strtod_l+0x57c>)
 8019b7c:	f1c3 030f 	rsb	r3, r3, #15
 8019b80:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8019b84:	ed91 7b00 	vldr	d7, [r1]
 8019b88:	ec49 8b16 	vmov	d6, r8, r9
 8019b8c:	1ac3      	subs	r3, r0, r3
 8019b8e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019b92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019b96:	ed92 6b00 	vldr	d6, [r2]
 8019b9a:	e7e4      	b.n	8019b66 <_strtod_l+0x3ee>
 8019b9c:	9906      	ldr	r1, [sp, #24]
 8019b9e:	3116      	adds	r1, #22
 8019ba0:	db0b      	blt.n	8019bba <_strtod_l+0x442>
 8019ba2:	4b54      	ldr	r3, [pc, #336]	; (8019cf4 <_strtod_l+0x57c>)
 8019ba4:	ebab 0505 	sub.w	r5, fp, r5
 8019ba8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8019bac:	ed95 7b00 	vldr	d7, [r5]
 8019bb0:	ec49 8b16 	vmov	d6, r8, r9
 8019bb4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019bb8:	e7d7      	b.n	8019b6a <_strtod_l+0x3f2>
 8019bba:	9906      	ldr	r1, [sp, #24]
 8019bbc:	1a9a      	subs	r2, r3, r2
 8019bbe:	440a      	add	r2, r1
 8019bc0:	2a00      	cmp	r2, #0
 8019bc2:	dd6e      	ble.n	8019ca2 <_strtod_l+0x52a>
 8019bc4:	f012 000f 	ands.w	r0, r2, #15
 8019bc8:	d00a      	beq.n	8019be0 <_strtod_l+0x468>
 8019bca:	494a      	ldr	r1, [pc, #296]	; (8019cf4 <_strtod_l+0x57c>)
 8019bcc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019bd0:	ed91 7b00 	vldr	d7, [r1]
 8019bd4:	ec49 8b16 	vmov	d6, r8, r9
 8019bd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019bdc:	ec59 8b17 	vmov	r8, r9, d7
 8019be0:	f032 020f 	bics.w	r2, r2, #15
 8019be4:	d04e      	beq.n	8019c84 <_strtod_l+0x50c>
 8019be6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8019bea:	dd22      	ble.n	8019c32 <_strtod_l+0x4ba>
 8019bec:	2500      	movs	r5, #0
 8019bee:	462e      	mov	r6, r5
 8019bf0:	9507      	str	r5, [sp, #28]
 8019bf2:	462f      	mov	r7, r5
 8019bf4:	2322      	movs	r3, #34	; 0x22
 8019bf6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8019d00 <_strtod_l+0x588>
 8019bfa:	6023      	str	r3, [r4, #0]
 8019bfc:	f04f 0800 	mov.w	r8, #0
 8019c00:	9b07      	ldr	r3, [sp, #28]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	f43f adf3 	beq.w	80197ee <_strtod_l+0x76>
 8019c08:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	f7ff f930 	bl	8018e70 <_Bfree>
 8019c10:	4639      	mov	r1, r7
 8019c12:	4620      	mov	r0, r4
 8019c14:	f7ff f92c 	bl	8018e70 <_Bfree>
 8019c18:	4631      	mov	r1, r6
 8019c1a:	4620      	mov	r0, r4
 8019c1c:	f7ff f928 	bl	8018e70 <_Bfree>
 8019c20:	9907      	ldr	r1, [sp, #28]
 8019c22:	4620      	mov	r0, r4
 8019c24:	f7ff f924 	bl	8018e70 <_Bfree>
 8019c28:	4629      	mov	r1, r5
 8019c2a:	4620      	mov	r0, r4
 8019c2c:	f7ff f920 	bl	8018e70 <_Bfree>
 8019c30:	e5dd      	b.n	80197ee <_strtod_l+0x76>
 8019c32:	2000      	movs	r0, #0
 8019c34:	ec49 8b17 	vmov	d7, r8, r9
 8019c38:	4f2f      	ldr	r7, [pc, #188]	; (8019cf8 <_strtod_l+0x580>)
 8019c3a:	1112      	asrs	r2, r2, #4
 8019c3c:	4601      	mov	r1, r0
 8019c3e:	2a01      	cmp	r2, #1
 8019c40:	dc23      	bgt.n	8019c8a <_strtod_l+0x512>
 8019c42:	b108      	cbz	r0, 8019c48 <_strtod_l+0x4d0>
 8019c44:	ec59 8b17 	vmov	r8, r9, d7
 8019c48:	4a2b      	ldr	r2, [pc, #172]	; (8019cf8 <_strtod_l+0x580>)
 8019c4a:	482c      	ldr	r0, [pc, #176]	; (8019cfc <_strtod_l+0x584>)
 8019c4c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019c50:	ed92 7b00 	vldr	d7, [r2]
 8019c54:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8019c58:	ec49 8b16 	vmov	d6, r8, r9
 8019c5c:	4a28      	ldr	r2, [pc, #160]	; (8019d00 <_strtod_l+0x588>)
 8019c5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019c62:	ee17 1a90 	vmov	r1, s15
 8019c66:	400a      	ands	r2, r1
 8019c68:	4282      	cmp	r2, r0
 8019c6a:	ec59 8b17 	vmov	r8, r9, d7
 8019c6e:	d8bd      	bhi.n	8019bec <_strtod_l+0x474>
 8019c70:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8019c74:	4282      	cmp	r2, r0
 8019c76:	bf86      	itte	hi
 8019c78:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8019d04 <_strtod_l+0x58c>
 8019c7c:	f04f 38ff 	movhi.w	r8, #4294967295
 8019c80:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8019c84:	2200      	movs	r2, #0
 8019c86:	9205      	str	r2, [sp, #20]
 8019c88:	e076      	b.n	8019d78 <_strtod_l+0x600>
 8019c8a:	f012 0f01 	tst.w	r2, #1
 8019c8e:	d004      	beq.n	8019c9a <_strtod_l+0x522>
 8019c90:	ed97 6b00 	vldr	d6, [r7]
 8019c94:	2001      	movs	r0, #1
 8019c96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019c9a:	3101      	adds	r1, #1
 8019c9c:	1052      	asrs	r2, r2, #1
 8019c9e:	3708      	adds	r7, #8
 8019ca0:	e7cd      	b.n	8019c3e <_strtod_l+0x4c6>
 8019ca2:	d0ef      	beq.n	8019c84 <_strtod_l+0x50c>
 8019ca4:	4252      	negs	r2, r2
 8019ca6:	f012 000f 	ands.w	r0, r2, #15
 8019caa:	d00a      	beq.n	8019cc2 <_strtod_l+0x54a>
 8019cac:	4911      	ldr	r1, [pc, #68]	; (8019cf4 <_strtod_l+0x57c>)
 8019cae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019cb2:	ed91 7b00 	vldr	d7, [r1]
 8019cb6:	ec49 8b16 	vmov	d6, r8, r9
 8019cba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019cbe:	ec59 8b17 	vmov	r8, r9, d7
 8019cc2:	1112      	asrs	r2, r2, #4
 8019cc4:	d0de      	beq.n	8019c84 <_strtod_l+0x50c>
 8019cc6:	2a1f      	cmp	r2, #31
 8019cc8:	dd1e      	ble.n	8019d08 <_strtod_l+0x590>
 8019cca:	2500      	movs	r5, #0
 8019ccc:	462e      	mov	r6, r5
 8019cce:	9507      	str	r5, [sp, #28]
 8019cd0:	462f      	mov	r7, r5
 8019cd2:	2322      	movs	r3, #34	; 0x22
 8019cd4:	f04f 0800 	mov.w	r8, #0
 8019cd8:	f04f 0900 	mov.w	r9, #0
 8019cdc:	6023      	str	r3, [r4, #0]
 8019cde:	e78f      	b.n	8019c00 <_strtod_l+0x488>
 8019ce0:	0801c801 	.word	0x0801c801
 8019ce4:	0801ca2c 	.word	0x0801ca2c
 8019ce8:	0801c7f9 	.word	0x0801c7f9
 8019cec:	0801c830 	.word	0x0801c830
 8019cf0:	0801cbbd 	.word	0x0801cbbd
 8019cf4:	0801c940 	.word	0x0801c940
 8019cf8:	0801c918 	.word	0x0801c918
 8019cfc:	7ca00000 	.word	0x7ca00000
 8019d00:	7ff00000 	.word	0x7ff00000
 8019d04:	7fefffff 	.word	0x7fefffff
 8019d08:	f012 0110 	ands.w	r1, r2, #16
 8019d0c:	bf18      	it	ne
 8019d0e:	216a      	movne	r1, #106	; 0x6a
 8019d10:	9105      	str	r1, [sp, #20]
 8019d12:	ec49 8b17 	vmov	d7, r8, r9
 8019d16:	49be      	ldr	r1, [pc, #760]	; (801a010 <_strtod_l+0x898>)
 8019d18:	2000      	movs	r0, #0
 8019d1a:	07d7      	lsls	r7, r2, #31
 8019d1c:	d504      	bpl.n	8019d28 <_strtod_l+0x5b0>
 8019d1e:	ed91 6b00 	vldr	d6, [r1]
 8019d22:	2001      	movs	r0, #1
 8019d24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019d28:	1052      	asrs	r2, r2, #1
 8019d2a:	f101 0108 	add.w	r1, r1, #8
 8019d2e:	d1f4      	bne.n	8019d1a <_strtod_l+0x5a2>
 8019d30:	b108      	cbz	r0, 8019d36 <_strtod_l+0x5be>
 8019d32:	ec59 8b17 	vmov	r8, r9, d7
 8019d36:	9a05      	ldr	r2, [sp, #20]
 8019d38:	b1ba      	cbz	r2, 8019d6a <_strtod_l+0x5f2>
 8019d3a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8019d3e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8019d42:	2a00      	cmp	r2, #0
 8019d44:	4648      	mov	r0, r9
 8019d46:	dd10      	ble.n	8019d6a <_strtod_l+0x5f2>
 8019d48:	2a1f      	cmp	r2, #31
 8019d4a:	f340 812c 	ble.w	8019fa6 <_strtod_l+0x82e>
 8019d4e:	2a34      	cmp	r2, #52	; 0x34
 8019d50:	bfde      	ittt	le
 8019d52:	f04f 32ff 	movle.w	r2, #4294967295
 8019d56:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8019d5a:	408a      	lslle	r2, r1
 8019d5c:	f04f 0800 	mov.w	r8, #0
 8019d60:	bfcc      	ite	gt
 8019d62:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019d66:	ea02 0900 	andle.w	r9, r2, r0
 8019d6a:	ec49 8b17 	vmov	d7, r8, r9
 8019d6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d76:	d0a8      	beq.n	8019cca <_strtod_l+0x552>
 8019d78:	9a07      	ldr	r2, [sp, #28]
 8019d7a:	9200      	str	r2, [sp, #0]
 8019d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d7e:	4632      	mov	r2, r6
 8019d80:	4620      	mov	r0, r4
 8019d82:	f7ff f8dd 	bl	8018f40 <__s2b>
 8019d86:	9007      	str	r0, [sp, #28]
 8019d88:	2800      	cmp	r0, #0
 8019d8a:	f43f af2f 	beq.w	8019bec <_strtod_l+0x474>
 8019d8e:	9a06      	ldr	r2, [sp, #24]
 8019d90:	2a00      	cmp	r2, #0
 8019d92:	ebab 0305 	sub.w	r3, fp, r5
 8019d96:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8019ff0 <_strtod_l+0x878>
 8019d9a:	bfa8      	it	ge
 8019d9c:	2300      	movge	r3, #0
 8019d9e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8019ff8 <_strtod_l+0x880>
 8019da2:	ed9f bb97 	vldr	d11, [pc, #604]	; 801a000 <_strtod_l+0x888>
 8019da6:	9309      	str	r3, [sp, #36]	; 0x24
 8019da8:	2500      	movs	r5, #0
 8019daa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019dae:	930c      	str	r3, [sp, #48]	; 0x30
 8019db0:	462e      	mov	r6, r5
 8019db2:	9b07      	ldr	r3, [sp, #28]
 8019db4:	4620      	mov	r0, r4
 8019db6:	6859      	ldr	r1, [r3, #4]
 8019db8:	f7ff f81a 	bl	8018df0 <_Balloc>
 8019dbc:	4607      	mov	r7, r0
 8019dbe:	2800      	cmp	r0, #0
 8019dc0:	f43f af18 	beq.w	8019bf4 <_strtod_l+0x47c>
 8019dc4:	9b07      	ldr	r3, [sp, #28]
 8019dc6:	691a      	ldr	r2, [r3, #16]
 8019dc8:	3202      	adds	r2, #2
 8019dca:	f103 010c 	add.w	r1, r3, #12
 8019dce:	0092      	lsls	r2, r2, #2
 8019dd0:	300c      	adds	r0, #12
 8019dd2:	f7fe f904 	bl	8017fde <memcpy>
 8019dd6:	ec49 8b10 	vmov	d0, r8, r9
 8019dda:	aa14      	add	r2, sp, #80	; 0x50
 8019ddc:	a913      	add	r1, sp, #76	; 0x4c
 8019dde:	4620      	mov	r0, r4
 8019de0:	f7ff fbe2 	bl	80195a8 <__d2b>
 8019de4:	ec49 8b18 	vmov	d8, r8, r9
 8019de8:	9012      	str	r0, [sp, #72]	; 0x48
 8019dea:	2800      	cmp	r0, #0
 8019dec:	f43f af02 	beq.w	8019bf4 <_strtod_l+0x47c>
 8019df0:	2101      	movs	r1, #1
 8019df2:	4620      	mov	r0, r4
 8019df4:	f7ff f93c 	bl	8019070 <__i2b>
 8019df8:	4606      	mov	r6, r0
 8019dfa:	2800      	cmp	r0, #0
 8019dfc:	f43f aefa 	beq.w	8019bf4 <_strtod_l+0x47c>
 8019e00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019e02:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	bfab      	itete	ge
 8019e08:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8019e0a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8019e0c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8019e10:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8019e14:	bfac      	ite	ge
 8019e16:	eb03 0b02 	addge.w	fp, r3, r2
 8019e1a:	eba2 0a03 	sublt.w	sl, r2, r3
 8019e1e:	9a05      	ldr	r2, [sp, #20]
 8019e20:	1a9b      	subs	r3, r3, r2
 8019e22:	440b      	add	r3, r1
 8019e24:	4a7b      	ldr	r2, [pc, #492]	; (801a014 <_strtod_l+0x89c>)
 8019e26:	3b01      	subs	r3, #1
 8019e28:	4293      	cmp	r3, r2
 8019e2a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8019e2e:	f280 80cd 	bge.w	8019fcc <_strtod_l+0x854>
 8019e32:	1ad2      	subs	r2, r2, r3
 8019e34:	2a1f      	cmp	r2, #31
 8019e36:	eba1 0102 	sub.w	r1, r1, r2
 8019e3a:	f04f 0001 	mov.w	r0, #1
 8019e3e:	f300 80b9 	bgt.w	8019fb4 <_strtod_l+0x83c>
 8019e42:	fa00 f302 	lsl.w	r3, r0, r2
 8019e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8019e48:	2300      	movs	r3, #0
 8019e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8019e4c:	eb0b 0301 	add.w	r3, fp, r1
 8019e50:	9a05      	ldr	r2, [sp, #20]
 8019e52:	459b      	cmp	fp, r3
 8019e54:	448a      	add	sl, r1
 8019e56:	4492      	add	sl, r2
 8019e58:	465a      	mov	r2, fp
 8019e5a:	bfa8      	it	ge
 8019e5c:	461a      	movge	r2, r3
 8019e5e:	4552      	cmp	r2, sl
 8019e60:	bfa8      	it	ge
 8019e62:	4652      	movge	r2, sl
 8019e64:	2a00      	cmp	r2, #0
 8019e66:	bfc2      	ittt	gt
 8019e68:	1a9b      	subgt	r3, r3, r2
 8019e6a:	ebaa 0a02 	subgt.w	sl, sl, r2
 8019e6e:	ebab 0b02 	subgt.w	fp, fp, r2
 8019e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e74:	2a00      	cmp	r2, #0
 8019e76:	dd18      	ble.n	8019eaa <_strtod_l+0x732>
 8019e78:	4631      	mov	r1, r6
 8019e7a:	4620      	mov	r0, r4
 8019e7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8019e7e:	f7ff f9b7 	bl	80191f0 <__pow5mult>
 8019e82:	4606      	mov	r6, r0
 8019e84:	2800      	cmp	r0, #0
 8019e86:	f43f aeb5 	beq.w	8019bf4 <_strtod_l+0x47c>
 8019e8a:	4601      	mov	r1, r0
 8019e8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019e8e:	4620      	mov	r0, r4
 8019e90:	f7ff f904 	bl	801909c <__multiply>
 8019e94:	900e      	str	r0, [sp, #56]	; 0x38
 8019e96:	2800      	cmp	r0, #0
 8019e98:	f43f aeac 	beq.w	8019bf4 <_strtod_l+0x47c>
 8019e9c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019e9e:	4620      	mov	r0, r4
 8019ea0:	f7fe ffe6 	bl	8018e70 <_Bfree>
 8019ea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ea8:	9212      	str	r2, [sp, #72]	; 0x48
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	f300 8093 	bgt.w	8019fd6 <_strtod_l+0x85e>
 8019eb0:	9b06      	ldr	r3, [sp, #24]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	dd08      	ble.n	8019ec8 <_strtod_l+0x750>
 8019eb6:	4639      	mov	r1, r7
 8019eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019eba:	4620      	mov	r0, r4
 8019ebc:	f7ff f998 	bl	80191f0 <__pow5mult>
 8019ec0:	4607      	mov	r7, r0
 8019ec2:	2800      	cmp	r0, #0
 8019ec4:	f43f ae96 	beq.w	8019bf4 <_strtod_l+0x47c>
 8019ec8:	f1ba 0f00 	cmp.w	sl, #0
 8019ecc:	dd08      	ble.n	8019ee0 <_strtod_l+0x768>
 8019ece:	4639      	mov	r1, r7
 8019ed0:	4652      	mov	r2, sl
 8019ed2:	4620      	mov	r0, r4
 8019ed4:	f7ff f9e6 	bl	80192a4 <__lshift>
 8019ed8:	4607      	mov	r7, r0
 8019eda:	2800      	cmp	r0, #0
 8019edc:	f43f ae8a 	beq.w	8019bf4 <_strtod_l+0x47c>
 8019ee0:	f1bb 0f00 	cmp.w	fp, #0
 8019ee4:	dd08      	ble.n	8019ef8 <_strtod_l+0x780>
 8019ee6:	4631      	mov	r1, r6
 8019ee8:	465a      	mov	r2, fp
 8019eea:	4620      	mov	r0, r4
 8019eec:	f7ff f9da 	bl	80192a4 <__lshift>
 8019ef0:	4606      	mov	r6, r0
 8019ef2:	2800      	cmp	r0, #0
 8019ef4:	f43f ae7e 	beq.w	8019bf4 <_strtod_l+0x47c>
 8019ef8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019efa:	463a      	mov	r2, r7
 8019efc:	4620      	mov	r0, r4
 8019efe:	f7ff fa59 	bl	80193b4 <__mdiff>
 8019f02:	4605      	mov	r5, r0
 8019f04:	2800      	cmp	r0, #0
 8019f06:	f43f ae75 	beq.w	8019bf4 <_strtod_l+0x47c>
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8019f10:	60c3      	str	r3, [r0, #12]
 8019f12:	4631      	mov	r1, r6
 8019f14:	f7ff fa32 	bl	801937c <__mcmp>
 8019f18:	2800      	cmp	r0, #0
 8019f1a:	da7f      	bge.n	801a01c <_strtod_l+0x8a4>
 8019f1c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8019f20:	f040 80a5 	bne.w	801a06e <_strtod_l+0x8f6>
 8019f24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	f040 80a0 	bne.w	801a06e <_strtod_l+0x8f6>
 8019f2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019f32:	0d1b      	lsrs	r3, r3, #20
 8019f34:	051b      	lsls	r3, r3, #20
 8019f36:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019f3a:	f240 8098 	bls.w	801a06e <_strtod_l+0x8f6>
 8019f3e:	696b      	ldr	r3, [r5, #20]
 8019f40:	b91b      	cbnz	r3, 8019f4a <_strtod_l+0x7d2>
 8019f42:	692b      	ldr	r3, [r5, #16]
 8019f44:	2b01      	cmp	r3, #1
 8019f46:	f340 8092 	ble.w	801a06e <_strtod_l+0x8f6>
 8019f4a:	4629      	mov	r1, r5
 8019f4c:	2201      	movs	r2, #1
 8019f4e:	4620      	mov	r0, r4
 8019f50:	f7ff f9a8 	bl	80192a4 <__lshift>
 8019f54:	4631      	mov	r1, r6
 8019f56:	4605      	mov	r5, r0
 8019f58:	f7ff fa10 	bl	801937c <__mcmp>
 8019f5c:	2800      	cmp	r0, #0
 8019f5e:	f340 8086 	ble.w	801a06e <_strtod_l+0x8f6>
 8019f62:	9905      	ldr	r1, [sp, #20]
 8019f64:	4a2c      	ldr	r2, [pc, #176]	; (801a018 <_strtod_l+0x8a0>)
 8019f66:	464b      	mov	r3, r9
 8019f68:	2900      	cmp	r1, #0
 8019f6a:	f000 809f 	beq.w	801a0ac <_strtod_l+0x934>
 8019f6e:	ea02 0109 	and.w	r1, r2, r9
 8019f72:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019f76:	f300 8099 	bgt.w	801a0ac <_strtod_l+0x934>
 8019f7a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019f7e:	f77f aea8 	ble.w	8019cd2 <_strtod_l+0x55a>
 8019f82:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801a008 <_strtod_l+0x890>
 8019f86:	ec49 8b16 	vmov	d6, r8, r9
 8019f8a:	4b23      	ldr	r3, [pc, #140]	; (801a018 <_strtod_l+0x8a0>)
 8019f8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019f90:	ee17 2a90 	vmov	r2, s15
 8019f94:	4013      	ands	r3, r2
 8019f96:	ec59 8b17 	vmov	r8, r9, d7
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	f47f ae34 	bne.w	8019c08 <_strtod_l+0x490>
 8019fa0:	2322      	movs	r3, #34	; 0x22
 8019fa2:	6023      	str	r3, [r4, #0]
 8019fa4:	e630      	b.n	8019c08 <_strtod_l+0x490>
 8019fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8019faa:	fa01 f202 	lsl.w	r2, r1, r2
 8019fae:	ea02 0808 	and.w	r8, r2, r8
 8019fb2:	e6da      	b.n	8019d6a <_strtod_l+0x5f2>
 8019fb4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8019fb8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8019fbc:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8019fc0:	33e2      	adds	r3, #226	; 0xe2
 8019fc2:	fa00 f303 	lsl.w	r3, r0, r3
 8019fc6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8019fca:	e73f      	b.n	8019e4c <_strtod_l+0x6d4>
 8019fcc:	2200      	movs	r2, #0
 8019fce:	2301      	movs	r3, #1
 8019fd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8019fd4:	e73a      	b.n	8019e4c <_strtod_l+0x6d4>
 8019fd6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019fd8:	461a      	mov	r2, r3
 8019fda:	4620      	mov	r0, r4
 8019fdc:	f7ff f962 	bl	80192a4 <__lshift>
 8019fe0:	9012      	str	r0, [sp, #72]	; 0x48
 8019fe2:	2800      	cmp	r0, #0
 8019fe4:	f47f af64 	bne.w	8019eb0 <_strtod_l+0x738>
 8019fe8:	e604      	b.n	8019bf4 <_strtod_l+0x47c>
 8019fea:	bf00      	nop
 8019fec:	f3af 8000 	nop.w
 8019ff0:	94a03595 	.word	0x94a03595
 8019ff4:	3fcfffff 	.word	0x3fcfffff
 8019ff8:	94a03595 	.word	0x94a03595
 8019ffc:	3fdfffff 	.word	0x3fdfffff
 801a000:	35afe535 	.word	0x35afe535
 801a004:	3fe00000 	.word	0x3fe00000
 801a008:	00000000 	.word	0x00000000
 801a00c:	39500000 	.word	0x39500000
 801a010:	0801ca40 	.word	0x0801ca40
 801a014:	fffffc02 	.word	0xfffffc02
 801a018:	7ff00000 	.word	0x7ff00000
 801a01c:	46cb      	mov	fp, r9
 801a01e:	d15f      	bne.n	801a0e0 <_strtod_l+0x968>
 801a020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a024:	f1ba 0f00 	cmp.w	sl, #0
 801a028:	d02a      	beq.n	801a080 <_strtod_l+0x908>
 801a02a:	4aa7      	ldr	r2, [pc, #668]	; (801a2c8 <_strtod_l+0xb50>)
 801a02c:	4293      	cmp	r3, r2
 801a02e:	d12b      	bne.n	801a088 <_strtod_l+0x910>
 801a030:	9b05      	ldr	r3, [sp, #20]
 801a032:	4642      	mov	r2, r8
 801a034:	b1fb      	cbz	r3, 801a076 <_strtod_l+0x8fe>
 801a036:	4ba5      	ldr	r3, [pc, #660]	; (801a2cc <_strtod_l+0xb54>)
 801a038:	ea09 0303 	and.w	r3, r9, r3
 801a03c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a040:	f04f 31ff 	mov.w	r1, #4294967295
 801a044:	d81a      	bhi.n	801a07c <_strtod_l+0x904>
 801a046:	0d1b      	lsrs	r3, r3, #20
 801a048:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a04c:	fa01 f303 	lsl.w	r3, r1, r3
 801a050:	429a      	cmp	r2, r3
 801a052:	d119      	bne.n	801a088 <_strtod_l+0x910>
 801a054:	4b9e      	ldr	r3, [pc, #632]	; (801a2d0 <_strtod_l+0xb58>)
 801a056:	459b      	cmp	fp, r3
 801a058:	d102      	bne.n	801a060 <_strtod_l+0x8e8>
 801a05a:	3201      	adds	r2, #1
 801a05c:	f43f adca 	beq.w	8019bf4 <_strtod_l+0x47c>
 801a060:	4b9a      	ldr	r3, [pc, #616]	; (801a2cc <_strtod_l+0xb54>)
 801a062:	ea0b 0303 	and.w	r3, fp, r3
 801a066:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801a06a:	f04f 0800 	mov.w	r8, #0
 801a06e:	9b05      	ldr	r3, [sp, #20]
 801a070:	2b00      	cmp	r3, #0
 801a072:	d186      	bne.n	8019f82 <_strtod_l+0x80a>
 801a074:	e5c8      	b.n	8019c08 <_strtod_l+0x490>
 801a076:	f04f 33ff 	mov.w	r3, #4294967295
 801a07a:	e7e9      	b.n	801a050 <_strtod_l+0x8d8>
 801a07c:	460b      	mov	r3, r1
 801a07e:	e7e7      	b.n	801a050 <_strtod_l+0x8d8>
 801a080:	ea53 0308 	orrs.w	r3, r3, r8
 801a084:	f43f af6d 	beq.w	8019f62 <_strtod_l+0x7ea>
 801a088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a08a:	b1cb      	cbz	r3, 801a0c0 <_strtod_l+0x948>
 801a08c:	ea13 0f0b 	tst.w	r3, fp
 801a090:	d0ed      	beq.n	801a06e <_strtod_l+0x8f6>
 801a092:	9a05      	ldr	r2, [sp, #20]
 801a094:	4640      	mov	r0, r8
 801a096:	4649      	mov	r1, r9
 801a098:	f1ba 0f00 	cmp.w	sl, #0
 801a09c:	d014      	beq.n	801a0c8 <_strtod_l+0x950>
 801a09e:	f7ff fb51 	bl	8019744 <sulp>
 801a0a2:	ee38 7b00 	vadd.f64	d7, d8, d0
 801a0a6:	ec59 8b17 	vmov	r8, r9, d7
 801a0aa:	e7e0      	b.n	801a06e <_strtod_l+0x8f6>
 801a0ac:	4013      	ands	r3, r2
 801a0ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a0b2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801a0b6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801a0ba:	f04f 38ff 	mov.w	r8, #4294967295
 801a0be:	e7d6      	b.n	801a06e <_strtod_l+0x8f6>
 801a0c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a0c2:	ea13 0f08 	tst.w	r3, r8
 801a0c6:	e7e3      	b.n	801a090 <_strtod_l+0x918>
 801a0c8:	f7ff fb3c 	bl	8019744 <sulp>
 801a0cc:	ee38 0b40 	vsub.f64	d0, d8, d0
 801a0d0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801a0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0d8:	ec59 8b10 	vmov	r8, r9, d0
 801a0dc:	d1c7      	bne.n	801a06e <_strtod_l+0x8f6>
 801a0de:	e5f8      	b.n	8019cd2 <_strtod_l+0x55a>
 801a0e0:	4631      	mov	r1, r6
 801a0e2:	4628      	mov	r0, r5
 801a0e4:	f7ff faba 	bl	801965c <__ratio>
 801a0e8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801a0ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0f4:	d85f      	bhi.n	801a1b6 <_strtod_l+0xa3e>
 801a0f6:	f1ba 0f00 	cmp.w	sl, #0
 801a0fa:	d166      	bne.n	801a1ca <_strtod_l+0xa52>
 801a0fc:	f1b8 0f00 	cmp.w	r8, #0
 801a100:	d14d      	bne.n	801a19e <_strtod_l+0xa26>
 801a102:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a106:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d162      	bne.n	801a1d4 <_strtod_l+0xa5c>
 801a10e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801a112:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801a116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a11a:	d401      	bmi.n	801a120 <_strtod_l+0x9a8>
 801a11c:	ee20 db0d 	vmul.f64	d13, d0, d13
 801a120:	eeb1 cb4d 	vneg.f64	d12, d13
 801a124:	4869      	ldr	r0, [pc, #420]	; (801a2cc <_strtod_l+0xb54>)
 801a126:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801a2d8 <_strtod_l+0xb60>
 801a12a:	ea0b 0100 	and.w	r1, fp, r0
 801a12e:	4561      	cmp	r1, ip
 801a130:	ec53 2b1c 	vmov	r2, r3, d12
 801a134:	d17a      	bne.n	801a22c <_strtod_l+0xab4>
 801a136:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801a13a:	ec49 8b10 	vmov	d0, r8, r9
 801a13e:	910a      	str	r1, [sp, #40]	; 0x28
 801a140:	f7ff f9c2 	bl	80194c8 <__ulp>
 801a144:	ec49 8b1e 	vmov	d14, r8, r9
 801a148:	4860      	ldr	r0, [pc, #384]	; (801a2cc <_strtod_l+0xb54>)
 801a14a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801a14e:	ee1e 3a90 	vmov	r3, s29
 801a152:	4a60      	ldr	r2, [pc, #384]	; (801a2d4 <_strtod_l+0xb5c>)
 801a154:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a156:	4018      	ands	r0, r3
 801a158:	4290      	cmp	r0, r2
 801a15a:	ec59 8b1e 	vmov	r8, r9, d14
 801a15e:	d93c      	bls.n	801a1da <_strtod_l+0xa62>
 801a160:	ee18 2a90 	vmov	r2, s17
 801a164:	4b5a      	ldr	r3, [pc, #360]	; (801a2d0 <_strtod_l+0xb58>)
 801a166:	429a      	cmp	r2, r3
 801a168:	d104      	bne.n	801a174 <_strtod_l+0x9fc>
 801a16a:	ee18 3a10 	vmov	r3, s16
 801a16e:	3301      	adds	r3, #1
 801a170:	f43f ad40 	beq.w	8019bf4 <_strtod_l+0x47c>
 801a174:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801a2d0 <_strtod_l+0xb58>
 801a178:	f04f 38ff 	mov.w	r8, #4294967295
 801a17c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a17e:	4620      	mov	r0, r4
 801a180:	f7fe fe76 	bl	8018e70 <_Bfree>
 801a184:	4639      	mov	r1, r7
 801a186:	4620      	mov	r0, r4
 801a188:	f7fe fe72 	bl	8018e70 <_Bfree>
 801a18c:	4631      	mov	r1, r6
 801a18e:	4620      	mov	r0, r4
 801a190:	f7fe fe6e 	bl	8018e70 <_Bfree>
 801a194:	4629      	mov	r1, r5
 801a196:	4620      	mov	r0, r4
 801a198:	f7fe fe6a 	bl	8018e70 <_Bfree>
 801a19c:	e609      	b.n	8019db2 <_strtod_l+0x63a>
 801a19e:	f1b8 0f01 	cmp.w	r8, #1
 801a1a2:	d103      	bne.n	801a1ac <_strtod_l+0xa34>
 801a1a4:	f1b9 0f00 	cmp.w	r9, #0
 801a1a8:	f43f ad93 	beq.w	8019cd2 <_strtod_l+0x55a>
 801a1ac:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801a1b0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801a1b4:	e7b6      	b.n	801a124 <_strtod_l+0x9ac>
 801a1b6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801a1ba:	ee20 db0d 	vmul.f64	d13, d0, d13
 801a1be:	f1ba 0f00 	cmp.w	sl, #0
 801a1c2:	d0ad      	beq.n	801a120 <_strtod_l+0x9a8>
 801a1c4:	eeb0 cb4d 	vmov.f64	d12, d13
 801a1c8:	e7ac      	b.n	801a124 <_strtod_l+0x9ac>
 801a1ca:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801a1ce:	eeb0 db4c 	vmov.f64	d13, d12
 801a1d2:	e7a7      	b.n	801a124 <_strtod_l+0x9ac>
 801a1d4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801a1d8:	e7a4      	b.n	801a124 <_strtod_l+0x9ac>
 801a1da:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801a1de:	9b05      	ldr	r3, [sp, #20]
 801a1e0:	46cb      	mov	fp, r9
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d1ca      	bne.n	801a17c <_strtod_l+0xa04>
 801a1e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a1ea:	0d1b      	lsrs	r3, r3, #20
 801a1ec:	051b      	lsls	r3, r3, #20
 801a1ee:	4299      	cmp	r1, r3
 801a1f0:	d1c4      	bne.n	801a17c <_strtod_l+0xa04>
 801a1f2:	ec51 0b1d 	vmov	r0, r1, d13
 801a1f6:	f7e6 fab7 	bl	8000768 <__aeabi_d2lz>
 801a1fa:	f7e6 fa6f 	bl	80006dc <__aeabi_l2d>
 801a1fe:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801a202:	ec41 0b17 	vmov	d7, r0, r1
 801a206:	ea4b 0b08 	orr.w	fp, fp, r8
 801a20a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801a20e:	ee3d db47 	vsub.f64	d13, d13, d7
 801a212:	d03c      	beq.n	801a28e <_strtod_l+0xb16>
 801a214:	eeb4 dbca 	vcmpe.f64	d13, d10
 801a218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a21c:	f53f acf4 	bmi.w	8019c08 <_strtod_l+0x490>
 801a220:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801a224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a228:	dda8      	ble.n	801a17c <_strtod_l+0xa04>
 801a22a:	e4ed      	b.n	8019c08 <_strtod_l+0x490>
 801a22c:	9805      	ldr	r0, [sp, #20]
 801a22e:	b1f0      	cbz	r0, 801a26e <_strtod_l+0xaf6>
 801a230:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801a234:	d81b      	bhi.n	801a26e <_strtod_l+0xaf6>
 801a236:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801a2c0 <_strtod_l+0xb48>
 801a23a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801a23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a242:	d811      	bhi.n	801a268 <_strtod_l+0xaf0>
 801a244:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801a248:	ee1d 3a10 	vmov	r3, s26
 801a24c:	2b01      	cmp	r3, #1
 801a24e:	bf38      	it	cc
 801a250:	2301      	movcc	r3, #1
 801a252:	ee0d 3a10 	vmov	s26, r3
 801a256:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801a25a:	f1ba 0f00 	cmp.w	sl, #0
 801a25e:	d113      	bne.n	801a288 <_strtod_l+0xb10>
 801a260:	eeb1 7b4d 	vneg.f64	d7, d13
 801a264:	ec53 2b17 	vmov	r2, r3, d7
 801a268:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801a26c:	1a43      	subs	r3, r0, r1
 801a26e:	eeb0 0b48 	vmov.f64	d0, d8
 801a272:	ec43 2b1c 	vmov	d12, r2, r3
 801a276:	910a      	str	r1, [sp, #40]	; 0x28
 801a278:	f7ff f926 	bl	80194c8 <__ulp>
 801a27c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a27e:	eeac 8b00 	vfma.f64	d8, d12, d0
 801a282:	ec59 8b18 	vmov	r8, r9, d8
 801a286:	e7aa      	b.n	801a1de <_strtod_l+0xa66>
 801a288:	eeb0 7b4d 	vmov.f64	d7, d13
 801a28c:	e7ea      	b.n	801a264 <_strtod_l+0xaec>
 801a28e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801a292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a296:	f57f af71 	bpl.w	801a17c <_strtod_l+0xa04>
 801a29a:	e4b5      	b.n	8019c08 <_strtod_l+0x490>
 801a29c:	2300      	movs	r3, #0
 801a29e:	9308      	str	r3, [sp, #32]
 801a2a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a2a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a2a4:	6013      	str	r3, [r2, #0]
 801a2a6:	f7ff baa6 	b.w	80197f6 <_strtod_l+0x7e>
 801a2aa:	2a65      	cmp	r2, #101	; 0x65
 801a2ac:	f43f aba2 	beq.w	80199f4 <_strtod_l+0x27c>
 801a2b0:	2a45      	cmp	r2, #69	; 0x45
 801a2b2:	f43f ab9f 	beq.w	80199f4 <_strtod_l+0x27c>
 801a2b6:	2101      	movs	r1, #1
 801a2b8:	f7ff bbd8 	b.w	8019a6c <_strtod_l+0x2f4>
 801a2bc:	f3af 8000 	nop.w
 801a2c0:	ffc00000 	.word	0xffc00000
 801a2c4:	41dfffff 	.word	0x41dfffff
 801a2c8:	000fffff 	.word	0x000fffff
 801a2cc:	7ff00000 	.word	0x7ff00000
 801a2d0:	7fefffff 	.word	0x7fefffff
 801a2d4:	7c9fffff 	.word	0x7c9fffff
 801a2d8:	7fe00000 	.word	0x7fe00000

0801a2dc <_strtod_r>:
 801a2dc:	4b01      	ldr	r3, [pc, #4]	; (801a2e4 <_strtod_r+0x8>)
 801a2de:	f7ff ba4b 	b.w	8019778 <_strtod_l>
 801a2e2:	bf00      	nop
 801a2e4:	2400015c 	.word	0x2400015c

0801a2e8 <_strtol_l.constprop.0>:
 801a2e8:	2b01      	cmp	r3, #1
 801a2ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2ee:	d001      	beq.n	801a2f4 <_strtol_l.constprop.0+0xc>
 801a2f0:	2b24      	cmp	r3, #36	; 0x24
 801a2f2:	d906      	bls.n	801a302 <_strtol_l.constprop.0+0x1a>
 801a2f4:	f7fd fe46 	bl	8017f84 <__errno>
 801a2f8:	2316      	movs	r3, #22
 801a2fa:	6003      	str	r3, [r0, #0]
 801a2fc:	2000      	movs	r0, #0
 801a2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a302:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a3e8 <_strtol_l.constprop.0+0x100>
 801a306:	460d      	mov	r5, r1
 801a308:	462e      	mov	r6, r5
 801a30a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a30e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801a312:	f017 0708 	ands.w	r7, r7, #8
 801a316:	d1f7      	bne.n	801a308 <_strtol_l.constprop.0+0x20>
 801a318:	2c2d      	cmp	r4, #45	; 0x2d
 801a31a:	d132      	bne.n	801a382 <_strtol_l.constprop.0+0x9a>
 801a31c:	782c      	ldrb	r4, [r5, #0]
 801a31e:	2701      	movs	r7, #1
 801a320:	1cb5      	adds	r5, r6, #2
 801a322:	2b00      	cmp	r3, #0
 801a324:	d05b      	beq.n	801a3de <_strtol_l.constprop.0+0xf6>
 801a326:	2b10      	cmp	r3, #16
 801a328:	d109      	bne.n	801a33e <_strtol_l.constprop.0+0x56>
 801a32a:	2c30      	cmp	r4, #48	; 0x30
 801a32c:	d107      	bne.n	801a33e <_strtol_l.constprop.0+0x56>
 801a32e:	782c      	ldrb	r4, [r5, #0]
 801a330:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a334:	2c58      	cmp	r4, #88	; 0x58
 801a336:	d14d      	bne.n	801a3d4 <_strtol_l.constprop.0+0xec>
 801a338:	786c      	ldrb	r4, [r5, #1]
 801a33a:	2310      	movs	r3, #16
 801a33c:	3502      	adds	r5, #2
 801a33e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a342:	f108 38ff 	add.w	r8, r8, #4294967295
 801a346:	f04f 0e00 	mov.w	lr, #0
 801a34a:	fbb8 f9f3 	udiv	r9, r8, r3
 801a34e:	4676      	mov	r6, lr
 801a350:	fb03 8a19 	mls	sl, r3, r9, r8
 801a354:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a358:	f1bc 0f09 	cmp.w	ip, #9
 801a35c:	d816      	bhi.n	801a38c <_strtol_l.constprop.0+0xa4>
 801a35e:	4664      	mov	r4, ip
 801a360:	42a3      	cmp	r3, r4
 801a362:	dd24      	ble.n	801a3ae <_strtol_l.constprop.0+0xc6>
 801a364:	f1be 3fff 	cmp.w	lr, #4294967295
 801a368:	d008      	beq.n	801a37c <_strtol_l.constprop.0+0x94>
 801a36a:	45b1      	cmp	r9, r6
 801a36c:	d31c      	bcc.n	801a3a8 <_strtol_l.constprop.0+0xc0>
 801a36e:	d101      	bne.n	801a374 <_strtol_l.constprop.0+0x8c>
 801a370:	45a2      	cmp	sl, r4
 801a372:	db19      	blt.n	801a3a8 <_strtol_l.constprop.0+0xc0>
 801a374:	fb06 4603 	mla	r6, r6, r3, r4
 801a378:	f04f 0e01 	mov.w	lr, #1
 801a37c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a380:	e7e8      	b.n	801a354 <_strtol_l.constprop.0+0x6c>
 801a382:	2c2b      	cmp	r4, #43	; 0x2b
 801a384:	bf04      	itt	eq
 801a386:	782c      	ldrbeq	r4, [r5, #0]
 801a388:	1cb5      	addeq	r5, r6, #2
 801a38a:	e7ca      	b.n	801a322 <_strtol_l.constprop.0+0x3a>
 801a38c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a390:	f1bc 0f19 	cmp.w	ip, #25
 801a394:	d801      	bhi.n	801a39a <_strtol_l.constprop.0+0xb2>
 801a396:	3c37      	subs	r4, #55	; 0x37
 801a398:	e7e2      	b.n	801a360 <_strtol_l.constprop.0+0x78>
 801a39a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a39e:	f1bc 0f19 	cmp.w	ip, #25
 801a3a2:	d804      	bhi.n	801a3ae <_strtol_l.constprop.0+0xc6>
 801a3a4:	3c57      	subs	r4, #87	; 0x57
 801a3a6:	e7db      	b.n	801a360 <_strtol_l.constprop.0+0x78>
 801a3a8:	f04f 3eff 	mov.w	lr, #4294967295
 801a3ac:	e7e6      	b.n	801a37c <_strtol_l.constprop.0+0x94>
 801a3ae:	f1be 3fff 	cmp.w	lr, #4294967295
 801a3b2:	d105      	bne.n	801a3c0 <_strtol_l.constprop.0+0xd8>
 801a3b4:	2322      	movs	r3, #34	; 0x22
 801a3b6:	6003      	str	r3, [r0, #0]
 801a3b8:	4646      	mov	r6, r8
 801a3ba:	b942      	cbnz	r2, 801a3ce <_strtol_l.constprop.0+0xe6>
 801a3bc:	4630      	mov	r0, r6
 801a3be:	e79e      	b.n	801a2fe <_strtol_l.constprop.0+0x16>
 801a3c0:	b107      	cbz	r7, 801a3c4 <_strtol_l.constprop.0+0xdc>
 801a3c2:	4276      	negs	r6, r6
 801a3c4:	2a00      	cmp	r2, #0
 801a3c6:	d0f9      	beq.n	801a3bc <_strtol_l.constprop.0+0xd4>
 801a3c8:	f1be 0f00 	cmp.w	lr, #0
 801a3cc:	d000      	beq.n	801a3d0 <_strtol_l.constprop.0+0xe8>
 801a3ce:	1e69      	subs	r1, r5, #1
 801a3d0:	6011      	str	r1, [r2, #0]
 801a3d2:	e7f3      	b.n	801a3bc <_strtol_l.constprop.0+0xd4>
 801a3d4:	2430      	movs	r4, #48	; 0x30
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d1b1      	bne.n	801a33e <_strtol_l.constprop.0+0x56>
 801a3da:	2308      	movs	r3, #8
 801a3dc:	e7af      	b.n	801a33e <_strtol_l.constprop.0+0x56>
 801a3de:	2c30      	cmp	r4, #48	; 0x30
 801a3e0:	d0a5      	beq.n	801a32e <_strtol_l.constprop.0+0x46>
 801a3e2:	230a      	movs	r3, #10
 801a3e4:	e7ab      	b.n	801a33e <_strtol_l.constprop.0+0x56>
 801a3e6:	bf00      	nop
 801a3e8:	0801ca69 	.word	0x0801ca69

0801a3ec <_strtol_r>:
 801a3ec:	f7ff bf7c 	b.w	801a2e8 <_strtol_l.constprop.0>

0801a3f0 <__ssputs_r>:
 801a3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3f4:	688e      	ldr	r6, [r1, #8]
 801a3f6:	461f      	mov	r7, r3
 801a3f8:	42be      	cmp	r6, r7
 801a3fa:	680b      	ldr	r3, [r1, #0]
 801a3fc:	4682      	mov	sl, r0
 801a3fe:	460c      	mov	r4, r1
 801a400:	4690      	mov	r8, r2
 801a402:	d82c      	bhi.n	801a45e <__ssputs_r+0x6e>
 801a404:	898a      	ldrh	r2, [r1, #12]
 801a406:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a40a:	d026      	beq.n	801a45a <__ssputs_r+0x6a>
 801a40c:	6965      	ldr	r5, [r4, #20]
 801a40e:	6909      	ldr	r1, [r1, #16]
 801a410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a414:	eba3 0901 	sub.w	r9, r3, r1
 801a418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a41c:	1c7b      	adds	r3, r7, #1
 801a41e:	444b      	add	r3, r9
 801a420:	106d      	asrs	r5, r5, #1
 801a422:	429d      	cmp	r5, r3
 801a424:	bf38      	it	cc
 801a426:	461d      	movcc	r5, r3
 801a428:	0553      	lsls	r3, r2, #21
 801a42a:	d527      	bpl.n	801a47c <__ssputs_r+0x8c>
 801a42c:	4629      	mov	r1, r5
 801a42e:	f7fe fc53 	bl	8018cd8 <_malloc_r>
 801a432:	4606      	mov	r6, r0
 801a434:	b360      	cbz	r0, 801a490 <__ssputs_r+0xa0>
 801a436:	6921      	ldr	r1, [r4, #16]
 801a438:	464a      	mov	r2, r9
 801a43a:	f7fd fdd0 	bl	8017fde <memcpy>
 801a43e:	89a3      	ldrh	r3, [r4, #12]
 801a440:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a448:	81a3      	strh	r3, [r4, #12]
 801a44a:	6126      	str	r6, [r4, #16]
 801a44c:	6165      	str	r5, [r4, #20]
 801a44e:	444e      	add	r6, r9
 801a450:	eba5 0509 	sub.w	r5, r5, r9
 801a454:	6026      	str	r6, [r4, #0]
 801a456:	60a5      	str	r5, [r4, #8]
 801a458:	463e      	mov	r6, r7
 801a45a:	42be      	cmp	r6, r7
 801a45c:	d900      	bls.n	801a460 <__ssputs_r+0x70>
 801a45e:	463e      	mov	r6, r7
 801a460:	6820      	ldr	r0, [r4, #0]
 801a462:	4632      	mov	r2, r6
 801a464:	4641      	mov	r1, r8
 801a466:	f000 f9c9 	bl	801a7fc <memmove>
 801a46a:	68a3      	ldr	r3, [r4, #8]
 801a46c:	1b9b      	subs	r3, r3, r6
 801a46e:	60a3      	str	r3, [r4, #8]
 801a470:	6823      	ldr	r3, [r4, #0]
 801a472:	4433      	add	r3, r6
 801a474:	6023      	str	r3, [r4, #0]
 801a476:	2000      	movs	r0, #0
 801a478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a47c:	462a      	mov	r2, r5
 801a47e:	f000 fda0 	bl	801afc2 <_realloc_r>
 801a482:	4606      	mov	r6, r0
 801a484:	2800      	cmp	r0, #0
 801a486:	d1e0      	bne.n	801a44a <__ssputs_r+0x5a>
 801a488:	6921      	ldr	r1, [r4, #16]
 801a48a:	4650      	mov	r0, sl
 801a48c:	f7fe fbb0 	bl	8018bf0 <_free_r>
 801a490:	230c      	movs	r3, #12
 801a492:	f8ca 3000 	str.w	r3, [sl]
 801a496:	89a3      	ldrh	r3, [r4, #12]
 801a498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a49c:	81a3      	strh	r3, [r4, #12]
 801a49e:	f04f 30ff 	mov.w	r0, #4294967295
 801a4a2:	e7e9      	b.n	801a478 <__ssputs_r+0x88>

0801a4a4 <_svfiprintf_r>:
 801a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4a8:	4698      	mov	r8, r3
 801a4aa:	898b      	ldrh	r3, [r1, #12]
 801a4ac:	061b      	lsls	r3, r3, #24
 801a4ae:	b09d      	sub	sp, #116	; 0x74
 801a4b0:	4607      	mov	r7, r0
 801a4b2:	460d      	mov	r5, r1
 801a4b4:	4614      	mov	r4, r2
 801a4b6:	d50e      	bpl.n	801a4d6 <_svfiprintf_r+0x32>
 801a4b8:	690b      	ldr	r3, [r1, #16]
 801a4ba:	b963      	cbnz	r3, 801a4d6 <_svfiprintf_r+0x32>
 801a4bc:	2140      	movs	r1, #64	; 0x40
 801a4be:	f7fe fc0b 	bl	8018cd8 <_malloc_r>
 801a4c2:	6028      	str	r0, [r5, #0]
 801a4c4:	6128      	str	r0, [r5, #16]
 801a4c6:	b920      	cbnz	r0, 801a4d2 <_svfiprintf_r+0x2e>
 801a4c8:	230c      	movs	r3, #12
 801a4ca:	603b      	str	r3, [r7, #0]
 801a4cc:	f04f 30ff 	mov.w	r0, #4294967295
 801a4d0:	e0d0      	b.n	801a674 <_svfiprintf_r+0x1d0>
 801a4d2:	2340      	movs	r3, #64	; 0x40
 801a4d4:	616b      	str	r3, [r5, #20]
 801a4d6:	2300      	movs	r3, #0
 801a4d8:	9309      	str	r3, [sp, #36]	; 0x24
 801a4da:	2320      	movs	r3, #32
 801a4dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a4e0:	f8cd 800c 	str.w	r8, [sp, #12]
 801a4e4:	2330      	movs	r3, #48	; 0x30
 801a4e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a68c <_svfiprintf_r+0x1e8>
 801a4ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a4ee:	f04f 0901 	mov.w	r9, #1
 801a4f2:	4623      	mov	r3, r4
 801a4f4:	469a      	mov	sl, r3
 801a4f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a4fa:	b10a      	cbz	r2, 801a500 <_svfiprintf_r+0x5c>
 801a4fc:	2a25      	cmp	r2, #37	; 0x25
 801a4fe:	d1f9      	bne.n	801a4f4 <_svfiprintf_r+0x50>
 801a500:	ebba 0b04 	subs.w	fp, sl, r4
 801a504:	d00b      	beq.n	801a51e <_svfiprintf_r+0x7a>
 801a506:	465b      	mov	r3, fp
 801a508:	4622      	mov	r2, r4
 801a50a:	4629      	mov	r1, r5
 801a50c:	4638      	mov	r0, r7
 801a50e:	f7ff ff6f 	bl	801a3f0 <__ssputs_r>
 801a512:	3001      	adds	r0, #1
 801a514:	f000 80a9 	beq.w	801a66a <_svfiprintf_r+0x1c6>
 801a518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a51a:	445a      	add	r2, fp
 801a51c:	9209      	str	r2, [sp, #36]	; 0x24
 801a51e:	f89a 3000 	ldrb.w	r3, [sl]
 801a522:	2b00      	cmp	r3, #0
 801a524:	f000 80a1 	beq.w	801a66a <_svfiprintf_r+0x1c6>
 801a528:	2300      	movs	r3, #0
 801a52a:	f04f 32ff 	mov.w	r2, #4294967295
 801a52e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a532:	f10a 0a01 	add.w	sl, sl, #1
 801a536:	9304      	str	r3, [sp, #16]
 801a538:	9307      	str	r3, [sp, #28]
 801a53a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a53e:	931a      	str	r3, [sp, #104]	; 0x68
 801a540:	4654      	mov	r4, sl
 801a542:	2205      	movs	r2, #5
 801a544:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a548:	4850      	ldr	r0, [pc, #320]	; (801a68c <_svfiprintf_r+0x1e8>)
 801a54a:	f7e5 fee1 	bl	8000310 <memchr>
 801a54e:	9a04      	ldr	r2, [sp, #16]
 801a550:	b9d8      	cbnz	r0, 801a58a <_svfiprintf_r+0xe6>
 801a552:	06d0      	lsls	r0, r2, #27
 801a554:	bf44      	itt	mi
 801a556:	2320      	movmi	r3, #32
 801a558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a55c:	0711      	lsls	r1, r2, #28
 801a55e:	bf44      	itt	mi
 801a560:	232b      	movmi	r3, #43	; 0x2b
 801a562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a566:	f89a 3000 	ldrb.w	r3, [sl]
 801a56a:	2b2a      	cmp	r3, #42	; 0x2a
 801a56c:	d015      	beq.n	801a59a <_svfiprintf_r+0xf6>
 801a56e:	9a07      	ldr	r2, [sp, #28]
 801a570:	4654      	mov	r4, sl
 801a572:	2000      	movs	r0, #0
 801a574:	f04f 0c0a 	mov.w	ip, #10
 801a578:	4621      	mov	r1, r4
 801a57a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a57e:	3b30      	subs	r3, #48	; 0x30
 801a580:	2b09      	cmp	r3, #9
 801a582:	d94d      	bls.n	801a620 <_svfiprintf_r+0x17c>
 801a584:	b1b0      	cbz	r0, 801a5b4 <_svfiprintf_r+0x110>
 801a586:	9207      	str	r2, [sp, #28]
 801a588:	e014      	b.n	801a5b4 <_svfiprintf_r+0x110>
 801a58a:	eba0 0308 	sub.w	r3, r0, r8
 801a58e:	fa09 f303 	lsl.w	r3, r9, r3
 801a592:	4313      	orrs	r3, r2
 801a594:	9304      	str	r3, [sp, #16]
 801a596:	46a2      	mov	sl, r4
 801a598:	e7d2      	b.n	801a540 <_svfiprintf_r+0x9c>
 801a59a:	9b03      	ldr	r3, [sp, #12]
 801a59c:	1d19      	adds	r1, r3, #4
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	9103      	str	r1, [sp, #12]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	bfbb      	ittet	lt
 801a5a6:	425b      	neglt	r3, r3
 801a5a8:	f042 0202 	orrlt.w	r2, r2, #2
 801a5ac:	9307      	strge	r3, [sp, #28]
 801a5ae:	9307      	strlt	r3, [sp, #28]
 801a5b0:	bfb8      	it	lt
 801a5b2:	9204      	strlt	r2, [sp, #16]
 801a5b4:	7823      	ldrb	r3, [r4, #0]
 801a5b6:	2b2e      	cmp	r3, #46	; 0x2e
 801a5b8:	d10c      	bne.n	801a5d4 <_svfiprintf_r+0x130>
 801a5ba:	7863      	ldrb	r3, [r4, #1]
 801a5bc:	2b2a      	cmp	r3, #42	; 0x2a
 801a5be:	d134      	bne.n	801a62a <_svfiprintf_r+0x186>
 801a5c0:	9b03      	ldr	r3, [sp, #12]
 801a5c2:	1d1a      	adds	r2, r3, #4
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	9203      	str	r2, [sp, #12]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	bfb8      	it	lt
 801a5cc:	f04f 33ff 	movlt.w	r3, #4294967295
 801a5d0:	3402      	adds	r4, #2
 801a5d2:	9305      	str	r3, [sp, #20]
 801a5d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801a69c <_svfiprintf_r+0x1f8>
 801a5d8:	7821      	ldrb	r1, [r4, #0]
 801a5da:	2203      	movs	r2, #3
 801a5dc:	4650      	mov	r0, sl
 801a5de:	f7e5 fe97 	bl	8000310 <memchr>
 801a5e2:	b138      	cbz	r0, 801a5f4 <_svfiprintf_r+0x150>
 801a5e4:	9b04      	ldr	r3, [sp, #16]
 801a5e6:	eba0 000a 	sub.w	r0, r0, sl
 801a5ea:	2240      	movs	r2, #64	; 0x40
 801a5ec:	4082      	lsls	r2, r0
 801a5ee:	4313      	orrs	r3, r2
 801a5f0:	3401      	adds	r4, #1
 801a5f2:	9304      	str	r3, [sp, #16]
 801a5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5f8:	4825      	ldr	r0, [pc, #148]	; (801a690 <_svfiprintf_r+0x1ec>)
 801a5fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a5fe:	2206      	movs	r2, #6
 801a600:	f7e5 fe86 	bl	8000310 <memchr>
 801a604:	2800      	cmp	r0, #0
 801a606:	d038      	beq.n	801a67a <_svfiprintf_r+0x1d6>
 801a608:	4b22      	ldr	r3, [pc, #136]	; (801a694 <_svfiprintf_r+0x1f0>)
 801a60a:	bb1b      	cbnz	r3, 801a654 <_svfiprintf_r+0x1b0>
 801a60c:	9b03      	ldr	r3, [sp, #12]
 801a60e:	3307      	adds	r3, #7
 801a610:	f023 0307 	bic.w	r3, r3, #7
 801a614:	3308      	adds	r3, #8
 801a616:	9303      	str	r3, [sp, #12]
 801a618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a61a:	4433      	add	r3, r6
 801a61c:	9309      	str	r3, [sp, #36]	; 0x24
 801a61e:	e768      	b.n	801a4f2 <_svfiprintf_r+0x4e>
 801a620:	fb0c 3202 	mla	r2, ip, r2, r3
 801a624:	460c      	mov	r4, r1
 801a626:	2001      	movs	r0, #1
 801a628:	e7a6      	b.n	801a578 <_svfiprintf_r+0xd4>
 801a62a:	2300      	movs	r3, #0
 801a62c:	3401      	adds	r4, #1
 801a62e:	9305      	str	r3, [sp, #20]
 801a630:	4619      	mov	r1, r3
 801a632:	f04f 0c0a 	mov.w	ip, #10
 801a636:	4620      	mov	r0, r4
 801a638:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a63c:	3a30      	subs	r2, #48	; 0x30
 801a63e:	2a09      	cmp	r2, #9
 801a640:	d903      	bls.n	801a64a <_svfiprintf_r+0x1a6>
 801a642:	2b00      	cmp	r3, #0
 801a644:	d0c6      	beq.n	801a5d4 <_svfiprintf_r+0x130>
 801a646:	9105      	str	r1, [sp, #20]
 801a648:	e7c4      	b.n	801a5d4 <_svfiprintf_r+0x130>
 801a64a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a64e:	4604      	mov	r4, r0
 801a650:	2301      	movs	r3, #1
 801a652:	e7f0      	b.n	801a636 <_svfiprintf_r+0x192>
 801a654:	ab03      	add	r3, sp, #12
 801a656:	9300      	str	r3, [sp, #0]
 801a658:	462a      	mov	r2, r5
 801a65a:	4b0f      	ldr	r3, [pc, #60]	; (801a698 <_svfiprintf_r+0x1f4>)
 801a65c:	a904      	add	r1, sp, #16
 801a65e:	4638      	mov	r0, r7
 801a660:	f7fc fd6a 	bl	8017138 <_printf_float>
 801a664:	1c42      	adds	r2, r0, #1
 801a666:	4606      	mov	r6, r0
 801a668:	d1d6      	bne.n	801a618 <_svfiprintf_r+0x174>
 801a66a:	89ab      	ldrh	r3, [r5, #12]
 801a66c:	065b      	lsls	r3, r3, #25
 801a66e:	f53f af2d 	bmi.w	801a4cc <_svfiprintf_r+0x28>
 801a672:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a674:	b01d      	add	sp, #116	; 0x74
 801a676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a67a:	ab03      	add	r3, sp, #12
 801a67c:	9300      	str	r3, [sp, #0]
 801a67e:	462a      	mov	r2, r5
 801a680:	4b05      	ldr	r3, [pc, #20]	; (801a698 <_svfiprintf_r+0x1f4>)
 801a682:	a904      	add	r1, sp, #16
 801a684:	4638      	mov	r0, r7
 801a686:	f7fc ffdf 	bl	8017648 <_printf_i>
 801a68a:	e7eb      	b.n	801a664 <_svfiprintf_r+0x1c0>
 801a68c:	0801cb69 	.word	0x0801cb69
 801a690:	0801cb73 	.word	0x0801cb73
 801a694:	08017139 	.word	0x08017139
 801a698:	0801a3f1 	.word	0x0801a3f1
 801a69c:	0801cb6f 	.word	0x0801cb6f

0801a6a0 <__sflush_r>:
 801a6a0:	898a      	ldrh	r2, [r1, #12]
 801a6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6a6:	4605      	mov	r5, r0
 801a6a8:	0710      	lsls	r0, r2, #28
 801a6aa:	460c      	mov	r4, r1
 801a6ac:	d458      	bmi.n	801a760 <__sflush_r+0xc0>
 801a6ae:	684b      	ldr	r3, [r1, #4]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	dc05      	bgt.n	801a6c0 <__sflush_r+0x20>
 801a6b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	dc02      	bgt.n	801a6c0 <__sflush_r+0x20>
 801a6ba:	2000      	movs	r0, #0
 801a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a6c2:	2e00      	cmp	r6, #0
 801a6c4:	d0f9      	beq.n	801a6ba <__sflush_r+0x1a>
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a6cc:	682f      	ldr	r7, [r5, #0]
 801a6ce:	6a21      	ldr	r1, [r4, #32]
 801a6d0:	602b      	str	r3, [r5, #0]
 801a6d2:	d032      	beq.n	801a73a <__sflush_r+0x9a>
 801a6d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a6d6:	89a3      	ldrh	r3, [r4, #12]
 801a6d8:	075a      	lsls	r2, r3, #29
 801a6da:	d505      	bpl.n	801a6e8 <__sflush_r+0x48>
 801a6dc:	6863      	ldr	r3, [r4, #4]
 801a6de:	1ac0      	subs	r0, r0, r3
 801a6e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a6e2:	b10b      	cbz	r3, 801a6e8 <__sflush_r+0x48>
 801a6e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a6e6:	1ac0      	subs	r0, r0, r3
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	4602      	mov	r2, r0
 801a6ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a6ee:	6a21      	ldr	r1, [r4, #32]
 801a6f0:	4628      	mov	r0, r5
 801a6f2:	47b0      	blx	r6
 801a6f4:	1c43      	adds	r3, r0, #1
 801a6f6:	89a3      	ldrh	r3, [r4, #12]
 801a6f8:	d106      	bne.n	801a708 <__sflush_r+0x68>
 801a6fa:	6829      	ldr	r1, [r5, #0]
 801a6fc:	291d      	cmp	r1, #29
 801a6fe:	d82b      	bhi.n	801a758 <__sflush_r+0xb8>
 801a700:	4a29      	ldr	r2, [pc, #164]	; (801a7a8 <__sflush_r+0x108>)
 801a702:	410a      	asrs	r2, r1
 801a704:	07d6      	lsls	r6, r2, #31
 801a706:	d427      	bmi.n	801a758 <__sflush_r+0xb8>
 801a708:	2200      	movs	r2, #0
 801a70a:	6062      	str	r2, [r4, #4]
 801a70c:	04d9      	lsls	r1, r3, #19
 801a70e:	6922      	ldr	r2, [r4, #16]
 801a710:	6022      	str	r2, [r4, #0]
 801a712:	d504      	bpl.n	801a71e <__sflush_r+0x7e>
 801a714:	1c42      	adds	r2, r0, #1
 801a716:	d101      	bne.n	801a71c <__sflush_r+0x7c>
 801a718:	682b      	ldr	r3, [r5, #0]
 801a71a:	b903      	cbnz	r3, 801a71e <__sflush_r+0x7e>
 801a71c:	6560      	str	r0, [r4, #84]	; 0x54
 801a71e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a720:	602f      	str	r7, [r5, #0]
 801a722:	2900      	cmp	r1, #0
 801a724:	d0c9      	beq.n	801a6ba <__sflush_r+0x1a>
 801a726:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a72a:	4299      	cmp	r1, r3
 801a72c:	d002      	beq.n	801a734 <__sflush_r+0x94>
 801a72e:	4628      	mov	r0, r5
 801a730:	f7fe fa5e 	bl	8018bf0 <_free_r>
 801a734:	2000      	movs	r0, #0
 801a736:	6360      	str	r0, [r4, #52]	; 0x34
 801a738:	e7c0      	b.n	801a6bc <__sflush_r+0x1c>
 801a73a:	2301      	movs	r3, #1
 801a73c:	4628      	mov	r0, r5
 801a73e:	47b0      	blx	r6
 801a740:	1c41      	adds	r1, r0, #1
 801a742:	d1c8      	bne.n	801a6d6 <__sflush_r+0x36>
 801a744:	682b      	ldr	r3, [r5, #0]
 801a746:	2b00      	cmp	r3, #0
 801a748:	d0c5      	beq.n	801a6d6 <__sflush_r+0x36>
 801a74a:	2b1d      	cmp	r3, #29
 801a74c:	d001      	beq.n	801a752 <__sflush_r+0xb2>
 801a74e:	2b16      	cmp	r3, #22
 801a750:	d101      	bne.n	801a756 <__sflush_r+0xb6>
 801a752:	602f      	str	r7, [r5, #0]
 801a754:	e7b1      	b.n	801a6ba <__sflush_r+0x1a>
 801a756:	89a3      	ldrh	r3, [r4, #12]
 801a758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a75c:	81a3      	strh	r3, [r4, #12]
 801a75e:	e7ad      	b.n	801a6bc <__sflush_r+0x1c>
 801a760:	690f      	ldr	r7, [r1, #16]
 801a762:	2f00      	cmp	r7, #0
 801a764:	d0a9      	beq.n	801a6ba <__sflush_r+0x1a>
 801a766:	0793      	lsls	r3, r2, #30
 801a768:	680e      	ldr	r6, [r1, #0]
 801a76a:	bf08      	it	eq
 801a76c:	694b      	ldreq	r3, [r1, #20]
 801a76e:	600f      	str	r7, [r1, #0]
 801a770:	bf18      	it	ne
 801a772:	2300      	movne	r3, #0
 801a774:	eba6 0807 	sub.w	r8, r6, r7
 801a778:	608b      	str	r3, [r1, #8]
 801a77a:	f1b8 0f00 	cmp.w	r8, #0
 801a77e:	dd9c      	ble.n	801a6ba <__sflush_r+0x1a>
 801a780:	6a21      	ldr	r1, [r4, #32]
 801a782:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a784:	4643      	mov	r3, r8
 801a786:	463a      	mov	r2, r7
 801a788:	4628      	mov	r0, r5
 801a78a:	47b0      	blx	r6
 801a78c:	2800      	cmp	r0, #0
 801a78e:	dc06      	bgt.n	801a79e <__sflush_r+0xfe>
 801a790:	89a3      	ldrh	r3, [r4, #12]
 801a792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a796:	81a3      	strh	r3, [r4, #12]
 801a798:	f04f 30ff 	mov.w	r0, #4294967295
 801a79c:	e78e      	b.n	801a6bc <__sflush_r+0x1c>
 801a79e:	4407      	add	r7, r0
 801a7a0:	eba8 0800 	sub.w	r8, r8, r0
 801a7a4:	e7e9      	b.n	801a77a <__sflush_r+0xda>
 801a7a6:	bf00      	nop
 801a7a8:	dfbffffe 	.word	0xdfbffffe

0801a7ac <_fflush_r>:
 801a7ac:	b538      	push	{r3, r4, r5, lr}
 801a7ae:	690b      	ldr	r3, [r1, #16]
 801a7b0:	4605      	mov	r5, r0
 801a7b2:	460c      	mov	r4, r1
 801a7b4:	b913      	cbnz	r3, 801a7bc <_fflush_r+0x10>
 801a7b6:	2500      	movs	r5, #0
 801a7b8:	4628      	mov	r0, r5
 801a7ba:	bd38      	pop	{r3, r4, r5, pc}
 801a7bc:	b118      	cbz	r0, 801a7c6 <_fflush_r+0x1a>
 801a7be:	6a03      	ldr	r3, [r0, #32]
 801a7c0:	b90b      	cbnz	r3, 801a7c6 <_fflush_r+0x1a>
 801a7c2:	f7fd faf3 	bl	8017dac <__sinit>
 801a7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d0f3      	beq.n	801a7b6 <_fflush_r+0xa>
 801a7ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a7d0:	07d0      	lsls	r0, r2, #31
 801a7d2:	d404      	bmi.n	801a7de <_fflush_r+0x32>
 801a7d4:	0599      	lsls	r1, r3, #22
 801a7d6:	d402      	bmi.n	801a7de <_fflush_r+0x32>
 801a7d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a7da:	f7fd fbfe 	bl	8017fda <__retarget_lock_acquire_recursive>
 801a7de:	4628      	mov	r0, r5
 801a7e0:	4621      	mov	r1, r4
 801a7e2:	f7ff ff5d 	bl	801a6a0 <__sflush_r>
 801a7e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a7e8:	07da      	lsls	r2, r3, #31
 801a7ea:	4605      	mov	r5, r0
 801a7ec:	d4e4      	bmi.n	801a7b8 <_fflush_r+0xc>
 801a7ee:	89a3      	ldrh	r3, [r4, #12]
 801a7f0:	059b      	lsls	r3, r3, #22
 801a7f2:	d4e1      	bmi.n	801a7b8 <_fflush_r+0xc>
 801a7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a7f6:	f7fd fbf1 	bl	8017fdc <__retarget_lock_release_recursive>
 801a7fa:	e7dd      	b.n	801a7b8 <_fflush_r+0xc>

0801a7fc <memmove>:
 801a7fc:	4288      	cmp	r0, r1
 801a7fe:	b510      	push	{r4, lr}
 801a800:	eb01 0402 	add.w	r4, r1, r2
 801a804:	d902      	bls.n	801a80c <memmove+0x10>
 801a806:	4284      	cmp	r4, r0
 801a808:	4623      	mov	r3, r4
 801a80a:	d807      	bhi.n	801a81c <memmove+0x20>
 801a80c:	1e43      	subs	r3, r0, #1
 801a80e:	42a1      	cmp	r1, r4
 801a810:	d008      	beq.n	801a824 <memmove+0x28>
 801a812:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a816:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a81a:	e7f8      	b.n	801a80e <memmove+0x12>
 801a81c:	4402      	add	r2, r0
 801a81e:	4601      	mov	r1, r0
 801a820:	428a      	cmp	r2, r1
 801a822:	d100      	bne.n	801a826 <memmove+0x2a>
 801a824:	bd10      	pop	{r4, pc}
 801a826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a82a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a82e:	e7f7      	b.n	801a820 <memmove+0x24>

0801a830 <strncmp>:
 801a830:	b510      	push	{r4, lr}
 801a832:	b16a      	cbz	r2, 801a850 <strncmp+0x20>
 801a834:	3901      	subs	r1, #1
 801a836:	1884      	adds	r4, r0, r2
 801a838:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a83c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a840:	429a      	cmp	r2, r3
 801a842:	d103      	bne.n	801a84c <strncmp+0x1c>
 801a844:	42a0      	cmp	r0, r4
 801a846:	d001      	beq.n	801a84c <strncmp+0x1c>
 801a848:	2a00      	cmp	r2, #0
 801a84a:	d1f5      	bne.n	801a838 <strncmp+0x8>
 801a84c:	1ad0      	subs	r0, r2, r3
 801a84e:	bd10      	pop	{r4, pc}
 801a850:	4610      	mov	r0, r2
 801a852:	e7fc      	b.n	801a84e <strncmp+0x1e>

0801a854 <_sbrk_r>:
 801a854:	b538      	push	{r3, r4, r5, lr}
 801a856:	4d06      	ldr	r5, [pc, #24]	; (801a870 <_sbrk_r+0x1c>)
 801a858:	2300      	movs	r3, #0
 801a85a:	4604      	mov	r4, r0
 801a85c:	4608      	mov	r0, r1
 801a85e:	602b      	str	r3, [r5, #0]
 801a860:	f7e9 fe3e 	bl	80044e0 <_sbrk>
 801a864:	1c43      	adds	r3, r0, #1
 801a866:	d102      	bne.n	801a86e <_sbrk_r+0x1a>
 801a868:	682b      	ldr	r3, [r5, #0]
 801a86a:	b103      	cbz	r3, 801a86e <_sbrk_r+0x1a>
 801a86c:	6023      	str	r3, [r4, #0]
 801a86e:	bd38      	pop	{r3, r4, r5, pc}
 801a870:	24002ad4 	.word	0x24002ad4
 801a874:	00000000 	.word	0x00000000

0801a878 <nan>:
 801a878:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a880 <nan+0x8>
 801a87c:	4770      	bx	lr
 801a87e:	bf00      	nop
 801a880:	00000000 	.word	0x00000000
 801a884:	7ff80000 	.word	0x7ff80000

0801a888 <__assert_func>:
 801a888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a88a:	4614      	mov	r4, r2
 801a88c:	461a      	mov	r2, r3
 801a88e:	4b09      	ldr	r3, [pc, #36]	; (801a8b4 <__assert_func+0x2c>)
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	4605      	mov	r5, r0
 801a894:	68d8      	ldr	r0, [r3, #12]
 801a896:	b14c      	cbz	r4, 801a8ac <__assert_func+0x24>
 801a898:	4b07      	ldr	r3, [pc, #28]	; (801a8b8 <__assert_func+0x30>)
 801a89a:	9100      	str	r1, [sp, #0]
 801a89c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a8a0:	4906      	ldr	r1, [pc, #24]	; (801a8bc <__assert_func+0x34>)
 801a8a2:	462b      	mov	r3, r5
 801a8a4:	f000 fbca 	bl	801b03c <fiprintf>
 801a8a8:	f000 fbda 	bl	801b060 <abort>
 801a8ac:	4b04      	ldr	r3, [pc, #16]	; (801a8c0 <__assert_func+0x38>)
 801a8ae:	461c      	mov	r4, r3
 801a8b0:	e7f3      	b.n	801a89a <__assert_func+0x12>
 801a8b2:	bf00      	nop
 801a8b4:	24000158 	.word	0x24000158
 801a8b8:	0801cb82 	.word	0x0801cb82
 801a8bc:	0801cb8f 	.word	0x0801cb8f
 801a8c0:	0801cbbd 	.word	0x0801cbbd

0801a8c4 <_calloc_r>:
 801a8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a8c6:	fba1 2402 	umull	r2, r4, r1, r2
 801a8ca:	b94c      	cbnz	r4, 801a8e0 <_calloc_r+0x1c>
 801a8cc:	4611      	mov	r1, r2
 801a8ce:	9201      	str	r2, [sp, #4]
 801a8d0:	f7fe fa02 	bl	8018cd8 <_malloc_r>
 801a8d4:	9a01      	ldr	r2, [sp, #4]
 801a8d6:	4605      	mov	r5, r0
 801a8d8:	b930      	cbnz	r0, 801a8e8 <_calloc_r+0x24>
 801a8da:	4628      	mov	r0, r5
 801a8dc:	b003      	add	sp, #12
 801a8de:	bd30      	pop	{r4, r5, pc}
 801a8e0:	220c      	movs	r2, #12
 801a8e2:	6002      	str	r2, [r0, #0]
 801a8e4:	2500      	movs	r5, #0
 801a8e6:	e7f8      	b.n	801a8da <_calloc_r+0x16>
 801a8e8:	4621      	mov	r1, r4
 801a8ea:	f7fd faf8 	bl	8017ede <memset>
 801a8ee:	e7f4      	b.n	801a8da <_calloc_r+0x16>

0801a8f0 <rshift>:
 801a8f0:	6903      	ldr	r3, [r0, #16]
 801a8f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a8f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a8fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a8fe:	f100 0414 	add.w	r4, r0, #20
 801a902:	dd45      	ble.n	801a990 <rshift+0xa0>
 801a904:	f011 011f 	ands.w	r1, r1, #31
 801a908:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a90c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a910:	d10c      	bne.n	801a92c <rshift+0x3c>
 801a912:	f100 0710 	add.w	r7, r0, #16
 801a916:	4629      	mov	r1, r5
 801a918:	42b1      	cmp	r1, r6
 801a91a:	d334      	bcc.n	801a986 <rshift+0x96>
 801a91c:	1a9b      	subs	r3, r3, r2
 801a91e:	009b      	lsls	r3, r3, #2
 801a920:	1eea      	subs	r2, r5, #3
 801a922:	4296      	cmp	r6, r2
 801a924:	bf38      	it	cc
 801a926:	2300      	movcc	r3, #0
 801a928:	4423      	add	r3, r4
 801a92a:	e015      	b.n	801a958 <rshift+0x68>
 801a92c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a930:	f1c1 0820 	rsb	r8, r1, #32
 801a934:	40cf      	lsrs	r7, r1
 801a936:	f105 0e04 	add.w	lr, r5, #4
 801a93a:	46a1      	mov	r9, r4
 801a93c:	4576      	cmp	r6, lr
 801a93e:	46f4      	mov	ip, lr
 801a940:	d815      	bhi.n	801a96e <rshift+0x7e>
 801a942:	1a9a      	subs	r2, r3, r2
 801a944:	0092      	lsls	r2, r2, #2
 801a946:	3a04      	subs	r2, #4
 801a948:	3501      	adds	r5, #1
 801a94a:	42ae      	cmp	r6, r5
 801a94c:	bf38      	it	cc
 801a94e:	2200      	movcc	r2, #0
 801a950:	18a3      	adds	r3, r4, r2
 801a952:	50a7      	str	r7, [r4, r2]
 801a954:	b107      	cbz	r7, 801a958 <rshift+0x68>
 801a956:	3304      	adds	r3, #4
 801a958:	1b1a      	subs	r2, r3, r4
 801a95a:	42a3      	cmp	r3, r4
 801a95c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a960:	bf08      	it	eq
 801a962:	2300      	moveq	r3, #0
 801a964:	6102      	str	r2, [r0, #16]
 801a966:	bf08      	it	eq
 801a968:	6143      	streq	r3, [r0, #20]
 801a96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a96e:	f8dc c000 	ldr.w	ip, [ip]
 801a972:	fa0c fc08 	lsl.w	ip, ip, r8
 801a976:	ea4c 0707 	orr.w	r7, ip, r7
 801a97a:	f849 7b04 	str.w	r7, [r9], #4
 801a97e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a982:	40cf      	lsrs	r7, r1
 801a984:	e7da      	b.n	801a93c <rshift+0x4c>
 801a986:	f851 cb04 	ldr.w	ip, [r1], #4
 801a98a:	f847 cf04 	str.w	ip, [r7, #4]!
 801a98e:	e7c3      	b.n	801a918 <rshift+0x28>
 801a990:	4623      	mov	r3, r4
 801a992:	e7e1      	b.n	801a958 <rshift+0x68>

0801a994 <__hexdig_fun>:
 801a994:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a998:	2b09      	cmp	r3, #9
 801a99a:	d802      	bhi.n	801a9a2 <__hexdig_fun+0xe>
 801a99c:	3820      	subs	r0, #32
 801a99e:	b2c0      	uxtb	r0, r0
 801a9a0:	4770      	bx	lr
 801a9a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a9a6:	2b05      	cmp	r3, #5
 801a9a8:	d801      	bhi.n	801a9ae <__hexdig_fun+0x1a>
 801a9aa:	3847      	subs	r0, #71	; 0x47
 801a9ac:	e7f7      	b.n	801a99e <__hexdig_fun+0xa>
 801a9ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a9b2:	2b05      	cmp	r3, #5
 801a9b4:	d801      	bhi.n	801a9ba <__hexdig_fun+0x26>
 801a9b6:	3827      	subs	r0, #39	; 0x27
 801a9b8:	e7f1      	b.n	801a99e <__hexdig_fun+0xa>
 801a9ba:	2000      	movs	r0, #0
 801a9bc:	4770      	bx	lr
	...

0801a9c0 <__gethex>:
 801a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9c4:	4617      	mov	r7, r2
 801a9c6:	680a      	ldr	r2, [r1, #0]
 801a9c8:	b085      	sub	sp, #20
 801a9ca:	f102 0b02 	add.w	fp, r2, #2
 801a9ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a9d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a9d6:	4681      	mov	r9, r0
 801a9d8:	468a      	mov	sl, r1
 801a9da:	9302      	str	r3, [sp, #8]
 801a9dc:	32fe      	adds	r2, #254	; 0xfe
 801a9de:	eb02 030b 	add.w	r3, r2, fp
 801a9e2:	46d8      	mov	r8, fp
 801a9e4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801a9e8:	9301      	str	r3, [sp, #4]
 801a9ea:	2830      	cmp	r0, #48	; 0x30
 801a9ec:	d0f7      	beq.n	801a9de <__gethex+0x1e>
 801a9ee:	f7ff ffd1 	bl	801a994 <__hexdig_fun>
 801a9f2:	4604      	mov	r4, r0
 801a9f4:	2800      	cmp	r0, #0
 801a9f6:	d138      	bne.n	801aa6a <__gethex+0xaa>
 801a9f8:	49a7      	ldr	r1, [pc, #668]	; (801ac98 <__gethex+0x2d8>)
 801a9fa:	2201      	movs	r2, #1
 801a9fc:	4640      	mov	r0, r8
 801a9fe:	f7ff ff17 	bl	801a830 <strncmp>
 801aa02:	4606      	mov	r6, r0
 801aa04:	2800      	cmp	r0, #0
 801aa06:	d169      	bne.n	801aadc <__gethex+0x11c>
 801aa08:	f898 0001 	ldrb.w	r0, [r8, #1]
 801aa0c:	465d      	mov	r5, fp
 801aa0e:	f7ff ffc1 	bl	801a994 <__hexdig_fun>
 801aa12:	2800      	cmp	r0, #0
 801aa14:	d064      	beq.n	801aae0 <__gethex+0x120>
 801aa16:	465a      	mov	r2, fp
 801aa18:	7810      	ldrb	r0, [r2, #0]
 801aa1a:	2830      	cmp	r0, #48	; 0x30
 801aa1c:	4690      	mov	r8, r2
 801aa1e:	f102 0201 	add.w	r2, r2, #1
 801aa22:	d0f9      	beq.n	801aa18 <__gethex+0x58>
 801aa24:	f7ff ffb6 	bl	801a994 <__hexdig_fun>
 801aa28:	2301      	movs	r3, #1
 801aa2a:	fab0 f480 	clz	r4, r0
 801aa2e:	0964      	lsrs	r4, r4, #5
 801aa30:	465e      	mov	r6, fp
 801aa32:	9301      	str	r3, [sp, #4]
 801aa34:	4642      	mov	r2, r8
 801aa36:	4615      	mov	r5, r2
 801aa38:	3201      	adds	r2, #1
 801aa3a:	7828      	ldrb	r0, [r5, #0]
 801aa3c:	f7ff ffaa 	bl	801a994 <__hexdig_fun>
 801aa40:	2800      	cmp	r0, #0
 801aa42:	d1f8      	bne.n	801aa36 <__gethex+0x76>
 801aa44:	4994      	ldr	r1, [pc, #592]	; (801ac98 <__gethex+0x2d8>)
 801aa46:	2201      	movs	r2, #1
 801aa48:	4628      	mov	r0, r5
 801aa4a:	f7ff fef1 	bl	801a830 <strncmp>
 801aa4e:	b978      	cbnz	r0, 801aa70 <__gethex+0xb0>
 801aa50:	b946      	cbnz	r6, 801aa64 <__gethex+0xa4>
 801aa52:	1c6e      	adds	r6, r5, #1
 801aa54:	4632      	mov	r2, r6
 801aa56:	4615      	mov	r5, r2
 801aa58:	3201      	adds	r2, #1
 801aa5a:	7828      	ldrb	r0, [r5, #0]
 801aa5c:	f7ff ff9a 	bl	801a994 <__hexdig_fun>
 801aa60:	2800      	cmp	r0, #0
 801aa62:	d1f8      	bne.n	801aa56 <__gethex+0x96>
 801aa64:	1b73      	subs	r3, r6, r5
 801aa66:	009e      	lsls	r6, r3, #2
 801aa68:	e004      	b.n	801aa74 <__gethex+0xb4>
 801aa6a:	2400      	movs	r4, #0
 801aa6c:	4626      	mov	r6, r4
 801aa6e:	e7e1      	b.n	801aa34 <__gethex+0x74>
 801aa70:	2e00      	cmp	r6, #0
 801aa72:	d1f7      	bne.n	801aa64 <__gethex+0xa4>
 801aa74:	782b      	ldrb	r3, [r5, #0]
 801aa76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801aa7a:	2b50      	cmp	r3, #80	; 0x50
 801aa7c:	d13d      	bne.n	801aafa <__gethex+0x13a>
 801aa7e:	786b      	ldrb	r3, [r5, #1]
 801aa80:	2b2b      	cmp	r3, #43	; 0x2b
 801aa82:	d02f      	beq.n	801aae4 <__gethex+0x124>
 801aa84:	2b2d      	cmp	r3, #45	; 0x2d
 801aa86:	d031      	beq.n	801aaec <__gethex+0x12c>
 801aa88:	1c69      	adds	r1, r5, #1
 801aa8a:	f04f 0b00 	mov.w	fp, #0
 801aa8e:	7808      	ldrb	r0, [r1, #0]
 801aa90:	f7ff ff80 	bl	801a994 <__hexdig_fun>
 801aa94:	1e42      	subs	r2, r0, #1
 801aa96:	b2d2      	uxtb	r2, r2
 801aa98:	2a18      	cmp	r2, #24
 801aa9a:	d82e      	bhi.n	801aafa <__gethex+0x13a>
 801aa9c:	f1a0 0210 	sub.w	r2, r0, #16
 801aaa0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801aaa4:	f7ff ff76 	bl	801a994 <__hexdig_fun>
 801aaa8:	f100 3cff 	add.w	ip, r0, #4294967295
 801aaac:	fa5f fc8c 	uxtb.w	ip, ip
 801aab0:	f1bc 0f18 	cmp.w	ip, #24
 801aab4:	d91d      	bls.n	801aaf2 <__gethex+0x132>
 801aab6:	f1bb 0f00 	cmp.w	fp, #0
 801aaba:	d000      	beq.n	801aabe <__gethex+0xfe>
 801aabc:	4252      	negs	r2, r2
 801aabe:	4416      	add	r6, r2
 801aac0:	f8ca 1000 	str.w	r1, [sl]
 801aac4:	b1dc      	cbz	r4, 801aafe <__gethex+0x13e>
 801aac6:	9b01      	ldr	r3, [sp, #4]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	bf14      	ite	ne
 801aacc:	f04f 0800 	movne.w	r8, #0
 801aad0:	f04f 0806 	moveq.w	r8, #6
 801aad4:	4640      	mov	r0, r8
 801aad6:	b005      	add	sp, #20
 801aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aadc:	4645      	mov	r5, r8
 801aade:	4626      	mov	r6, r4
 801aae0:	2401      	movs	r4, #1
 801aae2:	e7c7      	b.n	801aa74 <__gethex+0xb4>
 801aae4:	f04f 0b00 	mov.w	fp, #0
 801aae8:	1ca9      	adds	r1, r5, #2
 801aaea:	e7d0      	b.n	801aa8e <__gethex+0xce>
 801aaec:	f04f 0b01 	mov.w	fp, #1
 801aaf0:	e7fa      	b.n	801aae8 <__gethex+0x128>
 801aaf2:	230a      	movs	r3, #10
 801aaf4:	fb03 0002 	mla	r0, r3, r2, r0
 801aaf8:	e7d0      	b.n	801aa9c <__gethex+0xdc>
 801aafa:	4629      	mov	r1, r5
 801aafc:	e7e0      	b.n	801aac0 <__gethex+0x100>
 801aafe:	eba5 0308 	sub.w	r3, r5, r8
 801ab02:	3b01      	subs	r3, #1
 801ab04:	4621      	mov	r1, r4
 801ab06:	2b07      	cmp	r3, #7
 801ab08:	dc0a      	bgt.n	801ab20 <__gethex+0x160>
 801ab0a:	4648      	mov	r0, r9
 801ab0c:	f7fe f970 	bl	8018df0 <_Balloc>
 801ab10:	4604      	mov	r4, r0
 801ab12:	b940      	cbnz	r0, 801ab26 <__gethex+0x166>
 801ab14:	4b61      	ldr	r3, [pc, #388]	; (801ac9c <__gethex+0x2dc>)
 801ab16:	4602      	mov	r2, r0
 801ab18:	21e4      	movs	r1, #228	; 0xe4
 801ab1a:	4861      	ldr	r0, [pc, #388]	; (801aca0 <__gethex+0x2e0>)
 801ab1c:	f7ff feb4 	bl	801a888 <__assert_func>
 801ab20:	3101      	adds	r1, #1
 801ab22:	105b      	asrs	r3, r3, #1
 801ab24:	e7ef      	b.n	801ab06 <__gethex+0x146>
 801ab26:	f100 0a14 	add.w	sl, r0, #20
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	495a      	ldr	r1, [pc, #360]	; (801ac98 <__gethex+0x2d8>)
 801ab2e:	f8cd a004 	str.w	sl, [sp, #4]
 801ab32:	469b      	mov	fp, r3
 801ab34:	45a8      	cmp	r8, r5
 801ab36:	d342      	bcc.n	801abbe <__gethex+0x1fe>
 801ab38:	9801      	ldr	r0, [sp, #4]
 801ab3a:	f840 bb04 	str.w	fp, [r0], #4
 801ab3e:	eba0 000a 	sub.w	r0, r0, sl
 801ab42:	1080      	asrs	r0, r0, #2
 801ab44:	6120      	str	r0, [r4, #16]
 801ab46:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801ab4a:	4658      	mov	r0, fp
 801ab4c:	f7fe fa42 	bl	8018fd4 <__hi0bits>
 801ab50:	683d      	ldr	r5, [r7, #0]
 801ab52:	eba8 0000 	sub.w	r0, r8, r0
 801ab56:	42a8      	cmp	r0, r5
 801ab58:	dd59      	ble.n	801ac0e <__gethex+0x24e>
 801ab5a:	eba0 0805 	sub.w	r8, r0, r5
 801ab5e:	4641      	mov	r1, r8
 801ab60:	4620      	mov	r0, r4
 801ab62:	f7fe fdce 	bl	8019702 <__any_on>
 801ab66:	4683      	mov	fp, r0
 801ab68:	b1b8      	cbz	r0, 801ab9a <__gethex+0x1da>
 801ab6a:	f108 33ff 	add.w	r3, r8, #4294967295
 801ab6e:	1159      	asrs	r1, r3, #5
 801ab70:	f003 021f 	and.w	r2, r3, #31
 801ab74:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801ab78:	f04f 0b01 	mov.w	fp, #1
 801ab7c:	fa0b f202 	lsl.w	r2, fp, r2
 801ab80:	420a      	tst	r2, r1
 801ab82:	d00a      	beq.n	801ab9a <__gethex+0x1da>
 801ab84:	455b      	cmp	r3, fp
 801ab86:	dd06      	ble.n	801ab96 <__gethex+0x1d6>
 801ab88:	f1a8 0102 	sub.w	r1, r8, #2
 801ab8c:	4620      	mov	r0, r4
 801ab8e:	f7fe fdb8 	bl	8019702 <__any_on>
 801ab92:	2800      	cmp	r0, #0
 801ab94:	d138      	bne.n	801ac08 <__gethex+0x248>
 801ab96:	f04f 0b02 	mov.w	fp, #2
 801ab9a:	4641      	mov	r1, r8
 801ab9c:	4620      	mov	r0, r4
 801ab9e:	f7ff fea7 	bl	801a8f0 <rshift>
 801aba2:	4446      	add	r6, r8
 801aba4:	68bb      	ldr	r3, [r7, #8]
 801aba6:	42b3      	cmp	r3, r6
 801aba8:	da41      	bge.n	801ac2e <__gethex+0x26e>
 801abaa:	4621      	mov	r1, r4
 801abac:	4648      	mov	r0, r9
 801abae:	f7fe f95f 	bl	8018e70 <_Bfree>
 801abb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801abb4:	2300      	movs	r3, #0
 801abb6:	6013      	str	r3, [r2, #0]
 801abb8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801abbc:	e78a      	b.n	801aad4 <__gethex+0x114>
 801abbe:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801abc2:	2a2e      	cmp	r2, #46	; 0x2e
 801abc4:	d014      	beq.n	801abf0 <__gethex+0x230>
 801abc6:	2b20      	cmp	r3, #32
 801abc8:	d106      	bne.n	801abd8 <__gethex+0x218>
 801abca:	9b01      	ldr	r3, [sp, #4]
 801abcc:	f843 bb04 	str.w	fp, [r3], #4
 801abd0:	f04f 0b00 	mov.w	fp, #0
 801abd4:	9301      	str	r3, [sp, #4]
 801abd6:	465b      	mov	r3, fp
 801abd8:	7828      	ldrb	r0, [r5, #0]
 801abda:	9303      	str	r3, [sp, #12]
 801abdc:	f7ff feda 	bl	801a994 <__hexdig_fun>
 801abe0:	9b03      	ldr	r3, [sp, #12]
 801abe2:	f000 000f 	and.w	r0, r0, #15
 801abe6:	4098      	lsls	r0, r3
 801abe8:	ea4b 0b00 	orr.w	fp, fp, r0
 801abec:	3304      	adds	r3, #4
 801abee:	e7a1      	b.n	801ab34 <__gethex+0x174>
 801abf0:	45a8      	cmp	r8, r5
 801abf2:	d8e8      	bhi.n	801abc6 <__gethex+0x206>
 801abf4:	2201      	movs	r2, #1
 801abf6:	4628      	mov	r0, r5
 801abf8:	9303      	str	r3, [sp, #12]
 801abfa:	f7ff fe19 	bl	801a830 <strncmp>
 801abfe:	4926      	ldr	r1, [pc, #152]	; (801ac98 <__gethex+0x2d8>)
 801ac00:	9b03      	ldr	r3, [sp, #12]
 801ac02:	2800      	cmp	r0, #0
 801ac04:	d1df      	bne.n	801abc6 <__gethex+0x206>
 801ac06:	e795      	b.n	801ab34 <__gethex+0x174>
 801ac08:	f04f 0b03 	mov.w	fp, #3
 801ac0c:	e7c5      	b.n	801ab9a <__gethex+0x1da>
 801ac0e:	da0b      	bge.n	801ac28 <__gethex+0x268>
 801ac10:	eba5 0800 	sub.w	r8, r5, r0
 801ac14:	4621      	mov	r1, r4
 801ac16:	4642      	mov	r2, r8
 801ac18:	4648      	mov	r0, r9
 801ac1a:	f7fe fb43 	bl	80192a4 <__lshift>
 801ac1e:	eba6 0608 	sub.w	r6, r6, r8
 801ac22:	4604      	mov	r4, r0
 801ac24:	f100 0a14 	add.w	sl, r0, #20
 801ac28:	f04f 0b00 	mov.w	fp, #0
 801ac2c:	e7ba      	b.n	801aba4 <__gethex+0x1e4>
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	42b3      	cmp	r3, r6
 801ac32:	dd73      	ble.n	801ad1c <__gethex+0x35c>
 801ac34:	1b9e      	subs	r6, r3, r6
 801ac36:	42b5      	cmp	r5, r6
 801ac38:	dc34      	bgt.n	801aca4 <__gethex+0x2e4>
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	2b02      	cmp	r3, #2
 801ac3e:	d023      	beq.n	801ac88 <__gethex+0x2c8>
 801ac40:	2b03      	cmp	r3, #3
 801ac42:	d025      	beq.n	801ac90 <__gethex+0x2d0>
 801ac44:	2b01      	cmp	r3, #1
 801ac46:	d115      	bne.n	801ac74 <__gethex+0x2b4>
 801ac48:	42b5      	cmp	r5, r6
 801ac4a:	d113      	bne.n	801ac74 <__gethex+0x2b4>
 801ac4c:	2d01      	cmp	r5, #1
 801ac4e:	d10b      	bne.n	801ac68 <__gethex+0x2a8>
 801ac50:	9a02      	ldr	r2, [sp, #8]
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	6013      	str	r3, [r2, #0]
 801ac56:	2301      	movs	r3, #1
 801ac58:	6123      	str	r3, [r4, #16]
 801ac5a:	f8ca 3000 	str.w	r3, [sl]
 801ac5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac60:	f04f 0862 	mov.w	r8, #98	; 0x62
 801ac64:	601c      	str	r4, [r3, #0]
 801ac66:	e735      	b.n	801aad4 <__gethex+0x114>
 801ac68:	1e69      	subs	r1, r5, #1
 801ac6a:	4620      	mov	r0, r4
 801ac6c:	f7fe fd49 	bl	8019702 <__any_on>
 801ac70:	2800      	cmp	r0, #0
 801ac72:	d1ed      	bne.n	801ac50 <__gethex+0x290>
 801ac74:	4621      	mov	r1, r4
 801ac76:	4648      	mov	r0, r9
 801ac78:	f7fe f8fa 	bl	8018e70 <_Bfree>
 801ac7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ac7e:	2300      	movs	r3, #0
 801ac80:	6013      	str	r3, [r2, #0]
 801ac82:	f04f 0850 	mov.w	r8, #80	; 0x50
 801ac86:	e725      	b.n	801aad4 <__gethex+0x114>
 801ac88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d1f2      	bne.n	801ac74 <__gethex+0x2b4>
 801ac8e:	e7df      	b.n	801ac50 <__gethex+0x290>
 801ac90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d1dc      	bne.n	801ac50 <__gethex+0x290>
 801ac96:	e7ed      	b.n	801ac74 <__gethex+0x2b4>
 801ac98:	0801ca14 	.word	0x0801ca14
 801ac9c:	0801c8a9 	.word	0x0801c8a9
 801aca0:	0801cbbe 	.word	0x0801cbbe
 801aca4:	f106 38ff 	add.w	r8, r6, #4294967295
 801aca8:	f1bb 0f00 	cmp.w	fp, #0
 801acac:	d133      	bne.n	801ad16 <__gethex+0x356>
 801acae:	f1b8 0f00 	cmp.w	r8, #0
 801acb2:	d004      	beq.n	801acbe <__gethex+0x2fe>
 801acb4:	4641      	mov	r1, r8
 801acb6:	4620      	mov	r0, r4
 801acb8:	f7fe fd23 	bl	8019702 <__any_on>
 801acbc:	4683      	mov	fp, r0
 801acbe:	ea4f 1268 	mov.w	r2, r8, asr #5
 801acc2:	2301      	movs	r3, #1
 801acc4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801acc8:	f008 081f 	and.w	r8, r8, #31
 801accc:	fa03 f308 	lsl.w	r3, r3, r8
 801acd0:	4213      	tst	r3, r2
 801acd2:	4631      	mov	r1, r6
 801acd4:	4620      	mov	r0, r4
 801acd6:	bf18      	it	ne
 801acd8:	f04b 0b02 	orrne.w	fp, fp, #2
 801acdc:	1bad      	subs	r5, r5, r6
 801acde:	f7ff fe07 	bl	801a8f0 <rshift>
 801ace2:	687e      	ldr	r6, [r7, #4]
 801ace4:	f04f 0802 	mov.w	r8, #2
 801ace8:	f1bb 0f00 	cmp.w	fp, #0
 801acec:	d04a      	beq.n	801ad84 <__gethex+0x3c4>
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	2b02      	cmp	r3, #2
 801acf2:	d016      	beq.n	801ad22 <__gethex+0x362>
 801acf4:	2b03      	cmp	r3, #3
 801acf6:	d018      	beq.n	801ad2a <__gethex+0x36a>
 801acf8:	2b01      	cmp	r3, #1
 801acfa:	d109      	bne.n	801ad10 <__gethex+0x350>
 801acfc:	f01b 0f02 	tst.w	fp, #2
 801ad00:	d006      	beq.n	801ad10 <__gethex+0x350>
 801ad02:	f8da 3000 	ldr.w	r3, [sl]
 801ad06:	ea4b 0b03 	orr.w	fp, fp, r3
 801ad0a:	f01b 0f01 	tst.w	fp, #1
 801ad0e:	d10f      	bne.n	801ad30 <__gethex+0x370>
 801ad10:	f048 0810 	orr.w	r8, r8, #16
 801ad14:	e036      	b.n	801ad84 <__gethex+0x3c4>
 801ad16:	f04f 0b01 	mov.w	fp, #1
 801ad1a:	e7d0      	b.n	801acbe <__gethex+0x2fe>
 801ad1c:	f04f 0801 	mov.w	r8, #1
 801ad20:	e7e2      	b.n	801ace8 <__gethex+0x328>
 801ad22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad24:	f1c3 0301 	rsb	r3, r3, #1
 801ad28:	930f      	str	r3, [sp, #60]	; 0x3c
 801ad2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d0ef      	beq.n	801ad10 <__gethex+0x350>
 801ad30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ad34:	f104 0214 	add.w	r2, r4, #20
 801ad38:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801ad3c:	9301      	str	r3, [sp, #4]
 801ad3e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801ad42:	2300      	movs	r3, #0
 801ad44:	4694      	mov	ip, r2
 801ad46:	f852 1b04 	ldr.w	r1, [r2], #4
 801ad4a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801ad4e:	d01e      	beq.n	801ad8e <__gethex+0x3ce>
 801ad50:	3101      	adds	r1, #1
 801ad52:	f8cc 1000 	str.w	r1, [ip]
 801ad56:	f1b8 0f02 	cmp.w	r8, #2
 801ad5a:	f104 0214 	add.w	r2, r4, #20
 801ad5e:	d13d      	bne.n	801addc <__gethex+0x41c>
 801ad60:	683b      	ldr	r3, [r7, #0]
 801ad62:	3b01      	subs	r3, #1
 801ad64:	42ab      	cmp	r3, r5
 801ad66:	d10b      	bne.n	801ad80 <__gethex+0x3c0>
 801ad68:	1169      	asrs	r1, r5, #5
 801ad6a:	2301      	movs	r3, #1
 801ad6c:	f005 051f 	and.w	r5, r5, #31
 801ad70:	fa03 f505 	lsl.w	r5, r3, r5
 801ad74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ad78:	421d      	tst	r5, r3
 801ad7a:	bf18      	it	ne
 801ad7c:	f04f 0801 	movne.w	r8, #1
 801ad80:	f048 0820 	orr.w	r8, r8, #32
 801ad84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad86:	601c      	str	r4, [r3, #0]
 801ad88:	9b02      	ldr	r3, [sp, #8]
 801ad8a:	601e      	str	r6, [r3, #0]
 801ad8c:	e6a2      	b.n	801aad4 <__gethex+0x114>
 801ad8e:	4290      	cmp	r0, r2
 801ad90:	f842 3c04 	str.w	r3, [r2, #-4]
 801ad94:	d8d6      	bhi.n	801ad44 <__gethex+0x384>
 801ad96:	68a2      	ldr	r2, [r4, #8]
 801ad98:	4593      	cmp	fp, r2
 801ad9a:	db17      	blt.n	801adcc <__gethex+0x40c>
 801ad9c:	6861      	ldr	r1, [r4, #4]
 801ad9e:	4648      	mov	r0, r9
 801ada0:	3101      	adds	r1, #1
 801ada2:	f7fe f825 	bl	8018df0 <_Balloc>
 801ada6:	4682      	mov	sl, r0
 801ada8:	b918      	cbnz	r0, 801adb2 <__gethex+0x3f2>
 801adaa:	4b1b      	ldr	r3, [pc, #108]	; (801ae18 <__gethex+0x458>)
 801adac:	4602      	mov	r2, r0
 801adae:	2184      	movs	r1, #132	; 0x84
 801adb0:	e6b3      	b.n	801ab1a <__gethex+0x15a>
 801adb2:	6922      	ldr	r2, [r4, #16]
 801adb4:	3202      	adds	r2, #2
 801adb6:	f104 010c 	add.w	r1, r4, #12
 801adba:	0092      	lsls	r2, r2, #2
 801adbc:	300c      	adds	r0, #12
 801adbe:	f7fd f90e 	bl	8017fde <memcpy>
 801adc2:	4621      	mov	r1, r4
 801adc4:	4648      	mov	r0, r9
 801adc6:	f7fe f853 	bl	8018e70 <_Bfree>
 801adca:	4654      	mov	r4, sl
 801adcc:	6922      	ldr	r2, [r4, #16]
 801adce:	1c51      	adds	r1, r2, #1
 801add0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801add4:	6121      	str	r1, [r4, #16]
 801add6:	2101      	movs	r1, #1
 801add8:	6151      	str	r1, [r2, #20]
 801adda:	e7bc      	b.n	801ad56 <__gethex+0x396>
 801addc:	6921      	ldr	r1, [r4, #16]
 801adde:	4559      	cmp	r1, fp
 801ade0:	dd0b      	ble.n	801adfa <__gethex+0x43a>
 801ade2:	2101      	movs	r1, #1
 801ade4:	4620      	mov	r0, r4
 801ade6:	f7ff fd83 	bl	801a8f0 <rshift>
 801adea:	68bb      	ldr	r3, [r7, #8]
 801adec:	3601      	adds	r6, #1
 801adee:	42b3      	cmp	r3, r6
 801adf0:	f6ff aedb 	blt.w	801abaa <__gethex+0x1ea>
 801adf4:	f04f 0801 	mov.w	r8, #1
 801adf8:	e7c2      	b.n	801ad80 <__gethex+0x3c0>
 801adfa:	f015 051f 	ands.w	r5, r5, #31
 801adfe:	d0f9      	beq.n	801adf4 <__gethex+0x434>
 801ae00:	9b01      	ldr	r3, [sp, #4]
 801ae02:	441a      	add	r2, r3
 801ae04:	f1c5 0520 	rsb	r5, r5, #32
 801ae08:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801ae0c:	f7fe f8e2 	bl	8018fd4 <__hi0bits>
 801ae10:	42a8      	cmp	r0, r5
 801ae12:	dbe6      	blt.n	801ade2 <__gethex+0x422>
 801ae14:	e7ee      	b.n	801adf4 <__gethex+0x434>
 801ae16:	bf00      	nop
 801ae18:	0801c8a9 	.word	0x0801c8a9

0801ae1c <L_shift>:
 801ae1c:	f1c2 0208 	rsb	r2, r2, #8
 801ae20:	0092      	lsls	r2, r2, #2
 801ae22:	b570      	push	{r4, r5, r6, lr}
 801ae24:	f1c2 0620 	rsb	r6, r2, #32
 801ae28:	6843      	ldr	r3, [r0, #4]
 801ae2a:	6804      	ldr	r4, [r0, #0]
 801ae2c:	fa03 f506 	lsl.w	r5, r3, r6
 801ae30:	432c      	orrs	r4, r5
 801ae32:	40d3      	lsrs	r3, r2
 801ae34:	6004      	str	r4, [r0, #0]
 801ae36:	f840 3f04 	str.w	r3, [r0, #4]!
 801ae3a:	4288      	cmp	r0, r1
 801ae3c:	d3f4      	bcc.n	801ae28 <L_shift+0xc>
 801ae3e:	bd70      	pop	{r4, r5, r6, pc}

0801ae40 <__match>:
 801ae40:	b530      	push	{r4, r5, lr}
 801ae42:	6803      	ldr	r3, [r0, #0]
 801ae44:	3301      	adds	r3, #1
 801ae46:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ae4a:	b914      	cbnz	r4, 801ae52 <__match+0x12>
 801ae4c:	6003      	str	r3, [r0, #0]
 801ae4e:	2001      	movs	r0, #1
 801ae50:	bd30      	pop	{r4, r5, pc}
 801ae52:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ae5a:	2d19      	cmp	r5, #25
 801ae5c:	bf98      	it	ls
 801ae5e:	3220      	addls	r2, #32
 801ae60:	42a2      	cmp	r2, r4
 801ae62:	d0f0      	beq.n	801ae46 <__match+0x6>
 801ae64:	2000      	movs	r0, #0
 801ae66:	e7f3      	b.n	801ae50 <__match+0x10>

0801ae68 <__hexnan>:
 801ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae6c:	680b      	ldr	r3, [r1, #0]
 801ae6e:	6801      	ldr	r1, [r0, #0]
 801ae70:	115e      	asrs	r6, r3, #5
 801ae72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ae76:	f013 031f 	ands.w	r3, r3, #31
 801ae7a:	b087      	sub	sp, #28
 801ae7c:	bf18      	it	ne
 801ae7e:	3604      	addne	r6, #4
 801ae80:	2500      	movs	r5, #0
 801ae82:	1f37      	subs	r7, r6, #4
 801ae84:	4682      	mov	sl, r0
 801ae86:	4690      	mov	r8, r2
 801ae88:	9301      	str	r3, [sp, #4]
 801ae8a:	f846 5c04 	str.w	r5, [r6, #-4]
 801ae8e:	46b9      	mov	r9, r7
 801ae90:	463c      	mov	r4, r7
 801ae92:	9502      	str	r5, [sp, #8]
 801ae94:	46ab      	mov	fp, r5
 801ae96:	784a      	ldrb	r2, [r1, #1]
 801ae98:	1c4b      	adds	r3, r1, #1
 801ae9a:	9303      	str	r3, [sp, #12]
 801ae9c:	b342      	cbz	r2, 801aef0 <__hexnan+0x88>
 801ae9e:	4610      	mov	r0, r2
 801aea0:	9105      	str	r1, [sp, #20]
 801aea2:	9204      	str	r2, [sp, #16]
 801aea4:	f7ff fd76 	bl	801a994 <__hexdig_fun>
 801aea8:	2800      	cmp	r0, #0
 801aeaa:	d14f      	bne.n	801af4c <__hexnan+0xe4>
 801aeac:	9a04      	ldr	r2, [sp, #16]
 801aeae:	9905      	ldr	r1, [sp, #20]
 801aeb0:	2a20      	cmp	r2, #32
 801aeb2:	d818      	bhi.n	801aee6 <__hexnan+0x7e>
 801aeb4:	9b02      	ldr	r3, [sp, #8]
 801aeb6:	459b      	cmp	fp, r3
 801aeb8:	dd13      	ble.n	801aee2 <__hexnan+0x7a>
 801aeba:	454c      	cmp	r4, r9
 801aebc:	d206      	bcs.n	801aecc <__hexnan+0x64>
 801aebe:	2d07      	cmp	r5, #7
 801aec0:	dc04      	bgt.n	801aecc <__hexnan+0x64>
 801aec2:	462a      	mov	r2, r5
 801aec4:	4649      	mov	r1, r9
 801aec6:	4620      	mov	r0, r4
 801aec8:	f7ff ffa8 	bl	801ae1c <L_shift>
 801aecc:	4544      	cmp	r4, r8
 801aece:	d950      	bls.n	801af72 <__hexnan+0x10a>
 801aed0:	2300      	movs	r3, #0
 801aed2:	f1a4 0904 	sub.w	r9, r4, #4
 801aed6:	f844 3c04 	str.w	r3, [r4, #-4]
 801aeda:	f8cd b008 	str.w	fp, [sp, #8]
 801aede:	464c      	mov	r4, r9
 801aee0:	461d      	mov	r5, r3
 801aee2:	9903      	ldr	r1, [sp, #12]
 801aee4:	e7d7      	b.n	801ae96 <__hexnan+0x2e>
 801aee6:	2a29      	cmp	r2, #41	; 0x29
 801aee8:	d155      	bne.n	801af96 <__hexnan+0x12e>
 801aeea:	3102      	adds	r1, #2
 801aeec:	f8ca 1000 	str.w	r1, [sl]
 801aef0:	f1bb 0f00 	cmp.w	fp, #0
 801aef4:	d04f      	beq.n	801af96 <__hexnan+0x12e>
 801aef6:	454c      	cmp	r4, r9
 801aef8:	d206      	bcs.n	801af08 <__hexnan+0xa0>
 801aefa:	2d07      	cmp	r5, #7
 801aefc:	dc04      	bgt.n	801af08 <__hexnan+0xa0>
 801aefe:	462a      	mov	r2, r5
 801af00:	4649      	mov	r1, r9
 801af02:	4620      	mov	r0, r4
 801af04:	f7ff ff8a 	bl	801ae1c <L_shift>
 801af08:	4544      	cmp	r4, r8
 801af0a:	d934      	bls.n	801af76 <__hexnan+0x10e>
 801af0c:	f1a8 0204 	sub.w	r2, r8, #4
 801af10:	4623      	mov	r3, r4
 801af12:	f853 1b04 	ldr.w	r1, [r3], #4
 801af16:	f842 1f04 	str.w	r1, [r2, #4]!
 801af1a:	429f      	cmp	r7, r3
 801af1c:	d2f9      	bcs.n	801af12 <__hexnan+0xaa>
 801af1e:	1b3b      	subs	r3, r7, r4
 801af20:	f023 0303 	bic.w	r3, r3, #3
 801af24:	3304      	adds	r3, #4
 801af26:	3e03      	subs	r6, #3
 801af28:	3401      	adds	r4, #1
 801af2a:	42a6      	cmp	r6, r4
 801af2c:	bf38      	it	cc
 801af2e:	2304      	movcc	r3, #4
 801af30:	4443      	add	r3, r8
 801af32:	2200      	movs	r2, #0
 801af34:	f843 2b04 	str.w	r2, [r3], #4
 801af38:	429f      	cmp	r7, r3
 801af3a:	d2fb      	bcs.n	801af34 <__hexnan+0xcc>
 801af3c:	683b      	ldr	r3, [r7, #0]
 801af3e:	b91b      	cbnz	r3, 801af48 <__hexnan+0xe0>
 801af40:	4547      	cmp	r7, r8
 801af42:	d126      	bne.n	801af92 <__hexnan+0x12a>
 801af44:	2301      	movs	r3, #1
 801af46:	603b      	str	r3, [r7, #0]
 801af48:	2005      	movs	r0, #5
 801af4a:	e025      	b.n	801af98 <__hexnan+0x130>
 801af4c:	3501      	adds	r5, #1
 801af4e:	2d08      	cmp	r5, #8
 801af50:	f10b 0b01 	add.w	fp, fp, #1
 801af54:	dd06      	ble.n	801af64 <__hexnan+0xfc>
 801af56:	4544      	cmp	r4, r8
 801af58:	d9c3      	bls.n	801aee2 <__hexnan+0x7a>
 801af5a:	2300      	movs	r3, #0
 801af5c:	f844 3c04 	str.w	r3, [r4, #-4]
 801af60:	2501      	movs	r5, #1
 801af62:	3c04      	subs	r4, #4
 801af64:	6822      	ldr	r2, [r4, #0]
 801af66:	f000 000f 	and.w	r0, r0, #15
 801af6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801af6e:	6020      	str	r0, [r4, #0]
 801af70:	e7b7      	b.n	801aee2 <__hexnan+0x7a>
 801af72:	2508      	movs	r5, #8
 801af74:	e7b5      	b.n	801aee2 <__hexnan+0x7a>
 801af76:	9b01      	ldr	r3, [sp, #4]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d0df      	beq.n	801af3c <__hexnan+0xd4>
 801af7c:	f1c3 0320 	rsb	r3, r3, #32
 801af80:	f04f 32ff 	mov.w	r2, #4294967295
 801af84:	40da      	lsrs	r2, r3
 801af86:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801af8a:	4013      	ands	r3, r2
 801af8c:	f846 3c04 	str.w	r3, [r6, #-4]
 801af90:	e7d4      	b.n	801af3c <__hexnan+0xd4>
 801af92:	3f04      	subs	r7, #4
 801af94:	e7d2      	b.n	801af3c <__hexnan+0xd4>
 801af96:	2004      	movs	r0, #4
 801af98:	b007      	add	sp, #28
 801af9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af9e <__ascii_mbtowc>:
 801af9e:	b082      	sub	sp, #8
 801afa0:	b901      	cbnz	r1, 801afa4 <__ascii_mbtowc+0x6>
 801afa2:	a901      	add	r1, sp, #4
 801afa4:	b142      	cbz	r2, 801afb8 <__ascii_mbtowc+0x1a>
 801afa6:	b14b      	cbz	r3, 801afbc <__ascii_mbtowc+0x1e>
 801afa8:	7813      	ldrb	r3, [r2, #0]
 801afaa:	600b      	str	r3, [r1, #0]
 801afac:	7812      	ldrb	r2, [r2, #0]
 801afae:	1e10      	subs	r0, r2, #0
 801afb0:	bf18      	it	ne
 801afb2:	2001      	movne	r0, #1
 801afb4:	b002      	add	sp, #8
 801afb6:	4770      	bx	lr
 801afb8:	4610      	mov	r0, r2
 801afba:	e7fb      	b.n	801afb4 <__ascii_mbtowc+0x16>
 801afbc:	f06f 0001 	mvn.w	r0, #1
 801afc0:	e7f8      	b.n	801afb4 <__ascii_mbtowc+0x16>

0801afc2 <_realloc_r>:
 801afc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afc6:	4680      	mov	r8, r0
 801afc8:	4614      	mov	r4, r2
 801afca:	460e      	mov	r6, r1
 801afcc:	b921      	cbnz	r1, 801afd8 <_realloc_r+0x16>
 801afce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801afd2:	4611      	mov	r1, r2
 801afd4:	f7fd be80 	b.w	8018cd8 <_malloc_r>
 801afd8:	b92a      	cbnz	r2, 801afe6 <_realloc_r+0x24>
 801afda:	f7fd fe09 	bl	8018bf0 <_free_r>
 801afde:	4625      	mov	r5, r4
 801afe0:	4628      	mov	r0, r5
 801afe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afe6:	f000 f842 	bl	801b06e <_malloc_usable_size_r>
 801afea:	4284      	cmp	r4, r0
 801afec:	4607      	mov	r7, r0
 801afee:	d802      	bhi.n	801aff6 <_realloc_r+0x34>
 801aff0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801aff4:	d812      	bhi.n	801b01c <_realloc_r+0x5a>
 801aff6:	4621      	mov	r1, r4
 801aff8:	4640      	mov	r0, r8
 801affa:	f7fd fe6d 	bl	8018cd8 <_malloc_r>
 801affe:	4605      	mov	r5, r0
 801b000:	2800      	cmp	r0, #0
 801b002:	d0ed      	beq.n	801afe0 <_realloc_r+0x1e>
 801b004:	42bc      	cmp	r4, r7
 801b006:	4622      	mov	r2, r4
 801b008:	4631      	mov	r1, r6
 801b00a:	bf28      	it	cs
 801b00c:	463a      	movcs	r2, r7
 801b00e:	f7fc ffe6 	bl	8017fde <memcpy>
 801b012:	4631      	mov	r1, r6
 801b014:	4640      	mov	r0, r8
 801b016:	f7fd fdeb 	bl	8018bf0 <_free_r>
 801b01a:	e7e1      	b.n	801afe0 <_realloc_r+0x1e>
 801b01c:	4635      	mov	r5, r6
 801b01e:	e7df      	b.n	801afe0 <_realloc_r+0x1e>

0801b020 <__ascii_wctomb>:
 801b020:	b149      	cbz	r1, 801b036 <__ascii_wctomb+0x16>
 801b022:	2aff      	cmp	r2, #255	; 0xff
 801b024:	bf85      	ittet	hi
 801b026:	238a      	movhi	r3, #138	; 0x8a
 801b028:	6003      	strhi	r3, [r0, #0]
 801b02a:	700a      	strbls	r2, [r1, #0]
 801b02c:	f04f 30ff 	movhi.w	r0, #4294967295
 801b030:	bf98      	it	ls
 801b032:	2001      	movls	r0, #1
 801b034:	4770      	bx	lr
 801b036:	4608      	mov	r0, r1
 801b038:	4770      	bx	lr
	...

0801b03c <fiprintf>:
 801b03c:	b40e      	push	{r1, r2, r3}
 801b03e:	b503      	push	{r0, r1, lr}
 801b040:	4601      	mov	r1, r0
 801b042:	ab03      	add	r3, sp, #12
 801b044:	4805      	ldr	r0, [pc, #20]	; (801b05c <fiprintf+0x20>)
 801b046:	f853 2b04 	ldr.w	r2, [r3], #4
 801b04a:	6800      	ldr	r0, [r0, #0]
 801b04c:	9301      	str	r3, [sp, #4]
 801b04e:	f000 f83f 	bl	801b0d0 <_vfiprintf_r>
 801b052:	b002      	add	sp, #8
 801b054:	f85d eb04 	ldr.w	lr, [sp], #4
 801b058:	b003      	add	sp, #12
 801b05a:	4770      	bx	lr
 801b05c:	24000158 	.word	0x24000158

0801b060 <abort>:
 801b060:	b508      	push	{r3, lr}
 801b062:	2006      	movs	r0, #6
 801b064:	f000 fa0c 	bl	801b480 <raise>
 801b068:	2001      	movs	r0, #1
 801b06a:	f7e9 f9c1 	bl	80043f0 <_exit>

0801b06e <_malloc_usable_size_r>:
 801b06e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b072:	1f18      	subs	r0, r3, #4
 801b074:	2b00      	cmp	r3, #0
 801b076:	bfbc      	itt	lt
 801b078:	580b      	ldrlt	r3, [r1, r0]
 801b07a:	18c0      	addlt	r0, r0, r3
 801b07c:	4770      	bx	lr

0801b07e <__sfputc_r>:
 801b07e:	6893      	ldr	r3, [r2, #8]
 801b080:	3b01      	subs	r3, #1
 801b082:	2b00      	cmp	r3, #0
 801b084:	b410      	push	{r4}
 801b086:	6093      	str	r3, [r2, #8]
 801b088:	da08      	bge.n	801b09c <__sfputc_r+0x1e>
 801b08a:	6994      	ldr	r4, [r2, #24]
 801b08c:	42a3      	cmp	r3, r4
 801b08e:	db01      	blt.n	801b094 <__sfputc_r+0x16>
 801b090:	290a      	cmp	r1, #10
 801b092:	d103      	bne.n	801b09c <__sfputc_r+0x1e>
 801b094:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b098:	f000 b934 	b.w	801b304 <__swbuf_r>
 801b09c:	6813      	ldr	r3, [r2, #0]
 801b09e:	1c58      	adds	r0, r3, #1
 801b0a0:	6010      	str	r0, [r2, #0]
 801b0a2:	7019      	strb	r1, [r3, #0]
 801b0a4:	4608      	mov	r0, r1
 801b0a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0aa:	4770      	bx	lr

0801b0ac <__sfputs_r>:
 801b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0ae:	4606      	mov	r6, r0
 801b0b0:	460f      	mov	r7, r1
 801b0b2:	4614      	mov	r4, r2
 801b0b4:	18d5      	adds	r5, r2, r3
 801b0b6:	42ac      	cmp	r4, r5
 801b0b8:	d101      	bne.n	801b0be <__sfputs_r+0x12>
 801b0ba:	2000      	movs	r0, #0
 801b0bc:	e007      	b.n	801b0ce <__sfputs_r+0x22>
 801b0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0c2:	463a      	mov	r2, r7
 801b0c4:	4630      	mov	r0, r6
 801b0c6:	f7ff ffda 	bl	801b07e <__sfputc_r>
 801b0ca:	1c43      	adds	r3, r0, #1
 801b0cc:	d1f3      	bne.n	801b0b6 <__sfputs_r+0xa>
 801b0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b0d0 <_vfiprintf_r>:
 801b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0d4:	460d      	mov	r5, r1
 801b0d6:	b09d      	sub	sp, #116	; 0x74
 801b0d8:	4614      	mov	r4, r2
 801b0da:	4698      	mov	r8, r3
 801b0dc:	4606      	mov	r6, r0
 801b0de:	b118      	cbz	r0, 801b0e8 <_vfiprintf_r+0x18>
 801b0e0:	6a03      	ldr	r3, [r0, #32]
 801b0e2:	b90b      	cbnz	r3, 801b0e8 <_vfiprintf_r+0x18>
 801b0e4:	f7fc fe62 	bl	8017dac <__sinit>
 801b0e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b0ea:	07d9      	lsls	r1, r3, #31
 801b0ec:	d405      	bmi.n	801b0fa <_vfiprintf_r+0x2a>
 801b0ee:	89ab      	ldrh	r3, [r5, #12]
 801b0f0:	059a      	lsls	r2, r3, #22
 801b0f2:	d402      	bmi.n	801b0fa <_vfiprintf_r+0x2a>
 801b0f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b0f6:	f7fc ff70 	bl	8017fda <__retarget_lock_acquire_recursive>
 801b0fa:	89ab      	ldrh	r3, [r5, #12]
 801b0fc:	071b      	lsls	r3, r3, #28
 801b0fe:	d501      	bpl.n	801b104 <_vfiprintf_r+0x34>
 801b100:	692b      	ldr	r3, [r5, #16]
 801b102:	b99b      	cbnz	r3, 801b12c <_vfiprintf_r+0x5c>
 801b104:	4629      	mov	r1, r5
 801b106:	4630      	mov	r0, r6
 801b108:	f000 f93a 	bl	801b380 <__swsetup_r>
 801b10c:	b170      	cbz	r0, 801b12c <_vfiprintf_r+0x5c>
 801b10e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b110:	07dc      	lsls	r4, r3, #31
 801b112:	d504      	bpl.n	801b11e <_vfiprintf_r+0x4e>
 801b114:	f04f 30ff 	mov.w	r0, #4294967295
 801b118:	b01d      	add	sp, #116	; 0x74
 801b11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b11e:	89ab      	ldrh	r3, [r5, #12]
 801b120:	0598      	lsls	r0, r3, #22
 801b122:	d4f7      	bmi.n	801b114 <_vfiprintf_r+0x44>
 801b124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b126:	f7fc ff59 	bl	8017fdc <__retarget_lock_release_recursive>
 801b12a:	e7f3      	b.n	801b114 <_vfiprintf_r+0x44>
 801b12c:	2300      	movs	r3, #0
 801b12e:	9309      	str	r3, [sp, #36]	; 0x24
 801b130:	2320      	movs	r3, #32
 801b132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b136:	f8cd 800c 	str.w	r8, [sp, #12]
 801b13a:	2330      	movs	r3, #48	; 0x30
 801b13c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b2f0 <_vfiprintf_r+0x220>
 801b140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b144:	f04f 0901 	mov.w	r9, #1
 801b148:	4623      	mov	r3, r4
 801b14a:	469a      	mov	sl, r3
 801b14c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b150:	b10a      	cbz	r2, 801b156 <_vfiprintf_r+0x86>
 801b152:	2a25      	cmp	r2, #37	; 0x25
 801b154:	d1f9      	bne.n	801b14a <_vfiprintf_r+0x7a>
 801b156:	ebba 0b04 	subs.w	fp, sl, r4
 801b15a:	d00b      	beq.n	801b174 <_vfiprintf_r+0xa4>
 801b15c:	465b      	mov	r3, fp
 801b15e:	4622      	mov	r2, r4
 801b160:	4629      	mov	r1, r5
 801b162:	4630      	mov	r0, r6
 801b164:	f7ff ffa2 	bl	801b0ac <__sfputs_r>
 801b168:	3001      	adds	r0, #1
 801b16a:	f000 80a9 	beq.w	801b2c0 <_vfiprintf_r+0x1f0>
 801b16e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b170:	445a      	add	r2, fp
 801b172:	9209      	str	r2, [sp, #36]	; 0x24
 801b174:	f89a 3000 	ldrb.w	r3, [sl]
 801b178:	2b00      	cmp	r3, #0
 801b17a:	f000 80a1 	beq.w	801b2c0 <_vfiprintf_r+0x1f0>
 801b17e:	2300      	movs	r3, #0
 801b180:	f04f 32ff 	mov.w	r2, #4294967295
 801b184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b188:	f10a 0a01 	add.w	sl, sl, #1
 801b18c:	9304      	str	r3, [sp, #16]
 801b18e:	9307      	str	r3, [sp, #28]
 801b190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b194:	931a      	str	r3, [sp, #104]	; 0x68
 801b196:	4654      	mov	r4, sl
 801b198:	2205      	movs	r2, #5
 801b19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b19e:	4854      	ldr	r0, [pc, #336]	; (801b2f0 <_vfiprintf_r+0x220>)
 801b1a0:	f7e5 f8b6 	bl	8000310 <memchr>
 801b1a4:	9a04      	ldr	r2, [sp, #16]
 801b1a6:	b9d8      	cbnz	r0, 801b1e0 <_vfiprintf_r+0x110>
 801b1a8:	06d1      	lsls	r1, r2, #27
 801b1aa:	bf44      	itt	mi
 801b1ac:	2320      	movmi	r3, #32
 801b1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b1b2:	0713      	lsls	r3, r2, #28
 801b1b4:	bf44      	itt	mi
 801b1b6:	232b      	movmi	r3, #43	; 0x2b
 801b1b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b1bc:	f89a 3000 	ldrb.w	r3, [sl]
 801b1c0:	2b2a      	cmp	r3, #42	; 0x2a
 801b1c2:	d015      	beq.n	801b1f0 <_vfiprintf_r+0x120>
 801b1c4:	9a07      	ldr	r2, [sp, #28]
 801b1c6:	4654      	mov	r4, sl
 801b1c8:	2000      	movs	r0, #0
 801b1ca:	f04f 0c0a 	mov.w	ip, #10
 801b1ce:	4621      	mov	r1, r4
 801b1d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b1d4:	3b30      	subs	r3, #48	; 0x30
 801b1d6:	2b09      	cmp	r3, #9
 801b1d8:	d94d      	bls.n	801b276 <_vfiprintf_r+0x1a6>
 801b1da:	b1b0      	cbz	r0, 801b20a <_vfiprintf_r+0x13a>
 801b1dc:	9207      	str	r2, [sp, #28]
 801b1de:	e014      	b.n	801b20a <_vfiprintf_r+0x13a>
 801b1e0:	eba0 0308 	sub.w	r3, r0, r8
 801b1e4:	fa09 f303 	lsl.w	r3, r9, r3
 801b1e8:	4313      	orrs	r3, r2
 801b1ea:	9304      	str	r3, [sp, #16]
 801b1ec:	46a2      	mov	sl, r4
 801b1ee:	e7d2      	b.n	801b196 <_vfiprintf_r+0xc6>
 801b1f0:	9b03      	ldr	r3, [sp, #12]
 801b1f2:	1d19      	adds	r1, r3, #4
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	9103      	str	r1, [sp, #12]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	bfbb      	ittet	lt
 801b1fc:	425b      	neglt	r3, r3
 801b1fe:	f042 0202 	orrlt.w	r2, r2, #2
 801b202:	9307      	strge	r3, [sp, #28]
 801b204:	9307      	strlt	r3, [sp, #28]
 801b206:	bfb8      	it	lt
 801b208:	9204      	strlt	r2, [sp, #16]
 801b20a:	7823      	ldrb	r3, [r4, #0]
 801b20c:	2b2e      	cmp	r3, #46	; 0x2e
 801b20e:	d10c      	bne.n	801b22a <_vfiprintf_r+0x15a>
 801b210:	7863      	ldrb	r3, [r4, #1]
 801b212:	2b2a      	cmp	r3, #42	; 0x2a
 801b214:	d134      	bne.n	801b280 <_vfiprintf_r+0x1b0>
 801b216:	9b03      	ldr	r3, [sp, #12]
 801b218:	1d1a      	adds	r2, r3, #4
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	9203      	str	r2, [sp, #12]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	bfb8      	it	lt
 801b222:	f04f 33ff 	movlt.w	r3, #4294967295
 801b226:	3402      	adds	r4, #2
 801b228:	9305      	str	r3, [sp, #20]
 801b22a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b300 <_vfiprintf_r+0x230>
 801b22e:	7821      	ldrb	r1, [r4, #0]
 801b230:	2203      	movs	r2, #3
 801b232:	4650      	mov	r0, sl
 801b234:	f7e5 f86c 	bl	8000310 <memchr>
 801b238:	b138      	cbz	r0, 801b24a <_vfiprintf_r+0x17a>
 801b23a:	9b04      	ldr	r3, [sp, #16]
 801b23c:	eba0 000a 	sub.w	r0, r0, sl
 801b240:	2240      	movs	r2, #64	; 0x40
 801b242:	4082      	lsls	r2, r0
 801b244:	4313      	orrs	r3, r2
 801b246:	3401      	adds	r4, #1
 801b248:	9304      	str	r3, [sp, #16]
 801b24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b24e:	4829      	ldr	r0, [pc, #164]	; (801b2f4 <_vfiprintf_r+0x224>)
 801b250:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b254:	2206      	movs	r2, #6
 801b256:	f7e5 f85b 	bl	8000310 <memchr>
 801b25a:	2800      	cmp	r0, #0
 801b25c:	d03f      	beq.n	801b2de <_vfiprintf_r+0x20e>
 801b25e:	4b26      	ldr	r3, [pc, #152]	; (801b2f8 <_vfiprintf_r+0x228>)
 801b260:	bb1b      	cbnz	r3, 801b2aa <_vfiprintf_r+0x1da>
 801b262:	9b03      	ldr	r3, [sp, #12]
 801b264:	3307      	adds	r3, #7
 801b266:	f023 0307 	bic.w	r3, r3, #7
 801b26a:	3308      	adds	r3, #8
 801b26c:	9303      	str	r3, [sp, #12]
 801b26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b270:	443b      	add	r3, r7
 801b272:	9309      	str	r3, [sp, #36]	; 0x24
 801b274:	e768      	b.n	801b148 <_vfiprintf_r+0x78>
 801b276:	fb0c 3202 	mla	r2, ip, r2, r3
 801b27a:	460c      	mov	r4, r1
 801b27c:	2001      	movs	r0, #1
 801b27e:	e7a6      	b.n	801b1ce <_vfiprintf_r+0xfe>
 801b280:	2300      	movs	r3, #0
 801b282:	3401      	adds	r4, #1
 801b284:	9305      	str	r3, [sp, #20]
 801b286:	4619      	mov	r1, r3
 801b288:	f04f 0c0a 	mov.w	ip, #10
 801b28c:	4620      	mov	r0, r4
 801b28e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b292:	3a30      	subs	r2, #48	; 0x30
 801b294:	2a09      	cmp	r2, #9
 801b296:	d903      	bls.n	801b2a0 <_vfiprintf_r+0x1d0>
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d0c6      	beq.n	801b22a <_vfiprintf_r+0x15a>
 801b29c:	9105      	str	r1, [sp, #20]
 801b29e:	e7c4      	b.n	801b22a <_vfiprintf_r+0x15a>
 801b2a0:	fb0c 2101 	mla	r1, ip, r1, r2
 801b2a4:	4604      	mov	r4, r0
 801b2a6:	2301      	movs	r3, #1
 801b2a8:	e7f0      	b.n	801b28c <_vfiprintf_r+0x1bc>
 801b2aa:	ab03      	add	r3, sp, #12
 801b2ac:	9300      	str	r3, [sp, #0]
 801b2ae:	462a      	mov	r2, r5
 801b2b0:	4b12      	ldr	r3, [pc, #72]	; (801b2fc <_vfiprintf_r+0x22c>)
 801b2b2:	a904      	add	r1, sp, #16
 801b2b4:	4630      	mov	r0, r6
 801b2b6:	f7fb ff3f 	bl	8017138 <_printf_float>
 801b2ba:	4607      	mov	r7, r0
 801b2bc:	1c78      	adds	r0, r7, #1
 801b2be:	d1d6      	bne.n	801b26e <_vfiprintf_r+0x19e>
 801b2c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b2c2:	07d9      	lsls	r1, r3, #31
 801b2c4:	d405      	bmi.n	801b2d2 <_vfiprintf_r+0x202>
 801b2c6:	89ab      	ldrh	r3, [r5, #12]
 801b2c8:	059a      	lsls	r2, r3, #22
 801b2ca:	d402      	bmi.n	801b2d2 <_vfiprintf_r+0x202>
 801b2cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b2ce:	f7fc fe85 	bl	8017fdc <__retarget_lock_release_recursive>
 801b2d2:	89ab      	ldrh	r3, [r5, #12]
 801b2d4:	065b      	lsls	r3, r3, #25
 801b2d6:	f53f af1d 	bmi.w	801b114 <_vfiprintf_r+0x44>
 801b2da:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b2dc:	e71c      	b.n	801b118 <_vfiprintf_r+0x48>
 801b2de:	ab03      	add	r3, sp, #12
 801b2e0:	9300      	str	r3, [sp, #0]
 801b2e2:	462a      	mov	r2, r5
 801b2e4:	4b05      	ldr	r3, [pc, #20]	; (801b2fc <_vfiprintf_r+0x22c>)
 801b2e6:	a904      	add	r1, sp, #16
 801b2e8:	4630      	mov	r0, r6
 801b2ea:	f7fc f9ad 	bl	8017648 <_printf_i>
 801b2ee:	e7e4      	b.n	801b2ba <_vfiprintf_r+0x1ea>
 801b2f0:	0801cb69 	.word	0x0801cb69
 801b2f4:	0801cb73 	.word	0x0801cb73
 801b2f8:	08017139 	.word	0x08017139
 801b2fc:	0801b0ad 	.word	0x0801b0ad
 801b300:	0801cb6f 	.word	0x0801cb6f

0801b304 <__swbuf_r>:
 801b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b306:	460e      	mov	r6, r1
 801b308:	4614      	mov	r4, r2
 801b30a:	4605      	mov	r5, r0
 801b30c:	b118      	cbz	r0, 801b316 <__swbuf_r+0x12>
 801b30e:	6a03      	ldr	r3, [r0, #32]
 801b310:	b90b      	cbnz	r3, 801b316 <__swbuf_r+0x12>
 801b312:	f7fc fd4b 	bl	8017dac <__sinit>
 801b316:	69a3      	ldr	r3, [r4, #24]
 801b318:	60a3      	str	r3, [r4, #8]
 801b31a:	89a3      	ldrh	r3, [r4, #12]
 801b31c:	071a      	lsls	r2, r3, #28
 801b31e:	d525      	bpl.n	801b36c <__swbuf_r+0x68>
 801b320:	6923      	ldr	r3, [r4, #16]
 801b322:	b31b      	cbz	r3, 801b36c <__swbuf_r+0x68>
 801b324:	6823      	ldr	r3, [r4, #0]
 801b326:	6922      	ldr	r2, [r4, #16]
 801b328:	1a98      	subs	r0, r3, r2
 801b32a:	6963      	ldr	r3, [r4, #20]
 801b32c:	b2f6      	uxtb	r6, r6
 801b32e:	4283      	cmp	r3, r0
 801b330:	4637      	mov	r7, r6
 801b332:	dc04      	bgt.n	801b33e <__swbuf_r+0x3a>
 801b334:	4621      	mov	r1, r4
 801b336:	4628      	mov	r0, r5
 801b338:	f7ff fa38 	bl	801a7ac <_fflush_r>
 801b33c:	b9e0      	cbnz	r0, 801b378 <__swbuf_r+0x74>
 801b33e:	68a3      	ldr	r3, [r4, #8]
 801b340:	3b01      	subs	r3, #1
 801b342:	60a3      	str	r3, [r4, #8]
 801b344:	6823      	ldr	r3, [r4, #0]
 801b346:	1c5a      	adds	r2, r3, #1
 801b348:	6022      	str	r2, [r4, #0]
 801b34a:	701e      	strb	r6, [r3, #0]
 801b34c:	6962      	ldr	r2, [r4, #20]
 801b34e:	1c43      	adds	r3, r0, #1
 801b350:	429a      	cmp	r2, r3
 801b352:	d004      	beq.n	801b35e <__swbuf_r+0x5a>
 801b354:	89a3      	ldrh	r3, [r4, #12]
 801b356:	07db      	lsls	r3, r3, #31
 801b358:	d506      	bpl.n	801b368 <__swbuf_r+0x64>
 801b35a:	2e0a      	cmp	r6, #10
 801b35c:	d104      	bne.n	801b368 <__swbuf_r+0x64>
 801b35e:	4621      	mov	r1, r4
 801b360:	4628      	mov	r0, r5
 801b362:	f7ff fa23 	bl	801a7ac <_fflush_r>
 801b366:	b938      	cbnz	r0, 801b378 <__swbuf_r+0x74>
 801b368:	4638      	mov	r0, r7
 801b36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b36c:	4621      	mov	r1, r4
 801b36e:	4628      	mov	r0, r5
 801b370:	f000 f806 	bl	801b380 <__swsetup_r>
 801b374:	2800      	cmp	r0, #0
 801b376:	d0d5      	beq.n	801b324 <__swbuf_r+0x20>
 801b378:	f04f 37ff 	mov.w	r7, #4294967295
 801b37c:	e7f4      	b.n	801b368 <__swbuf_r+0x64>
	...

0801b380 <__swsetup_r>:
 801b380:	b538      	push	{r3, r4, r5, lr}
 801b382:	4b2a      	ldr	r3, [pc, #168]	; (801b42c <__swsetup_r+0xac>)
 801b384:	4605      	mov	r5, r0
 801b386:	6818      	ldr	r0, [r3, #0]
 801b388:	460c      	mov	r4, r1
 801b38a:	b118      	cbz	r0, 801b394 <__swsetup_r+0x14>
 801b38c:	6a03      	ldr	r3, [r0, #32]
 801b38e:	b90b      	cbnz	r3, 801b394 <__swsetup_r+0x14>
 801b390:	f7fc fd0c 	bl	8017dac <__sinit>
 801b394:	89a3      	ldrh	r3, [r4, #12]
 801b396:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b39a:	0718      	lsls	r0, r3, #28
 801b39c:	d422      	bmi.n	801b3e4 <__swsetup_r+0x64>
 801b39e:	06d9      	lsls	r1, r3, #27
 801b3a0:	d407      	bmi.n	801b3b2 <__swsetup_r+0x32>
 801b3a2:	2309      	movs	r3, #9
 801b3a4:	602b      	str	r3, [r5, #0]
 801b3a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b3aa:	81a3      	strh	r3, [r4, #12]
 801b3ac:	f04f 30ff 	mov.w	r0, #4294967295
 801b3b0:	e034      	b.n	801b41c <__swsetup_r+0x9c>
 801b3b2:	0758      	lsls	r0, r3, #29
 801b3b4:	d512      	bpl.n	801b3dc <__swsetup_r+0x5c>
 801b3b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b3b8:	b141      	cbz	r1, 801b3cc <__swsetup_r+0x4c>
 801b3ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b3be:	4299      	cmp	r1, r3
 801b3c0:	d002      	beq.n	801b3c8 <__swsetup_r+0x48>
 801b3c2:	4628      	mov	r0, r5
 801b3c4:	f7fd fc14 	bl	8018bf0 <_free_r>
 801b3c8:	2300      	movs	r3, #0
 801b3ca:	6363      	str	r3, [r4, #52]	; 0x34
 801b3cc:	89a3      	ldrh	r3, [r4, #12]
 801b3ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b3d2:	81a3      	strh	r3, [r4, #12]
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	6063      	str	r3, [r4, #4]
 801b3d8:	6923      	ldr	r3, [r4, #16]
 801b3da:	6023      	str	r3, [r4, #0]
 801b3dc:	89a3      	ldrh	r3, [r4, #12]
 801b3de:	f043 0308 	orr.w	r3, r3, #8
 801b3e2:	81a3      	strh	r3, [r4, #12]
 801b3e4:	6923      	ldr	r3, [r4, #16]
 801b3e6:	b94b      	cbnz	r3, 801b3fc <__swsetup_r+0x7c>
 801b3e8:	89a3      	ldrh	r3, [r4, #12]
 801b3ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b3ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b3f2:	d003      	beq.n	801b3fc <__swsetup_r+0x7c>
 801b3f4:	4621      	mov	r1, r4
 801b3f6:	4628      	mov	r0, r5
 801b3f8:	f000 f884 	bl	801b504 <__smakebuf_r>
 801b3fc:	89a0      	ldrh	r0, [r4, #12]
 801b3fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b402:	f010 0301 	ands.w	r3, r0, #1
 801b406:	d00a      	beq.n	801b41e <__swsetup_r+0x9e>
 801b408:	2300      	movs	r3, #0
 801b40a:	60a3      	str	r3, [r4, #8]
 801b40c:	6963      	ldr	r3, [r4, #20]
 801b40e:	425b      	negs	r3, r3
 801b410:	61a3      	str	r3, [r4, #24]
 801b412:	6923      	ldr	r3, [r4, #16]
 801b414:	b943      	cbnz	r3, 801b428 <__swsetup_r+0xa8>
 801b416:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b41a:	d1c4      	bne.n	801b3a6 <__swsetup_r+0x26>
 801b41c:	bd38      	pop	{r3, r4, r5, pc}
 801b41e:	0781      	lsls	r1, r0, #30
 801b420:	bf58      	it	pl
 801b422:	6963      	ldrpl	r3, [r4, #20]
 801b424:	60a3      	str	r3, [r4, #8]
 801b426:	e7f4      	b.n	801b412 <__swsetup_r+0x92>
 801b428:	2000      	movs	r0, #0
 801b42a:	e7f7      	b.n	801b41c <__swsetup_r+0x9c>
 801b42c:	24000158 	.word	0x24000158

0801b430 <_raise_r>:
 801b430:	291f      	cmp	r1, #31
 801b432:	b538      	push	{r3, r4, r5, lr}
 801b434:	4604      	mov	r4, r0
 801b436:	460d      	mov	r5, r1
 801b438:	d904      	bls.n	801b444 <_raise_r+0x14>
 801b43a:	2316      	movs	r3, #22
 801b43c:	6003      	str	r3, [r0, #0]
 801b43e:	f04f 30ff 	mov.w	r0, #4294967295
 801b442:	bd38      	pop	{r3, r4, r5, pc}
 801b444:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b446:	b112      	cbz	r2, 801b44e <_raise_r+0x1e>
 801b448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b44c:	b94b      	cbnz	r3, 801b462 <_raise_r+0x32>
 801b44e:	4620      	mov	r0, r4
 801b450:	f000 f830 	bl	801b4b4 <_getpid_r>
 801b454:	462a      	mov	r2, r5
 801b456:	4601      	mov	r1, r0
 801b458:	4620      	mov	r0, r4
 801b45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b45e:	f000 b817 	b.w	801b490 <_kill_r>
 801b462:	2b01      	cmp	r3, #1
 801b464:	d00a      	beq.n	801b47c <_raise_r+0x4c>
 801b466:	1c59      	adds	r1, r3, #1
 801b468:	d103      	bne.n	801b472 <_raise_r+0x42>
 801b46a:	2316      	movs	r3, #22
 801b46c:	6003      	str	r3, [r0, #0]
 801b46e:	2001      	movs	r0, #1
 801b470:	e7e7      	b.n	801b442 <_raise_r+0x12>
 801b472:	2400      	movs	r4, #0
 801b474:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b478:	4628      	mov	r0, r5
 801b47a:	4798      	blx	r3
 801b47c:	2000      	movs	r0, #0
 801b47e:	e7e0      	b.n	801b442 <_raise_r+0x12>

0801b480 <raise>:
 801b480:	4b02      	ldr	r3, [pc, #8]	; (801b48c <raise+0xc>)
 801b482:	4601      	mov	r1, r0
 801b484:	6818      	ldr	r0, [r3, #0]
 801b486:	f7ff bfd3 	b.w	801b430 <_raise_r>
 801b48a:	bf00      	nop
 801b48c:	24000158 	.word	0x24000158

0801b490 <_kill_r>:
 801b490:	b538      	push	{r3, r4, r5, lr}
 801b492:	4d07      	ldr	r5, [pc, #28]	; (801b4b0 <_kill_r+0x20>)
 801b494:	2300      	movs	r3, #0
 801b496:	4604      	mov	r4, r0
 801b498:	4608      	mov	r0, r1
 801b49a:	4611      	mov	r1, r2
 801b49c:	602b      	str	r3, [r5, #0]
 801b49e:	f7e8 ff97 	bl	80043d0 <_kill>
 801b4a2:	1c43      	adds	r3, r0, #1
 801b4a4:	d102      	bne.n	801b4ac <_kill_r+0x1c>
 801b4a6:	682b      	ldr	r3, [r5, #0]
 801b4a8:	b103      	cbz	r3, 801b4ac <_kill_r+0x1c>
 801b4aa:	6023      	str	r3, [r4, #0]
 801b4ac:	bd38      	pop	{r3, r4, r5, pc}
 801b4ae:	bf00      	nop
 801b4b0:	24002ad4 	.word	0x24002ad4

0801b4b4 <_getpid_r>:
 801b4b4:	f7e8 bf84 	b.w	80043c0 <_getpid>

0801b4b8 <__swhatbuf_r>:
 801b4b8:	b570      	push	{r4, r5, r6, lr}
 801b4ba:	460c      	mov	r4, r1
 801b4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4c0:	2900      	cmp	r1, #0
 801b4c2:	b096      	sub	sp, #88	; 0x58
 801b4c4:	4615      	mov	r5, r2
 801b4c6:	461e      	mov	r6, r3
 801b4c8:	da0d      	bge.n	801b4e6 <__swhatbuf_r+0x2e>
 801b4ca:	89a3      	ldrh	r3, [r4, #12]
 801b4cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b4d0:	f04f 0100 	mov.w	r1, #0
 801b4d4:	bf0c      	ite	eq
 801b4d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b4da:	2340      	movne	r3, #64	; 0x40
 801b4dc:	2000      	movs	r0, #0
 801b4de:	6031      	str	r1, [r6, #0]
 801b4e0:	602b      	str	r3, [r5, #0]
 801b4e2:	b016      	add	sp, #88	; 0x58
 801b4e4:	bd70      	pop	{r4, r5, r6, pc}
 801b4e6:	466a      	mov	r2, sp
 801b4e8:	f000 f848 	bl	801b57c <_fstat_r>
 801b4ec:	2800      	cmp	r0, #0
 801b4ee:	dbec      	blt.n	801b4ca <__swhatbuf_r+0x12>
 801b4f0:	9901      	ldr	r1, [sp, #4]
 801b4f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b4f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b4fa:	4259      	negs	r1, r3
 801b4fc:	4159      	adcs	r1, r3
 801b4fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b502:	e7eb      	b.n	801b4dc <__swhatbuf_r+0x24>

0801b504 <__smakebuf_r>:
 801b504:	898b      	ldrh	r3, [r1, #12]
 801b506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b508:	079d      	lsls	r5, r3, #30
 801b50a:	4606      	mov	r6, r0
 801b50c:	460c      	mov	r4, r1
 801b50e:	d507      	bpl.n	801b520 <__smakebuf_r+0x1c>
 801b510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b514:	6023      	str	r3, [r4, #0]
 801b516:	6123      	str	r3, [r4, #16]
 801b518:	2301      	movs	r3, #1
 801b51a:	6163      	str	r3, [r4, #20]
 801b51c:	b002      	add	sp, #8
 801b51e:	bd70      	pop	{r4, r5, r6, pc}
 801b520:	ab01      	add	r3, sp, #4
 801b522:	466a      	mov	r2, sp
 801b524:	f7ff ffc8 	bl	801b4b8 <__swhatbuf_r>
 801b528:	9900      	ldr	r1, [sp, #0]
 801b52a:	4605      	mov	r5, r0
 801b52c:	4630      	mov	r0, r6
 801b52e:	f7fd fbd3 	bl	8018cd8 <_malloc_r>
 801b532:	b948      	cbnz	r0, 801b548 <__smakebuf_r+0x44>
 801b534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b538:	059a      	lsls	r2, r3, #22
 801b53a:	d4ef      	bmi.n	801b51c <__smakebuf_r+0x18>
 801b53c:	f023 0303 	bic.w	r3, r3, #3
 801b540:	f043 0302 	orr.w	r3, r3, #2
 801b544:	81a3      	strh	r3, [r4, #12]
 801b546:	e7e3      	b.n	801b510 <__smakebuf_r+0xc>
 801b548:	89a3      	ldrh	r3, [r4, #12]
 801b54a:	6020      	str	r0, [r4, #0]
 801b54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b550:	81a3      	strh	r3, [r4, #12]
 801b552:	9b00      	ldr	r3, [sp, #0]
 801b554:	6163      	str	r3, [r4, #20]
 801b556:	9b01      	ldr	r3, [sp, #4]
 801b558:	6120      	str	r0, [r4, #16]
 801b55a:	b15b      	cbz	r3, 801b574 <__smakebuf_r+0x70>
 801b55c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b560:	4630      	mov	r0, r6
 801b562:	f000 f81d 	bl	801b5a0 <_isatty_r>
 801b566:	b128      	cbz	r0, 801b574 <__smakebuf_r+0x70>
 801b568:	89a3      	ldrh	r3, [r4, #12]
 801b56a:	f023 0303 	bic.w	r3, r3, #3
 801b56e:	f043 0301 	orr.w	r3, r3, #1
 801b572:	81a3      	strh	r3, [r4, #12]
 801b574:	89a3      	ldrh	r3, [r4, #12]
 801b576:	431d      	orrs	r5, r3
 801b578:	81a5      	strh	r5, [r4, #12]
 801b57a:	e7cf      	b.n	801b51c <__smakebuf_r+0x18>

0801b57c <_fstat_r>:
 801b57c:	b538      	push	{r3, r4, r5, lr}
 801b57e:	4d07      	ldr	r5, [pc, #28]	; (801b59c <_fstat_r+0x20>)
 801b580:	2300      	movs	r3, #0
 801b582:	4604      	mov	r4, r0
 801b584:	4608      	mov	r0, r1
 801b586:	4611      	mov	r1, r2
 801b588:	602b      	str	r3, [r5, #0]
 801b58a:	f7e8 ff80 	bl	800448e <_fstat>
 801b58e:	1c43      	adds	r3, r0, #1
 801b590:	d102      	bne.n	801b598 <_fstat_r+0x1c>
 801b592:	682b      	ldr	r3, [r5, #0]
 801b594:	b103      	cbz	r3, 801b598 <_fstat_r+0x1c>
 801b596:	6023      	str	r3, [r4, #0]
 801b598:	bd38      	pop	{r3, r4, r5, pc}
 801b59a:	bf00      	nop
 801b59c:	24002ad4 	.word	0x24002ad4

0801b5a0 <_isatty_r>:
 801b5a0:	b538      	push	{r3, r4, r5, lr}
 801b5a2:	4d06      	ldr	r5, [pc, #24]	; (801b5bc <_isatty_r+0x1c>)
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	4604      	mov	r4, r0
 801b5a8:	4608      	mov	r0, r1
 801b5aa:	602b      	str	r3, [r5, #0]
 801b5ac:	f7e8 ff7f 	bl	80044ae <_isatty>
 801b5b0:	1c43      	adds	r3, r0, #1
 801b5b2:	d102      	bne.n	801b5ba <_isatty_r+0x1a>
 801b5b4:	682b      	ldr	r3, [r5, #0]
 801b5b6:	b103      	cbz	r3, 801b5ba <_isatty_r+0x1a>
 801b5b8:	6023      	str	r3, [r4, #0]
 801b5ba:	bd38      	pop	{r3, r4, r5, pc}
 801b5bc:	24002ad4 	.word	0x24002ad4

0801b5c0 <acos>:
 801b5c0:	b508      	push	{r3, lr}
 801b5c2:	ed2d 8b04 	vpush	{d8-d9}
 801b5c6:	eeb0 8b40 	vmov.f64	d8, d0
 801b5ca:	f000 f9b1 	bl	801b930 <__ieee754_acos>
 801b5ce:	eeb4 8b48 	vcmp.f64	d8, d8
 801b5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5d6:	eeb0 9b40 	vmov.f64	d9, d0
 801b5da:	d615      	bvs.n	801b608 <acos+0x48>
 801b5dc:	eeb0 0b48 	vmov.f64	d0, d8
 801b5e0:	f000 f886 	bl	801b6f0 <fabs>
 801b5e4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801b5e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801b5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5f0:	dd0a      	ble.n	801b608 <acos+0x48>
 801b5f2:	f7fc fcc7 	bl	8017f84 <__errno>
 801b5f6:	ecbd 8b04 	vpop	{d8-d9}
 801b5fa:	2321      	movs	r3, #33	; 0x21
 801b5fc:	6003      	str	r3, [r0, #0]
 801b5fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b602:	4804      	ldr	r0, [pc, #16]	; (801b614 <acos+0x54>)
 801b604:	f7ff b938 	b.w	801a878 <nan>
 801b608:	eeb0 0b49 	vmov.f64	d0, d9
 801b60c:	ecbd 8b04 	vpop	{d8-d9}
 801b610:	bd08      	pop	{r3, pc}
 801b612:	bf00      	nop
 801b614:	0801cbbd 	.word	0x0801cbbd

0801b618 <sqrt>:
 801b618:	b508      	push	{r3, lr}
 801b61a:	ed2d 8b04 	vpush	{d8-d9}
 801b61e:	eeb0 8b40 	vmov.f64	d8, d0
 801b622:	f000 f8bd 	bl	801b7a0 <__ieee754_sqrt>
 801b626:	eeb4 8b48 	vcmp.f64	d8, d8
 801b62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b62e:	d60c      	bvs.n	801b64a <sqrt+0x32>
 801b630:	ed9f 9b07 	vldr	d9, [pc, #28]	; 801b650 <sqrt+0x38>
 801b634:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801b638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b63c:	d505      	bpl.n	801b64a <sqrt+0x32>
 801b63e:	f7fc fca1 	bl	8017f84 <__errno>
 801b642:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801b646:	2321      	movs	r3, #33	; 0x21
 801b648:	6003      	str	r3, [r0, #0]
 801b64a:	ecbd 8b04 	vpop	{d8-d9}
 801b64e:	bd08      	pop	{r3, pc}
	...

0801b658 <cos>:
 801b658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b65a:	eeb0 7b40 	vmov.f64	d7, d0
 801b65e:	ee17 3a90 	vmov	r3, s15
 801b662:	4a21      	ldr	r2, [pc, #132]	; (801b6e8 <cos+0x90>)
 801b664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b668:	4293      	cmp	r3, r2
 801b66a:	dc06      	bgt.n	801b67a <cos+0x22>
 801b66c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 801b6e0 <cos+0x88>
 801b670:	b005      	add	sp, #20
 801b672:	f85d eb04 	ldr.w	lr, [sp], #4
 801b676:	f000 b897 	b.w	801b7a8 <__kernel_cos>
 801b67a:	4a1c      	ldr	r2, [pc, #112]	; (801b6ec <cos+0x94>)
 801b67c:	4293      	cmp	r3, r2
 801b67e:	dd04      	ble.n	801b68a <cos+0x32>
 801b680:	ee30 0b40 	vsub.f64	d0, d0, d0
 801b684:	b005      	add	sp, #20
 801b686:	f85d fb04 	ldr.w	pc, [sp], #4
 801b68a:	4668      	mov	r0, sp
 801b68c:	f000 fa80 	bl	801bb90 <__ieee754_rem_pio2>
 801b690:	f000 0003 	and.w	r0, r0, #3
 801b694:	2801      	cmp	r0, #1
 801b696:	d009      	beq.n	801b6ac <cos+0x54>
 801b698:	2802      	cmp	r0, #2
 801b69a:	d010      	beq.n	801b6be <cos+0x66>
 801b69c:	b9b0      	cbnz	r0, 801b6cc <cos+0x74>
 801b69e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b6a2:	ed9d 0b00 	vldr	d0, [sp]
 801b6a6:	f000 f87f 	bl	801b7a8 <__kernel_cos>
 801b6aa:	e7eb      	b.n	801b684 <cos+0x2c>
 801b6ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b6b0:	ed9d 0b00 	vldr	d0, [sp]
 801b6b4:	f000 f8e4 	bl	801b880 <__kernel_sin>
 801b6b8:	eeb1 0b40 	vneg.f64	d0, d0
 801b6bc:	e7e2      	b.n	801b684 <cos+0x2c>
 801b6be:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b6c2:	ed9d 0b00 	vldr	d0, [sp]
 801b6c6:	f000 f86f 	bl	801b7a8 <__kernel_cos>
 801b6ca:	e7f5      	b.n	801b6b8 <cos+0x60>
 801b6cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b6d0:	ed9d 0b00 	vldr	d0, [sp]
 801b6d4:	2001      	movs	r0, #1
 801b6d6:	f000 f8d3 	bl	801b880 <__kernel_sin>
 801b6da:	e7d3      	b.n	801b684 <cos+0x2c>
 801b6dc:	f3af 8000 	nop.w
	...
 801b6e8:	3fe921fb 	.word	0x3fe921fb
 801b6ec:	7fefffff 	.word	0x7fefffff

0801b6f0 <fabs>:
 801b6f0:	ec51 0b10 	vmov	r0, r1, d0
 801b6f4:	ee10 2a10 	vmov	r2, s0
 801b6f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b6fc:	ec43 2b10 	vmov	d0, r2, r3
 801b700:	4770      	bx	lr
 801b702:	0000      	movs	r0, r0
 801b704:	0000      	movs	r0, r0
	...

0801b708 <sin>:
 801b708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b70a:	eeb0 7b40 	vmov.f64	d7, d0
 801b70e:	ee17 3a90 	vmov	r3, s15
 801b712:	4a21      	ldr	r2, [pc, #132]	; (801b798 <sin+0x90>)
 801b714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b718:	4293      	cmp	r3, r2
 801b71a:	dc07      	bgt.n	801b72c <sin+0x24>
 801b71c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 801b790 <sin+0x88>
 801b720:	2000      	movs	r0, #0
 801b722:	b005      	add	sp, #20
 801b724:	f85d eb04 	ldr.w	lr, [sp], #4
 801b728:	f000 b8aa 	b.w	801b880 <__kernel_sin>
 801b72c:	4a1b      	ldr	r2, [pc, #108]	; (801b79c <sin+0x94>)
 801b72e:	4293      	cmp	r3, r2
 801b730:	dd04      	ble.n	801b73c <sin+0x34>
 801b732:	ee30 0b40 	vsub.f64	d0, d0, d0
 801b736:	b005      	add	sp, #20
 801b738:	f85d fb04 	ldr.w	pc, [sp], #4
 801b73c:	4668      	mov	r0, sp
 801b73e:	f000 fa27 	bl	801bb90 <__ieee754_rem_pio2>
 801b742:	f000 0003 	and.w	r0, r0, #3
 801b746:	2801      	cmp	r0, #1
 801b748:	d00a      	beq.n	801b760 <sin+0x58>
 801b74a:	2802      	cmp	r0, #2
 801b74c:	d00f      	beq.n	801b76e <sin+0x66>
 801b74e:	b9c0      	cbnz	r0, 801b782 <sin+0x7a>
 801b750:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b754:	ed9d 0b00 	vldr	d0, [sp]
 801b758:	2001      	movs	r0, #1
 801b75a:	f000 f891 	bl	801b880 <__kernel_sin>
 801b75e:	e7ea      	b.n	801b736 <sin+0x2e>
 801b760:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b764:	ed9d 0b00 	vldr	d0, [sp]
 801b768:	f000 f81e 	bl	801b7a8 <__kernel_cos>
 801b76c:	e7e3      	b.n	801b736 <sin+0x2e>
 801b76e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b772:	ed9d 0b00 	vldr	d0, [sp]
 801b776:	2001      	movs	r0, #1
 801b778:	f000 f882 	bl	801b880 <__kernel_sin>
 801b77c:	eeb1 0b40 	vneg.f64	d0, d0
 801b780:	e7d9      	b.n	801b736 <sin+0x2e>
 801b782:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b786:	ed9d 0b00 	vldr	d0, [sp]
 801b78a:	f000 f80d 	bl	801b7a8 <__kernel_cos>
 801b78e:	e7f5      	b.n	801b77c <sin+0x74>
	...
 801b798:	3fe921fb 	.word	0x3fe921fb
 801b79c:	7fefffff 	.word	0x7fefffff

0801b7a0 <__ieee754_sqrt>:
 801b7a0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801b7a4:	4770      	bx	lr
	...

0801b7a8 <__kernel_cos>:
 801b7a8:	ee10 1a90 	vmov	r1, s1
 801b7ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b7b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b7b4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801b7b8:	da05      	bge.n	801b7c6 <__kernel_cos+0x1e>
 801b7ba:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801b7be:	ee17 3a90 	vmov	r3, s15
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d03d      	beq.n	801b842 <__kernel_cos+0x9a>
 801b7c6:	ee20 5b00 	vmul.f64	d5, d0, d0
 801b7ca:	ee21 1b40 	vnmul.f64	d1, d1, d0
 801b7ce:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 801b848 <__kernel_cos+0xa0>
 801b7d2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 801b850 <__kernel_cos+0xa8>
 801b7d6:	eea5 4b07 	vfma.f64	d4, d5, d7
 801b7da:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 801b858 <__kernel_cos+0xb0>
 801b7de:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b7e2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 801b860 <__kernel_cos+0xb8>
 801b7e6:	eea7 4b05 	vfma.f64	d4, d7, d5
 801b7ea:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 801b868 <__kernel_cos+0xc0>
 801b7ee:	4b22      	ldr	r3, [pc, #136]	; (801b878 <__kernel_cos+0xd0>)
 801b7f0:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b7f4:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 801b870 <__kernel_cos+0xc8>
 801b7f8:	4299      	cmp	r1, r3
 801b7fa:	eea7 4b05 	vfma.f64	d4, d7, d5
 801b7fe:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801b802:	ee24 4b05 	vmul.f64	d4, d4, d5
 801b806:	ee25 7b07 	vmul.f64	d7, d5, d7
 801b80a:	eea5 1b04 	vfma.f64	d1, d5, d4
 801b80e:	dc04      	bgt.n	801b81a <__kernel_cos+0x72>
 801b810:	ee37 7b41 	vsub.f64	d7, d7, d1
 801b814:	ee36 0b47 	vsub.f64	d0, d6, d7
 801b818:	4770      	bx	lr
 801b81a:	4b18      	ldr	r3, [pc, #96]	; (801b87c <__kernel_cos+0xd4>)
 801b81c:	4299      	cmp	r1, r3
 801b81e:	dc0d      	bgt.n	801b83c <__kernel_cos+0x94>
 801b820:	2200      	movs	r2, #0
 801b822:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801b826:	ec43 2b15 	vmov	d5, r2, r3
 801b82a:	ee36 0b45 	vsub.f64	d0, d6, d5
 801b82e:	ee37 7b45 	vsub.f64	d7, d7, d5
 801b832:	ee37 7b41 	vsub.f64	d7, d7, d1
 801b836:	ee30 0b47 	vsub.f64	d0, d0, d7
 801b83a:	4770      	bx	lr
 801b83c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801b840:	e7f3      	b.n	801b82a <__kernel_cos+0x82>
 801b842:	eeb0 0b46 	vmov.f64	d0, d6
 801b846:	4770      	bx	lr
 801b848:	be8838d4 	.word	0xbe8838d4
 801b84c:	bda8fae9 	.word	0xbda8fae9
 801b850:	bdb4b1c4 	.word	0xbdb4b1c4
 801b854:	3e21ee9e 	.word	0x3e21ee9e
 801b858:	809c52ad 	.word	0x809c52ad
 801b85c:	be927e4f 	.word	0xbe927e4f
 801b860:	19cb1590 	.word	0x19cb1590
 801b864:	3efa01a0 	.word	0x3efa01a0
 801b868:	16c15177 	.word	0x16c15177
 801b86c:	bf56c16c 	.word	0xbf56c16c
 801b870:	5555554c 	.word	0x5555554c
 801b874:	3fa55555 	.word	0x3fa55555
 801b878:	3fd33332 	.word	0x3fd33332
 801b87c:	3fe90000 	.word	0x3fe90000

0801b880 <__kernel_sin>:
 801b880:	ee10 3a90 	vmov	r3, s1
 801b884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b888:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b88c:	da04      	bge.n	801b898 <__kernel_sin+0x18>
 801b88e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801b892:	ee17 3a90 	vmov	r3, s15
 801b896:	b35b      	cbz	r3, 801b8f0 <__kernel_sin+0x70>
 801b898:	ee20 6b00 	vmul.f64	d6, d0, d0
 801b89c:	ee20 5b06 	vmul.f64	d5, d0, d6
 801b8a0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801b8f8 <__kernel_sin+0x78>
 801b8a4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801b900 <__kernel_sin+0x80>
 801b8a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801b8ac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801b908 <__kernel_sin+0x88>
 801b8b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801b8b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801b910 <__kernel_sin+0x90>
 801b8b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 801b8bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801b918 <__kernel_sin+0x98>
 801b8c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801b8c4:	b930      	cbnz	r0, 801b8d4 <__kernel_sin+0x54>
 801b8c6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801b920 <__kernel_sin+0xa0>
 801b8ca:	eea6 4b07 	vfma.f64	d4, d6, d7
 801b8ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 801b8d2:	4770      	bx	lr
 801b8d4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801b8d8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801b8dc:	eea1 7b04 	vfma.f64	d7, d1, d4
 801b8e0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801b8e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801b928 <__kernel_sin+0xa8>
 801b8e8:	eea5 1b07 	vfma.f64	d1, d5, d7
 801b8ec:	ee30 0b41 	vsub.f64	d0, d0, d1
 801b8f0:	4770      	bx	lr
 801b8f2:	bf00      	nop
 801b8f4:	f3af 8000 	nop.w
 801b8f8:	5acfd57c 	.word	0x5acfd57c
 801b8fc:	3de5d93a 	.word	0x3de5d93a
 801b900:	8a2b9ceb 	.word	0x8a2b9ceb
 801b904:	be5ae5e6 	.word	0xbe5ae5e6
 801b908:	57b1fe7d 	.word	0x57b1fe7d
 801b90c:	3ec71de3 	.word	0x3ec71de3
 801b910:	19c161d5 	.word	0x19c161d5
 801b914:	bf2a01a0 	.word	0xbf2a01a0
 801b918:	1110f8a6 	.word	0x1110f8a6
 801b91c:	3f811111 	.word	0x3f811111
 801b920:	55555549 	.word	0x55555549
 801b924:	bfc55555 	.word	0xbfc55555
 801b928:	55555549 	.word	0x55555549
 801b92c:	3fc55555 	.word	0x3fc55555

0801b930 <__ieee754_acos>:
 801b930:	b500      	push	{lr}
 801b932:	ee10 2a90 	vmov	r2, s1
 801b936:	ed2d 8b10 	vpush	{d8-d15}
 801b93a:	4991      	ldr	r1, [pc, #580]	; (801bb80 <__ieee754_acos+0x250>)
 801b93c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801b940:	428b      	cmp	r3, r1
 801b942:	b087      	sub	sp, #28
 801b944:	dd18      	ble.n	801b978 <__ieee754_acos+0x48>
 801b946:	ee10 1a10 	vmov	r1, s0
 801b94a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801b94e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b952:	430b      	orrs	r3, r1
 801b954:	d10b      	bne.n	801b96e <__ieee754_acos+0x3e>
 801b956:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 801bb08 <__ieee754_acos+0x1d8>
 801b95a:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 801bb10 <__ieee754_acos+0x1e0>
 801b95e:	2a00      	cmp	r2, #0
 801b960:	fe30 0b07 	vselgt.f64	d0, d0, d7
 801b964:	b007      	add	sp, #28
 801b966:	ecbd 8b10 	vpop	{d8-d15}
 801b96a:	f85d fb04 	ldr.w	pc, [sp], #4
 801b96e:	ee30 8b40 	vsub.f64	d8, d0, d0
 801b972:	ee88 0b08 	vdiv.f64	d0, d8, d8
 801b976:	e7f5      	b.n	801b964 <__ieee754_acos+0x34>
 801b978:	4982      	ldr	r1, [pc, #520]	; (801bb84 <__ieee754_acos+0x254>)
 801b97a:	428b      	cmp	r3, r1
 801b97c:	dc3c      	bgt.n	801b9f8 <__ieee754_acos+0xc8>
 801b97e:	4a82      	ldr	r2, [pc, #520]	; (801bb88 <__ieee754_acos+0x258>)
 801b980:	4293      	cmp	r3, r2
 801b982:	ed9f 7b65 	vldr	d7, [pc, #404]	; 801bb18 <__ieee754_acos+0x1e8>
 801b986:	f340 80bc 	ble.w	801bb02 <__ieee754_acos+0x1d2>
 801b98a:	ee20 6b00 	vmul.f64	d6, d0, d0
 801b98e:	ed9f 4b64 	vldr	d4, [pc, #400]	; 801bb20 <__ieee754_acos+0x1f0>
 801b992:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801bb28 <__ieee754_acos+0x1f8>
 801b996:	eea6 5b04 	vfma.f64	d5, d6, d4
 801b99a:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801bb30 <__ieee754_acos+0x200>
 801b99e:	eea5 4b06 	vfma.f64	d4, d5, d6
 801b9a2:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801bb38 <__ieee754_acos+0x208>
 801b9a6:	eea4 5b06 	vfma.f64	d5, d4, d6
 801b9aa:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801bb40 <__ieee754_acos+0x210>
 801b9ae:	eea5 4b06 	vfma.f64	d4, d5, d6
 801b9b2:	ed9f 5b65 	vldr	d5, [pc, #404]	; 801bb48 <__ieee754_acos+0x218>
 801b9b6:	ed9f 3b66 	vldr	d3, [pc, #408]	; 801bb50 <__ieee754_acos+0x220>
 801b9ba:	eea4 5b06 	vfma.f64	d5, d4, d6
 801b9be:	ee25 5b06 	vmul.f64	d5, d5, d6
 801b9c2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801bb58 <__ieee754_acos+0x228>
 801b9c6:	eea6 3b04 	vfma.f64	d3, d6, d4
 801b9ca:	ed9f 4b65 	vldr	d4, [pc, #404]	; 801bb60 <__ieee754_acos+0x230>
 801b9ce:	eea3 4b06 	vfma.f64	d4, d3, d6
 801b9d2:	ed9f 3b65 	vldr	d3, [pc, #404]	; 801bb68 <__ieee754_acos+0x238>
 801b9d6:	eea4 3b06 	vfma.f64	d3, d4, d6
 801b9da:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801b9de:	eea3 4b06 	vfma.f64	d4, d3, d6
 801b9e2:	ed9f 6b63 	vldr	d6, [pc, #396]	; 801bb70 <__ieee754_acos+0x240>
 801b9e6:	ee85 3b04 	vdiv.f64	d3, d5, d4
 801b9ea:	eea0 6b43 	vfms.f64	d6, d0, d3
 801b9ee:	ee30 0b46 	vsub.f64	d0, d0, d6
 801b9f2:	ee37 0b40 	vsub.f64	d0, d7, d0
 801b9f6:	e7b5      	b.n	801b964 <__ieee754_acos+0x34>
 801b9f8:	2a00      	cmp	r2, #0
 801b9fa:	ed9f eb49 	vldr	d14, [pc, #292]	; 801bb20 <__ieee754_acos+0x1f0>
 801b9fe:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 801ba02:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801ba06:	ed9f db48 	vldr	d13, [pc, #288]	; 801bb28 <__ieee754_acos+0x1f8>
 801ba0a:	ed9f cb49 	vldr	d12, [pc, #292]	; 801bb30 <__ieee754_acos+0x200>
 801ba0e:	ed9f bb4a 	vldr	d11, [pc, #296]	; 801bb38 <__ieee754_acos+0x208>
 801ba12:	ed9f ab4b 	vldr	d10, [pc, #300]	; 801bb40 <__ieee754_acos+0x210>
 801ba16:	ed9f fb4c 	vldr	d15, [pc, #304]	; 801bb48 <__ieee754_acos+0x218>
 801ba1a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801bb50 <__ieee754_acos+0x220>
 801ba1e:	ed9f 2b50 	vldr	d2, [pc, #320]	; 801bb60 <__ieee754_acos+0x230>
 801ba22:	ed9f 1b51 	vldr	d1, [pc, #324]	; 801bb68 <__ieee754_acos+0x238>
 801ba26:	da2a      	bge.n	801ba7e <__ieee754_acos+0x14e>
 801ba28:	ee30 0b09 	vadd.f64	d0, d0, d9
 801ba2c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ba30:	ed9f 7b49 	vldr	d7, [pc, #292]	; 801bb58 <__ieee754_acos+0x228>
 801ba34:	eea0 db0e 	vfma.f64	d13, d0, d14
 801ba38:	eead cb00 	vfma.f64	d12, d13, d0
 801ba3c:	eea0 3b07 	vfma.f64	d3, d0, d7
 801ba40:	eeac bb00 	vfma.f64	d11, d12, d0
 801ba44:	eea3 2b00 	vfma.f64	d2, d3, d0
 801ba48:	eeab ab00 	vfma.f64	d10, d11, d0
 801ba4c:	eea2 1b00 	vfma.f64	d1, d2, d0
 801ba50:	eeaa fb00 	vfma.f64	d15, d10, d0
 801ba54:	eea1 9b00 	vfma.f64	d9, d1, d0
 801ba58:	ee2f 8b00 	vmul.f64	d8, d15, d0
 801ba5c:	f7ff fea0 	bl	801b7a0 <__ieee754_sqrt>
 801ba60:	ee88 6b09 	vdiv.f64	d6, d8, d9
 801ba64:	ed9f 7b44 	vldr	d7, [pc, #272]	; 801bb78 <__ieee754_acos+0x248>
 801ba68:	eea0 7b06 	vfma.f64	d7, d0, d6
 801ba6c:	ee37 7b00 	vadd.f64	d7, d7, d0
 801ba70:	ed9f 0b27 	vldr	d0, [pc, #156]	; 801bb10 <__ieee754_acos+0x1e0>
 801ba74:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 801ba78:	eea7 0b46 	vfms.f64	d0, d7, d6
 801ba7c:	e772      	b.n	801b964 <__ieee754_acos+0x34>
 801ba7e:	ee39 8b40 	vsub.f64	d8, d9, d0
 801ba82:	ee28 8b07 	vmul.f64	d8, d8, d7
 801ba86:	eeb0 0b48 	vmov.f64	d0, d8
 801ba8a:	ed8d 1b04 	vstr	d1, [sp, #16]
 801ba8e:	ed8d 2b02 	vstr	d2, [sp, #8]
 801ba92:	ed8d 3b00 	vstr	d3, [sp]
 801ba96:	f7ff fe83 	bl	801b7a0 <__ieee754_sqrt>
 801ba9a:	eeb0 5b48 	vmov.f64	d5, d8
 801ba9e:	eea8 db0e 	vfma.f64	d13, d8, d14
 801baa2:	ec53 2b10 	vmov	r2, r3, d0
 801baa6:	eead cb08 	vfma.f64	d12, d13, d8
 801baaa:	2200      	movs	r2, #0
 801baac:	ec43 2b17 	vmov	d7, r2, r3
 801bab0:	eeac bb08 	vfma.f64	d11, d12, d8
 801bab4:	ee30 6b07 	vadd.f64	d6, d0, d7
 801bab8:	eea7 5b47 	vfms.f64	d5, d7, d7
 801babc:	ed9d 3b00 	vldr	d3, [sp]
 801bac0:	ee85 4b06 	vdiv.f64	d4, d5, d6
 801bac4:	eeab ab08 	vfma.f64	d10, d11, d8
 801bac8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 801bb58 <__ieee754_acos+0x228>
 801bacc:	eeaa fb08 	vfma.f64	d15, d10, d8
 801bad0:	ee2f fb08 	vmul.f64	d15, d15, d8
 801bad4:	ed9d 2b02 	vldr	d2, [sp, #8]
 801bad8:	eea8 3b06 	vfma.f64	d3, d8, d6
 801badc:	eeb0 6b44 	vmov.f64	d6, d4
 801bae0:	ed9d 1b04 	vldr	d1, [sp, #16]
 801bae4:	eea3 2b08 	vfma.f64	d2, d3, d8
 801bae8:	eea2 1b08 	vfma.f64	d1, d2, d8
 801baec:	eea1 9b08 	vfma.f64	d9, d1, d8
 801baf0:	ee8f 5b09 	vdiv.f64	d5, d15, d9
 801baf4:	eea0 6b05 	vfma.f64	d6, d0, d5
 801baf8:	ee37 0b06 	vadd.f64	d0, d7, d6
 801bafc:	ee30 0b00 	vadd.f64	d0, d0, d0
 801bb00:	e730      	b.n	801b964 <__ieee754_acos+0x34>
 801bb02:	eeb0 0b47 	vmov.f64	d0, d7
 801bb06:	e72d      	b.n	801b964 <__ieee754_acos+0x34>
	...
 801bb10:	54442d18 	.word	0x54442d18
 801bb14:	400921fb 	.word	0x400921fb
 801bb18:	54442d18 	.word	0x54442d18
 801bb1c:	3ff921fb 	.word	0x3ff921fb
 801bb20:	0dfdf709 	.word	0x0dfdf709
 801bb24:	3f023de1 	.word	0x3f023de1
 801bb28:	7501b288 	.word	0x7501b288
 801bb2c:	3f49efe0 	.word	0x3f49efe0
 801bb30:	b5688f3b 	.word	0xb5688f3b
 801bb34:	bfa48228 	.word	0xbfa48228
 801bb38:	0e884455 	.word	0x0e884455
 801bb3c:	3fc9c155 	.word	0x3fc9c155
 801bb40:	03eb6f7d 	.word	0x03eb6f7d
 801bb44:	bfd4d612 	.word	0xbfd4d612
 801bb48:	55555555 	.word	0x55555555
 801bb4c:	3fc55555 	.word	0x3fc55555
 801bb50:	1b8d0159 	.word	0x1b8d0159
 801bb54:	bfe6066c 	.word	0xbfe6066c
 801bb58:	b12e9282 	.word	0xb12e9282
 801bb5c:	3fb3b8c5 	.word	0x3fb3b8c5
 801bb60:	9c598ac8 	.word	0x9c598ac8
 801bb64:	40002ae5 	.word	0x40002ae5
 801bb68:	1c8a2d4b 	.word	0x1c8a2d4b
 801bb6c:	c0033a27 	.word	0xc0033a27
 801bb70:	33145c07 	.word	0x33145c07
 801bb74:	3c91a626 	.word	0x3c91a626
 801bb78:	33145c07 	.word	0x33145c07
 801bb7c:	bc91a626 	.word	0xbc91a626
 801bb80:	3fefffff 	.word	0x3fefffff
 801bb84:	3fdfffff 	.word	0x3fdfffff
 801bb88:	3c600000 	.word	0x3c600000
 801bb8c:	00000000 	.word	0x00000000

0801bb90 <__ieee754_rem_pio2>:
 801bb90:	b570      	push	{r4, r5, r6, lr}
 801bb92:	eeb0 7b40 	vmov.f64	d7, d0
 801bb96:	ee17 5a90 	vmov	r5, s15
 801bb9a:	4b99      	ldr	r3, [pc, #612]	; (801be00 <__ieee754_rem_pio2+0x270>)
 801bb9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801bba0:	429e      	cmp	r6, r3
 801bba2:	b088      	sub	sp, #32
 801bba4:	4604      	mov	r4, r0
 801bba6:	dc07      	bgt.n	801bbb8 <__ieee754_rem_pio2+0x28>
 801bba8:	2200      	movs	r2, #0
 801bbaa:	2300      	movs	r3, #0
 801bbac:	ed84 0b00 	vstr	d0, [r4]
 801bbb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801bbb4:	2000      	movs	r0, #0
 801bbb6:	e01b      	b.n	801bbf0 <__ieee754_rem_pio2+0x60>
 801bbb8:	4b92      	ldr	r3, [pc, #584]	; (801be04 <__ieee754_rem_pio2+0x274>)
 801bbba:	429e      	cmp	r6, r3
 801bbbc:	dc3b      	bgt.n	801bc36 <__ieee754_rem_pio2+0xa6>
 801bbbe:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801bbc2:	2d00      	cmp	r5, #0
 801bbc4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801bdc0 <__ieee754_rem_pio2+0x230>
 801bbc8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801bbcc:	dd19      	ble.n	801bc02 <__ieee754_rem_pio2+0x72>
 801bbce:	ee30 7b46 	vsub.f64	d7, d0, d6
 801bbd2:	429e      	cmp	r6, r3
 801bbd4:	d00e      	beq.n	801bbf4 <__ieee754_rem_pio2+0x64>
 801bbd6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801bdc8 <__ieee754_rem_pio2+0x238>
 801bbda:	ee37 5b46 	vsub.f64	d5, d7, d6
 801bbde:	ee37 7b45 	vsub.f64	d7, d7, d5
 801bbe2:	ed84 5b00 	vstr	d5, [r4]
 801bbe6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bbea:	ed84 7b02 	vstr	d7, [r4, #8]
 801bbee:	2001      	movs	r0, #1
 801bbf0:	b008      	add	sp, #32
 801bbf2:	bd70      	pop	{r4, r5, r6, pc}
 801bbf4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801bdd0 <__ieee754_rem_pio2+0x240>
 801bbf8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bbfc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801bdd8 <__ieee754_rem_pio2+0x248>
 801bc00:	e7eb      	b.n	801bbda <__ieee754_rem_pio2+0x4a>
 801bc02:	429e      	cmp	r6, r3
 801bc04:	ee30 7b06 	vadd.f64	d7, d0, d6
 801bc08:	d00e      	beq.n	801bc28 <__ieee754_rem_pio2+0x98>
 801bc0a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801bdc8 <__ieee754_rem_pio2+0x238>
 801bc0e:	ee37 5b06 	vadd.f64	d5, d7, d6
 801bc12:	ee37 7b45 	vsub.f64	d7, d7, d5
 801bc16:	ed84 5b00 	vstr	d5, [r4]
 801bc1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801bc1e:	f04f 30ff 	mov.w	r0, #4294967295
 801bc22:	ed84 7b02 	vstr	d7, [r4, #8]
 801bc26:	e7e3      	b.n	801bbf0 <__ieee754_rem_pio2+0x60>
 801bc28:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801bdd0 <__ieee754_rem_pio2+0x240>
 801bc2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801bc30:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801bdd8 <__ieee754_rem_pio2+0x248>
 801bc34:	e7eb      	b.n	801bc0e <__ieee754_rem_pio2+0x7e>
 801bc36:	4b74      	ldr	r3, [pc, #464]	; (801be08 <__ieee754_rem_pio2+0x278>)
 801bc38:	429e      	cmp	r6, r3
 801bc3a:	dc70      	bgt.n	801bd1e <__ieee754_rem_pio2+0x18e>
 801bc3c:	f7ff fd58 	bl	801b6f0 <fabs>
 801bc40:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801bc44:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801bde0 <__ieee754_rem_pio2+0x250>
 801bc48:	eea0 7b06 	vfma.f64	d7, d0, d6
 801bc4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801bc50:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801bc54:	ee17 0a90 	vmov	r0, s15
 801bc58:	eeb1 4b45 	vneg.f64	d4, d5
 801bc5c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801bdc0 <__ieee754_rem_pio2+0x230>
 801bc60:	eea5 0b47 	vfms.f64	d0, d5, d7
 801bc64:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801bdc8 <__ieee754_rem_pio2+0x238>
 801bc68:	281f      	cmp	r0, #31
 801bc6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801bc6e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801bc72:	dc08      	bgt.n	801bc86 <__ieee754_rem_pio2+0xf6>
 801bc74:	4b65      	ldr	r3, [pc, #404]	; (801be0c <__ieee754_rem_pio2+0x27c>)
 801bc76:	1e42      	subs	r2, r0, #1
 801bc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc7c:	42b3      	cmp	r3, r6
 801bc7e:	d002      	beq.n	801bc86 <__ieee754_rem_pio2+0xf6>
 801bc80:	ed84 6b00 	vstr	d6, [r4]
 801bc84:	e024      	b.n	801bcd0 <__ieee754_rem_pio2+0x140>
 801bc86:	ee16 3a90 	vmov	r3, s13
 801bc8a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801bc8e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801bc92:	2b10      	cmp	r3, #16
 801bc94:	ea4f 5226 	mov.w	r2, r6, asr #20
 801bc98:	ddf2      	ble.n	801bc80 <__ieee754_rem_pio2+0xf0>
 801bc9a:	eeb0 6b40 	vmov.f64	d6, d0
 801bc9e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 801bdd0 <__ieee754_rem_pio2+0x240>
 801bca2:	eea4 6b03 	vfma.f64	d6, d4, d3
 801bca6:	ee30 7b46 	vsub.f64	d7, d0, d6
 801bcaa:	eea4 7b03 	vfma.f64	d7, d4, d3
 801bcae:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 801bdd8 <__ieee754_rem_pio2+0x248>
 801bcb2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801bcb6:	ee36 3b47 	vsub.f64	d3, d6, d7
 801bcba:	ee13 3a90 	vmov	r3, s7
 801bcbe:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801bcc2:	1ad3      	subs	r3, r2, r3
 801bcc4:	2b31      	cmp	r3, #49	; 0x31
 801bcc6:	dc17      	bgt.n	801bcf8 <__ieee754_rem_pio2+0x168>
 801bcc8:	eeb0 0b46 	vmov.f64	d0, d6
 801bccc:	ed84 3b00 	vstr	d3, [r4]
 801bcd0:	ed94 6b00 	vldr	d6, [r4]
 801bcd4:	2d00      	cmp	r5, #0
 801bcd6:	ee30 0b46 	vsub.f64	d0, d0, d6
 801bcda:	ee30 0b47 	vsub.f64	d0, d0, d7
 801bcde:	ed84 0b02 	vstr	d0, [r4, #8]
 801bce2:	da85      	bge.n	801bbf0 <__ieee754_rem_pio2+0x60>
 801bce4:	eeb1 6b46 	vneg.f64	d6, d6
 801bce8:	eeb1 0b40 	vneg.f64	d0, d0
 801bcec:	ed84 6b00 	vstr	d6, [r4]
 801bcf0:	ed84 0b02 	vstr	d0, [r4, #8]
 801bcf4:	4240      	negs	r0, r0
 801bcf6:	e77b      	b.n	801bbf0 <__ieee754_rem_pio2+0x60>
 801bcf8:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 801bde8 <__ieee754_rem_pio2+0x258>
 801bcfc:	eeb0 0b46 	vmov.f64	d0, d6
 801bd00:	eea4 0b07 	vfma.f64	d0, d4, d7
 801bd04:	ee36 6b40 	vsub.f64	d6, d6, d0
 801bd08:	eea4 6b07 	vfma.f64	d6, d4, d7
 801bd0c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 801bdf0 <__ieee754_rem_pio2+0x260>
 801bd10:	eeb0 7b46 	vmov.f64	d7, d6
 801bd14:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801bd18:	ee30 6b47 	vsub.f64	d6, d0, d7
 801bd1c:	e7b0      	b.n	801bc80 <__ieee754_rem_pio2+0xf0>
 801bd1e:	4b3c      	ldr	r3, [pc, #240]	; (801be10 <__ieee754_rem_pio2+0x280>)
 801bd20:	429e      	cmp	r6, r3
 801bd22:	dd06      	ble.n	801bd32 <__ieee754_rem_pio2+0x1a2>
 801bd24:	ee30 7b40 	vsub.f64	d7, d0, d0
 801bd28:	ed80 7b02 	vstr	d7, [r0, #8]
 801bd2c:	ed80 7b00 	vstr	d7, [r0]
 801bd30:	e740      	b.n	801bbb4 <__ieee754_rem_pio2+0x24>
 801bd32:	1532      	asrs	r2, r6, #20
 801bd34:	ee10 0a10 	vmov	r0, s0
 801bd38:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801bd3c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801bd40:	ec41 0b17 	vmov	d7, r0, r1
 801bd44:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801bd48:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801bdf8 <__ieee754_rem_pio2+0x268>
 801bd4c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801bd50:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bd54:	ed8d 6b02 	vstr	d6, [sp, #8]
 801bd58:	ee27 7b05 	vmul.f64	d7, d7, d5
 801bd5c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801bd60:	a808      	add	r0, sp, #32
 801bd62:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801bd66:	ee37 7b46 	vsub.f64	d7, d7, d6
 801bd6a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801bd6e:	ee27 7b05 	vmul.f64	d7, d7, d5
 801bd72:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bd76:	2103      	movs	r1, #3
 801bd78:	ed30 7b02 	vldmdb	r0!, {d7}
 801bd7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bd80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd84:	460b      	mov	r3, r1
 801bd86:	f101 31ff 	add.w	r1, r1, #4294967295
 801bd8a:	d0f5      	beq.n	801bd78 <__ieee754_rem_pio2+0x1e8>
 801bd8c:	4921      	ldr	r1, [pc, #132]	; (801be14 <__ieee754_rem_pio2+0x284>)
 801bd8e:	9101      	str	r1, [sp, #4]
 801bd90:	2102      	movs	r1, #2
 801bd92:	9100      	str	r1, [sp, #0]
 801bd94:	a802      	add	r0, sp, #8
 801bd96:	4621      	mov	r1, r4
 801bd98:	f000 f83e 	bl	801be18 <__kernel_rem_pio2>
 801bd9c:	2d00      	cmp	r5, #0
 801bd9e:	f6bf af27 	bge.w	801bbf0 <__ieee754_rem_pio2+0x60>
 801bda2:	ed94 7b00 	vldr	d7, [r4]
 801bda6:	eeb1 7b47 	vneg.f64	d7, d7
 801bdaa:	ed84 7b00 	vstr	d7, [r4]
 801bdae:	ed94 7b02 	vldr	d7, [r4, #8]
 801bdb2:	eeb1 7b47 	vneg.f64	d7, d7
 801bdb6:	ed84 7b02 	vstr	d7, [r4, #8]
 801bdba:	e79b      	b.n	801bcf4 <__ieee754_rem_pio2+0x164>
 801bdbc:	f3af 8000 	nop.w
 801bdc0:	54400000 	.word	0x54400000
 801bdc4:	3ff921fb 	.word	0x3ff921fb
 801bdc8:	1a626331 	.word	0x1a626331
 801bdcc:	3dd0b461 	.word	0x3dd0b461
 801bdd0:	1a600000 	.word	0x1a600000
 801bdd4:	3dd0b461 	.word	0x3dd0b461
 801bdd8:	2e037073 	.word	0x2e037073
 801bddc:	3ba3198a 	.word	0x3ba3198a
 801bde0:	6dc9c883 	.word	0x6dc9c883
 801bde4:	3fe45f30 	.word	0x3fe45f30
 801bde8:	2e000000 	.word	0x2e000000
 801bdec:	3ba3198a 	.word	0x3ba3198a
 801bdf0:	252049c1 	.word	0x252049c1
 801bdf4:	397b839a 	.word	0x397b839a
 801bdf8:	00000000 	.word	0x00000000
 801bdfc:	41700000 	.word	0x41700000
 801be00:	3fe921fb 	.word	0x3fe921fb
 801be04:	4002d97b 	.word	0x4002d97b
 801be08:	413921fb 	.word	0x413921fb
 801be0c:	0801cc20 	.word	0x0801cc20
 801be10:	7fefffff 	.word	0x7fefffff
 801be14:	0801cca0 	.word	0x0801cca0

0801be18 <__kernel_rem_pio2>:
 801be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be1c:	ed2d 8b06 	vpush	{d8-d10}
 801be20:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801be24:	460f      	mov	r7, r1
 801be26:	9002      	str	r0, [sp, #8]
 801be28:	49c3      	ldr	r1, [pc, #780]	; (801c138 <__kernel_rem_pio2+0x320>)
 801be2a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801be2c:	9301      	str	r3, [sp, #4]
 801be2e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801be32:	9901      	ldr	r1, [sp, #4]
 801be34:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801be36:	f112 0f14 	cmn.w	r2, #20
 801be3a:	bfa8      	it	ge
 801be3c:	1ed0      	subge	r0, r2, #3
 801be3e:	f101 3aff 	add.w	sl, r1, #4294967295
 801be42:	bfaa      	itet	ge
 801be44:	2418      	movge	r4, #24
 801be46:	2000      	movlt	r0, #0
 801be48:	fb90 f0f4 	sdivge	r0, r0, r4
 801be4c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 801c120 <__kernel_rem_pio2+0x308>
 801be50:	f06f 0417 	mvn.w	r4, #23
 801be54:	fb00 4404 	mla	r4, r0, r4, r4
 801be58:	eba0 060a 	sub.w	r6, r0, sl
 801be5c:	4414      	add	r4, r2
 801be5e:	eb09 0c0a 	add.w	ip, r9, sl
 801be62:	ad1a      	add	r5, sp, #104	; 0x68
 801be64:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 801be68:	2200      	movs	r2, #0
 801be6a:	4562      	cmp	r2, ip
 801be6c:	dd10      	ble.n	801be90 <__kernel_rem_pio2+0x78>
 801be6e:	9a01      	ldr	r2, [sp, #4]
 801be70:	a91a      	add	r1, sp, #104	; 0x68
 801be72:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801be76:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 801be7a:	f04f 0c00 	mov.w	ip, #0
 801be7e:	45cc      	cmp	ip, r9
 801be80:	dc26      	bgt.n	801bed0 <__kernel_rem_pio2+0xb8>
 801be82:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 801c120 <__kernel_rem_pio2+0x308>
 801be86:	f8dd e008 	ldr.w	lr, [sp, #8]
 801be8a:	4616      	mov	r6, r2
 801be8c:	2500      	movs	r5, #0
 801be8e:	e015      	b.n	801bebc <__kernel_rem_pio2+0xa4>
 801be90:	42d6      	cmn	r6, r2
 801be92:	d409      	bmi.n	801bea8 <__kernel_rem_pio2+0x90>
 801be94:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 801be98:	ee07 1a90 	vmov	s15, r1
 801be9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801bea0:	eca5 7b02 	vstmia	r5!, {d7}
 801bea4:	3201      	adds	r2, #1
 801bea6:	e7e0      	b.n	801be6a <__kernel_rem_pio2+0x52>
 801bea8:	eeb0 7b46 	vmov.f64	d7, d6
 801beac:	e7f8      	b.n	801bea0 <__kernel_rem_pio2+0x88>
 801beae:	ecbe 5b02 	vldmia	lr!, {d5}
 801beb2:	ed96 6b00 	vldr	d6, [r6]
 801beb6:	3501      	adds	r5, #1
 801beb8:	eea5 7b06 	vfma.f64	d7, d5, d6
 801bebc:	4555      	cmp	r5, sl
 801bebe:	f1a6 0608 	sub.w	r6, r6, #8
 801bec2:	ddf4      	ble.n	801beae <__kernel_rem_pio2+0x96>
 801bec4:	eca8 7b02 	vstmia	r8!, {d7}
 801bec8:	f10c 0c01 	add.w	ip, ip, #1
 801becc:	3208      	adds	r2, #8
 801bece:	e7d6      	b.n	801be7e <__kernel_rem_pio2+0x66>
 801bed0:	aa06      	add	r2, sp, #24
 801bed2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801c128 <__kernel_rem_pio2+0x310>
 801bed6:	ed9f ab96 	vldr	d10, [pc, #600]	; 801c130 <__kernel_rem_pio2+0x318>
 801beda:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801bede:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801bee2:	9204      	str	r2, [sp, #16]
 801bee4:	9303      	str	r3, [sp, #12]
 801bee6:	464d      	mov	r5, r9
 801bee8:	00eb      	lsls	r3, r5, #3
 801beea:	9305      	str	r3, [sp, #20]
 801beec:	ab92      	add	r3, sp, #584	; 0x248
 801beee:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801bef2:	f10d 0b18 	add.w	fp, sp, #24
 801bef6:	ab6a      	add	r3, sp, #424	; 0x1a8
 801bef8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801befc:	465e      	mov	r6, fp
 801befe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801bf02:	4628      	mov	r0, r5
 801bf04:	2800      	cmp	r0, #0
 801bf06:	f1a2 0208 	sub.w	r2, r2, #8
 801bf0a:	dc48      	bgt.n	801bf9e <__kernel_rem_pio2+0x186>
 801bf0c:	4620      	mov	r0, r4
 801bf0e:	f000 fa17 	bl	801c340 <scalbn>
 801bf12:	eeb0 8b40 	vmov.f64	d8, d0
 801bf16:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801bf1a:	ee28 0b00 	vmul.f64	d0, d8, d0
 801bf1e:	f000 fa8f 	bl	801c440 <floor>
 801bf22:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801bf26:	eea0 8b47 	vfms.f64	d8, d0, d7
 801bf2a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801bf2e:	2c00      	cmp	r4, #0
 801bf30:	ee17 8a90 	vmov	r8, s15
 801bf34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801bf38:	ee38 8b47 	vsub.f64	d8, d8, d7
 801bf3c:	dd41      	ble.n	801bfc2 <__kernel_rem_pio2+0x1aa>
 801bf3e:	1e68      	subs	r0, r5, #1
 801bf40:	ab06      	add	r3, sp, #24
 801bf42:	f1c4 0c18 	rsb	ip, r4, #24
 801bf46:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801bf4a:	fa46 f20c 	asr.w	r2, r6, ip
 801bf4e:	4490      	add	r8, r2
 801bf50:	fa02 f20c 	lsl.w	r2, r2, ip
 801bf54:	1ab6      	subs	r6, r6, r2
 801bf56:	f1c4 0217 	rsb	r2, r4, #23
 801bf5a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801bf5e:	4116      	asrs	r6, r2
 801bf60:	2e00      	cmp	r6, #0
 801bf62:	dd3d      	ble.n	801bfe0 <__kernel_rem_pio2+0x1c8>
 801bf64:	f04f 0c00 	mov.w	ip, #0
 801bf68:	f108 0801 	add.w	r8, r8, #1
 801bf6c:	4660      	mov	r0, ip
 801bf6e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801bf72:	4565      	cmp	r5, ip
 801bf74:	dc6a      	bgt.n	801c04c <__kernel_rem_pio2+0x234>
 801bf76:	2c00      	cmp	r4, #0
 801bf78:	dd04      	ble.n	801bf84 <__kernel_rem_pio2+0x16c>
 801bf7a:	2c01      	cmp	r4, #1
 801bf7c:	d07b      	beq.n	801c076 <__kernel_rem_pio2+0x25e>
 801bf7e:	2c02      	cmp	r4, #2
 801bf80:	f000 8083 	beq.w	801c08a <__kernel_rem_pio2+0x272>
 801bf84:	2e02      	cmp	r6, #2
 801bf86:	d12b      	bne.n	801bfe0 <__kernel_rem_pio2+0x1c8>
 801bf88:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801bf8c:	ee30 8b48 	vsub.f64	d8, d0, d8
 801bf90:	b330      	cbz	r0, 801bfe0 <__kernel_rem_pio2+0x1c8>
 801bf92:	4620      	mov	r0, r4
 801bf94:	f000 f9d4 	bl	801c340 <scalbn>
 801bf98:	ee38 8b40 	vsub.f64	d8, d8, d0
 801bf9c:	e020      	b.n	801bfe0 <__kernel_rem_pio2+0x1c8>
 801bf9e:	ee20 7b09 	vmul.f64	d7, d0, d9
 801bfa2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801bfa6:	3801      	subs	r0, #1
 801bfa8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801bfac:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801bfb0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801bfb4:	eca6 0a01 	vstmia	r6!, {s0}
 801bfb8:	ed92 0b00 	vldr	d0, [r2]
 801bfbc:	ee37 0b00 	vadd.f64	d0, d7, d0
 801bfc0:	e7a0      	b.n	801bf04 <__kernel_rem_pio2+0xec>
 801bfc2:	d105      	bne.n	801bfd0 <__kernel_rem_pio2+0x1b8>
 801bfc4:	1e6a      	subs	r2, r5, #1
 801bfc6:	ab06      	add	r3, sp, #24
 801bfc8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801bfcc:	15f6      	asrs	r6, r6, #23
 801bfce:	e7c7      	b.n	801bf60 <__kernel_rem_pio2+0x148>
 801bfd0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801bfd4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801bfd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfdc:	da34      	bge.n	801c048 <__kernel_rem_pio2+0x230>
 801bfde:	2600      	movs	r6, #0
 801bfe0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801bfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfe8:	f040 80aa 	bne.w	801c140 <__kernel_rem_pio2+0x328>
 801bfec:	f105 3bff 	add.w	fp, r5, #4294967295
 801bff0:	4658      	mov	r0, fp
 801bff2:	2200      	movs	r2, #0
 801bff4:	4548      	cmp	r0, r9
 801bff6:	da50      	bge.n	801c09a <__kernel_rem_pio2+0x282>
 801bff8:	2a00      	cmp	r2, #0
 801bffa:	d06b      	beq.n	801c0d4 <__kernel_rem_pio2+0x2bc>
 801bffc:	ab06      	add	r3, sp, #24
 801bffe:	3c18      	subs	r4, #24
 801c000:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801c004:	2b00      	cmp	r3, #0
 801c006:	f000 8087 	beq.w	801c118 <__kernel_rem_pio2+0x300>
 801c00a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801c00e:	4620      	mov	r0, r4
 801c010:	f000 f996 	bl	801c340 <scalbn>
 801c014:	ed9f 6b44 	vldr	d6, [pc, #272]	; 801c128 <__kernel_rem_pio2+0x310>
 801c018:	f10b 0201 	add.w	r2, fp, #1
 801c01c:	a96a      	add	r1, sp, #424	; 0x1a8
 801c01e:	00d3      	lsls	r3, r2, #3
 801c020:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801c024:	465a      	mov	r2, fp
 801c026:	2a00      	cmp	r2, #0
 801c028:	f280 80b8 	bge.w	801c19c <__kernel_rem_pio2+0x384>
 801c02c:	465a      	mov	r2, fp
 801c02e:	2a00      	cmp	r2, #0
 801c030:	f2c0 80d6 	blt.w	801c1e0 <__kernel_rem_pio2+0x3c8>
 801c034:	a96a      	add	r1, sp, #424	; 0x1a8
 801c036:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801c03a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801c120 <__kernel_rem_pio2+0x308>
 801c03e:	4d3f      	ldr	r5, [pc, #252]	; (801c13c <__kernel_rem_pio2+0x324>)
 801c040:	2000      	movs	r0, #0
 801c042:	ebab 0102 	sub.w	r1, fp, r2
 801c046:	e0c0      	b.n	801c1ca <__kernel_rem_pio2+0x3b2>
 801c048:	2602      	movs	r6, #2
 801c04a:	e78b      	b.n	801bf64 <__kernel_rem_pio2+0x14c>
 801c04c:	f8db 2000 	ldr.w	r2, [fp]
 801c050:	b958      	cbnz	r0, 801c06a <__kernel_rem_pio2+0x252>
 801c052:	b122      	cbz	r2, 801c05e <__kernel_rem_pio2+0x246>
 801c054:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801c058:	f8cb 2000 	str.w	r2, [fp]
 801c05c:	2201      	movs	r2, #1
 801c05e:	f10c 0c01 	add.w	ip, ip, #1
 801c062:	f10b 0b04 	add.w	fp, fp, #4
 801c066:	4610      	mov	r0, r2
 801c068:	e783      	b.n	801bf72 <__kernel_rem_pio2+0x15a>
 801c06a:	ebae 0202 	sub.w	r2, lr, r2
 801c06e:	f8cb 2000 	str.w	r2, [fp]
 801c072:	4602      	mov	r2, r0
 801c074:	e7f3      	b.n	801c05e <__kernel_rem_pio2+0x246>
 801c076:	f105 3cff 	add.w	ip, r5, #4294967295
 801c07a:	ab06      	add	r3, sp, #24
 801c07c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801c080:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801c084:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801c088:	e77c      	b.n	801bf84 <__kernel_rem_pio2+0x16c>
 801c08a:	f105 3cff 	add.w	ip, r5, #4294967295
 801c08e:	ab06      	add	r3, sp, #24
 801c090:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801c094:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801c098:	e7f4      	b.n	801c084 <__kernel_rem_pio2+0x26c>
 801c09a:	ab06      	add	r3, sp, #24
 801c09c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801c0a0:	3801      	subs	r0, #1
 801c0a2:	431a      	orrs	r2, r3
 801c0a4:	e7a6      	b.n	801bff4 <__kernel_rem_pio2+0x1dc>
 801c0a6:	3201      	adds	r2, #1
 801c0a8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801c0ac:	2e00      	cmp	r6, #0
 801c0ae:	d0fa      	beq.n	801c0a6 <__kernel_rem_pio2+0x28e>
 801c0b0:	9b05      	ldr	r3, [sp, #20]
 801c0b2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801c0b6:	eb0d 0003 	add.w	r0, sp, r3
 801c0ba:	9b01      	ldr	r3, [sp, #4]
 801c0bc:	18ee      	adds	r6, r5, r3
 801c0be:	ab1a      	add	r3, sp, #104	; 0x68
 801c0c0:	f105 0c01 	add.w	ip, r5, #1
 801c0c4:	3898      	subs	r0, #152	; 0x98
 801c0c6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801c0ca:	442a      	add	r2, r5
 801c0cc:	4562      	cmp	r2, ip
 801c0ce:	da04      	bge.n	801c0da <__kernel_rem_pio2+0x2c2>
 801c0d0:	4615      	mov	r5, r2
 801c0d2:	e709      	b.n	801bee8 <__kernel_rem_pio2+0xd0>
 801c0d4:	9804      	ldr	r0, [sp, #16]
 801c0d6:	2201      	movs	r2, #1
 801c0d8:	e7e6      	b.n	801c0a8 <__kernel_rem_pio2+0x290>
 801c0da:	9b03      	ldr	r3, [sp, #12]
 801c0dc:	f8dd e008 	ldr.w	lr, [sp, #8]
 801c0e0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c0e4:	9305      	str	r3, [sp, #20]
 801c0e6:	ee07 3a90 	vmov	s15, r3
 801c0ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c0ee:	2500      	movs	r5, #0
 801c0f0:	eca6 7b02 	vstmia	r6!, {d7}
 801c0f4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 801c120 <__kernel_rem_pio2+0x308>
 801c0f8:	46b0      	mov	r8, r6
 801c0fa:	4555      	cmp	r5, sl
 801c0fc:	dd04      	ble.n	801c108 <__kernel_rem_pio2+0x2f0>
 801c0fe:	eca0 7b02 	vstmia	r0!, {d7}
 801c102:	f10c 0c01 	add.w	ip, ip, #1
 801c106:	e7e1      	b.n	801c0cc <__kernel_rem_pio2+0x2b4>
 801c108:	ecbe 5b02 	vldmia	lr!, {d5}
 801c10c:	ed38 6b02 	vldmdb	r8!, {d6}
 801c110:	3501      	adds	r5, #1
 801c112:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c116:	e7f0      	b.n	801c0fa <__kernel_rem_pio2+0x2e2>
 801c118:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c11c:	e76e      	b.n	801bffc <__kernel_rem_pio2+0x1e4>
 801c11e:	bf00      	nop
	...
 801c12c:	3e700000 	.word	0x3e700000
 801c130:	00000000 	.word	0x00000000
 801c134:	41700000 	.word	0x41700000
 801c138:	0801cde8 	.word	0x0801cde8
 801c13c:	0801cda8 	.word	0x0801cda8
 801c140:	4260      	negs	r0, r4
 801c142:	eeb0 0b48 	vmov.f64	d0, d8
 801c146:	f000 f8fb 	bl	801c340 <scalbn>
 801c14a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801c328 <__kernel_rem_pio2+0x510>
 801c14e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801c152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c156:	db18      	blt.n	801c18a <__kernel_rem_pio2+0x372>
 801c158:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801c330 <__kernel_rem_pio2+0x518>
 801c15c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801c160:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801c164:	aa06      	add	r2, sp, #24
 801c166:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801c16a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801c16e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801c172:	f105 0b01 	add.w	fp, r5, #1
 801c176:	ee10 3a10 	vmov	r3, s0
 801c17a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801c17e:	ee17 3a10 	vmov	r3, s14
 801c182:	3418      	adds	r4, #24
 801c184:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801c188:	e73f      	b.n	801c00a <__kernel_rem_pio2+0x1f2>
 801c18a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801c18e:	aa06      	add	r2, sp, #24
 801c190:	ee10 3a10 	vmov	r3, s0
 801c194:	46ab      	mov	fp, r5
 801c196:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801c19a:	e736      	b.n	801c00a <__kernel_rem_pio2+0x1f2>
 801c19c:	a806      	add	r0, sp, #24
 801c19e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801c1a2:	9001      	str	r0, [sp, #4]
 801c1a4:	ee07 0a90 	vmov	s15, r0
 801c1a8:	3a01      	subs	r2, #1
 801c1aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c1ae:	ee27 7b00 	vmul.f64	d7, d7, d0
 801c1b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801c1b6:	ed21 7b02 	vstmdb	r1!, {d7}
 801c1ba:	e734      	b.n	801c026 <__kernel_rem_pio2+0x20e>
 801c1bc:	ecb5 5b02 	vldmia	r5!, {d5}
 801c1c0:	ecb4 6b02 	vldmia	r4!, {d6}
 801c1c4:	3001      	adds	r0, #1
 801c1c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c1ca:	4548      	cmp	r0, r9
 801c1cc:	dc01      	bgt.n	801c1d2 <__kernel_rem_pio2+0x3ba>
 801c1ce:	4288      	cmp	r0, r1
 801c1d0:	ddf4      	ble.n	801c1bc <__kernel_rem_pio2+0x3a4>
 801c1d2:	a842      	add	r0, sp, #264	; 0x108
 801c1d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801c1d8:	ed81 7b00 	vstr	d7, [r1]
 801c1dc:	3a01      	subs	r2, #1
 801c1de:	e726      	b.n	801c02e <__kernel_rem_pio2+0x216>
 801c1e0:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801c1e2:	2a02      	cmp	r2, #2
 801c1e4:	dc0a      	bgt.n	801c1fc <__kernel_rem_pio2+0x3e4>
 801c1e6:	2a00      	cmp	r2, #0
 801c1e8:	dc2e      	bgt.n	801c248 <__kernel_rem_pio2+0x430>
 801c1ea:	d047      	beq.n	801c27c <__kernel_rem_pio2+0x464>
 801c1ec:	f008 0007 	and.w	r0, r8, #7
 801c1f0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801c1f4:	ecbd 8b06 	vpop	{d8-d10}
 801c1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1fc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801c1fe:	2a03      	cmp	r2, #3
 801c200:	d1f4      	bne.n	801c1ec <__kernel_rem_pio2+0x3d4>
 801c202:	a942      	add	r1, sp, #264	; 0x108
 801c204:	f1a3 0208 	sub.w	r2, r3, #8
 801c208:	440a      	add	r2, r1
 801c20a:	4611      	mov	r1, r2
 801c20c:	4658      	mov	r0, fp
 801c20e:	2800      	cmp	r0, #0
 801c210:	f1a1 0108 	sub.w	r1, r1, #8
 801c214:	dc55      	bgt.n	801c2c2 <__kernel_rem_pio2+0x4aa>
 801c216:	4659      	mov	r1, fp
 801c218:	2901      	cmp	r1, #1
 801c21a:	f1a2 0208 	sub.w	r2, r2, #8
 801c21e:	dc60      	bgt.n	801c2e2 <__kernel_rem_pio2+0x4ca>
 801c220:	ed9f 7b45 	vldr	d7, [pc, #276]	; 801c338 <__kernel_rem_pio2+0x520>
 801c224:	aa42      	add	r2, sp, #264	; 0x108
 801c226:	4413      	add	r3, r2
 801c228:	f1bb 0f01 	cmp.w	fp, #1
 801c22c:	dc69      	bgt.n	801c302 <__kernel_rem_pio2+0x4ea>
 801c22e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801c232:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801c236:	2e00      	cmp	r6, #0
 801c238:	d16a      	bne.n	801c310 <__kernel_rem_pio2+0x4f8>
 801c23a:	ed87 5b00 	vstr	d5, [r7]
 801c23e:	ed87 6b02 	vstr	d6, [r7, #8]
 801c242:	ed87 7b04 	vstr	d7, [r7, #16]
 801c246:	e7d1      	b.n	801c1ec <__kernel_rem_pio2+0x3d4>
 801c248:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 801c338 <__kernel_rem_pio2+0x520>
 801c24c:	aa42      	add	r2, sp, #264	; 0x108
 801c24e:	4413      	add	r3, r2
 801c250:	465a      	mov	r2, fp
 801c252:	2a00      	cmp	r2, #0
 801c254:	da26      	bge.n	801c2a4 <__kernel_rem_pio2+0x48c>
 801c256:	b35e      	cbz	r6, 801c2b0 <__kernel_rem_pio2+0x498>
 801c258:	eeb1 7b46 	vneg.f64	d7, d6
 801c25c:	ed87 7b00 	vstr	d7, [r7]
 801c260:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801c264:	aa44      	add	r2, sp, #272	; 0x110
 801c266:	2301      	movs	r3, #1
 801c268:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c26c:	459b      	cmp	fp, r3
 801c26e:	da22      	bge.n	801c2b6 <__kernel_rem_pio2+0x49e>
 801c270:	b10e      	cbz	r6, 801c276 <__kernel_rem_pio2+0x45e>
 801c272:	eeb1 7b47 	vneg.f64	d7, d7
 801c276:	ed87 7b02 	vstr	d7, [r7, #8]
 801c27a:	e7b7      	b.n	801c1ec <__kernel_rem_pio2+0x3d4>
 801c27c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801c338 <__kernel_rem_pio2+0x520>
 801c280:	aa42      	add	r2, sp, #264	; 0x108
 801c282:	4413      	add	r3, r2
 801c284:	f1bb 0f00 	cmp.w	fp, #0
 801c288:	da05      	bge.n	801c296 <__kernel_rem_pio2+0x47e>
 801c28a:	b10e      	cbz	r6, 801c290 <__kernel_rem_pio2+0x478>
 801c28c:	eeb1 7b47 	vneg.f64	d7, d7
 801c290:	ed87 7b00 	vstr	d7, [r7]
 801c294:	e7aa      	b.n	801c1ec <__kernel_rem_pio2+0x3d4>
 801c296:	ed33 6b02 	vldmdb	r3!, {d6}
 801c29a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c29e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c2a2:	e7ef      	b.n	801c284 <__kernel_rem_pio2+0x46c>
 801c2a4:	ed33 7b02 	vldmdb	r3!, {d7}
 801c2a8:	3a01      	subs	r2, #1
 801c2aa:	ee36 6b07 	vadd.f64	d6, d6, d7
 801c2ae:	e7d0      	b.n	801c252 <__kernel_rem_pio2+0x43a>
 801c2b0:	eeb0 7b46 	vmov.f64	d7, d6
 801c2b4:	e7d2      	b.n	801c25c <__kernel_rem_pio2+0x444>
 801c2b6:	ecb2 6b02 	vldmia	r2!, {d6}
 801c2ba:	3301      	adds	r3, #1
 801c2bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c2c0:	e7d4      	b.n	801c26c <__kernel_rem_pio2+0x454>
 801c2c2:	ed91 7b00 	vldr	d7, [r1]
 801c2c6:	ed91 5b02 	vldr	d5, [r1, #8]
 801c2ca:	3801      	subs	r0, #1
 801c2cc:	ee37 6b05 	vadd.f64	d6, d7, d5
 801c2d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c2d4:	ed81 6b00 	vstr	d6, [r1]
 801c2d8:	ee37 7b05 	vadd.f64	d7, d7, d5
 801c2dc:	ed81 7b02 	vstr	d7, [r1, #8]
 801c2e0:	e795      	b.n	801c20e <__kernel_rem_pio2+0x3f6>
 801c2e2:	ed92 7b00 	vldr	d7, [r2]
 801c2e6:	ed92 5b02 	vldr	d5, [r2, #8]
 801c2ea:	3901      	subs	r1, #1
 801c2ec:	ee37 6b05 	vadd.f64	d6, d7, d5
 801c2f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c2f4:	ed82 6b00 	vstr	d6, [r2]
 801c2f8:	ee37 7b05 	vadd.f64	d7, d7, d5
 801c2fc:	ed82 7b02 	vstr	d7, [r2, #8]
 801c300:	e78a      	b.n	801c218 <__kernel_rem_pio2+0x400>
 801c302:	ed33 6b02 	vldmdb	r3!, {d6}
 801c306:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c30a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c30e:	e78b      	b.n	801c228 <__kernel_rem_pio2+0x410>
 801c310:	eeb1 5b45 	vneg.f64	d5, d5
 801c314:	eeb1 6b46 	vneg.f64	d6, d6
 801c318:	ed87 5b00 	vstr	d5, [r7]
 801c31c:	eeb1 7b47 	vneg.f64	d7, d7
 801c320:	ed87 6b02 	vstr	d6, [r7, #8]
 801c324:	e78d      	b.n	801c242 <__kernel_rem_pio2+0x42a>
 801c326:	bf00      	nop
 801c328:	00000000 	.word	0x00000000
 801c32c:	41700000 	.word	0x41700000
 801c330:	00000000 	.word	0x00000000
 801c334:	3e700000 	.word	0x3e700000
	...

0801c340 <scalbn>:
 801c340:	ee10 1a90 	vmov	r1, s1
 801c344:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c348:	b98b      	cbnz	r3, 801c36e <scalbn+0x2e>
 801c34a:	ee10 3a10 	vmov	r3, s0
 801c34e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801c352:	4319      	orrs	r1, r3
 801c354:	d00a      	beq.n	801c36c <scalbn+0x2c>
 801c356:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801c408 <scalbn+0xc8>
 801c35a:	4b37      	ldr	r3, [pc, #220]	; (801c438 <scalbn+0xf8>)
 801c35c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c360:	4298      	cmp	r0, r3
 801c362:	da0b      	bge.n	801c37c <scalbn+0x3c>
 801c364:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 801c410 <scalbn+0xd0>
 801c368:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c36c:	4770      	bx	lr
 801c36e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801c372:	4293      	cmp	r3, r2
 801c374:	d107      	bne.n	801c386 <scalbn+0x46>
 801c376:	ee30 0b00 	vadd.f64	d0, d0, d0
 801c37a:	4770      	bx	lr
 801c37c:	ee10 1a90 	vmov	r1, s1
 801c380:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c384:	3b36      	subs	r3, #54	; 0x36
 801c386:	f24c 3250 	movw	r2, #50000	; 0xc350
 801c38a:	4290      	cmp	r0, r2
 801c38c:	dd0d      	ble.n	801c3aa <scalbn+0x6a>
 801c38e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801c418 <scalbn+0xd8>
 801c392:	ee10 3a90 	vmov	r3, s1
 801c396:	eeb0 6b47 	vmov.f64	d6, d7
 801c39a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801c420 <scalbn+0xe0>
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	fe27 7b05 	vselge.f64	d7, d7, d5
 801c3a4:	ee27 0b06 	vmul.f64	d0, d7, d6
 801c3a8:	4770      	bx	lr
 801c3aa:	4418      	add	r0, r3
 801c3ac:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801c3b0:	4298      	cmp	r0, r3
 801c3b2:	dcec      	bgt.n	801c38e <scalbn+0x4e>
 801c3b4:	2800      	cmp	r0, #0
 801c3b6:	dd0a      	ble.n	801c3ce <scalbn+0x8e>
 801c3b8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801c3bc:	ec53 2b10 	vmov	r2, r3, d0
 801c3c0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801c3c4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801c3c8:	ec43 2b10 	vmov	d0, r2, r3
 801c3cc:	4770      	bx	lr
 801c3ce:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801c3d2:	da09      	bge.n	801c3e8 <scalbn+0xa8>
 801c3d4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801c410 <scalbn+0xd0>
 801c3d8:	ee10 3a90 	vmov	r3, s1
 801c3dc:	eeb0 6b47 	vmov.f64	d6, d7
 801c3e0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 801c428 <scalbn+0xe8>
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	e7db      	b.n	801c3a0 <scalbn+0x60>
 801c3e8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801c3ec:	ec53 2b10 	vmov	r2, r3, d0
 801c3f0:	3036      	adds	r0, #54	; 0x36
 801c3f2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801c3f6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801c3fa:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 801c430 <scalbn+0xf0>
 801c3fe:	ec43 2b10 	vmov	d0, r2, r3
 801c402:	e7b1      	b.n	801c368 <scalbn+0x28>
 801c404:	f3af 8000 	nop.w
 801c408:	00000000 	.word	0x00000000
 801c40c:	43500000 	.word	0x43500000
 801c410:	c2f8f359 	.word	0xc2f8f359
 801c414:	01a56e1f 	.word	0x01a56e1f
 801c418:	8800759c 	.word	0x8800759c
 801c41c:	7e37e43c 	.word	0x7e37e43c
 801c420:	8800759c 	.word	0x8800759c
 801c424:	fe37e43c 	.word	0xfe37e43c
 801c428:	c2f8f359 	.word	0xc2f8f359
 801c42c:	81a56e1f 	.word	0x81a56e1f
 801c430:	00000000 	.word	0x00000000
 801c434:	3c900000 	.word	0x3c900000
 801c438:	ffff3cb0 	.word	0xffff3cb0
 801c43c:	00000000 	.word	0x00000000

0801c440 <floor>:
 801c440:	ee10 1a90 	vmov	r1, s1
 801c444:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c448:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801c44c:	2b13      	cmp	r3, #19
 801c44e:	b530      	push	{r4, r5, lr}
 801c450:	ee10 0a10 	vmov	r0, s0
 801c454:	ee10 5a10 	vmov	r5, s0
 801c458:	dc31      	bgt.n	801c4be <floor+0x7e>
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	da15      	bge.n	801c48a <floor+0x4a>
 801c45e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801c520 <floor+0xe0>
 801c462:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c466:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c46e:	dd07      	ble.n	801c480 <floor+0x40>
 801c470:	2900      	cmp	r1, #0
 801c472:	da4e      	bge.n	801c512 <floor+0xd2>
 801c474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801c478:	4308      	orrs	r0, r1
 801c47a:	d04d      	beq.n	801c518 <floor+0xd8>
 801c47c:	492a      	ldr	r1, [pc, #168]	; (801c528 <floor+0xe8>)
 801c47e:	2000      	movs	r0, #0
 801c480:	460b      	mov	r3, r1
 801c482:	4602      	mov	r2, r0
 801c484:	ec43 2b10 	vmov	d0, r2, r3
 801c488:	e020      	b.n	801c4cc <floor+0x8c>
 801c48a:	4a28      	ldr	r2, [pc, #160]	; (801c52c <floor+0xec>)
 801c48c:	411a      	asrs	r2, r3
 801c48e:	ea01 0402 	and.w	r4, r1, r2
 801c492:	4304      	orrs	r4, r0
 801c494:	d01a      	beq.n	801c4cc <floor+0x8c>
 801c496:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801c520 <floor+0xe0>
 801c49a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c49e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4a6:	ddeb      	ble.n	801c480 <floor+0x40>
 801c4a8:	2900      	cmp	r1, #0
 801c4aa:	bfbe      	ittt	lt
 801c4ac:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801c4b0:	fa40 f303 	asrlt.w	r3, r0, r3
 801c4b4:	18c9      	addlt	r1, r1, r3
 801c4b6:	ea21 0102 	bic.w	r1, r1, r2
 801c4ba:	2000      	movs	r0, #0
 801c4bc:	e7e0      	b.n	801c480 <floor+0x40>
 801c4be:	2b33      	cmp	r3, #51	; 0x33
 801c4c0:	dd05      	ble.n	801c4ce <floor+0x8e>
 801c4c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c4c6:	d101      	bne.n	801c4cc <floor+0x8c>
 801c4c8:	ee30 0b00 	vadd.f64	d0, d0, d0
 801c4cc:	bd30      	pop	{r4, r5, pc}
 801c4ce:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801c4d2:	f04f 32ff 	mov.w	r2, #4294967295
 801c4d6:	40e2      	lsrs	r2, r4
 801c4d8:	4210      	tst	r0, r2
 801c4da:	d0f7      	beq.n	801c4cc <floor+0x8c>
 801c4dc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801c520 <floor+0xe0>
 801c4e0:	ee30 0b07 	vadd.f64	d0, d0, d7
 801c4e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801c4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4ec:	ddc8      	ble.n	801c480 <floor+0x40>
 801c4ee:	2900      	cmp	r1, #0
 801c4f0:	da02      	bge.n	801c4f8 <floor+0xb8>
 801c4f2:	2b14      	cmp	r3, #20
 801c4f4:	d103      	bne.n	801c4fe <floor+0xbe>
 801c4f6:	3101      	adds	r1, #1
 801c4f8:	ea20 0002 	bic.w	r0, r0, r2
 801c4fc:	e7c0      	b.n	801c480 <floor+0x40>
 801c4fe:	2401      	movs	r4, #1
 801c500:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801c504:	fa04 f303 	lsl.w	r3, r4, r3
 801c508:	4418      	add	r0, r3
 801c50a:	4285      	cmp	r5, r0
 801c50c:	bf88      	it	hi
 801c50e:	1909      	addhi	r1, r1, r4
 801c510:	e7f2      	b.n	801c4f8 <floor+0xb8>
 801c512:	2000      	movs	r0, #0
 801c514:	4601      	mov	r1, r0
 801c516:	e7b3      	b.n	801c480 <floor+0x40>
 801c518:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801c51c:	e7b0      	b.n	801c480 <floor+0x40>
 801c51e:	bf00      	nop
 801c520:	8800759c 	.word	0x8800759c
 801c524:	7e37e43c 	.word	0x7e37e43c
 801c528:	bff00000 	.word	0xbff00000
 801c52c:	000fffff 	.word	0x000fffff

0801c530 <_init>:
 801c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c532:	bf00      	nop
 801c534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c536:	bc08      	pop	{r3}
 801c538:	469e      	mov	lr, r3
 801c53a:	4770      	bx	lr

0801c53c <_fini>:
 801c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c53e:	bf00      	nop
 801c540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c542:	bc08      	pop	{r3}
 801c544:	469e      	mov	lr, r3
 801c546:	4770      	bx	lr
