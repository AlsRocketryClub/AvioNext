
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c5c0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a3c  0801c890  0801c890  0002c890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d2cc  0801d2cc  0002d2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d2d4  0801d2d4  0002d2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801d2d8  0801d2d8  0002d2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  0801d2dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000028a4  240002d4  0801d5b0  000302d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24002b78  0801d5b0  00032b78  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a227  00000000  00000000  00030302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000632f  00000000  00000000  0006a529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002db0  00000000  00000000  00070858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002b28  00000000  00000000  00073608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ba48  00000000  00000000  00076130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ddc6  00000000  00000000  00081b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f9b7  00000000  00000000  000bf93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023f2f5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000da94  00000000  00000000  0023f348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d4 	.word	0x240002d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c878 	.word	0x0801c878

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d8 	.word	0x240002d8
 800030c:	0801c878 	.word	0x0801c878

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	f5ad 5d09 	sub.w	sp, sp, #8768	; 0x2240
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab4:	f002 f8f2 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab8:	f000 f89c 	bl	8000bf4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000abc:	f000 f916 	bl	8000cec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac0:	f000 fec4 	bl	800184c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ac4:	f000 fe62 	bl	800178c <MX_DMA_Init>
  MX_SPI3_Init();
 8000ac8:	f000 fb98 	bl	80011fc <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8000acc:	f000 fa28 	bl	8000f20 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8000ad0:	f000 fe10 	bl	80016f4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000ad4:	f000 f93e 	bl	8000d54 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000ad8:	f000 fca2 	bl	8001420 <MX_TIM4_Init>
  MX_ADC3_Init();
 8000adc:	f000 f9b2 	bl	8000e44 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000ae0:	f000 fb36 	bl	8001150 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000ae4:	f000 fa80 	bl	8000fe8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000ae8:	f000 fbde 	bl	80012a8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000aec:	f000 fd14 	bl	8001518 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000af0:	f000 fc32 	bl	8001358 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000af4:	f016 fe12 	bl	801771c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000af8:	f000 fad4 	bl	80010a4 <MX_SPI1_Init>
  MX_UART4_Init();
 8000afc:	f000 fdae 	bl	800165c <MX_UART4_Init>
  MX_FATFS_Init();
 8000b00:	f011 fc2a 	bl	8012358 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8000b04:	f000 fab0 	bl	8001068 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8000b08:	f000 fd60 	bl	80015cc <MX_TIM13_Init>
  MX_TIM14_Init();
 8000b0c:	f000 fd82 	bl	8001614 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  FATFS FatFs;
  FIL Fil;
  FRESULT FR_Status;

  FR_Status = f_mount(&FatFs, SDPath, 1);
 8000b10:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <main+0x12c>)
 8000b12:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8000b16:	443b      	add	r3, r7
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4930      	ldr	r1, [pc, #192]	; (8000bdc <main+0x130>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f015 fff1 	bl	8016b04 <f_mount>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f242 223f 	movw	r2, #8767	; 0x223f
 8000b28:	443a      	add	r2, r7
 8000b2a:	7013      	strb	r3, [r2, #0]




  while(1){
	  HAL_ADC_Start(&hadc1); // start the adc
 8000b2c:	482c      	ldr	r0, [pc, #176]	; (8000be0 <main+0x134>)
 8000b2e:	f002 fe75 	bl	800381c <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8000b32:	2164      	movs	r1, #100	; 0x64
 8000b34:	482a      	ldr	r0, [pc, #168]	; (8000be0 <main+0x134>)
 8000b36:	f002 ff6f 	bl	8003a18 <HAL_ADC_PollForConversion>

	  uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8000b3a:	4829      	ldr	r0, [pc, #164]	; (8000be0 <main+0x134>)
 8000b3c:	f003 f860 	bl	8003c00 <HAL_ADC_GetValue>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f242 223c 	movw	r2, #8764	; 0x223c
 8000b46:	443a      	add	r2, r7
 8000b48:	8013      	strh	r3, [r2, #0]

	  char debug_data[100];
	  sprintf(debug_data, "%d, %d\n",HAL_GetTick(), adc_val);
 8000b4a:	f002 f92d 	bl	8002da8 <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	f242 233c 	movw	r3, #8764	; 0x223c
 8000b54:	443b      	add	r3, r7
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	4822      	ldr	r0, [pc, #136]	; (8000be4 <main+0x138>)
 8000b5a:	f500 5109 	add.w	r1, r0, #8768	; 0x2240
 8000b5e:	19c8      	adds	r0, r1, r7
 8000b60:	4921      	ldr	r1, [pc, #132]	; (8000be8 <main+0x13c>)
 8000b62:	f018 f97f 	bl	8018e64 <siprintf>
	  CDC_Transmit_HS(debug_data, strlen(debug_data));
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <main+0x138>)
 8000b68:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8000b6c:	443b      	add	r3, r7
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fbce 	bl	8000310 <strlen>
 8000b74:	4602      	mov	r2, r0
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <main+0x138>)
 8000b78:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8000b7c:	443b      	add	r3, r7
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f016 fe8b 	bl	801789c <CDC_Transmit_HS>
	  FR_Status = f_open(&Fil, "MyTextFile.txt", FA_OPEN_APPEND | FA_WRITE);
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <main+0x140>)
 8000b88:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8000b8c:	443b      	add	r3, r7
 8000b8e:	2232      	movs	r2, #50	; 0x32
 8000b90:	4917      	ldr	r1, [pc, #92]	; (8000bf0 <main+0x144>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f015 fffc 	bl	8016b90 <f_open>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f242 223f 	movw	r2, #8767	; 0x223f
 8000b9e:	443a      	add	r2, r7
 8000ba0:	7013      	strb	r3, [r2, #0]
	  f_puts(debug_data, &Fil);
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <main+0x140>)
 8000ba4:	f502 5309 	add.w	r3, r2, #8768	; 0x2240
 8000ba8:	19da      	adds	r2, r3, r7
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <main+0x138>)
 8000bac:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8000bb0:	443b      	add	r3, r7
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f016 fc6a 	bl	801748e <f_puts>
	  f_close(&Fil);
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <main+0x140>)
 8000bbc:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8000bc0:	443b      	add	r3, r7
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f016 fbc2 	bl	801734c <f_close>

	  HAL_ADC_Stop(&hadc1); // stop adc
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <main+0x134>)
 8000bca:	f002 fef1 	bl	80039b0 <HAL_ADC_Stop>

	  HAL_Delay (1); // wait for 500ms
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f002 f8f6 	bl	8002dc0 <HAL_Delay>
  while(1){
 8000bd4:	e7aa      	b.n	8000b2c <main+0x80>
 8000bd6:	bf00      	nop
 8000bd8:	ffffefc4 	.word	0xffffefc4
 8000bdc:	24000d1c 	.word	0x24000d1c
 8000be0:	240002f0 	.word	0x240002f0
 8000be4:	ffffddc4 	.word	0xffffddc4
 8000be8:	0801c8a4 	.word	0x0801c8a4
 8000bec:	ffffdf94 	.word	0xffffdf94
 8000bf0:	0801c8ac 	.word	0x0801c8ac

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09c      	sub	sp, #112	; 0x70
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	224c      	movs	r2, #76	; 0x4c
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f017 fad6 	bl	80181b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f017 fad0 	bl	80181b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c14:	2002      	movs	r0, #2
 8000c16:	f007 ffb9 	bl	8008b8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <SystemClock_Config+0xf4>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c26:	4a30      	ldr	r2, [pc, #192]	; (8000ce8 <SystemClock_Config+0xf4>)
 8000c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <SystemClock_Config+0xf4>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c3a:	bf00      	nop
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <SystemClock_Config+0xf4>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c48:	d1f8      	bne.n	8000c3c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000c4a:	2323      	movs	r3, #35	; 0x23
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000c58:	2340      	movs	r3, #64	; 0x40
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c60:	2302      	movs	r3, #2
 8000c62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c64:	2302      	movs	r3, #2
 8000c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c68:	2305      	movs	r3, #5
 8000c6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000c6c:	2318      	movs	r3, #24
 8000c6e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c74:	2305      	movs	r3, #5
 8000c76:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f007 ffc7 	bl	8008c20 <HAL_RCC_OscConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c98:	f000 ff4c 	bl	8001b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9c:	233f      	movs	r3, #63	; 0x3f
 8000c9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cac:	2340      	movs	r3, #64	; 0x40
 8000cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cb0:	2340      	movs	r3, #64	; 0x40
 8000cb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cba:	2340      	movs	r3, #64	; 0x40
 8000cbc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f008 fb86 	bl	80093d4 <HAL_RCC_ClockConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000cce:	f000 ff31 	bl	8001b34 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000cd2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f008 fd31 	bl	8009740 <HAL_RCC_MCOConfig>
}
 8000cde:	bf00      	nop
 8000ce0:	3770      	adds	r7, #112	; 0x70
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	58024800 	.word	0x58024800

08000cec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0ae      	sub	sp, #184	; 0xb8
 8000cf0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	22b8      	movs	r2, #184	; 0xb8
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f017 fa5b 	bl	80181b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8000cfe:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8000d02:	f04f 0300 	mov.w	r3, #0
 8000d06:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8000d0e:	230f      	movs	r3, #15
 8000d10:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000d12:	2304      	movs	r3, #4
 8000d14:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d1e:	23c0      	movs	r3, #192	; 0xc0
 8000d20:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8000d26:	f640 3386 	movw	r3, #2950	; 0xb86
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d30:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f008 ff40 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000d46:	f000 fef5 	bl	8001b34 <Error_Handler>
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	37b8      	adds	r7, #184	; 0xb8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2224      	movs	r2, #36	; 0x24
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f017 fa21 	bl	80181b4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d72:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d74:	4a31      	ldr	r2, [pc, #196]	; (8000e3c <MX_ADC1_Init+0xe8>)
 8000d76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000d78:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d7a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000d7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000d80:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd2:	4819      	ldr	r0, [pc, #100]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000dd4:	f002 fb1a 	bl	800340c <HAL_ADC_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dde:	f000 fea9 	bl	8001b34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	4812      	ldr	r0, [pc, #72]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000dee:	f003 fefb 	bl	8004be8 <HAL_ADCEx_MultiModeConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000df8:	f000 fe9c 	bl	8001b34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <MX_ADC1_Init+0xec>)
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e00:	2306      	movs	r3, #6
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000e04:	2303      	movs	r3, #3
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e0c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000e22:	f002 fefb 	bl	8003c1c <HAL_ADC_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000e2c:	f000 fe82 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3730      	adds	r7, #48	; 0x30
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	240002f0 	.word	0x240002f0
 8000e3c:	40022000 	.word	0x40022000
 8000e40:	3ac04000 	.word	0x3ac04000

08000e44 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2224      	movs	r2, #36	; 0x24
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f017 f9af 	bl	80181b4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e58:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <MX_ADC3_Init+0xd4>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e5e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e64:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e66:	2208      	movs	r2, #8
 8000e68:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000eca:	4812      	ldr	r0, [pc, #72]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000ecc:	f002 fa9e 	bl	800340c <HAL_ADC_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000ed6:	f000 fe2d 	bl	8001b34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <MX_ADC3_Init+0xd8>)
 8000edc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ede:	2306      	movs	r3, #6
 8000ee0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000eea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eec:	2304      	movs	r3, #4
 8000eee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_ADC3_Init+0xd0>)
 8000efe:	f002 fe8d 	bl	8003c1c <HAL_ADC_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000f08:	f000 fe14 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	24000360 	.word	0x24000360
 8000f18:	58026000 	.word	0x58026000
 8000f1c:	04300002 	.word	0x04300002

08000f20 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000f24:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f26:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <MX_FDCAN3_Init+0xc4>)
 8000f28:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000f42:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000f54:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f56:	2202      	movs	r2, #2
 8000f58:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000fc8:	2204      	movs	r2, #4
 8000fca:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_FDCAN3_Init+0xc0>)
 8000fce:	f005 fcbd 	bl	800694c <HAL_FDCAN_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000fd8:	f000 fdac 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	240004c0 	.word	0x240004c0
 8000fe4:	4000d400 	.word	0x4000d400

08000fe8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_I2C2_Init+0x74>)
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <MX_I2C2_Init+0x78>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x107075B0;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_I2C2_Init+0x74>)
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <MX_I2C2_Init+0x7c>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_I2C2_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_I2C2_Init+0x74>)
 8001000:	2201      	movs	r2, #1
 8001002:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_I2C2_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_I2C2_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_I2C2_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_I2C2_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_I2C2_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <MX_I2C2_Init+0x74>)
 8001024:	f006 f9b8 	bl	8007398 <HAL_I2C_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800102e:	f000 fd81 	bl	8001b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001032:	2100      	movs	r1, #0
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <MX_I2C2_Init+0x74>)
 8001036:	f006 fa59 	bl	80074ec <HAL_I2CEx_ConfigAnalogFilter>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001040:	f000 fd78 	bl	8001b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001044:	2100      	movs	r1, #0
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_I2C2_Init+0x74>)
 8001048:	f006 fa9b 	bl	8007582 <HAL_I2CEx_ConfigDigitalFilter>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001052:	f000 fd6f 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	24000560 	.word	0x24000560
 8001060:	40005800 	.word	0x40005800
 8001064:	107075b0 	.word	0x107075b0

08001068 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_SDMMC2_SD_Init+0x34>)
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <MX_SDMMC2_SD_Init+0x38>)
 8001070:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_SDMMC2_SD_Init+0x34>)
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_SDMMC2_SD_Init+0x34>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_SDMMC2_SD_Init+0x34>)
 8001080:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001084:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <MX_SDMMC2_SD_Init+0x34>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 8;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <MX_SDMMC2_SD_Init+0x34>)
 800108e:	2208      	movs	r2, #8
 8001090:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	240005b4 	.word	0x240005b4
 80010a0:	48022400 	.word	0x48022400

080010a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010aa:	4a28      	ldr	r2, [pc, #160]	; (800114c <MX_SPI1_Init+0xa8>)
 80010ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010be:	2207      	movs	r2, #7
 80010c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010d8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80010dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_SPI1_Init+0xa4>)
 80010f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_SPI1_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_SPI1_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_SPI1_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_SPI1_Init+0xa4>)
 8001112:	2200      	movs	r2, #0
 8001114:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_SPI1_Init+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_SPI1_Init+0xa4>)
 800111e:	2200      	movs	r2, #0
 8001120:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_SPI1_Init+0xa4>)
 8001124:	2200      	movs	r2, #0
 8001126:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_SPI1_Init+0xa4>)
 800112a:	2200      	movs	r2, #0
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_SPI1_Init+0xa4>)
 8001130:	2200      	movs	r2, #0
 8001132:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_SPI1_Init+0xa4>)
 8001136:	f00c fd8d 	bl	800dc54 <HAL_SPI_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001140:	f000 fcf8 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	24000630 	.word	0x24000630
 800114c:	40013000 	.word	0x40013000

08001150 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <MX_SPI2_Init+0xa4>)
 8001156:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <MX_SPI2_Init+0xa8>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <MX_SPI2_Init+0xa4>)
 800115c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001160:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <MX_SPI2_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_SPI2_Init+0xa4>)
 800116a:	2207      	movs	r2, #7
 800116c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_SPI2_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_SPI2_Init+0xa4>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800117a:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <MX_SPI2_Init+0xa4>)
 800117c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001180:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_SPI2_Init+0xa4>)
 8001184:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001188:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_SPI2_Init+0xa4>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_SPI2_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_SPI2_Init+0xa4>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_SPI2_Init+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_SPI2_Init+0xa4>)
 80011a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_SPI2_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_SPI2_Init+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_SPI2_Init+0xa4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_SPI2_Init+0xa4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_SPI2_Init+0xa4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_SPI2_Init+0xa4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_SPI2_Init+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_SPI2_Init+0xa4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_SPI2_Init+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_SPI2_Init+0xa4>)
 80011e2:	f00c fd37 	bl	800dc54 <HAL_SPI_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80011ec:	f000 fca2 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	240006b8 	.word	0x240006b8
 80011f8:	40003800 	.word	0x40003800

080011fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001202:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <MX_SPI3_Init+0xa8>)
 8001204:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001206:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001208:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800120c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001216:	2207      	movs	r2, #7
 8001218:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <MX_SPI3_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001228:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800122c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001230:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001234:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_SPI3_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_SPI3_Init+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001250:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001254:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_SPI3_Init+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MX_SPI3_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_SPI3_Init+0xa4>)
 800127c:	2200      	movs	r2, #0
 800127e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001282:	2200      	movs	r2, #0
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_SPI3_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_SPI3_Init+0xa4>)
 800128e:	f00c fce1 	bl	800dc54 <HAL_SPI_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001298:	f000 fc4c 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	24000740 	.word	0x24000740
 80012a4:	40003c00 	.word	0x40003c00

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	615a      	str	r2, [r3, #20]
 80012ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_TIM2_Init+0xac>)
 80012ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_TIM2_Init+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_TIM2_Init+0xac>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_TIM2_Init+0xac>)
 80012e2:	225a      	movs	r2, #90	; 0x5a
 80012e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_TIM2_Init+0xac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_TIM2_Init+0xac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012f2:	4818      	ldr	r0, [pc, #96]	; (8001354 <MX_TIM2_Init+0xac>)
 80012f4:	f00c fe44 	bl	800df80 <HAL_TIM_PWM_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012fe:	f000 fc19 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4810      	ldr	r0, [pc, #64]	; (8001354 <MX_TIM2_Init+0xac>)
 8001312:	f00d fc6d 	bl	800ebf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800131c:	f000 fc0a 	bl	8001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001320:	2360      	movs	r3, #96	; 0x60
 8001322:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	2208      	movs	r2, #8
 8001334:	4619      	mov	r1, r3
 8001336:	4807      	ldr	r0, [pc, #28]	; (8001354 <MX_TIM2_Init+0xac>)
 8001338:	f00c ff98 	bl	800e26c <HAL_TIM_PWM_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001342:	f000 fbf7 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001346:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_TIM2_Init+0xac>)
 8001348:	f001 f92a 	bl	80025a0 <HAL_TIM_MspPostInit>

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	240007c8 	.word	0x240007c8

08001358 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <MX_TIM3_Init+0xc0>)
 800137e:	4a27      	ldr	r2, [pc, #156]	; (800141c <MX_TIM3_Init+0xc4>)
 8001380:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <MX_TIM3_Init+0xc0>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <MX_TIM3_Init+0xc0>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_TIM3_Init+0xc0>)
 8001390:	225a      	movs	r2, #90	; 0x5a
 8001392:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_TIM3_Init+0xc0>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_TIM3_Init+0xc0>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013a0:	481d      	ldr	r0, [pc, #116]	; (8001418 <MX_TIM3_Init+0xc0>)
 80013a2:	f00c fded 	bl	800df80 <HAL_TIM_PWM_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80013ac:	f000 fbc2 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4816      	ldr	r0, [pc, #88]	; (8001418 <MX_TIM3_Init+0xc0>)
 80013c0:	f00d fc16 	bl	800ebf0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80013ca:	f000 fbb3 	bl	8001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ce:	2360      	movs	r3, #96	; 0x60
 80013d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_TIM3_Init+0xc0>)
 80013e6:	f00c ff41 	bl	800e26c <HAL_TIM_PWM_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013f0:	f000 fba0 	bl	8001b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	2204      	movs	r2, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4807      	ldr	r0, [pc, #28]	; (8001418 <MX_TIM3_Init+0xc0>)
 80013fc:	f00c ff36 	bl	800e26c <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001406:	f000 fb95 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800140a:	4803      	ldr	r0, [pc, #12]	; (8001418 <MX_TIM3_Init+0xc0>)
 800140c:	f001 f8c8 	bl	80025a0 <HAL_TIM_MspPostInit>

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	24000814 	.word	0x24000814
 800141c:	40000400 	.word	0x40000400

08001420 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001432:	463b      	mov	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001444:	4b32      	ldr	r3, [pc, #200]	; (8001510 <MX_TIM4_Init+0xf0>)
 8001446:	4a33      	ldr	r2, [pc, #204]	; (8001514 <MX_TIM4_Init+0xf4>)
 8001448:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 29;
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <MX_TIM4_Init+0xf0>)
 800144c:	221d      	movs	r2, #29
 800144e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <MX_TIM4_Init+0xf0>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_TIM4_Init+0xf0>)
 8001458:	f242 720f 	movw	r2, #9999	; 0x270f
 800145c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <MX_TIM4_Init+0xf0>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_TIM4_Init+0xf0>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800146a:	4829      	ldr	r0, [pc, #164]	; (8001510 <MX_TIM4_Init+0xf0>)
 800146c:	f00c fd88 	bl	800df80 <HAL_TIM_PWM_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001476:	f000 fb5d 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4821      	ldr	r0, [pc, #132]	; (8001510 <MX_TIM4_Init+0xf0>)
 800148a:	f00d fbb1 	bl	800ebf0 <HAL_TIMEx_MasterConfigSynchronization>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001494:	f000 fb4e 	bl	8001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001498:	2360      	movs	r3, #96	; 0x60
 800149a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	4818      	ldr	r0, [pc, #96]	; (8001510 <MX_TIM4_Init+0xf0>)
 80014b0:	f00c fedc 	bl	800e26c <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80014ba:	f000 fb3b 	bl	8001b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	2204      	movs	r2, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4812      	ldr	r0, [pc, #72]	; (8001510 <MX_TIM4_Init+0xf0>)
 80014c6:	f00c fed1 	bl	800e26c <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80014d0:	f000 fb30 	bl	8001b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	2208      	movs	r2, #8
 80014d8:	4619      	mov	r1, r3
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <MX_TIM4_Init+0xf0>)
 80014dc:	f00c fec6 	bl	800e26c <HAL_TIM_PWM_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80014e6:	f000 fb25 	bl	8001b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ea:	463b      	mov	r3, r7
 80014ec:	220c      	movs	r2, #12
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM4_Init+0xf0>)
 80014f2:	f00c febb 	bl	800e26c <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80014fc:	f000 fb1a 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM4_Init+0xf0>)
 8001502:	f001 f84d 	bl	80025a0 <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	24000860 	.word	0x24000860
 8001514:	40000800 	.word	0x40000800

08001518 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <MX_TIM5_Init+0xac>)
 800153e:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <MX_TIM5_Init+0xb0>)
 8001540:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <MX_TIM5_Init+0xac>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <MX_TIM5_Init+0xac>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <MX_TIM5_Init+0xac>)
 8001550:	225a      	movs	r2, #90	; 0x5a
 8001552:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <MX_TIM5_Init+0xac>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <MX_TIM5_Init+0xac>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001560:	4818      	ldr	r0, [pc, #96]	; (80015c4 <MX_TIM5_Init+0xac>)
 8001562:	f00c fd0d 	bl	800df80 <HAL_TIM_PWM_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800156c:	f000 fae2 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	4619      	mov	r1, r3
 800157e:	4811      	ldr	r0, [pc, #68]	; (80015c4 <MX_TIM5_Init+0xac>)
 8001580:	f00d fb36 	bl	800ebf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800158a:	f000 fad3 	bl	8001b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158e:	2360      	movs	r3, #96	; 0x60
 8001590:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	220c      	movs	r2, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	4807      	ldr	r0, [pc, #28]	; (80015c4 <MX_TIM5_Init+0xac>)
 80015a6:	f00c fe61 	bl	800e26c <HAL_TIM_PWM_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80015b0:	f000 fac0 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <MX_TIM5_Init+0xac>)
 80015b6:	f000 fff3 	bl	80025a0 <HAL_TIM_MspPostInit>

}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	240008ac 	.word	0x240008ac
 80015c8:	40000c00 	.word	0x40000c00

080015cc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_TIM13_Init+0x40>)
 80015d2:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <MX_TIM13_Init+0x44>)
 80015d4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <MX_TIM13_Init+0x40>)
 80015d8:	2263      	movs	r2, #99	; 0x63
 80015da:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_TIM13_Init+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <MX_TIM13_Init+0x40>)
 80015e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_TIM13_Init+0x40>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_TIM13_Init+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_TIM13_Init+0x40>)
 80015f8:	f00c fc6b 	bl	800ded2 <HAL_TIM_Base_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001602:	f000 fa97 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	240008f8 	.word	0x240008f8
 8001610:	40001c00 	.word	0x40001c00

08001614 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_TIM14_Init+0x40>)
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <MX_TIM14_Init+0x44>)
 800161c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <MX_TIM14_Init+0x40>)
 8001620:	2263      	movs	r2, #99	; 0x63
 8001622:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_TIM14_Init+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_TIM14_Init+0x40>)
 800162c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001630:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_TIM14_Init+0x40>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_TIM14_Init+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_TIM14_Init+0x40>)
 8001640:	f00c fc47 	bl	800ded2 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800164a:	f000 fa73 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	24000944 	.word	0x24000944
 8001658:	40002000 	.word	0x40002000

0800165c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <MX_UART4_Init+0x90>)
 8001662:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <MX_UART4_Init+0x94>)
 8001664:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <MX_UART4_Init+0x90>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <MX_UART4_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MX_UART4_Init+0x90>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_UART4_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_UART4_Init+0x90>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <MX_UART4_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_UART4_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_UART4_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_UART4_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_UART4_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016a4:	4811      	ldr	r0, [pc, #68]	; (80016ec <MX_UART4_Init+0x90>)
 80016a6:	f00d fb5d 	bl	800ed64 <HAL_UART_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80016b0:	f000 fa40 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_UART4_Init+0x90>)
 80016b8:	f00e fc63 	bl	800ff82 <HAL_UARTEx_SetTxFifoThreshold>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80016c2:	f000 fa37 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4808      	ldr	r0, [pc, #32]	; (80016ec <MX_UART4_Init+0x90>)
 80016ca:	f00e fc98 	bl	800fffe <HAL_UARTEx_SetRxFifoThreshold>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80016d4:	f000 fa2e 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_UART4_Init+0x90>)
 80016da:	f00e fc19 	bl	800ff10 <HAL_UARTEx_DisableFifoMode>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f000 fa26 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	24000be8 	.word	0x24000be8
 80016f0:	40004c00 	.word	0x40004c00

080016f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <MX_USART6_UART_Init+0x90>)
 80016fa:	4a23      	ldr	r2, [pc, #140]	; (8001788 <MX_USART6_UART_Init+0x94>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <MX_USART6_UART_Init+0x90>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <MX_USART6_UART_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_USART6_UART_Init+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_USART6_UART_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_USART6_UART_Init+0x90>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_USART6_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_USART6_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_USART6_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_USART6_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <MX_USART6_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800173c:	4811      	ldr	r0, [pc, #68]	; (8001784 <MX_USART6_UART_Init+0x90>)
 800173e:	f00d fb11 	bl	800ed64 <HAL_UART_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001748:	f000 f9f4 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174c:	2100      	movs	r1, #0
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <MX_USART6_UART_Init+0x90>)
 8001750:	f00e fc17 	bl	800ff82 <HAL_UARTEx_SetTxFifoThreshold>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800175a:	f000 f9eb 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175e:	2100      	movs	r1, #0
 8001760:	4808      	ldr	r0, [pc, #32]	; (8001784 <MX_USART6_UART_Init+0x90>)
 8001762:	f00e fc4c 	bl	800fffe <HAL_UARTEx_SetRxFifoThreshold>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800176c:	f000 f9e2 	bl	8001b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_USART6_UART_Init+0x90>)
 8001772:	f00e fbcd 	bl	800ff10 <HAL_UARTEx_DisableFifoMode>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800177c:	f000 f9da 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	24000c7c 	.word	0x24000c7c
 8001788:	40011400 	.word	0x40011400

0800178c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001792:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <MX_DMA_Init+0xbc>)
 8001794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001798:	4a2b      	ldr	r2, [pc, #172]	; (8001848 <MX_DMA_Init+0xbc>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017a2:	4b29      	ldr	r3, [pc, #164]	; (8001848 <MX_DMA_Init+0xbc>)
 80017a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <MX_DMA_Init+0xbc>)
 80017b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017b6:	4a24      	ldr	r2, [pc, #144]	; (8001848 <MX_DMA_Init+0xbc>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <MX_DMA_Init+0xbc>)
 80017c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	200b      	movs	r0, #11
 80017d4:	f003 fbc5 	bl	8004f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017d8:	200b      	movs	r0, #11
 80017da:	f003 fbdc 	bl	8004f96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	200c      	movs	r0, #12
 80017e4:	f003 fbbd 	bl	8004f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017e8:	200c      	movs	r0, #12
 80017ea:	f003 fbd4 	bl	8004f96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	200d      	movs	r0, #13
 80017f4:	f003 fbb5 	bl	8004f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80017f8:	200d      	movs	r0, #13
 80017fa:	f003 fbcc 	bl	8004f96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	200e      	movs	r0, #14
 8001804:	f003 fbad 	bl	8004f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001808:	200e      	movs	r0, #14
 800180a:	f003 fbc4 	bl	8004f96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	200f      	movs	r0, #15
 8001814:	f003 fba5 	bl	8004f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001818:	200f      	movs	r0, #15
 800181a:	f003 fbbc 	bl	8004f96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	2010      	movs	r0, #16
 8001824:	f003 fb9d 	bl	8004f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001828:	2010      	movs	r0, #16
 800182a:	f003 fbb4 	bl	8004f96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2046      	movs	r0, #70	; 0x46
 8001834:	f003 fb95 	bl	8004f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001838:	2046      	movs	r0, #70	; 0x46
 800183a:	f003 fbac 	bl	8004f96 <HAL_NVIC_EnableIRQ>

}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	58024400 	.word	0x58024400

0800184c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001862:	4bac      	ldr	r3, [pc, #688]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001868:	4aaa      	ldr	r2, [pc, #680]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001872:	4ba8      	ldr	r3, [pc, #672]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	623b      	str	r3, [r7, #32]
 800187e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001880:	4ba4      	ldr	r3, [pc, #656]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001886:	4aa3      	ldr	r2, [pc, #652]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 8001888:	f043 0320 	orr.w	r3, r3, #32
 800188c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001890:	4ba0      	ldr	r3, [pc, #640]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	4b9d      	ldr	r3, [pc, #628]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 80018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a4:	4a9b      	ldr	r2, [pc, #620]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 80018a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ae:	4b99      	ldr	r3, [pc, #612]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 80018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018bc:	4b95      	ldr	r3, [pc, #596]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 80018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c2:	4a94      	ldr	r2, [pc, #592]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018cc:	4b91      	ldr	r3, [pc, #580]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b8e      	ldr	r3, [pc, #568]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e0:	4a8c      	ldr	r2, [pc, #560]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ea:	4b8a      	ldr	r3, [pc, #552]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 80018ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f8:	4b86      	ldr	r3, [pc, #536]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	4a85      	ldr	r2, [pc, #532]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001908:	4b82      	ldr	r3, [pc, #520]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 800190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001916:	4b7f      	ldr	r3, [pc, #508]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 8001918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191c:	4a7d      	ldr	r2, [pc, #500]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 800191e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001922:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001926:	4b7b      	ldr	r3, [pc, #492]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 8001928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001934:	4b77      	ldr	r3, [pc, #476]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 8001936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193a:	4a76      	ldr	r2, [pc, #472]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001944:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <MX_GPIO_Init+0x2c8>)
 8001946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f241 5104 	movw	r1, #5380	; 0x1504
 8001958:	486f      	ldr	r0, [pc, #444]	; (8001b18 <MX_GPIO_Init+0x2cc>)
 800195a:	f005 fd03 	bl	8007364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f248 0102 	movw	r1, #32770	; 0x8002
 8001964:	486d      	ldr	r0, [pc, #436]	; (8001b1c <MX_GPIO_Init+0x2d0>)
 8001966:	f005 fcfd 	bl	8007364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2130      	movs	r1, #48	; 0x30
 800196e:	486c      	ldr	r0, [pc, #432]	; (8001b20 <MX_GPIO_Init+0x2d4>)
 8001970:	f005 fcf8 	bl	8007364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	2102      	movs	r1, #2
 8001978:	486a      	ldr	r0, [pc, #424]	; (8001b24 <MX_GPIO_Init+0x2d8>)
 800197a:	f005 fcf3 	bl	8007364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8001984:	4868      	ldr	r0, [pc, #416]	; (8001b28 <MX_GPIO_Init+0x2dc>)
 8001986:	f005 fced 	bl	8007364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	210e      	movs	r1, #14
 800198e:	4867      	ldr	r0, [pc, #412]	; (8001b2c <MX_GPIO_Init+0x2e0>)
 8001990:	f005 fce8 	bl	8007364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f240 3101 	movw	r1, #769	; 0x301
 800199a:	4865      	ldr	r0, [pc, #404]	; (8001b30 <MX_GPIO_Init+0x2e4>)
 800199c:	f005 fce2 	bl	8007364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80019a0:	f241 5304 	movw	r3, #5380	; 0x1504
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	4619      	mov	r1, r3
 80019b8:	4857      	ldr	r0, [pc, #348]	; (8001b18 <MX_GPIO_Init+0x2cc>)
 80019ba:	f005 fb2b 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|GPIO_PIN_15;
 80019be:	f248 0302 	movw	r3, #32770	; 0x8002
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	4619      	mov	r1, r3
 80019d6:	4851      	ldr	r0, [pc, #324]	; (8001b1c <MX_GPIO_Init+0x2d0>)
 80019d8:	f005 fb1c 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019dc:	2330      	movs	r3, #48	; 0x30
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	4619      	mov	r1, r3
 80019f2:	484b      	ldr	r0, [pc, #300]	; (8001b20 <MX_GPIO_Init+0x2d4>)
 80019f4:	f005 fb0e 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 80019f8:	2302      	movs	r3, #2
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4845      	ldr	r0, [pc, #276]	; (8001b24 <MX_GPIO_Init+0x2d8>)
 8001a10:	f005 fb00 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8001a14:	2304      	movs	r3, #4
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	483f      	ldr	r0, [pc, #252]	; (8001b24 <MX_GPIO_Init+0x2d8>)
 8001a28:	f005 faf4 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8001a2c:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	4838      	ldr	r0, [pc, #224]	; (8001b28 <MX_GPIO_Init+0x2dc>)
 8001a46:	f005 fae5 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8001a4a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4832      	ldr	r0, [pc, #200]	; (8001b28 <MX_GPIO_Init+0x2dc>)
 8001a60:	f005 fad8 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a74:	4619      	mov	r1, r3
 8001a76:	482d      	ldr	r0, [pc, #180]	; (8001b2c <MX_GPIO_Init+0x2e0>)
 8001a78:	f005 facc 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8001a7c:	230e      	movs	r3, #14
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a90:	4619      	mov	r1, r3
 8001a92:	4826      	ldr	r0, [pc, #152]	; (8001b2c <MX_GPIO_Init+0x2e0>)
 8001a94:	f005 fabe 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8001a98:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aaa:	4619      	mov	r1, r3
 8001aac:	481a      	ldr	r0, [pc, #104]	; (8001b18 <MX_GPIO_Init+0x2cc>)
 8001aae:	f005 fab1 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8001ab2:	f240 3301 	movw	r3, #769	; 0x301
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4819      	ldr	r0, [pc, #100]	; (8001b30 <MX_GPIO_Init+0x2e4>)
 8001acc:	f005 faa2 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4812      	ldr	r0, [pc, #72]	; (8001b2c <MX_GPIO_Init+0x2e0>)
 8001ae4:	f005 fa96 	bl	8007014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001afa:	2300      	movs	r3, #0
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_GPIO_Init+0x2d0>)
 8001b06:	f005 fa85 	bl	8007014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3738      	adds	r7, #56	; 0x38
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	58024400 	.word	0x58024400
 8001b18:	58021000 	.word	0x58021000
 8001b1c:	58020000 	.word	0x58020000
 8001b20:	58020800 	.word	0x58020800
 8001b24:	58020400 	.word	0x58020400
 8001b28:	58021400 	.word	0x58021400
 8001b2c:	58021800 	.word	0x58021800
 8001b30:	58020c00 	.word	0x58020c00

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>
	...

08001b40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_MspInit+0x30>)
 8001b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b4c:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <HAL_MspInit+0x30>)
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_MspInit+0x30>)
 8001b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	58024400 	.word	0x58024400

08001b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	; 0x30
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5d      	ldr	r2, [pc, #372]	; (8001d08 <HAL_ADC_MspInit+0x194>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d159      	bne.n	8001c4a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b96:	4b5d      	ldr	r3, [pc, #372]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b9c:	4a5b      	ldr	r2, [pc, #364]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001b9e:	f043 0320 	orr.w	r3, r3, #32
 8001ba2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ba6:	4b59      	ldr	r3, [pc, #356]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001ba8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b55      	ldr	r3, [pc, #340]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bba:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc4:	4b51      	ldr	r3, [pc, #324]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	484a      	ldr	r0, [pc, #296]	; (8001d10 <HAL_ADC_MspInit+0x19c>)
 8001be6:	f005 fa15 	bl	8007014 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001bec:	4a4a      	ldr	r2, [pc, #296]	; (8001d18 <HAL_ADC_MspInit+0x1a4>)
 8001bee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001bf0:	4b48      	ldr	r3, [pc, #288]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001bf2:	2209      	movs	r2, #9
 8001bf4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf6:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfc:	4b45      	ldr	r3, [pc, #276]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c02:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c0a:	4b42      	ldr	r3, [pc, #264]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001c0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001c14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c20:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c2c:	4839      	ldr	r0, [pc, #228]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001c2e:	f003 f9cd 	bl	8004fcc <HAL_DMA_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001c38:	f7ff ff7c 	bl	8001b34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a35      	ldr	r2, [pc, #212]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001c40:	659a      	str	r2, [r3, #88]	; 0x58
 8001c42:	4a34      	ldr	r2, [pc, #208]	; (8001d14 <HAL_ADC_MspInit+0x1a0>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c48:	e059      	b.n	8001cfe <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <HAL_ADC_MspInit+0x1a8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d154      	bne.n	8001cfe <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c54:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	4a2c      	ldr	r2, [pc, #176]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c64:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c72:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c78:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <HAL_ADC_MspInit+0x198>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001c90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001c94:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001c98:	f001 f8b6 	bl	8002e08 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8001c9c:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_ADC_MspInit+0x1b0>)
 8001ca0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001ca4:	2273      	movs	r2, #115	; 0x73
 8001ca6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cba:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cca:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001cd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cda:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ce2:	480f      	ldr	r0, [pc, #60]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001ce4:	f003 f972 	bl	8004fcc <HAL_DMA_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8001cee:	f7ff ff21 	bl	8001b34 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001cf6:	659a      	str	r2, [r3, #88]	; 0x58
 8001cf8:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_ADC_MspInit+0x1ac>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cfe:	bf00      	nop
 8001d00:	3730      	adds	r7, #48	; 0x30
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	58024400 	.word	0x58024400
 8001d10:	58020000 	.word	0x58020000
 8001d14:	240003d0 	.word	0x240003d0
 8001d18:	40020088 	.word	0x40020088
 8001d1c:	58026000 	.word	0x58026000
 8001d20:	24000448 	.word	0x24000448
 8001d24:	400204b8 	.word	0x400204b8

08001d28 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0b8      	sub	sp, #224	; 0xe0
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	22b8      	movs	r2, #184	; 0xb8
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f016 fa33 	bl	80181b4 <memset>
  if(hfdcan->Instance==FDCAN3)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_FDCAN_MspInit+0xc4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d144      	bne.n	8001de2 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f007 ff27 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8001d78:	f7ff fedc 	bl	8001b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <HAL_FDCAN_MspInit+0xc8>)
 8001d7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d82:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_FDCAN_MspInit+0xc8>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d88:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001d8c:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_FDCAN_MspInit+0xc8>)
 8001d8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_FDCAN_MspInit+0xc8>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da0:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <HAL_FDCAN_MspInit+0xc8>)
 8001da2:	f043 0320 	orr.w	r3, r3, #32
 8001da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_FDCAN_MspInit+0xc8>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db8:	23c0      	movs	r3, #192	; 0xc0
 8001dba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dd6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_FDCAN_MspInit+0xcc>)
 8001dde:	f005 f919 	bl	8007014 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	37e0      	adds	r7, #224	; 0xe0
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	4000d400 	.word	0x4000d400
 8001df0:	58024400 	.word	0x58024400
 8001df4:	58021400 	.word	0x58021400

08001df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0b8      	sub	sp, #224	; 0xe0
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	22b8      	movs	r2, #184	; 0xb8
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f016 f9cb 	bl	80181b4 <memset>
  if(hi2c->Instance==I2C2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <HAL_I2C_MspInit+0xd4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d14d      	bne.n	8001ec4 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e28:	f04f 0208 	mov.w	r2, #8
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f007 febe 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001e4a:	f7ff fe73 	bl	8001b34 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_I2C_MspInit+0xd8>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e54:	4a1e      	ldr	r2, [pc, #120]	; (8001ed0 <HAL_I2C_MspInit+0xd8>)
 8001e56:	f043 0320 	orr.w	r3, r3, #32
 8001e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_I2C_MspInit+0xd8>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e72:	2312      	movs	r3, #18
 8001e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e84:	2304      	movs	r3, #4
 8001e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4810      	ldr	r0, [pc, #64]	; (8001ed4 <HAL_I2C_MspInit+0xdc>)
 8001e92:	f005 f8bf 	bl	8007014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_I2C_MspInit+0xd8>)
 8001e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <HAL_I2C_MspInit+0xd8>)
 8001e9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ea2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_I2C_MspInit+0xd8>)
 8001ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	2021      	movs	r0, #33	; 0x21
 8001eba:	f003 f852 	bl	8004f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ebe:	2021      	movs	r0, #33	; 0x21
 8001ec0:	f003 f869 	bl	8004f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ec4:	bf00      	nop
 8001ec6:	37e0      	adds	r7, #224	; 0xe0
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40005800 	.word	0x40005800
 8001ed0:	58024400 	.word	0x58024400
 8001ed4:	58021400 	.word	0x58021400

08001ed8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b0ba      	sub	sp, #232	; 0xe8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef0:	f107 0318 	add.w	r3, r7, #24
 8001ef4:	22b8      	movs	r2, #184	; 0xb8
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f016 f95b 	bl	80181b4 <memset>
  if(hsd->Instance==SDMMC2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5d      	ldr	r2, [pc, #372]	; (8002078 <HAL_SD_MspInit+0x1a0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	f040 80b3 	bne.w	8002070 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001f0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1a:	f107 0318 	add.w	r3, r7, #24
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f007 fe4e 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001f2a:	f7ff fe03 	bl	8001b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8001f2e:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_SD_MspInit+0x1a4>)
 8001f30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f34:	4a51      	ldr	r2, [pc, #324]	; (800207c <HAL_SD_MspInit+0x1a4>)
 8001f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001f3e:	4b4f      	ldr	r3, [pc, #316]	; (800207c <HAL_SD_MspInit+0x1a4>)
 8001f40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	; (800207c <HAL_SD_MspInit+0x1a4>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f52:	4a4a      	ldr	r2, [pc, #296]	; (800207c <HAL_SD_MspInit+0x1a4>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5c:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_SD_MspInit+0x1a4>)
 8001f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f6a:	4b44      	ldr	r3, [pc, #272]	; (800207c <HAL_SD_MspInit+0x1a4>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f70:	4a42      	ldr	r2, [pc, #264]	; (800207c <HAL_SD_MspInit+0x1a4>)
 8001f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f7a:	4b40      	ldr	r3, [pc, #256]	; (800207c <HAL_SD_MspInit+0x1a4>)
 8001f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f88:	2340      	movs	r3, #64	; 0x40
 8001f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001fa0:	230b      	movs	r3, #11
 8001fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fa6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001faa:	4619      	mov	r1, r3
 8001fac:	4834      	ldr	r0, [pc, #208]	; (8002080 <HAL_SD_MspInit+0x1a8>)
 8001fae:	f005 f831 	bl	8007014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001fca:	230b      	movs	r3, #11
 8001fcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482a      	ldr	r0, [pc, #168]	; (8002080 <HAL_SD_MspInit+0x1a8>)
 8001fd8:	f005 f81c 	bl	8007014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001ff6:	230b      	movs	r3, #11
 8001ff8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ffc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002000:	4619      	mov	r1, r3
 8002002:	4820      	ldr	r0, [pc, #128]	; (8002084 <HAL_SD_MspInit+0x1ac>)
 8002004:	f005 f806 	bl	8007014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002022:	230b      	movs	r3, #11
 8002024:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002028:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800202c:	4619      	mov	r1, r3
 800202e:	4815      	ldr	r0, [pc, #84]	; (8002084 <HAL_SD_MspInit+0x1ac>)
 8002030:	f004 fff0 	bl	8007014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002034:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002038:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800204e:	230a      	movs	r3, #10
 8002050:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002054:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002058:	4619      	mov	r1, r3
 800205a:	480a      	ldr	r0, [pc, #40]	; (8002084 <HAL_SD_MspInit+0x1ac>)
 800205c:	f004 ffda 	bl	8007014 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2100      	movs	r1, #0
 8002064:	207c      	movs	r0, #124	; 0x7c
 8002066:	f002 ff7c 	bl	8004f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800206a:	207c      	movs	r0, #124	; 0x7c
 800206c:	f002 ff93 	bl	8004f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002070:	bf00      	nop
 8002072:	37e8      	adds	r7, #232	; 0xe8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	48022400 	.word	0x48022400
 800207c:	58024400 	.word	0x58024400
 8002080:	58020c00 	.word	0x58020c00
 8002084:	58021800 	.word	0x58021800

08002088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	; 0x38
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a4f      	ldr	r2, [pc, #316]	; (80021e4 <HAL_SPI_MspInit+0x15c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12e      	bne.n	8002108 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020aa:	4b4f      	ldr	r3, [pc, #316]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 80020ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020b0:	4a4d      	ldr	r2, [pc, #308]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 80020b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020ba:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 80020bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c4:	623b      	str	r3, [r7, #32]
 80020c6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c8:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 80020ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ce:	4a46      	ldr	r2, [pc, #280]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d8:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 80020da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020e6:	23e0      	movs	r3, #224	; 0xe0
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020f6:	2305      	movs	r3, #5
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fe:	4619      	mov	r1, r3
 8002100:	483a      	ldr	r0, [pc, #232]	; (80021ec <HAL_SPI_MspInit+0x164>)
 8002102:	f004 ff87 	bl	8007014 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002106:	e068      	b.n	80021da <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a38      	ldr	r2, [pc, #224]	; (80021f0 <HAL_SPI_MspInit+0x168>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d12f      	bne.n	8002172 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002112:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 8002114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002118:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 800211a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002122:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 8002124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002130:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 8002132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002136:	4a2c      	ldr	r2, [pc, #176]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002140:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800214e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002160:	2305      	movs	r3, #5
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002168:	4619      	mov	r1, r3
 800216a:	4822      	ldr	r0, [pc, #136]	; (80021f4 <HAL_SPI_MspInit+0x16c>)
 800216c:	f004 ff52 	bl	8007014 <HAL_GPIO_Init>
}
 8002170:	e033      	b.n	80021da <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <HAL_SPI_MspInit+0x170>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d12e      	bne.n	80021da <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 800217e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002182:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 8002184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002188:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 800218e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a0:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_SPI_MspInit+0x160>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021ca:	2306      	movs	r3, #6
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d2:	4619      	mov	r1, r3
 80021d4:	4809      	ldr	r0, [pc, #36]	; (80021fc <HAL_SPI_MspInit+0x174>)
 80021d6:	f004 ff1d 	bl	8007014 <HAL_GPIO_Init>
}
 80021da:	bf00      	nop
 80021dc:	3738      	adds	r7, #56	; 0x38
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40013000 	.word	0x40013000
 80021e8:	58024400 	.word	0x58024400
 80021ec:	58020000 	.word	0x58020000
 80021f0:	40003800 	.word	0x40003800
 80021f4:	58020400 	.word	0x58020400
 80021f8:	40003c00 	.word	0x40003c00
 80021fc:	58020800 	.word	0x58020800

08002200 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d15d      	bne.n	80022de <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002222:	4b8e      	ldr	r3, [pc, #568]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 8002224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002228:	4a8c      	ldr	r2, [pc, #560]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002232:	4b8a      	ldr	r3, [pc, #552]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 8002234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002240:	4b86      	ldr	r3, [pc, #536]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002246:	4a85      	ldr	r2, [pc, #532]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002250:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 8002252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800225e:	2301      	movs	r3, #1
 8002260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800226e:	2301      	movs	r3, #1
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	4619      	mov	r1, r3
 8002278:	4879      	ldr	r0, [pc, #484]	; (8002460 <HAL_TIM_PWM_MspInit+0x260>)
 800227a:	f004 fecb 	bl	8007014 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800227e:	4b79      	ldr	r3, [pc, #484]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 8002280:	4a79      	ldr	r2, [pc, #484]	; (8002468 <HAL_TIM_PWM_MspInit+0x268>)
 8002282:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002284:	4b77      	ldr	r3, [pc, #476]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 8002286:	2214      	movs	r2, #20
 8002288:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800228a:	4b76      	ldr	r3, [pc, #472]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002290:	4b74      	ldr	r3, [pc, #464]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002296:	4b73      	ldr	r3, [pc, #460]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 8002298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800229e:	4b71      	ldr	r3, [pc, #452]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 80022a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022a6:	4b6f      	ldr	r3, [pc, #444]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 80022a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ac:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80022ae:	4b6d      	ldr	r3, [pc, #436]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80022b4:	4b6b      	ldr	r3, [pc, #428]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ba:	4b6a      	ldr	r3, [pc, #424]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 80022bc:	2200      	movs	r2, #0
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80022c0:	4868      	ldr	r0, [pc, #416]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 80022c2:	f002 fe83 	bl	8004fcc <HAL_DMA_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80022cc:	f7ff fc32 	bl	8001b34 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a64      	ldr	r2, [pc, #400]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022d6:	4a63      	ldr	r2, [pc, #396]	; (8002464 <HAL_TIM_PWM_MspInit+0x264>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80022dc:	e119      	b.n	8002512 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a62      	ldr	r2, [pc, #392]	; (800246c <HAL_TIM_PWM_MspInit+0x26c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d16d      	bne.n	80023c4 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022e8:	4b5c      	ldr	r3, [pc, #368]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 80022ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ee:	4a5b      	ldr	r2, [pc, #364]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f8:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 80022fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002306:	4b5a      	ldr	r3, [pc, #360]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 8002308:	4a5a      	ldr	r2, [pc, #360]	; (8002474 <HAL_TIM_PWM_MspInit+0x274>)
 800230a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800230c:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 800230e:	2218      	movs	r2, #24
 8002310:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002312:	4b57      	ldr	r3, [pc, #348]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 8002314:	2240      	movs	r2, #64	; 0x40
 8002316:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002318:	4b55      	ldr	r3, [pc, #340]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800231e:	4b54      	ldr	r3, [pc, #336]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 8002320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002324:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002326:	4b52      	ldr	r3, [pc, #328]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 8002328:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800232c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800232e:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 8002330:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002334:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002336:	4b4e      	ldr	r3, [pc, #312]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 8002338:	2200      	movs	r2, #0
 800233a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800233c:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 800233e:	2200      	movs	r2, #0
 8002340:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002342:	4b4b      	ldr	r3, [pc, #300]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 8002344:	2200      	movs	r2, #0
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002348:	4849      	ldr	r0, [pc, #292]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 800234a:	f002 fe3f 	bl	8004fcc <HAL_DMA_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002354:	f7ff fbee 	bl	8001b34 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a45      	ldr	r2, [pc, #276]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 800235c:	629a      	str	r2, [r3, #40]	; 0x28
 800235e:	4a44      	ldr	r2, [pc, #272]	; (8002470 <HAL_TIM_PWM_MspInit+0x270>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002364:	4b44      	ldr	r3, [pc, #272]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 8002366:	4a45      	ldr	r2, [pc, #276]	; (800247c <HAL_TIM_PWM_MspInit+0x27c>)
 8002368:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800236a:	4b43      	ldr	r3, [pc, #268]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 800236c:	2217      	movs	r2, #23
 800236e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002370:	4b41      	ldr	r3, [pc, #260]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 8002372:	2240      	movs	r2, #64	; 0x40
 8002374:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002376:	4b40      	ldr	r3, [pc, #256]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 800237e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002382:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002384:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 8002386:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800238a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800238c:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 800238e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002392:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002394:	4b38      	ldr	r3, [pc, #224]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800239a:	4b37      	ldr	r3, [pc, #220]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023a0:	4b35      	ldr	r3, [pc, #212]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80023a6:	4834      	ldr	r0, [pc, #208]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 80023a8:	f002 fe10 	bl	8004fcc <HAL_DMA_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80023b2:	f7ff fbbf 	bl	8001b34 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a2f      	ldr	r2, [pc, #188]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
 80023bc:	4a2e      	ldr	r2, [pc, #184]	; (8002478 <HAL_TIM_PWM_MspInit+0x278>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023c2:	e0a6      	b.n	8002512 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a2d      	ldr	r2, [pc, #180]	; (8002480 <HAL_TIM_PWM_MspInit+0x280>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d15e      	bne.n	800248c <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 80023d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d4:	4a21      	ldr	r2, [pc, #132]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023de:	4b1f      	ldr	r3, [pc, #124]	; (800245c <HAL_TIM_PWM_MspInit+0x25c>)
 80023e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 80023ee:	4a26      	ldr	r2, [pc, #152]	; (8002488 <HAL_TIM_PWM_MspInit+0x288>)
 80023f0:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 80023f4:	221f      	movs	r2, #31
 80023f6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023f8:	4b22      	ldr	r3, [pc, #136]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 8002400:	2200      	movs	r2, #0
 8002402:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 8002406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 800240e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002412:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 8002416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800241a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 8002424:	2200      	movs	r2, #0
 8002426:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800242e:	4815      	ldr	r0, [pc, #84]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 8002430:	f002 fdcc 	bl	8004fcc <HAL_DMA_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800243a:	f7ff fb7b 	bl	8001b34 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a10      	ldr	r2, [pc, #64]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c
 8002444:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <HAL_TIM_PWM_MspInit+0x284>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	201e      	movs	r0, #30
 8002450:	f002 fd87 	bl	8004f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002454:	201e      	movs	r0, #30
 8002456:	f002 fd9e 	bl	8004f96 <HAL_NVIC_EnableIRQ>
}
 800245a:	e05a      	b.n	8002512 <HAL_TIM_PWM_MspInit+0x312>
 800245c:	58024400 	.word	0x58024400
 8002460:	58020000 	.word	0x58020000
 8002464:	24000990 	.word	0x24000990
 8002468:	40020028 	.word	0x40020028
 800246c:	40000400 	.word	0x40000400
 8002470:	24000a08 	.word	0x24000a08
 8002474:	40020058 	.word	0x40020058
 8002478:	24000a80 	.word	0x24000a80
 800247c:	40020070 	.word	0x40020070
 8002480:	40000800 	.word	0x40000800
 8002484:	24000af8 	.word	0x24000af8
 8002488:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a22      	ldr	r2, [pc, #136]	; (800251c <HAL_TIM_PWM_MspInit+0x31c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d13d      	bne.n	8002512 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002496:	4b22      	ldr	r3, [pc, #136]	; (8002520 <HAL_TIM_PWM_MspInit+0x320>)
 8002498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800249c:	4a20      	ldr	r2, [pc, #128]	; (8002520 <HAL_TIM_PWM_MspInit+0x320>)
 800249e:	f043 0308 	orr.w	r3, r3, #8
 80024a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_TIM_PWM_MspInit+0x320>)
 80024a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 80024b6:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <HAL_TIM_PWM_MspInit+0x328>)
 80024b8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 80024bc:	223a      	movs	r2, #58	; 0x3a
 80024be:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 80024c2:	2240      	movs	r2, #64	; 0x40
 80024c4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 80024ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 80024d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024da:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 80024de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024e2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80024f6:	480b      	ldr	r0, [pc, #44]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 80024f8:	f002 fd68 	bl	8004fcc <HAL_DMA_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8002502:	f7ff fb17 	bl	8001b34 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a06      	ldr	r2, [pc, #24]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
 800250c:	4a05      	ldr	r2, [pc, #20]	; (8002524 <HAL_TIM_PWM_MspInit+0x324>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002512:	bf00      	nop
 8002514:	3730      	adds	r7, #48	; 0x30
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40000c00 	.word	0x40000c00
 8002520:	58024400 	.word	0x58024400
 8002524:	24000b70 	.word	0x24000b70
 8002528:	40020040 	.word	0x40020040

0800252c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a16      	ldr	r2, [pc, #88]	; (8002594 <HAL_TIM_Base_MspInit+0x68>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10f      	bne.n	800255e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002544:	4a14      	ldr	r2, [pc, #80]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800255c:	e013      	b.n	8002586 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a0e      	ldr	r2, [pc, #56]	; (800259c <HAL_TIM_Base_MspInit+0x70>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d10e      	bne.n	8002586 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 800256a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002574:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <HAL_TIM_Base_MspInit+0x6c>)
 800257a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40001c00 	.word	0x40001c00
 8002598:	58024400 	.word	0x58024400
 800259c:	40002000 	.word	0x40002000

080025a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08c      	sub	sp, #48	; 0x30
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 031c 	add.w	r3, r7, #28
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d120      	bne.n	8002604 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	4b52      	ldr	r3, [pc, #328]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 80025c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c8:	4a50      	ldr	r2, [pc, #320]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025d2:	4b4e      	ldr	r3, [pc, #312]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 80025d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025ea:	2302      	movs	r3, #2
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025f2:	2301      	movs	r3, #1
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	f107 031c 	add.w	r3, r7, #28
 80025fa:	4619      	mov	r1, r3
 80025fc:	4844      	ldr	r0, [pc, #272]	; (8002710 <HAL_TIM_MspPostInit+0x170>)
 80025fe:	f004 fd09 	bl	8007014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002602:	e07f      	b.n	8002704 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a42      	ldr	r2, [pc, #264]	; (8002714 <HAL_TIM_MspPostInit+0x174>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d11f      	bne.n	800264e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260e:	4b3f      	ldr	r3, [pc, #252]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 8002610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002614:	4a3d      	ldr	r2, [pc, #244]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 8002616:	f043 0302 	orr.w	r3, r3, #2
 800261a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800261e:	4b3b      	ldr	r3, [pc, #236]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 8002620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800262c:	2330      	movs	r3, #48	; 0x30
 800262e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002634:	2302      	movs	r3, #2
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800263c:	2302      	movs	r3, #2
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002640:	f107 031c 	add.w	r3, r7, #28
 8002644:	4619      	mov	r1, r3
 8002646:	4832      	ldr	r0, [pc, #200]	; (8002710 <HAL_TIM_MspPostInit+0x170>)
 8002648:	f004 fce4 	bl	8007014 <HAL_GPIO_Init>
}
 800264c:	e05a      	b.n	8002704 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a31      	ldr	r2, [pc, #196]	; (8002718 <HAL_TIM_MspPostInit+0x178>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d131      	bne.n	80026bc <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 800265a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265e:	4a2b      	ldr	r2, [pc, #172]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 8002660:	f043 0308 	orr.w	r3, r3, #8
 8002664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002668:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 800266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002676:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002688:	2302      	movs	r3, #2
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800268c:	f107 031c 	add.w	r3, r7, #28
 8002690:	4619      	mov	r1, r3
 8002692:	4822      	ldr	r0, [pc, #136]	; (800271c <HAL_TIM_MspPostInit+0x17c>)
 8002694:	f004 fcbe 	bl	8007014 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800269c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026a2:	2302      	movs	r3, #2
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026aa:	2302      	movs	r3, #2
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ae:	f107 031c 	add.w	r3, r7, #28
 80026b2:	4619      	mov	r1, r3
 80026b4:	4819      	ldr	r0, [pc, #100]	; (800271c <HAL_TIM_MspPostInit+0x17c>)
 80026b6:	f004 fcad 	bl	8007014 <HAL_GPIO_Init>
}
 80026ba:	e023      	b.n	8002704 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a17      	ldr	r2, [pc, #92]	; (8002720 <HAL_TIM_MspPostInit+0x180>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d11e      	bne.n	8002704 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 80026c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_TIM_MspPostInit+0x16c>)
 80026d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026e4:	2308      	movs	r3, #8
 80026e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026ec:	2302      	movs	r3, #2
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026f4:	2302      	movs	r3, #2
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f8:	f107 031c 	add.w	r3, r7, #28
 80026fc:	4619      	mov	r1, r3
 80026fe:	4809      	ldr	r0, [pc, #36]	; (8002724 <HAL_TIM_MspPostInit+0x184>)
 8002700:	f004 fc88 	bl	8007014 <HAL_GPIO_Init>
}
 8002704:	bf00      	nop
 8002706:	3730      	adds	r7, #48	; 0x30
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	58024400 	.word	0x58024400
 8002710:	58020400 	.word	0x58020400
 8002714:	40000400 	.word	0x40000400
 8002718:	40000800 	.word	0x40000800
 800271c:	58020c00 	.word	0x58020c00
 8002720:	40000c00 	.word	0x40000c00
 8002724:	58020000 	.word	0x58020000

08002728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b0ba      	sub	sp, #232	; 0xe8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002740:	f107 0318 	add.w	r3, r7, #24
 8002744:	22b8      	movs	r2, #184	; 0xb8
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f015 fd33 	bl	80181b4 <memset>
  if(huart->Instance==UART4)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a4d      	ldr	r2, [pc, #308]	; (8002888 <HAL_UART_MspInit+0x160>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d147      	bne.n	80027e8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002758:	f04f 0202 	mov.w	r2, #2
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800276a:	f107 0318 	add.w	r3, r7, #24
 800276e:	4618      	mov	r0, r3
 8002770:	f007 fa26 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800277a:	f7ff f9db 	bl	8001b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800277e:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_UART_MspInit+0x164>)
 8002780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002784:	4a41      	ldr	r2, [pc, #260]	; (800288c <HAL_UART_MspInit+0x164>)
 8002786:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800278a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_UART_MspInit+0x164>)
 8002790:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279c:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_UART_MspInit+0x164>)
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a2:	4a3a      	ldr	r2, [pc, #232]	; (800288c <HAL_UART_MspInit+0x164>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ac:	4b37      	ldr	r3, [pc, #220]	; (800288c <HAL_UART_MspInit+0x164>)
 80027ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027d4:	2308      	movs	r3, #8
 80027d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027de:	4619      	mov	r1, r3
 80027e0:	482b      	ldr	r0, [pc, #172]	; (8002890 <HAL_UART_MspInit+0x168>)
 80027e2:	f004 fc17 	bl	8007014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027e6:	e04a      	b.n	800287e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a29      	ldr	r2, [pc, #164]	; (8002894 <HAL_UART_MspInit+0x16c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d145      	bne.n	800287e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80027f2:	f04f 0201 	mov.w	r2, #1
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002804:	f107 0318 	add.w	r3, r7, #24
 8002808:	4618      	mov	r0, r3
 800280a:	f007 f9d9 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002814:	f7ff f98e 	bl	8001b34 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_UART_MspInit+0x164>)
 800281a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800281e:	4a1b      	ldr	r2, [pc, #108]	; (800288c <HAL_UART_MspInit+0x164>)
 8002820:	f043 0320 	orr.w	r3, r3, #32
 8002824:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_UART_MspInit+0x164>)
 800282a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_UART_MspInit+0x164>)
 8002838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283c:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_UART_MspInit+0x164>)
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_UART_MspInit+0x164>)
 8002848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002854:	23c0      	movs	r3, #192	; 0xc0
 8002856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800286c:	2307      	movs	r3, #7
 800286e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002872:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002876:	4619      	mov	r1, r3
 8002878:	4807      	ldr	r0, [pc, #28]	; (8002898 <HAL_UART_MspInit+0x170>)
 800287a:	f004 fbcb 	bl	8007014 <HAL_GPIO_Init>
}
 800287e:	bf00      	nop
 8002880:	37e8      	adds	r7, #232	; 0xe8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40004c00 	.word	0x40004c00
 800288c:	58024400 	.word	0x58024400
 8002890:	58020400 	.word	0x58020400
 8002894:	40011400 	.word	0x40011400
 8002898:	58020800 	.word	0x58020800

0800289c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028a0:	e7fe      	b.n	80028a0 <NMI_Handler+0x4>

080028a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a6:	e7fe      	b.n	80028a6 <HardFault_Handler+0x4>

080028a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ac:	e7fe      	b.n	80028ac <MemManage_Handler+0x4>

080028ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <BusFault_Handler+0x4>

080028b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <UsageFault_Handler+0x4>

080028ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e8:	f000 fa4a 	bl	8002d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <DMA1_Stream0_IRQHandler+0x10>)
 80028f6:	f002 fec3 	bl	8005680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	24000af8 	.word	0x24000af8

08002904 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <DMA1_Stream1_IRQHandler+0x10>)
 800290a:	f002 feb9 	bl	8005680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	24000990 	.word	0x24000990

08002918 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <DMA1_Stream2_IRQHandler+0x10>)
 800291e:	f002 feaf 	bl	8005680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	24000b70 	.word	0x24000b70

0800292c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <DMA1_Stream3_IRQHandler+0x10>)
 8002932:	f002 fea5 	bl	8005680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	24000a08 	.word	0x24000a08

08002940 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <DMA1_Stream4_IRQHandler+0x10>)
 8002946:	f002 fe9b 	bl	8005680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	24000a80 	.word	0x24000a80

08002954 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <DMA1_Stream5_IRQHandler+0x10>)
 800295a:	f002 fe91 	bl	8005680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	240003d0 	.word	0x240003d0

08002968 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <TIM4_IRQHandler+0x10>)
 800296e:	f00b fb5e 	bl	800e02e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	24000860 	.word	0x24000860

0800297c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <I2C2_EV_IRQHandler+0x10>)
 8002982:	f004 fd99 	bl	80074b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	24000560 	.word	0x24000560

08002990 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <DMA2_Stream7_IRQHandler+0x10>)
 8002996:	f002 fe73 	bl	8005680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	24000448 	.word	0x24000448

080029a4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <OTG_HS_IRQHandler+0x10>)
 80029aa:	f004 ff8f 	bl	80078cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	2400243c 	.word	0x2400243c

080029b8 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <SDMMC2_IRQHandler+0x10>)
 80029be:	f009 ff55 	bl	800c86c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	240005b4 	.word	0x240005b4

080029cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return 1;
 80029d0:	2301      	movs	r3, #1
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_kill>:

int _kill(int pid, int sig)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029e6:	f015 fbad 	bl	8018144 <__errno>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2216      	movs	r2, #22
 80029ee:	601a      	str	r2, [r3, #0]
  return -1;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_exit>:

void _exit (int status)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ffe7 	bl	80029dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a0e:	e7fe      	b.n	8002a0e <_exit+0x12>

08002a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	e00a      	b.n	8002a38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a22:	f3af 8000 	nop.w
 8002a26:	4601      	mov	r1, r0
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	60ba      	str	r2, [r7, #8]
 8002a2e:	b2ca      	uxtb	r2, r1
 8002a30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3301      	adds	r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	dbf0      	blt.n	8002a22 <_read+0x12>
  }

  return len;
 8002a40:	687b      	ldr	r3, [r7, #4]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	e009      	b.n	8002a70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	60ba      	str	r2, [r7, #8]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dbf1      	blt.n	8002a5c <_write+0x12>
  }
  return len;
 8002a78:	687b      	ldr	r3, [r7, #4]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_close>:

int _close(int file)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aaa:	605a      	str	r2, [r3, #4]
  return 0;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <_isatty>:

int _isatty(int file)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ac2:	2301      	movs	r3, #1
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <_sbrk+0x5c>)
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <_sbrk+0x60>)
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <_sbrk+0x64>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <_sbrk+0x64>)
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <_sbrk+0x68>)
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <_sbrk+0x64>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d207      	bcs.n	8002b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b1c:	f015 fb12 	bl	8018144 <__errno>
 8002b20:	4603      	mov	r3, r0
 8002b22:	220c      	movs	r2, #12
 8002b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	e009      	b.n	8002b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <_sbrk+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <_sbrk+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <_sbrk+0x64>)
 8002b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	24050000 	.word	0x24050000
 8002b4c:	00000800 	.word	0x00000800
 8002b50:	24000d10 	.word	0x24000d10
 8002b54:	24002b78 	.word	0x24002b78

08002b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b5c:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <SystemInit+0xd0>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	4a31      	ldr	r2, [pc, #196]	; (8002c28 <SystemInit+0xd0>)
 8002b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b6c:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <SystemInit+0xd4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	2b06      	cmp	r3, #6
 8002b76:	d807      	bhi.n	8002b88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b78:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <SystemInit+0xd4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 030f 	bic.w	r3, r3, #15
 8002b80:	4a2a      	ldr	r2, [pc, #168]	; (8002c2c <SystemInit+0xd4>)
 8002b82:	f043 0307 	orr.w	r3, r3, #7
 8002b86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b88:	4b29      	ldr	r3, [pc, #164]	; (8002c30 <SystemInit+0xd8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <SystemInit+0xd8>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b94:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <SystemInit+0xd8>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b9a:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <SystemInit+0xd8>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4924      	ldr	r1, [pc, #144]	; (8002c30 <SystemInit+0xd8>)
 8002ba0:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <SystemInit+0xdc>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ba6:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <SystemInit+0xd4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <SystemInit+0xd4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 030f 	bic.w	r3, r3, #15
 8002bba:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <SystemInit+0xd4>)
 8002bbc:	f043 0307 	orr.w	r3, r3, #7
 8002bc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <SystemInit+0xd8>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <SystemInit+0xd8>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <SystemInit+0xd8>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <SystemInit+0xd8>)
 8002bd6:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <SystemInit+0xe0>)
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <SystemInit+0xd8>)
 8002bdc:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <SystemInit+0xe4>)
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <SystemInit+0xd8>)
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <SystemInit+0xe8>)
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <SystemInit+0xd8>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <SystemInit+0xd8>)
 8002bee:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <SystemInit+0xe8>)
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <SystemInit+0xd8>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <SystemInit+0xd8>)
 8002bfa:	4a11      	ldr	r2, [pc, #68]	; (8002c40 <SystemInit+0xe8>)
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <SystemInit+0xd8>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <SystemInit+0xd8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a09      	ldr	r2, [pc, #36]	; (8002c30 <SystemInit+0xd8>)
 8002c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <SystemInit+0xd8>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <SystemInit+0xec>)
 8002c18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00
 8002c2c:	52002000 	.word	0x52002000
 8002c30:	58024400 	.word	0x58024400
 8002c34:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c38:	02020200 	.word	0x02020200
 8002c3c:	01ff0000 	.word	0x01ff0000
 8002c40:	01010280 	.word	0x01010280
 8002c44:	52004000 	.word	0x52004000

08002c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c4c:	f7ff ff84 	bl	8002b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	; (8002c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	; (8002c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c76:	f015 fa6b 	bl	8018150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7a:	f7fd ff17 	bl	8000aac <main>
  bx  lr
 8002c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c80:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002c84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002c88:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 8002c8c:	0801d2dc 	.word	0x0801d2dc
  ldr r2, =_sbss
 8002c90:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 8002c94:	24002b78 	.word	0x24002b78

08002c98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC3_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	f002 f952 	bl	8004f4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ca8:	f006 fdb4 	bl	8009814 <HAL_RCC_GetSysClockFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_Init+0x68>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	4913      	ldr	r1, [pc, #76]	; (8002d08 <HAL_Init+0x6c>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_Init+0x68>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <HAL_Init+0x6c>)
 8002cd0:	5cd3      	ldrb	r3, [r2, r3]
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cdc:	4a0b      	ldr	r2, [pc, #44]	; (8002d0c <HAL_Init+0x70>)
 8002cde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <HAL_Init+0x74>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ce6:	200f      	movs	r0, #15
 8002ce8:	f000 f814 	bl	8002d14 <HAL_InitTick>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e002      	b.n	8002cfc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf6:	f7fe ff23 	bl	8001b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	58024400 	.word	0x58024400
 8002d08:	0801c990 	.word	0x0801c990
 8002d0c:	24000004 	.word	0x24000004
 8002d10:	24000000 	.word	0x24000000

08002d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_InitTick+0x60>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e021      	b.n	8002d6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_InitTick+0x64>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_InitTick+0x60>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f002 f937 	bl	8004fb2 <HAL_SYSTICK_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e00e      	b.n	8002d6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	d80a      	bhi.n	8002d6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d54:	2200      	movs	r2, #0
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	f002 f901 	bl	8004f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d60:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <HAL_InitTick+0x68>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	2400000c 	.word	0x2400000c
 8002d78:	24000000 	.word	0x24000000
 8002d7c:	24000008 	.word	0x24000008

08002d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_IncTick+0x20>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_IncTick+0x24>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_IncTick+0x24>)
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	2400000c 	.word	0x2400000c
 8002da4:	24000d14 	.word	0x24000d14

08002da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_GetTick+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	24000d14 	.word	0x24000d14

08002dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff ffee 	bl	8002da8 <HAL_GetTick>
 8002dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d005      	beq.n	8002de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_Delay+0x44>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002de6:	bf00      	nop
 8002de8:	f7ff ffde 	bl	8002da8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d8f7      	bhi.n	8002de8 <HAL_Delay+0x28>
  {
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2400000c 	.word	0x2400000c

08002e08 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	4904      	ldr	r1, [pc, #16]	; (8002e30 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	58000400 	.word	0x58000400

08002e34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	609a      	str	r2, [r3, #8]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3360      	adds	r3, #96	; 0x60
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <LL_ADC_SetOffset+0x60>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10b      	bne.n	8002ed8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002ed6:	e00b      	b.n	8002ef0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	431a      	orrs	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	601a      	str	r2, [r3, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	58026000 	.word	0x58026000

08002f00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3360      	adds	r3, #96	; 0x60
 8002f0e:	461a      	mov	r2, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	611a      	str	r2, [r3, #16]
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3360      	adds	r3, #96	; 0x60
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	601a      	str	r2, [r3, #0]
  }
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	58026000 	.word	0x58026000

08002fa4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <LL_ADC_SetOffsetSaturation+0x40>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10e      	bne.n	8002fd6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3360      	adds	r3, #96	; 0x60
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	58026000 	.word	0x58026000

08002fe8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <LL_ADC_SetOffsetSign+0x40>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d10e      	bne.n	800301a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3360      	adds	r3, #96	; 0x60
 8003000:	461a      	mov	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	431a      	orrs	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	58026000 	.word	0x58026000

0800302c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3360      	adds	r3, #96	; 0x60
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4a0c      	ldr	r2, [pc, #48]	; (800307c <LL_ADC_SetOffsetState+0x50>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d108      	bne.n	8003060 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	431a      	orrs	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800305e:	e007      	b.n	8003070 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	431a      	orrs	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	601a      	str	r2, [r3, #0]
}
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	58026000 	.word	0x58026000

08003080 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b087      	sub	sp, #28
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3330      	adds	r3, #48	; 0x30
 80030b6:	461a      	mov	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	4413      	add	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	211f      	movs	r1, #31
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	401a      	ands	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	f003 011f 	and.w	r1, r3, #31
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	431a      	orrs	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030fe:	b480      	push	{r7}
 8003100:	b087      	sub	sp, #28
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3314      	adds	r3, #20
 800310e:	461a      	mov	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	0e5b      	lsrs	r3, r3, #25
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	4413      	add	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	0d1b      	lsrs	r3, r3, #20
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	2107      	movs	r1, #7
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	401a      	ands	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	0d1b      	lsrs	r3, r3, #20
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	431a      	orrs	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003148:	bf00      	nop
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <LL_ADC_SetChannelSingleDiff+0x78>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d115      	bne.n	8003194 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003174:	43db      	mvns	r3, r3
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f003 0318 	and.w	r3, r3, #24
 800317e:	4914      	ldr	r1, [pc, #80]	; (80031d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003180:	40d9      	lsrs	r1, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	400b      	ands	r3, r1
 8003186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800318a:	431a      	orrs	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003192:	e014      	b.n	80031be <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a0:	43db      	mvns	r3, r3
 80031a2:	401a      	ands	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0318 	and.w	r3, r3, #24
 80031aa:	4909      	ldr	r1, [pc, #36]	; (80031d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80031ac:	40d9      	lsrs	r1, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	400b      	ands	r3, r1
 80031b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	58026000 	.word	0x58026000
 80031d0:	000fffff 	.word	0x000fffff

080031d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 031f 	and.w	r3, r3, #31
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <LL_ADC_DisableDeepPowerDown+0x20>)
 800321a:	4013      	ands	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6093      	str	r3, [r2, #8]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	5fffffc0 	.word	0x5fffffc0

08003230 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003244:	d101      	bne.n	800324a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <LL_ADC_EnableInternalRegulator+0x24>)
 8003266:	4013      	ands	r3, r2
 8003268:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	6fffffc0 	.word	0x6fffffc0

08003280 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003294:	d101      	bne.n	800329a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <LL_ADC_Enable+0x24>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	f043 0201 	orr.w	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	7fffffc0 	.word	0x7fffffc0

080032d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <LL_ADC_Disable+0x24>)
 80032de:	4013      	ands	r3, r2
 80032e0:	f043 0202 	orr.w	r2, r3, #2
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	7fffffc0 	.word	0x7fffffc0

080032f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <LL_ADC_IsEnabled+0x18>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <LL_ADC_IsEnabled+0x1a>
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b02      	cmp	r3, #2
 8003330:	d101      	bne.n	8003336 <LL_ADC_IsDisableOngoing+0x18>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <LL_ADC_IsDisableOngoing+0x1a>
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <LL_ADC_REG_StartConversion+0x24>)
 8003352:	4013      	ands	r3, r2
 8003354:	f043 0204 	orr.w	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	7fffffc0 	.word	0x7fffffc0

0800336c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <LL_ADC_REG_StopConversion+0x24>)
 800337a:	4013      	ands	r3, r2
 800337c:	f043 0210 	orr.w	r2, r3, #16
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	7fffffc0 	.word	0x7fffffc0

08003394 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d101      	bne.n	80033ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <LL_ADC_INJ_StopConversion+0x24>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	7fffffc0 	.word	0x7fffffc0

080033e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d101      	bne.n	80033fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e1ee      	b.n	8003804 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7fe fb9d 	bl	8001b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff feef 	bl	8003230 <LL_ADC_IsDeepPowerDownEnabled>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d004      	beq.n	8003462 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fed5 	bl	800320c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ff0a 	bl	8003280 <LL_ADC_IsInternalRegulatorEnabled>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d114      	bne.n	800349c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff feee 	bl	8003258 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800347c:	4b8e      	ldr	r3, [pc, #568]	; (80036b8 <HAL_ADC_Init+0x2ac>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	4a8e      	ldr	r2, [pc, #568]	; (80036bc <HAL_ADC_Init+0x2b0>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	099b      	lsrs	r3, r3, #6
 800348a:	3301      	adds	r3, #1
 800348c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800348e:	e002      	b.n	8003496 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	3b01      	subs	r3, #1
 8003494:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f9      	bne.n	8003490 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff feed 	bl	8003280 <LL_ADC_IsInternalRegulatorEnabled>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10d      	bne.n	80034c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b0:	f043 0210 	orr.w	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff61 	bl	8003394 <LL_ADC_REG_IsConversionOngoing>
 80034d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 8188 	bne.w	80037f2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 8184 	bne.w	80037f2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034f2:	f043 0202 	orr.w	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fefa 	bl	80032f8 <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d136      	bne.n	8003578 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a6c      	ldr	r2, [pc, #432]	; (80036c0 <HAL_ADC_Init+0x2b4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_ADC_Init+0x112>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a6a      	ldr	r2, [pc, #424]	; (80036c4 <HAL_ADC_Init+0x2b8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10e      	bne.n	800353c <HAL_ADC_Init+0x130>
 800351e:	4868      	ldr	r0, [pc, #416]	; (80036c0 <HAL_ADC_Init+0x2b4>)
 8003520:	f7ff feea 	bl	80032f8 <LL_ADC_IsEnabled>
 8003524:	4604      	mov	r4, r0
 8003526:	4867      	ldr	r0, [pc, #412]	; (80036c4 <HAL_ADC_Init+0x2b8>)
 8003528:	f7ff fee6 	bl	80032f8 <LL_ADC_IsEnabled>
 800352c:	4603      	mov	r3, r0
 800352e:	4323      	orrs	r3, r4
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e008      	b.n	800354e <HAL_ADC_Init+0x142>
 800353c:	4862      	ldr	r0, [pc, #392]	; (80036c8 <HAL_ADC_Init+0x2bc>)
 800353e:	f7ff fedb 	bl	80032f8 <LL_ADC_IsEnabled>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a5a      	ldr	r2, [pc, #360]	; (80036c0 <HAL_ADC_Init+0x2b4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d004      	beq.n	8003566 <HAL_ADC_Init+0x15a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_ADC_Init+0x2b8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_ADC_Init+0x15e>
 8003566:	4a59      	ldr	r2, [pc, #356]	; (80036cc <HAL_ADC_Init+0x2c0>)
 8003568:	e000      	b.n	800356c <HAL_ADC_Init+0x160>
 800356a:	4a59      	ldr	r2, [pc, #356]	; (80036d0 <HAL_ADC_Init+0x2c4>)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f7ff fc5e 	bl	8002e34 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_ADC_Init+0x2bc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d129      	bne.n	80035d6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7e5b      	ldrb	r3, [r3, #25]
 8003586:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800358c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003592:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d013      	beq.n	80035c4 <HAL_ADC_Init+0x1b8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b0c      	cmp	r3, #12
 80035a2:	d00d      	beq.n	80035c0 <HAL_ADC_Init+0x1b4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b1c      	cmp	r3, #28
 80035aa:	d007      	beq.n	80035bc <HAL_ADC_Init+0x1b0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b18      	cmp	r3, #24
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_Init+0x1ac>
 80035b4:	2318      	movs	r3, #24
 80035b6:	e006      	b.n	80035c6 <HAL_ADC_Init+0x1ba>
 80035b8:	2300      	movs	r3, #0
 80035ba:	e004      	b.n	80035c6 <HAL_ADC_Init+0x1ba>
 80035bc:	2310      	movs	r3, #16
 80035be:	e002      	b.n	80035c6 <HAL_ADC_Init+0x1ba>
 80035c0:	2308      	movs	r3, #8
 80035c2:	e000      	b.n	80035c6 <HAL_ADC_Init+0x1ba>
 80035c4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80035c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	e00e      	b.n	80035f4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7e5b      	ldrb	r3, [r3, #25]
 80035da:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035e0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80035e6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d106      	bne.n	800360c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	3b01      	subs	r3, #1
 8003604:	045b      	lsls	r3, r3, #17
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a26      	ldr	r2, [pc, #152]	; (80036c8 <HAL_ADC_Init+0x2bc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d115      	bne.n	800365e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_ADC_Init+0x2c8>)
 800363a:	4013      	ands	r3, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	69b9      	ldr	r1, [r7, #24]
 8003642:	430b      	orrs	r3, r1
 8003644:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	611a      	str	r2, [r3, #16]
 800365c:	e009      	b.n	8003672 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <HAL_ADC_Init+0x2cc>)
 8003666:	4013      	ands	r3, r2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	69b9      	ldr	r1, [r7, #24]
 800366e:	430b      	orrs	r3, r1
 8003670:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fe8c 	bl	8003394 <LL_ADC_REG_IsConversionOngoing>
 800367c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff feae 	bl	80033e4 <LL_ADC_INJ_IsConversionOngoing>
 8003688:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 808e 	bne.w	80037ae <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f040 808a 	bne.w	80037ae <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <HAL_ADC_Init+0x2bc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d11b      	bne.n	80036dc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7e1b      	ldrb	r3, [r3, #24]
 80036a8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036b0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	e018      	b.n	80036ea <HAL_ADC_Init+0x2de>
 80036b8:	24000000 	.word	0x24000000
 80036bc:	053e2d63 	.word	0x053e2d63
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40022100 	.word	0x40022100
 80036c8:	58026000 	.word	0x58026000
 80036cc:	40022300 	.word	0x40022300
 80036d0:	58026300 	.word	0x58026300
 80036d4:	fff04007 	.word	0xfff04007
 80036d8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7e1b      	ldrb	r3, [r3, #24]
 80036e0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	4b46      	ldr	r3, [pc, #280]	; (800380c <HAL_ADC_Init+0x400>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	69b9      	ldr	r1, [r7, #24]
 80036fa:	430b      	orrs	r3, r1
 80036fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003704:	2b01      	cmp	r3, #1
 8003706:	d137      	bne.n	8003778 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a3f      	ldr	r2, [pc, #252]	; (8003810 <HAL_ADC_Init+0x404>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d116      	bne.n	8003746 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <HAL_ADC_Init+0x408>)
 8003720:	4013      	ands	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800372a:	4311      	orrs	r1, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003730:	4311      	orrs	r1, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003736:	430a      	orrs	r2, r1
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	611a      	str	r2, [r3, #16]
 8003744:	e020      	b.n	8003788 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <HAL_ADC_Init+0x40c>)
 800374e:	4013      	ands	r3, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003754:	3a01      	subs	r2, #1
 8003756:	0411      	lsls	r1, r2, #16
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003768:	430a      	orrs	r2, r1
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0201 	orr.w	r2, r2, #1
 8003774:	611a      	str	r2, [r3, #16]
 8003776:	e007      	b.n	8003788 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <HAL_ADC_Init+0x404>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d002      	beq.n	80037ae <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f001 f909 	bl	80049c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d10c      	bne.n	80037d0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	f023 010f 	bic.w	r1, r3, #15
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	1e5a      	subs	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
 80037ce:	e007      	b.n	80037e0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 020f 	bic.w	r2, r2, #15
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e4:	f023 0303 	bic.w	r3, r3, #3
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	661a      	str	r2, [r3, #96]	; 0x60
 80037f0:	e007      	b.n	8003802 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f6:	f043 0210 	orr.w	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003802:	7ffb      	ldrb	r3, [r7, #31]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3724      	adds	r7, #36	; 0x24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd90      	pop	{r4, r7, pc}
 800380c:	ffffbffc 	.word	0xffffbffc
 8003810:	58026000 	.word	0x58026000
 8003814:	fc00f81f 	.word	0xfc00f81f
 8003818:	fc00f81e 	.word	0xfc00f81e

0800381c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5c      	ldr	r2, [pc, #368]	; (800399c <HAL_ADC_Start+0x180>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_ADC_Start+0x1c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5b      	ldr	r2, [pc, #364]	; (80039a0 <HAL_ADC_Start+0x184>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d101      	bne.n	800383c <HAL_ADC_Start+0x20>
 8003838:	4b5a      	ldr	r3, [pc, #360]	; (80039a4 <HAL_ADC_Start+0x188>)
 800383a:	e000      	b.n	800383e <HAL_ADC_Start+0x22>
 800383c:	4b5a      	ldr	r3, [pc, #360]	; (80039a8 <HAL_ADC_Start+0x18c>)
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fcc8 	bl	80031d4 <LL_ADC_GetMultimode>
 8003844:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fda2 	bl	8003394 <LL_ADC_REG_IsConversionOngoing>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 809a 	bne.w	800398c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_ADC_Start+0x4a>
 8003862:	2302      	movs	r3, #2
 8003864:	e095      	b.n	8003992 <HAL_ADC_Start+0x176>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 ffbc 	bl	80047ec <ADC_Enable>
 8003874:	4603      	mov	r3, r0
 8003876:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 8081 	bne.w	8003982 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003884:	4b49      	ldr	r3, [pc, #292]	; (80039ac <HAL_ADC_Start+0x190>)
 8003886:	4013      	ands	r3, r2
 8003888:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a42      	ldr	r2, [pc, #264]	; (80039a0 <HAL_ADC_Start+0x184>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d002      	beq.n	80038a0 <HAL_ADC_Start+0x84>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	e000      	b.n	80038a2 <HAL_ADC_Start+0x86>
 80038a0:	4b3e      	ldr	r3, [pc, #248]	; (800399c <HAL_ADC_Start+0x180>)
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d002      	beq.n	80038b0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	d106      	bne.n	80038d8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ce:	f023 0206 	bic.w	r2, r3, #6
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	665a      	str	r2, [r3, #100]	; 0x64
 80038d6:	e002      	b.n	80038de <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	221c      	movs	r2, #28
 80038e4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2b      	ldr	r2, [pc, #172]	; (80039a0 <HAL_ADC_Start+0x184>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d002      	beq.n	80038fe <HAL_ADC_Start+0xe2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	e000      	b.n	8003900 <HAL_ADC_Start+0xe4>
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <HAL_ADC_Start+0x180>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	4293      	cmp	r3, r2
 8003906:	d008      	beq.n	800391a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b05      	cmp	r3, #5
 8003912:	d002      	beq.n	800391a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b09      	cmp	r3, #9
 8003918:	d114      	bne.n	8003944 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003930:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fd01 	bl	8003344 <LL_ADC_REG_StartConversion>
 8003942:	e025      	b.n	8003990 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003948:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <HAL_ADC_Start+0x184>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d002      	beq.n	8003960 <HAL_ADC_Start+0x144>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	e000      	b.n	8003962 <HAL_ADC_Start+0x146>
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_ADC_Start+0x180>)
 8003962:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00f      	beq.n	8003990 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003974:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003978:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	661a      	str	r2, [r3, #96]	; 0x60
 8003980:	e006      	b.n	8003990 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800398a:	e001      	b.n	8003990 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800398c:	2302      	movs	r3, #2
 800398e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003990:	7dfb      	ldrb	r3, [r7, #23]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40022000 	.word	0x40022000
 80039a0:	40022100 	.word	0x40022100
 80039a4:	40022300 	.word	0x40022300
 80039a8:	58026300 	.word	0x58026300
 80039ac:	fffff0fe 	.word	0xfffff0fe

080039b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_Stop+0x16>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e021      	b.n	8003a0a <HAL_ADC_Stop+0x5a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80039ce:	2103      	movs	r1, #3
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fe4f 	bl	8004674 <ADC_ConversionStop>
 80039d6:	4603      	mov	r3, r0
 80039d8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10f      	bne.n	8003a00 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 ff8d 	bl	8004900 <ADC_Disable>
 80039e6:	4603      	mov	r3, r0
 80039e8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d107      	bne.n	8003a00 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <HAL_ADC_Stop+0x64>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	ffffeefe 	.word	0xffffeefe

08003a18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a72      	ldr	r2, [pc, #456]	; (8003bf0 <HAL_ADC_PollForConversion+0x1d8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_ADC_PollForConversion+0x1e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a70      	ldr	r2, [pc, #448]	; (8003bf4 <HAL_ADC_PollForConversion+0x1dc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d101      	bne.n	8003a3a <HAL_ADC_PollForConversion+0x22>
 8003a36:	4b70      	ldr	r3, [pc, #448]	; (8003bf8 <HAL_ADC_PollForConversion+0x1e0>)
 8003a38:	e000      	b.n	8003a3c <HAL_ADC_PollForConversion+0x24>
 8003a3a:	4b70      	ldr	r3, [pc, #448]	; (8003bfc <HAL_ADC_PollForConversion+0x1e4>)
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fbc9 	bl	80031d4 <LL_ADC_GetMultimode>
 8003a42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d102      	bne.n	8003a52 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003a4c:	2308      	movs	r3, #8
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	e037      	b.n	8003ac2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d002      	beq.n	8003a64 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b09      	cmp	r3, #9
 8003a62:	d111      	bne.n	8003a88 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0b1      	b.n	8003be6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a82:	2304      	movs	r3, #4
 8003a84:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003a86:	e01c      	b.n	8003ac2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a58      	ldr	r2, [pc, #352]	; (8003bf0 <HAL_ADC_PollForConversion+0x1d8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_ADC_PollForConversion+0x84>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a57      	ldr	r2, [pc, #348]	; (8003bf4 <HAL_ADC_PollForConversion+0x1dc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_PollForConversion+0x88>
 8003a9c:	4b56      	ldr	r3, [pc, #344]	; (8003bf8 <HAL_ADC_PollForConversion+0x1e0>)
 8003a9e:	e000      	b.n	8003aa2 <HAL_ADC_PollForConversion+0x8a>
 8003aa0:	4b56      	ldr	r3, [pc, #344]	; (8003bfc <HAL_ADC_PollForConversion+0x1e4>)
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fba4 	bl	80031f0 <LL_ADC_GetMultiDMATransfer>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e093      	b.n	8003be6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003abe:	2304      	movs	r3, #4
 8003ac0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ac2:	f7ff f971 	bl	8002da8 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ac8:	e021      	b.n	8003b0e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d01d      	beq.n	8003b0e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ad2:	f7ff f969 	bl	8002da8 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d302      	bcc.n	8003ae8 <HAL_ADC_PollForConversion+0xd0>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d112      	bne.n	8003b0e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	f043 0204 	orr.w	r2, r3, #4
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e06b      	b.n	8003be6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0d6      	beq.n	8003aca <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff faa7 	bl	8003080 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01c      	beq.n	8003b72 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	7e5b      	ldrb	r3, [r3, #25]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d118      	bne.n	8003b72 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d111      	bne.n	8003b72 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <HAL_ADC_PollForConversion+0x1dc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d002      	beq.n	8003b82 <HAL_ADC_PollForConversion+0x16a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	e000      	b.n	8003b84 <HAL_ADC_PollForConversion+0x16c>
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_ADC_PollForConversion+0x1d8>)
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d008      	beq.n	8003b9e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d002      	beq.n	8003b9e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b09      	cmp	r3, #9
 8003b9c:	d104      	bne.n	8003ba8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	e00c      	b.n	8003bc2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a11      	ldr	r2, [pc, #68]	; (8003bf4 <HAL_ADC_PollForConversion+0x1dc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d002      	beq.n	8003bb8 <HAL_ADC_PollForConversion+0x1a0>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	e000      	b.n	8003bba <HAL_ADC_PollForConversion+0x1a2>
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <HAL_ADC_PollForConversion+0x1d8>)
 8003bba:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d104      	bne.n	8003bd2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e008      	b.n	8003be4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d103      	bne.n	8003be4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	220c      	movs	r2, #12
 8003be2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40022000 	.word	0x40022000
 8003bf4:	40022100 	.word	0x40022100
 8003bf8:	40022300 	.word	0x40022300
 8003bfc:	58026300 	.word	0x58026300

08003c00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b0b9      	sub	sp, #228	; 0xe4
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c36:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4aa9      	ldr	r2, [pc, #676]	; (8003ee4 <HAL_ADC_ConfigChannel+0x2c8>)
 8003c3e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x34>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	f000 bcfa 	b.w	8004644 <HAL_ADC_ConfigChannel+0xa28>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fb99 	bl	8003394 <LL_ADC_REG_IsConversionOngoing>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f040 84de 	bne.w	8004626 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a9e      	ldr	r2, [pc, #632]	; (8003ee8 <HAL_ADC_ConfigChannel+0x2cc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d033      	beq.n	8003cdc <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d108      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x76>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	0e9b      	lsrs	r3, r3, #26
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	e01d      	b.n	8003cce <HAL_ADC_ConfigChannel+0xb2>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	e004      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	2201      	movs	r2, #1
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	69d1      	ldr	r1, [r2, #28]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f7ff f9dc 	bl	80030a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fb4e 	bl	8003394 <LL_ADC_REG_IsConversionOngoing>
 8003cf8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fb6f 	bl	80033e4 <LL_ADC_INJ_IsConversionOngoing>
 8003d06:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 8270 	bne.w	80041f4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f040 826b 	bne.w	80041f4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6819      	ldr	r1, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f7ff f9e7 	bl	80030fe <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a6c      	ldr	r2, [pc, #432]	; (8003ee8 <HAL_ADC_ConfigChannel+0x2cc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d10d      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	08db      	lsrs	r3, r3, #3
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d54:	e032      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d56:	4b65      	ldr	r3, [pc, #404]	; (8003eec <HAL_ADC_ConfigChannel+0x2d0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d62:	d10b      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x160>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	e01d      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x19c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x186>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	e00a      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x19c>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	089b      	lsrs	r3, r3, #2
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d048      	beq.n	8003e56 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	6919      	ldr	r1, [r3, #16]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dd4:	f7ff f862 	bl	8002e9c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a42      	ldr	r2, [pc, #264]	; (8003ee8 <HAL_ADC_ConfigChannel+0x2cc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d119      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6919      	ldr	r1, [r3, #16]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f7ff f8fa 	bl	8002fe8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	6919      	ldr	r1, [r3, #16]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d102      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x1f0>
 8003e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e0a:	e000      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x1f2>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f7ff f8c8 	bl	8002fa4 <LL_ADC_SetOffsetSaturation>
 8003e14:	e1ee      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6919      	ldr	r1, [r3, #16]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d102      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x212>
 8003e28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e2c:	e000      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x214>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	461a      	mov	r2, r3
 8003e32:	f7ff f895 	bl	8002f60 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6919      	ldr	r1, [r3, #16]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	7e1b      	ldrb	r3, [r3, #24]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d102      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x230>
 8003e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e4a:	e000      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x232>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f7ff f86c 	bl	8002f2c <LL_ADC_SetDataRightShift>
 8003e54:	e1ce      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <HAL_ADC_ConfigChannel+0x2cc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	f040 8181 	bne.w	8004164 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff f849 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x272>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff f83e 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 8003e84:	4603      	mov	r3, r0
 8003e86:	0e9b      	lsrs	r3, r3, #26
 8003e88:	f003 021f 	and.w	r2, r3, #31
 8003e8c:	e01e      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x2b0>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff f833 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003eac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003eb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	e004      	b.n	8003eca <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003ec0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x2d4>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	0e9b      	lsrs	r3, r3, #26
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	e01e      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x306>
 8003ee4:	47ff0000 	.word	0x47ff0000
 8003ee8:	58026000 	.word	0x58026000
 8003eec:	5c001000 	.word	0x5c001000
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003efc:	fa93 f3a3 	rbit	r3, r3
 8003f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003f0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003f14:	2320      	movs	r3, #32
 8003f16:	e004      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003f18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d106      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff f87c 	bl	800302c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe ffe0 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x344>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe ffd5 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 8003f56:	4603      	mov	r3, r0
 8003f58:	0e9b      	lsrs	r3, r3, #26
 8003f5a:	f003 021f 	and.w	r2, r3, #31
 8003f5e:	e01e      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x382>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe ffca 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f76:	fa93 f3a3 	rbit	r3, r3
 8003f7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003f7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003f8e:	2320      	movs	r3, #32
 8003f90:	e004      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x39a>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	0e9b      	lsrs	r3, r3, #26
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	e018      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x3cc>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003fda:	2320      	movs	r3, #32
 8003fdc:	e004      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003fde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d106      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff f819 	bl	800302c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2102      	movs	r1, #2
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe ff7d 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 8004006:	4603      	mov	r3, r0
 8004008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x40a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2102      	movs	r1, #2
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe ff72 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 800401c:	4603      	mov	r3, r0
 800401e:	0e9b      	lsrs	r3, r3, #26
 8004020:	f003 021f 	and.w	r2, r3, #31
 8004024:	e01e      	b.n	8004064 <HAL_ADC_ConfigChannel+0x448>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2102      	movs	r1, #2
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe ff67 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 8004032:	4603      	mov	r3, r0
 8004034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800403c:	fa93 f3a3 	rbit	r3, r3
 8004040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004048:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800404c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004054:	2320      	movs	r3, #32
 8004056:	e004      	b.n	8004062 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004058:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800405c:	fab3 f383 	clz	r3, r3
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <HAL_ADC_ConfigChannel+0x460>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0e9b      	lsrs	r3, r3, #26
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	e014      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x48a>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004084:	fa93 f3a3 	rbit	r3, r3
 8004088:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800408a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004090:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004098:	2320      	movs	r3, #32
 800409a:	e004      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800409c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d106      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	2102      	movs	r1, #2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe ffba 	bl	800302c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2103      	movs	r1, #3
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe ff1e 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x4c8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2103      	movs	r1, #3
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe ff13 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 80040da:	4603      	mov	r3, r0
 80040dc:	0e9b      	lsrs	r3, r3, #26
 80040de:	f003 021f 	and.w	r2, r3, #31
 80040e2:	e017      	b.n	8004114 <HAL_ADC_ConfigChannel+0x4f8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2103      	movs	r1, #3
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe ff08 	bl	8002f00 <LL_ADC_GetOffsetChannel>
 80040f0:	4603      	mov	r3, r0
 80040f2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fe:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004106:	2320      	movs	r3, #32
 8004108:	e003      	b.n	8004112 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800410a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800410c:	fab3 f383 	clz	r3, r3
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <HAL_ADC_ConfigChannel+0x510>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	e011      	b.n	8004150 <HAL_ADC_ConfigChannel+0x534>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800413a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800413c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800413e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004144:	2320      	movs	r3, #32
 8004146:	e003      	b.n	8004150 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800414a:	fab3 f383 	clz	r3, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	429a      	cmp	r2, r3
 8004152:	d14f      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2200      	movs	r2, #0
 800415a:	2103      	movs	r1, #3
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe ff65 	bl	800302c <LL_ADC_SetOffsetState>
 8004162:	e047      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	069b      	lsls	r3, r3, #26
 8004174:	429a      	cmp	r2, r3
 8004176:	d107      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004186:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800418e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	069b      	lsls	r3, r3, #26
 8004198:	429a      	cmp	r2, r3
 800419a:	d107      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041aa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	069b      	lsls	r3, r3, #26
 80041bc:	429a      	cmp	r2, r3
 80041be:	d107      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041ce:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	069b      	lsls	r3, r3, #26
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff f87d 	bl	80032f8 <LL_ADC_IsEnabled>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 8219 	bne.w	8004638 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6819      	ldr	r1, [r3, #0]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	461a      	mov	r2, r3
 8004214:	f7fe ff9e 	bl	8003154 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4aa1      	ldr	r2, [pc, #644]	; (80044a4 <HAL_ADC_ConfigChannel+0x888>)
 800421e:	4293      	cmp	r3, r2
 8004220:	f040 812e 	bne.w	8004480 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10b      	bne.n	800424c <HAL_ADC_ConfigChannel+0x630>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	0e9b      	lsrs	r3, r3, #26
 800423a:	3301      	adds	r3, #1
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2b09      	cmp	r3, #9
 8004242:	bf94      	ite	ls
 8004244:	2301      	movls	r3, #1
 8004246:	2300      	movhi	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e019      	b.n	8004280 <HAL_ADC_ConfigChannel+0x664>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800425a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800425c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800425e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004264:	2320      	movs	r3, #32
 8004266:	e003      	b.n	8004270 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2b09      	cmp	r3, #9
 8004278:	bf94      	ite	ls
 800427a:	2301      	movls	r3, #1
 800427c:	2300      	movhi	r3, #0
 800427e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004280:	2b00      	cmp	r3, #0
 8004282:	d079      	beq.n	8004378 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_ADC_ConfigChannel+0x684>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	0e9b      	lsrs	r3, r3, #26
 8004296:	3301      	adds	r3, #1
 8004298:	069b      	lsls	r3, r3, #26
 800429a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800429e:	e015      	b.n	80042cc <HAL_ADC_ConfigChannel+0x6b0>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80042ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80042b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80042b8:	2320      	movs	r3, #32
 80042ba:	e003      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80042bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	3301      	adds	r3, #1
 80042c6:	069b      	lsls	r3, r3, #26
 80042c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x6d0>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0e9b      	lsrs	r3, r3, #26
 80042de:	3301      	adds	r3, #1
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2101      	movs	r1, #1
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	e017      	b.n	800431c <HAL_ADC_ConfigChannel+0x700>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f4:	fa93 f3a3 	rbit	r3, r3
 80042f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80042fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80042fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004304:	2320      	movs	r3, #32
 8004306:	e003      	b.n	8004310 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	3301      	adds	r3, #1
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	ea42 0103 	orr.w	r1, r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x726>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0e9b      	lsrs	r3, r3, #26
 8004332:	3301      	adds	r3, #1
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	4613      	mov	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	051b      	lsls	r3, r3, #20
 8004340:	e018      	b.n	8004374 <HAL_ADC_ConfigChannel+0x758>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800435a:	2320      	movs	r3, #32
 800435c:	e003      	b.n	8004366 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b2db      	uxtb	r3, r3
 8004366:	3301      	adds	r3, #1
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	4613      	mov	r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4413      	add	r3, r2
 8004372:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004374:	430b      	orrs	r3, r1
 8004376:	e07e      	b.n	8004476 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004380:	2b00      	cmp	r3, #0
 8004382:	d107      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x778>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	0e9b      	lsrs	r3, r3, #26
 800438a:	3301      	adds	r3, #1
 800438c:	069b      	lsls	r3, r3, #26
 800438e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004392:	e015      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x7a4>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80043ac:	2320      	movs	r3, #32
 80043ae:	e003      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80043b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	3301      	adds	r3, #1
 80043ba:	069b      	lsls	r3, r3, #26
 80043bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x7c4>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	3301      	adds	r3, #1
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2101      	movs	r1, #1
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	e017      	b.n	8004410 <HAL_ADC_ConfigChannel+0x7f4>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	fa93 f3a3 	rbit	r3, r3
 80043ec:	61bb      	str	r3, [r7, #24]
  return result;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80043f8:	2320      	movs	r3, #32
 80043fa:	e003      	b.n	8004404 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	3301      	adds	r3, #1
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	2101      	movs	r1, #1
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	ea42 0103 	orr.w	r1, r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <HAL_ADC_ConfigChannel+0x820>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	0e9b      	lsrs	r3, r3, #26
 8004426:	3301      	adds	r3, #1
 8004428:	f003 021f 	and.w	r2, r3, #31
 800442c:	4613      	mov	r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	4413      	add	r3, r2
 8004432:	3b1e      	subs	r3, #30
 8004434:	051b      	lsls	r3, r3, #20
 8004436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800443a:	e01b      	b.n	8004474 <HAL_ADC_ConfigChannel+0x858>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	60fb      	str	r3, [r7, #12]
  return result;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e003      	b.n	8004460 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	3301      	adds	r3, #1
 8004462:	f003 021f 	and.w	r2, r3, #31
 8004466:	4613      	mov	r3, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	4413      	add	r3, r2
 800446c:	3b1e      	subs	r3, #30
 800446e:	051b      	lsls	r3, r3, #20
 8004470:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004474:	430b      	orrs	r3, r1
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	6892      	ldr	r2, [r2, #8]
 800447a:	4619      	mov	r1, r3
 800447c:	f7fe fe3f 	bl	80030fe <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f280 80d7 	bge.w	8004638 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a06      	ldr	r2, [pc, #24]	; (80044a8 <HAL_ADC_ConfigChannel+0x88c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_ADC_ConfigChannel+0x882>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <HAL_ADC_ConfigChannel+0x890>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10a      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x898>
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <HAL_ADC_ConfigChannel+0x894>)
 80044a0:	e009      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x89a>
 80044a2:	bf00      	nop
 80044a4:	47ff0000 	.word	0x47ff0000
 80044a8:	40022000 	.word	0x40022000
 80044ac:	40022100 	.word	0x40022100
 80044b0:	40022300 	.word	0x40022300
 80044b4:	4b65      	ldr	r3, [pc, #404]	; (800464c <HAL_ADC_ConfigChannel+0xa30>)
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fce2 	bl	8002e80 <LL_ADC_GetCommonPathInternalCh>
 80044bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a62      	ldr	r2, [pc, #392]	; (8004650 <HAL_ADC_ConfigChannel+0xa34>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <HAL_ADC_ConfigChannel+0x8b8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a61      	ldr	r2, [pc, #388]	; (8004654 <HAL_ADC_ConfigChannel+0xa38>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d10e      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x8d6>
 80044d4:	485e      	ldr	r0, [pc, #376]	; (8004650 <HAL_ADC_ConfigChannel+0xa34>)
 80044d6:	f7fe ff0f 	bl	80032f8 <LL_ADC_IsEnabled>
 80044da:	4604      	mov	r4, r0
 80044dc:	485d      	ldr	r0, [pc, #372]	; (8004654 <HAL_ADC_ConfigChannel+0xa38>)
 80044de:	f7fe ff0b 	bl	80032f8 <LL_ADC_IsEnabled>
 80044e2:	4603      	mov	r3, r0
 80044e4:	4323      	orrs	r3, r4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	e008      	b.n	8004504 <HAL_ADC_ConfigChannel+0x8e8>
 80044f2:	4859      	ldr	r0, [pc, #356]	; (8004658 <HAL_ADC_ConfigChannel+0xa3c>)
 80044f4:	f7fe ff00 	bl	80032f8 <LL_ADC_IsEnabled>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8084 	beq.w	8004612 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a53      	ldr	r2, [pc, #332]	; (800465c <HAL_ADC_ConfigChannel+0xa40>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d132      	bne.n	800457a <HAL_ADC_ConfigChannel+0x95e>
 8004514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d12c      	bne.n	800457a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a4c      	ldr	r2, [pc, #304]	; (8004658 <HAL_ADC_ConfigChannel+0xa3c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	f040 8086 	bne.w	8004638 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a47      	ldr	r2, [pc, #284]	; (8004650 <HAL_ADC_ConfigChannel+0xa34>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_ADC_ConfigChannel+0x924>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a46      	ldr	r2, [pc, #280]	; (8004654 <HAL_ADC_ConfigChannel+0xa38>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d101      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x928>
 8004540:	4a47      	ldr	r2, [pc, #284]	; (8004660 <HAL_ADC_ConfigChannel+0xa44>)
 8004542:	e000      	b.n	8004546 <HAL_ADC_ConfigChannel+0x92a>
 8004544:	4a41      	ldr	r2, [pc, #260]	; (800464c <HAL_ADC_ConfigChannel+0xa30>)
 8004546:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800454a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f7fe fc82 	bl	8002e5a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004556:	4b43      	ldr	r3, [pc, #268]	; (8004664 <HAL_ADC_ConfigChannel+0xa48>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	099b      	lsrs	r3, r3, #6
 800455c:	4a42      	ldr	r2, [pc, #264]	; (8004668 <HAL_ADC_ConfigChannel+0xa4c>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	3301      	adds	r3, #1
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800456a:	e002      	b.n	8004572 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	3b01      	subs	r3, #1
 8004570:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f9      	bne.n	800456c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004578:	e05e      	b.n	8004638 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a3b      	ldr	r2, [pc, #236]	; (800466c <HAL_ADC_ConfigChannel+0xa50>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d120      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x9aa>
 8004584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d11a      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a30      	ldr	r2, [pc, #192]	; (8004658 <HAL_ADC_ConfigChannel+0xa3c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d14e      	bne.n	8004638 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2c      	ldr	r2, [pc, #176]	; (8004650 <HAL_ADC_ConfigChannel+0xa34>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_ADC_ConfigChannel+0x992>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2a      	ldr	r2, [pc, #168]	; (8004654 <HAL_ADC_ConfigChannel+0xa38>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x996>
 80045ae:	4a2c      	ldr	r2, [pc, #176]	; (8004660 <HAL_ADC_ConfigChannel+0xa44>)
 80045b0:	e000      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x998>
 80045b2:	4a26      	ldr	r2, [pc, #152]	; (800464c <HAL_ADC_ConfigChannel+0xa30>)
 80045b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f7fe fc4b 	bl	8002e5a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045c4:	e038      	b.n	8004638 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a29      	ldr	r2, [pc, #164]	; (8004670 <HAL_ADC_ConfigChannel+0xa54>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d133      	bne.n	8004638 <HAL_ADC_ConfigChannel+0xa1c>
 80045d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d12d      	bne.n	8004638 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1d      	ldr	r2, [pc, #116]	; (8004658 <HAL_ADC_ConfigChannel+0xa3c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d128      	bne.n	8004638 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_ADC_ConfigChannel+0xa34>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_ADC_ConfigChannel+0x9de>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a17      	ldr	r2, [pc, #92]	; (8004654 <HAL_ADC_ConfigChannel+0xa38>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d101      	bne.n	80045fe <HAL_ADC_ConfigChannel+0x9e2>
 80045fa:	4a19      	ldr	r2, [pc, #100]	; (8004660 <HAL_ADC_ConfigChannel+0xa44>)
 80045fc:	e000      	b.n	8004600 <HAL_ADC_ConfigChannel+0x9e4>
 80045fe:	4a13      	ldr	r2, [pc, #76]	; (800464c <HAL_ADC_ConfigChannel+0xa30>)
 8004600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f7fe fc25 	bl	8002e5a <LL_ADC_SetCommonPathInternalCh>
 8004610:	e012      	b.n	8004638 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004616:	f043 0220 	orr.w	r2, r3, #32
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004624:	e008      	b.n	8004638 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004640:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004644:	4618      	mov	r0, r3
 8004646:	37e4      	adds	r7, #228	; 0xe4
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}
 800464c:	58026300 	.word	0x58026300
 8004650:	40022000 	.word	0x40022000
 8004654:	40022100 	.word	0x40022100
 8004658:	58026000 	.word	0x58026000
 800465c:	c7520000 	.word	0xc7520000
 8004660:	40022300 	.word	0x40022300
 8004664:	24000000 	.word	0x24000000
 8004668:	053e2d63 	.word	0x053e2d63
 800466c:	c3210000 	.word	0xc3210000
 8004670:	cb840000 	.word	0xcb840000

08004674 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fe82 	bl	8003394 <LL_ADC_REG_IsConversionOngoing>
 8004690:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fea4 	bl	80033e4 <LL_ADC_INJ_IsConversionOngoing>
 800469c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d103      	bne.n	80046ac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 8098 	beq.w	80047dc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d02a      	beq.n	8004710 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	7e5b      	ldrb	r3, [r3, #25]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d126      	bne.n	8004710 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	7e1b      	ldrb	r3, [r3, #24]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d122      	bne.n	8004710 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80046ca:	2301      	movs	r3, #1
 80046cc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80046ce:	e014      	b.n	80046fa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	4a45      	ldr	r2, [pc, #276]	; (80047e8 <ADC_ConversionStop+0x174>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d90d      	bls.n	80046f4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046dc:	f043 0210 	orr.w	r2, r3, #16
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e074      	b.n	80047de <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d1e3      	bne.n	80046d0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2240      	movs	r2, #64	; 0x40
 800470e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d014      	beq.n	8004740 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe fe3a 	bl	8003394 <LL_ADC_REG_IsConversionOngoing>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe fdf7 	bl	800331e <LL_ADC_IsDisableOngoing>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fe fe16 	bl	800336c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d014      	beq.n	8004770 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe fe4a 	bl	80033e4 <LL_ADC_INJ_IsConversionOngoing>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe fddf 	bl	800331e <LL_ADC_IsDisableOngoing>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d104      	bne.n	8004770 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fe26 	bl	80033bc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d005      	beq.n	8004782 <ADC_ConversionStop+0x10e>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d105      	bne.n	8004788 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800477c:	230c      	movs	r3, #12
 800477e:	617b      	str	r3, [r7, #20]
        break;
 8004780:	e005      	b.n	800478e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004782:	2308      	movs	r3, #8
 8004784:	617b      	str	r3, [r7, #20]
        break;
 8004786:	e002      	b.n	800478e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004788:	2304      	movs	r3, #4
 800478a:	617b      	str	r3, [r7, #20]
        break;
 800478c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800478e:	f7fe fb0b 	bl	8002da8 <HAL_GetTick>
 8004792:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004794:	e01b      	b.n	80047ce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004796:	f7fe fb07 	bl	8002da8 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d914      	bls.n	80047ce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00d      	beq.n	80047ce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b6:	f043 0210 	orr.w	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c2:	f043 0201 	orr.w	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e007      	b.n	80047de <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1dc      	bne.n	8004796 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	000cdbff 	.word	0x000cdbff

080047ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe fd7d 	bl	80032f8 <LL_ADC_IsEnabled>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d16e      	bne.n	80048e2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	4b38      	ldr	r3, [pc, #224]	; (80048ec <ADC_Enable+0x100>)
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00d      	beq.n	800482e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004816:	f043 0210 	orr.w	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004822:	f043 0201 	orr.w	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e05a      	b.n	80048e4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fd38 	bl	80032a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004838:	f7fe fab6 	bl	8002da8 <HAL_GetTick>
 800483c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2b      	ldr	r2, [pc, #172]	; (80048f0 <ADC_Enable+0x104>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <ADC_Enable+0x66>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a29      	ldr	r2, [pc, #164]	; (80048f4 <ADC_Enable+0x108>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d101      	bne.n	8004856 <ADC_Enable+0x6a>
 8004852:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <ADC_Enable+0x10c>)
 8004854:	e000      	b.n	8004858 <ADC_Enable+0x6c>
 8004856:	4b29      	ldr	r3, [pc, #164]	; (80048fc <ADC_Enable+0x110>)
 8004858:	4618      	mov	r0, r3
 800485a:	f7fe fcbb 	bl	80031d4 <LL_ADC_GetMultimode>
 800485e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <ADC_Enable+0x108>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d002      	beq.n	8004870 <ADC_Enable+0x84>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	e000      	b.n	8004872 <ADC_Enable+0x86>
 8004870:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <ADC_Enable+0x104>)
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	4293      	cmp	r3, r2
 8004878:	d02c      	beq.n	80048d4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d130      	bne.n	80048e2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004880:	e028      	b.n	80048d4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe fd36 	bl	80032f8 <LL_ADC_IsEnabled>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe fd06 	bl	80032a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800489c:	f7fe fa84 	bl	8002da8 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d914      	bls.n	80048d4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d00d      	beq.n	80048d4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048bc:	f043 0210 	orr.w	r2, r3, #16
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c8:	f043 0201 	orr.w	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e007      	b.n	80048e4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d1cf      	bne.n	8004882 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	8000003f 	.word	0x8000003f
 80048f0:	40022000 	.word	0x40022000
 80048f4:	40022100 	.word	0x40022100
 80048f8:	40022300 	.word	0x40022300
 80048fc:	58026300 	.word	0x58026300

08004900 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe fd06 	bl	800331e <LL_ADC_IsDisableOngoing>
 8004912:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f7fe fced 	bl	80032f8 <LL_ADC_IsEnabled>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d047      	beq.n	80049b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d144      	bne.n	80049b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 030d 	and.w	r3, r3, #13
 8004934:	2b01      	cmp	r3, #1
 8004936:	d10c      	bne.n	8004952 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe fcc7 	bl	80032d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2203      	movs	r2, #3
 8004948:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800494a:	f7fe fa2d 	bl	8002da8 <HAL_GetTick>
 800494e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004950:	e029      	b.n	80049a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e023      	b.n	80049b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800496e:	f7fe fa1b 	bl	8002da8 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d914      	bls.n	80049a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	f043 0210 	orr.w	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800499a:	f043 0201 	orr.w	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e007      	b.n	80049b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1dc      	bne.n	800496e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a6c      	ldr	r2, [pc, #432]	; (8004b80 <ADC_ConfigureBoostMode+0x1c0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d004      	beq.n	80049dc <ADC_ConfigureBoostMode+0x1c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a6b      	ldr	r2, [pc, #428]	; (8004b84 <ADC_ConfigureBoostMode+0x1c4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d109      	bne.n	80049f0 <ADC_ConfigureBoostMode+0x30>
 80049dc:	4b6a      	ldr	r3, [pc, #424]	; (8004b88 <ADC_ConfigureBoostMode+0x1c8>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e008      	b.n	8004a02 <ADC_ConfigureBoostMode+0x42>
 80049f0:	4b66      	ldr	r3, [pc, #408]	; (8004b8c <ADC_ConfigureBoostMode+0x1cc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf14      	ite	ne
 80049fc:	2301      	movne	r3, #1
 80049fe:	2300      	moveq	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01c      	beq.n	8004a40 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a06:	f005 f87f 	bl	8009b08 <HAL_RCC_GetHCLKFreq>
 8004a0a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a14:	d010      	beq.n	8004a38 <ADC_ConfigureBoostMode+0x78>
 8004a16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a1a:	d873      	bhi.n	8004b04 <ADC_ConfigureBoostMode+0x144>
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a20:	d002      	beq.n	8004a28 <ADC_ConfigureBoostMode+0x68>
 8004a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a26:	d16d      	bne.n	8004b04 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	60fb      	str	r3, [r7, #12]
        break;
 8004a36:	e068      	b.n	8004b0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	089b      	lsrs	r3, r3, #2
 8004a3c:	60fb      	str	r3, [r7, #12]
        break;
 8004a3e:	e064      	b.n	8004b0a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004a40:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a44:	f04f 0100 	mov.w	r1, #0
 8004a48:	f006 fa5a 	bl	800af00 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a4c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a56:	d051      	beq.n	8004afc <ADC_ConfigureBoostMode+0x13c>
 8004a58:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a5c:	d854      	bhi.n	8004b08 <ADC_ConfigureBoostMode+0x148>
 8004a5e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a62:	d047      	beq.n	8004af4 <ADC_ConfigureBoostMode+0x134>
 8004a64:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a68:	d84e      	bhi.n	8004b08 <ADC_ConfigureBoostMode+0x148>
 8004a6a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a6e:	d03d      	beq.n	8004aec <ADC_ConfigureBoostMode+0x12c>
 8004a70:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a74:	d848      	bhi.n	8004b08 <ADC_ConfigureBoostMode+0x148>
 8004a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a7a:	d033      	beq.n	8004ae4 <ADC_ConfigureBoostMode+0x124>
 8004a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a80:	d842      	bhi.n	8004b08 <ADC_ConfigureBoostMode+0x148>
 8004a82:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004a86:	d029      	beq.n	8004adc <ADC_ConfigureBoostMode+0x11c>
 8004a88:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004a8c:	d83c      	bhi.n	8004b08 <ADC_ConfigureBoostMode+0x148>
 8004a8e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004a92:	d01a      	beq.n	8004aca <ADC_ConfigureBoostMode+0x10a>
 8004a94:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004a98:	d836      	bhi.n	8004b08 <ADC_ConfigureBoostMode+0x148>
 8004a9a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004a9e:	d014      	beq.n	8004aca <ADC_ConfigureBoostMode+0x10a>
 8004aa0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004aa4:	d830      	bhi.n	8004b08 <ADC_ConfigureBoostMode+0x148>
 8004aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aaa:	d00e      	beq.n	8004aca <ADC_ConfigureBoostMode+0x10a>
 8004aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab0:	d82a      	bhi.n	8004b08 <ADC_ConfigureBoostMode+0x148>
 8004ab2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ab6:	d008      	beq.n	8004aca <ADC_ConfigureBoostMode+0x10a>
 8004ab8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004abc:	d824      	bhi.n	8004b08 <ADC_ConfigureBoostMode+0x148>
 8004abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ac2:	d002      	beq.n	8004aca <ADC_ConfigureBoostMode+0x10a>
 8004ac4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ac8:	d11e      	bne.n	8004b08 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	0c9b      	lsrs	r3, r3, #18
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	60fb      	str	r3, [r7, #12]
        break;
 8004ada:	e016      	b.n	8004b0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	091b      	lsrs	r3, r3, #4
 8004ae0:	60fb      	str	r3, [r7, #12]
        break;
 8004ae2:	e012      	b.n	8004b0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	60fb      	str	r3, [r7, #12]
        break;
 8004aea:	e00e      	b.n	8004b0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	099b      	lsrs	r3, r3, #6
 8004af0:	60fb      	str	r3, [r7, #12]
        break;
 8004af2:	e00a      	b.n	8004b0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	09db      	lsrs	r3, r3, #7
 8004af8:	60fb      	str	r3, [r7, #12]
        break;
 8004afa:	e006      	b.n	8004b0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	0a1b      	lsrs	r3, r3, #8
 8004b00:	60fb      	str	r3, [r7, #12]
        break;
 8004b02:	e002      	b.n	8004b0a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b04:	bf00      	nop
 8004b06:	e000      	b.n	8004b0a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004b08:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	085b      	lsrs	r3, r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <ADC_ConfigureBoostMode+0x1d0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d808      	bhi.n	8004b2a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b26:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b28:	e025      	b.n	8004b76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <ADC_ConfigureBoostMode+0x1d4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d80a      	bhi.n	8004b48 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b44:	609a      	str	r2, [r3, #8]
}
 8004b46:	e016      	b.n	8004b76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <ADC_ConfigureBoostMode+0x1d8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d80a      	bhi.n	8004b66 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b62:	609a      	str	r2, [r3, #8]
}
 8004b64:	e007      	b.n	8004b76 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004b74:	609a      	str	r2, [r3, #8]
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40022000 	.word	0x40022000
 8004b84:	40022100 	.word	0x40022100
 8004b88:	40022300 	.word	0x40022300
 8004b8c:	58026300 	.word	0x58026300
 8004b90:	005f5e10 	.word	0x005f5e10
 8004b94:	00bebc20 	.word	0x00bebc20
 8004b98:	017d7840 	.word	0x017d7840

08004b9c <LL_ADC_IsEnabled>:
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <LL_ADC_IsEnabled+0x18>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <LL_ADC_IsEnabled+0x1a>
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d101      	bne.n	8004bda <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b0a3      	sub	sp, #140	; 0x8c
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0c1      	b.n	8004d8a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5e      	ldr	r2, [pc, #376]	; (8004d94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d102      	bne.n	8004c26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c20:	4b5d      	ldr	r3, [pc, #372]	; (8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e001      	b.n	8004c2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0a0      	b.n	8004d8a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff ffb9 	bl	8004bc2 <LL_ADC_REG_IsConversionOngoing>
 8004c50:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff ffb2 	bl	8004bc2 <LL_ADC_REG_IsConversionOngoing>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 8081 	bne.w	8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d17c      	bne.n	8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a48      	ldr	r2, [pc, #288]	; (8004d94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a46      	ldr	r2, [pc, #280]	; (8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d101      	bne.n	8004c86 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004c82:	4b46      	ldr	r3, [pc, #280]	; (8004d9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c84:	e000      	b.n	8004c88 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004c86:	4b46      	ldr	r3, [pc, #280]	; (8004da0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c88:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d039      	beq.n	8004d06 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ca2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a3a      	ldr	r2, [pc, #232]	; (8004d94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d004      	beq.n	8004cb8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a39      	ldr	r2, [pc, #228]	; (8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d10e      	bne.n	8004cd6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004cb8:	4836      	ldr	r0, [pc, #216]	; (8004d94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cba:	f7ff ff6f 	bl	8004b9c <LL_ADC_IsEnabled>
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	4835      	ldr	r0, [pc, #212]	; (8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cc2:	f7ff ff6b 	bl	8004b9c <LL_ADC_IsEnabled>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4323      	orrs	r3, r4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	e008      	b.n	8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004cd6:	4833      	ldr	r0, [pc, #204]	; (8004da4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004cd8:	f7ff ff60 	bl	8004b9c <LL_ADC_IsEnabled>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf0c      	ite	eq
 8004ce2:	2301      	moveq	r3, #1
 8004ce4:	2300      	movne	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d047      	beq.n	8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004cec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	4b2d      	ldr	r3, [pc, #180]	; (8004da8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	6811      	ldr	r1, [r2, #0]
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	6892      	ldr	r2, [r2, #8]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d02:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d04:	e03a      	b.n	8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004d06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d10:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1f      	ldr	r2, [pc, #124]	; (8004d94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1d      	ldr	r2, [pc, #116]	; (8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10e      	bne.n	8004d44 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004d26:	481b      	ldr	r0, [pc, #108]	; (8004d94 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d28:	f7ff ff38 	bl	8004b9c <LL_ADC_IsEnabled>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	481a      	ldr	r0, [pc, #104]	; (8004d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d30:	f7ff ff34 	bl	8004b9c <LL_ADC_IsEnabled>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4323      	orrs	r3, r4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	e008      	b.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004d44:	4817      	ldr	r0, [pc, #92]	; (8004da4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004d46:	f7ff ff29 	bl	8004b9c <LL_ADC_IsEnabled>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d010      	beq.n	8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d64:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d66:	e009      	b.n	8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004d7a:	e000      	b.n	8004d7e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d86:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	378c      	adds	r7, #140	; 0x8c
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd90      	pop	{r4, r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40022100 	.word	0x40022100
 8004d9c:	40022300 	.word	0x40022300
 8004da0:	58026300 	.word	0x58026300
 8004da4:	58026000 	.word	0x58026000
 8004da8:	fffff0e0 	.word	0xfffff0e0

08004dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <__NVIC_SetPriorityGrouping+0x40>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dda:	4a04      	ldr	r2, [pc, #16]	; (8004dec <__NVIC_SetPriorityGrouping+0x40>)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	60d3      	str	r3, [r2, #12]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	e000ed00 	.word	0xe000ed00
 8004df0:	05fa0000 	.word	0x05fa0000

08004df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004df8:	4b04      	ldr	r3, [pc, #16]	; (8004e0c <__NVIC_GetPriorityGrouping+0x18>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	0a1b      	lsrs	r3, r3, #8
 8004dfe:	f003 0307 	and.w	r3, r3, #7
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	e000ed00 	.word	0xe000ed00

08004e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	db0b      	blt.n	8004e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	f003 021f 	and.w	r2, r3, #31
 8004e28:	4907      	ldr	r1, [pc, #28]	; (8004e48 <__NVIC_EnableIRQ+0x38>)
 8004e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	2001      	movs	r0, #1
 8004e32:	fa00 f202 	lsl.w	r2, r0, r2
 8004e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	e000e100 	.word	0xe000e100

08004e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	6039      	str	r1, [r7, #0]
 8004e56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	db0a      	blt.n	8004e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	490c      	ldr	r1, [pc, #48]	; (8004e98 <__NVIC_SetPriority+0x4c>)
 8004e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e6a:	0112      	lsls	r2, r2, #4
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	440b      	add	r3, r1
 8004e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e74:	e00a      	b.n	8004e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	4908      	ldr	r1, [pc, #32]	; (8004e9c <__NVIC_SetPriority+0x50>)
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	3b04      	subs	r3, #4
 8004e84:	0112      	lsls	r2, r2, #4
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	440b      	add	r3, r1
 8004e8a:	761a      	strb	r2, [r3, #24]
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	e000e100 	.word	0xe000e100
 8004e9c:	e000ed00 	.word	0xe000ed00

08004ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b089      	sub	sp, #36	; 0x24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f1c3 0307 	rsb	r3, r3, #7
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	bf28      	it	cs
 8004ebe:	2304      	movcs	r3, #4
 8004ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2b06      	cmp	r3, #6
 8004ec8:	d902      	bls.n	8004ed0 <NVIC_EncodePriority+0x30>
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3b03      	subs	r3, #3
 8004ece:	e000      	b.n	8004ed2 <NVIC_EncodePriority+0x32>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43da      	mvns	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef2:	43d9      	mvns	r1, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef8:	4313      	orrs	r3, r2
         );
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3724      	adds	r7, #36	; 0x24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
	...

08004f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f18:	d301      	bcc.n	8004f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e00f      	b.n	8004f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <SysTick_Config+0x40>)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f26:	210f      	movs	r1, #15
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	f7ff ff8e 	bl	8004e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <SysTick_Config+0x40>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f36:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <SysTick_Config+0x40>)
 8004f38:	2207      	movs	r2, #7
 8004f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	e000e010 	.word	0xe000e010

08004f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff ff29 	bl	8004dac <__NVIC_SetPriorityGrouping>
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b086      	sub	sp, #24
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	4603      	mov	r3, r0
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f70:	f7ff ff40 	bl	8004df4 <__NVIC_GetPriorityGrouping>
 8004f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	6978      	ldr	r0, [r7, #20]
 8004f7c:	f7ff ff90 	bl	8004ea0 <NVIC_EncodePriority>
 8004f80:	4602      	mov	r2, r0
 8004f82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f86:	4611      	mov	r1, r2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff ff5f 	bl	8004e4c <__NVIC_SetPriority>
}
 8004f8e:	bf00      	nop
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff ff33 	bl	8004e10 <__NVIC_EnableIRQ>
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff ffa4 	bl	8004f08 <SysTick_Config>
 8004fc0:	4603      	mov	r3, r0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004fd4:	f7fd fee8 	bl	8002da8 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e314      	b.n	800560e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a66      	ldr	r2, [pc, #408]	; (8005184 <HAL_DMA_Init+0x1b8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d04a      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a65      	ldr	r2, [pc, #404]	; (8005188 <HAL_DMA_Init+0x1bc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d045      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a63      	ldr	r2, [pc, #396]	; (800518c <HAL_DMA_Init+0x1c0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d040      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a62      	ldr	r2, [pc, #392]	; (8005190 <HAL_DMA_Init+0x1c4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d03b      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a60      	ldr	r2, [pc, #384]	; (8005194 <HAL_DMA_Init+0x1c8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d036      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a5f      	ldr	r2, [pc, #380]	; (8005198 <HAL_DMA_Init+0x1cc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d031      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a5d      	ldr	r2, [pc, #372]	; (800519c <HAL_DMA_Init+0x1d0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d02c      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a5c      	ldr	r2, [pc, #368]	; (80051a0 <HAL_DMA_Init+0x1d4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d027      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a5a      	ldr	r2, [pc, #360]	; (80051a4 <HAL_DMA_Init+0x1d8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d022      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a59      	ldr	r2, [pc, #356]	; (80051a8 <HAL_DMA_Init+0x1dc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d01d      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a57      	ldr	r2, [pc, #348]	; (80051ac <HAL_DMA_Init+0x1e0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d018      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a56      	ldr	r2, [pc, #344]	; (80051b0 <HAL_DMA_Init+0x1e4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a54      	ldr	r2, [pc, #336]	; (80051b4 <HAL_DMA_Init+0x1e8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a53      	ldr	r2, [pc, #332]	; (80051b8 <HAL_DMA_Init+0x1ec>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a51      	ldr	r2, [pc, #324]	; (80051bc <HAL_DMA_Init+0x1f0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_DMA_Init+0xb8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a50      	ldr	r2, [pc, #320]	; (80051c0 <HAL_DMA_Init+0x1f4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d101      	bne.n	8005088 <HAL_DMA_Init+0xbc>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <HAL_DMA_Init+0xbe>
 8005088:	2300      	movs	r3, #0
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 813c 	beq.w	8005308 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a37      	ldr	r2, [pc, #220]	; (8005184 <HAL_DMA_Init+0x1b8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d04a      	beq.n	8005140 <HAL_DMA_Init+0x174>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a36      	ldr	r2, [pc, #216]	; (8005188 <HAL_DMA_Init+0x1bc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d045      	beq.n	8005140 <HAL_DMA_Init+0x174>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a34      	ldr	r2, [pc, #208]	; (800518c <HAL_DMA_Init+0x1c0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d040      	beq.n	8005140 <HAL_DMA_Init+0x174>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a33      	ldr	r2, [pc, #204]	; (8005190 <HAL_DMA_Init+0x1c4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d03b      	beq.n	8005140 <HAL_DMA_Init+0x174>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a31      	ldr	r2, [pc, #196]	; (8005194 <HAL_DMA_Init+0x1c8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d036      	beq.n	8005140 <HAL_DMA_Init+0x174>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a30      	ldr	r2, [pc, #192]	; (8005198 <HAL_DMA_Init+0x1cc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d031      	beq.n	8005140 <HAL_DMA_Init+0x174>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a2e      	ldr	r2, [pc, #184]	; (800519c <HAL_DMA_Init+0x1d0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d02c      	beq.n	8005140 <HAL_DMA_Init+0x174>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a2d      	ldr	r2, [pc, #180]	; (80051a0 <HAL_DMA_Init+0x1d4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d027      	beq.n	8005140 <HAL_DMA_Init+0x174>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2b      	ldr	r2, [pc, #172]	; (80051a4 <HAL_DMA_Init+0x1d8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d022      	beq.n	8005140 <HAL_DMA_Init+0x174>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2a      	ldr	r2, [pc, #168]	; (80051a8 <HAL_DMA_Init+0x1dc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d01d      	beq.n	8005140 <HAL_DMA_Init+0x174>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a28      	ldr	r2, [pc, #160]	; (80051ac <HAL_DMA_Init+0x1e0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d018      	beq.n	8005140 <HAL_DMA_Init+0x174>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a27      	ldr	r2, [pc, #156]	; (80051b0 <HAL_DMA_Init+0x1e4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d013      	beq.n	8005140 <HAL_DMA_Init+0x174>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a25      	ldr	r2, [pc, #148]	; (80051b4 <HAL_DMA_Init+0x1e8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00e      	beq.n	8005140 <HAL_DMA_Init+0x174>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a24      	ldr	r2, [pc, #144]	; (80051b8 <HAL_DMA_Init+0x1ec>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d009      	beq.n	8005140 <HAL_DMA_Init+0x174>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a22      	ldr	r2, [pc, #136]	; (80051bc <HAL_DMA_Init+0x1f0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d004      	beq.n	8005140 <HAL_DMA_Init+0x174>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <HAL_DMA_Init+0x1f4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d108      	bne.n	8005152 <HAL_DMA_Init+0x186>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	e007      	b.n	8005162 <HAL_DMA_Init+0x196>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005162:	e02f      	b.n	80051c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005164:	f7fd fe20 	bl	8002da8 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b05      	cmp	r3, #5
 8005170:	d928      	bls.n	80051c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2203      	movs	r2, #3
 800517c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e244      	b.n	800560e <HAL_DMA_Init+0x642>
 8005184:	40020010 	.word	0x40020010
 8005188:	40020028 	.word	0x40020028
 800518c:	40020040 	.word	0x40020040
 8005190:	40020058 	.word	0x40020058
 8005194:	40020070 	.word	0x40020070
 8005198:	40020088 	.word	0x40020088
 800519c:	400200a0 	.word	0x400200a0
 80051a0:	400200b8 	.word	0x400200b8
 80051a4:	40020410 	.word	0x40020410
 80051a8:	40020428 	.word	0x40020428
 80051ac:	40020440 	.word	0x40020440
 80051b0:	40020458 	.word	0x40020458
 80051b4:	40020470 	.word	0x40020470
 80051b8:	40020488 	.word	0x40020488
 80051bc:	400204a0 	.word	0x400204a0
 80051c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1c8      	bne.n	8005164 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4b84      	ldr	r3, [pc, #528]	; (80053f0 <HAL_DMA_Init+0x424>)
 80051de:	4013      	ands	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80051ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005202:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	2b04      	cmp	r3, #4
 8005216:	d107      	bne.n	8005228 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	4313      	orrs	r3, r2
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b28      	cmp	r3, #40	; 0x28
 800522e:	d903      	bls.n	8005238 <HAL_DMA_Init+0x26c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b2e      	cmp	r3, #46	; 0x2e
 8005236:	d91f      	bls.n	8005278 <HAL_DMA_Init+0x2ac>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b3e      	cmp	r3, #62	; 0x3e
 800523e:	d903      	bls.n	8005248 <HAL_DMA_Init+0x27c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b42      	cmp	r3, #66	; 0x42
 8005246:	d917      	bls.n	8005278 <HAL_DMA_Init+0x2ac>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b46      	cmp	r3, #70	; 0x46
 800524e:	d903      	bls.n	8005258 <HAL_DMA_Init+0x28c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b48      	cmp	r3, #72	; 0x48
 8005256:	d90f      	bls.n	8005278 <HAL_DMA_Init+0x2ac>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b4e      	cmp	r3, #78	; 0x4e
 800525e:	d903      	bls.n	8005268 <HAL_DMA_Init+0x29c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b52      	cmp	r3, #82	; 0x52
 8005266:	d907      	bls.n	8005278 <HAL_DMA_Init+0x2ac>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b73      	cmp	r3, #115	; 0x73
 800526e:	d905      	bls.n	800527c <HAL_DMA_Init+0x2b0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b77      	cmp	r3, #119	; 0x77
 8005276:	d801      	bhi.n	800527c <HAL_DMA_Init+0x2b0>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <HAL_DMA_Init+0x2b2>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005288:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 0307 	bic.w	r3, r3, #7
 80052a0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d117      	bne.n	80052e4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00e      	beq.n	80052e4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f001 f9b6 	bl	8006638 <DMA_CheckFifoParam>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d008      	beq.n	80052e4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2240      	movs	r2, #64	; 0x40
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e194      	b.n	800560e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 f8f1 	bl	80064d4 <DMA_CalcBaseAndBitshift>
 80052f2:	4603      	mov	r3, r0
 80052f4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	223f      	movs	r2, #63	; 0x3f
 8005300:	409a      	lsls	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	609a      	str	r2, [r3, #8]
 8005306:	e0ca      	b.n	800549e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a39      	ldr	r2, [pc, #228]	; (80053f4 <HAL_DMA_Init+0x428>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d022      	beq.n	8005358 <HAL_DMA_Init+0x38c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a38      	ldr	r2, [pc, #224]	; (80053f8 <HAL_DMA_Init+0x42c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d01d      	beq.n	8005358 <HAL_DMA_Init+0x38c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a36      	ldr	r2, [pc, #216]	; (80053fc <HAL_DMA_Init+0x430>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d018      	beq.n	8005358 <HAL_DMA_Init+0x38c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a35      	ldr	r2, [pc, #212]	; (8005400 <HAL_DMA_Init+0x434>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d013      	beq.n	8005358 <HAL_DMA_Init+0x38c>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a33      	ldr	r2, [pc, #204]	; (8005404 <HAL_DMA_Init+0x438>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <HAL_DMA_Init+0x38c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a32      	ldr	r2, [pc, #200]	; (8005408 <HAL_DMA_Init+0x43c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d009      	beq.n	8005358 <HAL_DMA_Init+0x38c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a30      	ldr	r2, [pc, #192]	; (800540c <HAL_DMA_Init+0x440>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <HAL_DMA_Init+0x38c>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a2f      	ldr	r2, [pc, #188]	; (8005410 <HAL_DMA_Init+0x444>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d101      	bne.n	800535c <HAL_DMA_Init+0x390>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <HAL_DMA_Init+0x392>
 800535c:	2300      	movs	r3, #0
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8094 	beq.w	800548c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <HAL_DMA_Init+0x428>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d021      	beq.n	80053b2 <HAL_DMA_Init+0x3e6>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a21      	ldr	r2, [pc, #132]	; (80053f8 <HAL_DMA_Init+0x42c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d01c      	beq.n	80053b2 <HAL_DMA_Init+0x3e6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <HAL_DMA_Init+0x430>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d017      	beq.n	80053b2 <HAL_DMA_Init+0x3e6>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <HAL_DMA_Init+0x434>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d012      	beq.n	80053b2 <HAL_DMA_Init+0x3e6>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1c      	ldr	r2, [pc, #112]	; (8005404 <HAL_DMA_Init+0x438>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00d      	beq.n	80053b2 <HAL_DMA_Init+0x3e6>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <HAL_DMA_Init+0x43c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d008      	beq.n	80053b2 <HAL_DMA_Init+0x3e6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a19      	ldr	r2, [pc, #100]	; (800540c <HAL_DMA_Init+0x440>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <HAL_DMA_Init+0x3e6>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a18      	ldr	r2, [pc, #96]	; (8005410 <HAL_DMA_Init+0x444>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4b11      	ldr	r3, [pc, #68]	; (8005414 <HAL_DMA_Init+0x448>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d01d      	beq.n	8005418 <HAL_DMA_Init+0x44c>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2b80      	cmp	r3, #128	; 0x80
 80053e2:	d102      	bne.n	80053ea <HAL_DMA_Init+0x41e>
 80053e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053e8:	e017      	b.n	800541a <HAL_DMA_Init+0x44e>
 80053ea:	2300      	movs	r3, #0
 80053ec:	e015      	b.n	800541a <HAL_DMA_Init+0x44e>
 80053ee:	bf00      	nop
 80053f0:	fe10803f 	.word	0xfe10803f
 80053f4:	58025408 	.word	0x58025408
 80053f8:	5802541c 	.word	0x5802541c
 80053fc:	58025430 	.word	0x58025430
 8005400:	58025444 	.word	0x58025444
 8005404:	58025458 	.word	0x58025458
 8005408:	5802546c 	.word	0x5802546c
 800540c:	58025480 	.word	0x58025480
 8005410:	58025494 	.word	0x58025494
 8005414:	fffe000f 	.word	0xfffe000f
 8005418:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	68d2      	ldr	r2, [r2, #12]
 800541e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005420:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005428:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005430:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005448:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	4b6e      	ldr	r3, [pc, #440]	; (8005618 <HAL_DMA_Init+0x64c>)
 8005460:	4413      	add	r3, r2
 8005462:	4a6e      	ldr	r2, [pc, #440]	; (800561c <HAL_DMA_Init+0x650>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	009a      	lsls	r2, r3, #2
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f001 f82f 	bl	80064d4 <DMA_CalcBaseAndBitshift>
 8005476:	4603      	mov	r3, r0
 8005478:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547e:	f003 031f 	and.w	r3, r3, #31
 8005482:	2201      	movs	r2, #1
 8005484:	409a      	lsls	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	e008      	b.n	800549e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2240      	movs	r2, #64	; 0x40
 8005490:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2203      	movs	r2, #3
 8005496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e0b7      	b.n	800560e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a5f      	ldr	r2, [pc, #380]	; (8005620 <HAL_DMA_Init+0x654>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d072      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a5d      	ldr	r2, [pc, #372]	; (8005624 <HAL_DMA_Init+0x658>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d06d      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a5c      	ldr	r2, [pc, #368]	; (8005628 <HAL_DMA_Init+0x65c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d068      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a5a      	ldr	r2, [pc, #360]	; (800562c <HAL_DMA_Init+0x660>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d063      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a59      	ldr	r2, [pc, #356]	; (8005630 <HAL_DMA_Init+0x664>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d05e      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a57      	ldr	r2, [pc, #348]	; (8005634 <HAL_DMA_Init+0x668>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d059      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a56      	ldr	r2, [pc, #344]	; (8005638 <HAL_DMA_Init+0x66c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d054      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a54      	ldr	r2, [pc, #336]	; (800563c <HAL_DMA_Init+0x670>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d04f      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a53      	ldr	r2, [pc, #332]	; (8005640 <HAL_DMA_Init+0x674>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d04a      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a51      	ldr	r2, [pc, #324]	; (8005644 <HAL_DMA_Init+0x678>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d045      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a50      	ldr	r2, [pc, #320]	; (8005648 <HAL_DMA_Init+0x67c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d040      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a4e      	ldr	r2, [pc, #312]	; (800564c <HAL_DMA_Init+0x680>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d03b      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a4d      	ldr	r2, [pc, #308]	; (8005650 <HAL_DMA_Init+0x684>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d036      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a4b      	ldr	r2, [pc, #300]	; (8005654 <HAL_DMA_Init+0x688>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d031      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a4a      	ldr	r2, [pc, #296]	; (8005658 <HAL_DMA_Init+0x68c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d02c      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a48      	ldr	r2, [pc, #288]	; (800565c <HAL_DMA_Init+0x690>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d027      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a47      	ldr	r2, [pc, #284]	; (8005660 <HAL_DMA_Init+0x694>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d022      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a45      	ldr	r2, [pc, #276]	; (8005664 <HAL_DMA_Init+0x698>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01d      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a44      	ldr	r2, [pc, #272]	; (8005668 <HAL_DMA_Init+0x69c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d018      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a42      	ldr	r2, [pc, #264]	; (800566c <HAL_DMA_Init+0x6a0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a41      	ldr	r2, [pc, #260]	; (8005670 <HAL_DMA_Init+0x6a4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a3f      	ldr	r2, [pc, #252]	; (8005674 <HAL_DMA_Init+0x6a8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a3e      	ldr	r2, [pc, #248]	; (8005678 <HAL_DMA_Init+0x6ac>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_DMA_Init+0x5c2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a3c      	ldr	r2, [pc, #240]	; (800567c <HAL_DMA_Init+0x6b0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d101      	bne.n	8005592 <HAL_DMA_Init+0x5c6>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <HAL_DMA_Init+0x5c8>
 8005592:	2300      	movs	r3, #0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d032      	beq.n	80055fe <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 f8c9 	bl	8006730 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b80      	cmp	r3, #128	; 0x80
 80055a4:	d102      	bne.n	80055ac <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d010      	beq.n	80055ec <HAL_DMA_Init+0x620>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d80c      	bhi.n	80055ec <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f001 f946 	bl	8006864 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	e008      	b.n	80055fe <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	a7fdabf8 	.word	0xa7fdabf8
 800561c:	cccccccd 	.word	0xcccccccd
 8005620:	40020010 	.word	0x40020010
 8005624:	40020028 	.word	0x40020028
 8005628:	40020040 	.word	0x40020040
 800562c:	40020058 	.word	0x40020058
 8005630:	40020070 	.word	0x40020070
 8005634:	40020088 	.word	0x40020088
 8005638:	400200a0 	.word	0x400200a0
 800563c:	400200b8 	.word	0x400200b8
 8005640:	40020410 	.word	0x40020410
 8005644:	40020428 	.word	0x40020428
 8005648:	40020440 	.word	0x40020440
 800564c:	40020458 	.word	0x40020458
 8005650:	40020470 	.word	0x40020470
 8005654:	40020488 	.word	0x40020488
 8005658:	400204a0 	.word	0x400204a0
 800565c:	400204b8 	.word	0x400204b8
 8005660:	58025408 	.word	0x58025408
 8005664:	5802541c 	.word	0x5802541c
 8005668:	58025430 	.word	0x58025430
 800566c:	58025444 	.word	0x58025444
 8005670:	58025458 	.word	0x58025458
 8005674:	5802546c 	.word	0x5802546c
 8005678:	58025480 	.word	0x58025480
 800567c:	58025494 	.word	0x58025494

08005680 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08a      	sub	sp, #40	; 0x28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800568c:	4b67      	ldr	r3, [pc, #412]	; (800582c <HAL_DMA_IRQHandler+0x1ac>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a67      	ldr	r2, [pc, #412]	; (8005830 <HAL_DMA_IRQHandler+0x1b0>)
 8005692:	fba2 2303 	umull	r2, r3, r2, r3
 8005696:	0a9b      	lsrs	r3, r3, #10
 8005698:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a5f      	ldr	r2, [pc, #380]	; (8005834 <HAL_DMA_IRQHandler+0x1b4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d04a      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a5d      	ldr	r2, [pc, #372]	; (8005838 <HAL_DMA_IRQHandler+0x1b8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d045      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a5c      	ldr	r2, [pc, #368]	; (800583c <HAL_DMA_IRQHandler+0x1bc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d040      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a5a      	ldr	r2, [pc, #360]	; (8005840 <HAL_DMA_IRQHandler+0x1c0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d03b      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a59      	ldr	r2, [pc, #356]	; (8005844 <HAL_DMA_IRQHandler+0x1c4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d036      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a57      	ldr	r2, [pc, #348]	; (8005848 <HAL_DMA_IRQHandler+0x1c8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d031      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a56      	ldr	r2, [pc, #344]	; (800584c <HAL_DMA_IRQHandler+0x1cc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d02c      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a54      	ldr	r2, [pc, #336]	; (8005850 <HAL_DMA_IRQHandler+0x1d0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d027      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a53      	ldr	r2, [pc, #332]	; (8005854 <HAL_DMA_IRQHandler+0x1d4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d022      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a51      	ldr	r2, [pc, #324]	; (8005858 <HAL_DMA_IRQHandler+0x1d8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d01d      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a50      	ldr	r2, [pc, #320]	; (800585c <HAL_DMA_IRQHandler+0x1dc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d018      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a4e      	ldr	r2, [pc, #312]	; (8005860 <HAL_DMA_IRQHandler+0x1e0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a4d      	ldr	r2, [pc, #308]	; (8005864 <HAL_DMA_IRQHandler+0x1e4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a4b      	ldr	r2, [pc, #300]	; (8005868 <HAL_DMA_IRQHandler+0x1e8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a4a      	ldr	r2, [pc, #296]	; (800586c <HAL_DMA_IRQHandler+0x1ec>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_DMA_IRQHandler+0xd2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a48      	ldr	r2, [pc, #288]	; (8005870 <HAL_DMA_IRQHandler+0x1f0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d101      	bne.n	8005756 <HAL_DMA_IRQHandler+0xd6>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <HAL_DMA_IRQHandler+0xd8>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 842b 	beq.w	8005fb4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	2208      	movs	r2, #8
 8005768:	409a      	lsls	r2, r3
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 80a2 	beq.w	80058b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2e      	ldr	r2, [pc, #184]	; (8005834 <HAL_DMA_IRQHandler+0x1b4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d04a      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2d      	ldr	r2, [pc, #180]	; (8005838 <HAL_DMA_IRQHandler+0x1b8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d045      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2b      	ldr	r2, [pc, #172]	; (800583c <HAL_DMA_IRQHandler+0x1bc>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d040      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2a      	ldr	r2, [pc, #168]	; (8005840 <HAL_DMA_IRQHandler+0x1c0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d03b      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a28      	ldr	r2, [pc, #160]	; (8005844 <HAL_DMA_IRQHandler+0x1c4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d036      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a27      	ldr	r2, [pc, #156]	; (8005848 <HAL_DMA_IRQHandler+0x1c8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d031      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a25      	ldr	r2, [pc, #148]	; (800584c <HAL_DMA_IRQHandler+0x1cc>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d02c      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a24      	ldr	r2, [pc, #144]	; (8005850 <HAL_DMA_IRQHandler+0x1d0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d027      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a22      	ldr	r2, [pc, #136]	; (8005854 <HAL_DMA_IRQHandler+0x1d4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d022      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a21      	ldr	r2, [pc, #132]	; (8005858 <HAL_DMA_IRQHandler+0x1d8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d01d      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1f      	ldr	r2, [pc, #124]	; (800585c <HAL_DMA_IRQHandler+0x1dc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d018      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <HAL_DMA_IRQHandler+0x1e0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1c      	ldr	r2, [pc, #112]	; (8005864 <HAL_DMA_IRQHandler+0x1e4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <HAL_DMA_IRQHandler+0x1e8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d009      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <HAL_DMA_IRQHandler+0x1ec>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_DMA_IRQHandler+0x194>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a18      	ldr	r2, [pc, #96]	; (8005870 <HAL_DMA_IRQHandler+0x1f0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d12f      	bne.n	8005874 <HAL_DMA_IRQHandler+0x1f4>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	bf14      	ite	ne
 8005822:	2301      	movne	r3, #1
 8005824:	2300      	moveq	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	e02e      	b.n	8005888 <HAL_DMA_IRQHandler+0x208>
 800582a:	bf00      	nop
 800582c:	24000000 	.word	0x24000000
 8005830:	1b4e81b5 	.word	0x1b4e81b5
 8005834:	40020010 	.word	0x40020010
 8005838:	40020028 	.word	0x40020028
 800583c:	40020040 	.word	0x40020040
 8005840:	40020058 	.word	0x40020058
 8005844:	40020070 	.word	0x40020070
 8005848:	40020088 	.word	0x40020088
 800584c:	400200a0 	.word	0x400200a0
 8005850:	400200b8 	.word	0x400200b8
 8005854:	40020410 	.word	0x40020410
 8005858:	40020428 	.word	0x40020428
 800585c:	40020440 	.word	0x40020440
 8005860:	40020458 	.word	0x40020458
 8005864:	40020470 	.word	0x40020470
 8005868:	40020488 	.word	0x40020488
 800586c:	400204a0 	.word	0x400204a0
 8005870:	400204b8 	.word	0x400204b8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	bf14      	ite	ne
 8005882:	2301      	movne	r3, #1
 8005884:	2300      	moveq	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d015      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0204 	bic.w	r2, r2, #4
 800589a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	2208      	movs	r2, #8
 80058a6:	409a      	lsls	r2, r3
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b0:	f043 0201 	orr.w	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	fa22 f303 	lsr.w	r3, r2, r3
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d06e      	beq.n	80059ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a69      	ldr	r2, [pc, #420]	; (8005a78 <HAL_DMA_IRQHandler+0x3f8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d04a      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a67      	ldr	r2, [pc, #412]	; (8005a7c <HAL_DMA_IRQHandler+0x3fc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d045      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a66      	ldr	r2, [pc, #408]	; (8005a80 <HAL_DMA_IRQHandler+0x400>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d040      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a64      	ldr	r2, [pc, #400]	; (8005a84 <HAL_DMA_IRQHandler+0x404>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d03b      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a63      	ldr	r2, [pc, #396]	; (8005a88 <HAL_DMA_IRQHandler+0x408>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d036      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a61      	ldr	r2, [pc, #388]	; (8005a8c <HAL_DMA_IRQHandler+0x40c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d031      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a60      	ldr	r2, [pc, #384]	; (8005a90 <HAL_DMA_IRQHandler+0x410>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d02c      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a5e      	ldr	r2, [pc, #376]	; (8005a94 <HAL_DMA_IRQHandler+0x414>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d027      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a5d      	ldr	r2, [pc, #372]	; (8005a98 <HAL_DMA_IRQHandler+0x418>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a5b      	ldr	r2, [pc, #364]	; (8005a9c <HAL_DMA_IRQHandler+0x41c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01d      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a5a      	ldr	r2, [pc, #360]	; (8005aa0 <HAL_DMA_IRQHandler+0x420>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a58      	ldr	r2, [pc, #352]	; (8005aa4 <HAL_DMA_IRQHandler+0x424>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a57      	ldr	r2, [pc, #348]	; (8005aa8 <HAL_DMA_IRQHandler+0x428>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a55      	ldr	r2, [pc, #340]	; (8005aac <HAL_DMA_IRQHandler+0x42c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a54      	ldr	r2, [pc, #336]	; (8005ab0 <HAL_DMA_IRQHandler+0x430>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <HAL_DMA_IRQHandler+0x2ee>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a52      	ldr	r2, [pc, #328]	; (8005ab4 <HAL_DMA_IRQHandler+0x434>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d10a      	bne.n	8005984 <HAL_DMA_IRQHandler+0x304>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b00      	cmp	r3, #0
 800597a:	bf14      	ite	ne
 800597c:	2301      	movne	r3, #1
 800597e:	2300      	moveq	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	e003      	b.n	800598c <HAL_DMA_IRQHandler+0x30c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00d      	beq.n	80059ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	2201      	movs	r2, #1
 800599a:	409a      	lsls	r2, r3
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	f043 0202 	orr.w	r2, r3, #2
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	2204      	movs	r2, #4
 80059b6:	409a      	lsls	r2, r3
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 808f 	beq.w	8005ae0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <HAL_DMA_IRQHandler+0x3f8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d04a      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <HAL_DMA_IRQHandler+0x3fc>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d045      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a29      	ldr	r2, [pc, #164]	; (8005a80 <HAL_DMA_IRQHandler+0x400>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d040      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a27      	ldr	r2, [pc, #156]	; (8005a84 <HAL_DMA_IRQHandler+0x404>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d03b      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a26      	ldr	r2, [pc, #152]	; (8005a88 <HAL_DMA_IRQHandler+0x408>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d036      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a24      	ldr	r2, [pc, #144]	; (8005a8c <HAL_DMA_IRQHandler+0x40c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d031      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a23      	ldr	r2, [pc, #140]	; (8005a90 <HAL_DMA_IRQHandler+0x410>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d02c      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a21      	ldr	r2, [pc, #132]	; (8005a94 <HAL_DMA_IRQHandler+0x414>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d027      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a20      	ldr	r2, [pc, #128]	; (8005a98 <HAL_DMA_IRQHandler+0x418>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d022      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1e      	ldr	r2, [pc, #120]	; (8005a9c <HAL_DMA_IRQHandler+0x41c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01d      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1d      	ldr	r2, [pc, #116]	; (8005aa0 <HAL_DMA_IRQHandler+0x420>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d018      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1b      	ldr	r2, [pc, #108]	; (8005aa4 <HAL_DMA_IRQHandler+0x424>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d013      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1a      	ldr	r2, [pc, #104]	; (8005aa8 <HAL_DMA_IRQHandler+0x428>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00e      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a18      	ldr	r2, [pc, #96]	; (8005aac <HAL_DMA_IRQHandler+0x42c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d009      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a17      	ldr	r2, [pc, #92]	; (8005ab0 <HAL_DMA_IRQHandler+0x430>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d004      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x3e2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <HAL_DMA_IRQHandler+0x434>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d12a      	bne.n	8005ab8 <HAL_DMA_IRQHandler+0x438>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	e023      	b.n	8005ac0 <HAL_DMA_IRQHandler+0x440>
 8005a78:	40020010 	.word	0x40020010
 8005a7c:	40020028 	.word	0x40020028
 8005a80:	40020040 	.word	0x40020040
 8005a84:	40020058 	.word	0x40020058
 8005a88:	40020070 	.word	0x40020070
 8005a8c:	40020088 	.word	0x40020088
 8005a90:	400200a0 	.word	0x400200a0
 8005a94:	400200b8 	.word	0x400200b8
 8005a98:	40020410 	.word	0x40020410
 8005a9c:	40020428 	.word	0x40020428
 8005aa0:	40020440 	.word	0x40020440
 8005aa4:	40020458 	.word	0x40020458
 8005aa8:	40020470 	.word	0x40020470
 8005aac:	40020488 	.word	0x40020488
 8005ab0:	400204a0 	.word	0x400204a0
 8005ab4:	400204b8 	.word	0x400204b8
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00d      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	2204      	movs	r2, #4
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad8:	f043 0204 	orr.w	r2, r3, #4
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	2210      	movs	r2, #16
 8005aea:	409a      	lsls	r2, r3
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80a6 	beq.w	8005c42 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a85      	ldr	r2, [pc, #532]	; (8005d10 <HAL_DMA_IRQHandler+0x690>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d04a      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a83      	ldr	r2, [pc, #524]	; (8005d14 <HAL_DMA_IRQHandler+0x694>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d045      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a82      	ldr	r2, [pc, #520]	; (8005d18 <HAL_DMA_IRQHandler+0x698>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d040      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a80      	ldr	r2, [pc, #512]	; (8005d1c <HAL_DMA_IRQHandler+0x69c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d03b      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a7f      	ldr	r2, [pc, #508]	; (8005d20 <HAL_DMA_IRQHandler+0x6a0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d036      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a7d      	ldr	r2, [pc, #500]	; (8005d24 <HAL_DMA_IRQHandler+0x6a4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d031      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a7c      	ldr	r2, [pc, #496]	; (8005d28 <HAL_DMA_IRQHandler+0x6a8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d02c      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a7a      	ldr	r2, [pc, #488]	; (8005d2c <HAL_DMA_IRQHandler+0x6ac>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d027      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a79      	ldr	r2, [pc, #484]	; (8005d30 <HAL_DMA_IRQHandler+0x6b0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d022      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a77      	ldr	r2, [pc, #476]	; (8005d34 <HAL_DMA_IRQHandler+0x6b4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d01d      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a76      	ldr	r2, [pc, #472]	; (8005d38 <HAL_DMA_IRQHandler+0x6b8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d018      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a74      	ldr	r2, [pc, #464]	; (8005d3c <HAL_DMA_IRQHandler+0x6bc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a73      	ldr	r2, [pc, #460]	; (8005d40 <HAL_DMA_IRQHandler+0x6c0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00e      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a71      	ldr	r2, [pc, #452]	; (8005d44 <HAL_DMA_IRQHandler+0x6c4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d009      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a70      	ldr	r2, [pc, #448]	; (8005d48 <HAL_DMA_IRQHandler+0x6c8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x516>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a6e      	ldr	r2, [pc, #440]	; (8005d4c <HAL_DMA_IRQHandler+0x6cc>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d10a      	bne.n	8005bac <HAL_DMA_IRQHandler+0x52c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bf14      	ite	ne
 8005ba4:	2301      	movne	r3, #1
 8005ba6:	2300      	moveq	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	e009      	b.n	8005bc0 <HAL_DMA_IRQHandler+0x540>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bf14      	ite	ne
 8005bba:	2301      	movne	r3, #1
 8005bbc:	2300      	moveq	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d03e      	beq.n	8005c42 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	2210      	movs	r2, #16
 8005bce:	409a      	lsls	r2, r3
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d018      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d108      	bne.n	8005c02 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d024      	beq.n	8005c42 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
 8005c00:	e01f      	b.n	8005c42 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d01b      	beq.n	8005c42 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	4798      	blx	r3
 8005c12:	e016      	b.n	8005c42 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d107      	bne.n	8005c32 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0208 	bic.w	r2, r2, #8
 8005c30:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	409a      	lsls	r2, r3
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8110 	beq.w	8005e78 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a2c      	ldr	r2, [pc, #176]	; (8005d10 <HAL_DMA_IRQHandler+0x690>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d04a      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a2b      	ldr	r2, [pc, #172]	; (8005d14 <HAL_DMA_IRQHandler+0x694>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d045      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a29      	ldr	r2, [pc, #164]	; (8005d18 <HAL_DMA_IRQHandler+0x698>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d040      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a28      	ldr	r2, [pc, #160]	; (8005d1c <HAL_DMA_IRQHandler+0x69c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d03b      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a26      	ldr	r2, [pc, #152]	; (8005d20 <HAL_DMA_IRQHandler+0x6a0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d036      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a25      	ldr	r2, [pc, #148]	; (8005d24 <HAL_DMA_IRQHandler+0x6a4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d031      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a23      	ldr	r2, [pc, #140]	; (8005d28 <HAL_DMA_IRQHandler+0x6a8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d02c      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a22      	ldr	r2, [pc, #136]	; (8005d2c <HAL_DMA_IRQHandler+0x6ac>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d027      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a20      	ldr	r2, [pc, #128]	; (8005d30 <HAL_DMA_IRQHandler+0x6b0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d022      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1f      	ldr	r2, [pc, #124]	; (8005d34 <HAL_DMA_IRQHandler+0x6b4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d01d      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1d      	ldr	r2, [pc, #116]	; (8005d38 <HAL_DMA_IRQHandler+0x6b8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d018      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1c      	ldr	r2, [pc, #112]	; (8005d3c <HAL_DMA_IRQHandler+0x6bc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1a      	ldr	r2, [pc, #104]	; (8005d40 <HAL_DMA_IRQHandler+0x6c0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a19      	ldr	r2, [pc, #100]	; (8005d44 <HAL_DMA_IRQHandler+0x6c4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a17      	ldr	r2, [pc, #92]	; (8005d48 <HAL_DMA_IRQHandler+0x6c8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x678>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a16      	ldr	r2, [pc, #88]	; (8005d4c <HAL_DMA_IRQHandler+0x6cc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d12b      	bne.n	8005d50 <HAL_DMA_IRQHandler+0x6d0>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bf14      	ite	ne
 8005d06:	2301      	movne	r3, #1
 8005d08:	2300      	moveq	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	e02a      	b.n	8005d64 <HAL_DMA_IRQHandler+0x6e4>
 8005d0e:	bf00      	nop
 8005d10:	40020010 	.word	0x40020010
 8005d14:	40020028 	.word	0x40020028
 8005d18:	40020040 	.word	0x40020040
 8005d1c:	40020058 	.word	0x40020058
 8005d20:	40020070 	.word	0x40020070
 8005d24:	40020088 	.word	0x40020088
 8005d28:	400200a0 	.word	0x400200a0
 8005d2c:	400200b8 	.word	0x400200b8
 8005d30:	40020410 	.word	0x40020410
 8005d34:	40020428 	.word	0x40020428
 8005d38:	40020440 	.word	0x40020440
 8005d3c:	40020458 	.word	0x40020458
 8005d40:	40020470 	.word	0x40020470
 8005d44:	40020488 	.word	0x40020488
 8005d48:	400204a0 	.word	0x400204a0
 8005d4c:	400204b8 	.word	0x400204b8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	bf14      	ite	ne
 8005d5e:	2301      	movne	r3, #1
 8005d60:	2300      	moveq	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8087 	beq.w	8005e78 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6e:	f003 031f 	and.w	r3, r3, #31
 8005d72:	2220      	movs	r2, #32
 8005d74:	409a      	lsls	r2, r3
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d139      	bne.n	8005dfa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0216 	bic.w	r2, r2, #22
 8005d94:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695a      	ldr	r2, [r3, #20]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005da4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d103      	bne.n	8005db6 <HAL_DMA_IRQHandler+0x736>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0208 	bic.w	r2, r2, #8
 8005dc4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dca:	f003 031f 	and.w	r3, r3, #31
 8005dce:	223f      	movs	r2, #63	; 0x3f
 8005dd0:	409a      	lsls	r2, r3
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 834a 	beq.w	8006484 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4798      	blx	r3
          }
          return;
 8005df8:	e344      	b.n	8006484 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d018      	beq.n	8005e3a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d02c      	beq.n	8005e78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	4798      	blx	r3
 8005e26:	e027      	b.n	8005e78 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d023      	beq.n	8005e78 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4798      	blx	r3
 8005e38:	e01e      	b.n	8005e78 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10f      	bne.n	8005e68 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0210 	bic.w	r2, r2, #16
 8005e56:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8306 	beq.w	800648e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 8088 	beq.w	8005fa0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2204      	movs	r2, #4
 8005e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a7a      	ldr	r2, [pc, #488]	; (8006088 <HAL_DMA_IRQHandler+0xa08>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d04a      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a79      	ldr	r2, [pc, #484]	; (800608c <HAL_DMA_IRQHandler+0xa0c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d045      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a77      	ldr	r2, [pc, #476]	; (8006090 <HAL_DMA_IRQHandler+0xa10>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d040      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a76      	ldr	r2, [pc, #472]	; (8006094 <HAL_DMA_IRQHandler+0xa14>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d03b      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a74      	ldr	r2, [pc, #464]	; (8006098 <HAL_DMA_IRQHandler+0xa18>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d036      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a73      	ldr	r2, [pc, #460]	; (800609c <HAL_DMA_IRQHandler+0xa1c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d031      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a71      	ldr	r2, [pc, #452]	; (80060a0 <HAL_DMA_IRQHandler+0xa20>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d02c      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a70      	ldr	r2, [pc, #448]	; (80060a4 <HAL_DMA_IRQHandler+0xa24>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d027      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a6e      	ldr	r2, [pc, #440]	; (80060a8 <HAL_DMA_IRQHandler+0xa28>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d022      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a6d      	ldr	r2, [pc, #436]	; (80060ac <HAL_DMA_IRQHandler+0xa2c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d01d      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a6b      	ldr	r2, [pc, #428]	; (80060b0 <HAL_DMA_IRQHandler+0xa30>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d018      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a6a      	ldr	r2, [pc, #424]	; (80060b4 <HAL_DMA_IRQHandler+0xa34>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a68      	ldr	r2, [pc, #416]	; (80060b8 <HAL_DMA_IRQHandler+0xa38>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00e      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a67      	ldr	r2, [pc, #412]	; (80060bc <HAL_DMA_IRQHandler+0xa3c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d009      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a65      	ldr	r2, [pc, #404]	; (80060c0 <HAL_DMA_IRQHandler+0xa40>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x8b8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a64      	ldr	r2, [pc, #400]	; (80060c4 <HAL_DMA_IRQHandler+0xa44>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <HAL_DMA_IRQHandler+0x8ca>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e007      	b.n	8005f5a <HAL_DMA_IRQHandler+0x8da>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d307      	bcc.n	8005f76 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1f2      	bne.n	8005f5a <HAL_DMA_IRQHandler+0x8da>
 8005f74:	e000      	b.n	8005f78 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005f76:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d004      	beq.n	8005f90 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2203      	movs	r2, #3
 8005f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005f8e:	e003      	b.n	8005f98 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8272 	beq.w	800648e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
 8005fb2:	e26c      	b.n	800648e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a43      	ldr	r2, [pc, #268]	; (80060c8 <HAL_DMA_IRQHandler+0xa48>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d022      	beq.n	8006004 <HAL_DMA_IRQHandler+0x984>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a42      	ldr	r2, [pc, #264]	; (80060cc <HAL_DMA_IRQHandler+0xa4c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d01d      	beq.n	8006004 <HAL_DMA_IRQHandler+0x984>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a40      	ldr	r2, [pc, #256]	; (80060d0 <HAL_DMA_IRQHandler+0xa50>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d018      	beq.n	8006004 <HAL_DMA_IRQHandler+0x984>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a3f      	ldr	r2, [pc, #252]	; (80060d4 <HAL_DMA_IRQHandler+0xa54>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <HAL_DMA_IRQHandler+0x984>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a3d      	ldr	r2, [pc, #244]	; (80060d8 <HAL_DMA_IRQHandler+0xa58>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00e      	beq.n	8006004 <HAL_DMA_IRQHandler+0x984>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a3c      	ldr	r2, [pc, #240]	; (80060dc <HAL_DMA_IRQHandler+0xa5c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d009      	beq.n	8006004 <HAL_DMA_IRQHandler+0x984>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a3a      	ldr	r2, [pc, #232]	; (80060e0 <HAL_DMA_IRQHandler+0xa60>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d004      	beq.n	8006004 <HAL_DMA_IRQHandler+0x984>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a39      	ldr	r2, [pc, #228]	; (80060e4 <HAL_DMA_IRQHandler+0xa64>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d101      	bne.n	8006008 <HAL_DMA_IRQHandler+0x988>
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <HAL_DMA_IRQHandler+0x98a>
 8006008:	2300      	movs	r3, #0
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 823f 	beq.w	800648e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	2204      	movs	r2, #4
 8006022:	409a      	lsls	r2, r3
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	4013      	ands	r3, r2
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80cd 	beq.w	80061c8 <HAL_DMA_IRQHandler+0xb48>
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80c7 	beq.w	80061c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603e:	f003 031f 	and.w	r3, r3, #31
 8006042:	2204      	movs	r2, #4
 8006044:	409a      	lsls	r2, r3
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d049      	beq.n	80060e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 8210 	beq.w	8006488 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006070:	e20a      	b.n	8006488 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8206 	beq.w	8006488 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006084:	e200      	b.n	8006488 <HAL_DMA_IRQHandler+0xe08>
 8006086:	bf00      	nop
 8006088:	40020010 	.word	0x40020010
 800608c:	40020028 	.word	0x40020028
 8006090:	40020040 	.word	0x40020040
 8006094:	40020058 	.word	0x40020058
 8006098:	40020070 	.word	0x40020070
 800609c:	40020088 	.word	0x40020088
 80060a0:	400200a0 	.word	0x400200a0
 80060a4:	400200b8 	.word	0x400200b8
 80060a8:	40020410 	.word	0x40020410
 80060ac:	40020428 	.word	0x40020428
 80060b0:	40020440 	.word	0x40020440
 80060b4:	40020458 	.word	0x40020458
 80060b8:	40020470 	.word	0x40020470
 80060bc:	40020488 	.word	0x40020488
 80060c0:	400204a0 	.word	0x400204a0
 80060c4:	400204b8 	.word	0x400204b8
 80060c8:	58025408 	.word	0x58025408
 80060cc:	5802541c 	.word	0x5802541c
 80060d0:	58025430 	.word	0x58025430
 80060d4:	58025444 	.word	0x58025444
 80060d8:	58025458 	.word	0x58025458
 80060dc:	5802546c 	.word	0x5802546c
 80060e0:	58025480 	.word	0x58025480
 80060e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d160      	bne.n	80061b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a7f      	ldr	r2, [pc, #508]	; (80062f4 <HAL_DMA_IRQHandler+0xc74>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d04a      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a7d      	ldr	r2, [pc, #500]	; (80062f8 <HAL_DMA_IRQHandler+0xc78>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d045      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a7c      	ldr	r2, [pc, #496]	; (80062fc <HAL_DMA_IRQHandler+0xc7c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d040      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a7a      	ldr	r2, [pc, #488]	; (8006300 <HAL_DMA_IRQHandler+0xc80>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d03b      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a79      	ldr	r2, [pc, #484]	; (8006304 <HAL_DMA_IRQHandler+0xc84>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d036      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a77      	ldr	r2, [pc, #476]	; (8006308 <HAL_DMA_IRQHandler+0xc88>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d031      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a76      	ldr	r2, [pc, #472]	; (800630c <HAL_DMA_IRQHandler+0xc8c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d02c      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a74      	ldr	r2, [pc, #464]	; (8006310 <HAL_DMA_IRQHandler+0xc90>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d027      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a73      	ldr	r2, [pc, #460]	; (8006314 <HAL_DMA_IRQHandler+0xc94>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d022      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a71      	ldr	r2, [pc, #452]	; (8006318 <HAL_DMA_IRQHandler+0xc98>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d01d      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a70      	ldr	r2, [pc, #448]	; (800631c <HAL_DMA_IRQHandler+0xc9c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d018      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a6e      	ldr	r2, [pc, #440]	; (8006320 <HAL_DMA_IRQHandler+0xca0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d013      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a6d      	ldr	r2, [pc, #436]	; (8006324 <HAL_DMA_IRQHandler+0xca4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00e      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a6b      	ldr	r2, [pc, #428]	; (8006328 <HAL_DMA_IRQHandler+0xca8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d009      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a6a      	ldr	r2, [pc, #424]	; (800632c <HAL_DMA_IRQHandler+0xcac>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d004      	beq.n	8006192 <HAL_DMA_IRQHandler+0xb12>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a68      	ldr	r2, [pc, #416]	; (8006330 <HAL_DMA_IRQHandler+0xcb0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d108      	bne.n	80061a4 <HAL_DMA_IRQHandler+0xb24>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0208 	bic.w	r2, r2, #8
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	e007      	b.n	80061b4 <HAL_DMA_IRQHandler+0xb34>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0204 	bic.w	r2, r2, #4
 80061b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 8165 	beq.w	8006488 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061c6:	e15f      	b.n	8006488 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061cc:	f003 031f 	and.w	r3, r3, #31
 80061d0:	2202      	movs	r2, #2
 80061d2:	409a      	lsls	r2, r3
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 80c5 	beq.w	8006368 <HAL_DMA_IRQHandler+0xce8>
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 80bf 	beq.w	8006368 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	2202      	movs	r2, #2
 80061f4:	409a      	lsls	r2, r3
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d018      	beq.n	8006236 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d109      	bne.n	8006222 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 813a 	beq.w	800648c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006220:	e134      	b.n	800648c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 8130 	beq.w	800648c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006234:	e12a      	b.n	800648c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b00      	cmp	r3, #0
 800623e:	f040 8089 	bne.w	8006354 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a2b      	ldr	r2, [pc, #172]	; (80062f4 <HAL_DMA_IRQHandler+0xc74>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d04a      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a29      	ldr	r2, [pc, #164]	; (80062f8 <HAL_DMA_IRQHandler+0xc78>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d045      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a28      	ldr	r2, [pc, #160]	; (80062fc <HAL_DMA_IRQHandler+0xc7c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d040      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a26      	ldr	r2, [pc, #152]	; (8006300 <HAL_DMA_IRQHandler+0xc80>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d03b      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a25      	ldr	r2, [pc, #148]	; (8006304 <HAL_DMA_IRQHandler+0xc84>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d036      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a23      	ldr	r2, [pc, #140]	; (8006308 <HAL_DMA_IRQHandler+0xc88>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d031      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a22      	ldr	r2, [pc, #136]	; (800630c <HAL_DMA_IRQHandler+0xc8c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d02c      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a20      	ldr	r2, [pc, #128]	; (8006310 <HAL_DMA_IRQHandler+0xc90>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d027      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1f      	ldr	r2, [pc, #124]	; (8006314 <HAL_DMA_IRQHandler+0xc94>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d022      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <HAL_DMA_IRQHandler+0xc98>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01d      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1c      	ldr	r2, [pc, #112]	; (800631c <HAL_DMA_IRQHandler+0xc9c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1a      	ldr	r2, [pc, #104]	; (8006320 <HAL_DMA_IRQHandler+0xca0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a19      	ldr	r2, [pc, #100]	; (8006324 <HAL_DMA_IRQHandler+0xca4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a17      	ldr	r2, [pc, #92]	; (8006328 <HAL_DMA_IRQHandler+0xca8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a16      	ldr	r2, [pc, #88]	; (800632c <HAL_DMA_IRQHandler+0xcac>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xc62>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a14      	ldr	r2, [pc, #80]	; (8006330 <HAL_DMA_IRQHandler+0xcb0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d128      	bne.n	8006334 <HAL_DMA_IRQHandler+0xcb4>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0214 	bic.w	r2, r2, #20
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	e027      	b.n	8006344 <HAL_DMA_IRQHandler+0xcc4>
 80062f4:	40020010 	.word	0x40020010
 80062f8:	40020028 	.word	0x40020028
 80062fc:	40020040 	.word	0x40020040
 8006300:	40020058 	.word	0x40020058
 8006304:	40020070 	.word	0x40020070
 8006308:	40020088 	.word	0x40020088
 800630c:	400200a0 	.word	0x400200a0
 8006310:	400200b8 	.word	0x400200b8
 8006314:	40020410 	.word	0x40020410
 8006318:	40020428 	.word	0x40020428
 800631c:	40020440 	.word	0x40020440
 8006320:	40020458 	.word	0x40020458
 8006324:	40020470 	.word	0x40020470
 8006328:	40020488 	.word	0x40020488
 800632c:	400204a0 	.word	0x400204a0
 8006330:	400204b8 	.word	0x400204b8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 020a 	bic.w	r2, r2, #10
 8006342:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8097 	beq.w	800648c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006366:	e091      	b.n	800648c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2208      	movs	r2, #8
 8006372:	409a      	lsls	r2, r3
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8088 	beq.w	800648e <HAL_DMA_IRQHandler+0xe0e>
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8082 	beq.w	800648e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a41      	ldr	r2, [pc, #260]	; (8006494 <HAL_DMA_IRQHandler+0xe14>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d04a      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a3f      	ldr	r2, [pc, #252]	; (8006498 <HAL_DMA_IRQHandler+0xe18>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d045      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a3e      	ldr	r2, [pc, #248]	; (800649c <HAL_DMA_IRQHandler+0xe1c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d040      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a3c      	ldr	r2, [pc, #240]	; (80064a0 <HAL_DMA_IRQHandler+0xe20>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d03b      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a3b      	ldr	r2, [pc, #236]	; (80064a4 <HAL_DMA_IRQHandler+0xe24>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d036      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a39      	ldr	r2, [pc, #228]	; (80064a8 <HAL_DMA_IRQHandler+0xe28>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d031      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a38      	ldr	r2, [pc, #224]	; (80064ac <HAL_DMA_IRQHandler+0xe2c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d02c      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a36      	ldr	r2, [pc, #216]	; (80064b0 <HAL_DMA_IRQHandler+0xe30>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d027      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a35      	ldr	r2, [pc, #212]	; (80064b4 <HAL_DMA_IRQHandler+0xe34>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d022      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a33      	ldr	r2, [pc, #204]	; (80064b8 <HAL_DMA_IRQHandler+0xe38>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01d      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a32      	ldr	r2, [pc, #200]	; (80064bc <HAL_DMA_IRQHandler+0xe3c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d018      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a30      	ldr	r2, [pc, #192]	; (80064c0 <HAL_DMA_IRQHandler+0xe40>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2f      	ldr	r2, [pc, #188]	; (80064c4 <HAL_DMA_IRQHandler+0xe44>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2d      	ldr	r2, [pc, #180]	; (80064c8 <HAL_DMA_IRQHandler+0xe48>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a2c      	ldr	r2, [pc, #176]	; (80064cc <HAL_DMA_IRQHandler+0xe4c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_DMA_IRQHandler+0xdaa>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2a      	ldr	r2, [pc, #168]	; (80064d0 <HAL_DMA_IRQHandler+0xe50>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d108      	bne.n	800643c <HAL_DMA_IRQHandler+0xdbc>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 021c 	bic.w	r2, r2, #28
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e007      	b.n	800644c <HAL_DMA_IRQHandler+0xdcc>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 020e 	bic.w	r2, r2, #14
 800644a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2201      	movs	r2, #1
 8006456:	409a      	lsls	r2, r3
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	4798      	blx	r3
 8006482:	e004      	b.n	800648e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006484:	bf00      	nop
 8006486:	e002      	b.n	800648e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006488:	bf00      	nop
 800648a:	e000      	b.n	800648e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800648c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800648e:	3728      	adds	r7, #40	; 0x28
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40020010 	.word	0x40020010
 8006498:	40020028 	.word	0x40020028
 800649c:	40020040 	.word	0x40020040
 80064a0:	40020058 	.word	0x40020058
 80064a4:	40020070 	.word	0x40020070
 80064a8:	40020088 	.word	0x40020088
 80064ac:	400200a0 	.word	0x400200a0
 80064b0:	400200b8 	.word	0x400200b8
 80064b4:	40020410 	.word	0x40020410
 80064b8:	40020428 	.word	0x40020428
 80064bc:	40020440 	.word	0x40020440
 80064c0:	40020458 	.word	0x40020458
 80064c4:	40020470 	.word	0x40020470
 80064c8:	40020488 	.word	0x40020488
 80064cc:	400204a0 	.word	0x400204a0
 80064d0:	400204b8 	.word	0x400204b8

080064d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a42      	ldr	r2, [pc, #264]	; (80065ec <DMA_CalcBaseAndBitshift+0x118>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d04a      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a41      	ldr	r2, [pc, #260]	; (80065f0 <DMA_CalcBaseAndBitshift+0x11c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d045      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a3f      	ldr	r2, [pc, #252]	; (80065f4 <DMA_CalcBaseAndBitshift+0x120>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d040      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a3e      	ldr	r2, [pc, #248]	; (80065f8 <DMA_CalcBaseAndBitshift+0x124>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d03b      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a3c      	ldr	r2, [pc, #240]	; (80065fc <DMA_CalcBaseAndBitshift+0x128>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d036      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a3b      	ldr	r2, [pc, #236]	; (8006600 <DMA_CalcBaseAndBitshift+0x12c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d031      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a39      	ldr	r2, [pc, #228]	; (8006604 <DMA_CalcBaseAndBitshift+0x130>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d02c      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a38      	ldr	r2, [pc, #224]	; (8006608 <DMA_CalcBaseAndBitshift+0x134>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d027      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a36      	ldr	r2, [pc, #216]	; (800660c <DMA_CalcBaseAndBitshift+0x138>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d022      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a35      	ldr	r2, [pc, #212]	; (8006610 <DMA_CalcBaseAndBitshift+0x13c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d01d      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a33      	ldr	r2, [pc, #204]	; (8006614 <DMA_CalcBaseAndBitshift+0x140>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d018      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a32      	ldr	r2, [pc, #200]	; (8006618 <DMA_CalcBaseAndBitshift+0x144>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d013      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a30      	ldr	r2, [pc, #192]	; (800661c <DMA_CalcBaseAndBitshift+0x148>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00e      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a2f      	ldr	r2, [pc, #188]	; (8006620 <DMA_CalcBaseAndBitshift+0x14c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d009      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a2d      	ldr	r2, [pc, #180]	; (8006624 <DMA_CalcBaseAndBitshift+0x150>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d004      	beq.n	800657c <DMA_CalcBaseAndBitshift+0xa8>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a2c      	ldr	r2, [pc, #176]	; (8006628 <DMA_CalcBaseAndBitshift+0x154>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d101      	bne.n	8006580 <DMA_CalcBaseAndBitshift+0xac>
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <DMA_CalcBaseAndBitshift+0xae>
 8006580:	2300      	movs	r3, #0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d024      	beq.n	80065d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	3b10      	subs	r3, #16
 800658e:	4a27      	ldr	r2, [pc, #156]	; (800662c <DMA_CalcBaseAndBitshift+0x158>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	091b      	lsrs	r3, r3, #4
 8006596:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	4a24      	ldr	r2, [pc, #144]	; (8006630 <DMA_CalcBaseAndBitshift+0x15c>)
 80065a0:	5cd3      	ldrb	r3, [r2, r3]
 80065a2:	461a      	mov	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d908      	bls.n	80065c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	4b1f      	ldr	r3, [pc, #124]	; (8006634 <DMA_CalcBaseAndBitshift+0x160>)
 80065b6:	4013      	ands	r3, r2
 80065b8:	1d1a      	adds	r2, r3, #4
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	659a      	str	r2, [r3, #88]	; 0x58
 80065be:	e00d      	b.n	80065dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	4b1b      	ldr	r3, [pc, #108]	; (8006634 <DMA_CalcBaseAndBitshift+0x160>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6593      	str	r3, [r2, #88]	; 0x58
 80065ce:	e005      	b.n	80065dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	40020010 	.word	0x40020010
 80065f0:	40020028 	.word	0x40020028
 80065f4:	40020040 	.word	0x40020040
 80065f8:	40020058 	.word	0x40020058
 80065fc:	40020070 	.word	0x40020070
 8006600:	40020088 	.word	0x40020088
 8006604:	400200a0 	.word	0x400200a0
 8006608:	400200b8 	.word	0x400200b8
 800660c:	40020410 	.word	0x40020410
 8006610:	40020428 	.word	0x40020428
 8006614:	40020440 	.word	0x40020440
 8006618:	40020458 	.word	0x40020458
 800661c:	40020470 	.word	0x40020470
 8006620:	40020488 	.word	0x40020488
 8006624:	400204a0 	.word	0x400204a0
 8006628:	400204b8 	.word	0x400204b8
 800662c:	aaaaaaab 	.word	0xaaaaaaab
 8006630:	0801c9a0 	.word	0x0801c9a0
 8006634:	fffffc00 	.word	0xfffffc00

08006638 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d120      	bne.n	800668e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006650:	2b03      	cmp	r3, #3
 8006652:	d858      	bhi.n	8006706 <DMA_CheckFifoParam+0xce>
 8006654:	a201      	add	r2, pc, #4	; (adr r2, 800665c <DMA_CheckFifoParam+0x24>)
 8006656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665a:	bf00      	nop
 800665c:	0800666d 	.word	0x0800666d
 8006660:	0800667f 	.word	0x0800667f
 8006664:	0800666d 	.word	0x0800666d
 8006668:	08006707 	.word	0x08006707
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d048      	beq.n	800670a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800667c:	e045      	b.n	800670a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006686:	d142      	bne.n	800670e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800668c:	e03f      	b.n	800670e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006696:	d123      	bne.n	80066e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669c:	2b03      	cmp	r3, #3
 800669e:	d838      	bhi.n	8006712 <DMA_CheckFifoParam+0xda>
 80066a0:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <DMA_CheckFifoParam+0x70>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066bf 	.word	0x080066bf
 80066b0:	080066b9 	.word	0x080066b9
 80066b4:	080066d1 	.word	0x080066d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]
        break;
 80066bc:	e030      	b.n	8006720 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d025      	beq.n	8006716 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066ce:	e022      	b.n	8006716 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066d8:	d11f      	bne.n	800671a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066de:	e01c      	b.n	800671a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d902      	bls.n	80066ee <DMA_CheckFifoParam+0xb6>
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d003      	beq.n	80066f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80066ec:	e018      	b.n	8006720 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
        break;
 80066f2:	e015      	b.n	8006720 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00e      	beq.n	800671e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
    break;
 8006704:	e00b      	b.n	800671e <DMA_CheckFifoParam+0xe6>
        break;
 8006706:	bf00      	nop
 8006708:	e00a      	b.n	8006720 <DMA_CheckFifoParam+0xe8>
        break;
 800670a:	bf00      	nop
 800670c:	e008      	b.n	8006720 <DMA_CheckFifoParam+0xe8>
        break;
 800670e:	bf00      	nop
 8006710:	e006      	b.n	8006720 <DMA_CheckFifoParam+0xe8>
        break;
 8006712:	bf00      	nop
 8006714:	e004      	b.n	8006720 <DMA_CheckFifoParam+0xe8>
        break;
 8006716:	bf00      	nop
 8006718:	e002      	b.n	8006720 <DMA_CheckFifoParam+0xe8>
        break;
 800671a:	bf00      	nop
 800671c:	e000      	b.n	8006720 <DMA_CheckFifoParam+0xe8>
    break;
 800671e:	bf00      	nop
    }
  }

  return status;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop

08006730 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a38      	ldr	r2, [pc, #224]	; (8006824 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d022      	beq.n	800678e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a36      	ldr	r2, [pc, #216]	; (8006828 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01d      	beq.n	800678e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a35      	ldr	r2, [pc, #212]	; (800682c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d018      	beq.n	800678e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a33      	ldr	r2, [pc, #204]	; (8006830 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d013      	beq.n	800678e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a32      	ldr	r2, [pc, #200]	; (8006834 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00e      	beq.n	800678e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a30      	ldr	r2, [pc, #192]	; (8006838 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d009      	beq.n	800678e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a2f      	ldr	r2, [pc, #188]	; (800683c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d004      	beq.n	800678e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a2d      	ldr	r2, [pc, #180]	; (8006840 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d101      	bne.n	8006792 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01a      	beq.n	80067ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	3b08      	subs	r3, #8
 80067a0:	4a28      	ldr	r2, [pc, #160]	; (8006844 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	091b      	lsrs	r3, r3, #4
 80067a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4b26      	ldr	r3, [pc, #152]	; (8006848 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	461a      	mov	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a24      	ldr	r2, [pc, #144]	; (800684c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80067bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	2201      	movs	r2, #1
 80067c6:	409a      	lsls	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80067cc:	e024      	b.n	8006818 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	3b10      	subs	r3, #16
 80067d6:	4a1e      	ldr	r2, [pc, #120]	; (8006850 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80067d8:	fba2 2303 	umull	r2, r3, r2, r3
 80067dc:	091b      	lsrs	r3, r3, #4
 80067de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4a1c      	ldr	r2, [pc, #112]	; (8006854 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d806      	bhi.n	80067f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4a1b      	ldr	r2, [pc, #108]	; (8006858 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d902      	bls.n	80067f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3308      	adds	r3, #8
 80067f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4b18      	ldr	r3, [pc, #96]	; (800685c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	461a      	mov	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a16      	ldr	r2, [pc, #88]	; (8006860 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006808:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f003 031f 	and.w	r3, r3, #31
 8006810:	2201      	movs	r2, #1
 8006812:	409a      	lsls	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006818:	bf00      	nop
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	58025408 	.word	0x58025408
 8006828:	5802541c 	.word	0x5802541c
 800682c:	58025430 	.word	0x58025430
 8006830:	58025444 	.word	0x58025444
 8006834:	58025458 	.word	0x58025458
 8006838:	5802546c 	.word	0x5802546c
 800683c:	58025480 	.word	0x58025480
 8006840:	58025494 	.word	0x58025494
 8006844:	cccccccd 	.word	0xcccccccd
 8006848:	16009600 	.word	0x16009600
 800684c:	58025880 	.word	0x58025880
 8006850:	aaaaaaab 	.word	0xaaaaaaab
 8006854:	400204b8 	.word	0x400204b8
 8006858:	4002040f 	.word	0x4002040f
 800685c:	10008200 	.word	0x10008200
 8006860:	40020880 	.word	0x40020880

08006864 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d04a      	beq.n	8006910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b08      	cmp	r3, #8
 800687e:	d847      	bhi.n	8006910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a25      	ldr	r2, [pc, #148]	; (800691c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d022      	beq.n	80068d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a24      	ldr	r2, [pc, #144]	; (8006920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d01d      	beq.n	80068d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a22      	ldr	r2, [pc, #136]	; (8006924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d018      	beq.n	80068d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a21      	ldr	r2, [pc, #132]	; (8006928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d013      	beq.n	80068d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1f      	ldr	r2, [pc, #124]	; (800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00e      	beq.n	80068d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1e      	ldr	r2, [pc, #120]	; (8006930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d009      	beq.n	80068d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1c      	ldr	r2, [pc, #112]	; (8006934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d004      	beq.n	80068d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1b      	ldr	r2, [pc, #108]	; (8006938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d101      	bne.n	80068d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80068d4:	2300      	movs	r3, #0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4b17      	ldr	r3, [pc, #92]	; (800693c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a15      	ldr	r2, [pc, #84]	; (8006940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80068ec:	671a      	str	r2, [r3, #112]	; 0x70
 80068ee:	e009      	b.n	8006904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4b14      	ldr	r3, [pc, #80]	; (8006944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	461a      	mov	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a11      	ldr	r2, [pc, #68]	; (8006948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006902:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3b01      	subs	r3, #1
 8006908:	2201      	movs	r2, #1
 800690a:	409a      	lsls	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006910:	bf00      	nop
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	58025408 	.word	0x58025408
 8006920:	5802541c 	.word	0x5802541c
 8006924:	58025430 	.word	0x58025430
 8006928:	58025444 	.word	0x58025444
 800692c:	58025458 	.word	0x58025458
 8006930:	5802546c 	.word	0x5802546c
 8006934:	58025480 	.word	0x58025480
 8006938:	58025494 	.word	0x58025494
 800693c:	1600963f 	.word	0x1600963f
 8006940:	58025940 	.word	0x58025940
 8006944:	1000823f 	.word	0x1000823f
 8006948:	40020940 	.word	0x40020940

0800694c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b098      	sub	sp, #96	; 0x60
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006954:	4a84      	ldr	r2, [pc, #528]	; (8006b68 <HAL_FDCAN_Init+0x21c>)
 8006956:	f107 030c 	add.w	r3, r7, #12
 800695a:	4611      	mov	r1, r2
 800695c:	224c      	movs	r2, #76	; 0x4c
 800695e:	4618      	mov	r0, r3
 8006960:	f011 fc1a 	bl	8018198 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e1c6      	b.n	8006cfc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a7e      	ldr	r2, [pc, #504]	; (8006b6c <HAL_FDCAN_Init+0x220>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d106      	bne.n	8006986 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006980:	461a      	mov	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fb f9c4 	bl	8001d28 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0210 	bic.w	r2, r2, #16
 80069ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069b0:	f7fc f9fa 	bl	8002da8 <HAL_GetTick>
 80069b4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80069b6:	e014      	b.n	80069e2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80069b8:	f7fc f9f6 	bl	8002da8 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b0a      	cmp	r3, #10
 80069c4:	d90d      	bls.n	80069e2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069cc:	f043 0201 	orr.w	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2203      	movs	r2, #3
 80069da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e18c      	b.n	8006cfc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d0e3      	beq.n	80069b8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699a      	ldr	r2, [r3, #24]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a00:	f7fc f9d2 	bl	8002da8 <HAL_GetTick>
 8006a04:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006a06:	e014      	b.n	8006a32 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a08:	f7fc f9ce 	bl	8002da8 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b0a      	cmp	r3, #10
 8006a14:	d90d      	bls.n	8006a32 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a1c:	f043 0201 	orr.w	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2203      	movs	r2, #3
 8006a2a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e164      	b.n	8006cfc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0e3      	beq.n	8006a08 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0202 	orr.w	r2, r2, #2
 8006a4e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	7c1b      	ldrb	r3, [r3, #16]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d108      	bne.n	8006a6a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a66:	619a      	str	r2, [r3, #24]
 8006a68:	e007      	b.n	8006a7a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a78:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	7c5b      	ldrb	r3, [r3, #17]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d108      	bne.n	8006a94 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699a      	ldr	r2, [r3, #24]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a90:	619a      	str	r2, [r3, #24]
 8006a92:	e007      	b.n	8006aa4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006aa2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	7c9b      	ldrb	r3, [r3, #18]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d108      	bne.n	8006abe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aba:	619a      	str	r2, [r3, #24]
 8006abc:	e007      	b.n	8006ace <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699a      	ldr	r2, [r3, #24]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006acc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006af2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0210 	bic.w	r2, r2, #16
 8006b02:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d108      	bne.n	8006b1e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0204 	orr.w	r2, r2, #4
 8006b1a:	619a      	str	r2, [r3, #24]
 8006b1c:	e030      	b.n	8006b80 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d02c      	beq.n	8006b80 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d020      	beq.n	8006b70 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699a      	ldr	r2, [r3, #24]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b3c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f042 0210 	orr.w	r2, r2, #16
 8006b4c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d114      	bne.n	8006b80 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	699a      	ldr	r2, [r3, #24]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0220 	orr.w	r2, r2, #32
 8006b64:	619a      	str	r2, [r3, #24]
 8006b66:	e00b      	b.n	8006b80 <HAL_FDCAN_Init+0x234>
 8006b68:	0801c8c0 	.word	0x0801c8c0
 8006b6c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0220 	orr.w	r2, r2, #32
 8006b7e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006b90:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006b98:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006ba8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006baa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb4:	d115      	bne.n	8006be2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006bc4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006bce:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006bde:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006be0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c08:	4413      	add	r3, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d011      	beq.n	8006c32 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006c16:	f023 0107 	bic.w	r1, r3, #7
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	3360      	adds	r3, #96	; 0x60
 8006c22:	443b      	add	r3, r7
 8006c24:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d011      	beq.n	8006c5e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c42:	f023 0107 	bic.w	r1, r3, #7
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	3360      	adds	r3, #96	; 0x60
 8006c4e:	443b      	add	r3, r7
 8006c50:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d012      	beq.n	8006c8c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c6e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	3360      	adds	r3, #96	; 0x60
 8006c7a:	443b      	add	r3, r7
 8006c7c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006c80:	011a      	lsls	r2, r3, #4
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d012      	beq.n	8006cba <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c9c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	3360      	adds	r3, #96	; 0x60
 8006ca8:	443b      	add	r3, r7
 8006caa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006cae:	021a      	lsls	r2, r3, #8
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a11      	ldr	r2, [pc, #68]	; (8006d04 <HAL_FDCAN_Init+0x3b8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d107      	bne.n	8006cd4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f022 0203 	bic.w	r2, r2, #3
 8006cd2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f80b 	bl	8006d08 <FDCAN_CalcultateRamBlockAddresses>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006cf8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3760      	adds	r7, #96	; 0x60
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	4000a000 	.word	0x4000a000

08006d08 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d14:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006d1e:	4ba7      	ldr	r3, [pc, #668]	; (8006fbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	0091      	lsls	r1, r2, #2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6812      	ldr	r2, [r2, #0]
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d38:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	041a      	lsls	r2, r3, #16
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	4413      	add	r3, r2
 8006d54:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d5e:	4b97      	ldr	r3, [pc, #604]	; (8006fbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	0091      	lsls	r1, r2, #2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d78:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d80:	041a      	lsls	r2, r3, #16
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	4413      	add	r3, r2
 8006d96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006da0:	4b86      	ldr	r3, [pc, #536]	; (8006fbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	0091      	lsls	r1, r2, #2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	430b      	orrs	r3, r1
 8006dae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	041a      	lsls	r2, r3, #16
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	4413      	add	r3, r2
 8006dde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006de8:	4b74      	ldr	r3, [pc, #464]	; (8006fbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	0091      	lsls	r1, r2, #2
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	430b      	orrs	r3, r1
 8006df6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e02:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0a:	041a      	lsls	r2, r3, #16
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	4413      	add	r3, r2
 8006e26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006e30:	4b62      	ldr	r3, [pc, #392]	; (8006fbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e32:	4013      	ands	r3, r2
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	0091      	lsls	r1, r2, #2
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6812      	ldr	r2, [r2, #0]
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	4413      	add	r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006e5c:	4b57      	ldr	r3, [pc, #348]	; (8006fbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	0091      	lsls	r1, r2, #2
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e76:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7e:	041a      	lsls	r2, r3, #16
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	4413      	add	r3, r2
 8006e94:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006e9e:	4b47      	ldr	r3, [pc, #284]	; (8006fbc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	0091      	lsls	r1, r2, #2
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6812      	ldr	r2, [r2, #0]
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006eb8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec0:	041a      	lsls	r2, r3, #16
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ed4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006edc:	061a      	lsls	r2, r3, #24
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eec:	4b34      	ldr	r3, [pc, #208]	; (8006fc0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006eee:	4413      	add	r3, r2
 8006ef0:	009a      	lsls	r2, r3, #2
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	441a      	add	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	441a      	add	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006f22:	fb01 f303 	mul.w	r3, r1, r3
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	441a      	add	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006f3a:	fb01 f303 	mul.w	r3, r1, r3
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	441a      	add	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006f52:	fb01 f303 	mul.w	r3, r1, r3
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	441a      	add	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	441a      	add	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7e:	6879      	ldr	r1, [r7, #4]
 8006f80:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006f82:	fb01 f303 	mul.w	r3, r1, r3
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	441a      	add	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006f9e:	fb01 f303 	mul.w	r3, r1, r3
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	441a      	add	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb2:	4a04      	ldr	r2, [pc, #16]	; (8006fc4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d915      	bls.n	8006fe4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006fb8:	e006      	b.n	8006fc8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006fba:	bf00      	nop
 8006fbc:	ffff0003 	.word	0xffff0003
 8006fc0:	10002b00 	.word	0x10002b00
 8006fc4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fce:	f043 0220 	orr.w	r2, r3, #32
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2203      	movs	r2, #3
 8006fdc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e010      	b.n	8007006 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	e005      	b.n	8006ff8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	429a      	cmp	r2, r3
 8007002:	d3f3      	bcc.n	8006fec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop

08007014 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007014:	b480      	push	{r7}
 8007016:	b089      	sub	sp, #36	; 0x24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800701e:	2300      	movs	r3, #0
 8007020:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007022:	4b86      	ldr	r3, [pc, #536]	; (800723c <HAL_GPIO_Init+0x228>)
 8007024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007026:	e18c      	b.n	8007342 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	2101      	movs	r1, #1
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	fa01 f303 	lsl.w	r3, r1, r3
 8007034:	4013      	ands	r3, r2
 8007036:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 817e 	beq.w	800733c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	2b01      	cmp	r3, #1
 800704a:	d005      	beq.n	8007058 <HAL_GPIO_Init+0x44>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d130      	bne.n	80070ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	2203      	movs	r2, #3
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	43db      	mvns	r3, r3
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	4013      	ands	r3, r2
 800706e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	fa02 f303 	lsl.w	r3, r2, r3
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	4313      	orrs	r3, r2
 8007080:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800708e:	2201      	movs	r2, #1
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	43db      	mvns	r3, r3
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	4013      	ands	r3, r2
 800709c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	091b      	lsrs	r3, r3, #4
 80070a4:	f003 0201 	and.w	r2, r3, #1
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	fa02 f303 	lsl.w	r3, r2, r3
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d017      	beq.n	80070f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	2203      	movs	r2, #3
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	43db      	mvns	r3, r3
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	4013      	ands	r3, r2
 80070dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f003 0303 	and.w	r3, r3, #3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d123      	bne.n	800714a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	08da      	lsrs	r2, r3, #3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3208      	adds	r2, #8
 800710a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	220f      	movs	r2, #15
 800711a:	fa02 f303 	lsl.w	r3, r2, r3
 800711e:	43db      	mvns	r3, r3
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	4013      	ands	r3, r2
 8007124:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	fa02 f303 	lsl.w	r3, r2, r3
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	4313      	orrs	r3, r2
 800713a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	08da      	lsrs	r2, r3, #3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3208      	adds	r2, #8
 8007144:	69b9      	ldr	r1, [r7, #24]
 8007146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	2203      	movs	r2, #3
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	43db      	mvns	r3, r3
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	4013      	ands	r3, r2
 8007160:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f003 0203 	and.w	r2, r3, #3
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	fa02 f303 	lsl.w	r3, r2, r3
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	4313      	orrs	r3, r2
 8007176:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 80d8 	beq.w	800733c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800718c:	4b2c      	ldr	r3, [pc, #176]	; (8007240 <HAL_GPIO_Init+0x22c>)
 800718e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007192:	4a2b      	ldr	r2, [pc, #172]	; (8007240 <HAL_GPIO_Init+0x22c>)
 8007194:	f043 0302 	orr.w	r3, r3, #2
 8007198:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800719c:	4b28      	ldr	r3, [pc, #160]	; (8007240 <HAL_GPIO_Init+0x22c>)
 800719e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071aa:	4a26      	ldr	r2, [pc, #152]	; (8007244 <HAL_GPIO_Init+0x230>)
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	089b      	lsrs	r3, r3, #2
 80071b0:	3302      	adds	r3, #2
 80071b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	220f      	movs	r2, #15
 80071c2:	fa02 f303 	lsl.w	r3, r2, r3
 80071c6:	43db      	mvns	r3, r3
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	4013      	ands	r3, r2
 80071cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a1d      	ldr	r2, [pc, #116]	; (8007248 <HAL_GPIO_Init+0x234>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d04a      	beq.n	800726c <HAL_GPIO_Init+0x258>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a1c      	ldr	r2, [pc, #112]	; (800724c <HAL_GPIO_Init+0x238>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d02b      	beq.n	8007236 <HAL_GPIO_Init+0x222>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a1b      	ldr	r2, [pc, #108]	; (8007250 <HAL_GPIO_Init+0x23c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d025      	beq.n	8007232 <HAL_GPIO_Init+0x21e>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a1a      	ldr	r2, [pc, #104]	; (8007254 <HAL_GPIO_Init+0x240>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d01f      	beq.n	800722e <HAL_GPIO_Init+0x21a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a19      	ldr	r2, [pc, #100]	; (8007258 <HAL_GPIO_Init+0x244>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d019      	beq.n	800722a <HAL_GPIO_Init+0x216>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a18      	ldr	r2, [pc, #96]	; (800725c <HAL_GPIO_Init+0x248>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d013      	beq.n	8007226 <HAL_GPIO_Init+0x212>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a17      	ldr	r2, [pc, #92]	; (8007260 <HAL_GPIO_Init+0x24c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00d      	beq.n	8007222 <HAL_GPIO_Init+0x20e>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a16      	ldr	r2, [pc, #88]	; (8007264 <HAL_GPIO_Init+0x250>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d007      	beq.n	800721e <HAL_GPIO_Init+0x20a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a15      	ldr	r2, [pc, #84]	; (8007268 <HAL_GPIO_Init+0x254>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d101      	bne.n	800721a <HAL_GPIO_Init+0x206>
 8007216:	2309      	movs	r3, #9
 8007218:	e029      	b.n	800726e <HAL_GPIO_Init+0x25a>
 800721a:	230a      	movs	r3, #10
 800721c:	e027      	b.n	800726e <HAL_GPIO_Init+0x25a>
 800721e:	2307      	movs	r3, #7
 8007220:	e025      	b.n	800726e <HAL_GPIO_Init+0x25a>
 8007222:	2306      	movs	r3, #6
 8007224:	e023      	b.n	800726e <HAL_GPIO_Init+0x25a>
 8007226:	2305      	movs	r3, #5
 8007228:	e021      	b.n	800726e <HAL_GPIO_Init+0x25a>
 800722a:	2304      	movs	r3, #4
 800722c:	e01f      	b.n	800726e <HAL_GPIO_Init+0x25a>
 800722e:	2303      	movs	r3, #3
 8007230:	e01d      	b.n	800726e <HAL_GPIO_Init+0x25a>
 8007232:	2302      	movs	r3, #2
 8007234:	e01b      	b.n	800726e <HAL_GPIO_Init+0x25a>
 8007236:	2301      	movs	r3, #1
 8007238:	e019      	b.n	800726e <HAL_GPIO_Init+0x25a>
 800723a:	bf00      	nop
 800723c:	58000080 	.word	0x58000080
 8007240:	58024400 	.word	0x58024400
 8007244:	58000400 	.word	0x58000400
 8007248:	58020000 	.word	0x58020000
 800724c:	58020400 	.word	0x58020400
 8007250:	58020800 	.word	0x58020800
 8007254:	58020c00 	.word	0x58020c00
 8007258:	58021000 	.word	0x58021000
 800725c:	58021400 	.word	0x58021400
 8007260:	58021800 	.word	0x58021800
 8007264:	58021c00 	.word	0x58021c00
 8007268:	58022400 	.word	0x58022400
 800726c:	2300      	movs	r3, #0
 800726e:	69fa      	ldr	r2, [r7, #28]
 8007270:	f002 0203 	and.w	r2, r2, #3
 8007274:	0092      	lsls	r2, r2, #2
 8007276:	4093      	lsls	r3, r2
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	4313      	orrs	r3, r2
 800727c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800727e:	4938      	ldr	r1, [pc, #224]	; (8007360 <HAL_GPIO_Init+0x34c>)
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	089b      	lsrs	r3, r3, #2
 8007284:	3302      	adds	r3, #2
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800728c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	43db      	mvns	r3, r3
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	4013      	ands	r3, r2
 800729c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80072b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80072ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	43db      	mvns	r3, r3
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	4013      	ands	r3, r2
 80072ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80072e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	43db      	mvns	r3, r3
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	4013      	ands	r3, r2
 80072f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	4313      	orrs	r3, r2
 800730a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	43db      	mvns	r3, r3
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	4013      	ands	r3, r2
 8007320:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	4313      	orrs	r3, r2
 8007334:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	3301      	adds	r3, #1
 8007340:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	fa22 f303 	lsr.w	r3, r2, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	f47f ae6b 	bne.w	8007028 <HAL_GPIO_Init+0x14>
  }
}
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	3724      	adds	r7, #36	; 0x24
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	58000400 	.word	0x58000400

08007364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	807b      	strh	r3, [r7, #2]
 8007370:	4613      	mov	r3, r2
 8007372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007374:	787b      	ldrb	r3, [r7, #1]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800737a:	887a      	ldrh	r2, [r7, #2]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007380:	e003      	b.n	800738a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007382:	887b      	ldrh	r3, [r7, #2]
 8007384:	041a      	lsls	r2, r3, #16
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	619a      	str	r2, [r3, #24]
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
	...

08007398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e07f      	b.n	80074aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fa fd1a 	bl	8001df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2224      	movs	r2, #36	; 0x24
 80073c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 0201 	bic.w	r2, r2, #1
 80073da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d107      	bne.n	8007412 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800740e:	609a      	str	r2, [r3, #8]
 8007410:	e006      	b.n	8007420 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689a      	ldr	r2, [r3, #8]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800741e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b02      	cmp	r3, #2
 8007426:	d104      	bne.n	8007432 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6859      	ldr	r1, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	4b1d      	ldr	r3, [pc, #116]	; (80074b4 <HAL_I2C_Init+0x11c>)
 800743e:	430b      	orrs	r3, r1
 8007440:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007450:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691a      	ldr	r2, [r3, #16]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69d9      	ldr	r1, [r3, #28]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1a      	ldr	r2, [r3, #32]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0201 	orr.w	r2, r2, #1
 800748a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	02008000 	.word	0x02008000

080074b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	68f9      	ldr	r1, [r7, #12]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
  }
}
 80074e4:	bf00      	nop
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d138      	bne.n	8007574 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800750c:	2302      	movs	r3, #2
 800750e:	e032      	b.n	8007576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2224      	movs	r2, #36	; 0x24
 800751c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0201 	bic.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800753e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6819      	ldr	r1, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0201 	orr.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	e000      	b.n	8007576 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007574:	2302      	movs	r3, #2
  }
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b20      	cmp	r3, #32
 8007596:	d139      	bne.n	800760c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e033      	b.n	800760e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2224      	movs	r2, #36	; 0x24
 80075b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0201 	bic.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80075d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	e000      	b.n	800760e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800760c:	2302      	movs	r3, #2
  }
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800761a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800761c:	b08f      	sub	sp, #60	; 0x3c
 800761e:	af0a      	add	r7, sp, #40	; 0x28
 8007620:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e116      	b.n	800785a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f010 fa70 	bl	8017b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2203      	movs	r2, #3
 8007650:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765c:	2b00      	cmp	r3, #0
 800765e:	d102      	bne.n	8007666 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4618      	mov	r0, r3
 800766c:	f009 fc3f 	bl	8010eee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	603b      	str	r3, [r7, #0]
 8007676:	687e      	ldr	r6, [r7, #4]
 8007678:	466d      	mov	r5, sp
 800767a:	f106 0410 	add.w	r4, r6, #16
 800767e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007686:	e894 0003 	ldmia.w	r4, {r0, r1}
 800768a:	e885 0003 	stmia.w	r5, {r0, r1}
 800768e:	1d33      	adds	r3, r6, #4
 8007690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007692:	6838      	ldr	r0, [r7, #0]
 8007694:	f009 fb0a 	bl	8010cac <USB_CoreInit>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e0d7      	b.n	800785a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2100      	movs	r1, #0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f009 fc2d 	bl	8010f10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
 80076ba:	e04a      	b.n	8007752 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80076bc:	7bfa      	ldrb	r2, [r7, #15]
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	4613      	mov	r3, r2
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	333d      	adds	r3, #61	; 0x3d
 80076cc:	2201      	movs	r2, #1
 80076ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80076d0:	7bfa      	ldrb	r2, [r7, #15]
 80076d2:	6879      	ldr	r1, [r7, #4]
 80076d4:	4613      	mov	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	333c      	adds	r3, #60	; 0x3c
 80076e0:	7bfa      	ldrb	r2, [r7, #15]
 80076e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80076e4:	7bfa      	ldrb	r2, [r7, #15]
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	b298      	uxth	r0, r3
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	4613      	mov	r3, r2
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	3356      	adds	r3, #86	; 0x56
 80076f8:	4602      	mov	r2, r0
 80076fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80076fc:	7bfa      	ldrb	r2, [r7, #15]
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	4613      	mov	r3, r2
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	3340      	adds	r3, #64	; 0x40
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007710:	7bfa      	ldrb	r2, [r7, #15]
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	4613      	mov	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	440b      	add	r3, r1
 800771e:	3344      	adds	r3, #68	; 0x44
 8007720:	2200      	movs	r2, #0
 8007722:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007724:	7bfa      	ldrb	r2, [r7, #15]
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	4613      	mov	r3, r2
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	440b      	add	r3, r1
 8007732:	3348      	adds	r3, #72	; 0x48
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007738:	7bfa      	ldrb	r2, [r7, #15]
 800773a:	6879      	ldr	r1, [r7, #4]
 800773c:	4613      	mov	r3, r2
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	440b      	add	r3, r1
 8007746:	334c      	adds	r3, #76	; 0x4c
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	3301      	adds	r3, #1
 8007750:	73fb      	strb	r3, [r7, #15]
 8007752:	7bfa      	ldrb	r2, [r7, #15]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	429a      	cmp	r2, r3
 800775a:	d3af      	bcc.n	80076bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
 8007760:	e044      	b.n	80077ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007762:	7bfa      	ldrb	r2, [r7, #15]
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	4613      	mov	r3, r2
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	440b      	add	r3, r1
 8007770:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007774:	2200      	movs	r2, #0
 8007776:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007778:	7bfa      	ldrb	r2, [r7, #15]
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800778a:	7bfa      	ldrb	r2, [r7, #15]
 800778c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800778e:	7bfa      	ldrb	r2, [r7, #15]
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	4613      	mov	r3, r2
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	440b      	add	r3, r1
 800779c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80077a4:	7bfa      	ldrb	r2, [r7, #15]
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	4613      	mov	r3, r2
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	440b      	add	r3, r1
 80077b2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80077ba:	7bfa      	ldrb	r2, [r7, #15]
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80077d0:	7bfa      	ldrb	r2, [r7, #15]
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	4613      	mov	r3, r2
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	440b      	add	r3, r1
 80077de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	3301      	adds	r3, #1
 80077ea:	73fb      	strb	r3, [r7, #15]
 80077ec:	7bfa      	ldrb	r2, [r7, #15]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d3b5      	bcc.n	8007762 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	687e      	ldr	r6, [r7, #4]
 80077fe:	466d      	mov	r5, sp
 8007800:	f106 0410 	add.w	r4, r6, #16
 8007804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800780a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800780c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007810:	e885 0003 	stmia.w	r5, {r0, r1}
 8007814:	1d33      	adds	r3, r6, #4
 8007816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007818:	6838      	ldr	r0, [r7, #0]
 800781a:	f009 fbc5 	bl	8010fa8 <USB_DevInit>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e014      	b.n	800785a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	2b01      	cmp	r3, #1
 8007846:	d102      	bne.n	800784e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 f96f 	bl	8008b2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f00a fc07 	bl	8012066 <USB_DevDisconnect>

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007862 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_PCD_Start+0x1c>
 800787a:	2302      	movs	r3, #2
 800787c:	e022      	b.n	80078c4 <HAL_PCD_Start+0x62>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007896:	2b01      	cmp	r3, #1
 8007898:	d105      	bne.n	80078a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f009 fb0e 	bl	8010ecc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f00a fbb5 	bl	8012024 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80078cc:	b590      	push	{r4, r7, lr}
 80078ce:	b08d      	sub	sp, #52	; 0x34
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f00a fc73 	bl	80121ce <USB_GetMode>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f040 84b7 	bne.w	800825e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f00a fbd7 	bl	80120a8 <USB_ReadInterrupts>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 84ad 	beq.w	800825c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	0a1b      	lsrs	r3, r3, #8
 800790c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f00a fbc4 	bl	80120a8 <USB_ReadInterrupts>
 8007920:	4603      	mov	r3, r0
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b02      	cmp	r3, #2
 8007928:	d107      	bne.n	800793a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695a      	ldr	r2, [r3, #20]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f002 0202 	and.w	r2, r2, #2
 8007938:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f00a fbb2 	bl	80120a8 <USB_ReadInterrupts>
 8007944:	4603      	mov	r3, r0
 8007946:	f003 0310 	and.w	r3, r3, #16
 800794a:	2b10      	cmp	r3, #16
 800794c:	d161      	bne.n	8007a12 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699a      	ldr	r2, [r3, #24]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0210 	bic.w	r2, r2, #16
 800795c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	f003 020f 	and.w	r2, r3, #15
 800796a:	4613      	mov	r3, r2
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	4413      	add	r3, r2
 800797a:	3304      	adds	r3, #4
 800797c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	0c5b      	lsrs	r3, r3, #17
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	2b02      	cmp	r3, #2
 8007988:	d124      	bne.n	80079d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007990:	4013      	ands	r3, r2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d035      	beq.n	8007a02 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	091b      	lsrs	r3, r3, #4
 800799e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	6a38      	ldr	r0, [r7, #32]
 80079aa:	f00a f9e9 	bl	8011d80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	091b      	lsrs	r3, r3, #4
 80079b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079ba:	441a      	add	r2, r3
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	695a      	ldr	r2, [r3, #20]
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	091b      	lsrs	r3, r3, #4
 80079c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079cc:	441a      	add	r2, r3
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	615a      	str	r2, [r3, #20]
 80079d2:	e016      	b.n	8007a02 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	0c5b      	lsrs	r3, r3, #17
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	2b06      	cmp	r3, #6
 80079de:	d110      	bne.n	8007a02 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80079e6:	2208      	movs	r2, #8
 80079e8:	4619      	mov	r1, r3
 80079ea:	6a38      	ldr	r0, [r7, #32]
 80079ec:	f00a f9c8 	bl	8011d80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	695a      	ldr	r2, [r3, #20]
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	091b      	lsrs	r3, r3, #4
 80079f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079fc:	441a      	add	r2, r3
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699a      	ldr	r2, [r3, #24]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f042 0210 	orr.w	r2, r2, #16
 8007a10:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f00a fb46 	bl	80120a8 <USB_ReadInterrupts>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a26:	f040 80a7 	bne.w	8007b78 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f00a fb4b 	bl	80120ce <USB_ReadDevAllOutEpInterrupt>
 8007a38:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007a3a:	e099      	b.n	8007b70 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 808e 	beq.w	8007b64 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	4611      	mov	r1, r2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f00a fb6f 	bl	8012136 <USB_ReadDevOutEPInterrupt>
 8007a58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00c      	beq.n	8007a7e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a70:	461a      	mov	r2, r3
 8007a72:	2301      	movs	r3, #1
 8007a74:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007a76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fed1 	bl	8008820 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00c      	beq.n	8007aa2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a94:	461a      	mov	r2, r3
 8007a96:	2308      	movs	r3, #8
 8007a98:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007a9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 ffa7 	bl	80089f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f003 0310 	and.w	r3, r3, #16
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d008      	beq.n	8007abe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab8:	461a      	mov	r2, r3
 8007aba:	2310      	movs	r3, #16
 8007abc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d030      	beq.n	8007b2a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad0:	2b80      	cmp	r3, #128	; 0x80
 8007ad2:	d109      	bne.n	8007ae8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ae6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aea:	4613      	mov	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	4413      	add	r3, r2
 8007afa:	3304      	adds	r3, #4
 8007afc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	78db      	ldrb	r3, [r3, #3]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d108      	bne.n	8007b18 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f010 f902 	bl	8017d1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b24:	461a      	mov	r2, r3
 8007b26:	2302      	movs	r3, #2
 8007b28:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b40:	461a      	mov	r2, r3
 8007b42:	2320      	movs	r3, #32
 8007b44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d009      	beq.n	8007b64 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b62:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	3301      	adds	r3, #1
 8007b68:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	085b      	lsrs	r3, r3, #1
 8007b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f47f af62 	bne.w	8007a3c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f00a fa93 	bl	80120a8 <USB_ReadInterrupts>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b8c:	f040 80db 	bne.w	8007d46 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f00a fab4 	bl	8012102 <USB_ReadDevAllInEpInterrupt>
 8007b9a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007ba0:	e0cd      	b.n	8007d3e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 80c2 	beq.w	8007d32 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f00a fada 	bl	8012172 <USB_ReadDevInEPInterrupt>
 8007bbe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d057      	beq.n	8007c7a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	43db      	mvns	r3, r3
 8007be4:	69f9      	ldr	r1, [r7, #28]
 8007be6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bea:	4013      	ands	r3, r2
 8007bec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d132      	bne.n	8007c6e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	3348      	adds	r3, #72	; 0x48
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1e:	4613      	mov	r3, r2
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4403      	add	r3, r0
 8007c28:	3344      	adds	r3, #68	; 0x44
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4419      	add	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	4613      	mov	r3, r2
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4403      	add	r3, r0
 8007c3c:	3348      	adds	r3, #72	; 0x48
 8007c3e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d113      	bne.n	8007c6e <HAL_PCD_IRQHandler+0x3a2>
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	440b      	add	r3, r1
 8007c54:	334c      	adds	r3, #76	; 0x4c
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d108      	bne.n	8007c6e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007c66:	461a      	mov	r2, r3
 8007c68:	2101      	movs	r1, #1
 8007c6a:	f00a fae3 	bl	8012234 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f00f ffcc 	bl	8017c12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d008      	beq.n	8007c96 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c90:	461a      	mov	r2, r3
 8007c92:	2308      	movs	r3, #8
 8007c94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f003 0310 	and.w	r3, r3, #16
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d008      	beq.n	8007cb2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cac:	461a      	mov	r2, r3
 8007cae:	2310      	movs	r3, #16
 8007cb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d008      	beq.n	8007cce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc8:	461a      	mov	r2, r3
 8007cca:	2340      	movs	r3, #64	; 0x40
 8007ccc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d023      	beq.n	8007d20 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cda:	6a38      	ldr	r0, [r7, #32]
 8007cdc:	f009 fac2 	bl	8011264 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	4413      	add	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	3338      	adds	r3, #56	; 0x38
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	4413      	add	r3, r2
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	78db      	ldrb	r3, [r3, #3]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d108      	bne.n	8007d0e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f010 f819 	bl	8017d40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fcea 	bl	8008706 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	3301      	adds	r3, #1
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f47f af2e 	bne.w	8007ba2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f00a f9ac 	bl	80120a8 <USB_ReadInterrupts>
 8007d50:	4603      	mov	r3, r0
 8007d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d5a:	d122      	bne.n	8007da2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	69fa      	ldr	r2, [r7, #28]
 8007d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d6a:	f023 0301 	bic.w	r3, r3, #1
 8007d6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d108      	bne.n	8007d8c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007d82:	2100      	movs	r1, #0
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fef5 	bl	8008b74 <HAL_PCDEx_LPM_Callback>
 8007d8a:	e002      	b.n	8007d92 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f00f ffb7 	bl	8017d00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	695a      	ldr	r2, [r3, #20]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f00a f97e 	bl	80120a8 <USB_ReadInterrupts>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007db6:	d112      	bne.n	8007dde <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d102      	bne.n	8007dce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f00f ff73 	bl	8017cb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	695a      	ldr	r2, [r3, #20]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f00a f960 	bl	80120a8 <USB_ReadInterrupts>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007df2:	d121      	bne.n	8007e38 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	695a      	ldr	r2, [r3, #20]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007e02:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d111      	bne.n	8007e32 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1c:	089b      	lsrs	r3, r3, #2
 8007e1e:	f003 020f 	and.w	r2, r3, #15
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007e28:	2101      	movs	r1, #1
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fea2 	bl	8008b74 <HAL_PCDEx_LPM_Callback>
 8007e30:	e002      	b.n	8007e38 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f00f ff3e 	bl	8017cb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f00a f933 	bl	80120a8 <USB_ReadInterrupts>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e4c:	f040 80b7 	bne.w	8007fbe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	69fa      	ldr	r2, [r7, #28]
 8007e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e5e:	f023 0301 	bic.w	r3, r3, #1
 8007e62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2110      	movs	r1, #16
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f009 f9fa 	bl	8011264 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e70:	2300      	movs	r3, #0
 8007e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e74:	e046      	b.n	8007f04 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e82:	461a      	mov	r2, r3
 8007e84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e9a:	0151      	lsls	r1, r2, #5
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	440a      	add	r2, r1
 8007ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ea8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ebc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ece:	0151      	lsls	r1, r2, #5
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	440a      	add	r2, r1
 8007ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ed8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007edc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eee:	0151      	lsls	r1, r2, #5
 8007ef0:	69fa      	ldr	r2, [r7, #28]
 8007ef2:	440a      	add	r2, r1
 8007ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ef8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007efc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	3301      	adds	r3, #1
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d3b3      	bcc.n	8007e76 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f1c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007f20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d016      	beq.n	8007f58 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f3a:	f043 030b 	orr.w	r3, r3, #11
 8007f3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f50:	f043 030b 	orr.w	r3, r3, #11
 8007f54:	6453      	str	r3, [r2, #68]	; 0x44
 8007f56:	e015      	b.n	8007f84 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5e:	695a      	ldr	r2, [r3, #20]
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f66:	4619      	mov	r1, r3
 8007f68:	f242 032b 	movw	r3, #8235	; 0x202b
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f7e:	f043 030b 	orr.w	r3, r3, #11
 8007f82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007f96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fa8:	461a      	mov	r2, r3
 8007faa:	f00a f943 	bl	8012234 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	695a      	ldr	r2, [r3, #20]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f00a f870 	bl	80120a8 <USB_ReadInterrupts>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd2:	d124      	bne.n	800801e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f00a f907 	bl	80121ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f009 f9bb 	bl	801135e <USB_GetDevSpeed>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	461a      	mov	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681c      	ldr	r4, [r3, #0]
 8007ff4:	f001 fd88 	bl	8009b08 <HAL_RCC_GetHCLKFreq>
 8007ff8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	461a      	mov	r2, r3
 8008002:	4620      	mov	r0, r4
 8008004:	f008 fec0 	bl	8010d88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f00f fe2a 	bl	8017c62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695a      	ldr	r2, [r3, #20]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800801c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4618      	mov	r0, r3
 8008024:	f00a f840 	bl	80120a8 <USB_ReadInterrupts>
 8008028:	4603      	mov	r3, r0
 800802a:	f003 0308 	and.w	r3, r3, #8
 800802e:	2b08      	cmp	r3, #8
 8008030:	d10a      	bne.n	8008048 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f00f fe07 	bl	8017c46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695a      	ldr	r2, [r3, #20]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f002 0208 	and.w	r2, r2, #8
 8008046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4618      	mov	r0, r3
 800804e:	f00a f82b 	bl	80120a8 <USB_ReadInterrupts>
 8008052:	4603      	mov	r3, r0
 8008054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008058:	2b80      	cmp	r3, #128	; 0x80
 800805a:	d122      	bne.n	80080a2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008068:	2301      	movs	r3, #1
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
 800806c:	e014      	b.n	8008098 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008072:	4613      	mov	r3, r2
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d105      	bne.n	8008092 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	b2db      	uxtb	r3, r3
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fb09 	bl	80086a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	3301      	adds	r3, #1
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809e:	429a      	cmp	r2, r3
 80080a0:	d3e5      	bcc.n	800806e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f009 fffe 	bl	80120a8 <USB_ReadInterrupts>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b6:	d13b      	bne.n	8008130 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080b8:	2301      	movs	r3, #1
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
 80080bc:	e02b      	b.n	8008116 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d2:	4613      	mov	r3, r2
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	4413      	add	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	440b      	add	r3, r1
 80080dc:	3340      	adds	r3, #64	; 0x40
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d115      	bne.n	8008110 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80080e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da12      	bge.n	8008110 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ee:	4613      	mov	r3, r2
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	440b      	add	r3, r1
 80080f8:	333f      	adds	r3, #63	; 0x3f
 80080fa:	2201      	movs	r2, #1
 80080fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008106:	b2db      	uxtb	r3, r3
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 faca 	bl	80086a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	3301      	adds	r3, #1
 8008114:	627b      	str	r3, [r7, #36]	; 0x24
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811c:	429a      	cmp	r2, r3
 800811e:	d3ce      	bcc.n	80080be <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	695a      	ldr	r2, [r3, #20]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800812e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4618      	mov	r0, r3
 8008136:	f009 ffb7 	bl	80120a8 <USB_ReadInterrupts>
 800813a:	4603      	mov	r3, r0
 800813c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008140:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008144:	d155      	bne.n	80081f2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008146:	2301      	movs	r3, #1
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
 800814a:	e045      	b.n	80081d8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008160:	4613      	mov	r3, r2
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d12e      	bne.n	80081d2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008174:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008176:	2b00      	cmp	r3, #0
 8008178:	da2b      	bge.n	80081d2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008186:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800818a:	429a      	cmp	r2, r3
 800818c:	d121      	bne.n	80081d2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008192:	4613      	mov	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	440b      	add	r3, r1
 800819c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80081a0:	2201      	movs	r2, #1
 80081a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081ce:	6053      	str	r3, [r2, #4]
            break;
 80081d0:	e007      	b.n	80081e2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	3301      	adds	r3, #1
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081de:	429a      	cmp	r2, r3
 80081e0:	d3b4      	bcc.n	800814c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	695a      	ldr	r2, [r3, #20]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80081f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f009 ff56 	bl	80120a8 <USB_ReadInterrupts>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008206:	d10a      	bne.n	800821e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f00f fdab 	bl	8017d64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	695a      	ldr	r2, [r3, #20]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800821c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4618      	mov	r0, r3
 8008224:	f009 ff40 	bl	80120a8 <USB_ReadInterrupts>
 8008228:	4603      	mov	r3, r0
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b04      	cmp	r3, #4
 8008230:	d115      	bne.n	800825e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f00f fd9b 	bl	8017d80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6859      	ldr	r1, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	430a      	orrs	r2, r1
 8008258:	605a      	str	r2, [r3, #4]
 800825a:	e000      	b.n	800825e <HAL_PCD_IRQHandler+0x992>
      return;
 800825c:	bf00      	nop
    }
  }
}
 800825e:	3734      	adds	r7, #52	; 0x34
 8008260:	46bd      	mov	sp, r7
 8008262:	bd90      	pop	{r4, r7, pc}

08008264 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008276:	2b01      	cmp	r3, #1
 8008278:	d101      	bne.n	800827e <HAL_PCD_SetAddress+0x1a>
 800827a:	2302      	movs	r3, #2
 800827c:	e013      	b.n	80082a6 <HAL_PCD_SetAddress+0x42>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	78fa      	ldrb	r2, [r7, #3]
 800828a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	78fa      	ldrb	r2, [r7, #3]
 8008294:	4611      	mov	r1, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f009 fe9e 	bl	8011fd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	4608      	mov	r0, r1
 80082b8:	4611      	mov	r1, r2
 80082ba:	461a      	mov	r2, r3
 80082bc:	4603      	mov	r3, r0
 80082be:	70fb      	strb	r3, [r7, #3]
 80082c0:	460b      	mov	r3, r1
 80082c2:	803b      	strh	r3, [r7, #0]
 80082c4:	4613      	mov	r3, r2
 80082c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80082cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	da0f      	bge.n	80082f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	f003 020f 	and.w	r2, r3, #15
 80082da:	4613      	mov	r3, r2
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	3338      	adds	r3, #56	; 0x38
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	4413      	add	r3, r2
 80082e8:	3304      	adds	r3, #4
 80082ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	705a      	strb	r2, [r3, #1]
 80082f2:	e00f      	b.n	8008314 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	f003 020f 	and.w	r2, r3, #15
 80082fa:	4613      	mov	r3, r2
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	4413      	add	r3, r2
 800830a:	3304      	adds	r3, #4
 800830c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	f003 030f 	and.w	r3, r3, #15
 800831a:	b2da      	uxtb	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008320:	883a      	ldrh	r2, [r7, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	78ba      	ldrb	r2, [r7, #2]
 800832a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d004      	beq.n	800833e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800833e:	78bb      	ldrb	r3, [r7, #2]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d102      	bne.n	800834a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008350:	2b01      	cmp	r3, #1
 8008352:	d101      	bne.n	8008358 <HAL_PCD_EP_Open+0xaa>
 8008354:	2302      	movs	r3, #2
 8008356:	e00e      	b.n	8008376 <HAL_PCD_EP_Open+0xc8>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68f9      	ldr	r1, [r7, #12]
 8008366:	4618      	mov	r0, r3
 8008368:	f009 f81e 	bl	80113a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008374:	7afb      	ldrb	r3, [r7, #11]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	460b      	mov	r3, r1
 8008388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800838a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800838e:	2b00      	cmp	r3, #0
 8008390:	da0f      	bge.n	80083b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	f003 020f 	and.w	r2, r3, #15
 8008398:	4613      	mov	r3, r2
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	3338      	adds	r3, #56	; 0x38
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	4413      	add	r3, r2
 80083a6:	3304      	adds	r3, #4
 80083a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	705a      	strb	r2, [r3, #1]
 80083b0:	e00f      	b.n	80083d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	f003 020f 	and.w	r2, r3, #15
 80083b8:	4613      	mov	r3, r2
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	4413      	add	r3, r2
 80083c8:	3304      	adds	r3, #4
 80083ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d101      	bne.n	80083ec <HAL_PCD_EP_Close+0x6e>
 80083e8:	2302      	movs	r3, #2
 80083ea:	e00e      	b.n	800840a <HAL_PCD_EP_Close+0x8c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68f9      	ldr	r1, [r7, #12]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f009 f85c 	bl	80114b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b086      	sub	sp, #24
 8008416:	af00      	add	r7, sp, #0
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	603b      	str	r3, [r7, #0]
 800841e:	460b      	mov	r3, r1
 8008420:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008422:	7afb      	ldrb	r3, [r7, #11]
 8008424:	f003 020f 	and.w	r2, r3, #15
 8008428:	4613      	mov	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	3304      	adds	r3, #4
 800843a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	2200      	movs	r2, #0
 800844c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2200      	movs	r2, #0
 8008452:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008454:	7afb      	ldrb	r3, [r7, #11]
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	b2da      	uxtb	r2, r3
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d102      	bne.n	800846e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	b2db      	uxtb	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	6979      	ldr	r1, [r7, #20]
 800847c:	f009 f8f8 	bl	8011670 <USB_EPStartXfer>

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008496:	78fb      	ldrb	r3, [r7, #3]
 8008498:	f003 020f 	and.w	r2, r3, #15
 800849c:	6879      	ldr	r1, [r7, #4]
 800849e:	4613      	mov	r3, r2
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	440b      	add	r3, r1
 80084a8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80084ac:	681b      	ldr	r3, [r3, #0]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b086      	sub	sp, #24
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
 80084c6:	460b      	mov	r3, r1
 80084c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084ca:	7afb      	ldrb	r3, [r7, #11]
 80084cc:	f003 020f 	and.w	r2, r3, #15
 80084d0:	4613      	mov	r3, r2
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	3338      	adds	r3, #56	; 0x38
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4413      	add	r3, r2
 80084de:	3304      	adds	r3, #4
 80084e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2200      	movs	r2, #0
 80084f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2201      	movs	r2, #1
 80084f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	f003 030f 	and.w	r3, r3, #15
 8008500:	b2da      	uxtb	r2, r3
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d102      	bne.n	8008514 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6818      	ldr	r0, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	b2db      	uxtb	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	6979      	ldr	r1, [r7, #20]
 8008522:	f009 f8a5 	bl	8011670 <USB_EPStartXfer>

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	f003 020f 	and.w	r2, r3, #15
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	429a      	cmp	r2, r3
 8008548:	d901      	bls.n	800854e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e050      	b.n	80085f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800854e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008552:	2b00      	cmp	r3, #0
 8008554:	da0f      	bge.n	8008576 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	f003 020f 	and.w	r2, r3, #15
 800855c:	4613      	mov	r3, r2
 800855e:	00db      	lsls	r3, r3, #3
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	3338      	adds	r3, #56	; 0x38
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	4413      	add	r3, r2
 800856a:	3304      	adds	r3, #4
 800856c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2201      	movs	r2, #1
 8008572:	705a      	strb	r2, [r3, #1]
 8008574:	e00d      	b.n	8008592 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008576:	78fa      	ldrb	r2, [r7, #3]
 8008578:	4613      	mov	r3, r2
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	4413      	add	r3, r2
 8008588:	3304      	adds	r3, #4
 800858a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	f003 030f 	and.w	r3, r3, #15
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d101      	bne.n	80085b2 <HAL_PCD_EP_SetStall+0x82>
 80085ae:	2302      	movs	r3, #2
 80085b0:	e01e      	b.n	80085f0 <HAL_PCD_EP_SetStall+0xc0>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68f9      	ldr	r1, [r7, #12]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f009 fc35 	bl	8011e30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	f003 030f 	and.w	r3, r3, #15
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6818      	ldr	r0, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	b2d9      	uxtb	r1, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80085e0:	461a      	mov	r2, r3
 80085e2:	f009 fe27 	bl	8012234 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	f003 020f 	and.w	r2, r3, #15
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	429a      	cmp	r2, r3
 8008610:	d901      	bls.n	8008616 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e042      	b.n	800869c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008616:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800861a:	2b00      	cmp	r3, #0
 800861c:	da0f      	bge.n	800863e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800861e:	78fb      	ldrb	r3, [r7, #3]
 8008620:	f003 020f 	and.w	r2, r3, #15
 8008624:	4613      	mov	r3, r2
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	3338      	adds	r3, #56	; 0x38
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	4413      	add	r3, r2
 8008632:	3304      	adds	r3, #4
 8008634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	705a      	strb	r2, [r3, #1]
 800863c:	e00f      	b.n	800865e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800863e:	78fb      	ldrb	r3, [r7, #3]
 8008640:	f003 020f 	and.w	r2, r3, #15
 8008644:	4613      	mov	r3, r2
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	4413      	add	r3, r2
 8008654:	3304      	adds	r3, #4
 8008656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	f003 030f 	and.w	r3, r3, #15
 800866a:	b2da      	uxtb	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008676:	2b01      	cmp	r3, #1
 8008678:	d101      	bne.n	800867e <HAL_PCD_EP_ClrStall+0x86>
 800867a:	2302      	movs	r3, #2
 800867c:	e00e      	b.n	800869c <HAL_PCD_EP_ClrStall+0xa4>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	4618      	mov	r0, r3
 800868e:	f009 fc3d 	bl	8011f0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80086b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	da0c      	bge.n	80086d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086b8:	78fb      	ldrb	r3, [r7, #3]
 80086ba:	f003 020f 	and.w	r2, r3, #15
 80086be:	4613      	mov	r3, r2
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	4413      	add	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	3338      	adds	r3, #56	; 0x38
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	4413      	add	r3, r2
 80086cc:	3304      	adds	r3, #4
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	e00c      	b.n	80086ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	f003 020f 	and.w	r2, r3, #15
 80086d8:	4613      	mov	r3, r2
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	4413      	add	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	4413      	add	r3, r2
 80086e8:	3304      	adds	r3, #4
 80086ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68f9      	ldr	r1, [r7, #12]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f009 fa5c 	bl	8011bb0 <USB_EPStopXfer>
 80086f8:	4603      	mov	r3, r0
 80086fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80086fc:	7afb      	ldrb	r3, [r7, #11]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b08a      	sub	sp, #40	; 0x28
 800870a:	af02      	add	r7, sp, #8
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	4613      	mov	r3, r2
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	3338      	adds	r3, #56	; 0x38
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	4413      	add	r3, r2
 800872a:	3304      	adds	r3, #4
 800872c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	695a      	ldr	r2, [r3, #20]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	429a      	cmp	r2, r3
 8008738:	d901      	bls.n	800873e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e06c      	b.n	8008818 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	691a      	ldr	r2, [r3, #16]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	429a      	cmp	r2, r3
 8008752:	d902      	bls.n	800875a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	3303      	adds	r3, #3
 800875e:	089b      	lsrs	r3, r3, #2
 8008760:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008762:	e02b      	b.n	80087bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	691a      	ldr	r2, [r3, #16]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	429a      	cmp	r2, r3
 8008778:	d902      	bls.n	8008780 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	3303      	adds	r3, #3
 8008784:	089b      	lsrs	r3, r3, #2
 8008786:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	68d9      	ldr	r1, [r3, #12]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	b2da      	uxtb	r2, r3
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008798:	b2db      	uxtb	r3, r3
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	4603      	mov	r3, r0
 800879e:	6978      	ldr	r0, [r7, #20]
 80087a0:	f009 fab0 	bl	8011d04 <USB_WritePacket>

    ep->xfer_buff  += len;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	68da      	ldr	r2, [r3, #12]
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	441a      	add	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	695a      	ldr	r2, [r3, #20]
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	441a      	add	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d809      	bhi.n	80087e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	695a      	ldr	r2, [r3, #20]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087da:	429a      	cmp	r2, r3
 80087dc:	d203      	bcs.n	80087e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1be      	bne.n	8008764 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	691a      	ldr	r2, [r3, #16]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d811      	bhi.n	8008816 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f003 030f 	and.w	r3, r3, #15
 80087f8:	2201      	movs	r2, #1
 80087fa:	fa02 f303 	lsl.w	r3, r2, r3
 80087fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	43db      	mvns	r3, r3
 800880c:	6939      	ldr	r1, [r7, #16]
 800880e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008812:	4013      	ands	r3, r2
 8008814:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3720      	adds	r7, #32
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	333c      	adds	r3, #60	; 0x3c
 8008838:	3304      	adds	r3, #4
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d17b      	bne.n	800894e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f003 0308 	and.w	r3, r3, #8
 800885c:	2b00      	cmp	r3, #0
 800885e:	d015      	beq.n	800888c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	4a61      	ldr	r2, [pc, #388]	; (80089e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008864:	4293      	cmp	r3, r2
 8008866:	f240 80b9 	bls.w	80089dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 80b3 	beq.w	80089dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008882:	461a      	mov	r2, r3
 8008884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008888:	6093      	str	r3, [r2, #8]
 800888a:	e0a7      	b.n	80089dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a2:	461a      	mov	r2, r3
 80088a4:	2320      	movs	r3, #32
 80088a6:	6093      	str	r3, [r2, #8]
 80088a8:	e098      	b.n	80089dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f040 8093 	bne.w	80089dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	4a4b      	ldr	r2, [pc, #300]	; (80089e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d90f      	bls.n	80088de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d4:	461a      	mov	r2, r3
 80088d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088da:	6093      	str	r3, [r2, #8]
 80088dc:	e07e      	b.n	80089dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	4613      	mov	r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	4413      	add	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	4413      	add	r3, r2
 80088f0:	3304      	adds	r3, #4
 80088f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6a1a      	ldr	r2, [r3, #32]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	0159      	lsls	r1, r3, #5
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	440b      	add	r3, r1
 8008900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800890a:	1ad2      	subs	r2, r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d114      	bne.n	8008940 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d109      	bne.n	8008932 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008928:	461a      	mov	r2, r3
 800892a:	2101      	movs	r1, #1
 800892c:	f009 fc82 	bl	8012234 <USB_EP0_OutStart>
 8008930:	e006      	b.n	8008940 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	68da      	ldr	r2, [r3, #12]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	441a      	add	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f00f f948 	bl	8017bdc <HAL_PCD_DataOutStageCallback>
 800894c:	e046      	b.n	80089dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	4a26      	ldr	r2, [pc, #152]	; (80089ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d124      	bne.n	80089a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00a      	beq.n	8008976 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896c:	461a      	mov	r2, r3
 800896e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008972:	6093      	str	r3, [r2, #8]
 8008974:	e032      	b.n	80089dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d008      	beq.n	8008992 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898c:	461a      	mov	r2, r3
 800898e:	2320      	movs	r3, #32
 8008990:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f00f f91f 	bl	8017bdc <HAL_PCD_DataOutStageCallback>
 800899e:	e01d      	b.n	80089dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d114      	bne.n	80089d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	4613      	mov	r3, r2
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	440b      	add	r3, r1
 80089b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d108      	bne.n	80089d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089c8:	461a      	mov	r2, r3
 80089ca:	2100      	movs	r1, #0
 80089cc:	f009 fc32 	bl	8012234 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f00f f900 	bl	8017bdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3720      	adds	r7, #32
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	4f54300a 	.word	0x4f54300a
 80089ec:	4f54310a 	.word	0x4f54310a

080089f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	333c      	adds	r3, #60	; 0x3c
 8008a08:	3304      	adds	r3, #4
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	4a15      	ldr	r2, [pc, #84]	; (8008a78 <PCD_EP_OutSetupPacket_int+0x88>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d90e      	bls.n	8008a44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d009      	beq.n	8008a44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f00f f8b7 	bl	8017bb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	4a0a      	ldr	r2, [pc, #40]	; (8008a78 <PCD_EP_OutSetupPacket_int+0x88>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d90c      	bls.n	8008a6c <PCD_EP_OutSetupPacket_int+0x7c>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d108      	bne.n	8008a6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6818      	ldr	r0, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a64:	461a      	mov	r2, r3
 8008a66:	2101      	movs	r1, #1
 8008a68:	f009 fbe4 	bl	8012234 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	4f54300a 	.word	0x4f54300a

08008a7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d107      	bne.n	8008aaa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008a9a:	883b      	ldrh	r3, [r7, #0]
 8008a9c:	0419      	lsls	r1, r3, #16
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8008aa8:	e028      	b.n	8008afc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab0:	0c1b      	lsrs	r3, r3, #16
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
 8008abc:	e00d      	b.n	8008ada <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	3340      	adds	r3, #64	; 0x40
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	0c1b      	lsrs	r3, r3, #16
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	73fb      	strb	r3, [r7, #15]
 8008ada:	7bfa      	ldrb	r2, [r7, #15]
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d3ec      	bcc.n	8008abe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008ae4:	883b      	ldrh	r3, [r7, #0]
 8008ae6:	0418      	lsls	r0, r3, #16
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6819      	ldr	r1, [r3, #0]
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	4302      	orrs	r2, r0
 8008af4:	3340      	adds	r3, #64	; 0x40
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	440b      	add	r3, r1
 8008afa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	887a      	ldrh	r2, [r7, #2]
 8008b1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <HAL_PCDEx_ActivateLPM+0x44>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	10000003 	.word	0x10000003

08008b74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008b94:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <HAL_PWREx_ConfigSupply+0x70>)
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d00a      	beq.n	8008bb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008ba0:	4b16      	ldr	r3, [pc, #88]	; (8008bfc <HAL_PWREx_ConfigSupply+0x70>)
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f003 0307 	and.w	r3, r3, #7
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d001      	beq.n	8008bb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e01f      	b.n	8008bf2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e01d      	b.n	8008bf2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008bb6:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <HAL_PWREx_ConfigSupply+0x70>)
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f023 0207 	bic.w	r2, r3, #7
 8008bbe:	490f      	ldr	r1, [pc, #60]	; (8008bfc <HAL_PWREx_ConfigSupply+0x70>)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008bc6:	f7fa f8ef 	bl	8002da8 <HAL_GetTick>
 8008bca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008bcc:	e009      	b.n	8008be2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008bce:	f7fa f8eb 	bl	8002da8 <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bdc:	d901      	bls.n	8008be2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e007      	b.n	8008bf2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008be2:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <HAL_PWREx_ConfigSupply+0x70>)
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bee:	d1ee      	bne.n	8008bce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	58024800 	.word	0x58024800

08008c00 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008c04:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	4a04      	ldr	r2, [pc, #16]	; (8008c1c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c0e:	60d3      	str	r3, [r2, #12]
}
 8008c10:	bf00      	nop
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	58024800 	.word	0x58024800

08008c20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b08c      	sub	sp, #48	; 0x30
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e3c8      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 8087 	beq.w	8008d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c40:	4b88      	ldr	r3, [pc, #544]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c4a:	4b86      	ldr	r3, [pc, #536]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c52:	2b10      	cmp	r3, #16
 8008c54:	d007      	beq.n	8008c66 <HAL_RCC_OscConfig+0x46>
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	2b18      	cmp	r3, #24
 8008c5a:	d110      	bne.n	8008c7e <HAL_RCC_OscConfig+0x5e>
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	f003 0303 	and.w	r3, r3, #3
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d10b      	bne.n	8008c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c66:	4b7f      	ldr	r3, [pc, #508]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d06c      	beq.n	8008d4c <HAL_RCC_OscConfig+0x12c>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d168      	bne.n	8008d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e3a2      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c86:	d106      	bne.n	8008c96 <HAL_RCC_OscConfig+0x76>
 8008c88:	4b76      	ldr	r3, [pc, #472]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a75      	ldr	r2, [pc, #468]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	e02e      	b.n	8008cf4 <HAL_RCC_OscConfig+0xd4>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10c      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x98>
 8008c9e:	4b71      	ldr	r3, [pc, #452]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a70      	ldr	r2, [pc, #448]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	4b6e      	ldr	r3, [pc, #440]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a6d      	ldr	r2, [pc, #436]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	e01d      	b.n	8008cf4 <HAL_RCC_OscConfig+0xd4>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cc0:	d10c      	bne.n	8008cdc <HAL_RCC_OscConfig+0xbc>
 8008cc2:	4b68      	ldr	r3, [pc, #416]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a67      	ldr	r2, [pc, #412]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	4b65      	ldr	r3, [pc, #404]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a64      	ldr	r2, [pc, #400]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	e00b      	b.n	8008cf4 <HAL_RCC_OscConfig+0xd4>
 8008cdc:	4b61      	ldr	r3, [pc, #388]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a60      	ldr	r2, [pc, #384]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	4b5e      	ldr	r3, [pc, #376]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a5d      	ldr	r2, [pc, #372]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d013      	beq.n	8008d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cfc:	f7fa f854 	bl	8002da8 <HAL_GetTick>
 8008d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d02:	e008      	b.n	8008d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d04:	f7fa f850 	bl	8002da8 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b64      	cmp	r3, #100	; 0x64
 8008d10:	d901      	bls.n	8008d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e356      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d16:	4b53      	ldr	r3, [pc, #332]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0f0      	beq.n	8008d04 <HAL_RCC_OscConfig+0xe4>
 8008d22:	e014      	b.n	8008d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d24:	f7fa f840 	bl	8002da8 <HAL_GetTick>
 8008d28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d2a:	e008      	b.n	8008d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d2c:	f7fa f83c 	bl	8002da8 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	2b64      	cmp	r3, #100	; 0x64
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e342      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d3e:	4b49      	ldr	r3, [pc, #292]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1f0      	bne.n	8008d2c <HAL_RCC_OscConfig+0x10c>
 8008d4a:	e000      	b.n	8008d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 808c 	beq.w	8008e74 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d5c:	4b41      	ldr	r3, [pc, #260]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d66:	4b3f      	ldr	r3, [pc, #252]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d007      	beq.n	8008d82 <HAL_RCC_OscConfig+0x162>
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	2b18      	cmp	r3, #24
 8008d76:	d137      	bne.n	8008de8 <HAL_RCC_OscConfig+0x1c8>
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d132      	bne.n	8008de8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d82:	4b38      	ldr	r3, [pc, #224]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0304 	and.w	r3, r3, #4
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d005      	beq.n	8008d9a <HAL_RCC_OscConfig+0x17a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e314      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d9a:	4b32      	ldr	r3, [pc, #200]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f023 0219 	bic.w	r2, r3, #25
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	492f      	ldr	r1, [pc, #188]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dac:	f7f9 fffc 	bl	8002da8 <HAL_GetTick>
 8008db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008db2:	e008      	b.n	8008dc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008db4:	f7f9 fff8 	bl	8002da8 <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d901      	bls.n	8008dc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e2fe      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dc6:	4b27      	ldr	r3, [pc, #156]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0f0      	beq.n	8008db4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dd2:	4b24      	ldr	r3, [pc, #144]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	061b      	lsls	r3, r3, #24
 8008de0:	4920      	ldr	r1, [pc, #128]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008de6:	e045      	b.n	8008e74 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d026      	beq.n	8008e3e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008df0:	4b1c      	ldr	r3, [pc, #112]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f023 0219 	bic.w	r2, r3, #25
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	4919      	ldr	r1, [pc, #100]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e02:	f7f9 ffd1 	bl	8002da8 <HAL_GetTick>
 8008e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e08:	e008      	b.n	8008e1c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e0a:	f7f9 ffcd 	bl	8002da8 <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d901      	bls.n	8008e1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e2d3      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e1c:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0304 	and.w	r3, r3, #4
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0f0      	beq.n	8008e0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e28:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	061b      	lsls	r3, r3, #24
 8008e36:	490b      	ldr	r1, [pc, #44]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	604b      	str	r3, [r1, #4]
 8008e3c:	e01a      	b.n	8008e74 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e3e:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a08      	ldr	r2, [pc, #32]	; (8008e64 <HAL_RCC_OscConfig+0x244>)
 8008e44:	f023 0301 	bic.w	r3, r3, #1
 8008e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e4a:	f7f9 ffad 	bl	8002da8 <HAL_GetTick>
 8008e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e50:	e00a      	b.n	8008e68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e52:	f7f9 ffa9 	bl	8002da8 <HAL_GetTick>
 8008e56:	4602      	mov	r2, r0
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d903      	bls.n	8008e68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e2af      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
 8008e64:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e68:	4b96      	ldr	r3, [pc, #600]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0304 	and.w	r3, r3, #4
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1ee      	bne.n	8008e52 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d06a      	beq.n	8008f56 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e80:	4b90      	ldr	r3, [pc, #576]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e88:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e8a:	4b8e      	ldr	r3, [pc, #568]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d007      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x286>
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	2b18      	cmp	r3, #24
 8008e9a:	d11b      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x2b4>
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d116      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ea6:	4b87      	ldr	r3, [pc, #540]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d005      	beq.n	8008ebe <HAL_RCC_OscConfig+0x29e>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	2b80      	cmp	r3, #128	; 0x80
 8008eb8:	d001      	beq.n	8008ebe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e282      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ebe:	4b81      	ldr	r3, [pc, #516]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	061b      	lsls	r3, r3, #24
 8008ecc:	497d      	ldr	r1, [pc, #500]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ed2:	e040      	b.n	8008f56 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	69db      	ldr	r3, [r3, #28]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d023      	beq.n	8008f24 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008edc:	4b79      	ldr	r3, [pc, #484]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a78      	ldr	r2, [pc, #480]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee8:	f7f9 ff5e 	bl	8002da8 <HAL_GetTick>
 8008eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008eee:	e008      	b.n	8008f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008ef0:	f7f9 ff5a 	bl	8002da8 <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e260      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f02:	4b70      	ldr	r3, [pc, #448]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0f0      	beq.n	8008ef0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f0e:	4b6d      	ldr	r3, [pc, #436]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	061b      	lsls	r3, r3, #24
 8008f1c:	4969      	ldr	r1, [pc, #420]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60cb      	str	r3, [r1, #12]
 8008f22:	e018      	b.n	8008f56 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008f24:	4b67      	ldr	r3, [pc, #412]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a66      	ldr	r2, [pc, #408]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f30:	f7f9 ff3a 	bl	8002da8 <HAL_GetTick>
 8008f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f36:	e008      	b.n	8008f4a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f38:	f7f9 ff36 	bl	8002da8 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e23c      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f4a:	4b5e      	ldr	r3, [pc, #376]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1f0      	bne.n	8008f38 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0308 	and.w	r3, r3, #8
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d036      	beq.n	8008fd0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d019      	beq.n	8008f9e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f6a:	4b56      	ldr	r3, [pc, #344]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f6e:	4a55      	ldr	r2, [pc, #340]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008f70:	f043 0301 	orr.w	r3, r3, #1
 8008f74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f76:	f7f9 ff17 	bl	8002da8 <HAL_GetTick>
 8008f7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f7c:	e008      	b.n	8008f90 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f7e:	f7f9 ff13 	bl	8002da8 <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d901      	bls.n	8008f90 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e219      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f90:	4b4c      	ldr	r3, [pc, #304]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d0f0      	beq.n	8008f7e <HAL_RCC_OscConfig+0x35e>
 8008f9c:	e018      	b.n	8008fd0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f9e:	4b49      	ldr	r3, [pc, #292]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fa2:	4a48      	ldr	r2, [pc, #288]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008fa4:	f023 0301 	bic.w	r3, r3, #1
 8008fa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008faa:	f7f9 fefd 	bl	8002da8 <HAL_GetTick>
 8008fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fb0:	e008      	b.n	8008fc4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fb2:	f7f9 fef9 	bl	8002da8 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d901      	bls.n	8008fc4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e1ff      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fc4:	4b3f      	ldr	r3, [pc, #252]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1f0      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0320 	and.w	r3, r3, #32
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d036      	beq.n	800904a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d019      	beq.n	8009018 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fe4:	4b37      	ldr	r3, [pc, #220]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a36      	ldr	r2, [pc, #216]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8008fea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ff0:	f7f9 feda 	bl	8002da8 <HAL_GetTick>
 8008ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ff6:	e008      	b.n	800900a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ff8:	f7f9 fed6 	bl	8002da8 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d901      	bls.n	800900a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e1dc      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800900a:	4b2e      	ldr	r3, [pc, #184]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0f0      	beq.n	8008ff8 <HAL_RCC_OscConfig+0x3d8>
 8009016:	e018      	b.n	800904a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009018:	4b2a      	ldr	r3, [pc, #168]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a29      	ldr	r2, [pc, #164]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 800901e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009022:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009024:	f7f9 fec0 	bl	8002da8 <HAL_GetTick>
 8009028:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800902a:	e008      	b.n	800903e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800902c:	f7f9 febc 	bl	8002da8 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b02      	cmp	r3, #2
 8009038:	d901      	bls.n	800903e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e1c2      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800903e:	4b21      	ldr	r3, [pc, #132]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1f0      	bne.n	800902c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0304 	and.w	r3, r3, #4
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 8086 	beq.w	8009164 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009058:	4b1b      	ldr	r3, [pc, #108]	; (80090c8 <HAL_RCC_OscConfig+0x4a8>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a1a      	ldr	r2, [pc, #104]	; (80090c8 <HAL_RCC_OscConfig+0x4a8>)
 800905e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009062:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009064:	f7f9 fea0 	bl	8002da8 <HAL_GetTick>
 8009068:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800906a:	e008      	b.n	800907e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800906c:	f7f9 fe9c 	bl	8002da8 <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	2b64      	cmp	r3, #100	; 0x64
 8009078:	d901      	bls.n	800907e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e1a2      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800907e:	4b12      	ldr	r3, [pc, #72]	; (80090c8 <HAL_RCC_OscConfig+0x4a8>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0f0      	beq.n	800906c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d106      	bne.n	80090a0 <HAL_RCC_OscConfig+0x480>
 8009092:	4b0c      	ldr	r3, [pc, #48]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8009094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009096:	4a0b      	ldr	r2, [pc, #44]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 8009098:	f043 0301 	orr.w	r3, r3, #1
 800909c:	6713      	str	r3, [r2, #112]	; 0x70
 800909e:	e032      	b.n	8009106 <HAL_RCC_OscConfig+0x4e6>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d111      	bne.n	80090cc <HAL_RCC_OscConfig+0x4ac>
 80090a8:	4b06      	ldr	r3, [pc, #24]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 80090aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ac:	4a05      	ldr	r2, [pc, #20]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 80090ae:	f023 0301 	bic.w	r3, r3, #1
 80090b2:	6713      	str	r3, [r2, #112]	; 0x70
 80090b4:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 80090b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b8:	4a02      	ldr	r2, [pc, #8]	; (80090c4 <HAL_RCC_OscConfig+0x4a4>)
 80090ba:	f023 0304 	bic.w	r3, r3, #4
 80090be:	6713      	str	r3, [r2, #112]	; 0x70
 80090c0:	e021      	b.n	8009106 <HAL_RCC_OscConfig+0x4e6>
 80090c2:	bf00      	nop
 80090c4:	58024400 	.word	0x58024400
 80090c8:	58024800 	.word	0x58024800
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	2b05      	cmp	r3, #5
 80090d2:	d10c      	bne.n	80090ee <HAL_RCC_OscConfig+0x4ce>
 80090d4:	4b83      	ldr	r3, [pc, #524]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80090d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d8:	4a82      	ldr	r2, [pc, #520]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80090da:	f043 0304 	orr.w	r3, r3, #4
 80090de:	6713      	str	r3, [r2, #112]	; 0x70
 80090e0:	4b80      	ldr	r3, [pc, #512]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80090e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e4:	4a7f      	ldr	r2, [pc, #508]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80090e6:	f043 0301 	orr.w	r3, r3, #1
 80090ea:	6713      	str	r3, [r2, #112]	; 0x70
 80090ec:	e00b      	b.n	8009106 <HAL_RCC_OscConfig+0x4e6>
 80090ee:	4b7d      	ldr	r3, [pc, #500]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80090f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f2:	4a7c      	ldr	r2, [pc, #496]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80090f4:	f023 0301 	bic.w	r3, r3, #1
 80090f8:	6713      	str	r3, [r2, #112]	; 0x70
 80090fa:	4b7a      	ldr	r3, [pc, #488]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80090fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fe:	4a79      	ldr	r2, [pc, #484]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009100:	f023 0304 	bic.w	r3, r3, #4
 8009104:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d015      	beq.n	800913a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800910e:	f7f9 fe4b 	bl	8002da8 <HAL_GetTick>
 8009112:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009114:	e00a      	b.n	800912c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009116:	f7f9 fe47 	bl	8002da8 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	f241 3288 	movw	r2, #5000	; 0x1388
 8009124:	4293      	cmp	r3, r2
 8009126:	d901      	bls.n	800912c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	e14b      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800912c:	4b6d      	ldr	r3, [pc, #436]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800912e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009130:	f003 0302 	and.w	r3, r3, #2
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0ee      	beq.n	8009116 <HAL_RCC_OscConfig+0x4f6>
 8009138:	e014      	b.n	8009164 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800913a:	f7f9 fe35 	bl	8002da8 <HAL_GetTick>
 800913e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009140:	e00a      	b.n	8009158 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009142:	f7f9 fe31 	bl	8002da8 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009150:	4293      	cmp	r3, r2
 8009152:	d901      	bls.n	8009158 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009154:	2303      	movs	r3, #3
 8009156:	e135      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009158:	4b62      	ldr	r3, [pc, #392]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800915a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915c:	f003 0302 	and.w	r3, r3, #2
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1ee      	bne.n	8009142 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 812a 	beq.w	80093c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800916e:	4b5d      	ldr	r3, [pc, #372]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009176:	2b18      	cmp	r3, #24
 8009178:	f000 80ba 	beq.w	80092f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	2b02      	cmp	r3, #2
 8009182:	f040 8095 	bne.w	80092b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009186:	4b57      	ldr	r3, [pc, #348]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a56      	ldr	r2, [pc, #344]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800918c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009192:	f7f9 fe09 	bl	8002da8 <HAL_GetTick>
 8009196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009198:	e008      	b.n	80091ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800919a:	f7f9 fe05 	bl	8002da8 <HAL_GetTick>
 800919e:	4602      	mov	r2, r0
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d901      	bls.n	80091ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e10b      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091ac:	4b4d      	ldr	r3, [pc, #308]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1f0      	bne.n	800919a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091b8:	4b4a      	ldr	r3, [pc, #296]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80091ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091bc:	4b4a      	ldr	r3, [pc, #296]	; (80092e8 <HAL_RCC_OscConfig+0x6c8>)
 80091be:	4013      	ands	r3, r2
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80091c8:	0112      	lsls	r2, r2, #4
 80091ca:	430a      	orrs	r2, r1
 80091cc:	4945      	ldr	r1, [pc, #276]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	628b      	str	r3, [r1, #40]	; 0x28
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	3b01      	subs	r3, #1
 80091d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e0:	3b01      	subs	r3, #1
 80091e2:	025b      	lsls	r3, r3, #9
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	431a      	orrs	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ec:	3b01      	subs	r3, #1
 80091ee:	041b      	lsls	r3, r3, #16
 80091f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091f4:	431a      	orrs	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091fa:	3b01      	subs	r3, #1
 80091fc:	061b      	lsls	r3, r3, #24
 80091fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009202:	4938      	ldr	r1, [pc, #224]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009204:	4313      	orrs	r3, r2
 8009206:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009208:	4b36      	ldr	r3, [pc, #216]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	4a35      	ldr	r2, [pc, #212]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800920e:	f023 0301 	bic.w	r3, r3, #1
 8009212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009214:	4b33      	ldr	r3, [pc, #204]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009218:	4b34      	ldr	r3, [pc, #208]	; (80092ec <HAL_RCC_OscConfig+0x6cc>)
 800921a:	4013      	ands	r3, r2
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009220:	00d2      	lsls	r2, r2, #3
 8009222:	4930      	ldr	r1, [pc, #192]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009224:	4313      	orrs	r3, r2
 8009226:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009228:	4b2e      	ldr	r3, [pc, #184]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	f023 020c 	bic.w	r2, r3, #12
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009234:	492b      	ldr	r1, [pc, #172]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009236:	4313      	orrs	r3, r2
 8009238:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800923a:	4b2a      	ldr	r3, [pc, #168]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800923c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923e:	f023 0202 	bic.w	r2, r3, #2
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009246:	4927      	ldr	r1, [pc, #156]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009248:	4313      	orrs	r3, r2
 800924a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800924c:	4b25      	ldr	r3, [pc, #148]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009250:	4a24      	ldr	r2, [pc, #144]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009258:	4b22      	ldr	r3, [pc, #136]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	4a21      	ldr	r2, [pc, #132]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800925e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009264:	4b1f      	ldr	r3, [pc, #124]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	4a1e      	ldr	r2, [pc, #120]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800926a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800926e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009270:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a1b      	ldr	r2, [pc, #108]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009276:	f043 0301 	orr.w	r3, r3, #1
 800927a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800927c:	4b19      	ldr	r3, [pc, #100]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a18      	ldr	r2, [pc, #96]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 8009282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009288:	f7f9 fd8e 	bl	8002da8 <HAL_GetTick>
 800928c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800928e:	e008      	b.n	80092a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009290:	f7f9 fd8a 	bl	8002da8 <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	2b02      	cmp	r3, #2
 800929c:	d901      	bls.n	80092a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e090      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092a2:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0f0      	beq.n	8009290 <HAL_RCC_OscConfig+0x670>
 80092ae:	e088      	b.n	80093c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092b0:	4b0c      	ldr	r3, [pc, #48]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a0b      	ldr	r2, [pc, #44]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80092b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092bc:	f7f9 fd74 	bl	8002da8 <HAL_GetTick>
 80092c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092c2:	e008      	b.n	80092d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092c4:	f7f9 fd70 	bl	8002da8 <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d901      	bls.n	80092d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e076      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092d6:	4b03      	ldr	r3, [pc, #12]	; (80092e4 <HAL_RCC_OscConfig+0x6c4>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1f0      	bne.n	80092c4 <HAL_RCC_OscConfig+0x6a4>
 80092e2:	e06e      	b.n	80093c2 <HAL_RCC_OscConfig+0x7a2>
 80092e4:	58024400 	.word	0x58024400
 80092e8:	fffffc0c 	.word	0xfffffc0c
 80092ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80092f0:	4b36      	ldr	r3, [pc, #216]	; (80093cc <HAL_RCC_OscConfig+0x7ac>)
 80092f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80092f6:	4b35      	ldr	r3, [pc, #212]	; (80093cc <HAL_RCC_OscConfig+0x7ac>)
 80092f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	2b01      	cmp	r3, #1
 8009302:	d031      	beq.n	8009368 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f003 0203 	and.w	r2, r3, #3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800930e:	429a      	cmp	r2, r3
 8009310:	d12a      	bne.n	8009368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	091b      	lsrs	r3, r3, #4
 8009316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800931e:	429a      	cmp	r2, r3
 8009320:	d122      	bne.n	8009368 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800932e:	429a      	cmp	r2, r3
 8009330:	d11a      	bne.n	8009368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	0a5b      	lsrs	r3, r3, #9
 8009336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009340:	429a      	cmp	r2, r3
 8009342:	d111      	bne.n	8009368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	0c1b      	lsrs	r3, r3, #16
 8009348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009352:	429a      	cmp	r2, r3
 8009354:	d108      	bne.n	8009368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	0e1b      	lsrs	r3, r3, #24
 800935a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009362:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009364:	429a      	cmp	r2, r3
 8009366:	d001      	beq.n	800936c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e02b      	b.n	80093c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800936c:	4b17      	ldr	r3, [pc, #92]	; (80093cc <HAL_RCC_OscConfig+0x7ac>)
 800936e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009370:	08db      	lsrs	r3, r3, #3
 8009372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009376:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	429a      	cmp	r2, r3
 8009380:	d01f      	beq.n	80093c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009382:	4b12      	ldr	r3, [pc, #72]	; (80093cc <HAL_RCC_OscConfig+0x7ac>)
 8009384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009386:	4a11      	ldr	r2, [pc, #68]	; (80093cc <HAL_RCC_OscConfig+0x7ac>)
 8009388:	f023 0301 	bic.w	r3, r3, #1
 800938c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800938e:	f7f9 fd0b 	bl	8002da8 <HAL_GetTick>
 8009392:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009394:	bf00      	nop
 8009396:	f7f9 fd07 	bl	8002da8 <HAL_GetTick>
 800939a:	4602      	mov	r2, r0
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	4293      	cmp	r3, r2
 80093a0:	d0f9      	beq.n	8009396 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093a2:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <HAL_RCC_OscConfig+0x7ac>)
 80093a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093a6:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <HAL_RCC_OscConfig+0x7b0>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093ae:	00d2      	lsls	r2, r2, #3
 80093b0:	4906      	ldr	r1, [pc, #24]	; (80093cc <HAL_RCC_OscConfig+0x7ac>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <HAL_RCC_OscConfig+0x7ac>)
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	4a04      	ldr	r2, [pc, #16]	; (80093cc <HAL_RCC_OscConfig+0x7ac>)
 80093bc:	f043 0301 	orr.w	r3, r3, #1
 80093c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3730      	adds	r7, #48	; 0x30
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	58024400 	.word	0x58024400
 80093d0:	ffff0007 	.word	0xffff0007

080093d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e19c      	b.n	8009722 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093e8:	4b8a      	ldr	r3, [pc, #552]	; (8009614 <HAL_RCC_ClockConfig+0x240>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 030f 	and.w	r3, r3, #15
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d910      	bls.n	8009418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093f6:	4b87      	ldr	r3, [pc, #540]	; (8009614 <HAL_RCC_ClockConfig+0x240>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f023 020f 	bic.w	r2, r3, #15
 80093fe:	4985      	ldr	r1, [pc, #532]	; (8009614 <HAL_RCC_ClockConfig+0x240>)
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	4313      	orrs	r3, r2
 8009404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009406:	4b83      	ldr	r3, [pc, #524]	; (8009614 <HAL_RCC_ClockConfig+0x240>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 030f 	and.w	r3, r3, #15
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	429a      	cmp	r2, r3
 8009412:	d001      	beq.n	8009418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e184      	b.n	8009722 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0304 	and.w	r3, r3, #4
 8009420:	2b00      	cmp	r3, #0
 8009422:	d010      	beq.n	8009446 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	4b7b      	ldr	r3, [pc, #492]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009430:	429a      	cmp	r2, r3
 8009432:	d908      	bls.n	8009446 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009434:	4b78      	ldr	r3, [pc, #480]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	4975      	ldr	r1, [pc, #468]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009442:	4313      	orrs	r3, r2
 8009444:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0308 	and.w	r3, r3, #8
 800944e:	2b00      	cmp	r3, #0
 8009450:	d010      	beq.n	8009474 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	695a      	ldr	r2, [r3, #20]
 8009456:	4b70      	ldr	r3, [pc, #448]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800945e:	429a      	cmp	r2, r3
 8009460:	d908      	bls.n	8009474 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009462:	4b6d      	ldr	r3, [pc, #436]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	496a      	ldr	r1, [pc, #424]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009470:	4313      	orrs	r3, r2
 8009472:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0310 	and.w	r3, r3, #16
 800947c:	2b00      	cmp	r3, #0
 800947e:	d010      	beq.n	80094a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	699a      	ldr	r2, [r3, #24]
 8009484:	4b64      	ldr	r3, [pc, #400]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800948c:	429a      	cmp	r2, r3
 800948e:	d908      	bls.n	80094a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009490:	4b61      	ldr	r3, [pc, #388]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	495e      	ldr	r1, [pc, #376]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 800949e:	4313      	orrs	r3, r2
 80094a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d010      	beq.n	80094d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	69da      	ldr	r2, [r3, #28]
 80094b2:	4b59      	ldr	r3, [pc, #356]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d908      	bls.n	80094d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80094be:	4b56      	ldr	r3, [pc, #344]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	4953      	ldr	r1, [pc, #332]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0302 	and.w	r3, r3, #2
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d010      	beq.n	80094fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68da      	ldr	r2, [r3, #12]
 80094e0:	4b4d      	ldr	r3, [pc, #308]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	f003 030f 	and.w	r3, r3, #15
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d908      	bls.n	80094fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094ec:	4b4a      	ldr	r3, [pc, #296]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	f023 020f 	bic.w	r2, r3, #15
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	4947      	ldr	r1, [pc, #284]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d055      	beq.n	80095b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800950a:	4b43      	ldr	r3, [pc, #268]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	4940      	ldr	r1, [pc, #256]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009518:	4313      	orrs	r3, r2
 800951a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	2b02      	cmp	r3, #2
 8009522:	d107      	bne.n	8009534 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009524:	4b3c      	ldr	r3, [pc, #240]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d121      	bne.n	8009574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e0f6      	b.n	8009722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b03      	cmp	r3, #3
 800953a:	d107      	bne.n	800954c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800953c:	4b36      	ldr	r3, [pc, #216]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d115      	bne.n	8009574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e0ea      	b.n	8009722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d107      	bne.n	8009564 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009554:	4b30      	ldr	r3, [pc, #192]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955c:	2b00      	cmp	r3, #0
 800955e:	d109      	bne.n	8009574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e0de      	b.n	8009722 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009564:	4b2c      	ldr	r3, [pc, #176]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0304 	and.w	r3, r3, #4
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e0d6      	b.n	8009722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009574:	4b28      	ldr	r3, [pc, #160]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	f023 0207 	bic.w	r2, r3, #7
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	4925      	ldr	r1, [pc, #148]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 8009582:	4313      	orrs	r3, r2
 8009584:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009586:	f7f9 fc0f 	bl	8002da8 <HAL_GetTick>
 800958a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800958c:	e00a      	b.n	80095a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800958e:	f7f9 fc0b 	bl	8002da8 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	f241 3288 	movw	r2, #5000	; 0x1388
 800959c:	4293      	cmp	r3, r2
 800959e:	d901      	bls.n	80095a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e0be      	b.n	8009722 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095a4:	4b1c      	ldr	r3, [pc, #112]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d1eb      	bne.n	800958e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 0302 	and.w	r3, r3, #2
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d010      	beq.n	80095e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	4b14      	ldr	r3, [pc, #80]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d208      	bcs.n	80095e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095d2:	4b11      	ldr	r3, [pc, #68]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	f023 020f 	bic.w	r2, r3, #15
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	490e      	ldr	r1, [pc, #56]	; (8009618 <HAL_RCC_ClockConfig+0x244>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095e4:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <HAL_RCC_ClockConfig+0x240>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 030f 	and.w	r3, r3, #15
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d214      	bcs.n	800961c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095f2:	4b08      	ldr	r3, [pc, #32]	; (8009614 <HAL_RCC_ClockConfig+0x240>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f023 020f 	bic.w	r2, r3, #15
 80095fa:	4906      	ldr	r1, [pc, #24]	; (8009614 <HAL_RCC_ClockConfig+0x240>)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	4313      	orrs	r3, r2
 8009600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009602:	4b04      	ldr	r3, [pc, #16]	; (8009614 <HAL_RCC_ClockConfig+0x240>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	429a      	cmp	r2, r3
 800960e:	d005      	beq.n	800961c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e086      	b.n	8009722 <HAL_RCC_ClockConfig+0x34e>
 8009614:	52002000 	.word	0x52002000
 8009618:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0304 	and.w	r3, r3, #4
 8009624:	2b00      	cmp	r3, #0
 8009626:	d010      	beq.n	800964a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	691a      	ldr	r2, [r3, #16]
 800962c:	4b3f      	ldr	r3, [pc, #252]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009634:	429a      	cmp	r2, r3
 8009636:	d208      	bcs.n	800964a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009638:	4b3c      	ldr	r3, [pc, #240]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	4939      	ldr	r1, [pc, #228]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 8009646:	4313      	orrs	r3, r2
 8009648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0308 	and.w	r3, r3, #8
 8009652:	2b00      	cmp	r3, #0
 8009654:	d010      	beq.n	8009678 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	695a      	ldr	r2, [r3, #20]
 800965a:	4b34      	ldr	r3, [pc, #208]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009662:	429a      	cmp	r2, r3
 8009664:	d208      	bcs.n	8009678 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009666:	4b31      	ldr	r3, [pc, #196]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	492e      	ldr	r1, [pc, #184]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 8009674:	4313      	orrs	r3, r2
 8009676:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	d010      	beq.n	80096a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	699a      	ldr	r2, [r3, #24]
 8009688:	4b28      	ldr	r3, [pc, #160]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009690:	429a      	cmp	r2, r3
 8009692:	d208      	bcs.n	80096a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009694:	4b25      	ldr	r3, [pc, #148]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	4922      	ldr	r1, [pc, #136]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d010      	beq.n	80096d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69da      	ldr	r2, [r3, #28]
 80096b6:	4b1d      	ldr	r3, [pc, #116]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096be:	429a      	cmp	r2, r3
 80096c0:	d208      	bcs.n	80096d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80096c2:	4b1a      	ldr	r3, [pc, #104]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	4917      	ldr	r1, [pc, #92]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80096d4:	f000 f89e 	bl	8009814 <HAL_RCC_GetSysClockFreq>
 80096d8:	4602      	mov	r2, r0
 80096da:	4b14      	ldr	r3, [pc, #80]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	0a1b      	lsrs	r3, r3, #8
 80096e0:	f003 030f 	and.w	r3, r3, #15
 80096e4:	4912      	ldr	r1, [pc, #72]	; (8009730 <HAL_RCC_ClockConfig+0x35c>)
 80096e6:	5ccb      	ldrb	r3, [r1, r3]
 80096e8:	f003 031f 	and.w	r3, r3, #31
 80096ec:	fa22 f303 	lsr.w	r3, r2, r3
 80096f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80096f2:	4b0e      	ldr	r3, [pc, #56]	; (800972c <HAL_RCC_ClockConfig+0x358>)
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	4a0d      	ldr	r2, [pc, #52]	; (8009730 <HAL_RCC_ClockConfig+0x35c>)
 80096fc:	5cd3      	ldrb	r3, [r2, r3]
 80096fe:	f003 031f 	and.w	r3, r3, #31
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	fa22 f303 	lsr.w	r3, r2, r3
 8009708:	4a0a      	ldr	r2, [pc, #40]	; (8009734 <HAL_RCC_ClockConfig+0x360>)
 800970a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800970c:	4a0a      	ldr	r2, [pc, #40]	; (8009738 <HAL_RCC_ClockConfig+0x364>)
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009712:	4b0a      	ldr	r3, [pc, #40]	; (800973c <HAL_RCC_ClockConfig+0x368>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4618      	mov	r0, r3
 8009718:	f7f9 fafc 	bl	8002d14 <HAL_InitTick>
 800971c:	4603      	mov	r3, r0
 800971e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009720:	7bfb      	ldrb	r3, [r7, #15]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3718      	adds	r7, #24
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	58024400 	.word	0x58024400
 8009730:	0801c990 	.word	0x0801c990
 8009734:	24000004 	.word	0x24000004
 8009738:	24000000 	.word	0x24000000
 800973c:	24000008 	.word	0x24000008

08009740 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08c      	sub	sp, #48	; 0x30
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d12a      	bne.n	80097a8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009752:	4b2d      	ldr	r3, [pc, #180]	; (8009808 <HAL_RCC_MCOConfig+0xc8>)
 8009754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009758:	4a2b      	ldr	r2, [pc, #172]	; (8009808 <HAL_RCC_MCOConfig+0xc8>)
 800975a:	f043 0301 	orr.w	r3, r3, #1
 800975e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009762:	4b29      	ldr	r3, [pc, #164]	; (8009808 <HAL_RCC_MCOConfig+0xc8>)
 8009764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	61bb      	str	r3, [r7, #24]
 800976e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009776:	2302      	movs	r3, #2
 8009778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800977a:	2303      	movs	r3, #3
 800977c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800977e:	2300      	movs	r3, #0
 8009780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009782:	2300      	movs	r3, #0
 8009784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009786:	f107 031c 	add.w	r3, r7, #28
 800978a:	4619      	mov	r1, r3
 800978c:	481f      	ldr	r0, [pc, #124]	; (800980c <HAL_RCC_MCOConfig+0xcc>)
 800978e:	f7fd fc41 	bl	8007014 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009792:	4b1d      	ldr	r3, [pc, #116]	; (8009808 <HAL_RCC_MCOConfig+0xc8>)
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	430b      	orrs	r3, r1
 80097a0:	4919      	ldr	r1, [pc, #100]	; (8009808 <HAL_RCC_MCOConfig+0xc8>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80097a6:	e02a      	b.n	80097fe <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80097a8:	4b17      	ldr	r3, [pc, #92]	; (8009808 <HAL_RCC_MCOConfig+0xc8>)
 80097aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097ae:	4a16      	ldr	r2, [pc, #88]	; (8009808 <HAL_RCC_MCOConfig+0xc8>)
 80097b0:	f043 0304 	orr.w	r3, r3, #4
 80097b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097b8:	4b13      	ldr	r3, [pc, #76]	; (8009808 <HAL_RCC_MCOConfig+0xc8>)
 80097ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097be:	f003 0304 	and.w	r3, r3, #4
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80097c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097cc:	2302      	movs	r3, #2
 80097ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097d0:	2303      	movs	r3, #3
 80097d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80097d8:	2300      	movs	r3, #0
 80097da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80097dc:	f107 031c 	add.w	r3, r7, #28
 80097e0:	4619      	mov	r1, r3
 80097e2:	480b      	ldr	r0, [pc, #44]	; (8009810 <HAL_RCC_MCOConfig+0xd0>)
 80097e4:	f7fd fc16 	bl	8007014 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80097e8:	4b07      	ldr	r3, [pc, #28]	; (8009808 <HAL_RCC_MCOConfig+0xc8>)
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	01d9      	lsls	r1, r3, #7
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	430b      	orrs	r3, r1
 80097f8:	4903      	ldr	r1, [pc, #12]	; (8009808 <HAL_RCC_MCOConfig+0xc8>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	610b      	str	r3, [r1, #16]
}
 80097fe:	bf00      	nop
 8009800:	3730      	adds	r7, #48	; 0x30
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	58024400 	.word	0x58024400
 800980c:	58020000 	.word	0x58020000
 8009810:	58020800 	.word	0x58020800

08009814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009814:	b480      	push	{r7}
 8009816:	b089      	sub	sp, #36	; 0x24
 8009818:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800981a:	4bb3      	ldr	r3, [pc, #716]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009822:	2b18      	cmp	r3, #24
 8009824:	f200 8155 	bhi.w	8009ad2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009828:	a201      	add	r2, pc, #4	; (adr r2, 8009830 <HAL_RCC_GetSysClockFreq+0x1c>)
 800982a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982e:	bf00      	nop
 8009830:	08009895 	.word	0x08009895
 8009834:	08009ad3 	.word	0x08009ad3
 8009838:	08009ad3 	.word	0x08009ad3
 800983c:	08009ad3 	.word	0x08009ad3
 8009840:	08009ad3 	.word	0x08009ad3
 8009844:	08009ad3 	.word	0x08009ad3
 8009848:	08009ad3 	.word	0x08009ad3
 800984c:	08009ad3 	.word	0x08009ad3
 8009850:	080098bb 	.word	0x080098bb
 8009854:	08009ad3 	.word	0x08009ad3
 8009858:	08009ad3 	.word	0x08009ad3
 800985c:	08009ad3 	.word	0x08009ad3
 8009860:	08009ad3 	.word	0x08009ad3
 8009864:	08009ad3 	.word	0x08009ad3
 8009868:	08009ad3 	.word	0x08009ad3
 800986c:	08009ad3 	.word	0x08009ad3
 8009870:	080098c1 	.word	0x080098c1
 8009874:	08009ad3 	.word	0x08009ad3
 8009878:	08009ad3 	.word	0x08009ad3
 800987c:	08009ad3 	.word	0x08009ad3
 8009880:	08009ad3 	.word	0x08009ad3
 8009884:	08009ad3 	.word	0x08009ad3
 8009888:	08009ad3 	.word	0x08009ad3
 800988c:	08009ad3 	.word	0x08009ad3
 8009890:	080098c7 	.word	0x080098c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009894:	4b94      	ldr	r3, [pc, #592]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0320 	and.w	r3, r3, #32
 800989c:	2b00      	cmp	r3, #0
 800989e:	d009      	beq.n	80098b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098a0:	4b91      	ldr	r3, [pc, #580]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	08db      	lsrs	r3, r3, #3
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	4a90      	ldr	r2, [pc, #576]	; (8009aec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098ac:	fa22 f303 	lsr.w	r3, r2, r3
 80098b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80098b2:	e111      	b.n	8009ad8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80098b4:	4b8d      	ldr	r3, [pc, #564]	; (8009aec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098b6:	61bb      	str	r3, [r7, #24]
      break;
 80098b8:	e10e      	b.n	8009ad8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80098ba:	4b8d      	ldr	r3, [pc, #564]	; (8009af0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80098bc:	61bb      	str	r3, [r7, #24]
      break;
 80098be:	e10b      	b.n	8009ad8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80098c0:	4b8c      	ldr	r3, [pc, #560]	; (8009af4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80098c2:	61bb      	str	r3, [r7, #24]
      break;
 80098c4:	e108      	b.n	8009ad8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098c6:	4b88      	ldr	r3, [pc, #544]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	f003 0303 	and.w	r3, r3, #3
 80098ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80098d0:	4b85      	ldr	r3, [pc, #532]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d4:	091b      	lsrs	r3, r3, #4
 80098d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80098dc:	4b82      	ldr	r3, [pc, #520]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80098e6:	4b80      	ldr	r3, [pc, #512]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ea:	08db      	lsrs	r3, r3, #3
 80098ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	fb02 f303 	mul.w	r3, r2, r3
 80098f6:	ee07 3a90 	vmov	s15, r3
 80098fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 80e1 	beq.w	8009acc <HAL_RCC_GetSysClockFreq+0x2b8>
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b02      	cmp	r3, #2
 800990e:	f000 8083 	beq.w	8009a18 <HAL_RCC_GetSysClockFreq+0x204>
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2b02      	cmp	r3, #2
 8009916:	f200 80a1 	bhi.w	8009a5c <HAL_RCC_GetSysClockFreq+0x248>
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d003      	beq.n	8009928 <HAL_RCC_GetSysClockFreq+0x114>
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d056      	beq.n	80099d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009926:	e099      	b.n	8009a5c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009928:	4b6f      	ldr	r3, [pc, #444]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0320 	and.w	r3, r3, #32
 8009930:	2b00      	cmp	r3, #0
 8009932:	d02d      	beq.n	8009990 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009934:	4b6c      	ldr	r3, [pc, #432]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	08db      	lsrs	r3, r3, #3
 800993a:	f003 0303 	and.w	r3, r3, #3
 800993e:	4a6b      	ldr	r2, [pc, #428]	; (8009aec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009940:	fa22 f303 	lsr.w	r3, r2, r3
 8009944:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	ee07 3a90 	vmov	s15, r3
 800994c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800995e:	4b62      	ldr	r3, [pc, #392]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800996e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009972:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009af8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800997e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800998e:	e087      	b.n	8009aa0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009afc <HAL_RCC_GetSysClockFreq+0x2e8>
 800999e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a2:	4b51      	ldr	r3, [pc, #324]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80099b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009af8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099d2:	e065      	b.n	8009aa0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009b00 <HAL_RCC_GetSysClockFreq+0x2ec>
 80099e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099e6:	4b40      	ldr	r3, [pc, #256]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009af8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a16:	e043      	b.n	8009aa0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a22:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009b04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009af8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a5a:	e021      	b.n	8009aa0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a6e:	4b1e      	ldr	r3, [pc, #120]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a82:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009af8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a9e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009aa0:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa4:	0a5b      	lsrs	r3, r3, #9
 8009aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aaa:	3301      	adds	r3, #1
 8009aac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	ee07 3a90 	vmov	s15, r3
 8009ab4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009ab8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ac4:	ee17 3a90 	vmov	r3, s15
 8009ac8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009aca:	e005      	b.n	8009ad8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009acc:	2300      	movs	r3, #0
 8009ace:	61bb      	str	r3, [r7, #24]
      break;
 8009ad0:	e002      	b.n	8009ad8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009ad2:	4b07      	ldr	r3, [pc, #28]	; (8009af0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ad4:	61bb      	str	r3, [r7, #24]
      break;
 8009ad6:	bf00      	nop
  }

  return sysclockfreq;
 8009ad8:	69bb      	ldr	r3, [r7, #24]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3724      	adds	r7, #36	; 0x24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	58024400 	.word	0x58024400
 8009aec:	03d09000 	.word	0x03d09000
 8009af0:	003d0900 	.word	0x003d0900
 8009af4:	02faf080 	.word	0x02faf080
 8009af8:	46000000 	.word	0x46000000
 8009afc:	4c742400 	.word	0x4c742400
 8009b00:	4a742400 	.word	0x4a742400
 8009b04:	4c3ebc20 	.word	0x4c3ebc20

08009b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b0e:	f7ff fe81 	bl	8009814 <HAL_RCC_GetSysClockFreq>
 8009b12:	4602      	mov	r2, r0
 8009b14:	4b10      	ldr	r3, [pc, #64]	; (8009b58 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	0a1b      	lsrs	r3, r3, #8
 8009b1a:	f003 030f 	and.w	r3, r3, #15
 8009b1e:	490f      	ldr	r1, [pc, #60]	; (8009b5c <HAL_RCC_GetHCLKFreq+0x54>)
 8009b20:	5ccb      	ldrb	r3, [r1, r3]
 8009b22:	f003 031f 	and.w	r3, r3, #31
 8009b26:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b2c:	4b0a      	ldr	r3, [pc, #40]	; (8009b58 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	f003 030f 	and.w	r3, r3, #15
 8009b34:	4a09      	ldr	r2, [pc, #36]	; (8009b5c <HAL_RCC_GetHCLKFreq+0x54>)
 8009b36:	5cd3      	ldrb	r3, [r2, r3]
 8009b38:	f003 031f 	and.w	r3, r3, #31
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b42:	4a07      	ldr	r2, [pc, #28]	; (8009b60 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b46:	4a07      	ldr	r2, [pc, #28]	; (8009b64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009b4c:	4b04      	ldr	r3, [pc, #16]	; (8009b60 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	58024400 	.word	0x58024400
 8009b5c:	0801c990 	.word	0x0801c990
 8009b60:	24000004 	.word	0x24000004
 8009b64:	24000000 	.word	0x24000000

08009b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009b6c:	f7ff ffcc 	bl	8009b08 <HAL_RCC_GetHCLKFreq>
 8009b70:	4602      	mov	r2, r0
 8009b72:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	091b      	lsrs	r3, r3, #4
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	4904      	ldr	r1, [pc, #16]	; (8009b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009b7e:	5ccb      	ldrb	r3, [r1, r3]
 8009b80:	f003 031f 	and.w	r3, r3, #31
 8009b84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	58024400 	.word	0x58024400
 8009b90:	0801c990 	.word	0x0801c990

08009b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009b98:	f7ff ffb6 	bl	8009b08 <HAL_RCC_GetHCLKFreq>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	4b06      	ldr	r3, [pc, #24]	; (8009bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	0a1b      	lsrs	r3, r3, #8
 8009ba4:	f003 0307 	and.w	r3, r3, #7
 8009ba8:	4904      	ldr	r1, [pc, #16]	; (8009bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8009baa:	5ccb      	ldrb	r3, [r1, r3]
 8009bac:	f003 031f 	and.w	r3, r3, #31
 8009bb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	58024400 	.word	0x58024400
 8009bbc:	0801c990 	.word	0x0801c990

08009bc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bc4:	b0c6      	sub	sp, #280	; 0x118
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009be4:	2500      	movs	r5, #0
 8009be6:	ea54 0305 	orrs.w	r3, r4, r5
 8009bea:	d049      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bf6:	d02f      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009bf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009bfc:	d828      	bhi.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c02:	d01a      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009c04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c08:	d822      	bhi.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c12:	d007      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c14:	e01c      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c16:	4bab      	ldr	r3, [pc, #684]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	4aaa      	ldr	r2, [pc, #680]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c22:	e01a      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c28:	3308      	adds	r3, #8
 8009c2a:	2102      	movs	r1, #2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f002 fa49 	bl	800c0c4 <RCCEx_PLL2_Config>
 8009c32:	4603      	mov	r3, r0
 8009c34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c38:	e00f      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3e:	3328      	adds	r3, #40	; 0x28
 8009c40:	2102      	movs	r1, #2
 8009c42:	4618      	mov	r0, r3
 8009c44:	f002 faf0 	bl	800c228 <RCCEx_PLL3_Config>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c4e:	e004      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009c56:	e000      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c62:	4b98      	ldr	r3, [pc, #608]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c70:	4a94      	ldr	r2, [pc, #592]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c72:	430b      	orrs	r3, r1
 8009c74:	6513      	str	r3, [r2, #80]	; 0x50
 8009c76:	e003      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009c8c:	f04f 0900 	mov.w	r9, #0
 8009c90:	ea58 0309 	orrs.w	r3, r8, r9
 8009c94:	d047      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c9c:	2b04      	cmp	r3, #4
 8009c9e:	d82a      	bhi.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009ca0:	a201      	add	r2, pc, #4	; (adr r2, 8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca6:	bf00      	nop
 8009ca8:	08009cbd 	.word	0x08009cbd
 8009cac:	08009ccb 	.word	0x08009ccb
 8009cb0:	08009ce1 	.word	0x08009ce1
 8009cb4:	08009cff 	.word	0x08009cff
 8009cb8:	08009cff 	.word	0x08009cff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cbc:	4b81      	ldr	r3, [pc, #516]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	4a80      	ldr	r2, [pc, #512]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cc8:	e01a      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cce:	3308      	adds	r3, #8
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f002 f9f6 	bl	800c0c4 <RCCEx_PLL2_Config>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cde:	e00f      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce4:	3328      	adds	r3, #40	; 0x28
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f002 fa9d 	bl	800c228 <RCCEx_PLL3_Config>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cf4:	e004      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009cfc:	e000      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d08:	4b6e      	ldr	r3, [pc, #440]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d0c:	f023 0107 	bic.w	r1, r3, #7
 8009d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d16:	4a6b      	ldr	r2, [pc, #428]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	6513      	str	r3, [r2, #80]	; 0x50
 8009d1c:	e003      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d22:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8009d32:	f04f 0b00 	mov.w	fp, #0
 8009d36:	ea5a 030b 	orrs.w	r3, sl, fp
 8009d3a:	d05b      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d44:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d48:	d03b      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009d4a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d4e:	d834      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d54:	d037      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d5a:	d82e      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d60:	d033      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009d62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d66:	d828      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d6c:	d01a      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d72:	d822      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d003      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d7c:	d007      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009d7e:	e01c      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d80:	4b50      	ldr	r3, [pc, #320]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d84:	4a4f      	ldr	r2, [pc, #316]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d8c:	e01e      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d92:	3308      	adds	r3, #8
 8009d94:	2100      	movs	r1, #0
 8009d96:	4618      	mov	r0, r3
 8009d98:	f002 f994 	bl	800c0c4 <RCCEx_PLL2_Config>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009da2:	e013      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da8:	3328      	adds	r3, #40	; 0x28
 8009daa:	2100      	movs	r1, #0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f002 fa3b 	bl	800c228 <RCCEx_PLL3_Config>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009db8:	e008      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009dc0:	e004      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009dc2:	bf00      	nop
 8009dc4:	e002      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009dc6:	bf00      	nop
 8009dc8:	e000      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10b      	bne.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009dd4:	4b3b      	ldr	r3, [pc, #236]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009de4:	4a37      	ldr	r2, [pc, #220]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009de6:	430b      	orrs	r3, r1
 8009de8:	6593      	str	r3, [r2, #88]	; 0x58
 8009dea:	e003      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009df0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e04:	2300      	movs	r3, #0
 8009e06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4313      	orrs	r3, r2
 8009e12:	d05d      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e1c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e20:	d03b      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009e22:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e26:	d834      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e2c:	d037      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e32:	d82e      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e38:	d033      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009e3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e3e:	d828      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e44:	d01a      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e4a:	d822      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e54:	d007      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009e56:	e01c      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e58:	4b1a      	ldr	r3, [pc, #104]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	4a19      	ldr	r2, [pc, #100]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e64:	e01e      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f002 f928 	bl	800c0c4 <RCCEx_PLL2_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e7a:	e013      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e80:	3328      	adds	r3, #40	; 0x28
 8009e82:	2100      	movs	r1, #0
 8009e84:	4618      	mov	r0, r3
 8009e86:	f002 f9cf 	bl	800c228 <RCCEx_PLL3_Config>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e90:	e008      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009e98:	e004      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009e9a:	bf00      	nop
 8009e9c:	e002      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009e9e:	bf00      	nop
 8009ea0:	e000      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ea4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d10d      	bne.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009eac:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ebc:	4a01      	ldr	r2, [pc, #4]	; (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ebe:	430b      	orrs	r3, r1
 8009ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8009ec2:	e005      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009ec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ecc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009edc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ee6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4313      	orrs	r3, r2
 8009eee:	d03a      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ef6:	2b30      	cmp	r3, #48	; 0x30
 8009ef8:	d01f      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009efa:	2b30      	cmp	r3, #48	; 0x30
 8009efc:	d819      	bhi.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009efe:	2b20      	cmp	r3, #32
 8009f00:	d00c      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009f02:	2b20      	cmp	r3, #32
 8009f04:	d815      	bhi.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d019      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009f0a:	2b10      	cmp	r3, #16
 8009f0c:	d111      	bne.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f0e:	4baa      	ldr	r3, [pc, #680]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f12:	4aa9      	ldr	r2, [pc, #676]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009f1a:	e011      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f20:	3308      	adds	r3, #8
 8009f22:	2102      	movs	r1, #2
 8009f24:	4618      	mov	r0, r3
 8009f26:	f002 f8cd 	bl	800c0c4 <RCCEx_PLL2_Config>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009f30:	e006      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f38:	e002      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009f3a:	bf00      	nop
 8009f3c:	e000      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10a      	bne.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009f48:	4b9b      	ldr	r3, [pc, #620]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f4c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f56:	4a98      	ldr	r2, [pc, #608]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f58:	430b      	orrs	r3, r1
 8009f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f5c:	e003      	b.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f62:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009f72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f76:	2300      	movs	r3, #0
 8009f78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009f80:	460b      	mov	r3, r1
 8009f82:	4313      	orrs	r3, r2
 8009f84:	d051      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f90:	d035      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f96:	d82e      	bhi.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009f98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f9c:	d031      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009f9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fa2:	d828      	bhi.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fa8:	d01a      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fae:	d822      	bhi.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d003      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb8:	d007      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009fba:	e01c      	b.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fbc:	4b7e      	ldr	r3, [pc, #504]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc0:	4a7d      	ldr	r2, [pc, #500]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009fc8:	e01c      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fce:	3308      	adds	r3, #8
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f002 f876 	bl	800c0c4 <RCCEx_PLL2_Config>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009fde:	e011      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe4:	3328      	adds	r3, #40	; 0x28
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f002 f91d 	bl	800c228 <RCCEx_PLL3_Config>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ff4:	e006      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009ffc:	e002      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009ffe:	bf00      	nop
 800a000:	e000      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a002:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a004:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a00c:	4b6a      	ldr	r3, [pc, #424]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a00e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a010:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a01a:	4a67      	ldr	r2, [pc, #412]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a01c:	430b      	orrs	r3, r1
 800a01e:	6513      	str	r3, [r2, #80]	; 0x50
 800a020:	e003      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a022:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a026:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a036:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a03a:	2300      	movs	r3, #0
 800a03c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a040:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a044:	460b      	mov	r3, r1
 800a046:	4313      	orrs	r3, r2
 800a048:	d053      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a04a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a054:	d033      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a056:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a05a:	d82c      	bhi.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a05c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a060:	d02f      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a062:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a066:	d826      	bhi.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a068:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a06c:	d02b      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a06e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a072:	d820      	bhi.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a078:	d012      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a07a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a07e:	d81a      	bhi.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a080:	2b00      	cmp	r3, #0
 800a082:	d022      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a088:	d115      	bne.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a08e:	3308      	adds	r3, #8
 800a090:	2101      	movs	r1, #1
 800a092:	4618      	mov	r0, r3
 800a094:	f002 f816 	bl	800c0c4 <RCCEx_PLL2_Config>
 800a098:	4603      	mov	r3, r0
 800a09a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a09e:	e015      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a4:	3328      	adds	r3, #40	; 0x28
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f002 f8bd 	bl	800c228 <RCCEx_PLL3_Config>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a0b4:	e00a      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a0bc:	e006      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a0be:	bf00      	nop
 800a0c0:	e004      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a0c2:	bf00      	nop
 800a0c4:	e002      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a0c6:	bf00      	nop
 800a0c8:	e000      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a0ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10a      	bne.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a0d4:	4b38      	ldr	r3, [pc, #224]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0e2:	4a35      	ldr	r2, [pc, #212]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0e4:	430b      	orrs	r3, r1
 800a0e6:	6513      	str	r3, [r2, #80]	; 0x50
 800a0e8:	e003      	b.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a0fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a102:	2300      	movs	r3, #0
 800a104:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a108:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a10c:	460b      	mov	r3, r1
 800a10e:	4313      	orrs	r3, r2
 800a110:	d058      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a116:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a11a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a11e:	d033      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a124:	d82c      	bhi.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a12a:	d02f      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a12c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a130:	d826      	bhi.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a132:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a136:	d02b      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a138:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a13c:	d820      	bhi.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a13e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a142:	d012      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a148:	d81a      	bhi.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d022      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a14e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a152:	d115      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a158:	3308      	adds	r3, #8
 800a15a:	2101      	movs	r1, #1
 800a15c:	4618      	mov	r0, r3
 800a15e:	f001 ffb1 	bl	800c0c4 <RCCEx_PLL2_Config>
 800a162:	4603      	mov	r3, r0
 800a164:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a168:	e015      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a16e:	3328      	adds	r3, #40	; 0x28
 800a170:	2101      	movs	r1, #1
 800a172:	4618      	mov	r0, r3
 800a174:	f002 f858 	bl	800c228 <RCCEx_PLL3_Config>
 800a178:	4603      	mov	r3, r0
 800a17a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a17e:	e00a      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a186:	e006      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a188:	bf00      	nop
 800a18a:	e004      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a18c:	bf00      	nop
 800a18e:	e002      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a190:	bf00      	nop
 800a192:	e000      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a194:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a196:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d10e      	bne.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a19e:	4b06      	ldr	r3, [pc, #24]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1ae:	4a02      	ldr	r2, [pc, #8]	; (800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1b0:	430b      	orrs	r3, r1
 800a1b2:	6593      	str	r3, [r2, #88]	; 0x58
 800a1b4:	e006      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a1b6:	bf00      	nop
 800a1b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a1d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a1da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	d037      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ee:	d00e      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a1f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1f4:	d816      	bhi.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d018      	beq.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a1fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1fe:	d111      	bne.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a200:	4bc4      	ldr	r3, [pc, #784]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	4ac3      	ldr	r2, [pc, #780]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a20a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a20c:	e00f      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a212:	3308      	adds	r3, #8
 800a214:	2101      	movs	r1, #1
 800a216:	4618      	mov	r0, r3
 800a218:	f001 ff54 	bl	800c0c4 <RCCEx_PLL2_Config>
 800a21c:	4603      	mov	r3, r0
 800a21e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a222:	e004      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a22a:	e000      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a22c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a22e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10a      	bne.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a236:	4bb7      	ldr	r3, [pc, #732]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a23a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a244:	4ab3      	ldr	r2, [pc, #716]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a246:	430b      	orrs	r3, r1
 800a248:	6513      	str	r3, [r2, #80]	; 0x50
 800a24a:	e003      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a24c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a250:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a264:	2300      	movs	r3, #0
 800a266:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a26a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a26e:	460b      	mov	r3, r1
 800a270:	4313      	orrs	r3, r2
 800a272:	d039      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d81c      	bhi.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a27e:	a201      	add	r2, pc, #4	; (adr r2, 800a284 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a284:	0800a2c1 	.word	0x0800a2c1
 800a288:	0800a295 	.word	0x0800a295
 800a28c:	0800a2a3 	.word	0x0800a2a3
 800a290:	0800a2c1 	.word	0x0800a2c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a294:	4b9f      	ldr	r3, [pc, #636]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	4a9e      	ldr	r2, [pc, #632]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a29a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a29e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a2a0:	e00f      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	2102      	movs	r1, #2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f001 ff0a 	bl	800c0c4 <RCCEx_PLL2_Config>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a2b6:	e004      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a2be:	e000      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a2c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10a      	bne.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a2ca:	4b92      	ldr	r3, [pc, #584]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ce:	f023 0103 	bic.w	r1, r3, #3
 800a2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2d8:	4a8e      	ldr	r2, [pc, #568]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2de:	e003      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a2f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a302:	460b      	mov	r3, r1
 800a304:	4313      	orrs	r3, r2
 800a306:	f000 8099 	beq.w	800a43c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a30a:	4b83      	ldr	r3, [pc, #524]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a82      	ldr	r2, [pc, #520]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a314:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a316:	f7f8 fd47 	bl	8002da8 <HAL_GetTick>
 800a31a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a31e:	e00b      	b.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a320:	f7f8 fd42 	bl	8002da8 <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	2b64      	cmp	r3, #100	; 0x64
 800a32e:	d903      	bls.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a336:	e005      	b.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a338:	4b77      	ldr	r3, [pc, #476]	; (800a518 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a340:	2b00      	cmp	r3, #0
 800a342:	d0ed      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a344:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d173      	bne.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a34c:	4b71      	ldr	r3, [pc, #452]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a34e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a354:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a358:	4053      	eors	r3, r2
 800a35a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d015      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a362:	4b6c      	ldr	r3, [pc, #432]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a36a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a36e:	4b69      	ldr	r3, [pc, #420]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a372:	4a68      	ldr	r2, [pc, #416]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a378:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a37a:	4b66      	ldr	r3, [pc, #408]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37e:	4a65      	ldr	r2, [pc, #404]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a384:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a386:	4a63      	ldr	r2, [pc, #396]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a38c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a392:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39a:	d118      	bne.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39c:	f7f8 fd04 	bl	8002da8 <HAL_GetTick>
 800a3a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3a4:	e00d      	b.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3a6:	f7f8 fcff 	bl	8002da8 <HAL_GetTick>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a3b0:	1ad2      	subs	r2, r2, r3
 800a3b2:	f241 3388 	movw	r3, #5000	; 0x1388
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d903      	bls.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800a3c0:	e005      	b.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3c2:	4b54      	ldr	r3, [pc, #336]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c6:	f003 0302 	and.w	r3, r3, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0eb      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a3ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d129      	bne.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3e6:	d10e      	bne.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a3e8:	4b4a      	ldr	r3, [pc, #296]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3f8:	091a      	lsrs	r2, r3, #4
 800a3fa:	4b48      	ldr	r3, [pc, #288]	; (800a51c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	4a45      	ldr	r2, [pc, #276]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a400:	430b      	orrs	r3, r1
 800a402:	6113      	str	r3, [r2, #16]
 800a404:	e005      	b.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a406:	4b43      	ldr	r3, [pc, #268]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	4a42      	ldr	r2, [pc, #264]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a40c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a410:	6113      	str	r3, [r2, #16]
 800a412:	4b40      	ldr	r3, [pc, #256]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a414:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a41e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a422:	4a3c      	ldr	r2, [pc, #240]	; (800a514 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a424:	430b      	orrs	r3, r1
 800a426:	6713      	str	r3, [r2, #112]	; 0x70
 800a428:	e008      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a42a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a42e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a432:	e003      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a434:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a438:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a444:	f002 0301 	and.w	r3, r2, #1
 800a448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a44c:	2300      	movs	r3, #0
 800a44e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a452:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a456:	460b      	mov	r3, r1
 800a458:	4313      	orrs	r3, r2
 800a45a:	f000 808f 	beq.w	800a57c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a464:	2b28      	cmp	r3, #40	; 0x28
 800a466:	d871      	bhi.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a468:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46e:	bf00      	nop
 800a470:	0800a555 	.word	0x0800a555
 800a474:	0800a54d 	.word	0x0800a54d
 800a478:	0800a54d 	.word	0x0800a54d
 800a47c:	0800a54d 	.word	0x0800a54d
 800a480:	0800a54d 	.word	0x0800a54d
 800a484:	0800a54d 	.word	0x0800a54d
 800a488:	0800a54d 	.word	0x0800a54d
 800a48c:	0800a54d 	.word	0x0800a54d
 800a490:	0800a521 	.word	0x0800a521
 800a494:	0800a54d 	.word	0x0800a54d
 800a498:	0800a54d 	.word	0x0800a54d
 800a49c:	0800a54d 	.word	0x0800a54d
 800a4a0:	0800a54d 	.word	0x0800a54d
 800a4a4:	0800a54d 	.word	0x0800a54d
 800a4a8:	0800a54d 	.word	0x0800a54d
 800a4ac:	0800a54d 	.word	0x0800a54d
 800a4b0:	0800a537 	.word	0x0800a537
 800a4b4:	0800a54d 	.word	0x0800a54d
 800a4b8:	0800a54d 	.word	0x0800a54d
 800a4bc:	0800a54d 	.word	0x0800a54d
 800a4c0:	0800a54d 	.word	0x0800a54d
 800a4c4:	0800a54d 	.word	0x0800a54d
 800a4c8:	0800a54d 	.word	0x0800a54d
 800a4cc:	0800a54d 	.word	0x0800a54d
 800a4d0:	0800a555 	.word	0x0800a555
 800a4d4:	0800a54d 	.word	0x0800a54d
 800a4d8:	0800a54d 	.word	0x0800a54d
 800a4dc:	0800a54d 	.word	0x0800a54d
 800a4e0:	0800a54d 	.word	0x0800a54d
 800a4e4:	0800a54d 	.word	0x0800a54d
 800a4e8:	0800a54d 	.word	0x0800a54d
 800a4ec:	0800a54d 	.word	0x0800a54d
 800a4f0:	0800a555 	.word	0x0800a555
 800a4f4:	0800a54d 	.word	0x0800a54d
 800a4f8:	0800a54d 	.word	0x0800a54d
 800a4fc:	0800a54d 	.word	0x0800a54d
 800a500:	0800a54d 	.word	0x0800a54d
 800a504:	0800a54d 	.word	0x0800a54d
 800a508:	0800a54d 	.word	0x0800a54d
 800a50c:	0800a54d 	.word	0x0800a54d
 800a510:	0800a555 	.word	0x0800a555
 800a514:	58024400 	.word	0x58024400
 800a518:	58024800 	.word	0x58024800
 800a51c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a524:	3308      	adds	r3, #8
 800a526:	2101      	movs	r1, #1
 800a528:	4618      	mov	r0, r3
 800a52a:	f001 fdcb 	bl	800c0c4 <RCCEx_PLL2_Config>
 800a52e:	4603      	mov	r3, r0
 800a530:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a534:	e00f      	b.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a53a:	3328      	adds	r3, #40	; 0x28
 800a53c:	2101      	movs	r1, #1
 800a53e:	4618      	mov	r0, r3
 800a540:	f001 fe72 	bl	800c228 <RCCEx_PLL3_Config>
 800a544:	4603      	mov	r3, r0
 800a546:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a54a:	e004      	b.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a552:	e000      	b.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a554:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a556:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10a      	bne.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a55e:	4bbf      	ldr	r3, [pc, #764]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a562:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a56a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a56c:	4abb      	ldr	r2, [pc, #748]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a56e:	430b      	orrs	r3, r1
 800a570:	6553      	str	r3, [r2, #84]	; 0x54
 800a572:	e003      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a574:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a578:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f002 0302 	and.w	r3, r2, #2
 800a588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a58c:	2300      	movs	r3, #0
 800a58e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a592:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a596:	460b      	mov	r3, r1
 800a598:	4313      	orrs	r3, r2
 800a59a:	d041      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5a2:	2b05      	cmp	r3, #5
 800a5a4:	d824      	bhi.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a5a6:	a201      	add	r2, pc, #4	; (adr r2, 800a5ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ac:	0800a5f9 	.word	0x0800a5f9
 800a5b0:	0800a5c5 	.word	0x0800a5c5
 800a5b4:	0800a5db 	.word	0x0800a5db
 800a5b8:	0800a5f9 	.word	0x0800a5f9
 800a5bc:	0800a5f9 	.word	0x0800a5f9
 800a5c0:	0800a5f9 	.word	0x0800a5f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c8:	3308      	adds	r3, #8
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f001 fd79 	bl	800c0c4 <RCCEx_PLL2_Config>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a5d8:	e00f      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5de:	3328      	adds	r3, #40	; 0x28
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f001 fe20 	bl	800c228 <RCCEx_PLL3_Config>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a5ee:	e004      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a5f6:	e000      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a5f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a602:	4b96      	ldr	r3, [pc, #600]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a606:	f023 0107 	bic.w	r1, r3, #7
 800a60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a60e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a610:	4a92      	ldr	r2, [pc, #584]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a612:	430b      	orrs	r3, r1
 800a614:	6553      	str	r3, [r2, #84]	; 0x54
 800a616:	e003      	b.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a618:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a61c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	f002 0304 	and.w	r3, r2, #4
 800a62c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a630:	2300      	movs	r3, #0
 800a632:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a636:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a63a:	460b      	mov	r3, r1
 800a63c:	4313      	orrs	r3, r2
 800a63e:	d044      	beq.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a648:	2b05      	cmp	r3, #5
 800a64a:	d825      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a64c:	a201      	add	r2, pc, #4	; (adr r2, 800a654 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a652:	bf00      	nop
 800a654:	0800a6a1 	.word	0x0800a6a1
 800a658:	0800a66d 	.word	0x0800a66d
 800a65c:	0800a683 	.word	0x0800a683
 800a660:	0800a6a1 	.word	0x0800a6a1
 800a664:	0800a6a1 	.word	0x0800a6a1
 800a668:	0800a6a1 	.word	0x0800a6a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a670:	3308      	adds	r3, #8
 800a672:	2101      	movs	r1, #1
 800a674:	4618      	mov	r0, r3
 800a676:	f001 fd25 	bl	800c0c4 <RCCEx_PLL2_Config>
 800a67a:	4603      	mov	r3, r0
 800a67c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a680:	e00f      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a686:	3328      	adds	r3, #40	; 0x28
 800a688:	2101      	movs	r1, #1
 800a68a:	4618      	mov	r0, r3
 800a68c:	f001 fdcc 	bl	800c228 <RCCEx_PLL3_Config>
 800a690:	4603      	mov	r3, r0
 800a692:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a696:	e004      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a69e:	e000      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a6a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10b      	bne.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6aa:	4b6c      	ldr	r3, [pc, #432]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ae:	f023 0107 	bic.w	r1, r3, #7
 800a6b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6ba:	4a68      	ldr	r2, [pc, #416]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6bc:	430b      	orrs	r3, r1
 800a6be:	6593      	str	r3, [r2, #88]	; 0x58
 800a6c0:	e003      	b.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d2:	f002 0320 	and.w	r3, r2, #32
 800a6d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a6e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	d055      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6f6:	d033      	beq.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a6f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6fc:	d82c      	bhi.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a6fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a702:	d02f      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a708:	d826      	bhi.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a70a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a70e:	d02b      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a710:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a714:	d820      	bhi.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a71a:	d012      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a71c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a720:	d81a      	bhi.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a722:	2b00      	cmp	r3, #0
 800a724:	d022      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a72a:	d115      	bne.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a730:	3308      	adds	r3, #8
 800a732:	2100      	movs	r1, #0
 800a734:	4618      	mov	r0, r3
 800a736:	f001 fcc5 	bl	800c0c4 <RCCEx_PLL2_Config>
 800a73a:	4603      	mov	r3, r0
 800a73c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a740:	e015      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a746:	3328      	adds	r3, #40	; 0x28
 800a748:	2102      	movs	r1, #2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f001 fd6c 	bl	800c228 <RCCEx_PLL3_Config>
 800a750:	4603      	mov	r3, r0
 800a752:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a756:	e00a      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a75e:	e006      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a760:	bf00      	nop
 800a762:	e004      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a764:	bf00      	nop
 800a766:	e002      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a768:	bf00      	nop
 800a76a:	e000      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a76c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a76e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10b      	bne.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a776:	4b39      	ldr	r3, [pc, #228]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a77a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a786:	4a35      	ldr	r2, [pc, #212]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a788:	430b      	orrs	r3, r1
 800a78a:	6553      	str	r3, [r2, #84]	; 0x54
 800a78c:	e003      	b.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a78e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a792:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a7a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a7ac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	d058      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a7c2:	d033      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a7c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a7c8:	d82c      	bhi.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a7ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ce:	d02f      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a7d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7d4:	d826      	bhi.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a7d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a7da:	d02b      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a7dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a7e0:	d820      	bhi.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a7e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7e6:	d012      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a7e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7ec:	d81a      	bhi.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d022      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a7f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7f6:	d115      	bne.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	2100      	movs	r1, #0
 800a800:	4618      	mov	r0, r3
 800a802:	f001 fc5f 	bl	800c0c4 <RCCEx_PLL2_Config>
 800a806:	4603      	mov	r3, r0
 800a808:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a80c:	e015      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a812:	3328      	adds	r3, #40	; 0x28
 800a814:	2102      	movs	r1, #2
 800a816:	4618      	mov	r0, r3
 800a818:	f001 fd06 	bl	800c228 <RCCEx_PLL3_Config>
 800a81c:	4603      	mov	r3, r0
 800a81e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a822:	e00a      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a82a:	e006      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a82c:	bf00      	nop
 800a82e:	e004      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a830:	bf00      	nop
 800a832:	e002      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a834:	bf00      	nop
 800a836:	e000      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a83a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10e      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a842:	4b06      	ldr	r3, [pc, #24]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a846:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a852:	4a02      	ldr	r2, [pc, #8]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a854:	430b      	orrs	r3, r1
 800a856:	6593      	str	r3, [r2, #88]	; 0x58
 800a858:	e006      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a85a:	bf00      	nop
 800a85c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a860:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a864:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a874:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a878:	2300      	movs	r3, #0
 800a87a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a87e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a882:	460b      	mov	r3, r1
 800a884:	4313      	orrs	r3, r2
 800a886:	d055      	beq.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a890:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a894:	d033      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a896:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a89a:	d82c      	bhi.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a89c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8a0:	d02f      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a8a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8a6:	d826      	bhi.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a8a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a8ac:	d02b      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a8ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a8b2:	d820      	bhi.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a8b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8b8:	d012      	beq.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a8ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8be:	d81a      	bhi.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d022      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a8c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8c8:	d115      	bne.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f001 fbf6 	bl	800c0c4 <RCCEx_PLL2_Config>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a8de:	e015      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e4:	3328      	adds	r3, #40	; 0x28
 800a8e6:	2102      	movs	r1, #2
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f001 fc9d 	bl	800c228 <RCCEx_PLL3_Config>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a8f4:	e00a      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8fc:	e006      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a8fe:	bf00      	nop
 800a900:	e004      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a902:	bf00      	nop
 800a904:	e002      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a906:	bf00      	nop
 800a908:	e000      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a90a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a90c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10b      	bne.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a914:	4ba0      	ldr	r3, [pc, #640]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a918:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a920:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a924:	4a9c      	ldr	r2, [pc, #624]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a926:	430b      	orrs	r3, r1
 800a928:	6593      	str	r3, [r2, #88]	; 0x58
 800a92a:	e003      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a92c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a930:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	f002 0308 	and.w	r3, r2, #8
 800a940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a944:	2300      	movs	r3, #0
 800a946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a94a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a94e:	460b      	mov	r3, r1
 800a950:	4313      	orrs	r3, r2
 800a952:	d01e      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a95c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a960:	d10c      	bne.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a966:	3328      	adds	r3, #40	; 0x28
 800a968:	2102      	movs	r1, #2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f001 fc5c 	bl	800c228 <RCCEx_PLL3_Config>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d002      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a97c:	4b86      	ldr	r3, [pc, #536]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a97e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a980:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a98c:	4a82      	ldr	r2, [pc, #520]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a98e:	430b      	orrs	r3, r1
 800a990:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	f002 0310 	and.w	r3, r2, #16
 800a99e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	d01e      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9be:	d10c      	bne.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c4:	3328      	adds	r3, #40	; 0x28
 800a9c6:	2102      	movs	r1, #2
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f001 fc2d 	bl	800c228 <RCCEx_PLL3_Config>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d002      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a9da:	4b6f      	ldr	r3, [pc, #444]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9ea:	4a6b      	ldr	r2, [pc, #428]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9ec:	430b      	orrs	r3, r1
 800a9ee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a9fc:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9fe:	2300      	movs	r3, #0
 800aa00:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa02:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800aa06:	460b      	mov	r3, r1
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	d03e      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aa0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa18:	d022      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800aa1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa1e:	d81b      	bhi.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d003      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800aa24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa28:	d00b      	beq.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800aa2a:	e015      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa30:	3308      	adds	r3, #8
 800aa32:	2100      	movs	r1, #0
 800aa34:	4618      	mov	r0, r3
 800aa36:	f001 fb45 	bl	800c0c4 <RCCEx_PLL2_Config>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aa40:	e00f      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa46:	3328      	adds	r3, #40	; 0x28
 800aa48:	2102      	movs	r1, #2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f001 fbec 	bl	800c228 <RCCEx_PLL3_Config>
 800aa50:	4603      	mov	r3, r0
 800aa52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aa56:	e004      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa5e:	e000      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800aa60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10b      	bne.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa6a:	4b4b      	ldr	r3, [pc, #300]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa6e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800aa72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa7a:	4a47      	ldr	r2, [pc, #284]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa7c:	430b      	orrs	r3, r1
 800aa7e:	6593      	str	r3, [r2, #88]	; 0x58
 800aa80:	e003      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800aa96:	673b      	str	r3, [r7, #112]	; 0x70
 800aa98:	2300      	movs	r3, #0
 800aa9a:	677b      	str	r3, [r7, #116]	; 0x74
 800aa9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	d03b      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800aaa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aab2:	d01f      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800aab4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aab8:	d818      	bhi.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800aaba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aabe:	d003      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800aac0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aac4:	d007      	beq.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800aac6:	e011      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac8:	4b33      	ldr	r3, [pc, #204]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aacc:	4a32      	ldr	r2, [pc, #200]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aad2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800aad4:	e00f      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aada:	3328      	adds	r3, #40	; 0x28
 800aadc:	2101      	movs	r1, #1
 800aade:	4618      	mov	r0, r3
 800aae0:	f001 fba2 	bl	800c228 <RCCEx_PLL3_Config>
 800aae4:	4603      	mov	r3, r0
 800aae6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800aaea:	e004      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aaf2:	e000      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800aaf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10b      	bne.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aafe:	4b26      	ldr	r3, [pc, #152]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ab06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab0e:	4a22      	ldr	r2, [pc, #136]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab10:	430b      	orrs	r3, r1
 800ab12:	6553      	str	r3, [r2, #84]	; 0x54
 800ab14:	e003      	b.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ab1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ab2a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab30:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ab34:	460b      	mov	r3, r1
 800ab36:	4313      	orrs	r3, r2
 800ab38:	d034      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ab3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d003      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ab44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab48:	d007      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ab4a:	e011      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab4c:	4b12      	ldr	r3, [pc, #72]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab50:	4a11      	ldr	r2, [pc, #68]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ab58:	e00e      	b.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5e:	3308      	adds	r3, #8
 800ab60:	2102      	movs	r1, #2
 800ab62:	4618      	mov	r0, r3
 800ab64:	f001 faae 	bl	800c0c4 <RCCEx_PLL2_Config>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ab6e:	e003      	b.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10d      	bne.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ab80:	4b05      	ldr	r3, [pc, #20]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab8e:	4a02      	ldr	r2, [pc, #8]	; (800ab98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab90:	430b      	orrs	r3, r1
 800ab92:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab94:	e006      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ab96:	bf00      	nop
 800ab98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aba0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800abb0:	663b      	str	r3, [r7, #96]	; 0x60
 800abb2:	2300      	movs	r3, #0
 800abb4:	667b      	str	r3, [r7, #100]	; 0x64
 800abb6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800abba:	460b      	mov	r3, r1
 800abbc:	4313      	orrs	r3, r2
 800abbe:	d00c      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800abc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc4:	3328      	adds	r3, #40	; 0x28
 800abc6:	2102      	movs	r1, #2
 800abc8:	4618      	mov	r0, r3
 800abca:	f001 fb2d 	bl	800c228 <RCCEx_PLL3_Config>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d002      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800abda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800abe6:	65bb      	str	r3, [r7, #88]	; 0x58
 800abe8:	2300      	movs	r3, #0
 800abea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800abf0:	460b      	mov	r3, r1
 800abf2:	4313      	orrs	r3, r2
 800abf4:	d036      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800abf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac00:	d018      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ac02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac06:	d811      	bhi.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ac08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac0c:	d014      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ac0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac12:	d80b      	bhi.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d011      	beq.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ac18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac1c:	d106      	bne.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac1e:	4bb7      	ldr	r3, [pc, #732]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac22:	4ab6      	ldr	r2, [pc, #728]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ac2a:	e008      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac32:	e004      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ac34:	bf00      	nop
 800ac36:	e002      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ac38:	bf00      	nop
 800ac3a:	e000      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ac3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10a      	bne.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ac46:	4bad      	ldr	r3, [pc, #692]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ac4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac54:	4aa9      	ldr	r2, [pc, #676]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac56:	430b      	orrs	r3, r1
 800ac58:	6553      	str	r3, [r2, #84]	; 0x54
 800ac5a:	e003      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ac64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ac70:	653b      	str	r3, [r7, #80]	; 0x50
 800ac72:	2300      	movs	r3, #0
 800ac74:	657b      	str	r3, [r7, #84]	; 0x54
 800ac76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	d009      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ac80:	4b9e      	ldr	r3, [pc, #632]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ac88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac8e:	4a9b      	ldr	r2, [pc, #620]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ac90:	430b      	orrs	r3, r1
 800ac92:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ac94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800aca0:	64bb      	str	r3, [r7, #72]	; 0x48
 800aca2:	2300      	movs	r3, #0
 800aca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aca6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800acaa:	460b      	mov	r3, r1
 800acac:	4313      	orrs	r3, r2
 800acae:	d009      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800acb0:	4b92      	ldr	r3, [pc, #584]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800acb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acbe:	4a8f      	ldr	r2, [pc, #572]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acc0:	430b      	orrs	r3, r1
 800acc2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800acc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800acd0:	643b      	str	r3, [r7, #64]	; 0x40
 800acd2:	2300      	movs	r3, #0
 800acd4:	647b      	str	r3, [r7, #68]	; 0x44
 800acd6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800acda:	460b      	mov	r3, r1
 800acdc:	4313      	orrs	r3, r2
 800acde:	d00e      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ace0:	4b86      	ldr	r3, [pc, #536]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	4a85      	ldr	r2, [pc, #532]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ace6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acea:	6113      	str	r3, [r2, #16]
 800acec:	4b83      	ldr	r3, [pc, #524]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acee:	6919      	ldr	r1, [r3, #16]
 800acf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800acf8:	4a80      	ldr	r2, [pc, #512]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acfa:	430b      	orrs	r3, r1
 800acfc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800acfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ad0a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad10:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ad14:	460b      	mov	r3, r1
 800ad16:	4313      	orrs	r3, r2
 800ad18:	d009      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ad1a:	4b78      	ldr	r3, [pc, #480]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ad22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad28:	4a74      	ldr	r2, [pc, #464]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad2a:	430b      	orrs	r3, r1
 800ad2c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ad2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad36:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ad3a:	633b      	str	r3, [r7, #48]	; 0x30
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad40:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ad44:	460b      	mov	r3, r1
 800ad46:	4313      	orrs	r3, r2
 800ad48:	d00a      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ad4a:	4b6c      	ldr	r3, [pc, #432]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad4e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ad52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad5a:	4a68      	ldr	r2, [pc, #416]	; (800aefc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad5c:	430b      	orrs	r3, r1
 800ad5e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	2100      	movs	r1, #0
 800ad6a:	62b9      	str	r1, [r7, #40]	; 0x28
 800ad6c:	f003 0301 	and.w	r3, r3, #1
 800ad70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad72:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ad76:	460b      	mov	r3, r1
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	d011      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad80:	3308      	adds	r3, #8
 800ad82:	2100      	movs	r1, #0
 800ad84:	4618      	mov	r0, r3
 800ad86:	f001 f99d 	bl	800c0c4 <RCCEx_PLL2_Config>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ad90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d003      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ada0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	2100      	movs	r1, #0
 800adaa:	6239      	str	r1, [r7, #32]
 800adac:	f003 0302 	and.w	r3, r3, #2
 800adb0:	627b      	str	r3, [r7, #36]	; 0x24
 800adb2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800adb6:	460b      	mov	r3, r1
 800adb8:	4313      	orrs	r3, r2
 800adba:	d011      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc0:	3308      	adds	r3, #8
 800adc2:	2101      	movs	r1, #1
 800adc4:	4618      	mov	r0, r3
 800adc6:	f001 f97d 	bl	800c0c4 <RCCEx_PLL2_Config>
 800adca:	4603      	mov	r3, r0
 800adcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800add0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800add4:	2b00      	cmp	r3, #0
 800add6:	d003      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800addc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ade0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	2100      	movs	r1, #0
 800adea:	61b9      	str	r1, [r7, #24]
 800adec:	f003 0304 	and.w	r3, r3, #4
 800adf0:	61fb      	str	r3, [r7, #28]
 800adf2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800adf6:	460b      	mov	r3, r1
 800adf8:	4313      	orrs	r3, r2
 800adfa:	d011      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800adfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae00:	3308      	adds	r3, #8
 800ae02:	2102      	movs	r1, #2
 800ae04:	4618      	mov	r0, r3
 800ae06:	f001 f95d 	bl	800c0c4 <RCCEx_PLL2_Config>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ae10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ae20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae28:	2100      	movs	r1, #0
 800ae2a:	6139      	str	r1, [r7, #16]
 800ae2c:	f003 0308 	and.w	r3, r3, #8
 800ae30:	617b      	str	r3, [r7, #20]
 800ae32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ae36:	460b      	mov	r3, r1
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	d011      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae40:	3328      	adds	r3, #40	; 0x28
 800ae42:	2100      	movs	r1, #0
 800ae44:	4618      	mov	r0, r3
 800ae46:	f001 f9ef 	bl	800c228 <RCCEx_PLL3_Config>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800ae50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d003      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ae60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	2100      	movs	r1, #0
 800ae6a:	60b9      	str	r1, [r7, #8]
 800ae6c:	f003 0310 	and.w	r3, r3, #16
 800ae70:	60fb      	str	r3, [r7, #12]
 800ae72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ae76:	460b      	mov	r3, r1
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	d011      	beq.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae80:	3328      	adds	r3, #40	; 0x28
 800ae82:	2101      	movs	r1, #1
 800ae84:	4618      	mov	r0, r3
 800ae86:	f001 f9cf 	bl	800c228 <RCCEx_PLL3_Config>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ae90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d003      	beq.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	2100      	movs	r1, #0
 800aeaa:	6039      	str	r1, [r7, #0]
 800aeac:	f003 0320 	and.w	r3, r3, #32
 800aeb0:	607b      	str	r3, [r7, #4]
 800aeb2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	d011      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec0:	3328      	adds	r3, #40	; 0x28
 800aec2:	2102      	movs	r1, #2
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 f9af 	bl	800c228 <RCCEx_PLL3_Config>
 800aeca:	4603      	mov	r3, r0
 800aecc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aed0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d003      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aedc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800aee0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d101      	bne.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800aee8:	2300      	movs	r3, #0
 800aeea:	e000      	b.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800aef4:	46bd      	mov	sp, r7
 800aef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aefa:	bf00      	nop
 800aefc:	58024400 	.word	0x58024400

0800af00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b090      	sub	sp, #64	; 0x40
 800af04:	af00      	add	r7, sp, #0
 800af06:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af0e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800af12:	430b      	orrs	r3, r1
 800af14:	f040 8094 	bne.w	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800af18:	4b9b      	ldr	r3, [pc, #620]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af1c:	f003 0307 	and.w	r3, r3, #7
 800af20:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	2b04      	cmp	r3, #4
 800af26:	f200 8087 	bhi.w	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800af2a:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800af2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af30:	0800af45 	.word	0x0800af45
 800af34:	0800af6d 	.word	0x0800af6d
 800af38:	0800af95 	.word	0x0800af95
 800af3c:	0800b031 	.word	0x0800b031
 800af40:	0800afbd 	.word	0x0800afbd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af44:	4b90      	ldr	r3, [pc, #576]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af50:	d108      	bne.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af56:	4618      	mov	r0, r3
 800af58:	f000 ff62 	bl	800be20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af60:	f000 bc93 	b.w	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af68:	f000 bc8f 	b.w	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af6c:	4b86      	ldr	r3, [pc, #536]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af78:	d108      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af7a:	f107 0318 	add.w	r3, r7, #24
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 fca6 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af88:	f000 bc7f 	b.w	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af90:	f000 bc7b 	b.w	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af94:	4b7c      	ldr	r3, [pc, #496]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afa0:	d108      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afa2:	f107 030c 	add.w	r3, r7, #12
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 fde6 	bl	800bb78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afb0:	f000 bc6b 	b.w	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb8:	f000 bc67 	b.w	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afbc:	4b72      	ldr	r3, [pc, #456]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afc4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afc6:	4b70      	ldr	r3, [pc, #448]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 0304 	and.w	r3, r3, #4
 800afce:	2b04      	cmp	r3, #4
 800afd0:	d10c      	bne.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800afd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d109      	bne.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afd8:	4b6b      	ldr	r3, [pc, #428]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	08db      	lsrs	r3, r3, #3
 800afde:	f003 0303 	and.w	r3, r3, #3
 800afe2:	4a6a      	ldr	r2, [pc, #424]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800afe4:	fa22 f303 	lsr.w	r3, r2, r3
 800afe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afea:	e01f      	b.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afec:	4b66      	ldr	r3, [pc, #408]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aff8:	d106      	bne.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800affa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b000:	d102      	bne.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b002:	4b63      	ldr	r3, [pc, #396]	; (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b004:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b006:	e011      	b.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b008:	4b5f      	ldr	r3, [pc, #380]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b014:	d106      	bne.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b01c:	d102      	bne.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b01e:	4b5d      	ldr	r3, [pc, #372]	; (800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b020:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b022:	e003      	b.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b024:	2300      	movs	r3, #0
 800b026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b028:	f000 bc2f 	b.w	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b02c:	f000 bc2d 	b.w	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b030:	4b59      	ldr	r3, [pc, #356]	; (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b034:	f000 bc29 	b.w	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b03c:	f000 bc25 	b.w	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b044:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b048:	430b      	orrs	r3, r1
 800b04a:	f040 80a7 	bne.w	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b04e:	4b4e      	ldr	r3, [pc, #312]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b052:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b056:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b05e:	d054      	beq.n	800b10a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b066:	f200 808b 	bhi.w	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b070:	f000 8083 	beq.w	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b076:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b07a:	f200 8081 	bhi.w	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b084:	d02f      	beq.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b08c:	d878      	bhi.n	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	2b00      	cmp	r3, #0
 800b092:	d004      	beq.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b09a:	d012      	beq.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b09c:	e070      	b.n	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b09e:	4b3a      	ldr	r3, [pc, #232]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0aa:	d107      	bne.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 feb5 	bl	800be20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ba:	e3e6      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c0:	e3e3      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0c2:	4b31      	ldr	r3, [pc, #196]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0ce:	d107      	bne.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0d0:	f107 0318 	add.w	r3, r7, #24
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 fbfb 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0de:	e3d4      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0e4:	e3d1      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0e6:	4b28      	ldr	r3, [pc, #160]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0f2:	d107      	bne.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0f4:	f107 030c 	add.w	r3, r7, #12
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 fd3d 	bl	800bb78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b102:	e3c2      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b108:	e3bf      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b10a:	4b1f      	ldr	r3, [pc, #124]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b10c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b10e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b112:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b114:	4b1c      	ldr	r3, [pc, #112]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d10c      	bne.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b122:	2b00      	cmp	r3, #0
 800b124:	d109      	bne.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b126:	4b18      	ldr	r3, [pc, #96]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	08db      	lsrs	r3, r3, #3
 800b12c:	f003 0303 	and.w	r3, r3, #3
 800b130:	4a16      	ldr	r2, [pc, #88]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b132:	fa22 f303 	lsr.w	r3, r2, r3
 800b136:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b138:	e01e      	b.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b13a:	4b13      	ldr	r3, [pc, #76]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b146:	d106      	bne.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b14e:	d102      	bne.n	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b150:	4b0f      	ldr	r3, [pc, #60]	; (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b152:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b154:	e010      	b.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b156:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b15e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b162:	d106      	bne.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b16a:	d102      	bne.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b16c:	4b09      	ldr	r3, [pc, #36]	; (800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b16e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b170:	e002      	b.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b172:	2300      	movs	r3, #0
 800b174:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b176:	e388      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b178:	e387      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b17a:	4b07      	ldr	r3, [pc, #28]	; (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b17e:	e384      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b184:	e381      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b186:	bf00      	nop
 800b188:	58024400 	.word	0x58024400
 800b18c:	03d09000 	.word	0x03d09000
 800b190:	003d0900 	.word	0x003d0900
 800b194:	02faf080 	.word	0x02faf080
 800b198:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b19c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1a0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b1a4:	430b      	orrs	r3, r1
 800b1a6:	f040 809c 	bne.w	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b1aa:	4b9e      	ldr	r3, [pc, #632]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b1ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b1b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1ba:	d054      	beq.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1c2:	f200 808b 	bhi.w	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b1cc:	f000 8083 	beq.w	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b1d6:	f200 8081 	bhi.w	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1e0:	d02f      	beq.n	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1e8:	d878      	bhi.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d004      	beq.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1f6:	d012      	beq.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b1f8:	e070      	b.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1fa:	4b8a      	ldr	r3, [pc, #552]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b206:	d107      	bne.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 fe07 	bl	800be20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b216:	e338      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b218:	2300      	movs	r3, #0
 800b21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b21c:	e335      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b21e:	4b81      	ldr	r3, [pc, #516]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b22a:	d107      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b22c:	f107 0318 	add.w	r3, r7, #24
 800b230:	4618      	mov	r0, r3
 800b232:	f000 fb4d 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b23a:	e326      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b240:	e323      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b242:	4b78      	ldr	r3, [pc, #480]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b24a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b24e:	d107      	bne.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b250:	f107 030c 	add.w	r3, r7, #12
 800b254:	4618      	mov	r0, r3
 800b256:	f000 fc8f 	bl	800bb78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b25e:	e314      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b260:	2300      	movs	r3, #0
 800b262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b264:	e311      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b266:	4b6f      	ldr	r3, [pc, #444]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b26a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b26e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b270:	4b6c      	ldr	r3, [pc, #432]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d10c      	bne.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d109      	bne.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b282:	4b68      	ldr	r3, [pc, #416]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	08db      	lsrs	r3, r3, #3
 800b288:	f003 0303 	and.w	r3, r3, #3
 800b28c:	4a66      	ldr	r2, [pc, #408]	; (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b28e:	fa22 f303 	lsr.w	r3, r2, r3
 800b292:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b294:	e01e      	b.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b296:	4b63      	ldr	r3, [pc, #396]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b29e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2a2:	d106      	bne.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2aa:	d102      	bne.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2ac:	4b5f      	ldr	r3, [pc, #380]	; (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2b0:	e010      	b.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2b2:	4b5c      	ldr	r3, [pc, #368]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2be:	d106      	bne.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c6:	d102      	bne.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2c8:	4b59      	ldr	r3, [pc, #356]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2cc:	e002      	b.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b2d2:	e2da      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2d4:	e2d9      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2d6:	4b57      	ldr	r3, [pc, #348]	; (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2da:	e2d6      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2e0:	e2d3      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b2e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2e6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b2ea:	430b      	orrs	r3, r1
 800b2ec:	f040 80a7 	bne.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b2f0:	4b4c      	ldr	r3, [pc, #304]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b2f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b300:	d055      	beq.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b308:	f200 8096 	bhi.w	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b312:	f000 8084 	beq.w	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b318:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b31c:	f200 808c 	bhi.w	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b326:	d030      	beq.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b32e:	f200 8083 	bhi.w	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	2b00      	cmp	r3, #0
 800b336:	d004      	beq.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b33e:	d012      	beq.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b340:	e07a      	b.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b342:	4b38      	ldr	r3, [pc, #224]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b34a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b34e:	d107      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b354:	4618      	mov	r0, r3
 800b356:	f000 fd63 	bl	800be20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b35e:	e294      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b364:	e291      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b366:	4b2f      	ldr	r3, [pc, #188]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b36e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b372:	d107      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b374:	f107 0318 	add.w	r3, r7, #24
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 faa9 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b382:	e282      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b388:	e27f      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b38a:	4b26      	ldr	r3, [pc, #152]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b396:	d107      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b398:	f107 030c 	add.w	r3, r7, #12
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 fbeb 	bl	800bb78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3a6:	e270      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ac:	e26d      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3ae:	4b1d      	ldr	r3, [pc, #116]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3b8:	4b1a      	ldr	r3, [pc, #104]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 0304 	and.w	r3, r3, #4
 800b3c0:	2b04      	cmp	r3, #4
 800b3c2:	d10c      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d109      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3ca:	4b16      	ldr	r3, [pc, #88]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	08db      	lsrs	r3, r3, #3
 800b3d0:	f003 0303 	and.w	r3, r3, #3
 800b3d4:	4a14      	ldr	r2, [pc, #80]	; (800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b3d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3dc:	e01e      	b.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3de:	4b11      	ldr	r3, [pc, #68]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ea:	d106      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3f2:	d102      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3f4:	4b0d      	ldr	r3, [pc, #52]	; (800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3f8:	e010      	b.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3fa:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b406:	d106      	bne.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b40e:	d102      	bne.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b410:	4b07      	ldr	r3, [pc, #28]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b412:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b414:	e002      	b.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b41a:	e236      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b41c:	e235      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b41e:	4b05      	ldr	r3, [pc, #20]	; (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b422:	e232      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b424:	58024400 	.word	0x58024400
 800b428:	03d09000 	.word	0x03d09000
 800b42c:	003d0900 	.word	0x003d0900
 800b430:	02faf080 	.word	0x02faf080
 800b434:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b43c:	e225      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b43e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b442:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b446:	430b      	orrs	r3, r1
 800b448:	f040 8085 	bne.w	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b44c:	4b9c      	ldr	r3, [pc, #624]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b450:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b454:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b45c:	d06b      	beq.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b464:	d874      	bhi.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b468:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b46c:	d056      	beq.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b470:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b474:	d86c      	bhi.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b478:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b47c:	d03b      	beq.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b484:	d864      	bhi.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b48c:	d021      	beq.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b494:	d85c      	bhi.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d004      	beq.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4a2:	d004      	beq.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b4a4:	e054      	b.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b4a6:	f7fe fb5f 	bl	8009b68 <HAL_RCC_GetPCLK1Freq>
 800b4aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b4ac:	e1ed      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4ae:	4b84      	ldr	r3, [pc, #528]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4ba:	d107      	bne.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4bc:	f107 0318 	add.w	r3, r7, #24
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 fa05 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ca:	e1de      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4d0:	e1db      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4d2:	4b7b      	ldr	r3, [pc, #492]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4de:	d107      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4e0:	f107 030c 	add.w	r3, r7, #12
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fb47 	bl	800bb78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ee:	e1cc      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4f4:	e1c9      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b4f6:	4b72      	ldr	r3, [pc, #456]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 0304 	and.w	r3, r3, #4
 800b4fe:	2b04      	cmp	r3, #4
 800b500:	d109      	bne.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b502:	4b6f      	ldr	r3, [pc, #444]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	08db      	lsrs	r3, r3, #3
 800b508:	f003 0303 	and.w	r3, r3, #3
 800b50c:	4a6d      	ldr	r2, [pc, #436]	; (800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b50e:	fa22 f303 	lsr.w	r3, r2, r3
 800b512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b514:	e1b9      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b51a:	e1b6      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b51c:	4b68      	ldr	r3, [pc, #416]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b528:	d102      	bne.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b52a:	4b67      	ldr	r3, [pc, #412]	; (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b52e:	e1ac      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b534:	e1a9      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b536:	4b62      	ldr	r3, [pc, #392]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b53e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b542:	d102      	bne.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b544:	4b61      	ldr	r3, [pc, #388]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b548:	e19f      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b54e:	e19c      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b554:	e199      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b55a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b55e:	430b      	orrs	r3, r1
 800b560:	d173      	bne.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b562:	4b57      	ldr	r3, [pc, #348]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b56a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b572:	d02f      	beq.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b57a:	d863      	bhi.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d004      	beq.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b588:	d012      	beq.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b58a:	e05b      	b.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b58c:	4b4c      	ldr	r3, [pc, #304]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b598:	d107      	bne.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b59a:	f107 0318 	add.w	r3, r7, #24
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 f996 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5a8:	e16f      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ae:	e16c      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5b0:	4b43      	ldr	r3, [pc, #268]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5bc:	d107      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5be:	f107 030c 	add.w	r3, r7, #12
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 fad8 	bl	800bb78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5cc:	e15d      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5d2:	e15a      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5d4:	4b3a      	ldr	r3, [pc, #232]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5de:	4b38      	ldr	r3, [pc, #224]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f003 0304 	and.w	r3, r3, #4
 800b5e6:	2b04      	cmp	r3, #4
 800b5e8:	d10c      	bne.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d109      	bne.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5f0:	4b33      	ldr	r3, [pc, #204]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	08db      	lsrs	r3, r3, #3
 800b5f6:	f003 0303 	and.w	r3, r3, #3
 800b5fa:	4a32      	ldr	r2, [pc, #200]	; (800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b600:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b602:	e01e      	b.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b604:	4b2e      	ldr	r3, [pc, #184]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b60c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b610:	d106      	bne.n	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b618:	d102      	bne.n	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b61a:	4b2b      	ldr	r3, [pc, #172]	; (800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b61c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b61e:	e010      	b.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b620:	4b27      	ldr	r3, [pc, #156]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b62c:	d106      	bne.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b634:	d102      	bne.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b636:	4b25      	ldr	r3, [pc, #148]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b63a:	e002      	b.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b63c:	2300      	movs	r3, #0
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b640:	e123      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b642:	e122      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b648:	e11f      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b64a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b64e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b652:	430b      	orrs	r3, r1
 800b654:	d13c      	bne.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b656:	4b1a      	ldr	r3, [pc, #104]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b65a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b65e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b662:	2b00      	cmp	r3, #0
 800b664:	d004      	beq.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b66c:	d012      	beq.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b66e:	e023      	b.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b670:	4b13      	ldr	r3, [pc, #76]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b67c:	d107      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b67e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b682:	4618      	mov	r0, r3
 800b684:	f000 fbcc 	bl	800be20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b68c:	e0fd      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b68e:	2300      	movs	r3, #0
 800b690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b692:	e0fa      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b694:	4b0a      	ldr	r3, [pc, #40]	; (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b69c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6a0:	d107      	bne.n	800b6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6a2:	f107 0318 	add.w	r3, r7, #24
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 f912 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6b0:	e0eb      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6b6:	e0e8      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6bc:	e0e5      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6be:	bf00      	nop
 800b6c0:	58024400 	.word	0x58024400
 800b6c4:	03d09000 	.word	0x03d09000
 800b6c8:	003d0900 	.word	0x003d0900
 800b6cc:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b6d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6d4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b6d8:	430b      	orrs	r3, r1
 800b6da:	f040 8085 	bne.w	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b6de:	4b6d      	ldr	r3, [pc, #436]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b6e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6ee:	d06b      	beq.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6f6:	d874      	bhi.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6fe:	d056      	beq.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b706:	d86c      	bhi.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b70e:	d03b      	beq.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b716:	d864      	bhi.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b71e:	d021      	beq.n	800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b726:	d85c      	bhi.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d004      	beq.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b734:	d004      	beq.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b736:	e054      	b.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b738:	f000 f8b4 	bl	800b8a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b73c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b73e:	e0a4      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b740:	4b54      	ldr	r3, [pc, #336]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b74c:	d107      	bne.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b74e:	f107 0318 	add.w	r3, r7, #24
 800b752:	4618      	mov	r0, r3
 800b754:	f000 f8bc 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b75c:	e095      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b762:	e092      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b764:	4b4b      	ldr	r3, [pc, #300]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b76c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b770:	d107      	bne.n	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b772:	f107 030c 	add.w	r3, r7, #12
 800b776:	4618      	mov	r0, r3
 800b778:	f000 f9fe 	bl	800bb78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b780:	e083      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b786:	e080      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b788:	4b42      	ldr	r3, [pc, #264]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 0304 	and.w	r3, r3, #4
 800b790:	2b04      	cmp	r3, #4
 800b792:	d109      	bne.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b794:	4b3f      	ldr	r3, [pc, #252]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	08db      	lsrs	r3, r3, #3
 800b79a:	f003 0303 	and.w	r3, r3, #3
 800b79e:	4a3e      	ldr	r2, [pc, #248]	; (800b898 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b7a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7a6:	e070      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ac:	e06d      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b7ae:	4b39      	ldr	r3, [pc, #228]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ba:	d102      	bne.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b7bc:	4b37      	ldr	r3, [pc, #220]	; (800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7c0:	e063      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7c6:	e060      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b7c8:	4b32      	ldr	r3, [pc, #200]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7d4:	d102      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b7d6:	4b32      	ldr	r3, [pc, #200]	; (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7da:	e056      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7e0:	e053      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7e6:	e050      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b7e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b7f0:	430b      	orrs	r3, r1
 800b7f2:	d148      	bne.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b7f4:	4b27      	ldr	r3, [pc, #156]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b7fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b804:	d02a      	beq.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b80c:	d838      	bhi.n	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b810:	2b00      	cmp	r3, #0
 800b812:	d004      	beq.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b81a:	d00d      	beq.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b81c:	e030      	b.n	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b81e:	4b1d      	ldr	r3, [pc, #116]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b82a:	d102      	bne.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b82c:	4b1c      	ldr	r3, [pc, #112]	; (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b82e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b830:	e02b      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b836:	e028      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b838:	4b16      	ldr	r3, [pc, #88]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b844:	d107      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 fae8 	bl	800be20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b854:	e019      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b85a:	e016      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b85c:	4b0d      	ldr	r3, [pc, #52]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b868:	d107      	bne.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b86a:	f107 0318 	add.w	r3, r7, #24
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 f82e 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b878:	e007      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b87e:	e004      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b884:	e001      	b.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b886:	2300      	movs	r3, #0
 800b888:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3740      	adds	r7, #64	; 0x40
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	58024400 	.word	0x58024400
 800b898:	03d09000 	.word	0x03d09000
 800b89c:	003d0900 	.word	0x003d0900
 800b8a0:	02faf080 	.word	0x02faf080

0800b8a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b8a8:	f7fe f92e 	bl	8009b08 <HAL_RCC_GetHCLKFreq>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	4b06      	ldr	r3, [pc, #24]	; (800b8c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b8b0:	6a1b      	ldr	r3, [r3, #32]
 800b8b2:	091b      	lsrs	r3, r3, #4
 800b8b4:	f003 0307 	and.w	r3, r3, #7
 800b8b8:	4904      	ldr	r1, [pc, #16]	; (800b8cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b8ba:	5ccb      	ldrb	r3, [r1, r3]
 800b8bc:	f003 031f 	and.w	r3, r3, #31
 800b8c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	58024400 	.word	0x58024400
 800b8cc:	0801c990 	.word	0x0801c990

0800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b089      	sub	sp, #36	; 0x24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8d8:	4ba1      	ldr	r3, [pc, #644]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8dc:	f003 0303 	and.w	r3, r3, #3
 800b8e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b8e2:	4b9f      	ldr	r3, [pc, #636]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e6:	0b1b      	lsrs	r3, r3, #12
 800b8e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b8ee:	4b9c      	ldr	r3, [pc, #624]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f2:	091b      	lsrs	r3, r3, #4
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b8fa:	4b99      	ldr	r3, [pc, #612]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8fe:	08db      	lsrs	r3, r3, #3
 800b900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	fb02 f303 	mul.w	r3, r2, r3
 800b90a:	ee07 3a90 	vmov	s15, r3
 800b90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 8111 	beq.w	800bb40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	2b02      	cmp	r3, #2
 800b922:	f000 8083 	beq.w	800ba2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	2b02      	cmp	r3, #2
 800b92a:	f200 80a1 	bhi.w	800ba70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d003      	beq.n	800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d056      	beq.n	800b9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b93a:	e099      	b.n	800ba70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b93c:	4b88      	ldr	r3, [pc, #544]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 0320 	and.w	r3, r3, #32
 800b944:	2b00      	cmp	r3, #0
 800b946:	d02d      	beq.n	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b948:	4b85      	ldr	r3, [pc, #532]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	08db      	lsrs	r3, r3, #3
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	4a84      	ldr	r2, [pc, #528]	; (800bb64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b954:	fa22 f303 	lsr.w	r3, r2, r3
 800b958:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	ee07 3a90 	vmov	s15, r3
 800b960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	ee07 3a90 	vmov	s15, r3
 800b96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b972:	4b7b      	ldr	r3, [pc, #492]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97a:	ee07 3a90 	vmov	s15, r3
 800b97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b982:	ed97 6a03 	vldr	s12, [r7, #12]
 800b986:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bb68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b99e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b9a2:	e087      	b.n	800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bb6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9b6:	4b6a      	ldr	r3, [pc, #424]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9be:	ee07 3a90 	vmov	s15, r3
 800b9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bb68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9e6:	e065      	b.n	800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bb70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9fa:	4b59      	ldr	r3, [pc, #356]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba02:	ee07 3a90 	vmov	s15, r3
 800ba06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bb68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba2a:	e043      	b.n	800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bb74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ba3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba3e:	4b48      	ldr	r3, [pc, #288]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba46:	ee07 3a90 	vmov	s15, r3
 800ba4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba52:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bb68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba6e:	e021      	b.n	800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	ee07 3a90 	vmov	s15, r3
 800ba76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bb70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba82:	4b37      	ldr	r3, [pc, #220]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba8a:	ee07 3a90 	vmov	s15, r3
 800ba8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba96:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bb68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bab2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bab4:	4b2a      	ldr	r3, [pc, #168]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab8:	0a5b      	lsrs	r3, r3, #9
 800baba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800babe:	ee07 3a90 	vmov	s15, r3
 800bac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bace:	edd7 6a07 	vldr	s13, [r7, #28]
 800bad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bada:	ee17 2a90 	vmov	r2, s15
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bae2:	4b1f      	ldr	r3, [pc, #124]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae6:	0c1b      	lsrs	r3, r3, #16
 800bae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baec:	ee07 3a90 	vmov	s15, r3
 800baf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bafc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb08:	ee17 2a90 	vmov	r2, s15
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bb10:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb14:	0e1b      	lsrs	r3, r3, #24
 800bb16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb1a:	ee07 3a90 	vmov	s15, r3
 800bb1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb36:	ee17 2a90 	vmov	r2, s15
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bb3e:	e008      	b.n	800bb52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	609a      	str	r2, [r3, #8]
}
 800bb52:	bf00      	nop
 800bb54:	3724      	adds	r7, #36	; 0x24
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	58024400 	.word	0x58024400
 800bb64:	03d09000 	.word	0x03d09000
 800bb68:	46000000 	.word	0x46000000
 800bb6c:	4c742400 	.word	0x4c742400
 800bb70:	4a742400 	.word	0x4a742400
 800bb74:	4c3ebc20 	.word	0x4c3ebc20

0800bb78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b089      	sub	sp, #36	; 0x24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb80:	4ba1      	ldr	r3, [pc, #644]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb84:	f003 0303 	and.w	r3, r3, #3
 800bb88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bb8a:	4b9f      	ldr	r3, [pc, #636]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8e:	0d1b      	lsrs	r3, r3, #20
 800bb90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bb96:	4b9c      	ldr	r3, [pc, #624]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9a:	0a1b      	lsrs	r3, r3, #8
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bba2:	4b99      	ldr	r3, [pc, #612]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba6:	08db      	lsrs	r3, r3, #3
 800bba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	fb02 f303 	mul.w	r3, r2, r3
 800bbb2:	ee07 3a90 	vmov	s15, r3
 800bbb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 8111 	beq.w	800bde8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	f000 8083 	beq.w	800bcd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	f200 80a1 	bhi.w	800bd18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d003      	beq.n	800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d056      	beq.n	800bc90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bbe2:	e099      	b.n	800bd18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbe4:	4b88      	ldr	r3, [pc, #544]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 0320 	and.w	r3, r3, #32
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d02d      	beq.n	800bc4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbf0:	4b85      	ldr	r3, [pc, #532]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	08db      	lsrs	r3, r3, #3
 800bbf6:	f003 0303 	and.w	r3, r3, #3
 800bbfa:	4a84      	ldr	r2, [pc, #528]	; (800be0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bbfc:	fa22 f303 	lsr.w	r3, r2, r3
 800bc00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	ee07 3a90 	vmov	s15, r3
 800bc08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	ee07 3a90 	vmov	s15, r3
 800bc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc1a:	4b7b      	ldr	r3, [pc, #492]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc22:	ee07 3a90 	vmov	s15, r3
 800bc26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc4a:	e087      	b.n	800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bc5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc5e:	4b6a      	ldr	r3, [pc, #424]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc66:	ee07 3a90 	vmov	s15, r3
 800bc6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc72:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc8e:	e065      	b.n	800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	ee07 3a90 	vmov	s15, r3
 800bc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bc9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bca2:	4b59      	ldr	r3, [pc, #356]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcaa:	ee07 3a90 	vmov	s15, r3
 800bcae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcd2:	e043      	b.n	800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce6:	4b48      	ldr	r3, [pc, #288]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd16:	e021      	b.n	800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	ee07 3a90 	vmov	s15, r3
 800bd1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd2a:	4b37      	ldr	r3, [pc, #220]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd32:	ee07 3a90 	vmov	s15, r3
 800bd36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bd5c:	4b2a      	ldr	r3, [pc, #168]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd60:	0a5b      	lsrs	r3, r3, #9
 800bd62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd76:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd82:	ee17 2a90 	vmov	r2, s15
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bd8a:	4b1f      	ldr	r3, [pc, #124]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8e:	0c1b      	lsrs	r3, r3, #16
 800bd90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd94:	ee07 3a90 	vmov	s15, r3
 800bd98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bda0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bda4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bda8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdb0:	ee17 2a90 	vmov	r2, s15
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bdb8:	4b13      	ldr	r3, [pc, #76]	; (800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdbc:	0e1b      	lsrs	r3, r3, #24
 800bdbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdc2:	ee07 3a90 	vmov	s15, r3
 800bdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdde:	ee17 2a90 	vmov	r2, s15
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bde6:	e008      	b.n	800bdfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	609a      	str	r2, [r3, #8]
}
 800bdfa:	bf00      	nop
 800bdfc:	3724      	adds	r7, #36	; 0x24
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	58024400 	.word	0x58024400
 800be0c:	03d09000 	.word	0x03d09000
 800be10:	46000000 	.word	0x46000000
 800be14:	4c742400 	.word	0x4c742400
 800be18:	4a742400 	.word	0x4a742400
 800be1c:	4c3ebc20 	.word	0x4c3ebc20

0800be20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800be20:	b480      	push	{r7}
 800be22:	b089      	sub	sp, #36	; 0x24
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be28:	4ba0      	ldr	r3, [pc, #640]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be2c:	f003 0303 	and.w	r3, r3, #3
 800be30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800be32:	4b9e      	ldr	r3, [pc, #632]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be36:	091b      	lsrs	r3, r3, #4
 800be38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800be3e:	4b9b      	ldr	r3, [pc, #620]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be42:	f003 0301 	and.w	r3, r3, #1
 800be46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800be48:	4b98      	ldr	r3, [pc, #608]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be4c:	08db      	lsrs	r3, r3, #3
 800be4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	fb02 f303 	mul.w	r3, r2, r3
 800be58:	ee07 3a90 	vmov	s15, r3
 800be5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 8111 	beq.w	800c08e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	2b02      	cmp	r3, #2
 800be70:	f000 8083 	beq.w	800bf7a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	2b02      	cmp	r3, #2
 800be78:	f200 80a1 	bhi.w	800bfbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d056      	beq.n	800bf36 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800be88:	e099      	b.n	800bfbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be8a:	4b88      	ldr	r3, [pc, #544]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f003 0320 	and.w	r3, r3, #32
 800be92:	2b00      	cmp	r3, #0
 800be94:	d02d      	beq.n	800bef2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be96:	4b85      	ldr	r3, [pc, #532]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	08db      	lsrs	r3, r3, #3
 800be9c:	f003 0303 	and.w	r3, r3, #3
 800bea0:	4a83      	ldr	r2, [pc, #524]	; (800c0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bea2:	fa22 f303 	lsr.w	r3, r2, r3
 800bea6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	ee07 3a90 	vmov	s15, r3
 800beae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	ee07 3a90 	vmov	s15, r3
 800beb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bec0:	4b7a      	ldr	r3, [pc, #488]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec8:	ee07 3a90 	vmov	s15, r3
 800becc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bed0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bed4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bedc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bef0:	e087      	b.n	800c002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	ee07 3a90 	vmov	s15, r3
 800bef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800befc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bf00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf04:	4b69      	ldr	r3, [pc, #420]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf0c:	ee07 3a90 	vmov	s15, r3
 800bf10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf14:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf18:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf34:	e065      	b.n	800c002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	ee07 3a90 	vmov	s15, r3
 800bf3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf40:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c0bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bf44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf48:	4b58      	ldr	r3, [pc, #352]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf50:	ee07 3a90 	vmov	s15, r3
 800bf54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf58:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf5c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf78:	e043      	b.n	800c002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	ee07 3a90 	vmov	s15, r3
 800bf80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bf88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf8c:	4b47      	ldr	r3, [pc, #284]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf94:	ee07 3a90 	vmov	s15, r3
 800bf98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfa0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfbc:	e021      	b.n	800c002 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	ee07 3a90 	vmov	s15, r3
 800bfc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfc8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bfcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfd0:	4b36      	ldr	r3, [pc, #216]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfd8:	ee07 3a90 	vmov	s15, r3
 800bfdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfe4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bffc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c000:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c002:	4b2a      	ldr	r3, [pc, #168]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c006:	0a5b      	lsrs	r3, r3, #9
 800c008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c00c:	ee07 3a90 	vmov	s15, r3
 800c010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c01c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c028:	ee17 2a90 	vmov	r2, s15
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c030:	4b1e      	ldr	r3, [pc, #120]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c034:	0c1b      	lsrs	r3, r3, #16
 800c036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c03a:	ee07 3a90 	vmov	s15, r3
 800c03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c04a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c04e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c056:	ee17 2a90 	vmov	r2, s15
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c05e:	4b13      	ldr	r3, [pc, #76]	; (800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c062:	0e1b      	lsrs	r3, r3, #24
 800c064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c068:	ee07 3a90 	vmov	s15, r3
 800c06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c074:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c078:	edd7 6a07 	vldr	s13, [r7, #28]
 800c07c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c084:	ee17 2a90 	vmov	r2, s15
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c08c:	e008      	b.n	800c0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	609a      	str	r2, [r3, #8]
}
 800c0a0:	bf00      	nop
 800c0a2:	3724      	adds	r7, #36	; 0x24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	58024400 	.word	0x58024400
 800c0b0:	03d09000 	.word	0x03d09000
 800c0b4:	46000000 	.word	0x46000000
 800c0b8:	4c742400 	.word	0x4c742400
 800c0bc:	4a742400 	.word	0x4a742400
 800c0c0:	4c3ebc20 	.word	0x4c3ebc20

0800c0c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c0d2:	4b53      	ldr	r3, [pc, #332]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0d6:	f003 0303 	and.w	r3, r3, #3
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d101      	bne.n	800c0e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	e099      	b.n	800c216 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c0e2:	4b4f      	ldr	r3, [pc, #316]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a4e      	ldr	r2, [pc, #312]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c0e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c0ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0ee:	f7f6 fe5b 	bl	8002da8 <HAL_GetTick>
 800c0f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c0f4:	e008      	b.n	800c108 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c0f6:	f7f6 fe57 	bl	8002da8 <HAL_GetTick>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	1ad3      	subs	r3, r2, r3
 800c100:	2b02      	cmp	r3, #2
 800c102:	d901      	bls.n	800c108 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c104:	2303      	movs	r3, #3
 800c106:	e086      	b.n	800c216 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c108:	4b45      	ldr	r3, [pc, #276]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c110:	2b00      	cmp	r3, #0
 800c112:	d1f0      	bne.n	800c0f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c114:	4b42      	ldr	r3, [pc, #264]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c118:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	031b      	lsls	r3, r3, #12
 800c122:	493f      	ldr	r1, [pc, #252]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c124:	4313      	orrs	r3, r2
 800c126:	628b      	str	r3, [r1, #40]	; 0x28
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	3b01      	subs	r3, #1
 800c138:	025b      	lsls	r3, r3, #9
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	431a      	orrs	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	3b01      	subs	r3, #1
 800c144:	041b      	lsls	r3, r3, #16
 800c146:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c14a:	431a      	orrs	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	3b01      	subs	r3, #1
 800c152:	061b      	lsls	r3, r3, #24
 800c154:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c158:	4931      	ldr	r1, [pc, #196]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c15a:	4313      	orrs	r3, r2
 800c15c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c15e:	4b30      	ldr	r3, [pc, #192]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c162:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	492d      	ldr	r1, [pc, #180]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c16c:	4313      	orrs	r3, r2
 800c16e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c170:	4b2b      	ldr	r3, [pc, #172]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c174:	f023 0220 	bic.w	r2, r3, #32
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	4928      	ldr	r1, [pc, #160]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c17e:	4313      	orrs	r3, r2
 800c180:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c182:	4b27      	ldr	r3, [pc, #156]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c186:	4a26      	ldr	r2, [pc, #152]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c188:	f023 0310 	bic.w	r3, r3, #16
 800c18c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c18e:	4b24      	ldr	r3, [pc, #144]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c192:	4b24      	ldr	r3, [pc, #144]	; (800c224 <RCCEx_PLL2_Config+0x160>)
 800c194:	4013      	ands	r3, r2
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	69d2      	ldr	r2, [r2, #28]
 800c19a:	00d2      	lsls	r2, r2, #3
 800c19c:	4920      	ldr	r1, [pc, #128]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c1a2:	4b1f      	ldr	r3, [pc, #124]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a6:	4a1e      	ldr	r2, [pc, #120]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c1a8:	f043 0310 	orr.w	r3, r3, #16
 800c1ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d106      	bne.n	800c1c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c1b4:	4b1a      	ldr	r3, [pc, #104]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b8:	4a19      	ldr	r2, [pc, #100]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c1ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1c0:	e00f      	b.n	800c1e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d106      	bne.n	800c1d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c1c8:	4b15      	ldr	r3, [pc, #84]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1cc:	4a14      	ldr	r2, [pc, #80]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c1ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1d4:	e005      	b.n	800c1e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c1d6:	4b12      	ldr	r3, [pc, #72]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1da:	4a11      	ldr	r2, [pc, #68]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c1dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c1e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c1e2:	4b0f      	ldr	r3, [pc, #60]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a0e      	ldr	r2, [pc, #56]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c1e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c1ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1ee:	f7f6 fddb 	bl	8002da8 <HAL_GetTick>
 800c1f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1f4:	e008      	b.n	800c208 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c1f6:	f7f6 fdd7 	bl	8002da8 <HAL_GetTick>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	2b02      	cmp	r3, #2
 800c202:	d901      	bls.n	800c208 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c204:	2303      	movs	r3, #3
 800c206:	e006      	b.n	800c216 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c208:	4b05      	ldr	r3, [pc, #20]	; (800c220 <RCCEx_PLL2_Config+0x15c>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c210:	2b00      	cmp	r3, #0
 800c212:	d0f0      	beq.n	800c1f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c214:	7bfb      	ldrb	r3, [r7, #15]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	58024400 	.word	0x58024400
 800c224:	ffff0007 	.word	0xffff0007

0800c228 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c236:	4b53      	ldr	r3, [pc, #332]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c23a:	f003 0303 	and.w	r3, r3, #3
 800c23e:	2b03      	cmp	r3, #3
 800c240:	d101      	bne.n	800c246 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	e099      	b.n	800c37a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c246:	4b4f      	ldr	r3, [pc, #316]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a4e      	ldr	r2, [pc, #312]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c24c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c252:	f7f6 fda9 	bl	8002da8 <HAL_GetTick>
 800c256:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c258:	e008      	b.n	800c26c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c25a:	f7f6 fda5 	bl	8002da8 <HAL_GetTick>
 800c25e:	4602      	mov	r2, r0
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	2b02      	cmp	r3, #2
 800c266:	d901      	bls.n	800c26c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c268:	2303      	movs	r3, #3
 800c26a:	e086      	b.n	800c37a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c26c:	4b45      	ldr	r3, [pc, #276]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1f0      	bne.n	800c25a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c278:	4b42      	ldr	r3, [pc, #264]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c27c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	051b      	lsls	r3, r3, #20
 800c286:	493f      	ldr	r1, [pc, #252]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c288:	4313      	orrs	r3, r2
 800c28a:	628b      	str	r3, [r1, #40]	; 0x28
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	3b01      	subs	r3, #1
 800c292:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	3b01      	subs	r3, #1
 800c29c:	025b      	lsls	r3, r3, #9
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	431a      	orrs	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	041b      	lsls	r3, r3, #16
 800c2aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c2ae:	431a      	orrs	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	061b      	lsls	r3, r3, #24
 800c2b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c2bc:	4931      	ldr	r1, [pc, #196]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c2c2:	4b30      	ldr	r3, [pc, #192]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	695b      	ldr	r3, [r3, #20]
 800c2ce:	492d      	ldr	r1, [pc, #180]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c2d4:	4b2b      	ldr	r3, [pc, #172]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	699b      	ldr	r3, [r3, #24]
 800c2e0:	4928      	ldr	r1, [pc, #160]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c2e6:	4b27      	ldr	r3, [pc, #156]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ea:	4a26      	ldr	r2, [pc, #152]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c2ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c2f2:	4b24      	ldr	r3, [pc, #144]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c2f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2f6:	4b24      	ldr	r3, [pc, #144]	; (800c388 <RCCEx_PLL3_Config+0x160>)
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	69d2      	ldr	r2, [r2, #28]
 800c2fe:	00d2      	lsls	r2, r2, #3
 800c300:	4920      	ldr	r1, [pc, #128]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c302:	4313      	orrs	r3, r2
 800c304:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c306:	4b1f      	ldr	r3, [pc, #124]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30a:	4a1e      	ldr	r2, [pc, #120]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c30c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d106      	bne.n	800c326 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c318:	4b1a      	ldr	r3, [pc, #104]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31c:	4a19      	ldr	r2, [pc, #100]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c31e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c322:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c324:	e00f      	b.n	800c346 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d106      	bne.n	800c33a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c32c:	4b15      	ldr	r3, [pc, #84]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c330:	4a14      	ldr	r2, [pc, #80]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c336:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c338:	e005      	b.n	800c346 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c33a:	4b12      	ldr	r3, [pc, #72]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33e:	4a11      	ldr	r2, [pc, #68]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c344:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c346:	4b0f      	ldr	r3, [pc, #60]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a0e      	ldr	r2, [pc, #56]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c34c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c352:	f7f6 fd29 	bl	8002da8 <HAL_GetTick>
 800c356:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c358:	e008      	b.n	800c36c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c35a:	f7f6 fd25 	bl	8002da8 <HAL_GetTick>
 800c35e:	4602      	mov	r2, r0
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	2b02      	cmp	r3, #2
 800c366:	d901      	bls.n	800c36c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c368:	2303      	movs	r3, #3
 800c36a:	e006      	b.n	800c37a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c36c:	4b05      	ldr	r3, [pc, #20]	; (800c384 <RCCEx_PLL3_Config+0x15c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c374:	2b00      	cmp	r3, #0
 800c376:	d0f0      	beq.n	800c35a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c378:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	58024400 	.word	0x58024400
 800c388:	ffff0007 	.word	0xffff0007

0800c38c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b08a      	sub	sp, #40	; 0x28
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d101      	bne.n	800c39e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	e075      	b.n	800c48a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d105      	bne.n	800c3b6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7f5 fd91 	bl	8001ed8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2204      	movs	r2, #4
 800c3ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f868 	bl	800c494 <HAL_SD_InitCard>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e05d      	b.n	800c48a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c3ce:	f107 0308 	add.w	r3, r7, #8
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 fdaf 	bl	800cf38 <HAL_SD_GetCardStatus>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d001      	beq.n	800c3e4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e052      	b.n	800c48a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c3e4:	7e3b      	ldrb	r3, [r7, #24]
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c3ea:	7e7b      	ldrb	r3, [r7, #25]
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d10a      	bne.n	800c40e <HAL_SD_Init+0x82>
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d102      	bne.n	800c404 <HAL_SD_Init+0x78>
 800c3fe:	6a3b      	ldr	r3, [r7, #32]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d004      	beq.n	800c40e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c40a:	659a      	str	r2, [r3, #88]	; 0x58
 800c40c:	e00b      	b.n	800c426 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c412:	2b01      	cmp	r3, #1
 800c414:	d104      	bne.n	800c420 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c41c:	659a      	str	r2, [r3, #88]	; 0x58
 800c41e:	e002      	b.n	800c426 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	4619      	mov	r1, r3
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fe6d 	bl	800d10c <HAL_SD_ConfigWideBusOperation>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	e026      	b.n	800c48a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c43c:	f7f6 fcb4 	bl	8002da8 <HAL_GetTick>
 800c440:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c442:	e011      	b.n	800c468 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c444:	f7f6 fcb0 	bl	8002da8 <HAL_GetTick>
 800c448:	4602      	mov	r2, r0
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c452:	d109      	bne.n	800c468 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c45a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800c464:	2303      	movs	r3, #3
 800c466:	e010      	b.n	800c48a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 ff61 	bl	800d330 <HAL_SD_GetCardState>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b04      	cmp	r3, #4
 800c472:	d1e7      	bne.n	800c444 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3728      	adds	r7, #40	; 0x28
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
	...

0800c494 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c494:	b590      	push	{r4, r7, lr}
 800c496:	b08d      	sub	sp, #52	; 0x34
 800c498:	af02      	add	r7, sp, #8
 800c49a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c49c:	2300      	movs	r3, #0
 800c49e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c4ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c4b0:	f04f 0100 	mov.w	r1, #0
 800c4b4:	f7fe fd24 	bl	800af00 <HAL_RCCEx_GetPeriphCLKFreq>
 800c4b8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d109      	bne.n	800c4d4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c4ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e070      	b.n	800c5b6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d6:	0a1b      	lsrs	r3, r3, #8
 800c4d8:	4a39      	ldr	r2, [pc, #228]	; (800c5c0 <HAL_SD_InitCard+0x12c>)
 800c4da:	fba2 2303 	umull	r2, r3, r2, r3
 800c4de:	091b      	lsrs	r3, r3, #4
 800c4e0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681c      	ldr	r4, [r3, #0]
 800c4e6:	466a      	mov	r2, sp
 800c4e8:	f107 0318 	add.w	r3, r7, #24
 800c4ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c4f0:	e882 0003 	stmia.w	r2, {r0, r1}
 800c4f4:	f107 030c 	add.w	r3, r7, #12
 800c4f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f003 fe0c 	bl	8010118 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4618      	mov	r0, r3
 800c506:	f003 fe4f 	bl	80101a8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d005      	beq.n	800c51c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	005b      	lsls	r3, r3, #1
 800c514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c516:	fbb2 f3f3 	udiv	r3, r2, r3
 800c51a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d007      	beq.n	800c532 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c522:	4a28      	ldr	r2, [pc, #160]	; (800c5c4 <HAL_SD_InitCard+0x130>)
 800c524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c526:	fbb2 f3f3 	udiv	r3, r2, r3
 800c52a:	3301      	adds	r3, #1
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7f6 fc47 	bl	8002dc0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 ffea 	bl	800d50c <SD_PowerON>
 800c538:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00b      	beq.n	800c558 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2201      	movs	r2, #1
 800c544:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	431a      	orrs	r2, r3
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c554:	2301      	movs	r3, #1
 800c556:	e02e      	b.n	800c5b6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 ff09 	bl	800d370 <SD_InitCard>
 800c55e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c560:	6a3b      	ldr	r3, [r7, #32]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00b      	beq.n	800c57e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2201      	movs	r2, #1
 800c56a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c572:	6a3b      	ldr	r3, [r7, #32]
 800c574:	431a      	orrs	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	e01b      	b.n	800c5b6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c586:	4618      	mov	r0, r3
 800c588:	f003 fea4 	bl	80102d4 <SDMMC_CmdBlockLength>
 800c58c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c58e:	6a3b      	ldr	r3, [r7, #32]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00f      	beq.n	800c5b4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a0b      	ldr	r2, [pc, #44]	; (800c5c8 <HAL_SD_InitCard+0x134>)
 800c59a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5a0:	6a3b      	ldr	r3, [r7, #32]
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e000      	b.n	800c5b6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	372c      	adds	r7, #44	; 0x2c
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd90      	pop	{r4, r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	014f8b59 	.word	0x014f8b59
 800c5c4:	00012110 	.word	0x00012110
 800c5c8:	1fe00fff 	.word	0x1fe00fff

0800c5cc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b08c      	sub	sp, #48	; 0x30
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
 800c5d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d107      	bne.n	800c5f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e08d      	b.n	800c710 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	f040 8086 	bne.w	800c70e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2200      	movs	r2, #0
 800c606:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	441a      	add	r2, r3
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c612:	429a      	cmp	r2, r3
 800c614:	d907      	bls.n	800c626 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c61a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e074      	b.n	800c710 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2203      	movs	r2, #3
 800c62a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2200      	movs	r2, #0
 800c634:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	025a      	lsls	r2, r3, #9
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d002      	beq.n	800c652 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64e:	025b      	lsls	r3, r3, #9
 800c650:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c652:	f04f 33ff 	mov.w	r3, #4294967295
 800c656:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	025b      	lsls	r3, r3, #9
 800c65c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c65e:	2390      	movs	r3, #144	; 0x90
 800c660:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c662:	2302      	movs	r3, #2
 800c664:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c666:	2300      	movs	r3, #0
 800c668:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c66a:	2300      	movs	r3, #0
 800c66c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f107 0210 	add.w	r2, r7, #16
 800c676:	4611      	mov	r1, r2
 800c678:	4618      	mov	r0, r3
 800c67a:	f003 fdff 	bl	801027c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	68da      	ldr	r2, [r3, #12]
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c68c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2201      	movs	r2, #1
 800c69c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d90a      	bls.n	800c6ba <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2282      	movs	r2, #130	; 0x82
 800c6a8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f003 fe55 	bl	8010360 <SDMMC_CmdReadMultiBlock>
 800c6b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c6b8:	e009      	b.n	800c6ce <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2281      	movs	r2, #129	; 0x81
 800c6be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f003 fe27 	bl	801031a <SDMMC_CmdReadSingleBlock>
 800c6cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d012      	beq.n	800c6fa <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a0f      	ldr	r2, [pc, #60]	; (800c718 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c6da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e00a      	b.n	800c710 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c708:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	e000      	b.n	800c710 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c70e:	2302      	movs	r3, #2
  }
}
 800c710:	4618      	mov	r0, r3
 800c712:	3730      	adds	r7, #48	; 0x30
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	1fe00fff 	.word	0x1fe00fff

0800c71c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b08c      	sub	sp, #48	; 0x30
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d107      	bne.n	800c744 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c738:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	e08d      	b.n	800c860 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	f040 8086 	bne.w	800c85e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	441a      	add	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c762:	429a      	cmp	r2, r3
 800c764:	d907      	bls.n	800c776 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c76a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c772:	2301      	movs	r3, #1
 800c774:	e074      	b.n	800c860 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2203      	movs	r2, #3
 800c77a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2200      	movs	r2, #0
 800c784:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	025a      	lsls	r2, r3, #9
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d002      	beq.n	800c7a2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	025b      	lsls	r3, r3, #9
 800c7a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	025b      	lsls	r3, r3, #9
 800c7ac:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c7ae:	2390      	movs	r3, #144	; 0x90
 800c7b0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f107 0210 	add.w	r2, r7, #16
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f003 fd57 	bl	801027c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	68da      	ldr	r2, [r3, #12]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7dc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d90a      	bls.n	800c80a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	22a0      	movs	r2, #160	; 0xa0
 800c7f8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c800:	4618      	mov	r0, r3
 800c802:	f003 fdf3 	bl	80103ec <SDMMC_CmdWriteMultiBlock>
 800c806:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c808:	e009      	b.n	800c81e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2290      	movs	r2, #144	; 0x90
 800c80e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c816:	4618      	mov	r0, r3
 800c818:	f003 fdc5 	bl	80103a6 <SDMMC_CmdWriteSingleBlock>
 800c81c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c820:	2b00      	cmp	r3, #0
 800c822:	d012      	beq.n	800c84a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a0f      	ldr	r2, [pc, #60]	; (800c868 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c82a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c832:	431a      	orrs	r2, r3
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2200      	movs	r2, #0
 800c844:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c846:	2301      	movs	r3, #1
 800c848:	e00a      	b.n	800c860 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c858:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c85a:	2300      	movs	r3, #0
 800c85c:	e000      	b.n	800c860 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c85e:	2302      	movs	r3, #2
  }
}
 800c860:	4618      	mov	r0, r3
 800c862:	3730      	adds	r7, #48	; 0x30
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	1fe00fff 	.word	0x1fe00fff

0800c86c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c878:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c884:	2b00      	cmp	r3, #0
 800c886:	d008      	beq.n	800c89a <HAL_SD_IRQHandler+0x2e>
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f003 0308 	and.w	r3, r3, #8
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d003      	beq.n	800c89a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f001 f926 	bl	800dae4 <SD_Read_IT>
 800c898:	e19a      	b.n	800cbd0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f000 80ac 	beq.w	800ca02 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8b2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	4b59      	ldr	r3, [pc, #356]	; (800ca24 <HAL_SD_IRQHandler+0x1b8>)
 800c8c0:	400b      	ands	r3, r1
 800c8c2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c8d2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68da      	ldr	r2, [r3, #12]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8e2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f003 0308 	and.w	r3, r3, #8
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d038      	beq.n	800c960 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f003 0302 	and.w	r3, r3, #2
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d104      	bne.n	800c902 <HAL_SD_IRQHandler+0x96>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f003 0320 	and.w	r3, r3, #32
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d011      	beq.n	800c926 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4618      	mov	r0, r3
 800c908:	f003 fd94 	bl	8010434 <SDMMC_CmdStopTransfer>
 800c90c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d008      	beq.n	800c926 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	431a      	orrs	r2, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f95b 	bl	800cbdc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a3f      	ldr	r2, [pc, #252]	; (800ca28 <HAL_SD_IRQHandler+0x1bc>)
 800c92c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2201      	movs	r2, #1
 800c932:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f003 0301 	and.w	r3, r3, #1
 800c942:	2b00      	cmp	r3, #0
 800c944:	d104      	bne.n	800c950 <HAL_SD_IRQHandler+0xe4>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f003 0302 	and.w	r3, r3, #2
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d003      	beq.n	800c958 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f005 fd9d 	bl	8012490 <HAL_SD_RxCpltCallback>
 800c956:	e13b      	b.n	800cbd0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f005 fd8f 	bl	801247c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c95e:	e137      	b.n	800cbd0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c966:	2b00      	cmp	r3, #0
 800c968:	f000 8132 	beq.w	800cbd0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2200      	movs	r2, #0
 800c972:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2200      	movs	r2, #0
 800c97a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2200      	movs	r2, #0
 800c982:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f003 0302 	and.w	r3, r3, #2
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d104      	bne.n	800c998 <HAL_SD_IRQHandler+0x12c>
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f003 0320 	and.w	r3, r3, #32
 800c994:	2b00      	cmp	r3, #0
 800c996:	d011      	beq.n	800c9bc <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f003 fd49 	bl	8010434 <SDMMC_CmdStopTransfer>
 800c9a2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d008      	beq.n	800c9bc <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	431a      	orrs	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 f910 	bl	800cbdc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f003 0310 	and.w	r3, r3, #16
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d104      	bne.n	800c9de <HAL_SD_IRQHandler+0x172>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f003 0320 	and.w	r3, r3, #32
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f005 fd4c 	bl	801247c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f003 0301 	and.w	r3, r3, #1
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d105      	bne.n	800c9fa <HAL_SD_IRQHandler+0x18e>
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f003 0302 	and.w	r3, r3, #2
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f000 80eb 	beq.w	800cbd0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f005 fd48 	bl	8012490 <HAL_SD_RxCpltCallback>
}
 800ca00:	e0e6      	b.n	800cbd0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d00d      	beq.n	800ca2c <HAL_SD_IRQHandler+0x1c0>
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f003 0308 	and.w	r3, r3, #8
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d008      	beq.n	800ca2c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f001 f8a8 	bl	800db70 <SD_Write_IT>
 800ca20:	e0d6      	b.n	800cbd0 <HAL_SD_IRQHandler+0x364>
 800ca22:	bf00      	nop
 800ca24:	ffff3ec5 	.word	0xffff3ec5
 800ca28:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca32:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f000 809d 	beq.w	800cb76 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca42:	f003 0302 	and.w	r3, r3, #2
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d005      	beq.n	800ca56 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca4e:	f043 0202 	orr.w	r2, r3, #2
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca5c:	f003 0308 	and.w	r3, r3, #8
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d005      	beq.n	800ca70 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca68:	f043 0208 	orr.w	r2, r3, #8
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca76:	f003 0320 	and.w	r3, r3, #32
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d005      	beq.n	800ca8a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca82:	f043 0220 	orr.w	r2, r3, #32
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca90:	f003 0310 	and.w	r3, r3, #16
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d005      	beq.n	800caa4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca9c:	f043 0210 	orr.w	r2, r3, #16
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a4b      	ldr	r2, [pc, #300]	; (800cbd8 <HAL_SD_IRQHandler+0x36c>)
 800caaa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800caba:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caca:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cada:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68da      	ldr	r2, [r3, #12]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800caea:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f003 fc9f 	bl	8010434 <SDMMC_CmdStopTransfer>
 800caf6:	4602      	mov	r2, r0
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cafc:	431a      	orrs	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68da      	ldr	r2, [r3, #12]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb10:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb1a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f003 0308 	and.w	r3, r3, #8
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00a      	beq.n	800cb3c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 f851 	bl	800cbdc <HAL_SD_ErrorCallback>
}
 800cb3a:	e049      	b.n	800cbd0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d044      	beq.n	800cbd0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d040      	beq.n	800cbd0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cb5c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2200      	movs	r2, #0
 800cb64:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f834 	bl	800cbdc <HAL_SD_ErrorCallback>
}
 800cb74:	e02c      	b.n	800cbd0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d025      	beq.n	800cbd0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb8c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb94:	f003 0304 	and.w	r3, r3, #4
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10c      	bne.n	800cbb6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f003 0320 	and.w	r3, r3, #32
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d003      	beq.n	800cbae <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f001 f84a 	bl	800dc40 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800cbac:	e010      	b.n	800cbd0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f001 f832 	bl	800dc18 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800cbb4:	e00c      	b.n	800cbd0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f003 0320 	and.w	r3, r3, #32
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d003      	beq.n	800cbc8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f001 f833 	bl	800dc2c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800cbc6:	e003      	b.n	800cbd0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f001 f81b 	bl	800dc04 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800cbce:	e7ff      	b.n	800cbd0 <HAL_SD_IRQHandler+0x364>
 800cbd0:	bf00      	nop
 800cbd2:	3710      	adds	r7, #16
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	18000f3a 	.word	0x18000f3a

0800cbdc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbfe:	0f9b      	lsrs	r3, r3, #30
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc0a:	0e9b      	lsrs	r3, r3, #26
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	f003 030f 	and.w	r3, r3, #15
 800cc12:	b2da      	uxtb	r2, r3
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc1c:	0e1b      	lsrs	r3, r3, #24
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	f003 0303 	and.w	r3, r3, #3
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc2e:	0c1b      	lsrs	r3, r3, #16
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc3a:	0a1b      	lsrs	r3, r3, #8
 800cc3c:	b2da      	uxtb	r2, r3
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc50:	0d1b      	lsrs	r3, r3, #20
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc5c:	0c1b      	lsrs	r3, r3, #16
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	f003 030f 	and.w	r3, r3, #15
 800cc64:	b2da      	uxtb	r2, r3
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc6e:	0bdb      	lsrs	r3, r3, #15
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc80:	0b9b      	lsrs	r3, r3, #14
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	f003 0301 	and.w	r3, r3, #1
 800cc88:	b2da      	uxtb	r2, r3
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc92:	0b5b      	lsrs	r3, r3, #13
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	f003 0301 	and.w	r3, r3, #1
 800cc9a:	b2da      	uxtb	r2, r3
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cca4:	0b1b      	lsrs	r3, r3, #12
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	f003 0301 	and.w	r3, r3, #1
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d163      	bne.n	800cd88 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccc4:	009a      	lsls	r2, r3, #2
 800ccc6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ccca:	4013      	ands	r3, r2
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ccd0:	0f92      	lsrs	r2, r2, #30
 800ccd2:	431a      	orrs	r2, r3
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccdc:	0edb      	lsrs	r3, r3, #27
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	f003 0307 	and.w	r3, r3, #7
 800cce4:	b2da      	uxtb	r2, r3
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccee:	0e1b      	lsrs	r3, r3, #24
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	f003 0307 	and.w	r3, r3, #7
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd00:	0d5b      	lsrs	r3, r3, #21
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	f003 0307 	and.w	r3, r3, #7
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd12:	0c9b      	lsrs	r3, r3, #18
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	f003 0307 	and.w	r3, r3, #7
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd24:	0bdb      	lsrs	r3, r3, #15
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	f003 0307 	and.w	r3, r3, #7
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	691b      	ldr	r3, [r3, #16]
 800cd36:	1c5a      	adds	r2, r3, #1
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	7e1b      	ldrb	r3, [r3, #24]
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	f003 0307 	and.w	r3, r3, #7
 800cd46:	3302      	adds	r3, #2
 800cd48:	2201      	movs	r2, #1
 800cd4a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cd52:	fb03 f202 	mul.w	r2, r3, r2
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	7a1b      	ldrb	r3, [r3, #8]
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	f003 030f 	and.w	r3, r3, #15
 800cd64:	2201      	movs	r2, #1
 800cd66:	409a      	lsls	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800cd74:	0a52      	lsrs	r2, r2, #9
 800cd76:	fb03 f202 	mul.w	r2, r3, r2
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd84:	655a      	str	r2, [r3, #84]	; 0x54
 800cd86:	e031      	b.n	800cdec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d11d      	bne.n	800cdcc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd94:	041b      	lsls	r3, r3, #16
 800cd96:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd9e:	0c1b      	lsrs	r3, r3, #16
 800cda0:	431a      	orrs	r2, r3
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	029a      	lsls	r2, r3, #10
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdc0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	655a      	str	r2, [r3, #84]	; 0x54
 800cdca:	e00f      	b.n	800cdec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a58      	ldr	r2, [pc, #352]	; (800cf34 <HAL_SD_GetCardCSD+0x344>)
 800cdd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800cde8:	2301      	movs	r3, #1
 800cdea:	e09d      	b.n	800cf28 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdf0:	0b9b      	lsrs	r3, r3, #14
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	f003 0301 	and.w	r3, r3, #1
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce02:	09db      	lsrs	r3, r3, #7
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce1a:	b2da      	uxtb	r2, r3
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce24:	0fdb      	lsrs	r3, r3, #31
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce30:	0f5b      	lsrs	r3, r3, #29
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	f003 0303 	and.w	r3, r3, #3
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce42:	0e9b      	lsrs	r3, r3, #26
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	f003 0307 	and.w	r3, r3, #7
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce54:	0d9b      	lsrs	r3, r3, #22
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	f003 030f 	and.w	r3, r3, #15
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce66:	0d5b      	lsrs	r3, r3, #21
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	f003 0301 	and.w	r3, r3, #1
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce82:	0c1b      	lsrs	r3, r3, #16
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	f003 0301 	and.w	r3, r3, #1
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce96:	0bdb      	lsrs	r3, r3, #15
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	f003 0301 	and.w	r3, r3, #1
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ceaa:	0b9b      	lsrs	r3, r3, #14
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	f003 0301 	and.w	r3, r3, #1
 800ceb2:	b2da      	uxtb	r2, r3
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cebe:	0b5b      	lsrs	r3, r3, #13
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	f003 0301 	and.w	r3, r3, #1
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ced2:	0b1b      	lsrs	r3, r3, #12
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	f003 0301 	and.w	r3, r3, #1
 800ceda:	b2da      	uxtb	r2, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cee6:	0a9b      	lsrs	r3, r3, #10
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	f003 0303 	and.w	r3, r3, #3
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cefa:	0a1b      	lsrs	r3, r3, #8
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	f003 0303 	and.w	r3, r3, #3
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf0e:	085b      	lsrs	r3, r3, #1
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	2201      	movs	r2, #1
 800cf22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr
 800cf34:	1fe00fff 	.word	0x1fe00fff

0800cf38 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b094      	sub	sp, #80	; 0x50
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b03      	cmp	r3, #3
 800cf52:	d101      	bne.n	800cf58 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800cf54:	2301      	movs	r3, #1
 800cf56:	e0a7      	b.n	800d0a8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cf58:	f107 0308 	add.w	r3, r7, #8
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 fb62 	bl	800d628 <SD_SendSDStatus>
 800cf64:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d011      	beq.n	800cf90 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a4f      	ldr	r2, [pc, #316]	; (800d0b0 <HAL_SD_GetCardStatus+0x178>)
 800cf72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf7a:	431a      	orrs	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cf8e:	e070      	b.n	800d072 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	099b      	lsrs	r3, r3, #6
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	f003 0303 	and.w	r3, r3, #3
 800cf9a:	b2da      	uxtb	r2, r3
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	095b      	lsrs	r3, r3, #5
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	f003 0301 	and.w	r3, r3, #1
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	0a1b      	lsrs	r3, r3, #8
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	0e1b      	lsrs	r3, r3, #24
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	b29a      	uxth	r2, r3
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	061a      	lsls	r2, r3, #24
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	021b      	lsls	r3, r3, #8
 800cfd2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cfd6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	0a1b      	lsrs	r3, r3, #8
 800cfdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cfe0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	0e1b      	lsrs	r3, r3, #24
 800cfe6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	0a1b      	lsrs	r3, r3, #8
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	0d1b      	lsrs	r3, r3, #20
 800d002:	b2db      	uxtb	r3, r3
 800d004:	f003 030f 	and.w	r3, r3, #15
 800d008:	b2da      	uxtb	r2, r3
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	0c1b      	lsrs	r3, r3, #16
 800d012:	b29b      	uxth	r3, r3
 800d014:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d018:	b29a      	uxth	r2, r3
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	b29b      	uxth	r3, r3
 800d022:	4313      	orrs	r3, r2
 800d024:	b29a      	uxth	r2, r3
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	0a9b      	lsrs	r3, r3, #10
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d034:	b2da      	uxtb	r2, r3
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	0a1b      	lsrs	r3, r3, #8
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	f003 0303 	and.w	r3, r3, #3
 800d044:	b2da      	uxtb	r2, r3
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	091b      	lsrs	r3, r3, #4
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	f003 030f 	and.w	r3, r3, #15
 800d054:	b2da      	uxtb	r2, r3
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	f003 030f 	and.w	r3, r3, #15
 800d062:	b2da      	uxtb	r2, r3
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	0e1b      	lsrs	r3, r3, #24
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d07a:	4618      	mov	r0, r3
 800d07c:	f003 f92a 	bl	80102d4 <SDMMC_CmdBlockLength>
 800d080:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00d      	beq.n	800d0a4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a08      	ldr	r2, [pc, #32]	; (800d0b0 <HAL_SD_GetCardStatus+0x178>)
 800d08e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d094:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2201      	movs	r2, #1
 800d09a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800d0a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3750      	adds	r7, #80	; 0x50
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	1fe00fff 	.word	0x1fe00fff

0800d0b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d10c:	b590      	push	{r4, r7, lr}
 800d10e:	b08d      	sub	sp, #52	; 0x34
 800d110:	af02      	add	r7, sp, #8
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2203      	movs	r2, #3
 800d120:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d128:	2b03      	cmp	r3, #3
 800d12a:	d02e      	beq.n	800d18a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d132:	d106      	bne.n	800d142 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d138:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	635a      	str	r2, [r3, #52]	; 0x34
 800d140:	e029      	b.n	800d196 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d148:	d10a      	bne.n	800d160 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fb64 	bl	800d818 <SD_WideBus_Enable>
 800d150:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	431a      	orrs	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	635a      	str	r2, [r3, #52]	; 0x34
 800d15e:	e01a      	b.n	800d196 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d10a      	bne.n	800d17c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 fba1 	bl	800d8ae <SD_WideBus_Disable>
 800d16c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d172:	6a3b      	ldr	r3, [r7, #32]
 800d174:	431a      	orrs	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	635a      	str	r2, [r3, #52]	; 0x34
 800d17a:	e00c      	b.n	800d196 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d180:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	635a      	str	r2, [r3, #52]	; 0x34
 800d188:	e005      	b.n	800d196 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d007      	beq.n	800d1ae <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a5f      	ldr	r2, [pc, #380]	; (800d320 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d1a4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1ac:	e096      	b.n	800d2dc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d1ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d1b2:	f04f 0100 	mov.w	r1, #0
 800d1b6:	f7fd fea3 	bl	800af00 <HAL_RCCEx_GetPeriphCLKFreq>
 800d1ba:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f000 8083 	beq.w	800d2ca <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	691b      	ldr	r3, [r3, #16]
 800d1d8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	695a      	ldr	r2, [r3, #20]
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	4950      	ldr	r1, [pc, #320]	; (800d324 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d1e2:	fba1 1303 	umull	r1, r3, r1, r3
 800d1e6:	0e1b      	lsrs	r3, r3, #24
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d303      	bcc.n	800d1f4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	61bb      	str	r3, [r7, #24]
 800d1f2:	e05a      	b.n	800d2aa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1fc:	d103      	bne.n	800d206 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	695b      	ldr	r3, [r3, #20]
 800d202:	61bb      	str	r3, [r7, #24]
 800d204:	e051      	b.n	800d2aa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d20a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d20e:	d126      	bne.n	800d25e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	695b      	ldr	r3, [r3, #20]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10e      	bne.n	800d236 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	4a43      	ldr	r2, [pc, #268]	; (800d328 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d906      	bls.n	800d22e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	4a40      	ldr	r2, [pc, #256]	; (800d324 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d224:	fba2 2303 	umull	r2, r3, r2, r3
 800d228:	0e5b      	lsrs	r3, r3, #25
 800d22a:	61bb      	str	r3, [r7, #24]
 800d22c:	e03d      	b.n	800d2aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	695b      	ldr	r3, [r3, #20]
 800d232:	61bb      	str	r3, [r7, #24]
 800d234:	e039      	b.n	800d2aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	695b      	ldr	r3, [r3, #20]
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	69fa      	ldr	r2, [r7, #28]
 800d23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d242:	4a39      	ldr	r2, [pc, #228]	; (800d328 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d906      	bls.n	800d256 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	4a36      	ldr	r2, [pc, #216]	; (800d324 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d24c:	fba2 2303 	umull	r2, r3, r2, r3
 800d250:	0e5b      	lsrs	r3, r3, #25
 800d252:	61bb      	str	r3, [r7, #24]
 800d254:	e029      	b.n	800d2aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	695b      	ldr	r3, [r3, #20]
 800d25a:	61bb      	str	r3, [r7, #24]
 800d25c:	e025      	b.n	800d2aa <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10e      	bne.n	800d284 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	4a30      	ldr	r2, [pc, #192]	; (800d32c <HAL_SD_ConfigWideBusOperation+0x220>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d906      	bls.n	800d27c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	4a2c      	ldr	r2, [pc, #176]	; (800d324 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d272:	fba2 2303 	umull	r2, r3, r2, r3
 800d276:	0e1b      	lsrs	r3, r3, #24
 800d278:	61bb      	str	r3, [r7, #24]
 800d27a:	e016      	b.n	800d2aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	695b      	ldr	r3, [r3, #20]
 800d280:	61bb      	str	r3, [r7, #24]
 800d282:	e012      	b.n	800d2aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	005b      	lsls	r3, r3, #1
 800d28a:	69fa      	ldr	r2, [r7, #28]
 800d28c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d290:	4a26      	ldr	r2, [pc, #152]	; (800d32c <HAL_SD_ConfigWideBusOperation+0x220>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d906      	bls.n	800d2a4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	4a22      	ldr	r2, [pc, #136]	; (800d324 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d29a:	fba2 2303 	umull	r2, r3, r2, r3
 800d29e:	0e1b      	lsrs	r3, r3, #24
 800d2a0:	61bb      	str	r3, [r7, #24]
 800d2a2:	e002      	b.n	800d2aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	695b      	ldr	r3, [r3, #20]
 800d2a8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681c      	ldr	r4, [r3, #0]
 800d2ae:	466a      	mov	r2, sp
 800d2b0:	f107 0314 	add.w	r3, r7, #20
 800d2b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d2b8:	e882 0003 	stmia.w	r2, {r0, r1}
 800d2bc:	f107 0308 	add.w	r3, r7, #8
 800d2c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	f002 ff28 	bl	8010118 <SDMMC_Init>
 800d2c8:	e008      	b.n	800d2dc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f002 fff5 	bl	80102d4 <SDMMC_CmdBlockLength>
 800d2ea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2ec:	6a3b      	ldr	r3, [r7, #32]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d00c      	beq.n	800d30c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a0a      	ldr	r2, [pc, #40]	; (800d320 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d2f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2fe:	6a3b      	ldr	r3, [r7, #32]
 800d300:	431a      	orrs	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d306:	2301      	movs	r3, #1
 800d308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800d314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d318:	4618      	mov	r0, r3
 800d31a:	372c      	adds	r7, #44	; 0x2c
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd90      	pop	{r4, r7, pc}
 800d320:	1fe00fff 	.word	0x1fe00fff
 800d324:	55e63b89 	.word	0x55e63b89
 800d328:	02faf080 	.word	0x02faf080
 800d32c:	017d7840 	.word	0x017d7840

0800d330 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d338:	2300      	movs	r3, #0
 800d33a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d33c:	f107 030c 	add.w	r3, r7, #12
 800d340:	4619      	mov	r1, r3
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fa40 	bl	800d7c8 <SD_SendStatus>
 800d348:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d005      	beq.n	800d35c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	431a      	orrs	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	0a5b      	lsrs	r3, r3, #9
 800d360:	f003 030f 	and.w	r3, r3, #15
 800d364:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d366:	693b      	ldr	r3, [r7, #16]
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3718      	adds	r7, #24
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b090      	sub	sp, #64	; 0x40
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d378:	2300      	movs	r3, #0
 800d37a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d37c:	f7f5 fd14 	bl	8002da8 <HAL_GetTick>
 800d380:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4618      	mov	r0, r3
 800d388:	f002 ff1f 	bl	80101ca <SDMMC_GetPowerState>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d102      	bne.n	800d398 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d392:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d396:	e0b5      	b.n	800d504 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39c:	2b03      	cmp	r3, #3
 800d39e:	d02e      	beq.n	800d3fe <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f003 f96a 	bl	801067e <SDMMC_CmdSendCID>
 800d3aa:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d001      	beq.n	800d3b6 <SD_InitCard+0x46>
    {
      return errorstate;
 800d3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b4:	e0a6      	b.n	800d504 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f002 ff4a 	bl	8010256 <SDMMC_GetResponse>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2104      	movs	r1, #4
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f002 ff41 	bl	8010256 <SDMMC_GetResponse>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2108      	movs	r1, #8
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f002 ff38 	bl	8010256 <SDMMC_GetResponse>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	210c      	movs	r1, #12
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f002 ff2f 	bl	8010256 <SDMMC_GetResponse>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d402:	2b03      	cmp	r3, #3
 800d404:	d01d      	beq.n	800d442 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d406:	e019      	b.n	800d43c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f107 020a 	add.w	r2, r7, #10
 800d410:	4611      	mov	r1, r2
 800d412:	4618      	mov	r0, r3
 800d414:	f003 f972 	bl	80106fc <SDMMC_CmdSetRelAdd>
 800d418:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d001      	beq.n	800d424 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d422:	e06f      	b.n	800d504 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d424:	f7f5 fcc0 	bl	8002da8 <HAL_GetTick>
 800d428:	4602      	mov	r2, r0
 800d42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42c:	1ad3      	subs	r3, r2, r3
 800d42e:	f241 3287 	movw	r2, #4999	; 0x1387
 800d432:	4293      	cmp	r3, r2
 800d434:	d902      	bls.n	800d43c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d436:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d43a:	e063      	b.n	800d504 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d43c:	897b      	ldrh	r3, [r7, #10]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d0e2      	beq.n	800d408 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d446:	2b03      	cmp	r3, #3
 800d448:	d036      	beq.n	800d4b8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d44a:	897b      	ldrh	r3, [r7, #10]
 800d44c:	461a      	mov	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d45a:	041b      	lsls	r3, r3, #16
 800d45c:	4619      	mov	r1, r3
 800d45e:	4610      	mov	r0, r2
 800d460:	f003 f92c 	bl	80106bc <SDMMC_CmdSendCSD>
 800d464:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d001      	beq.n	800d470 <SD_InitCard+0x100>
    {
      return errorstate;
 800d46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46e:	e049      	b.n	800d504 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2100      	movs	r1, #0
 800d476:	4618      	mov	r0, r3
 800d478:	f002 feed 	bl	8010256 <SDMMC_GetResponse>
 800d47c:	4602      	mov	r2, r0
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2104      	movs	r1, #4
 800d488:	4618      	mov	r0, r3
 800d48a:	f002 fee4 	bl	8010256 <SDMMC_GetResponse>
 800d48e:	4602      	mov	r2, r0
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2108      	movs	r1, #8
 800d49a:	4618      	mov	r0, r3
 800d49c:	f002 fedb 	bl	8010256 <SDMMC_GetResponse>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	210c      	movs	r1, #12
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f002 fed2 	bl	8010256 <SDMMC_GetResponse>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2104      	movs	r1, #4
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f002 fec9 	bl	8010256 <SDMMC_GetResponse>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	0d1a      	lsrs	r2, r3, #20
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d4cc:	f107 030c 	add.w	r3, r7, #12
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f7ff fb8c 	bl	800cbf0 <HAL_SD_GetCardCSD>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d002      	beq.n	800d4e4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d4e2:	e00f      	b.n	800d504 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ec:	041b      	lsls	r3, r3, #16
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	4610      	mov	r0, r2
 800d4f2:	f002 ffdb 	bl	80104ac <SDMMC_CmdSelDesel>
 800d4f6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <SD_InitCard+0x192>
  {
    return errorstate;
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d500:	e000      	b.n	800d504 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d502:	2300      	movs	r3, #0
}
 800d504:	4618      	mov	r0, r3
 800d506:	3740      	adds	r7, #64	; 0x40
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d514:	2300      	movs	r3, #0
 800d516:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d518:	2300      	movs	r3, #0
 800d51a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d51c:	2300      	movs	r3, #0
 800d51e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4618      	mov	r0, r3
 800d526:	f002 ffe4 	bl	80104f2 <SDMMC_CmdGoIdleState>
 800d52a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	e072      	b.n	800d61c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4618      	mov	r0, r3
 800d53c:	f002 fff7 	bl	801052e <SDMMC_CmdOperCond>
 800d540:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d548:	d10d      	bne.n	800d566 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4618      	mov	r0, r3
 800d556:	f002 ffcc 	bl	80104f2 <SDMMC_CmdGoIdleState>
 800d55a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d004      	beq.n	800d56c <SD_PowerON+0x60>
    {
      return errorstate;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	e05a      	b.n	800d61c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2201      	movs	r2, #1
 800d56a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d570:	2b01      	cmp	r3, #1
 800d572:	d137      	bne.n	800d5e4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2100      	movs	r1, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f002 fff7 	bl	801056e <SDMMC_CmdAppCommand>
 800d580:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d02d      	beq.n	800d5e4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d588:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d58c:	e046      	b.n	800d61c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2100      	movs	r1, #0
 800d594:	4618      	mov	r0, r3
 800d596:	f002 ffea 	bl	801056e <SDMMC_CmdAppCommand>
 800d59a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d001      	beq.n	800d5a6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	e03a      	b.n	800d61c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	491e      	ldr	r1, [pc, #120]	; (800d624 <SD_PowerON+0x118>)
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f003 f801 	bl	80105b4 <SDMMC_CmdAppOperCommand>
 800d5b2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d002      	beq.n	800d5c0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d5ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d5be:	e02d      	b.n	800d61c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2100      	movs	r1, #0
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f002 fe45 	bl	8010256 <SDMMC_GetResponse>
 800d5cc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	0fdb      	lsrs	r3, r3, #31
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d101      	bne.n	800d5da <SD_PowerON+0xce>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e000      	b.n	800d5dc <SD_PowerON+0xd0>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	613b      	str	r3, [r7, #16]

    count++;
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d802      	bhi.n	800d5f4 <SD_PowerON+0xe8>
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d0cc      	beq.n	800d58e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d902      	bls.n	800d604 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d5fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d602:	e00b      	b.n	800d61c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d610:	2b00      	cmp	r3, #0
 800d612:	d002      	beq.n	800d61a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3718      	adds	r7, #24
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	c1100000 	.word	0xc1100000

0800d628 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08c      	sub	sp, #48	; 0x30
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d632:	f7f5 fbb9 	bl	8002da8 <HAL_GetTick>
 800d636:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2100      	movs	r1, #0
 800d642:	4618      	mov	r0, r3
 800d644:	f002 fe07 	bl	8010256 <SDMMC_GetResponse>
 800d648:	4603      	mov	r3, r0
 800d64a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d64e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d652:	d102      	bne.n	800d65a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d658:	e0b0      	b.n	800d7bc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2140      	movs	r1, #64	; 0x40
 800d660:	4618      	mov	r0, r3
 800d662:	f002 fe37 	bl	80102d4 <SDMMC_CmdBlockLength>
 800d666:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d005      	beq.n	800d67a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	e0a0      	b.n	800d7bc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d682:	041b      	lsls	r3, r3, #16
 800d684:	4619      	mov	r1, r3
 800d686:	4610      	mov	r0, r2
 800d688:	f002 ff71 	bl	801056e <SDMMC_CmdAppCommand>
 800d68c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d68e:	6a3b      	ldr	r3, [r7, #32]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d005      	beq.n	800d6a0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d69c:	6a3b      	ldr	r3, [r7, #32]
 800d69e:	e08d      	b.n	800d7bc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d6a6:	2340      	movs	r3, #64	; 0x40
 800d6a8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d6aa:	2360      	movs	r3, #96	; 0x60
 800d6ac:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d6ae:	2302      	movs	r3, #2
 800d6b0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f107 0208 	add.w	r2, r7, #8
 800d6c2:	4611      	mov	r1, r2
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f002 fdd9 	bl	801027c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f003 f859 	bl	8010786 <SDMMC_CmdStatusRegister>
 800d6d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6d6:	6a3b      	ldr	r3, [r7, #32]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d02b      	beq.n	800d734 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d6e4:	6a3b      	ldr	r3, [r7, #32]
 800d6e6:	e069      	b.n	800d7bc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d013      	beq.n	800d71e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6fa:	e00d      	b.n	800d718 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4618      	mov	r0, r3
 800d702:	f002 fd33 	bl	801016c <SDMMC_ReadFIFO>
 800d706:	4602      	mov	r2, r0
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	601a      	str	r2, [r3, #0]
        pData++;
 800d70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70e:	3304      	adds	r3, #4
 800d710:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	3301      	adds	r3, #1
 800d716:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71a:	2b07      	cmp	r3, #7
 800d71c:	d9ee      	bls.n	800d6fc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d71e:	f7f5 fb43 	bl	8002da8 <HAL_GetTick>
 800d722:	4602      	mov	r2, r0
 800d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72c:	d102      	bne.n	800d734 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d72e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d732:	e043      	b.n	800d7bc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d73a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d0d2      	beq.n	800d6e8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d748:	f003 0308 	and.w	r3, r3, #8
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d001      	beq.n	800d754 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d750:	2308      	movs	r3, #8
 800d752:	e033      	b.n	800d7bc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75a:	f003 0302 	and.w	r3, r3, #2
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d001      	beq.n	800d766 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d762:	2302      	movs	r3, #2
 800d764:	e02a      	b.n	800d7bc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d76c:	f003 0320 	and.w	r3, r3, #32
 800d770:	2b00      	cmp	r3, #0
 800d772:	d017      	beq.n	800d7a4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d774:	2320      	movs	r3, #32
 800d776:	e021      	b.n	800d7bc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f002 fcf5 	bl	801016c <SDMMC_ReadFIFO>
 800d782:	4602      	mov	r2, r0
 800d784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d786:	601a      	str	r2, [r3, #0]
    pData++;
 800d788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78a:	3304      	adds	r3, #4
 800d78c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d78e:	f7f5 fb0b 	bl	8002da8 <HAL_GetTick>
 800d792:	4602      	mov	r2, r0
 800d794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79c:	d102      	bne.n	800d7a4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d79e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7a2:	e00b      	b.n	800d7bc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1e2      	bne.n	800d778 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a03      	ldr	r2, [pc, #12]	; (800d7c4 <SD_SendSDStatus+0x19c>)
 800d7b8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d7ba:	2300      	movs	r3, #0
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3730      	adds	r7, #48	; 0x30
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	18000f3a 	.word	0x18000f3a

0800d7c8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d102      	bne.n	800d7de <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d7d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d7dc:	e018      	b.n	800d810 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7e6:	041b      	lsls	r3, r3, #16
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	4610      	mov	r0, r2
 800d7ec:	f002 ffa8 	bl	8010740 <SDMMC_CmdSendStatus>
 800d7f0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d001      	beq.n	800d7fc <SD_SendStatus+0x34>
  {
    return errorstate;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	e009      	b.n	800d810 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2100      	movs	r1, #0
 800d802:	4618      	mov	r0, r3
 800d804:	f002 fd27 	bl	8010256 <SDMMC_GetResponse>
 800d808:	4602      	mov	r2, r0
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d820:	2300      	movs	r3, #0
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	2300      	movs	r3, #0
 800d826:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2100      	movs	r1, #0
 800d82e:	4618      	mov	r0, r3
 800d830:	f002 fd11 	bl	8010256 <SDMMC_GetResponse>
 800d834:	4603      	mov	r3, r0
 800d836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d83a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d83e:	d102      	bne.n	800d846 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d840:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d844:	e02f      	b.n	800d8a6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d846:	f107 030c 	add.w	r3, r7, #12
 800d84a:	4619      	mov	r1, r3
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 f879 	bl	800d944 <SD_FindSCR>
 800d852:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d001      	beq.n	800d85e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	e023      	b.n	800d8a6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d864:	2b00      	cmp	r3, #0
 800d866:	d01c      	beq.n	800d8a2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d870:	041b      	lsls	r3, r3, #16
 800d872:	4619      	mov	r1, r3
 800d874:	4610      	mov	r0, r2
 800d876:	f002 fe7a 	bl	801056e <SDMMC_CmdAppCommand>
 800d87a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	e00f      	b.n	800d8a6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2102      	movs	r1, #2
 800d88c:	4618      	mov	r0, r3
 800d88e:	f002 feb1 	bl	80105f4 <SDMMC_CmdBusWidth>
 800d892:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	e003      	b.n	800d8a6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	e001      	b.n	800d8a6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d8a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3718      	adds	r7, #24
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b086      	sub	sp, #24
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	60fb      	str	r3, [r7, #12]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f002 fcc6 	bl	8010256 <SDMMC_GetResponse>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d8d4:	d102      	bne.n	800d8dc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d8d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8da:	e02f      	b.n	800d93c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d8dc:	f107 030c 	add.w	r3, r7, #12
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 f82e 	bl	800d944 <SD_FindSCR>
 800d8e8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d001      	beq.n	800d8f4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	e023      	b.n	800d93c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d01c      	beq.n	800d938 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d906:	041b      	lsls	r3, r3, #16
 800d908:	4619      	mov	r1, r3
 800d90a:	4610      	mov	r0, r2
 800d90c:	f002 fe2f 	bl	801056e <SDMMC_CmdAppCommand>
 800d910:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	e00f      	b.n	800d93c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2100      	movs	r1, #0
 800d922:	4618      	mov	r0, r3
 800d924:	f002 fe66 	bl	80105f4 <SDMMC_CmdBusWidth>
 800d928:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	e003      	b.n	800d93c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d934:	2300      	movs	r3, #0
 800d936:	e001      	b.n	800d93c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d938:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b08e      	sub	sp, #56	; 0x38
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d94e:	f7f5 fa2b 	bl	8002da8 <HAL_GetTick>
 800d952:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d954:	2300      	movs	r3, #0
 800d956:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d958:	2300      	movs	r3, #0
 800d95a:	60bb      	str	r3, [r7, #8]
 800d95c:	2300      	movs	r3, #0
 800d95e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2108      	movs	r1, #8
 800d96a:	4618      	mov	r0, r3
 800d96c:	f002 fcb2 	bl	80102d4 <SDMMC_CmdBlockLength>
 800d970:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <SD_FindSCR+0x38>
  {
    return errorstate;
 800d978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97a:	e0ad      	b.n	800dad8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d984:	041b      	lsls	r3, r3, #16
 800d986:	4619      	mov	r1, r3
 800d988:	4610      	mov	r0, r2
 800d98a:	f002 fdf0 	bl	801056e <SDMMC_CmdAppCommand>
 800d98e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d992:	2b00      	cmp	r3, #0
 800d994:	d001      	beq.n	800d99a <SD_FindSCR+0x56>
  {
    return errorstate;
 800d996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d998:	e09e      	b.n	800dad8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d99a:	f04f 33ff 	mov.w	r3, #4294967295
 800d99e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d9a0:	2308      	movs	r3, #8
 800d9a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d9a4:	2330      	movs	r3, #48	; 0x30
 800d9a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d9a8:	2302      	movs	r3, #2
 800d9aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f107 0210 	add.w	r2, r7, #16
 800d9bc:	4611      	mov	r1, r2
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f002 fc5c 	bl	801027c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f002 fe36 	bl	801063a <SDMMC_CmdSendSCR>
 800d9ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d027      	beq.n	800da26 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d8:	e07e      	b.n	800dad8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d113      	bne.n	800da10 <SD_FindSCR+0xcc>
 800d9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d110      	bne.n	800da10 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f002 fbba 	bl	801016c <SDMMC_ReadFIFO>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4618      	mov	r0, r3
 800da02:	f002 fbb3 	bl	801016c <SDMMC_ReadFIFO>
 800da06:	4603      	mov	r3, r0
 800da08:	60fb      	str	r3, [r7, #12]
      index++;
 800da0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da0c:	3301      	adds	r3, #1
 800da0e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da10:	f7f5 f9ca 	bl	8002da8 <HAL_GetTick>
 800da14:	4602      	mov	r2, r0
 800da16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da1e:	d102      	bne.n	800da26 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800da20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da24:	e058      	b.n	800dad8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da2c:	f240 532a 	movw	r3, #1322	; 0x52a
 800da30:	4013      	ands	r3, r2
 800da32:	2b00      	cmp	r3, #0
 800da34:	d0d1      	beq.n	800d9da <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da3c:	f003 0308 	and.w	r3, r3, #8
 800da40:	2b00      	cmp	r3, #0
 800da42:	d005      	beq.n	800da50 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2208      	movs	r2, #8
 800da4a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800da4c:	2308      	movs	r3, #8
 800da4e:	e043      	b.n	800dad8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da56:	f003 0302 	and.w	r3, r3, #2
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d005      	beq.n	800da6a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2202      	movs	r2, #2
 800da64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800da66:	2302      	movs	r3, #2
 800da68:	e036      	b.n	800dad8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da70:	f003 0320 	and.w	r3, r3, #32
 800da74:	2b00      	cmp	r3, #0
 800da76:	d005      	beq.n	800da84 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2220      	movs	r2, #32
 800da7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800da80:	2320      	movs	r3, #32
 800da82:	e029      	b.n	800dad8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a15      	ldr	r2, [pc, #84]	; (800dae0 <SD_FindSCR+0x19c>)
 800da8a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	061a      	lsls	r2, r3, #24
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	021b      	lsls	r3, r3, #8
 800da94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800da98:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	0a1b      	lsrs	r3, r3, #8
 800da9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800daa2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	0e1b      	lsrs	r3, r3, #24
 800daa8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800daaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daac:	601a      	str	r2, [r3, #0]
    scr++;
 800daae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab0:	3304      	adds	r3, #4
 800dab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	061a      	lsls	r2, r3, #24
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	021b      	lsls	r3, r3, #8
 800dabc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dac0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	0a1b      	lsrs	r3, r3, #8
 800dac6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800daca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	0e1b      	lsrs	r3, r3, #24
 800dad0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3738      	adds	r7, #56	; 0x38
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	18000f3a 	.word	0x18000f3a

0800dae4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b086      	sub	sp, #24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf6:	2b1f      	cmp	r3, #31
 800daf8:	d936      	bls.n	800db68 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800dafa:	2300      	movs	r3, #0
 800dafc:	617b      	str	r3, [r7, #20]
 800dafe:	e027      	b.n	800db50 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4618      	mov	r0, r3
 800db06:	f002 fb31 	bl	801016c <SDMMC_ReadFIFO>
 800db0a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	b2da      	uxtb	r2, r3
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	701a      	strb	r2, [r3, #0]
      tmp++;
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	3301      	adds	r3, #1
 800db18:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	0a1b      	lsrs	r3, r3, #8
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	701a      	strb	r2, [r3, #0]
      tmp++;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	3301      	adds	r3, #1
 800db28:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	0c1b      	lsrs	r3, r3, #16
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	701a      	strb	r2, [r3, #0]
      tmp++;
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	3301      	adds	r3, #1
 800db38:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	0e1b      	lsrs	r3, r3, #24
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	701a      	strb	r2, [r3, #0]
      tmp++;
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	3301      	adds	r3, #1
 800db48:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	3301      	adds	r3, #1
 800db4e:	617b      	str	r3, [r7, #20]
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	2b07      	cmp	r3, #7
 800db54:	d9d4      	bls.n	800db00 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	693a      	ldr	r2, [r7, #16]
 800db5a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db60:	f1a3 0220 	sub.w	r2, r3, #32
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800db68:	bf00      	nop
 800db6a:	3718      	adds	r7, #24
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	69db      	ldr	r3, [r3, #28]
 800db7c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6a1b      	ldr	r3, [r3, #32]
 800db82:	2b1f      	cmp	r3, #31
 800db84:	d93a      	bls.n	800dbfc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800db86:	2300      	movs	r3, #0
 800db88:	617b      	str	r3, [r7, #20]
 800db8a:	e02b      	b.n	800dbe4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	60fb      	str	r3, [r7, #12]
      tmp++;
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	3301      	adds	r3, #1
 800db96:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	021a      	lsls	r2, r3, #8
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	3301      	adds	r3, #1
 800dba8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	041a      	lsls	r2, r3, #16
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	061a      	lsls	r2, r3, #24
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f107 020c 	add.w	r2, r7, #12
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f002 fad4 	bl	8010186 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	617b      	str	r3, [r7, #20]
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	2b07      	cmp	r3, #7
 800dbe8:	d9d0      	bls.n	800db8c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	693a      	ldr	r2, [r7, #16]
 800dbee:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a1b      	ldr	r3, [r3, #32]
 800dbf4:	f1a3 0220 	sub.w	r2, r3, #32
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	621a      	str	r2, [r3, #32]
  }
}
 800dbfc:	bf00      	nop
 800dbfe:	3718      	adds	r7, #24
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800dc0c:	bf00      	nop
 800dc0e:	370c      	adds	r7, #12
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800dc20:	bf00      	nop
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800dc34:	bf00      	nop
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d101      	bne.n	800dc66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	e10f      	b.n	800de86 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a87      	ldr	r2, [pc, #540]	; (800de90 <HAL_SPI_Init+0x23c>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d00f      	beq.n	800dc96 <HAL_SPI_Init+0x42>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a86      	ldr	r2, [pc, #536]	; (800de94 <HAL_SPI_Init+0x240>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d00a      	beq.n	800dc96 <HAL_SPI_Init+0x42>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a84      	ldr	r2, [pc, #528]	; (800de98 <HAL_SPI_Init+0x244>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d005      	beq.n	800dc96 <HAL_SPI_Init+0x42>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	2b0f      	cmp	r3, #15
 800dc90:	d901      	bls.n	800dc96 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dc92:	2301      	movs	r3, #1
 800dc94:	e0f7      	b.n	800de86 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 f900 	bl	800de9c <SPI_GetPacketSize>
 800dc9c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a7b      	ldr	r2, [pc, #492]	; (800de90 <HAL_SPI_Init+0x23c>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d00c      	beq.n	800dcc2 <HAL_SPI_Init+0x6e>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a79      	ldr	r2, [pc, #484]	; (800de94 <HAL_SPI_Init+0x240>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d007      	beq.n	800dcc2 <HAL_SPI_Init+0x6e>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a78      	ldr	r2, [pc, #480]	; (800de98 <HAL_SPI_Init+0x244>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d002      	beq.n	800dcc2 <HAL_SPI_Init+0x6e>
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2b08      	cmp	r3, #8
 800dcc0:	d811      	bhi.n	800dce6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dcc6:	4a72      	ldr	r2, [pc, #456]	; (800de90 <HAL_SPI_Init+0x23c>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d009      	beq.n	800dce0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a70      	ldr	r2, [pc, #448]	; (800de94 <HAL_SPI_Init+0x240>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d004      	beq.n	800dce0 <HAL_SPI_Init+0x8c>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a6f      	ldr	r2, [pc, #444]	; (800de98 <HAL_SPI_Init+0x244>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d104      	bne.n	800dcea <HAL_SPI_Init+0x96>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2b10      	cmp	r3, #16
 800dce4:	d901      	bls.n	800dcea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	e0cd      	b.n	800de86 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d106      	bne.n	800dd04 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7f4 f9c2 	bl	8002088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2202      	movs	r2, #2
 800dd08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f022 0201 	bic.w	r2, r2, #1
 800dd1a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800dd26:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	699b      	ldr	r3, [r3, #24]
 800dd2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dd30:	d119      	bne.n	800dd66 <HAL_SPI_Init+0x112>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd3a:	d103      	bne.n	800dd44 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d008      	beq.n	800dd56 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d10c      	bne.n	800dd66 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dd50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd54:	d107      	bne.n	800dd66 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dd64:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d00f      	beq.n	800dd92 <HAL_SPI_Init+0x13e>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	2b06      	cmp	r3, #6
 800dd78:	d90b      	bls.n	800dd92 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	430a      	orrs	r2, r1
 800dd8e:	601a      	str	r2, [r3, #0]
 800dd90:	e007      	b.n	800dda2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dda0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	69da      	ldr	r2, [r3, #28]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddaa:	431a      	orrs	r2, r3
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	431a      	orrs	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb4:	ea42 0103 	orr.w	r1, r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	68da      	ldr	r2, [r3, #12]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	430a      	orrs	r2, r1
 800ddc2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddcc:	431a      	orrs	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd2:	431a      	orrs	r2, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	699b      	ldr	r3, [r3, #24]
 800ddd8:	431a      	orrs	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	691b      	ldr	r3, [r3, #16]
 800ddde:	431a      	orrs	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	695b      	ldr	r3, [r3, #20]
 800dde4:	431a      	orrs	r2, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6a1b      	ldr	r3, [r3, #32]
 800ddea:	431a      	orrs	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	431a      	orrs	r2, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddf6:	431a      	orrs	r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	431a      	orrs	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de02:	ea42 0103 	orr.w	r1, r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	430a      	orrs	r2, r1
 800de10:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d113      	bne.n	800de42 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de2c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de40:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f022 0201 	bic.w	r2, r2, #1
 800de50:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d00a      	beq.n	800de74 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	430a      	orrs	r2, r1
 800de72:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2201      	movs	r2, #1
 800de80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	40013000 	.word	0x40013000
 800de94:	40003800 	.word	0x40003800
 800de98:	40003c00 	.word	0x40003c00

0800de9c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dea8:	095b      	lsrs	r3, r3, #5
 800deaa:	3301      	adds	r3, #1
 800deac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	3301      	adds	r3, #1
 800deb4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	3307      	adds	r3, #7
 800deba:	08db      	lsrs	r3, r3, #3
 800debc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	fb02 f303 	mul.w	r3, r2, r3
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr

0800ded2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ded2:	b580      	push	{r7, lr}
 800ded4:	b082      	sub	sp, #8
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e049      	b.n	800df78 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800deea:	b2db      	uxtb	r3, r3
 800deec:	2b00      	cmp	r3, #0
 800deee:	d106      	bne.n	800defe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f7f4 fb17 	bl	800252c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2202      	movs	r2, #2
 800df02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	3304      	adds	r3, #4
 800df0e:	4619      	mov	r1, r3
 800df10:	4610      	mov	r0, r2
 800df12:	f000 faf1 	bl	800e4f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2201      	movs	r2, #1
 800df1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2201      	movs	r2, #1
 800df22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2201      	movs	r2, #1
 800df2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2201      	movs	r2, #1
 800df32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2201      	movs	r2, #1
 800df3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2201      	movs	r2, #1
 800df42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2201      	movs	r2, #1
 800df4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2201      	movs	r2, #1
 800df52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2201      	movs	r2, #1
 800df5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2201      	movs	r2, #1
 800df62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2201      	movs	r2, #1
 800df6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2201      	movs	r2, #1
 800df72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d101      	bne.n	800df92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800df8e:	2301      	movs	r3, #1
 800df90:	e049      	b.n	800e026 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f7f4 f92a 	bl	8002200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2202      	movs	r2, #2
 800dfb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	4610      	mov	r0, r2
 800dfc0:	f000 fa9a 	bl	800e4f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2201      	movs	r2, #1
 800dff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2201      	movs	r2, #1
 800e008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b082      	sub	sp, #8
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	691b      	ldr	r3, [r3, #16]
 800e03c:	f003 0302 	and.w	r3, r3, #2
 800e040:	2b02      	cmp	r3, #2
 800e042:	d122      	bne.n	800e08a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	f003 0302 	and.w	r3, r3, #2
 800e04e:	2b02      	cmp	r3, #2
 800e050:	d11b      	bne.n	800e08a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f06f 0202 	mvn.w	r2, #2
 800e05a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2201      	movs	r2, #1
 800e060:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	699b      	ldr	r3, [r3, #24]
 800e068:	f003 0303 	and.w	r3, r3, #3
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d003      	beq.n	800e078 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 fa23 	bl	800e4bc <HAL_TIM_IC_CaptureCallback>
 800e076:	e005      	b.n	800e084 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 fa15 	bl	800e4a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 fa26 	bl	800e4d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	691b      	ldr	r3, [r3, #16]
 800e090:	f003 0304 	and.w	r3, r3, #4
 800e094:	2b04      	cmp	r3, #4
 800e096:	d122      	bne.n	800e0de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	68db      	ldr	r3, [r3, #12]
 800e09e:	f003 0304 	and.w	r3, r3, #4
 800e0a2:	2b04      	cmp	r3, #4
 800e0a4:	d11b      	bne.n	800e0de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f06f 0204 	mvn.w	r2, #4
 800e0ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2202      	movs	r2, #2
 800e0b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	699b      	ldr	r3, [r3, #24]
 800e0bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d003      	beq.n	800e0cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 f9f9 	bl	800e4bc <HAL_TIM_IC_CaptureCallback>
 800e0ca:	e005      	b.n	800e0d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 f9eb 	bl	800e4a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f9fc 	bl	800e4d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	691b      	ldr	r3, [r3, #16]
 800e0e4:	f003 0308 	and.w	r3, r3, #8
 800e0e8:	2b08      	cmp	r3, #8
 800e0ea:	d122      	bne.n	800e132 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	f003 0308 	and.w	r3, r3, #8
 800e0f6:	2b08      	cmp	r3, #8
 800e0f8:	d11b      	bne.n	800e132 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f06f 0208 	mvn.w	r2, #8
 800e102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2204      	movs	r2, #4
 800e108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	69db      	ldr	r3, [r3, #28]
 800e110:	f003 0303 	and.w	r3, r3, #3
 800e114:	2b00      	cmp	r3, #0
 800e116:	d003      	beq.n	800e120 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f000 f9cf 	bl	800e4bc <HAL_TIM_IC_CaptureCallback>
 800e11e:	e005      	b.n	800e12c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 f9c1 	bl	800e4a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 f9d2 	bl	800e4d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	691b      	ldr	r3, [r3, #16]
 800e138:	f003 0310 	and.w	r3, r3, #16
 800e13c:	2b10      	cmp	r3, #16
 800e13e:	d122      	bne.n	800e186 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	f003 0310 	and.w	r3, r3, #16
 800e14a:	2b10      	cmp	r3, #16
 800e14c:	d11b      	bne.n	800e186 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f06f 0210 	mvn.w	r2, #16
 800e156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2208      	movs	r2, #8
 800e15c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	69db      	ldr	r3, [r3, #28]
 800e164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d003      	beq.n	800e174 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 f9a5 	bl	800e4bc <HAL_TIM_IC_CaptureCallback>
 800e172:	e005      	b.n	800e180 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 f997 	bl	800e4a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 f9a8 	bl	800e4d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	691b      	ldr	r3, [r3, #16]
 800e18c:	f003 0301 	and.w	r3, r3, #1
 800e190:	2b01      	cmp	r3, #1
 800e192:	d10e      	bne.n	800e1b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	f003 0301 	and.w	r3, r3, #1
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d107      	bne.n	800e1b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f06f 0201 	mvn.w	r2, #1
 800e1aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 f971 	bl	800e494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1bc:	2b80      	cmp	r3, #128	; 0x80
 800e1be:	d10e      	bne.n	800e1de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1ca:	2b80      	cmp	r3, #128	; 0x80
 800e1cc:	d107      	bne.n	800e1de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e1d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 fdaf 	bl	800ed3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	691b      	ldr	r3, [r3, #16]
 800e1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1ec:	d10e      	bne.n	800e20c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1f8:	2b80      	cmp	r3, #128	; 0x80
 800e1fa:	d107      	bne.n	800e20c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 fda2 	bl	800ed50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e216:	2b40      	cmp	r3, #64	; 0x40
 800e218:	d10e      	bne.n	800e238 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e224:	2b40      	cmp	r3, #64	; 0x40
 800e226:	d107      	bne.n	800e238 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 f956 	bl	800e4e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	f003 0320 	and.w	r3, r3, #32
 800e242:	2b20      	cmp	r3, #32
 800e244:	d10e      	bne.n	800e264 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	f003 0320 	and.w	r3, r3, #32
 800e250:	2b20      	cmp	r3, #32
 800e252:	d107      	bne.n	800e264 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f06f 0220 	mvn.w	r2, #32
 800e25c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 fd62 	bl	800ed28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e264:	bf00      	nop
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e282:	2b01      	cmp	r3, #1
 800e284:	d101      	bne.n	800e28a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e286:	2302      	movs	r3, #2
 800e288:	e0ff      	b.n	800e48a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2201      	movs	r2, #1
 800e28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2b14      	cmp	r3, #20
 800e296:	f200 80f0 	bhi.w	800e47a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e29a:	a201      	add	r2, pc, #4	; (adr r2, 800e2a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a0:	0800e2f5 	.word	0x0800e2f5
 800e2a4:	0800e47b 	.word	0x0800e47b
 800e2a8:	0800e47b 	.word	0x0800e47b
 800e2ac:	0800e47b 	.word	0x0800e47b
 800e2b0:	0800e335 	.word	0x0800e335
 800e2b4:	0800e47b 	.word	0x0800e47b
 800e2b8:	0800e47b 	.word	0x0800e47b
 800e2bc:	0800e47b 	.word	0x0800e47b
 800e2c0:	0800e377 	.word	0x0800e377
 800e2c4:	0800e47b 	.word	0x0800e47b
 800e2c8:	0800e47b 	.word	0x0800e47b
 800e2cc:	0800e47b 	.word	0x0800e47b
 800e2d0:	0800e3b7 	.word	0x0800e3b7
 800e2d4:	0800e47b 	.word	0x0800e47b
 800e2d8:	0800e47b 	.word	0x0800e47b
 800e2dc:	0800e47b 	.word	0x0800e47b
 800e2e0:	0800e3f9 	.word	0x0800e3f9
 800e2e4:	0800e47b 	.word	0x0800e47b
 800e2e8:	0800e47b 	.word	0x0800e47b
 800e2ec:	0800e47b 	.word	0x0800e47b
 800e2f0:	0800e439 	.word	0x0800e439
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	68b9      	ldr	r1, [r7, #8]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f000 f9a2 	bl	800e644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	699a      	ldr	r2, [r3, #24]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f042 0208 	orr.w	r2, r2, #8
 800e30e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	699a      	ldr	r2, [r3, #24]
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f022 0204 	bic.w	r2, r2, #4
 800e31e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	6999      	ldr	r1, [r3, #24]
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	691a      	ldr	r2, [r3, #16]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	430a      	orrs	r2, r1
 800e330:	619a      	str	r2, [r3, #24]
      break;
 800e332:	e0a5      	b.n	800e480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	68b9      	ldr	r1, [r7, #8]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f000 fa12 	bl	800e764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	699a      	ldr	r2, [r3, #24]
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e34e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	699a      	ldr	r2, [r3, #24]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e35e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	6999      	ldr	r1, [r3, #24]
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	021a      	lsls	r2, r3, #8
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	430a      	orrs	r2, r1
 800e372:	619a      	str	r2, [r3, #24]
      break;
 800e374:	e084      	b.n	800e480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68b9      	ldr	r1, [r7, #8]
 800e37c:	4618      	mov	r0, r3
 800e37e:	f000 fa7b 	bl	800e878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	69da      	ldr	r2, [r3, #28]
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f042 0208 	orr.w	r2, r2, #8
 800e390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	69da      	ldr	r2, [r3, #28]
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f022 0204 	bic.w	r2, r2, #4
 800e3a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	69d9      	ldr	r1, [r3, #28]
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	691a      	ldr	r2, [r3, #16]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	430a      	orrs	r2, r1
 800e3b2:	61da      	str	r2, [r3, #28]
      break;
 800e3b4:	e064      	b.n	800e480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	68b9      	ldr	r1, [r7, #8]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f000 fae3 	bl	800e988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	69da      	ldr	r2, [r3, #28]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e3d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	69da      	ldr	r2, [r3, #28]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	69d9      	ldr	r1, [r3, #28]
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	691b      	ldr	r3, [r3, #16]
 800e3ec:	021a      	lsls	r2, r3, #8
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	430a      	orrs	r2, r1
 800e3f4:	61da      	str	r2, [r3, #28]
      break;
 800e3f6:	e043      	b.n	800e480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	68b9      	ldr	r1, [r7, #8]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f000 fb2c 	bl	800ea5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f042 0208 	orr.w	r2, r2, #8
 800e412:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f022 0204 	bic.w	r2, r2, #4
 800e422:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	691a      	ldr	r2, [r3, #16]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	430a      	orrs	r2, r1
 800e434:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e436:	e023      	b.n	800e480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	68b9      	ldr	r1, [r7, #8]
 800e43e:	4618      	mov	r0, r3
 800e440:	f000 fb70 	bl	800eb24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e452:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e462:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	021a      	lsls	r2, r3, #8
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	430a      	orrs	r2, r1
 800e476:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e478:	e002      	b.n	800e480 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e47a:	2301      	movs	r3, #1
 800e47c:	75fb      	strb	r3, [r7, #23]
      break;
 800e47e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2200      	movs	r2, #0
 800e484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e488:	7dfb      	ldrb	r3, [r7, #23]
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3718      	adds	r7, #24
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop

0800e494 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e49c:	bf00      	nop
 800e49e:	370c      	adds	r7, #12
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr

0800e4a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b083      	sub	sp, #12
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e4b0:	bf00      	nop
 800e4b2:	370c      	adds	r7, #12
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e4c4:	bf00      	nop
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e4d8:	bf00      	nop
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e4ec:	bf00      	nop
 800e4ee:	370c      	adds	r7, #12
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b085      	sub	sp, #20
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	4a44      	ldr	r2, [pc, #272]	; (800e61c <TIM_Base_SetConfig+0x124>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d013      	beq.n	800e538 <TIM_Base_SetConfig+0x40>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e516:	d00f      	beq.n	800e538 <TIM_Base_SetConfig+0x40>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4a41      	ldr	r2, [pc, #260]	; (800e620 <TIM_Base_SetConfig+0x128>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d00b      	beq.n	800e538 <TIM_Base_SetConfig+0x40>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	4a40      	ldr	r2, [pc, #256]	; (800e624 <TIM_Base_SetConfig+0x12c>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d007      	beq.n	800e538 <TIM_Base_SetConfig+0x40>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4a3f      	ldr	r2, [pc, #252]	; (800e628 <TIM_Base_SetConfig+0x130>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d003      	beq.n	800e538 <TIM_Base_SetConfig+0x40>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	4a3e      	ldr	r2, [pc, #248]	; (800e62c <TIM_Base_SetConfig+0x134>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d108      	bne.n	800e54a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e53e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	68fa      	ldr	r2, [r7, #12]
 800e546:	4313      	orrs	r3, r2
 800e548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4a33      	ldr	r2, [pc, #204]	; (800e61c <TIM_Base_SetConfig+0x124>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d027      	beq.n	800e5a2 <TIM_Base_SetConfig+0xaa>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e558:	d023      	beq.n	800e5a2 <TIM_Base_SetConfig+0xaa>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4a30      	ldr	r2, [pc, #192]	; (800e620 <TIM_Base_SetConfig+0x128>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d01f      	beq.n	800e5a2 <TIM_Base_SetConfig+0xaa>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a2f      	ldr	r2, [pc, #188]	; (800e624 <TIM_Base_SetConfig+0x12c>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d01b      	beq.n	800e5a2 <TIM_Base_SetConfig+0xaa>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4a2e      	ldr	r2, [pc, #184]	; (800e628 <TIM_Base_SetConfig+0x130>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d017      	beq.n	800e5a2 <TIM_Base_SetConfig+0xaa>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4a2d      	ldr	r2, [pc, #180]	; (800e62c <TIM_Base_SetConfig+0x134>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d013      	beq.n	800e5a2 <TIM_Base_SetConfig+0xaa>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4a2c      	ldr	r2, [pc, #176]	; (800e630 <TIM_Base_SetConfig+0x138>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d00f      	beq.n	800e5a2 <TIM_Base_SetConfig+0xaa>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4a2b      	ldr	r2, [pc, #172]	; (800e634 <TIM_Base_SetConfig+0x13c>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d00b      	beq.n	800e5a2 <TIM_Base_SetConfig+0xaa>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4a2a      	ldr	r2, [pc, #168]	; (800e638 <TIM_Base_SetConfig+0x140>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d007      	beq.n	800e5a2 <TIM_Base_SetConfig+0xaa>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	4a29      	ldr	r2, [pc, #164]	; (800e63c <TIM_Base_SetConfig+0x144>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d003      	beq.n	800e5a2 <TIM_Base_SetConfig+0xaa>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	4a28      	ldr	r2, [pc, #160]	; (800e640 <TIM_Base_SetConfig+0x148>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d108      	bne.n	800e5b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	695b      	ldr	r3, [r3, #20]
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	689a      	ldr	r2, [r3, #8]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	4a10      	ldr	r2, [pc, #64]	; (800e61c <TIM_Base_SetConfig+0x124>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d00f      	beq.n	800e600 <TIM_Base_SetConfig+0x108>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	4a12      	ldr	r2, [pc, #72]	; (800e62c <TIM_Base_SetConfig+0x134>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d00b      	beq.n	800e600 <TIM_Base_SetConfig+0x108>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	4a11      	ldr	r2, [pc, #68]	; (800e630 <TIM_Base_SetConfig+0x138>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d007      	beq.n	800e600 <TIM_Base_SetConfig+0x108>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	4a10      	ldr	r2, [pc, #64]	; (800e634 <TIM_Base_SetConfig+0x13c>)
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d003      	beq.n	800e600 <TIM_Base_SetConfig+0x108>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4a0f      	ldr	r2, [pc, #60]	; (800e638 <TIM_Base_SetConfig+0x140>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d103      	bne.n	800e608 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	691a      	ldr	r2, [r3, #16]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2201      	movs	r2, #1
 800e60c:	615a      	str	r2, [r3, #20]
}
 800e60e:	bf00      	nop
 800e610:	3714      	adds	r7, #20
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr
 800e61a:	bf00      	nop
 800e61c:	40010000 	.word	0x40010000
 800e620:	40000400 	.word	0x40000400
 800e624:	40000800 	.word	0x40000800
 800e628:	40000c00 	.word	0x40000c00
 800e62c:	40010400 	.word	0x40010400
 800e630:	40014000 	.word	0x40014000
 800e634:	40014400 	.word	0x40014400
 800e638:	40014800 	.word	0x40014800
 800e63c:	4000e000 	.word	0x4000e000
 800e640:	4000e400 	.word	0x4000e400

0800e644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e644:	b480      	push	{r7}
 800e646:	b087      	sub	sp, #28
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6a1b      	ldr	r3, [r3, #32]
 800e652:	f023 0201 	bic.w	r2, r3, #1
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a1b      	ldr	r3, [r3, #32]
 800e65e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	699b      	ldr	r3, [r3, #24]
 800e66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	4b37      	ldr	r3, [pc, #220]	; (800e74c <TIM_OC1_SetConfig+0x108>)
 800e670:	4013      	ands	r3, r2
 800e672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f023 0303 	bic.w	r3, r3, #3
 800e67a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	4313      	orrs	r3, r2
 800e684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	f023 0302 	bic.w	r3, r3, #2
 800e68c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	697a      	ldr	r2, [r7, #20]
 800e694:	4313      	orrs	r3, r2
 800e696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	4a2d      	ldr	r2, [pc, #180]	; (800e750 <TIM_OC1_SetConfig+0x10c>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d00f      	beq.n	800e6c0 <TIM_OC1_SetConfig+0x7c>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	4a2c      	ldr	r2, [pc, #176]	; (800e754 <TIM_OC1_SetConfig+0x110>)
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d00b      	beq.n	800e6c0 <TIM_OC1_SetConfig+0x7c>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4a2b      	ldr	r2, [pc, #172]	; (800e758 <TIM_OC1_SetConfig+0x114>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d007      	beq.n	800e6c0 <TIM_OC1_SetConfig+0x7c>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	4a2a      	ldr	r2, [pc, #168]	; (800e75c <TIM_OC1_SetConfig+0x118>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d003      	beq.n	800e6c0 <TIM_OC1_SetConfig+0x7c>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4a29      	ldr	r2, [pc, #164]	; (800e760 <TIM_OC1_SetConfig+0x11c>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d10c      	bne.n	800e6da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	f023 0308 	bic.w	r3, r3, #8
 800e6c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	697a      	ldr	r2, [r7, #20]
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f023 0304 	bic.w	r3, r3, #4
 800e6d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	4a1c      	ldr	r2, [pc, #112]	; (800e750 <TIM_OC1_SetConfig+0x10c>)
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d00f      	beq.n	800e702 <TIM_OC1_SetConfig+0xbe>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	4a1b      	ldr	r2, [pc, #108]	; (800e754 <TIM_OC1_SetConfig+0x110>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d00b      	beq.n	800e702 <TIM_OC1_SetConfig+0xbe>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	4a1a      	ldr	r2, [pc, #104]	; (800e758 <TIM_OC1_SetConfig+0x114>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d007      	beq.n	800e702 <TIM_OC1_SetConfig+0xbe>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	4a19      	ldr	r2, [pc, #100]	; (800e75c <TIM_OC1_SetConfig+0x118>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d003      	beq.n	800e702 <TIM_OC1_SetConfig+0xbe>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	4a18      	ldr	r2, [pc, #96]	; (800e760 <TIM_OC1_SetConfig+0x11c>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d111      	bne.n	800e726 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	695b      	ldr	r3, [r3, #20]
 800e716:	693a      	ldr	r2, [r7, #16]
 800e718:	4313      	orrs	r3, r2
 800e71a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	699b      	ldr	r3, [r3, #24]
 800e720:	693a      	ldr	r2, [r7, #16]
 800e722:	4313      	orrs	r3, r2
 800e724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	693a      	ldr	r2, [r7, #16]
 800e72a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	685a      	ldr	r2, [r3, #4]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	697a      	ldr	r2, [r7, #20]
 800e73e:	621a      	str	r2, [r3, #32]
}
 800e740:	bf00      	nop
 800e742:	371c      	adds	r7, #28
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr
 800e74c:	fffeff8f 	.word	0xfffeff8f
 800e750:	40010000 	.word	0x40010000
 800e754:	40010400 	.word	0x40010400
 800e758:	40014000 	.word	0x40014000
 800e75c:	40014400 	.word	0x40014400
 800e760:	40014800 	.word	0x40014800

0800e764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e764:	b480      	push	{r7}
 800e766:	b087      	sub	sp, #28
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6a1b      	ldr	r3, [r3, #32]
 800e772:	f023 0210 	bic.w	r2, r3, #16
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a1b      	ldr	r3, [r3, #32]
 800e77e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	4b34      	ldr	r3, [pc, #208]	; (800e860 <TIM_OC2_SetConfig+0xfc>)
 800e790:	4013      	ands	r3, r2
 800e792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e79a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	021b      	lsls	r3, r3, #8
 800e7a2:	68fa      	ldr	r2, [r7, #12]
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	f023 0320 	bic.w	r3, r3, #32
 800e7ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	011b      	lsls	r3, r3, #4
 800e7b6:	697a      	ldr	r2, [r7, #20]
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4a29      	ldr	r2, [pc, #164]	; (800e864 <TIM_OC2_SetConfig+0x100>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d003      	beq.n	800e7cc <TIM_OC2_SetConfig+0x68>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	4a28      	ldr	r2, [pc, #160]	; (800e868 <TIM_OC2_SetConfig+0x104>)
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d10d      	bne.n	800e7e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	011b      	lsls	r3, r3, #4
 800e7da:	697a      	ldr	r2, [r7, #20]
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	4a1e      	ldr	r2, [pc, #120]	; (800e864 <TIM_OC2_SetConfig+0x100>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d00f      	beq.n	800e810 <TIM_OC2_SetConfig+0xac>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4a1d      	ldr	r2, [pc, #116]	; (800e868 <TIM_OC2_SetConfig+0x104>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d00b      	beq.n	800e810 <TIM_OC2_SetConfig+0xac>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	4a1c      	ldr	r2, [pc, #112]	; (800e86c <TIM_OC2_SetConfig+0x108>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d007      	beq.n	800e810 <TIM_OC2_SetConfig+0xac>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	4a1b      	ldr	r2, [pc, #108]	; (800e870 <TIM_OC2_SetConfig+0x10c>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d003      	beq.n	800e810 <TIM_OC2_SetConfig+0xac>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	4a1a      	ldr	r2, [pc, #104]	; (800e874 <TIM_OC2_SetConfig+0x110>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d113      	bne.n	800e838 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e81e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	695b      	ldr	r3, [r3, #20]
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	4313      	orrs	r3, r2
 800e82a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	699b      	ldr	r3, [r3, #24]
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	693a      	ldr	r2, [r7, #16]
 800e834:	4313      	orrs	r3, r2
 800e836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	693a      	ldr	r2, [r7, #16]
 800e83c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	685a      	ldr	r2, [r3, #4]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	697a      	ldr	r2, [r7, #20]
 800e850:	621a      	str	r2, [r3, #32]
}
 800e852:	bf00      	nop
 800e854:	371c      	adds	r7, #28
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	feff8fff 	.word	0xfeff8fff
 800e864:	40010000 	.word	0x40010000
 800e868:	40010400 	.word	0x40010400
 800e86c:	40014000 	.word	0x40014000
 800e870:	40014400 	.word	0x40014400
 800e874:	40014800 	.word	0x40014800

0800e878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e878:	b480      	push	{r7}
 800e87a:	b087      	sub	sp, #28
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6a1b      	ldr	r3, [r3, #32]
 800e886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6a1b      	ldr	r3, [r3, #32]
 800e892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	69db      	ldr	r3, [r3, #28]
 800e89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	4b33      	ldr	r3, [pc, #204]	; (800e970 <TIM_OC3_SetConfig+0xf8>)
 800e8a4:	4013      	ands	r3, r2
 800e8a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f023 0303 	bic.w	r3, r3, #3
 800e8ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e8c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	021b      	lsls	r3, r3, #8
 800e8c8:	697a      	ldr	r2, [r7, #20]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4a28      	ldr	r2, [pc, #160]	; (800e974 <TIM_OC3_SetConfig+0xfc>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d003      	beq.n	800e8de <TIM_OC3_SetConfig+0x66>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	4a27      	ldr	r2, [pc, #156]	; (800e978 <TIM_OC3_SetConfig+0x100>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d10d      	bne.n	800e8fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e8e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	021b      	lsls	r3, r3, #8
 800e8ec:	697a      	ldr	r2, [r7, #20]
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e8f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	4a1d      	ldr	r2, [pc, #116]	; (800e974 <TIM_OC3_SetConfig+0xfc>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d00f      	beq.n	800e922 <TIM_OC3_SetConfig+0xaa>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4a1c      	ldr	r2, [pc, #112]	; (800e978 <TIM_OC3_SetConfig+0x100>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d00b      	beq.n	800e922 <TIM_OC3_SetConfig+0xaa>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	4a1b      	ldr	r2, [pc, #108]	; (800e97c <TIM_OC3_SetConfig+0x104>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d007      	beq.n	800e922 <TIM_OC3_SetConfig+0xaa>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4a1a      	ldr	r2, [pc, #104]	; (800e980 <TIM_OC3_SetConfig+0x108>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d003      	beq.n	800e922 <TIM_OC3_SetConfig+0xaa>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4a19      	ldr	r2, [pc, #100]	; (800e984 <TIM_OC3_SetConfig+0x10c>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d113      	bne.n	800e94a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	011b      	lsls	r3, r3, #4
 800e938:	693a      	ldr	r2, [r7, #16]
 800e93a:	4313      	orrs	r3, r2
 800e93c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	699b      	ldr	r3, [r3, #24]
 800e942:	011b      	lsls	r3, r3, #4
 800e944:	693a      	ldr	r2, [r7, #16]
 800e946:	4313      	orrs	r3, r2
 800e948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	693a      	ldr	r2, [r7, #16]
 800e94e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	685a      	ldr	r2, [r3, #4]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	697a      	ldr	r2, [r7, #20]
 800e962:	621a      	str	r2, [r3, #32]
}
 800e964:	bf00      	nop
 800e966:	371c      	adds	r7, #28
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr
 800e970:	fffeff8f 	.word	0xfffeff8f
 800e974:	40010000 	.word	0x40010000
 800e978:	40010400 	.word	0x40010400
 800e97c:	40014000 	.word	0x40014000
 800e980:	40014400 	.word	0x40014400
 800e984:	40014800 	.word	0x40014800

0800e988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e988:	b480      	push	{r7}
 800e98a:	b087      	sub	sp, #28
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a1b      	ldr	r3, [r3, #32]
 800e996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6a1b      	ldr	r3, [r3, #32]
 800e9a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	69db      	ldr	r3, [r3, #28]
 800e9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e9b0:	68fa      	ldr	r2, [r7, #12]
 800e9b2:	4b24      	ldr	r3, [pc, #144]	; (800ea44 <TIM_OC4_SetConfig+0xbc>)
 800e9b4:	4013      	ands	r3, r2
 800e9b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	021b      	lsls	r3, r3, #8
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e9d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	689b      	ldr	r3, [r3, #8]
 800e9d8:	031b      	lsls	r3, r3, #12
 800e9da:	693a      	ldr	r2, [r7, #16]
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a19      	ldr	r2, [pc, #100]	; (800ea48 <TIM_OC4_SetConfig+0xc0>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d00f      	beq.n	800ea08 <TIM_OC4_SetConfig+0x80>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4a18      	ldr	r2, [pc, #96]	; (800ea4c <TIM_OC4_SetConfig+0xc4>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d00b      	beq.n	800ea08 <TIM_OC4_SetConfig+0x80>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	4a17      	ldr	r2, [pc, #92]	; (800ea50 <TIM_OC4_SetConfig+0xc8>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d007      	beq.n	800ea08 <TIM_OC4_SetConfig+0x80>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	4a16      	ldr	r2, [pc, #88]	; (800ea54 <TIM_OC4_SetConfig+0xcc>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d003      	beq.n	800ea08 <TIM_OC4_SetConfig+0x80>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	4a15      	ldr	r2, [pc, #84]	; (800ea58 <TIM_OC4_SetConfig+0xd0>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d109      	bne.n	800ea1c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ea0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	695b      	ldr	r3, [r3, #20]
 800ea14:	019b      	lsls	r3, r3, #6
 800ea16:	697a      	ldr	r2, [r7, #20]
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	685a      	ldr	r2, [r3, #4]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	693a      	ldr	r2, [r7, #16]
 800ea34:	621a      	str	r2, [r3, #32]
}
 800ea36:	bf00      	nop
 800ea38:	371c      	adds	r7, #28
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop
 800ea44:	feff8fff 	.word	0xfeff8fff
 800ea48:	40010000 	.word	0x40010000
 800ea4c:	40010400 	.word	0x40010400
 800ea50:	40014000 	.word	0x40014000
 800ea54:	40014400 	.word	0x40014400
 800ea58:	40014800 	.word	0x40014800

0800ea5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b087      	sub	sp, #28
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a1b      	ldr	r3, [r3, #32]
 800ea6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a1b      	ldr	r3, [r3, #32]
 800ea76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	4b21      	ldr	r3, [pc, #132]	; (800eb0c <TIM_OC5_SetConfig+0xb0>)
 800ea88:	4013      	ands	r3, r2
 800ea8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	4313      	orrs	r3, r2
 800ea94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ea9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	689b      	ldr	r3, [r3, #8]
 800eaa2:	041b      	lsls	r3, r3, #16
 800eaa4:	693a      	ldr	r2, [r7, #16]
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	4a18      	ldr	r2, [pc, #96]	; (800eb10 <TIM_OC5_SetConfig+0xb4>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d00f      	beq.n	800ead2 <TIM_OC5_SetConfig+0x76>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	4a17      	ldr	r2, [pc, #92]	; (800eb14 <TIM_OC5_SetConfig+0xb8>)
 800eab6:	4293      	cmp	r3, r2
 800eab8:	d00b      	beq.n	800ead2 <TIM_OC5_SetConfig+0x76>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4a16      	ldr	r2, [pc, #88]	; (800eb18 <TIM_OC5_SetConfig+0xbc>)
 800eabe:	4293      	cmp	r3, r2
 800eac0:	d007      	beq.n	800ead2 <TIM_OC5_SetConfig+0x76>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	4a15      	ldr	r2, [pc, #84]	; (800eb1c <TIM_OC5_SetConfig+0xc0>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d003      	beq.n	800ead2 <TIM_OC5_SetConfig+0x76>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4a14      	ldr	r2, [pc, #80]	; (800eb20 <TIM_OC5_SetConfig+0xc4>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d109      	bne.n	800eae6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ead8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	695b      	ldr	r3, [r3, #20]
 800eade:	021b      	lsls	r3, r3, #8
 800eae0:	697a      	ldr	r2, [r7, #20]
 800eae2:	4313      	orrs	r3, r2
 800eae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	697a      	ldr	r2, [r7, #20]
 800eaea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	68fa      	ldr	r2, [r7, #12]
 800eaf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	685a      	ldr	r2, [r3, #4]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	693a      	ldr	r2, [r7, #16]
 800eafe:	621a      	str	r2, [r3, #32]
}
 800eb00:	bf00      	nop
 800eb02:	371c      	adds	r7, #28
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr
 800eb0c:	fffeff8f 	.word	0xfffeff8f
 800eb10:	40010000 	.word	0x40010000
 800eb14:	40010400 	.word	0x40010400
 800eb18:	40014000 	.word	0x40014000
 800eb1c:	40014400 	.word	0x40014400
 800eb20:	40014800 	.word	0x40014800

0800eb24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eb24:	b480      	push	{r7}
 800eb26:	b087      	sub	sp, #28
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6a1b      	ldr	r3, [r3, #32]
 800eb32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a1b      	ldr	r3, [r3, #32]
 800eb3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	4b22      	ldr	r3, [pc, #136]	; (800ebd8 <TIM_OC6_SetConfig+0xb4>)
 800eb50:	4013      	ands	r3, r2
 800eb52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	021b      	lsls	r3, r3, #8
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eb66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	051b      	lsls	r3, r3, #20
 800eb6e:	693a      	ldr	r2, [r7, #16]
 800eb70:	4313      	orrs	r3, r2
 800eb72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4a19      	ldr	r2, [pc, #100]	; (800ebdc <TIM_OC6_SetConfig+0xb8>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d00f      	beq.n	800eb9c <TIM_OC6_SetConfig+0x78>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	4a18      	ldr	r2, [pc, #96]	; (800ebe0 <TIM_OC6_SetConfig+0xbc>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d00b      	beq.n	800eb9c <TIM_OC6_SetConfig+0x78>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	4a17      	ldr	r2, [pc, #92]	; (800ebe4 <TIM_OC6_SetConfig+0xc0>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d007      	beq.n	800eb9c <TIM_OC6_SetConfig+0x78>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	4a16      	ldr	r2, [pc, #88]	; (800ebe8 <TIM_OC6_SetConfig+0xc4>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d003      	beq.n	800eb9c <TIM_OC6_SetConfig+0x78>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4a15      	ldr	r2, [pc, #84]	; (800ebec <TIM_OC6_SetConfig+0xc8>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d109      	bne.n	800ebb0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	695b      	ldr	r3, [r3, #20]
 800eba8:	029b      	lsls	r3, r3, #10
 800ebaa:	697a      	ldr	r2, [r7, #20]
 800ebac:	4313      	orrs	r3, r2
 800ebae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	697a      	ldr	r2, [r7, #20]
 800ebb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	68fa      	ldr	r2, [r7, #12]
 800ebba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	685a      	ldr	r2, [r3, #4]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	693a      	ldr	r2, [r7, #16]
 800ebc8:	621a      	str	r2, [r3, #32]
}
 800ebca:	bf00      	nop
 800ebcc:	371c      	adds	r7, #28
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	feff8fff 	.word	0xfeff8fff
 800ebdc:	40010000 	.word	0x40010000
 800ebe0:	40010400 	.word	0x40010400
 800ebe4:	40014000 	.word	0x40014000
 800ebe8:	40014400 	.word	0x40014400
 800ebec:	40014800 	.word	0x40014800

0800ebf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d101      	bne.n	800ec08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ec04:	2302      	movs	r3, #2
 800ec06:	e077      	b.n	800ecf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2202      	movs	r2, #2
 800ec14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	689b      	ldr	r3, [r3, #8]
 800ec26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4a35      	ldr	r2, [pc, #212]	; (800ed04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d004      	beq.n	800ec3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a34      	ldr	r2, [pc, #208]	; (800ed08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d108      	bne.n	800ec4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ec42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a25      	ldr	r2, [pc, #148]	; (800ed04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d02c      	beq.n	800eccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec7a:	d027      	beq.n	800eccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a22      	ldr	r2, [pc, #136]	; (800ed0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d022      	beq.n	800eccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a21      	ldr	r2, [pc, #132]	; (800ed10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d01d      	beq.n	800eccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a1f      	ldr	r2, [pc, #124]	; (800ed14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d018      	beq.n	800eccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a1a      	ldr	r2, [pc, #104]	; (800ed08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d013      	beq.n	800eccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a1b      	ldr	r2, [pc, #108]	; (800ed18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d00e      	beq.n	800eccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4a1a      	ldr	r2, [pc, #104]	; (800ed1c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d009      	beq.n	800eccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a18      	ldr	r2, [pc, #96]	; (800ed20 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d004      	beq.n	800eccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4a17      	ldr	r2, [pc, #92]	; (800ed24 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d10c      	bne.n	800ece6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	689b      	ldr	r3, [r3, #8]
 800ecd8:	68ba      	ldr	r2, [r7, #8]
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	68ba      	ldr	r2, [r7, #8]
 800ece4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecf6:	2300      	movs	r3, #0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3714      	adds	r7, #20
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr
 800ed04:	40010000 	.word	0x40010000
 800ed08:	40010400 	.word	0x40010400
 800ed0c:	40000400 	.word	0x40000400
 800ed10:	40000800 	.word	0x40000800
 800ed14:	40000c00 	.word	0x40000c00
 800ed18:	40001800 	.word	0x40001800
 800ed1c:	40014000 	.word	0x40014000
 800ed20:	4000e000 	.word	0x4000e000
 800ed24:	4000e400 	.word	0x4000e400

0800ed28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ed30:	bf00      	nop
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ed44:	bf00      	nop
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ed58:	bf00      	nop
 800ed5a:	370c      	adds	r7, #12
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d101      	bne.n	800ed76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed72:	2301      	movs	r3, #1
 800ed74:	e042      	b.n	800edfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d106      	bne.n	800ed8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f7f3 fccd 	bl	8002728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2224      	movs	r2, #36	; 0x24
 800ed92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f022 0201 	bic.w	r2, r2, #1
 800eda4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 f82c 	bl	800ee04 <UART_SetConfig>
 800edac:	4603      	mov	r3, r0
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d101      	bne.n	800edb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800edb2:	2301      	movs	r3, #1
 800edb4:	e022      	b.n	800edfc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d002      	beq.n	800edc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fe8c 	bl	800fadc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	685a      	ldr	r2, [r3, #4]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800edd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	689a      	ldr	r2, [r3, #8]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ede2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	f042 0201 	orr.w	r2, r2, #1
 800edf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 ff13 	bl	800fc20 <UART_CheckIdleState>
 800edfa:	4603      	mov	r3, r0
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3708      	adds	r7, #8
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee08:	b092      	sub	sp, #72	; 0x48
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	689a      	ldr	r2, [r3, #8]
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	691b      	ldr	r3, [r3, #16]
 800ee1c:	431a      	orrs	r2, r3
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	695b      	ldr	r3, [r3, #20]
 800ee22:	431a      	orrs	r2, r3
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	69db      	ldr	r3, [r3, #28]
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	681a      	ldr	r2, [r3, #0]
 800ee32:	4bbe      	ldr	r3, [pc, #760]	; (800f12c <UART_SetConfig+0x328>)
 800ee34:	4013      	ands	r3, r2
 800ee36:	697a      	ldr	r2, [r7, #20]
 800ee38:	6812      	ldr	r2, [r2, #0]
 800ee3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee3c:	430b      	orrs	r3, r1
 800ee3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	685b      	ldr	r3, [r3, #4]
 800ee46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	68da      	ldr	r2, [r3, #12]
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	430a      	orrs	r2, r1
 800ee54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	699b      	ldr	r3, [r3, #24]
 800ee5a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4ab3      	ldr	r2, [pc, #716]	; (800f130 <UART_SetConfig+0x32c>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d004      	beq.n	800ee70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	689a      	ldr	r2, [r3, #8]
 800ee76:	4baf      	ldr	r3, [pc, #700]	; (800f134 <UART_SetConfig+0x330>)
 800ee78:	4013      	ands	r3, r2
 800ee7a:	697a      	ldr	r2, [r7, #20]
 800ee7c:	6812      	ldr	r2, [r2, #0]
 800ee7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee80:	430b      	orrs	r3, r1
 800ee82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee8a:	f023 010f 	bic.w	r1, r3, #15
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	430a      	orrs	r2, r1
 800ee98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4aa6      	ldr	r2, [pc, #664]	; (800f138 <UART_SetConfig+0x334>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d177      	bne.n	800ef94 <UART_SetConfig+0x190>
 800eea4:	4ba5      	ldr	r3, [pc, #660]	; (800f13c <UART_SetConfig+0x338>)
 800eea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eea8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eeac:	2b28      	cmp	r3, #40	; 0x28
 800eeae:	d86d      	bhi.n	800ef8c <UART_SetConfig+0x188>
 800eeb0:	a201      	add	r2, pc, #4	; (adr r2, 800eeb8 <UART_SetConfig+0xb4>)
 800eeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb6:	bf00      	nop
 800eeb8:	0800ef5d 	.word	0x0800ef5d
 800eebc:	0800ef8d 	.word	0x0800ef8d
 800eec0:	0800ef8d 	.word	0x0800ef8d
 800eec4:	0800ef8d 	.word	0x0800ef8d
 800eec8:	0800ef8d 	.word	0x0800ef8d
 800eecc:	0800ef8d 	.word	0x0800ef8d
 800eed0:	0800ef8d 	.word	0x0800ef8d
 800eed4:	0800ef8d 	.word	0x0800ef8d
 800eed8:	0800ef65 	.word	0x0800ef65
 800eedc:	0800ef8d 	.word	0x0800ef8d
 800eee0:	0800ef8d 	.word	0x0800ef8d
 800eee4:	0800ef8d 	.word	0x0800ef8d
 800eee8:	0800ef8d 	.word	0x0800ef8d
 800eeec:	0800ef8d 	.word	0x0800ef8d
 800eef0:	0800ef8d 	.word	0x0800ef8d
 800eef4:	0800ef8d 	.word	0x0800ef8d
 800eef8:	0800ef6d 	.word	0x0800ef6d
 800eefc:	0800ef8d 	.word	0x0800ef8d
 800ef00:	0800ef8d 	.word	0x0800ef8d
 800ef04:	0800ef8d 	.word	0x0800ef8d
 800ef08:	0800ef8d 	.word	0x0800ef8d
 800ef0c:	0800ef8d 	.word	0x0800ef8d
 800ef10:	0800ef8d 	.word	0x0800ef8d
 800ef14:	0800ef8d 	.word	0x0800ef8d
 800ef18:	0800ef75 	.word	0x0800ef75
 800ef1c:	0800ef8d 	.word	0x0800ef8d
 800ef20:	0800ef8d 	.word	0x0800ef8d
 800ef24:	0800ef8d 	.word	0x0800ef8d
 800ef28:	0800ef8d 	.word	0x0800ef8d
 800ef2c:	0800ef8d 	.word	0x0800ef8d
 800ef30:	0800ef8d 	.word	0x0800ef8d
 800ef34:	0800ef8d 	.word	0x0800ef8d
 800ef38:	0800ef7d 	.word	0x0800ef7d
 800ef3c:	0800ef8d 	.word	0x0800ef8d
 800ef40:	0800ef8d 	.word	0x0800ef8d
 800ef44:	0800ef8d 	.word	0x0800ef8d
 800ef48:	0800ef8d 	.word	0x0800ef8d
 800ef4c:	0800ef8d 	.word	0x0800ef8d
 800ef50:	0800ef8d 	.word	0x0800ef8d
 800ef54:	0800ef8d 	.word	0x0800ef8d
 800ef58:	0800ef85 	.word	0x0800ef85
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef62:	e326      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800ef64:	2304      	movs	r3, #4
 800ef66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6a:	e322      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800ef6c:	2308      	movs	r3, #8
 800ef6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef72:	e31e      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800ef74:	2310      	movs	r3, #16
 800ef76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7a:	e31a      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800ef7c:	2320      	movs	r3, #32
 800ef7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef82:	e316      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800ef84:	2340      	movs	r3, #64	; 0x40
 800ef86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef8a:	e312      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800ef8c:	2380      	movs	r3, #128	; 0x80
 800ef8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef92:	e30e      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a69      	ldr	r2, [pc, #420]	; (800f140 <UART_SetConfig+0x33c>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d130      	bne.n	800f000 <UART_SetConfig+0x1fc>
 800ef9e:	4b67      	ldr	r3, [pc, #412]	; (800f13c <UART_SetConfig+0x338>)
 800efa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efa2:	f003 0307 	and.w	r3, r3, #7
 800efa6:	2b05      	cmp	r3, #5
 800efa8:	d826      	bhi.n	800eff8 <UART_SetConfig+0x1f4>
 800efaa:	a201      	add	r2, pc, #4	; (adr r2, 800efb0 <UART_SetConfig+0x1ac>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800efc9 	.word	0x0800efc9
 800efb4:	0800efd1 	.word	0x0800efd1
 800efb8:	0800efd9 	.word	0x0800efd9
 800efbc:	0800efe1 	.word	0x0800efe1
 800efc0:	0800efe9 	.word	0x0800efe9
 800efc4:	0800eff1 	.word	0x0800eff1
 800efc8:	2300      	movs	r3, #0
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efce:	e2f0      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800efd0:	2304      	movs	r3, #4
 800efd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd6:	e2ec      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800efd8:	2308      	movs	r3, #8
 800efda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efde:	e2e8      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800efe0:	2310      	movs	r3, #16
 800efe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe6:	e2e4      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800efe8:	2320      	movs	r3, #32
 800efea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efee:	e2e0      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800eff0:	2340      	movs	r3, #64	; 0x40
 800eff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff6:	e2dc      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800eff8:	2380      	movs	r3, #128	; 0x80
 800effa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effe:	e2d8      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a4f      	ldr	r2, [pc, #316]	; (800f144 <UART_SetConfig+0x340>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d130      	bne.n	800f06c <UART_SetConfig+0x268>
 800f00a:	4b4c      	ldr	r3, [pc, #304]	; (800f13c <UART_SetConfig+0x338>)
 800f00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f00e:	f003 0307 	and.w	r3, r3, #7
 800f012:	2b05      	cmp	r3, #5
 800f014:	d826      	bhi.n	800f064 <UART_SetConfig+0x260>
 800f016:	a201      	add	r2, pc, #4	; (adr r2, 800f01c <UART_SetConfig+0x218>)
 800f018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f01c:	0800f035 	.word	0x0800f035
 800f020:	0800f03d 	.word	0x0800f03d
 800f024:	0800f045 	.word	0x0800f045
 800f028:	0800f04d 	.word	0x0800f04d
 800f02c:	0800f055 	.word	0x0800f055
 800f030:	0800f05d 	.word	0x0800f05d
 800f034:	2300      	movs	r3, #0
 800f036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03a:	e2ba      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f03c:	2304      	movs	r3, #4
 800f03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f042:	e2b6      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f044:	2308      	movs	r3, #8
 800f046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04a:	e2b2      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f04c:	2310      	movs	r3, #16
 800f04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f052:	e2ae      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f054:	2320      	movs	r3, #32
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05a:	e2aa      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f05c:	2340      	movs	r3, #64	; 0x40
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f062:	e2a6      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f064:	2380      	movs	r3, #128	; 0x80
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06a:	e2a2      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a35      	ldr	r2, [pc, #212]	; (800f148 <UART_SetConfig+0x344>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d130      	bne.n	800f0d8 <UART_SetConfig+0x2d4>
 800f076:	4b31      	ldr	r3, [pc, #196]	; (800f13c <UART_SetConfig+0x338>)
 800f078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f07a:	f003 0307 	and.w	r3, r3, #7
 800f07e:	2b05      	cmp	r3, #5
 800f080:	d826      	bhi.n	800f0d0 <UART_SetConfig+0x2cc>
 800f082:	a201      	add	r2, pc, #4	; (adr r2, 800f088 <UART_SetConfig+0x284>)
 800f084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f088:	0800f0a1 	.word	0x0800f0a1
 800f08c:	0800f0a9 	.word	0x0800f0a9
 800f090:	0800f0b1 	.word	0x0800f0b1
 800f094:	0800f0b9 	.word	0x0800f0b9
 800f098:	0800f0c1 	.word	0x0800f0c1
 800f09c:	0800f0c9 	.word	0x0800f0c9
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a6:	e284      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f0a8:	2304      	movs	r3, #4
 800f0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ae:	e280      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f0b0:	2308      	movs	r3, #8
 800f0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b6:	e27c      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f0b8:	2310      	movs	r3, #16
 800f0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0be:	e278      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f0c0:	2320      	movs	r3, #32
 800f0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c6:	e274      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f0c8:	2340      	movs	r3, #64	; 0x40
 800f0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ce:	e270      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f0d0:	2380      	movs	r3, #128	; 0x80
 800f0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d6:	e26c      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	4a1b      	ldr	r2, [pc, #108]	; (800f14c <UART_SetConfig+0x348>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d142      	bne.n	800f168 <UART_SetConfig+0x364>
 800f0e2:	4b16      	ldr	r3, [pc, #88]	; (800f13c <UART_SetConfig+0x338>)
 800f0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0e6:	f003 0307 	and.w	r3, r3, #7
 800f0ea:	2b05      	cmp	r3, #5
 800f0ec:	d838      	bhi.n	800f160 <UART_SetConfig+0x35c>
 800f0ee:	a201      	add	r2, pc, #4	; (adr r2, 800f0f4 <UART_SetConfig+0x2f0>)
 800f0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f4:	0800f10d 	.word	0x0800f10d
 800f0f8:	0800f115 	.word	0x0800f115
 800f0fc:	0800f11d 	.word	0x0800f11d
 800f100:	0800f125 	.word	0x0800f125
 800f104:	0800f151 	.word	0x0800f151
 800f108:	0800f159 	.word	0x0800f159
 800f10c:	2300      	movs	r3, #0
 800f10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f112:	e24e      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f114:	2304      	movs	r3, #4
 800f116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f11a:	e24a      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f11c:	2308      	movs	r3, #8
 800f11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f122:	e246      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f124:	2310      	movs	r3, #16
 800f126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f12a:	e242      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f12c:	cfff69f3 	.word	0xcfff69f3
 800f130:	58000c00 	.word	0x58000c00
 800f134:	11fff4ff 	.word	0x11fff4ff
 800f138:	40011000 	.word	0x40011000
 800f13c:	58024400 	.word	0x58024400
 800f140:	40004400 	.word	0x40004400
 800f144:	40004800 	.word	0x40004800
 800f148:	40004c00 	.word	0x40004c00
 800f14c:	40005000 	.word	0x40005000
 800f150:	2320      	movs	r3, #32
 800f152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f156:	e22c      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f158:	2340      	movs	r3, #64	; 0x40
 800f15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15e:	e228      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f160:	2380      	movs	r3, #128	; 0x80
 800f162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f166:	e224      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	4ab1      	ldr	r2, [pc, #708]	; (800f434 <UART_SetConfig+0x630>)
 800f16e:	4293      	cmp	r3, r2
 800f170:	d176      	bne.n	800f260 <UART_SetConfig+0x45c>
 800f172:	4bb1      	ldr	r3, [pc, #708]	; (800f438 <UART_SetConfig+0x634>)
 800f174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f17a:	2b28      	cmp	r3, #40	; 0x28
 800f17c:	d86c      	bhi.n	800f258 <UART_SetConfig+0x454>
 800f17e:	a201      	add	r2, pc, #4	; (adr r2, 800f184 <UART_SetConfig+0x380>)
 800f180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f184:	0800f229 	.word	0x0800f229
 800f188:	0800f259 	.word	0x0800f259
 800f18c:	0800f259 	.word	0x0800f259
 800f190:	0800f259 	.word	0x0800f259
 800f194:	0800f259 	.word	0x0800f259
 800f198:	0800f259 	.word	0x0800f259
 800f19c:	0800f259 	.word	0x0800f259
 800f1a0:	0800f259 	.word	0x0800f259
 800f1a4:	0800f231 	.word	0x0800f231
 800f1a8:	0800f259 	.word	0x0800f259
 800f1ac:	0800f259 	.word	0x0800f259
 800f1b0:	0800f259 	.word	0x0800f259
 800f1b4:	0800f259 	.word	0x0800f259
 800f1b8:	0800f259 	.word	0x0800f259
 800f1bc:	0800f259 	.word	0x0800f259
 800f1c0:	0800f259 	.word	0x0800f259
 800f1c4:	0800f239 	.word	0x0800f239
 800f1c8:	0800f259 	.word	0x0800f259
 800f1cc:	0800f259 	.word	0x0800f259
 800f1d0:	0800f259 	.word	0x0800f259
 800f1d4:	0800f259 	.word	0x0800f259
 800f1d8:	0800f259 	.word	0x0800f259
 800f1dc:	0800f259 	.word	0x0800f259
 800f1e0:	0800f259 	.word	0x0800f259
 800f1e4:	0800f241 	.word	0x0800f241
 800f1e8:	0800f259 	.word	0x0800f259
 800f1ec:	0800f259 	.word	0x0800f259
 800f1f0:	0800f259 	.word	0x0800f259
 800f1f4:	0800f259 	.word	0x0800f259
 800f1f8:	0800f259 	.word	0x0800f259
 800f1fc:	0800f259 	.word	0x0800f259
 800f200:	0800f259 	.word	0x0800f259
 800f204:	0800f249 	.word	0x0800f249
 800f208:	0800f259 	.word	0x0800f259
 800f20c:	0800f259 	.word	0x0800f259
 800f210:	0800f259 	.word	0x0800f259
 800f214:	0800f259 	.word	0x0800f259
 800f218:	0800f259 	.word	0x0800f259
 800f21c:	0800f259 	.word	0x0800f259
 800f220:	0800f259 	.word	0x0800f259
 800f224:	0800f251 	.word	0x0800f251
 800f228:	2301      	movs	r3, #1
 800f22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f22e:	e1c0      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f230:	2304      	movs	r3, #4
 800f232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f236:	e1bc      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f238:	2308      	movs	r3, #8
 800f23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f23e:	e1b8      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f240:	2310      	movs	r3, #16
 800f242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f246:	e1b4      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f248:	2320      	movs	r3, #32
 800f24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f24e:	e1b0      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f250:	2340      	movs	r3, #64	; 0x40
 800f252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f256:	e1ac      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f258:	2380      	movs	r3, #128	; 0x80
 800f25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f25e:	e1a8      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4a75      	ldr	r2, [pc, #468]	; (800f43c <UART_SetConfig+0x638>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d130      	bne.n	800f2cc <UART_SetConfig+0x4c8>
 800f26a:	4b73      	ldr	r3, [pc, #460]	; (800f438 <UART_SetConfig+0x634>)
 800f26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f26e:	f003 0307 	and.w	r3, r3, #7
 800f272:	2b05      	cmp	r3, #5
 800f274:	d826      	bhi.n	800f2c4 <UART_SetConfig+0x4c0>
 800f276:	a201      	add	r2, pc, #4	; (adr r2, 800f27c <UART_SetConfig+0x478>)
 800f278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f27c:	0800f295 	.word	0x0800f295
 800f280:	0800f29d 	.word	0x0800f29d
 800f284:	0800f2a5 	.word	0x0800f2a5
 800f288:	0800f2ad 	.word	0x0800f2ad
 800f28c:	0800f2b5 	.word	0x0800f2b5
 800f290:	0800f2bd 	.word	0x0800f2bd
 800f294:	2300      	movs	r3, #0
 800f296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f29a:	e18a      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f29c:	2304      	movs	r3, #4
 800f29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2a2:	e186      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f2a4:	2308      	movs	r3, #8
 800f2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2aa:	e182      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f2ac:	2310      	movs	r3, #16
 800f2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2b2:	e17e      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f2b4:	2320      	movs	r3, #32
 800f2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ba:	e17a      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f2bc:	2340      	movs	r3, #64	; 0x40
 800f2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2c2:	e176      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f2c4:	2380      	movs	r3, #128	; 0x80
 800f2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ca:	e172      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a5b      	ldr	r2, [pc, #364]	; (800f440 <UART_SetConfig+0x63c>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d130      	bne.n	800f338 <UART_SetConfig+0x534>
 800f2d6:	4b58      	ldr	r3, [pc, #352]	; (800f438 <UART_SetConfig+0x634>)
 800f2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2da:	f003 0307 	and.w	r3, r3, #7
 800f2de:	2b05      	cmp	r3, #5
 800f2e0:	d826      	bhi.n	800f330 <UART_SetConfig+0x52c>
 800f2e2:	a201      	add	r2, pc, #4	; (adr r2, 800f2e8 <UART_SetConfig+0x4e4>)
 800f2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e8:	0800f301 	.word	0x0800f301
 800f2ec:	0800f309 	.word	0x0800f309
 800f2f0:	0800f311 	.word	0x0800f311
 800f2f4:	0800f319 	.word	0x0800f319
 800f2f8:	0800f321 	.word	0x0800f321
 800f2fc:	0800f329 	.word	0x0800f329
 800f300:	2300      	movs	r3, #0
 800f302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f306:	e154      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f308:	2304      	movs	r3, #4
 800f30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f30e:	e150      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f310:	2308      	movs	r3, #8
 800f312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f316:	e14c      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f318:	2310      	movs	r3, #16
 800f31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f31e:	e148      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f320:	2320      	movs	r3, #32
 800f322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f326:	e144      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f328:	2340      	movs	r3, #64	; 0x40
 800f32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f32e:	e140      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f330:	2380      	movs	r3, #128	; 0x80
 800f332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f336:	e13c      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4a41      	ldr	r2, [pc, #260]	; (800f444 <UART_SetConfig+0x640>)
 800f33e:	4293      	cmp	r3, r2
 800f340:	f040 8082 	bne.w	800f448 <UART_SetConfig+0x644>
 800f344:	4b3c      	ldr	r3, [pc, #240]	; (800f438 <UART_SetConfig+0x634>)
 800f346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f34c:	2b28      	cmp	r3, #40	; 0x28
 800f34e:	d86d      	bhi.n	800f42c <UART_SetConfig+0x628>
 800f350:	a201      	add	r2, pc, #4	; (adr r2, 800f358 <UART_SetConfig+0x554>)
 800f352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f356:	bf00      	nop
 800f358:	0800f3fd 	.word	0x0800f3fd
 800f35c:	0800f42d 	.word	0x0800f42d
 800f360:	0800f42d 	.word	0x0800f42d
 800f364:	0800f42d 	.word	0x0800f42d
 800f368:	0800f42d 	.word	0x0800f42d
 800f36c:	0800f42d 	.word	0x0800f42d
 800f370:	0800f42d 	.word	0x0800f42d
 800f374:	0800f42d 	.word	0x0800f42d
 800f378:	0800f405 	.word	0x0800f405
 800f37c:	0800f42d 	.word	0x0800f42d
 800f380:	0800f42d 	.word	0x0800f42d
 800f384:	0800f42d 	.word	0x0800f42d
 800f388:	0800f42d 	.word	0x0800f42d
 800f38c:	0800f42d 	.word	0x0800f42d
 800f390:	0800f42d 	.word	0x0800f42d
 800f394:	0800f42d 	.word	0x0800f42d
 800f398:	0800f40d 	.word	0x0800f40d
 800f39c:	0800f42d 	.word	0x0800f42d
 800f3a0:	0800f42d 	.word	0x0800f42d
 800f3a4:	0800f42d 	.word	0x0800f42d
 800f3a8:	0800f42d 	.word	0x0800f42d
 800f3ac:	0800f42d 	.word	0x0800f42d
 800f3b0:	0800f42d 	.word	0x0800f42d
 800f3b4:	0800f42d 	.word	0x0800f42d
 800f3b8:	0800f415 	.word	0x0800f415
 800f3bc:	0800f42d 	.word	0x0800f42d
 800f3c0:	0800f42d 	.word	0x0800f42d
 800f3c4:	0800f42d 	.word	0x0800f42d
 800f3c8:	0800f42d 	.word	0x0800f42d
 800f3cc:	0800f42d 	.word	0x0800f42d
 800f3d0:	0800f42d 	.word	0x0800f42d
 800f3d4:	0800f42d 	.word	0x0800f42d
 800f3d8:	0800f41d 	.word	0x0800f41d
 800f3dc:	0800f42d 	.word	0x0800f42d
 800f3e0:	0800f42d 	.word	0x0800f42d
 800f3e4:	0800f42d 	.word	0x0800f42d
 800f3e8:	0800f42d 	.word	0x0800f42d
 800f3ec:	0800f42d 	.word	0x0800f42d
 800f3f0:	0800f42d 	.word	0x0800f42d
 800f3f4:	0800f42d 	.word	0x0800f42d
 800f3f8:	0800f425 	.word	0x0800f425
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f402:	e0d6      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f404:	2304      	movs	r3, #4
 800f406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f40a:	e0d2      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f40c:	2308      	movs	r3, #8
 800f40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f412:	e0ce      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f414:	2310      	movs	r3, #16
 800f416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f41a:	e0ca      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f41c:	2320      	movs	r3, #32
 800f41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f422:	e0c6      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f424:	2340      	movs	r3, #64	; 0x40
 800f426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f42a:	e0c2      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f42c:	2380      	movs	r3, #128	; 0x80
 800f42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f432:	e0be      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f434:	40011400 	.word	0x40011400
 800f438:	58024400 	.word	0x58024400
 800f43c:	40007800 	.word	0x40007800
 800f440:	40007c00 	.word	0x40007c00
 800f444:	40011800 	.word	0x40011800
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4aad      	ldr	r2, [pc, #692]	; (800f704 <UART_SetConfig+0x900>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d176      	bne.n	800f540 <UART_SetConfig+0x73c>
 800f452:	4bad      	ldr	r3, [pc, #692]	; (800f708 <UART_SetConfig+0x904>)
 800f454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f45a:	2b28      	cmp	r3, #40	; 0x28
 800f45c:	d86c      	bhi.n	800f538 <UART_SetConfig+0x734>
 800f45e:	a201      	add	r2, pc, #4	; (adr r2, 800f464 <UART_SetConfig+0x660>)
 800f460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f464:	0800f509 	.word	0x0800f509
 800f468:	0800f539 	.word	0x0800f539
 800f46c:	0800f539 	.word	0x0800f539
 800f470:	0800f539 	.word	0x0800f539
 800f474:	0800f539 	.word	0x0800f539
 800f478:	0800f539 	.word	0x0800f539
 800f47c:	0800f539 	.word	0x0800f539
 800f480:	0800f539 	.word	0x0800f539
 800f484:	0800f511 	.word	0x0800f511
 800f488:	0800f539 	.word	0x0800f539
 800f48c:	0800f539 	.word	0x0800f539
 800f490:	0800f539 	.word	0x0800f539
 800f494:	0800f539 	.word	0x0800f539
 800f498:	0800f539 	.word	0x0800f539
 800f49c:	0800f539 	.word	0x0800f539
 800f4a0:	0800f539 	.word	0x0800f539
 800f4a4:	0800f519 	.word	0x0800f519
 800f4a8:	0800f539 	.word	0x0800f539
 800f4ac:	0800f539 	.word	0x0800f539
 800f4b0:	0800f539 	.word	0x0800f539
 800f4b4:	0800f539 	.word	0x0800f539
 800f4b8:	0800f539 	.word	0x0800f539
 800f4bc:	0800f539 	.word	0x0800f539
 800f4c0:	0800f539 	.word	0x0800f539
 800f4c4:	0800f521 	.word	0x0800f521
 800f4c8:	0800f539 	.word	0x0800f539
 800f4cc:	0800f539 	.word	0x0800f539
 800f4d0:	0800f539 	.word	0x0800f539
 800f4d4:	0800f539 	.word	0x0800f539
 800f4d8:	0800f539 	.word	0x0800f539
 800f4dc:	0800f539 	.word	0x0800f539
 800f4e0:	0800f539 	.word	0x0800f539
 800f4e4:	0800f529 	.word	0x0800f529
 800f4e8:	0800f539 	.word	0x0800f539
 800f4ec:	0800f539 	.word	0x0800f539
 800f4f0:	0800f539 	.word	0x0800f539
 800f4f4:	0800f539 	.word	0x0800f539
 800f4f8:	0800f539 	.word	0x0800f539
 800f4fc:	0800f539 	.word	0x0800f539
 800f500:	0800f539 	.word	0x0800f539
 800f504:	0800f531 	.word	0x0800f531
 800f508:	2301      	movs	r3, #1
 800f50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f50e:	e050      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f510:	2304      	movs	r3, #4
 800f512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f516:	e04c      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f518:	2308      	movs	r3, #8
 800f51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f51e:	e048      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f520:	2310      	movs	r3, #16
 800f522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f526:	e044      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f528:	2320      	movs	r3, #32
 800f52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f52e:	e040      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f530:	2340      	movs	r3, #64	; 0x40
 800f532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f536:	e03c      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f538:	2380      	movs	r3, #128	; 0x80
 800f53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f53e:	e038      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a71      	ldr	r2, [pc, #452]	; (800f70c <UART_SetConfig+0x908>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d130      	bne.n	800f5ac <UART_SetConfig+0x7a8>
 800f54a:	4b6f      	ldr	r3, [pc, #444]	; (800f708 <UART_SetConfig+0x904>)
 800f54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f54e:	f003 0307 	and.w	r3, r3, #7
 800f552:	2b05      	cmp	r3, #5
 800f554:	d826      	bhi.n	800f5a4 <UART_SetConfig+0x7a0>
 800f556:	a201      	add	r2, pc, #4	; (adr r2, 800f55c <UART_SetConfig+0x758>)
 800f558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55c:	0800f575 	.word	0x0800f575
 800f560:	0800f57d 	.word	0x0800f57d
 800f564:	0800f585 	.word	0x0800f585
 800f568:	0800f58d 	.word	0x0800f58d
 800f56c:	0800f595 	.word	0x0800f595
 800f570:	0800f59d 	.word	0x0800f59d
 800f574:	2302      	movs	r3, #2
 800f576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f57a:	e01a      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f57c:	2304      	movs	r3, #4
 800f57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f582:	e016      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f584:	2308      	movs	r3, #8
 800f586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f58a:	e012      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f58c:	2310      	movs	r3, #16
 800f58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f592:	e00e      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f594:	2320      	movs	r3, #32
 800f596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f59a:	e00a      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f59c:	2340      	movs	r3, #64	; 0x40
 800f59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5a2:	e006      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f5a4:	2380      	movs	r3, #128	; 0x80
 800f5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5aa:	e002      	b.n	800f5b2 <UART_SetConfig+0x7ae>
 800f5ac:	2380      	movs	r3, #128	; 0x80
 800f5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4a55      	ldr	r2, [pc, #340]	; (800f70c <UART_SetConfig+0x908>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	f040 80f8 	bne.w	800f7ae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f5be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f5c2:	2b20      	cmp	r3, #32
 800f5c4:	dc46      	bgt.n	800f654 <UART_SetConfig+0x850>
 800f5c6:	2b02      	cmp	r3, #2
 800f5c8:	db75      	blt.n	800f6b6 <UART_SetConfig+0x8b2>
 800f5ca:	3b02      	subs	r3, #2
 800f5cc:	2b1e      	cmp	r3, #30
 800f5ce:	d872      	bhi.n	800f6b6 <UART_SetConfig+0x8b2>
 800f5d0:	a201      	add	r2, pc, #4	; (adr r2, 800f5d8 <UART_SetConfig+0x7d4>)
 800f5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d6:	bf00      	nop
 800f5d8:	0800f65b 	.word	0x0800f65b
 800f5dc:	0800f6b7 	.word	0x0800f6b7
 800f5e0:	0800f663 	.word	0x0800f663
 800f5e4:	0800f6b7 	.word	0x0800f6b7
 800f5e8:	0800f6b7 	.word	0x0800f6b7
 800f5ec:	0800f6b7 	.word	0x0800f6b7
 800f5f0:	0800f673 	.word	0x0800f673
 800f5f4:	0800f6b7 	.word	0x0800f6b7
 800f5f8:	0800f6b7 	.word	0x0800f6b7
 800f5fc:	0800f6b7 	.word	0x0800f6b7
 800f600:	0800f6b7 	.word	0x0800f6b7
 800f604:	0800f6b7 	.word	0x0800f6b7
 800f608:	0800f6b7 	.word	0x0800f6b7
 800f60c:	0800f6b7 	.word	0x0800f6b7
 800f610:	0800f683 	.word	0x0800f683
 800f614:	0800f6b7 	.word	0x0800f6b7
 800f618:	0800f6b7 	.word	0x0800f6b7
 800f61c:	0800f6b7 	.word	0x0800f6b7
 800f620:	0800f6b7 	.word	0x0800f6b7
 800f624:	0800f6b7 	.word	0x0800f6b7
 800f628:	0800f6b7 	.word	0x0800f6b7
 800f62c:	0800f6b7 	.word	0x0800f6b7
 800f630:	0800f6b7 	.word	0x0800f6b7
 800f634:	0800f6b7 	.word	0x0800f6b7
 800f638:	0800f6b7 	.word	0x0800f6b7
 800f63c:	0800f6b7 	.word	0x0800f6b7
 800f640:	0800f6b7 	.word	0x0800f6b7
 800f644:	0800f6b7 	.word	0x0800f6b7
 800f648:	0800f6b7 	.word	0x0800f6b7
 800f64c:	0800f6b7 	.word	0x0800f6b7
 800f650:	0800f6a9 	.word	0x0800f6a9
 800f654:	2b40      	cmp	r3, #64	; 0x40
 800f656:	d02a      	beq.n	800f6ae <UART_SetConfig+0x8aa>
 800f658:	e02d      	b.n	800f6b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f65a:	f7fc f923 	bl	800b8a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f65e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f660:	e02f      	b.n	800f6c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f666:	4618      	mov	r0, r3
 800f668:	f7fc f932 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f670:	e027      	b.n	800f6c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f672:	f107 0318 	add.w	r3, r7, #24
 800f676:	4618      	mov	r0, r3
 800f678:	f7fc fa7e 	bl	800bb78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f680:	e01f      	b.n	800f6c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f682:	4b21      	ldr	r3, [pc, #132]	; (800f708 <UART_SetConfig+0x904>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f003 0320 	and.w	r3, r3, #32
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d009      	beq.n	800f6a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f68e:	4b1e      	ldr	r3, [pc, #120]	; (800f708 <UART_SetConfig+0x904>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	08db      	lsrs	r3, r3, #3
 800f694:	f003 0303 	and.w	r3, r3, #3
 800f698:	4a1d      	ldr	r2, [pc, #116]	; (800f710 <UART_SetConfig+0x90c>)
 800f69a:	fa22 f303 	lsr.w	r3, r2, r3
 800f69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f6a0:	e00f      	b.n	800f6c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f6a2:	4b1b      	ldr	r3, [pc, #108]	; (800f710 <UART_SetConfig+0x90c>)
 800f6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6a6:	e00c      	b.n	800f6c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f6a8:	4b1a      	ldr	r3, [pc, #104]	; (800f714 <UART_SetConfig+0x910>)
 800f6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6ac:	e009      	b.n	800f6c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6b4:	e005      	b.n	800f6c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f6c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	f000 81ee 	beq.w	800faa6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ce:	4a12      	ldr	r2, [pc, #72]	; (800f718 <UART_SetConfig+0x914>)
 800f6d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6dc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	685a      	ldr	r2, [r3, #4]
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	4413      	add	r3, r2
 800f6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d305      	bcc.n	800f6fa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d910      	bls.n	800f71c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f700:	e1d1      	b.n	800faa6 <UART_SetConfig+0xca2>
 800f702:	bf00      	nop
 800f704:	40011c00 	.word	0x40011c00
 800f708:	58024400 	.word	0x58024400
 800f70c:	58000c00 	.word	0x58000c00
 800f710:	03d09000 	.word	0x03d09000
 800f714:	003d0900 	.word	0x003d0900
 800f718:	0801c9a8 	.word	0x0801c9a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f71e:	2200      	movs	r2, #0
 800f720:	60bb      	str	r3, [r7, #8]
 800f722:	60fa      	str	r2, [r7, #12]
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f728:	4ac0      	ldr	r2, [pc, #768]	; (800fa2c <UART_SetConfig+0xc28>)
 800f72a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f72e:	b29b      	uxth	r3, r3
 800f730:	2200      	movs	r2, #0
 800f732:	603b      	str	r3, [r7, #0]
 800f734:	607a      	str	r2, [r7, #4]
 800f736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f73a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f73e:	f7f0 fffb 	bl	8000738 <__aeabi_uldivmod>
 800f742:	4602      	mov	r2, r0
 800f744:	460b      	mov	r3, r1
 800f746:	4610      	mov	r0, r2
 800f748:	4619      	mov	r1, r3
 800f74a:	f04f 0200 	mov.w	r2, #0
 800f74e:	f04f 0300 	mov.w	r3, #0
 800f752:	020b      	lsls	r3, r1, #8
 800f754:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f758:	0202      	lsls	r2, r0, #8
 800f75a:	6979      	ldr	r1, [r7, #20]
 800f75c:	6849      	ldr	r1, [r1, #4]
 800f75e:	0849      	lsrs	r1, r1, #1
 800f760:	2000      	movs	r0, #0
 800f762:	460c      	mov	r4, r1
 800f764:	4605      	mov	r5, r0
 800f766:	eb12 0804 	adds.w	r8, r2, r4
 800f76a:	eb43 0905 	adc.w	r9, r3, r5
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	469a      	mov	sl, r3
 800f776:	4693      	mov	fp, r2
 800f778:	4652      	mov	r2, sl
 800f77a:	465b      	mov	r3, fp
 800f77c:	4640      	mov	r0, r8
 800f77e:	4649      	mov	r1, r9
 800f780:	f7f0 ffda 	bl	8000738 <__aeabi_uldivmod>
 800f784:	4602      	mov	r2, r0
 800f786:	460b      	mov	r3, r1
 800f788:	4613      	mov	r3, r2
 800f78a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f792:	d308      	bcc.n	800f7a6 <UART_SetConfig+0x9a2>
 800f794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f79a:	d204      	bcs.n	800f7a6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7a2:	60da      	str	r2, [r3, #12]
 800f7a4:	e17f      	b.n	800faa6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f7ac:	e17b      	b.n	800faa6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	69db      	ldr	r3, [r3, #28]
 800f7b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7b6:	f040 80bd 	bne.w	800f934 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f7ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f7be:	2b20      	cmp	r3, #32
 800f7c0:	dc48      	bgt.n	800f854 <UART_SetConfig+0xa50>
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	db7b      	blt.n	800f8be <UART_SetConfig+0xaba>
 800f7c6:	2b20      	cmp	r3, #32
 800f7c8:	d879      	bhi.n	800f8be <UART_SetConfig+0xaba>
 800f7ca:	a201      	add	r2, pc, #4	; (adr r2, 800f7d0 <UART_SetConfig+0x9cc>)
 800f7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d0:	0800f85b 	.word	0x0800f85b
 800f7d4:	0800f863 	.word	0x0800f863
 800f7d8:	0800f8bf 	.word	0x0800f8bf
 800f7dc:	0800f8bf 	.word	0x0800f8bf
 800f7e0:	0800f86b 	.word	0x0800f86b
 800f7e4:	0800f8bf 	.word	0x0800f8bf
 800f7e8:	0800f8bf 	.word	0x0800f8bf
 800f7ec:	0800f8bf 	.word	0x0800f8bf
 800f7f0:	0800f87b 	.word	0x0800f87b
 800f7f4:	0800f8bf 	.word	0x0800f8bf
 800f7f8:	0800f8bf 	.word	0x0800f8bf
 800f7fc:	0800f8bf 	.word	0x0800f8bf
 800f800:	0800f8bf 	.word	0x0800f8bf
 800f804:	0800f8bf 	.word	0x0800f8bf
 800f808:	0800f8bf 	.word	0x0800f8bf
 800f80c:	0800f8bf 	.word	0x0800f8bf
 800f810:	0800f88b 	.word	0x0800f88b
 800f814:	0800f8bf 	.word	0x0800f8bf
 800f818:	0800f8bf 	.word	0x0800f8bf
 800f81c:	0800f8bf 	.word	0x0800f8bf
 800f820:	0800f8bf 	.word	0x0800f8bf
 800f824:	0800f8bf 	.word	0x0800f8bf
 800f828:	0800f8bf 	.word	0x0800f8bf
 800f82c:	0800f8bf 	.word	0x0800f8bf
 800f830:	0800f8bf 	.word	0x0800f8bf
 800f834:	0800f8bf 	.word	0x0800f8bf
 800f838:	0800f8bf 	.word	0x0800f8bf
 800f83c:	0800f8bf 	.word	0x0800f8bf
 800f840:	0800f8bf 	.word	0x0800f8bf
 800f844:	0800f8bf 	.word	0x0800f8bf
 800f848:	0800f8bf 	.word	0x0800f8bf
 800f84c:	0800f8bf 	.word	0x0800f8bf
 800f850:	0800f8b1 	.word	0x0800f8b1
 800f854:	2b40      	cmp	r3, #64	; 0x40
 800f856:	d02e      	beq.n	800f8b6 <UART_SetConfig+0xab2>
 800f858:	e031      	b.n	800f8be <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f85a:	f7fa f985 	bl	8009b68 <HAL_RCC_GetPCLK1Freq>
 800f85e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f860:	e033      	b.n	800f8ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f862:	f7fa f997 	bl	8009b94 <HAL_RCC_GetPCLK2Freq>
 800f866:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f868:	e02f      	b.n	800f8ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f86a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fc f82e 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f878:	e027      	b.n	800f8ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f87a:	f107 0318 	add.w	r3, r7, #24
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fc f97a 	bl	800bb78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f884:	69fb      	ldr	r3, [r7, #28]
 800f886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f888:	e01f      	b.n	800f8ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f88a:	4b69      	ldr	r3, [pc, #420]	; (800fa30 <UART_SetConfig+0xc2c>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f003 0320 	and.w	r3, r3, #32
 800f892:	2b00      	cmp	r3, #0
 800f894:	d009      	beq.n	800f8aa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f896:	4b66      	ldr	r3, [pc, #408]	; (800fa30 <UART_SetConfig+0xc2c>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	08db      	lsrs	r3, r3, #3
 800f89c:	f003 0303 	and.w	r3, r3, #3
 800f8a0:	4a64      	ldr	r2, [pc, #400]	; (800fa34 <UART_SetConfig+0xc30>)
 800f8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800f8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f8a8:	e00f      	b.n	800f8ca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f8aa:	4b62      	ldr	r3, [pc, #392]	; (800fa34 <UART_SetConfig+0xc30>)
 800f8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8ae:	e00c      	b.n	800f8ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f8b0:	4b61      	ldr	r3, [pc, #388]	; (800fa38 <UART_SetConfig+0xc34>)
 800f8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8b4:	e009      	b.n	800f8ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8bc:	e005      	b.n	800f8ca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f8c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	f000 80ea 	beq.w	800faa6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d6:	4a55      	ldr	r2, [pc, #340]	; (800fa2c <UART_SetConfig+0xc28>)
 800f8d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8e4:	005a      	lsls	r2, r3, #1
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	085b      	lsrs	r3, r3, #1
 800f8ec:	441a      	add	r2, r3
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fa:	2b0f      	cmp	r3, #15
 800f8fc:	d916      	bls.n	800f92c <UART_SetConfig+0xb28>
 800f8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f904:	d212      	bcs.n	800f92c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f908:	b29b      	uxth	r3, r3
 800f90a:	f023 030f 	bic.w	r3, r3, #15
 800f90e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f912:	085b      	lsrs	r3, r3, #1
 800f914:	b29b      	uxth	r3, r3
 800f916:	f003 0307 	and.w	r3, r3, #7
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f91e:	4313      	orrs	r3, r2
 800f920:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f928:	60da      	str	r2, [r3, #12]
 800f92a:	e0bc      	b.n	800faa6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f92c:	2301      	movs	r3, #1
 800f92e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f932:	e0b8      	b.n	800faa6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f934:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f938:	2b20      	cmp	r3, #32
 800f93a:	dc4b      	bgt.n	800f9d4 <UART_SetConfig+0xbd0>
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f2c0 8087 	blt.w	800fa50 <UART_SetConfig+0xc4c>
 800f942:	2b20      	cmp	r3, #32
 800f944:	f200 8084 	bhi.w	800fa50 <UART_SetConfig+0xc4c>
 800f948:	a201      	add	r2, pc, #4	; (adr r2, 800f950 <UART_SetConfig+0xb4c>)
 800f94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f94e:	bf00      	nop
 800f950:	0800f9db 	.word	0x0800f9db
 800f954:	0800f9e3 	.word	0x0800f9e3
 800f958:	0800fa51 	.word	0x0800fa51
 800f95c:	0800fa51 	.word	0x0800fa51
 800f960:	0800f9eb 	.word	0x0800f9eb
 800f964:	0800fa51 	.word	0x0800fa51
 800f968:	0800fa51 	.word	0x0800fa51
 800f96c:	0800fa51 	.word	0x0800fa51
 800f970:	0800f9fb 	.word	0x0800f9fb
 800f974:	0800fa51 	.word	0x0800fa51
 800f978:	0800fa51 	.word	0x0800fa51
 800f97c:	0800fa51 	.word	0x0800fa51
 800f980:	0800fa51 	.word	0x0800fa51
 800f984:	0800fa51 	.word	0x0800fa51
 800f988:	0800fa51 	.word	0x0800fa51
 800f98c:	0800fa51 	.word	0x0800fa51
 800f990:	0800fa0b 	.word	0x0800fa0b
 800f994:	0800fa51 	.word	0x0800fa51
 800f998:	0800fa51 	.word	0x0800fa51
 800f99c:	0800fa51 	.word	0x0800fa51
 800f9a0:	0800fa51 	.word	0x0800fa51
 800f9a4:	0800fa51 	.word	0x0800fa51
 800f9a8:	0800fa51 	.word	0x0800fa51
 800f9ac:	0800fa51 	.word	0x0800fa51
 800f9b0:	0800fa51 	.word	0x0800fa51
 800f9b4:	0800fa51 	.word	0x0800fa51
 800f9b8:	0800fa51 	.word	0x0800fa51
 800f9bc:	0800fa51 	.word	0x0800fa51
 800f9c0:	0800fa51 	.word	0x0800fa51
 800f9c4:	0800fa51 	.word	0x0800fa51
 800f9c8:	0800fa51 	.word	0x0800fa51
 800f9cc:	0800fa51 	.word	0x0800fa51
 800f9d0:	0800fa43 	.word	0x0800fa43
 800f9d4:	2b40      	cmp	r3, #64	; 0x40
 800f9d6:	d037      	beq.n	800fa48 <UART_SetConfig+0xc44>
 800f9d8:	e03a      	b.n	800fa50 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9da:	f7fa f8c5 	bl	8009b68 <HAL_RCC_GetPCLK1Freq>
 800f9de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9e0:	e03c      	b.n	800fa5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f9e2:	f7fa f8d7 	bl	8009b94 <HAL_RCC_GetPCLK2Freq>
 800f9e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9e8:	e038      	b.n	800fa5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fb ff6e 	bl	800b8d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9f8:	e030      	b.n	800fa5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9fa:	f107 0318 	add.w	r3, r7, #24
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fc f8ba 	bl	800bb78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa08:	e028      	b.n	800fa5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa0a:	4b09      	ldr	r3, [pc, #36]	; (800fa30 <UART_SetConfig+0xc2c>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f003 0320 	and.w	r3, r3, #32
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d012      	beq.n	800fa3c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fa16:	4b06      	ldr	r3, [pc, #24]	; (800fa30 <UART_SetConfig+0xc2c>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	08db      	lsrs	r3, r3, #3
 800fa1c:	f003 0303 	and.w	r3, r3, #3
 800fa20:	4a04      	ldr	r2, [pc, #16]	; (800fa34 <UART_SetConfig+0xc30>)
 800fa22:	fa22 f303 	lsr.w	r3, r2, r3
 800fa26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa28:	e018      	b.n	800fa5c <UART_SetConfig+0xc58>
 800fa2a:	bf00      	nop
 800fa2c:	0801c9a8 	.word	0x0801c9a8
 800fa30:	58024400 	.word	0x58024400
 800fa34:	03d09000 	.word	0x03d09000
 800fa38:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fa3c:	4b24      	ldr	r3, [pc, #144]	; (800fad0 <UART_SetConfig+0xccc>)
 800fa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa40:	e00c      	b.n	800fa5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa42:	4b24      	ldr	r3, [pc, #144]	; (800fad4 <UART_SetConfig+0xcd0>)
 800fa44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa46:	e009      	b.n	800fa5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa4e:	e005      	b.n	800fa5c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fa50:	2300      	movs	r3, #0
 800fa52:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fa54:	2301      	movs	r3, #1
 800fa56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fa5a:	bf00      	nop
    }

    if (pclk != 0U)
 800fa5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d021      	beq.n	800faa6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa66:	4a1c      	ldr	r2, [pc, #112]	; (800fad8 <UART_SetConfig+0xcd4>)
 800fa68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa70:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	085b      	lsrs	r3, r3, #1
 800fa7a:	441a      	add	r2, r3
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa84:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa88:	2b0f      	cmp	r3, #15
 800fa8a:	d909      	bls.n	800faa0 <UART_SetConfig+0xc9c>
 800fa8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa92:	d205      	bcs.n	800faa0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	60da      	str	r2, [r3, #12]
 800fa9e:	e002      	b.n	800faa6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800faa0:	2301      	movs	r3, #1
 800faa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	2201      	movs	r2, #1
 800faaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	2201      	movs	r2, #1
 800fab2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	2200      	movs	r2, #0
 800faba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	2200      	movs	r2, #0
 800fac0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fac2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3748      	adds	r7, #72	; 0x48
 800faca:	46bd      	mov	sp, r7
 800facc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fad0:	03d09000 	.word	0x03d09000
 800fad4:	003d0900 	.word	0x003d0900
 800fad8:	0801c9a8 	.word	0x0801c9a8

0800fadc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fadc:	b480      	push	{r7}
 800fade:	b083      	sub	sp, #12
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fae8:	f003 0301 	and.w	r3, r3, #1
 800faec:	2b00      	cmp	r3, #0
 800faee:	d00a      	beq.n	800fb06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	430a      	orrs	r2, r1
 800fb04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb0a:	f003 0302 	and.w	r3, r3, #2
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d00a      	beq.n	800fb28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	430a      	orrs	r2, r1
 800fb26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb2c:	f003 0304 	and.w	r3, r3, #4
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d00a      	beq.n	800fb4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	685b      	ldr	r3, [r3, #4]
 800fb3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	430a      	orrs	r2, r1
 800fb48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb4e:	f003 0308 	and.w	r3, r3, #8
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d00a      	beq.n	800fb6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	430a      	orrs	r2, r1
 800fb6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb70:	f003 0310 	and.w	r3, r3, #16
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d00a      	beq.n	800fb8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	430a      	orrs	r2, r1
 800fb8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb92:	f003 0320 	and.w	r3, r3, #32
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d00a      	beq.n	800fbb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	430a      	orrs	r2, r1
 800fbae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d01a      	beq.n	800fbf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	430a      	orrs	r2, r1
 800fbd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fbda:	d10a      	bne.n	800fbf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	430a      	orrs	r2, r1
 800fbf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d00a      	beq.n	800fc14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	430a      	orrs	r2, r1
 800fc12:	605a      	str	r2, [r3, #4]
  }
}
 800fc14:	bf00      	nop
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr

0800fc20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b098      	sub	sp, #96	; 0x60
 800fc24:	af02      	add	r7, sp, #8
 800fc26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc30:	f7f3 f8ba 	bl	8002da8 <HAL_GetTick>
 800fc34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f003 0308 	and.w	r3, r3, #8
 800fc40:	2b08      	cmp	r3, #8
 800fc42:	d12f      	bne.n	800fca4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc48:	9300      	str	r3, [sp, #0]
 800fc4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 f88e 	bl	800fd74 <UART_WaitOnFlagUntilTimeout>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d022      	beq.n	800fca4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc66:	e853 3f00 	ldrex	r3, [r3]
 800fc6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc72:	653b      	str	r3, [r7, #80]	; 0x50
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	461a      	mov	r2, r3
 800fc7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc7c:	647b      	str	r3, [r7, #68]	; 0x44
 800fc7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc84:	e841 2300 	strex	r3, r2, [r1]
 800fc88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fc8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1e6      	bne.n	800fc5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2220      	movs	r2, #32
 800fc94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fca0:	2303      	movs	r3, #3
 800fca2:	e063      	b.n	800fd6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f003 0304 	and.w	r3, r3, #4
 800fcae:	2b04      	cmp	r3, #4
 800fcb0:	d149      	bne.n	800fd46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fcb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fcb6:	9300      	str	r3, [sp, #0]
 800fcb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcba:	2200      	movs	r2, #0
 800fcbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 f857 	bl	800fd74 <UART_WaitOnFlagUntilTimeout>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d03c      	beq.n	800fd46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd4:	e853 3f00 	ldrex	r3, [r3]
 800fcd8:	623b      	str	r3, [r7, #32]
   return(result);
 800fcda:	6a3b      	ldr	r3, [r7, #32]
 800fcdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fce0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	461a      	mov	r2, r3
 800fce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcea:	633b      	str	r3, [r7, #48]	; 0x30
 800fcec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcf2:	e841 2300 	strex	r3, r2, [r1]
 800fcf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1e6      	bne.n	800fccc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	3308      	adds	r3, #8
 800fd04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	e853 3f00 	ldrex	r3, [r3]
 800fd0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f023 0301 	bic.w	r3, r3, #1
 800fd14:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	3308      	adds	r3, #8
 800fd1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd1e:	61fa      	str	r2, [r7, #28]
 800fd20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd22:	69b9      	ldr	r1, [r7, #24]
 800fd24:	69fa      	ldr	r2, [r7, #28]
 800fd26:	e841 2300 	strex	r3, r2, [r1]
 800fd2a:	617b      	str	r3, [r7, #20]
   return(result);
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1e5      	bne.n	800fcfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2220      	movs	r2, #32
 800fd36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd42:	2303      	movs	r3, #3
 800fd44:	e012      	b.n	800fd6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2220      	movs	r2, #32
 800fd4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2220      	movs	r2, #32
 800fd52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2200      	movs	r2, #0
 800fd66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fd6a:	2300      	movs	r3, #0
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3758      	adds	r7, #88	; 0x58
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	603b      	str	r3, [r7, #0]
 800fd80:	4613      	mov	r3, r2
 800fd82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd84:	e049      	b.n	800fe1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd86:	69bb      	ldr	r3, [r7, #24]
 800fd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd8c:	d045      	beq.n	800fe1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd8e:	f7f3 f80b 	bl	8002da8 <HAL_GetTick>
 800fd92:	4602      	mov	r2, r0
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	1ad3      	subs	r3, r2, r3
 800fd98:	69ba      	ldr	r2, [r7, #24]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d302      	bcc.n	800fda4 <UART_WaitOnFlagUntilTimeout+0x30>
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d101      	bne.n	800fda8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fda4:	2303      	movs	r3, #3
 800fda6:	e048      	b.n	800fe3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f003 0304 	and.w	r3, r3, #4
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d031      	beq.n	800fe1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	69db      	ldr	r3, [r3, #28]
 800fdbc:	f003 0308 	and.w	r3, r3, #8
 800fdc0:	2b08      	cmp	r3, #8
 800fdc2:	d110      	bne.n	800fde6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2208      	movs	r2, #8
 800fdca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800fdcc:	68f8      	ldr	r0, [r7, #12]
 800fdce:	f000 f839 	bl	800fe44 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2208      	movs	r2, #8
 800fdd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2200      	movs	r2, #0
 800fdde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800fde2:	2301      	movs	r3, #1
 800fde4:	e029      	b.n	800fe3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	69db      	ldr	r3, [r3, #28]
 800fdec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fdf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdf4:	d111      	bne.n	800fe1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fdfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f000 f81f 	bl	800fe44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2220      	movs	r2, #32
 800fe0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2200      	movs	r2, #0
 800fe12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fe16:	2303      	movs	r3, #3
 800fe18:	e00f      	b.n	800fe3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	69da      	ldr	r2, [r3, #28]
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	4013      	ands	r3, r2
 800fe24:	68ba      	ldr	r2, [r7, #8]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	bf0c      	ite	eq
 800fe2a:	2301      	moveq	r3, #1
 800fe2c:	2300      	movne	r3, #0
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	461a      	mov	r2, r3
 800fe32:	79fb      	ldrb	r3, [r7, #7]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d0a6      	beq.n	800fd86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe38:	2300      	movs	r3, #0
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3710      	adds	r7, #16
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
	...

0800fe44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b095      	sub	sp, #84	; 0x54
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe54:	e853 3f00 	ldrex	r3, [r3]
 800fe58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fe5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	461a      	mov	r2, r3
 800fe68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe6a:	643b      	str	r3, [r7, #64]	; 0x40
 800fe6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe72:	e841 2300 	strex	r3, r2, [r1]
 800fe76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d1e6      	bne.n	800fe4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	3308      	adds	r3, #8
 800fe84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe86:	6a3b      	ldr	r3, [r7, #32]
 800fe88:	e853 3f00 	ldrex	r3, [r3]
 800fe8c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe8e:	69fa      	ldr	r2, [r7, #28]
 800fe90:	4b1e      	ldr	r3, [pc, #120]	; (800ff0c <UART_EndRxTransfer+0xc8>)
 800fe92:	4013      	ands	r3, r2
 800fe94:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	3308      	adds	r3, #8
 800fe9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fea0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fea6:	e841 2300 	strex	r3, r2, [r1]
 800feaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800feac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d1e5      	bne.n	800fe7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feb6:	2b01      	cmp	r3, #1
 800feb8:	d118      	bne.n	800feec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	e853 3f00 	ldrex	r3, [r3]
 800fec6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	f023 0310 	bic.w	r3, r3, #16
 800fece:	647b      	str	r3, [r7, #68]	; 0x44
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	461a      	mov	r2, r3
 800fed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fed8:	61bb      	str	r3, [r7, #24]
 800feda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fedc:	6979      	ldr	r1, [r7, #20]
 800fede:	69ba      	ldr	r2, [r7, #24]
 800fee0:	e841 2300 	strex	r3, r2, [r1]
 800fee4:	613b      	str	r3, [r7, #16]
   return(result);
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d1e6      	bne.n	800feba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2220      	movs	r2, #32
 800fef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2200      	movs	r2, #0
 800fefe:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ff00:	bf00      	nop
 800ff02:	3754      	adds	r7, #84	; 0x54
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr
 800ff0c:	effffffe 	.word	0xeffffffe

0800ff10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b085      	sub	sp, #20
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d101      	bne.n	800ff26 <HAL_UARTEx_DisableFifoMode+0x16>
 800ff22:	2302      	movs	r3, #2
 800ff24:	e027      	b.n	800ff76 <HAL_UARTEx_DisableFifoMode+0x66>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2201      	movs	r2, #1
 800ff2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2224      	movs	r2, #36	; 0x24
 800ff32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f022 0201 	bic.w	r2, r2, #1
 800ff4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	68fa      	ldr	r2, [r7, #12]
 800ff62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2220      	movs	r2, #32
 800ff68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff74:	2300      	movs	r3, #0
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3714      	adds	r7, #20
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr

0800ff82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b084      	sub	sp, #16
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
 800ff8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d101      	bne.n	800ff9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff96:	2302      	movs	r3, #2
 800ff98:	e02d      	b.n	800fff6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2224      	movs	r2, #36	; 0x24
 800ffa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f022 0201 	bic.w	r2, r2, #1
 800ffc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	689b      	ldr	r3, [r3, #8]
 800ffc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	683a      	ldr	r2, [r7, #0]
 800ffd2:	430a      	orrs	r2, r1
 800ffd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 f850 	bl	801007c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	68fa      	ldr	r2, [r7, #12]
 800ffe2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2220      	movs	r2, #32
 800ffe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2200      	movs	r2, #0
 800fff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fffe:	b580      	push	{r7, lr}
 8010000:	b084      	sub	sp, #16
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
 8010006:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801000e:	2b01      	cmp	r3, #1
 8010010:	d101      	bne.n	8010016 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010012:	2302      	movs	r3, #2
 8010014:	e02d      	b.n	8010072 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2201      	movs	r2, #1
 801001a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2224      	movs	r2, #36	; 0x24
 8010022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f022 0201 	bic.w	r2, r2, #1
 801003c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	683a      	ldr	r2, [r7, #0]
 801004e:	430a      	orrs	r2, r1
 8010050:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 f812 	bl	801007c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	68fa      	ldr	r2, [r7, #12]
 801005e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2220      	movs	r2, #32
 8010064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2200      	movs	r2, #0
 801006c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010070:	2300      	movs	r3, #0
}
 8010072:	4618      	mov	r0, r3
 8010074:	3710      	adds	r7, #16
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
	...

0801007c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801007c:	b480      	push	{r7}
 801007e:	b085      	sub	sp, #20
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010088:	2b00      	cmp	r3, #0
 801008a:	d108      	bne.n	801009e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2201      	movs	r2, #1
 8010090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2201      	movs	r2, #1
 8010098:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801009c:	e031      	b.n	8010102 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801009e:	2310      	movs	r3, #16
 80100a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80100a2:	2310      	movs	r3, #16
 80100a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	0e5b      	lsrs	r3, r3, #25
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	f003 0307 	and.w	r3, r3, #7
 80100b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	689b      	ldr	r3, [r3, #8]
 80100bc:	0f5b      	lsrs	r3, r3, #29
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	f003 0307 	and.w	r3, r3, #7
 80100c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100c6:	7bbb      	ldrb	r3, [r7, #14]
 80100c8:	7b3a      	ldrb	r2, [r7, #12]
 80100ca:	4911      	ldr	r1, [pc, #68]	; (8010110 <UARTEx_SetNbDataToProcess+0x94>)
 80100cc:	5c8a      	ldrb	r2, [r1, r2]
 80100ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80100d2:	7b3a      	ldrb	r2, [r7, #12]
 80100d4:	490f      	ldr	r1, [pc, #60]	; (8010114 <UARTEx_SetNbDataToProcess+0x98>)
 80100d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80100dc:	b29a      	uxth	r2, r3
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100e4:	7bfb      	ldrb	r3, [r7, #15]
 80100e6:	7b7a      	ldrb	r2, [r7, #13]
 80100e8:	4909      	ldr	r1, [pc, #36]	; (8010110 <UARTEx_SetNbDataToProcess+0x94>)
 80100ea:	5c8a      	ldrb	r2, [r1, r2]
 80100ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80100f0:	7b7a      	ldrb	r2, [r7, #13]
 80100f2:	4908      	ldr	r1, [pc, #32]	; (8010114 <UARTEx_SetNbDataToProcess+0x98>)
 80100f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010102:	bf00      	nop
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	0801c9c0 	.word	0x0801c9c0
 8010114:	0801c9c8 	.word	0x0801c9c8

08010118 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010118:	b084      	sub	sp, #16
 801011a:	b480      	push	{r7}
 801011c:	b085      	sub	sp, #20
 801011e:	af00      	add	r7, sp, #0
 8010120:	6078      	str	r0, [r7, #4]
 8010122:	f107 001c 	add.w	r0, r7, #28
 8010126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801012a:	2300      	movs	r3, #0
 801012c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801012e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010130:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010132:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8010136:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010138:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801013a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801013c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801013e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	4313      	orrs	r3, r2
 8010144:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	685a      	ldr	r2, [r3, #4]
 801014a:	4b07      	ldr	r3, [pc, #28]	; (8010168 <SDMMC_Init+0x50>)
 801014c:	4013      	ands	r3, r2
 801014e:	68fa      	ldr	r2, [r7, #12]
 8010150:	431a      	orrs	r2, r3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010156:	2300      	movs	r3, #0
}
 8010158:	4618      	mov	r0, r3
 801015a:	3714      	adds	r7, #20
 801015c:	46bd      	mov	sp, r7
 801015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010162:	b004      	add	sp, #16
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop
 8010168:	ffc02c00 	.word	0xffc02c00

0801016c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801016c:	b480      	push	{r7}
 801016e:	b083      	sub	sp, #12
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801017a:	4618      	mov	r0, r3
 801017c:	370c      	adds	r7, #12
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr

08010186 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010186:	b480      	push	{r7}
 8010188:	b083      	sub	sp, #12
 801018a:	af00      	add	r7, sp, #0
 801018c:	6078      	str	r0, [r7, #4]
 801018e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	681a      	ldr	r2, [r3, #0]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801019a:	2300      	movs	r3, #0
}
 801019c:	4618      	mov	r0, r3
 801019e:	370c      	adds	r7, #12
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b083      	sub	sp, #12
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f043 0203 	orr.w	r2, r3, #3
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80101bc:	2300      	movs	r3, #0
}
 80101be:	4618      	mov	r0, r3
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80101ca:	b480      	push	{r7}
 80101cc:	b083      	sub	sp, #12
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f003 0303 	and.w	r3, r3, #3
}
 80101da:	4618      	mov	r0, r3
 80101dc:	370c      	adds	r7, #12
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
	...

080101e8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80101f2:	2300      	movs	r3, #0
 80101f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010206:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801020c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010212:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010214:	68fa      	ldr	r2, [r7, #12]
 8010216:	4313      	orrs	r3, r2
 8010218:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	68da      	ldr	r2, [r3, #12]
 801021e:	4b06      	ldr	r3, [pc, #24]	; (8010238 <SDMMC_SendCommand+0x50>)
 8010220:	4013      	ands	r3, r2
 8010222:	68fa      	ldr	r2, [r7, #12]
 8010224:	431a      	orrs	r2, r3
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801022a:	2300      	movs	r3, #0
}
 801022c:	4618      	mov	r0, r3
 801022e:	3714      	adds	r7, #20
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr
 8010238:	fffee0c0 	.word	0xfffee0c0

0801023c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	691b      	ldr	r3, [r3, #16]
 8010248:	b2db      	uxtb	r3, r3
}
 801024a:	4618      	mov	r0, r3
 801024c:	370c      	adds	r7, #12
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr

08010256 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010256:	b480      	push	{r7}
 8010258:	b085      	sub	sp, #20
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
 801025e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	3314      	adds	r3, #20
 8010264:	461a      	mov	r2, r3
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	4413      	add	r3, r2
 801026a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681b      	ldr	r3, [r3, #0]
}
 8010270:	4618      	mov	r0, r3
 8010272:	3714      	adds	r7, #20
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801027c:	b480      	push	{r7}
 801027e:	b085      	sub	sp, #20
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010286:	2300      	movs	r3, #0
 8010288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80102a2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80102a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80102ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80102b0:	68fa      	ldr	r2, [r7, #12]
 80102b2:	4313      	orrs	r3, r2
 80102b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	431a      	orrs	r2, r3
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80102c6:	2300      	movs	r3, #0

}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3714      	adds	r7, #20
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b088      	sub	sp, #32
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80102e2:	2310      	movs	r3, #16
 80102e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80102ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102ec:	2300      	movs	r3, #0
 80102ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102f6:	f107 0308 	add.w	r3, r7, #8
 80102fa:	4619      	mov	r1, r3
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f7ff ff73 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010302:	f241 3288 	movw	r2, #5000	; 0x1388
 8010306:	2110      	movs	r1, #16
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f000 fa5f 	bl	80107cc <SDMMC_GetCmdResp1>
 801030e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010310:	69fb      	ldr	r3, [r7, #28]
}
 8010312:	4618      	mov	r0, r3
 8010314:	3720      	adds	r7, #32
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}

0801031a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b088      	sub	sp, #32
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
 8010322:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010328:	2311      	movs	r3, #17
 801032a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801032c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010332:	2300      	movs	r3, #0
 8010334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801033a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801033c:	f107 0308 	add.w	r3, r7, #8
 8010340:	4619      	mov	r1, r3
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f7ff ff50 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010348:	f241 3288 	movw	r2, #5000	; 0x1388
 801034c:	2111      	movs	r1, #17
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f000 fa3c 	bl	80107cc <SDMMC_GetCmdResp1>
 8010354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010356:	69fb      	ldr	r3, [r7, #28]
}
 8010358:	4618      	mov	r0, r3
 801035a:	3720      	adds	r7, #32
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b088      	sub	sp, #32
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801036e:	2312      	movs	r3, #18
 8010370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010378:	2300      	movs	r3, #0
 801037a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801037c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010380:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010382:	f107 0308 	add.w	r3, r7, #8
 8010386:	4619      	mov	r1, r3
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f7ff ff2d 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801038e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010392:	2112      	movs	r1, #18
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f000 fa19 	bl	80107cc <SDMMC_GetCmdResp1>
 801039a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801039c:	69fb      	ldr	r3, [r7, #28]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3720      	adds	r7, #32
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}

080103a6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103a6:	b580      	push	{r7, lr}
 80103a8:	b088      	sub	sp, #32
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
 80103ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80103b4:	2318      	movs	r3, #24
 80103b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103be:	2300      	movs	r3, #0
 80103c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103c8:	f107 0308 	add.w	r3, r7, #8
 80103cc:	4619      	mov	r1, r3
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f7ff ff0a 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80103d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80103d8:	2118      	movs	r1, #24
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 f9f6 	bl	80107cc <SDMMC_GetCmdResp1>
 80103e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103e2:	69fb      	ldr	r3, [r7, #28]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3720      	adds	r7, #32
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b088      	sub	sp, #32
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80103fa:	2319      	movs	r3, #25
 80103fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010404:	2300      	movs	r3, #0
 8010406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801040c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801040e:	f107 0308 	add.w	r3, r7, #8
 8010412:	4619      	mov	r1, r3
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f7ff fee7 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801041a:	f241 3288 	movw	r2, #5000	; 0x1388
 801041e:	2119      	movs	r1, #25
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 f9d3 	bl	80107cc <SDMMC_GetCmdResp1>
 8010426:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010428:	69fb      	ldr	r3, [r7, #28]
}
 801042a:	4618      	mov	r0, r3
 801042c:	3720      	adds	r7, #32
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
	...

08010434 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b088      	sub	sp, #32
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801043c:	2300      	movs	r3, #0
 801043e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010440:	230c      	movs	r3, #12
 8010442:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801044a:	2300      	movs	r3, #0
 801044c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801044e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010452:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801046c:	f107 0308 	add.w	r3, r7, #8
 8010470:	4619      	mov	r1, r3
 8010472:	6878      	ldr	r0, [r7, #4]
 8010474:	f7ff feb8 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010478:	4a0b      	ldr	r2, [pc, #44]	; (80104a8 <SDMMC_CmdStopTransfer+0x74>)
 801047a:	210c      	movs	r1, #12
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f000 f9a5 	bl	80107cc <SDMMC_GetCmdResp1>
 8010482:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010496:	d101      	bne.n	801049c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010498:	2300      	movs	r3, #0
 801049a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801049c:	69fb      	ldr	r3, [r7, #28]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3720      	adds	r7, #32
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	05f5e100 	.word	0x05f5e100

080104ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b088      	sub	sp, #32
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80104ba:	2307      	movs	r3, #7
 80104bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104c4:	2300      	movs	r3, #0
 80104c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104ce:	f107 0308 	add.w	r3, r7, #8
 80104d2:	4619      	mov	r1, r3
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f7ff fe87 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80104da:	f241 3288 	movw	r2, #5000	; 0x1388
 80104de:	2107      	movs	r1, #7
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 f973 	bl	80107cc <SDMMC_GetCmdResp1>
 80104e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104e8:	69fb      	ldr	r3, [r7, #28]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3720      	adds	r7, #32
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b088      	sub	sp, #32
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80104fa:	2300      	movs	r3, #0
 80104fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80104fe:	2300      	movs	r3, #0
 8010500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010502:	2300      	movs	r3, #0
 8010504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010506:	2300      	movs	r3, #0
 8010508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801050a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801050e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010510:	f107 0308 	add.w	r3, r7, #8
 8010514:	4619      	mov	r1, r3
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7ff fe66 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f000 fb97 	bl	8010c50 <SDMMC_GetCmdError>
 8010522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010524:	69fb      	ldr	r3, [r7, #28]
}
 8010526:	4618      	mov	r0, r3
 8010528:	3720      	adds	r7, #32
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b088      	sub	sp, #32
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010536:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801053a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801053c:	2308      	movs	r3, #8
 801053e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010546:	2300      	movs	r3, #0
 8010548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801054a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801054e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010550:	f107 0308 	add.w	r3, r7, #8
 8010554:	4619      	mov	r1, r3
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f7ff fe46 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 fb29 	bl	8010bb4 <SDMMC_GetCmdResp7>
 8010562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010564:	69fb      	ldr	r3, [r7, #28]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3720      	adds	r7, #32
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}

0801056e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b088      	sub	sp, #32
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
 8010576:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801057c:	2337      	movs	r3, #55	; 0x37
 801057e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010586:	2300      	movs	r3, #0
 8010588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801058a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801058e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010590:	f107 0308 	add.w	r3, r7, #8
 8010594:	4619      	mov	r1, r3
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f7ff fe26 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801059c:	f241 3288 	movw	r2, #5000	; 0x1388
 80105a0:	2137      	movs	r1, #55	; 0x37
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 f912 	bl	80107cc <SDMMC_GetCmdResp1>
 80105a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105aa:	69fb      	ldr	r3, [r7, #28]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3720      	adds	r7, #32
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b088      	sub	sp, #32
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80105c2:	2329      	movs	r3, #41	; 0x29
 80105c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105cc:	2300      	movs	r3, #0
 80105ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105d6:	f107 0308 	add.w	r3, r7, #8
 80105da:	4619      	mov	r1, r3
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7ff fe03 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f000 fa2e 	bl	8010a44 <SDMMC_GetCmdResp3>
 80105e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ea:	69fb      	ldr	r3, [r7, #28]
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3720      	adds	r7, #32
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b088      	sub	sp, #32
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010602:	2306      	movs	r3, #6
 8010604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010606:	f44f 7380 	mov.w	r3, #256	; 0x100
 801060a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801060c:	2300      	movs	r3, #0
 801060e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010616:	f107 0308 	add.w	r3, r7, #8
 801061a:	4619      	mov	r1, r3
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f7ff fde3 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010622:	f241 3288 	movw	r2, #5000	; 0x1388
 8010626:	2106      	movs	r1, #6
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f000 f8cf 	bl	80107cc <SDMMC_GetCmdResp1>
 801062e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010630:	69fb      	ldr	r3, [r7, #28]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3720      	adds	r7, #32
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b088      	sub	sp, #32
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010642:	2300      	movs	r3, #0
 8010644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010646:	2333      	movs	r3, #51	; 0x33
 8010648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801064a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801064e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010650:	2300      	movs	r3, #0
 8010652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010658:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801065a:	f107 0308 	add.w	r3, r7, #8
 801065e:	4619      	mov	r1, r3
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f7ff fdc1 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010666:	f241 3288 	movw	r2, #5000	; 0x1388
 801066a:	2133      	movs	r1, #51	; 0x33
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f000 f8ad 	bl	80107cc <SDMMC_GetCmdResp1>
 8010672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010674:	69fb      	ldr	r3, [r7, #28]
}
 8010676:	4618      	mov	r0, r3
 8010678:	3720      	adds	r7, #32
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b088      	sub	sp, #32
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010686:	2300      	movs	r3, #0
 8010688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801068a:	2302      	movs	r3, #2
 801068c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801068e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010694:	2300      	movs	r3, #0
 8010696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801069c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801069e:	f107 0308 	add.w	r3, r7, #8
 80106a2:	4619      	mov	r1, r3
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f7ff fd9f 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 f980 	bl	80109b0 <SDMMC_GetCmdResp2>
 80106b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106b2:	69fb      	ldr	r3, [r7, #28]
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3720      	adds	r7, #32
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}

080106bc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b088      	sub	sp, #32
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106ca:	2309      	movs	r3, #9
 80106cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80106d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106d4:	2300      	movs	r3, #0
 80106d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106de:	f107 0308 	add.w	r3, r7, #8
 80106e2:	4619      	mov	r1, r3
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7ff fd7f 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f000 f960 	bl	80109b0 <SDMMC_GetCmdResp2>
 80106f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106f2:	69fb      	ldr	r3, [r7, #28]
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3720      	adds	r7, #32
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b088      	sub	sp, #32
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010706:	2300      	movs	r3, #0
 8010708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801070a:	2303      	movs	r3, #3
 801070c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801070e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010714:	2300      	movs	r3, #0
 8010716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801071c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801071e:	f107 0308 	add.w	r3, r7, #8
 8010722:	4619      	mov	r1, r3
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f7ff fd5f 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801072a:	683a      	ldr	r2, [r7, #0]
 801072c:	2103      	movs	r1, #3
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f000 f9c8 	bl	8010ac4 <SDMMC_GetCmdResp6>
 8010734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010736:	69fb      	ldr	r3, [r7, #28]
}
 8010738:	4618      	mov	r0, r3
 801073a:	3720      	adds	r7, #32
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b088      	sub	sp, #32
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801074e:	230d      	movs	r3, #13
 8010750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010758:	2300      	movs	r3, #0
 801075a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010760:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010762:	f107 0308 	add.w	r3, r7, #8
 8010766:	4619      	mov	r1, r3
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f7ff fd3d 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801076e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010772:	210d      	movs	r1, #13
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 f829 	bl	80107cc <SDMMC_GetCmdResp1>
 801077a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801077c:	69fb      	ldr	r3, [r7, #28]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3720      	adds	r7, #32
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010786:	b580      	push	{r7, lr}
 8010788:	b088      	sub	sp, #32
 801078a:	af00      	add	r7, sp, #0
 801078c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801078e:	2300      	movs	r3, #0
 8010790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010792:	230d      	movs	r3, #13
 8010794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010796:	f44f 7380 	mov.w	r3, #256	; 0x100
 801079a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801079c:	2300      	movs	r3, #0
 801079e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80107a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107a6:	f107 0308 	add.w	r3, r7, #8
 80107aa:	4619      	mov	r1, r3
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f7ff fd1b 	bl	80101e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80107b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80107b6:	210d      	movs	r1, #13
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f000 f807 	bl	80107cc <SDMMC_GetCmdResp1>
 80107be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107c0:	69fb      	ldr	r3, [r7, #28]
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3720      	adds	r7, #32
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
	...

080107cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b088      	sub	sp, #32
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	60f8      	str	r0, [r7, #12]
 80107d4:	460b      	mov	r3, r1
 80107d6:	607a      	str	r2, [r7, #4]
 80107d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80107da:	4b70      	ldr	r3, [pc, #448]	; (801099c <SDMMC_GetCmdResp1+0x1d0>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a70      	ldr	r2, [pc, #448]	; (80109a0 <SDMMC_GetCmdResp1+0x1d4>)
 80107e0:	fba2 2303 	umull	r2, r3, r2, r3
 80107e4:	0a5a      	lsrs	r2, r3, #9
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	fb02 f303 	mul.w	r3, r2, r3
 80107ec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	1e5a      	subs	r2, r3, #1
 80107f2:	61fa      	str	r2, [r7, #28]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d102      	bne.n	80107fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107fc:	e0c9      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010802:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010804:	69ba      	ldr	r2, [r7, #24]
 8010806:	4b67      	ldr	r3, [pc, #412]	; (80109a4 <SDMMC_GetCmdResp1+0x1d8>)
 8010808:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801080a:	2b00      	cmp	r3, #0
 801080c:	d0ef      	beq.n	80107ee <SDMMC_GetCmdResp1+0x22>
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1ea      	bne.n	80107ee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801081c:	f003 0304 	and.w	r3, r3, #4
 8010820:	2b00      	cmp	r3, #0
 8010822:	d004      	beq.n	801082e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2204      	movs	r2, #4
 8010828:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801082a:	2304      	movs	r3, #4
 801082c:	e0b1      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010832:	f003 0301 	and.w	r3, r3, #1
 8010836:	2b00      	cmp	r3, #0
 8010838:	d004      	beq.n	8010844 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2201      	movs	r2, #1
 801083e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010840:	2301      	movs	r3, #1
 8010842:	e0a6      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	4a58      	ldr	r2, [pc, #352]	; (80109a8 <SDMMC_GetCmdResp1+0x1dc>)
 8010848:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801084a:	68f8      	ldr	r0, [r7, #12]
 801084c:	f7ff fcf6 	bl	801023c <SDMMC_GetCommandResponse>
 8010850:	4603      	mov	r3, r0
 8010852:	461a      	mov	r2, r3
 8010854:	7afb      	ldrb	r3, [r7, #11]
 8010856:	4293      	cmp	r3, r2
 8010858:	d001      	beq.n	801085e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801085a:	2301      	movs	r3, #1
 801085c:	e099      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801085e:	2100      	movs	r1, #0
 8010860:	68f8      	ldr	r0, [r7, #12]
 8010862:	f7ff fcf8 	bl	8010256 <SDMMC_GetResponse>
 8010866:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010868:	697a      	ldr	r2, [r7, #20]
 801086a:	4b50      	ldr	r3, [pc, #320]	; (80109ac <SDMMC_GetCmdResp1+0x1e0>)
 801086c:	4013      	ands	r3, r2
 801086e:	2b00      	cmp	r3, #0
 8010870:	d101      	bne.n	8010876 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010872:	2300      	movs	r3, #0
 8010874:	e08d      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	2b00      	cmp	r3, #0
 801087a:	da02      	bge.n	8010882 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801087c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010880:	e087      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010888:	2b00      	cmp	r3, #0
 801088a:	d001      	beq.n	8010890 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801088c:	2340      	movs	r3, #64	; 0x40
 801088e:	e080      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010896:	2b00      	cmp	r3, #0
 8010898:	d001      	beq.n	801089e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801089a:	2380      	movs	r3, #128	; 0x80
 801089c:	e079      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d002      	beq.n	80108ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80108a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108ac:	e071      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d002      	beq.n	80108be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80108b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108bc:	e069      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d002      	beq.n	80108ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80108c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108cc:	e061      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d002      	beq.n	80108de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80108d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108dc:	e059      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d002      	beq.n	80108ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108ec:	e051      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d002      	beq.n	80108fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80108f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80108fc:	e049      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010904:	2b00      	cmp	r3, #0
 8010906:	d002      	beq.n	801090e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010908:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801090c:	e041      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010914:	2b00      	cmp	r3, #0
 8010916:	d002      	beq.n	801091e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801091c:	e039      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010924:	2b00      	cmp	r3, #0
 8010926:	d002      	beq.n	801092e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801092c:	e031      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010934:	2b00      	cmp	r3, #0
 8010936:	d002      	beq.n	801093e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010938:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801093c:	e029      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010944:	2b00      	cmp	r3, #0
 8010946:	d002      	beq.n	801094e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010948:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801094c:	e021      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010954:	2b00      	cmp	r3, #0
 8010956:	d002      	beq.n	801095e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010958:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801095c:	e019      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010964:	2b00      	cmp	r3, #0
 8010966:	d002      	beq.n	801096e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010968:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801096c:	e011      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010974:	2b00      	cmp	r3, #0
 8010976:	d002      	beq.n	801097e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010978:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801097c:	e009      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	f003 0308 	and.w	r3, r3, #8
 8010984:	2b00      	cmp	r3, #0
 8010986:	d002      	beq.n	801098e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010988:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801098c:	e001      	b.n	8010992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801098e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010992:	4618      	mov	r0, r3
 8010994:	3720      	adds	r7, #32
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	24000000 	.word	0x24000000
 80109a0:	10624dd3 	.word	0x10624dd3
 80109a4:	00200045 	.word	0x00200045
 80109a8:	002000c5 	.word	0x002000c5
 80109ac:	fdffe008 	.word	0xfdffe008

080109b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b085      	sub	sp, #20
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109b8:	4b1f      	ldr	r3, [pc, #124]	; (8010a38 <SDMMC_GetCmdResp2+0x88>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4a1f      	ldr	r2, [pc, #124]	; (8010a3c <SDMMC_GetCmdResp2+0x8c>)
 80109be:	fba2 2303 	umull	r2, r3, r2, r3
 80109c2:	0a5b      	lsrs	r3, r3, #9
 80109c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80109c8:	fb02 f303 	mul.w	r3, r2, r3
 80109cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	1e5a      	subs	r2, r3, #1
 80109d2:	60fa      	str	r2, [r7, #12]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d102      	bne.n	80109de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109dc:	e026      	b.n	8010a2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109e2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d0ef      	beq.n	80109ce <SDMMC_GetCmdResp2+0x1e>
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1ea      	bne.n	80109ce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109fc:	f003 0304 	and.w	r3, r3, #4
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d004      	beq.n	8010a0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2204      	movs	r2, #4
 8010a08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a0a:	2304      	movs	r3, #4
 8010a0c:	e00e      	b.n	8010a2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a12:	f003 0301 	and.w	r3, r3, #1
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d004      	beq.n	8010a24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a20:	2301      	movs	r3, #1
 8010a22:	e003      	b.n	8010a2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	4a06      	ldr	r2, [pc, #24]	; (8010a40 <SDMMC_GetCmdResp2+0x90>)
 8010a28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3714      	adds	r7, #20
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr
 8010a38:	24000000 	.word	0x24000000
 8010a3c:	10624dd3 	.word	0x10624dd3
 8010a40:	002000c5 	.word	0x002000c5

08010a44 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b085      	sub	sp, #20
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a4c:	4b1a      	ldr	r3, [pc, #104]	; (8010ab8 <SDMMC_GetCmdResp3+0x74>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a1a      	ldr	r2, [pc, #104]	; (8010abc <SDMMC_GetCmdResp3+0x78>)
 8010a52:	fba2 2303 	umull	r2, r3, r2, r3
 8010a56:	0a5b      	lsrs	r3, r3, #9
 8010a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a5c:	fb02 f303 	mul.w	r3, r2, r3
 8010a60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	1e5a      	subs	r2, r3, #1
 8010a66:	60fa      	str	r2, [r7, #12]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d102      	bne.n	8010a72 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a70:	e01b      	b.n	8010aaa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a76:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d0ef      	beq.n	8010a62 <SDMMC_GetCmdResp3+0x1e>
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d1ea      	bne.n	8010a62 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a90:	f003 0304 	and.w	r3, r3, #4
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d004      	beq.n	8010aa2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2204      	movs	r2, #4
 8010a9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a9e:	2304      	movs	r3, #4
 8010aa0:	e003      	b.n	8010aaa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4a06      	ldr	r2, [pc, #24]	; (8010ac0 <SDMMC_GetCmdResp3+0x7c>)
 8010aa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010aa8:	2300      	movs	r3, #0
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3714      	adds	r7, #20
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab4:	4770      	bx	lr
 8010ab6:	bf00      	nop
 8010ab8:	24000000 	.word	0x24000000
 8010abc:	10624dd3 	.word	0x10624dd3
 8010ac0:	002000c5 	.word	0x002000c5

08010ac4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b088      	sub	sp, #32
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	460b      	mov	r3, r1
 8010ace:	607a      	str	r2, [r7, #4]
 8010ad0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ad2:	4b35      	ldr	r3, [pc, #212]	; (8010ba8 <SDMMC_GetCmdResp6+0xe4>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4a35      	ldr	r2, [pc, #212]	; (8010bac <SDMMC_GetCmdResp6+0xe8>)
 8010ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8010adc:	0a5b      	lsrs	r3, r3, #9
 8010ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ae2:	fb02 f303 	mul.w	r3, r2, r3
 8010ae6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	1e5a      	subs	r2, r3, #1
 8010aec:	61fa      	str	r2, [r7, #28]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d102      	bne.n	8010af8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010af2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010af6:	e052      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010afc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010afe:	69bb      	ldr	r3, [r7, #24]
 8010b00:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d0ef      	beq.n	8010ae8 <SDMMC_GetCmdResp6+0x24>
 8010b08:	69bb      	ldr	r3, [r7, #24]
 8010b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d1ea      	bne.n	8010ae8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b16:	f003 0304 	and.w	r3, r3, #4
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d004      	beq.n	8010b28 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	2204      	movs	r2, #4
 8010b22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b24:	2304      	movs	r3, #4
 8010b26:	e03a      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b2c:	f003 0301 	and.w	r3, r3, #1
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d004      	beq.n	8010b3e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	2201      	movs	r2, #1
 8010b38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e02f      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f7ff fb7c 	bl	801023c <SDMMC_GetCommandResponse>
 8010b44:	4603      	mov	r3, r0
 8010b46:	461a      	mov	r2, r3
 8010b48:	7afb      	ldrb	r3, [r7, #11]
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d001      	beq.n	8010b52 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e025      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	4a16      	ldr	r2, [pc, #88]	; (8010bb0 <SDMMC_GetCmdResp6+0xec>)
 8010b56:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010b58:	2100      	movs	r1, #0
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f7ff fb7b 	bl	8010256 <SDMMC_GetResponse>
 8010b60:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d106      	bne.n	8010b7a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	0c1b      	lsrs	r3, r3, #16
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010b76:	2300      	movs	r3, #0
 8010b78:	e011      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d002      	beq.n	8010b8a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b88:	e009      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d002      	beq.n	8010b9a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b98:	e001      	b.n	8010b9e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3720      	adds	r7, #32
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	24000000 	.word	0x24000000
 8010bac:	10624dd3 	.word	0x10624dd3
 8010bb0:	002000c5 	.word	0x002000c5

08010bb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010bbc:	4b22      	ldr	r3, [pc, #136]	; (8010c48 <SDMMC_GetCmdResp7+0x94>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	4a22      	ldr	r2, [pc, #136]	; (8010c4c <SDMMC_GetCmdResp7+0x98>)
 8010bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8010bc6:	0a5b      	lsrs	r3, r3, #9
 8010bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bcc:	fb02 f303 	mul.w	r3, r2, r3
 8010bd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	1e5a      	subs	r2, r3, #1
 8010bd6:	60fa      	str	r2, [r7, #12]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d102      	bne.n	8010be2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010be0:	e02c      	b.n	8010c3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010be6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d0ef      	beq.n	8010bd2 <SDMMC_GetCmdResp7+0x1e>
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d1ea      	bne.n	8010bd2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c00:	f003 0304 	and.w	r3, r3, #4
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d004      	beq.n	8010c12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2204      	movs	r2, #4
 8010c0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c0e:	2304      	movs	r3, #4
 8010c10:	e014      	b.n	8010c3c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c16:	f003 0301 	and.w	r3, r3, #1
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d004      	beq.n	8010c28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2201      	movs	r2, #1
 8010c22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c24:	2301      	movs	r3, #1
 8010c26:	e009      	b.n	8010c3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d002      	beq.n	8010c3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2240      	movs	r2, #64	; 0x40
 8010c38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c3a:	2300      	movs	r3, #0

}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3714      	adds	r7, #20
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr
 8010c48:	24000000 	.word	0x24000000
 8010c4c:	10624dd3 	.word	0x10624dd3

08010c50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b085      	sub	sp, #20
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c58:	4b11      	ldr	r3, [pc, #68]	; (8010ca0 <SDMMC_GetCmdError+0x50>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	4a11      	ldr	r2, [pc, #68]	; (8010ca4 <SDMMC_GetCmdError+0x54>)
 8010c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c62:	0a5b      	lsrs	r3, r3, #9
 8010c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c68:	fb02 f303 	mul.w	r3, r2, r3
 8010c6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	1e5a      	subs	r2, r3, #1
 8010c72:	60fa      	str	r2, [r7, #12]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d102      	bne.n	8010c7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c7c:	e009      	b.n	8010c92 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d0f1      	beq.n	8010c6e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4a06      	ldr	r2, [pc, #24]	; (8010ca8 <SDMMC_GetCmdError+0x58>)
 8010c8e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010c90:	2300      	movs	r3, #0
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3714      	adds	r7, #20
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr
 8010c9e:	bf00      	nop
 8010ca0:	24000000 	.word	0x24000000
 8010ca4:	10624dd3 	.word	0x10624dd3
 8010ca8:	002000c5 	.word	0x002000c5

08010cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010cac:	b084      	sub	sp, #16
 8010cae:	b580      	push	{r7, lr}
 8010cb0:	b084      	sub	sp, #16
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	6078      	str	r0, [r7, #4]
 8010cb6:	f107 001c 	add.w	r0, r7, #28
 8010cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	d120      	bne.n	8010d06 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	68da      	ldr	r2, [r3, #12]
 8010cd4:	4b2a      	ldr	r3, [pc, #168]	; (8010d80 <USB_CoreInit+0xd4>)
 8010cd6:	4013      	ands	r3, r2
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d105      	bne.n	8010cfa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f001 faf8 	bl	80122f0 <USB_CoreReset>
 8010d00:	4603      	mov	r3, r0
 8010d02:	73fb      	strb	r3, [r7, #15]
 8010d04:	e01a      	b.n	8010d3c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	68db      	ldr	r3, [r3, #12]
 8010d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f001 faec 	bl	80122f0 <USB_CoreReset>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d106      	bne.n	8010d30 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8010d2e:	e005      	b.n	8010d3c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	d116      	bne.n	8010d70 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d46:	b29a      	uxth	r2, r3
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010d50:	4b0c      	ldr	r3, [pc, #48]	; (8010d84 <USB_CoreInit+0xd8>)
 8010d52:	4313      	orrs	r3, r2
 8010d54:	687a      	ldr	r2, [r7, #4]
 8010d56:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	f043 0206 	orr.w	r2, r3, #6
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	689b      	ldr	r3, [r3, #8]
 8010d68:	f043 0220 	orr.w	r2, r3, #32
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3710      	adds	r7, #16
 8010d76:	46bd      	mov	sp, r7
 8010d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010d7c:	b004      	add	sp, #16
 8010d7e:	4770      	bx	lr
 8010d80:	ffbdffbf 	.word	0xffbdffbf
 8010d84:	03ee0000 	.word	0x03ee0000

08010d88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b087      	sub	sp, #28
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	60b9      	str	r1, [r7, #8]
 8010d92:	4613      	mov	r3, r2
 8010d94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010d96:	79fb      	ldrb	r3, [r7, #7]
 8010d98:	2b02      	cmp	r3, #2
 8010d9a:	d165      	bne.n	8010e68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	4a41      	ldr	r2, [pc, #260]	; (8010ea4 <USB_SetTurnaroundTime+0x11c>)
 8010da0:	4293      	cmp	r3, r2
 8010da2:	d906      	bls.n	8010db2 <USB_SetTurnaroundTime+0x2a>
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	4a40      	ldr	r2, [pc, #256]	; (8010ea8 <USB_SetTurnaroundTime+0x120>)
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d202      	bcs.n	8010db2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010dac:	230f      	movs	r3, #15
 8010dae:	617b      	str	r3, [r7, #20]
 8010db0:	e062      	b.n	8010e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	4a3c      	ldr	r2, [pc, #240]	; (8010ea8 <USB_SetTurnaroundTime+0x120>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d306      	bcc.n	8010dc8 <USB_SetTurnaroundTime+0x40>
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	4a3b      	ldr	r2, [pc, #236]	; (8010eac <USB_SetTurnaroundTime+0x124>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d202      	bcs.n	8010dc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010dc2:	230e      	movs	r3, #14
 8010dc4:	617b      	str	r3, [r7, #20]
 8010dc6:	e057      	b.n	8010e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	4a38      	ldr	r2, [pc, #224]	; (8010eac <USB_SetTurnaroundTime+0x124>)
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d306      	bcc.n	8010dde <USB_SetTurnaroundTime+0x56>
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	4a37      	ldr	r2, [pc, #220]	; (8010eb0 <USB_SetTurnaroundTime+0x128>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d202      	bcs.n	8010dde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010dd8:	230d      	movs	r3, #13
 8010dda:	617b      	str	r3, [r7, #20]
 8010ddc:	e04c      	b.n	8010e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	4a33      	ldr	r2, [pc, #204]	; (8010eb0 <USB_SetTurnaroundTime+0x128>)
 8010de2:	4293      	cmp	r3, r2
 8010de4:	d306      	bcc.n	8010df4 <USB_SetTurnaroundTime+0x6c>
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	4a32      	ldr	r2, [pc, #200]	; (8010eb4 <USB_SetTurnaroundTime+0x12c>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d802      	bhi.n	8010df4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010dee:	230c      	movs	r3, #12
 8010df0:	617b      	str	r3, [r7, #20]
 8010df2:	e041      	b.n	8010e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	4a2f      	ldr	r2, [pc, #188]	; (8010eb4 <USB_SetTurnaroundTime+0x12c>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d906      	bls.n	8010e0a <USB_SetTurnaroundTime+0x82>
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	4a2e      	ldr	r2, [pc, #184]	; (8010eb8 <USB_SetTurnaroundTime+0x130>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d802      	bhi.n	8010e0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010e04:	230b      	movs	r3, #11
 8010e06:	617b      	str	r3, [r7, #20]
 8010e08:	e036      	b.n	8010e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	4a2a      	ldr	r2, [pc, #168]	; (8010eb8 <USB_SetTurnaroundTime+0x130>)
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d906      	bls.n	8010e20 <USB_SetTurnaroundTime+0x98>
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	4a29      	ldr	r2, [pc, #164]	; (8010ebc <USB_SetTurnaroundTime+0x134>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d802      	bhi.n	8010e20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010e1a:	230a      	movs	r3, #10
 8010e1c:	617b      	str	r3, [r7, #20]
 8010e1e:	e02b      	b.n	8010e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	4a26      	ldr	r2, [pc, #152]	; (8010ebc <USB_SetTurnaroundTime+0x134>)
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d906      	bls.n	8010e36 <USB_SetTurnaroundTime+0xae>
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	4a25      	ldr	r2, [pc, #148]	; (8010ec0 <USB_SetTurnaroundTime+0x138>)
 8010e2c:	4293      	cmp	r3, r2
 8010e2e:	d202      	bcs.n	8010e36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010e30:	2309      	movs	r3, #9
 8010e32:	617b      	str	r3, [r7, #20]
 8010e34:	e020      	b.n	8010e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	4a21      	ldr	r2, [pc, #132]	; (8010ec0 <USB_SetTurnaroundTime+0x138>)
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d306      	bcc.n	8010e4c <USB_SetTurnaroundTime+0xc4>
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	4a20      	ldr	r2, [pc, #128]	; (8010ec4 <USB_SetTurnaroundTime+0x13c>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d802      	bhi.n	8010e4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010e46:	2308      	movs	r3, #8
 8010e48:	617b      	str	r3, [r7, #20]
 8010e4a:	e015      	b.n	8010e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	4a1d      	ldr	r2, [pc, #116]	; (8010ec4 <USB_SetTurnaroundTime+0x13c>)
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d906      	bls.n	8010e62 <USB_SetTurnaroundTime+0xda>
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	4a1c      	ldr	r2, [pc, #112]	; (8010ec8 <USB_SetTurnaroundTime+0x140>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d202      	bcs.n	8010e62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010e5c:	2307      	movs	r3, #7
 8010e5e:	617b      	str	r3, [r7, #20]
 8010e60:	e00a      	b.n	8010e78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010e62:	2306      	movs	r3, #6
 8010e64:	617b      	str	r3, [r7, #20]
 8010e66:	e007      	b.n	8010e78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010e68:	79fb      	ldrb	r3, [r7, #7]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d102      	bne.n	8010e74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010e6e:	2309      	movs	r3, #9
 8010e70:	617b      	str	r3, [r7, #20]
 8010e72:	e001      	b.n	8010e78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010e74:	2309      	movs	r3, #9
 8010e76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	68da      	ldr	r2, [r3, #12]
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	029b      	lsls	r3, r3, #10
 8010e8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010e90:	431a      	orrs	r2, r3
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010e96:	2300      	movs	r3, #0
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	371c      	adds	r7, #28
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr
 8010ea4:	00d8acbf 	.word	0x00d8acbf
 8010ea8:	00e4e1c0 	.word	0x00e4e1c0
 8010eac:	00f42400 	.word	0x00f42400
 8010eb0:	01067380 	.word	0x01067380
 8010eb4:	011a499f 	.word	0x011a499f
 8010eb8:	01312cff 	.word	0x01312cff
 8010ebc:	014ca43f 	.word	0x014ca43f
 8010ec0:	016e3600 	.word	0x016e3600
 8010ec4:	01a6ab1f 	.word	0x01a6ab1f
 8010ec8:	01e84800 	.word	0x01e84800

08010ecc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b083      	sub	sp, #12
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	689b      	ldr	r3, [r3, #8]
 8010ed8:	f043 0201 	orr.w	r2, r3, #1
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010ee0:	2300      	movs	r3, #0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	370c      	adds	r7, #12
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr

08010eee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010eee:	b480      	push	{r7}
 8010ef0:	b083      	sub	sp, #12
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	689b      	ldr	r3, [r3, #8]
 8010efa:	f023 0201 	bic.w	r2, r3, #1
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010f02:	2300      	movs	r3, #0
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	370c      	adds	r7, #12
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr

08010f10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b084      	sub	sp, #16
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	460b      	mov	r3, r1
 8010f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010f2c:	78fb      	ldrb	r3, [r7, #3]
 8010f2e:	2b01      	cmp	r3, #1
 8010f30:	d115      	bne.n	8010f5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	68db      	ldr	r3, [r3, #12]
 8010f36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010f3e:	2001      	movs	r0, #1
 8010f40:	f7f1 ff3e 	bl	8002dc0 <HAL_Delay>
      ms++;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	3301      	adds	r3, #1
 8010f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f001 f93f 	bl	80121ce <USB_GetMode>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	d01e      	beq.n	8010f94 <USB_SetCurrentMode+0x84>
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	2b31      	cmp	r3, #49	; 0x31
 8010f5a:	d9f0      	bls.n	8010f3e <USB_SetCurrentMode+0x2e>
 8010f5c:	e01a      	b.n	8010f94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010f5e:	78fb      	ldrb	r3, [r7, #3]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d115      	bne.n	8010f90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010f70:	2001      	movs	r0, #1
 8010f72:	f7f1 ff25 	bl	8002dc0 <HAL_Delay>
      ms++;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f001 f926 	bl	80121ce <USB_GetMode>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d005      	beq.n	8010f94 <USB_SetCurrentMode+0x84>
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2b31      	cmp	r3, #49	; 0x31
 8010f8c:	d9f0      	bls.n	8010f70 <USB_SetCurrentMode+0x60>
 8010f8e:	e001      	b.n	8010f94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010f90:	2301      	movs	r3, #1
 8010f92:	e005      	b.n	8010fa0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2b32      	cmp	r3, #50	; 0x32
 8010f98:	d101      	bne.n	8010f9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e000      	b.n	8010fa0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010f9e:	2300      	movs	r3, #0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3710      	adds	r7, #16
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010fa8:	b084      	sub	sp, #16
 8010faa:	b580      	push	{r7, lr}
 8010fac:	b086      	sub	sp, #24
 8010fae:	af00      	add	r7, sp, #0
 8010fb0:	6078      	str	r0, [r7, #4]
 8010fb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	613b      	str	r3, [r7, #16]
 8010fc6:	e009      	b.n	8010fdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	3340      	adds	r3, #64	; 0x40
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	4413      	add	r3, r2
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	3301      	adds	r3, #1
 8010fda:	613b      	str	r3, [r7, #16]
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	2b0e      	cmp	r3, #14
 8010fe0:	d9f2      	bls.n	8010fc8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d11c      	bne.n	8011022 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ff6:	f043 0302 	orr.w	r3, r3, #2
 8010ffa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011000:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	601a      	str	r2, [r3, #0]
 8011020:	e005      	b.n	801102e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011026:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011034:	461a      	mov	r2, r3
 8011036:	2300      	movs	r3, #0
 8011038:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011040:	4619      	mov	r1, r3
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011048:	461a      	mov	r2, r3
 801104a:	680b      	ldr	r3, [r1, #0]
 801104c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801104e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011050:	2b01      	cmp	r3, #1
 8011052:	d10c      	bne.n	801106e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011056:	2b00      	cmp	r3, #0
 8011058:	d104      	bne.n	8011064 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801105a:	2100      	movs	r1, #0
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f000 f965 	bl	801132c <USB_SetDevSpeed>
 8011062:	e008      	b.n	8011076 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011064:	2101      	movs	r1, #1
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f000 f960 	bl	801132c <USB_SetDevSpeed>
 801106c:	e003      	b.n	8011076 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801106e:	2103      	movs	r1, #3
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f000 f95b 	bl	801132c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011076:	2110      	movs	r1, #16
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f000 f8f3 	bl	8011264 <USB_FlushTxFifo>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d001      	beq.n	8011088 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011084:	2301      	movs	r3, #1
 8011086:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f000 f91f 	bl	80112cc <USB_FlushRxFifo>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d001      	beq.n	8011098 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011094:	2301      	movs	r3, #1
 8011096:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801109e:	461a      	mov	r2, r3
 80110a0:	2300      	movs	r3, #0
 80110a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110aa:	461a      	mov	r2, r3
 80110ac:	2300      	movs	r3, #0
 80110ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110b6:	461a      	mov	r2, r3
 80110b8:	2300      	movs	r3, #0
 80110ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80110bc:	2300      	movs	r3, #0
 80110be:	613b      	str	r3, [r7, #16]
 80110c0:	e043      	b.n	801114a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	015a      	lsls	r2, r3, #5
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	4413      	add	r3, r2
 80110ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80110d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80110d8:	d118      	bne.n	801110c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d10a      	bne.n	80110f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	015a      	lsls	r2, r3, #5
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	4413      	add	r3, r2
 80110e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110ec:	461a      	mov	r2, r3
 80110ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80110f2:	6013      	str	r3, [r2, #0]
 80110f4:	e013      	b.n	801111e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	015a      	lsls	r2, r3, #5
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	4413      	add	r3, r2
 80110fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011102:	461a      	mov	r2, r3
 8011104:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011108:	6013      	str	r3, [r2, #0]
 801110a:	e008      	b.n	801111e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	015a      	lsls	r2, r3, #5
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	4413      	add	r3, r2
 8011114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011118:	461a      	mov	r2, r3
 801111a:	2300      	movs	r3, #0
 801111c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	015a      	lsls	r2, r3, #5
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	4413      	add	r3, r2
 8011126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801112a:	461a      	mov	r2, r3
 801112c:	2300      	movs	r3, #0
 801112e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	015a      	lsls	r2, r3, #5
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	4413      	add	r3, r2
 8011138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801113c:	461a      	mov	r2, r3
 801113e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011142:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	3301      	adds	r3, #1
 8011148:	613b      	str	r3, [r7, #16]
 801114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114c:	693a      	ldr	r2, [r7, #16]
 801114e:	429a      	cmp	r2, r3
 8011150:	d3b7      	bcc.n	80110c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011152:	2300      	movs	r3, #0
 8011154:	613b      	str	r3, [r7, #16]
 8011156:	e043      	b.n	80111e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	015a      	lsls	r2, r3, #5
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	4413      	add	r3, r2
 8011160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801116a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801116e:	d118      	bne.n	80111a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d10a      	bne.n	801118c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	015a      	lsls	r2, r3, #5
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	4413      	add	r3, r2
 801117e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011182:	461a      	mov	r2, r3
 8011184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011188:	6013      	str	r3, [r2, #0]
 801118a:	e013      	b.n	80111b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	015a      	lsls	r2, r3, #5
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	4413      	add	r3, r2
 8011194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011198:	461a      	mov	r2, r3
 801119a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801119e:	6013      	str	r3, [r2, #0]
 80111a0:	e008      	b.n	80111b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	015a      	lsls	r2, r3, #5
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	4413      	add	r3, r2
 80111aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111ae:	461a      	mov	r2, r3
 80111b0:	2300      	movs	r3, #0
 80111b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	015a      	lsls	r2, r3, #5
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	4413      	add	r3, r2
 80111bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111c0:	461a      	mov	r2, r3
 80111c2:	2300      	movs	r3, #0
 80111c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	015a      	lsls	r2, r3, #5
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	4413      	add	r3, r2
 80111ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111d2:	461a      	mov	r2, r3
 80111d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80111d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	3301      	adds	r3, #1
 80111de:	613b      	str	r3, [r7, #16]
 80111e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e2:	693a      	ldr	r2, [r7, #16]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d3b7      	bcc.n	8011158 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80111ee:	691b      	ldr	r3, [r3, #16]
 80111f0:	68fa      	ldr	r2, [r7, #12]
 80111f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80111f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80111fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2200      	movs	r2, #0
 8011200:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011208:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120c:	2b00      	cmp	r3, #0
 801120e:	d105      	bne.n	801121c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	699b      	ldr	r3, [r3, #24]
 8011214:	f043 0210 	orr.w	r2, r3, #16
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	699a      	ldr	r2, [r3, #24]
 8011220:	4b0e      	ldr	r3, [pc, #56]	; (801125c <USB_DevInit+0x2b4>)
 8011222:	4313      	orrs	r3, r2
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801122a:	2b00      	cmp	r3, #0
 801122c:	d005      	beq.n	801123a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	699b      	ldr	r3, [r3, #24]
 8011232:	f043 0208 	orr.w	r2, r3, #8
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801123a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801123c:	2b01      	cmp	r3, #1
 801123e:	d105      	bne.n	801124c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	699a      	ldr	r2, [r3, #24]
 8011244:	4b06      	ldr	r3, [pc, #24]	; (8011260 <USB_DevInit+0x2b8>)
 8011246:	4313      	orrs	r3, r2
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801124c:	7dfb      	ldrb	r3, [r7, #23]
}
 801124e:	4618      	mov	r0, r3
 8011250:	3718      	adds	r7, #24
 8011252:	46bd      	mov	sp, r7
 8011254:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011258:	b004      	add	sp, #16
 801125a:	4770      	bx	lr
 801125c:	803c3800 	.word	0x803c3800
 8011260:	40000004 	.word	0x40000004

08011264 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011264:	b480      	push	{r7}
 8011266:	b085      	sub	sp, #20
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801126e:	2300      	movs	r3, #0
 8011270:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	3301      	adds	r3, #1
 8011276:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	4a13      	ldr	r2, [pc, #76]	; (80112c8 <USB_FlushTxFifo+0x64>)
 801127c:	4293      	cmp	r3, r2
 801127e:	d901      	bls.n	8011284 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011280:	2303      	movs	r3, #3
 8011282:	e01b      	b.n	80112bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	691b      	ldr	r3, [r3, #16]
 8011288:	2b00      	cmp	r3, #0
 801128a:	daf2      	bge.n	8011272 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801128c:	2300      	movs	r3, #0
 801128e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	019b      	lsls	r3, r3, #6
 8011294:	f043 0220 	orr.w	r2, r3, #32
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	3301      	adds	r3, #1
 80112a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	4a08      	ldr	r2, [pc, #32]	; (80112c8 <USB_FlushTxFifo+0x64>)
 80112a6:	4293      	cmp	r3, r2
 80112a8:	d901      	bls.n	80112ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80112aa:	2303      	movs	r3, #3
 80112ac:	e006      	b.n	80112bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	691b      	ldr	r3, [r3, #16]
 80112b2:	f003 0320 	and.w	r3, r3, #32
 80112b6:	2b20      	cmp	r3, #32
 80112b8:	d0f0      	beq.n	801129c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80112ba:	2300      	movs	r3, #0
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3714      	adds	r7, #20
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr
 80112c8:	00030d40 	.word	0x00030d40

080112cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b085      	sub	sp, #20
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80112d4:	2300      	movs	r3, #0
 80112d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	3301      	adds	r3, #1
 80112dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	4a11      	ldr	r2, [pc, #68]	; (8011328 <USB_FlushRxFifo+0x5c>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d901      	bls.n	80112ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80112e6:	2303      	movs	r3, #3
 80112e8:	e018      	b.n	801131c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	691b      	ldr	r3, [r3, #16]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	daf2      	bge.n	80112d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80112f2:	2300      	movs	r3, #0
 80112f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2210      	movs	r2, #16
 80112fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	3301      	adds	r3, #1
 8011300:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	4a08      	ldr	r2, [pc, #32]	; (8011328 <USB_FlushRxFifo+0x5c>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d901      	bls.n	801130e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801130a:	2303      	movs	r3, #3
 801130c:	e006      	b.n	801131c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	691b      	ldr	r3, [r3, #16]
 8011312:	f003 0310 	and.w	r3, r3, #16
 8011316:	2b10      	cmp	r3, #16
 8011318:	d0f0      	beq.n	80112fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801131a:	2300      	movs	r3, #0
}
 801131c:	4618      	mov	r0, r3
 801131e:	3714      	adds	r7, #20
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr
 8011328:	00030d40 	.word	0x00030d40

0801132c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801132c:	b480      	push	{r7}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	460b      	mov	r3, r1
 8011336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	78fb      	ldrb	r3, [r7, #3]
 8011346:	68f9      	ldr	r1, [r7, #12]
 8011348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801134c:	4313      	orrs	r3, r2
 801134e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011350:	2300      	movs	r3, #0
}
 8011352:	4618      	mov	r0, r3
 8011354:	3714      	adds	r7, #20
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr

0801135e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801135e:	b480      	push	{r7}
 8011360:	b087      	sub	sp, #28
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	f003 0306 	and.w	r3, r3, #6
 8011376:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d102      	bne.n	8011384 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801137e:	2300      	movs	r3, #0
 8011380:	75fb      	strb	r3, [r7, #23]
 8011382:	e00a      	b.n	801139a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	2b02      	cmp	r3, #2
 8011388:	d002      	beq.n	8011390 <USB_GetDevSpeed+0x32>
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2b06      	cmp	r3, #6
 801138e:	d102      	bne.n	8011396 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011390:	2302      	movs	r3, #2
 8011392:	75fb      	strb	r3, [r7, #23]
 8011394:	e001      	b.n	801139a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011396:	230f      	movs	r3, #15
 8011398:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801139a:	7dfb      	ldrb	r3, [r7, #23]
}
 801139c:	4618      	mov	r0, r3
 801139e:	371c      	adds	r7, #28
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr

080113a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b085      	sub	sp, #20
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	785b      	ldrb	r3, [r3, #1]
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d139      	bne.n	8011438 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113ca:	69da      	ldr	r2, [r3, #28]
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	f003 030f 	and.w	r3, r3, #15
 80113d4:	2101      	movs	r1, #1
 80113d6:	fa01 f303 	lsl.w	r3, r1, r3
 80113da:	b29b      	uxth	r3, r3
 80113dc:	68f9      	ldr	r1, [r7, #12]
 80113de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80113e2:	4313      	orrs	r3, r2
 80113e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	015a      	lsls	r2, r3, #5
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	4413      	add	r3, r2
 80113ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d153      	bne.n	80114a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	015a      	lsls	r2, r3, #5
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	4413      	add	r3, r2
 8011404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011408:	681a      	ldr	r2, [r3, #0]
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	689b      	ldr	r3, [r3, #8]
 801140e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	791b      	ldrb	r3, [r3, #4]
 8011416:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011418:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	059b      	lsls	r3, r3, #22
 801141e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011420:	431a      	orrs	r2, r3
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	0159      	lsls	r1, r3, #5
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	440b      	add	r3, r1
 801142a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801142e:	4619      	mov	r1, r3
 8011430:	4b20      	ldr	r3, [pc, #128]	; (80114b4 <USB_ActivateEndpoint+0x10c>)
 8011432:	4313      	orrs	r3, r2
 8011434:	600b      	str	r3, [r1, #0]
 8011436:	e035      	b.n	80114a4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801143e:	69da      	ldr	r2, [r3, #28]
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	f003 030f 	and.w	r3, r3, #15
 8011448:	2101      	movs	r1, #1
 801144a:	fa01 f303 	lsl.w	r3, r1, r3
 801144e:	041b      	lsls	r3, r3, #16
 8011450:	68f9      	ldr	r1, [r7, #12]
 8011452:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011456:	4313      	orrs	r3, r2
 8011458:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	015a      	lsls	r2, r3, #5
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	4413      	add	r3, r2
 8011462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801146c:	2b00      	cmp	r3, #0
 801146e:	d119      	bne.n	80114a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	015a      	lsls	r2, r3, #5
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	4413      	add	r3, r2
 8011478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801147c:	681a      	ldr	r2, [r3, #0]
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	689b      	ldr	r3, [r3, #8]
 8011482:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	791b      	ldrb	r3, [r3, #4]
 801148a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801148c:	430b      	orrs	r3, r1
 801148e:	431a      	orrs	r2, r3
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	0159      	lsls	r1, r3, #5
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	440b      	add	r3, r1
 8011498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801149c:	4619      	mov	r1, r3
 801149e:	4b05      	ldr	r3, [pc, #20]	; (80114b4 <USB_ActivateEndpoint+0x10c>)
 80114a0:	4313      	orrs	r3, r2
 80114a2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80114a4:	2300      	movs	r3, #0
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3714      	adds	r7, #20
 80114aa:	46bd      	mov	sp, r7
 80114ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b0:	4770      	bx	lr
 80114b2:	bf00      	nop
 80114b4:	10008000 	.word	0x10008000

080114b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b085      	sub	sp, #20
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	785b      	ldrb	r3, [r3, #1]
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d161      	bne.n	8011598 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	015a      	lsls	r2, r3, #5
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	4413      	add	r3, r2
 80114dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80114e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80114ea:	d11f      	bne.n	801152c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	015a      	lsls	r2, r3, #5
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	4413      	add	r3, r2
 80114f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	68ba      	ldr	r2, [r7, #8]
 80114fc:	0151      	lsls	r1, r2, #5
 80114fe:	68fa      	ldr	r2, [r7, #12]
 8011500:	440a      	add	r2, r1
 8011502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011506:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801150a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	015a      	lsls	r2, r3, #5
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	4413      	add	r3, r2
 8011514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	68ba      	ldr	r2, [r7, #8]
 801151c:	0151      	lsls	r1, r2, #5
 801151e:	68fa      	ldr	r2, [r7, #12]
 8011520:	440a      	add	r2, r1
 8011522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801152a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	781b      	ldrb	r3, [r3, #0]
 8011538:	f003 030f 	and.w	r3, r3, #15
 801153c:	2101      	movs	r1, #1
 801153e:	fa01 f303 	lsl.w	r3, r1, r3
 8011542:	b29b      	uxth	r3, r3
 8011544:	43db      	mvns	r3, r3
 8011546:	68f9      	ldr	r1, [r7, #12]
 8011548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801154c:	4013      	ands	r3, r2
 801154e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011556:	69da      	ldr	r2, [r3, #28]
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	f003 030f 	and.w	r3, r3, #15
 8011560:	2101      	movs	r1, #1
 8011562:	fa01 f303 	lsl.w	r3, r1, r3
 8011566:	b29b      	uxth	r3, r3
 8011568:	43db      	mvns	r3, r3
 801156a:	68f9      	ldr	r1, [r7, #12]
 801156c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011570:	4013      	ands	r3, r2
 8011572:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	015a      	lsls	r2, r3, #5
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	4413      	add	r3, r2
 801157c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011580:	681a      	ldr	r2, [r3, #0]
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	0159      	lsls	r1, r3, #5
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	440b      	add	r3, r1
 801158a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801158e:	4619      	mov	r1, r3
 8011590:	4b35      	ldr	r3, [pc, #212]	; (8011668 <USB_DeactivateEndpoint+0x1b0>)
 8011592:	4013      	ands	r3, r2
 8011594:	600b      	str	r3, [r1, #0]
 8011596:	e060      	b.n	801165a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	015a      	lsls	r2, r3, #5
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	4413      	add	r3, r2
 80115a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80115aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80115ae:	d11f      	bne.n	80115f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	015a      	lsls	r2, r3, #5
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	4413      	add	r3, r2
 80115b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	68ba      	ldr	r2, [r7, #8]
 80115c0:	0151      	lsls	r1, r2, #5
 80115c2:	68fa      	ldr	r2, [r7, #12]
 80115c4:	440a      	add	r2, r1
 80115c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80115ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	015a      	lsls	r2, r3, #5
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	4413      	add	r3, r2
 80115d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	68ba      	ldr	r2, [r7, #8]
 80115e0:	0151      	lsls	r1, r2, #5
 80115e2:	68fa      	ldr	r2, [r7, #12]
 80115e4:	440a      	add	r2, r1
 80115e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80115ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	f003 030f 	and.w	r3, r3, #15
 8011600:	2101      	movs	r1, #1
 8011602:	fa01 f303 	lsl.w	r3, r1, r3
 8011606:	041b      	lsls	r3, r3, #16
 8011608:	43db      	mvns	r3, r3
 801160a:	68f9      	ldr	r1, [r7, #12]
 801160c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011610:	4013      	ands	r3, r2
 8011612:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801161a:	69da      	ldr	r2, [r3, #28]
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	781b      	ldrb	r3, [r3, #0]
 8011620:	f003 030f 	and.w	r3, r3, #15
 8011624:	2101      	movs	r1, #1
 8011626:	fa01 f303 	lsl.w	r3, r1, r3
 801162a:	041b      	lsls	r3, r3, #16
 801162c:	43db      	mvns	r3, r3
 801162e:	68f9      	ldr	r1, [r7, #12]
 8011630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011634:	4013      	ands	r3, r2
 8011636:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	015a      	lsls	r2, r3, #5
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	4413      	add	r3, r2
 8011640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	0159      	lsls	r1, r3, #5
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	440b      	add	r3, r1
 801164e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011652:	4619      	mov	r1, r3
 8011654:	4b05      	ldr	r3, [pc, #20]	; (801166c <USB_DeactivateEndpoint+0x1b4>)
 8011656:	4013      	ands	r3, r2
 8011658:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	3714      	adds	r7, #20
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr
 8011668:	ec337800 	.word	0xec337800
 801166c:	eff37800 	.word	0xeff37800

08011670 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b08a      	sub	sp, #40	; 0x28
 8011674:	af02      	add	r7, sp, #8
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	60b9      	str	r1, [r7, #8]
 801167a:	4613      	mov	r3, r2
 801167c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	781b      	ldrb	r3, [r3, #0]
 8011686:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	785b      	ldrb	r3, [r3, #1]
 801168c:	2b01      	cmp	r3, #1
 801168e:	f040 8181 	bne.w	8011994 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	691b      	ldr	r3, [r3, #16]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d132      	bne.n	8011700 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801169a:	69bb      	ldr	r3, [r7, #24]
 801169c:	015a      	lsls	r2, r3, #5
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	4413      	add	r3, r2
 80116a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116a6:	691a      	ldr	r2, [r3, #16]
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	0159      	lsls	r1, r3, #5
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	440b      	add	r3, r1
 80116b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116b4:	4619      	mov	r1, r3
 80116b6:	4ba5      	ldr	r3, [pc, #660]	; (801194c <USB_EPStartXfer+0x2dc>)
 80116b8:	4013      	ands	r3, r2
 80116ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	015a      	lsls	r2, r3, #5
 80116c0:	69fb      	ldr	r3, [r7, #28]
 80116c2:	4413      	add	r3, r2
 80116c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116c8:	691b      	ldr	r3, [r3, #16]
 80116ca:	69ba      	ldr	r2, [r7, #24]
 80116cc:	0151      	lsls	r1, r2, #5
 80116ce:	69fa      	ldr	r2, [r7, #28]
 80116d0:	440a      	add	r2, r1
 80116d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80116da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80116dc:	69bb      	ldr	r3, [r7, #24]
 80116de:	015a      	lsls	r2, r3, #5
 80116e0:	69fb      	ldr	r3, [r7, #28]
 80116e2:	4413      	add	r3, r2
 80116e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116e8:	691a      	ldr	r2, [r3, #16]
 80116ea:	69bb      	ldr	r3, [r7, #24]
 80116ec:	0159      	lsls	r1, r3, #5
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	440b      	add	r3, r1
 80116f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116f6:	4619      	mov	r1, r3
 80116f8:	4b95      	ldr	r3, [pc, #596]	; (8011950 <USB_EPStartXfer+0x2e0>)
 80116fa:	4013      	ands	r3, r2
 80116fc:	610b      	str	r3, [r1, #16]
 80116fe:	e092      	b.n	8011826 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011700:	69bb      	ldr	r3, [r7, #24]
 8011702:	015a      	lsls	r2, r3, #5
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	4413      	add	r3, r2
 8011708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801170c:	691a      	ldr	r2, [r3, #16]
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	0159      	lsls	r1, r3, #5
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	440b      	add	r3, r1
 8011716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801171a:	4619      	mov	r1, r3
 801171c:	4b8c      	ldr	r3, [pc, #560]	; (8011950 <USB_EPStartXfer+0x2e0>)
 801171e:	4013      	ands	r3, r2
 8011720:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	015a      	lsls	r2, r3, #5
 8011726:	69fb      	ldr	r3, [r7, #28]
 8011728:	4413      	add	r3, r2
 801172a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801172e:	691a      	ldr	r2, [r3, #16]
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	0159      	lsls	r1, r3, #5
 8011734:	69fb      	ldr	r3, [r7, #28]
 8011736:	440b      	add	r3, r1
 8011738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801173c:	4619      	mov	r1, r3
 801173e:	4b83      	ldr	r3, [pc, #524]	; (801194c <USB_EPStartXfer+0x2dc>)
 8011740:	4013      	ands	r3, r2
 8011742:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d11a      	bne.n	8011780 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	691a      	ldr	r2, [r3, #16]
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	689b      	ldr	r3, [r3, #8]
 8011752:	429a      	cmp	r2, r3
 8011754:	d903      	bls.n	801175e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	689a      	ldr	r2, [r3, #8]
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	015a      	lsls	r2, r3, #5
 8011762:	69fb      	ldr	r3, [r7, #28]
 8011764:	4413      	add	r3, r2
 8011766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801176a:	691b      	ldr	r3, [r3, #16]
 801176c:	69ba      	ldr	r2, [r7, #24]
 801176e:	0151      	lsls	r1, r2, #5
 8011770:	69fa      	ldr	r2, [r7, #28]
 8011772:	440a      	add	r2, r1
 8011774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801177c:	6113      	str	r3, [r2, #16]
 801177e:	e01b      	b.n	80117b8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	015a      	lsls	r2, r3, #5
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	4413      	add	r3, r2
 8011788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801178c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	6919      	ldr	r1, [r3, #16]
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	689b      	ldr	r3, [r3, #8]
 8011796:	440b      	add	r3, r1
 8011798:	1e59      	subs	r1, r3, #1
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	fbb1 f3f3 	udiv	r3, r1, r3
 80117a2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80117a4:	4b6b      	ldr	r3, [pc, #428]	; (8011954 <USB_EPStartXfer+0x2e4>)
 80117a6:	400b      	ands	r3, r1
 80117a8:	69b9      	ldr	r1, [r7, #24]
 80117aa:	0148      	lsls	r0, r1, #5
 80117ac:	69f9      	ldr	r1, [r7, #28]
 80117ae:	4401      	add	r1, r0
 80117b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80117b4:	4313      	orrs	r3, r2
 80117b6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	015a      	lsls	r2, r3, #5
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	4413      	add	r3, r2
 80117c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117c4:	691a      	ldr	r2, [r3, #16]
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	691b      	ldr	r3, [r3, #16]
 80117ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80117ce:	69b9      	ldr	r1, [r7, #24]
 80117d0:	0148      	lsls	r0, r1, #5
 80117d2:	69f9      	ldr	r1, [r7, #28]
 80117d4:	4401      	add	r1, r0
 80117d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80117da:	4313      	orrs	r3, r2
 80117dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	791b      	ldrb	r3, [r3, #4]
 80117e2:	2b01      	cmp	r3, #1
 80117e4:	d11f      	bne.n	8011826 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80117e6:	69bb      	ldr	r3, [r7, #24]
 80117e8:	015a      	lsls	r2, r3, #5
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	4413      	add	r3, r2
 80117ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117f2:	691b      	ldr	r3, [r3, #16]
 80117f4:	69ba      	ldr	r2, [r7, #24]
 80117f6:	0151      	lsls	r1, r2, #5
 80117f8:	69fa      	ldr	r2, [r7, #28]
 80117fa:	440a      	add	r2, r1
 80117fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011800:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011804:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	015a      	lsls	r2, r3, #5
 801180a:	69fb      	ldr	r3, [r7, #28]
 801180c:	4413      	add	r3, r2
 801180e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011812:	691b      	ldr	r3, [r3, #16]
 8011814:	69ba      	ldr	r2, [r7, #24]
 8011816:	0151      	lsls	r1, r2, #5
 8011818:	69fa      	ldr	r2, [r7, #28]
 801181a:	440a      	add	r2, r1
 801181c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011820:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011824:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011826:	79fb      	ldrb	r3, [r7, #7]
 8011828:	2b01      	cmp	r3, #1
 801182a:	d14b      	bne.n	80118c4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	69db      	ldr	r3, [r3, #28]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d009      	beq.n	8011848 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	015a      	lsls	r2, r3, #5
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	4413      	add	r3, r2
 801183c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011840:	461a      	mov	r2, r3
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	69db      	ldr	r3, [r3, #28]
 8011846:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	791b      	ldrb	r3, [r3, #4]
 801184c:	2b01      	cmp	r3, #1
 801184e:	d128      	bne.n	80118a2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011856:	689b      	ldr	r3, [r3, #8]
 8011858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801185c:	2b00      	cmp	r3, #0
 801185e:	d110      	bne.n	8011882 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011860:	69bb      	ldr	r3, [r7, #24]
 8011862:	015a      	lsls	r2, r3, #5
 8011864:	69fb      	ldr	r3, [r7, #28]
 8011866:	4413      	add	r3, r2
 8011868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	69ba      	ldr	r2, [r7, #24]
 8011870:	0151      	lsls	r1, r2, #5
 8011872:	69fa      	ldr	r2, [r7, #28]
 8011874:	440a      	add	r2, r1
 8011876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801187a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801187e:	6013      	str	r3, [r2, #0]
 8011880:	e00f      	b.n	80118a2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011882:	69bb      	ldr	r3, [r7, #24]
 8011884:	015a      	lsls	r2, r3, #5
 8011886:	69fb      	ldr	r3, [r7, #28]
 8011888:	4413      	add	r3, r2
 801188a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	69ba      	ldr	r2, [r7, #24]
 8011892:	0151      	lsls	r1, r2, #5
 8011894:	69fa      	ldr	r2, [r7, #28]
 8011896:	440a      	add	r2, r1
 8011898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80118a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	015a      	lsls	r2, r3, #5
 80118a6:	69fb      	ldr	r3, [r7, #28]
 80118a8:	4413      	add	r3, r2
 80118aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	69ba      	ldr	r2, [r7, #24]
 80118b2:	0151      	lsls	r1, r2, #5
 80118b4:	69fa      	ldr	r2, [r7, #28]
 80118b6:	440a      	add	r2, r1
 80118b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80118c0:	6013      	str	r3, [r2, #0]
 80118c2:	e16a      	b.n	8011b9a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	015a      	lsls	r2, r3, #5
 80118c8:	69fb      	ldr	r3, [r7, #28]
 80118ca:	4413      	add	r3, r2
 80118cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	69ba      	ldr	r2, [r7, #24]
 80118d4:	0151      	lsls	r1, r2, #5
 80118d6:	69fa      	ldr	r2, [r7, #28]
 80118d8:	440a      	add	r2, r1
 80118da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80118e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	791b      	ldrb	r3, [r3, #4]
 80118e8:	2b01      	cmp	r3, #1
 80118ea:	d015      	beq.n	8011918 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	691b      	ldr	r3, [r3, #16]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f000 8152 	beq.w	8011b9a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	f003 030f 	and.w	r3, r3, #15
 8011906:	2101      	movs	r1, #1
 8011908:	fa01 f303 	lsl.w	r3, r1, r3
 801190c:	69f9      	ldr	r1, [r7, #28]
 801190e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011912:	4313      	orrs	r3, r2
 8011914:	634b      	str	r3, [r1, #52]	; 0x34
 8011916:	e140      	b.n	8011b9a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801191e:	689b      	ldr	r3, [r3, #8]
 8011920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011924:	2b00      	cmp	r3, #0
 8011926:	d117      	bne.n	8011958 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011928:	69bb      	ldr	r3, [r7, #24]
 801192a:	015a      	lsls	r2, r3, #5
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	4413      	add	r3, r2
 8011930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	69ba      	ldr	r2, [r7, #24]
 8011938:	0151      	lsls	r1, r2, #5
 801193a:	69fa      	ldr	r2, [r7, #28]
 801193c:	440a      	add	r2, r1
 801193e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011942:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011946:	6013      	str	r3, [r2, #0]
 8011948:	e016      	b.n	8011978 <USB_EPStartXfer+0x308>
 801194a:	bf00      	nop
 801194c:	e007ffff 	.word	0xe007ffff
 8011950:	fff80000 	.word	0xfff80000
 8011954:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011958:	69bb      	ldr	r3, [r7, #24]
 801195a:	015a      	lsls	r2, r3, #5
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	4413      	add	r3, r2
 8011960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	69ba      	ldr	r2, [r7, #24]
 8011968:	0151      	lsls	r1, r2, #5
 801196a:	69fa      	ldr	r2, [r7, #28]
 801196c:	440a      	add	r2, r1
 801196e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011976:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	68d9      	ldr	r1, [r3, #12]
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	781a      	ldrb	r2, [r3, #0]
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	691b      	ldr	r3, [r3, #16]
 8011984:	b298      	uxth	r0, r3
 8011986:	79fb      	ldrb	r3, [r7, #7]
 8011988:	9300      	str	r3, [sp, #0]
 801198a:	4603      	mov	r3, r0
 801198c:	68f8      	ldr	r0, [r7, #12]
 801198e:	f000 f9b9 	bl	8011d04 <USB_WritePacket>
 8011992:	e102      	b.n	8011b9a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011994:	69bb      	ldr	r3, [r7, #24]
 8011996:	015a      	lsls	r2, r3, #5
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	4413      	add	r3, r2
 801199c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119a0:	691a      	ldr	r2, [r3, #16]
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	0159      	lsls	r1, r3, #5
 80119a6:	69fb      	ldr	r3, [r7, #28]
 80119a8:	440b      	add	r3, r1
 80119aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119ae:	4619      	mov	r1, r3
 80119b0:	4b7c      	ldr	r3, [pc, #496]	; (8011ba4 <USB_EPStartXfer+0x534>)
 80119b2:	4013      	ands	r3, r2
 80119b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	015a      	lsls	r2, r3, #5
 80119ba:	69fb      	ldr	r3, [r7, #28]
 80119bc:	4413      	add	r3, r2
 80119be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119c2:	691a      	ldr	r2, [r3, #16]
 80119c4:	69bb      	ldr	r3, [r7, #24]
 80119c6:	0159      	lsls	r1, r3, #5
 80119c8:	69fb      	ldr	r3, [r7, #28]
 80119ca:	440b      	add	r3, r1
 80119cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119d0:	4619      	mov	r1, r3
 80119d2:	4b75      	ldr	r3, [pc, #468]	; (8011ba8 <USB_EPStartXfer+0x538>)
 80119d4:	4013      	ands	r3, r2
 80119d6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80119d8:	69bb      	ldr	r3, [r7, #24]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d12f      	bne.n	8011a3e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	691b      	ldr	r3, [r3, #16]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d003      	beq.n	80119ee <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	689a      	ldr	r2, [r3, #8]
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	689a      	ldr	r2, [r3, #8]
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	015a      	lsls	r2, r3, #5
 80119fa:	69fb      	ldr	r3, [r7, #28]
 80119fc:	4413      	add	r3, r2
 80119fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a02:	691a      	ldr	r2, [r3, #16]
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	6a1b      	ldr	r3, [r3, #32]
 8011a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a0c:	69b9      	ldr	r1, [r7, #24]
 8011a0e:	0148      	lsls	r0, r1, #5
 8011a10:	69f9      	ldr	r1, [r7, #28]
 8011a12:	4401      	add	r1, r0
 8011a14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011a18:	4313      	orrs	r3, r2
 8011a1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	015a      	lsls	r2, r3, #5
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	4413      	add	r3, r2
 8011a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a28:	691b      	ldr	r3, [r3, #16]
 8011a2a:	69ba      	ldr	r2, [r7, #24]
 8011a2c:	0151      	lsls	r1, r2, #5
 8011a2e:	69fa      	ldr	r2, [r7, #28]
 8011a30:	440a      	add	r2, r1
 8011a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a3a:	6113      	str	r3, [r2, #16]
 8011a3c:	e05f      	b.n	8011afe <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	691b      	ldr	r3, [r3, #16]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d123      	bne.n	8011a8e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	015a      	lsls	r2, r3, #5
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a52:	691a      	ldr	r2, [r3, #16]
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	689b      	ldr	r3, [r3, #8]
 8011a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a5c:	69b9      	ldr	r1, [r7, #24]
 8011a5e:	0148      	lsls	r0, r1, #5
 8011a60:	69f9      	ldr	r1, [r7, #28]
 8011a62:	4401      	add	r1, r0
 8011a64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	015a      	lsls	r2, r3, #5
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	4413      	add	r3, r2
 8011a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a78:	691b      	ldr	r3, [r3, #16]
 8011a7a:	69ba      	ldr	r2, [r7, #24]
 8011a7c:	0151      	lsls	r1, r2, #5
 8011a7e:	69fa      	ldr	r2, [r7, #28]
 8011a80:	440a      	add	r2, r1
 8011a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a8a:	6113      	str	r3, [r2, #16]
 8011a8c:	e037      	b.n	8011afe <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	691a      	ldr	r2, [r3, #16]
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	689b      	ldr	r3, [r3, #8]
 8011a96:	4413      	add	r3, r2
 8011a98:	1e5a      	subs	r2, r3, #1
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	689b      	ldr	r3, [r3, #8]
 8011a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011aa2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	689b      	ldr	r3, [r3, #8]
 8011aa8:	8afa      	ldrh	r2, [r7, #22]
 8011aaa:	fb03 f202 	mul.w	r2, r3, r2
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	015a      	lsls	r2, r3, #5
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	4413      	add	r3, r2
 8011aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011abe:	691a      	ldr	r2, [r3, #16]
 8011ac0:	8afb      	ldrh	r3, [r7, #22]
 8011ac2:	04d9      	lsls	r1, r3, #19
 8011ac4:	4b39      	ldr	r3, [pc, #228]	; (8011bac <USB_EPStartXfer+0x53c>)
 8011ac6:	400b      	ands	r3, r1
 8011ac8:	69b9      	ldr	r1, [r7, #24]
 8011aca:	0148      	lsls	r0, r1, #5
 8011acc:	69f9      	ldr	r1, [r7, #28]
 8011ace:	4401      	add	r1, r0
 8011ad0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011ad4:	4313      	orrs	r3, r2
 8011ad6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011ad8:	69bb      	ldr	r3, [r7, #24]
 8011ada:	015a      	lsls	r2, r3, #5
 8011adc:	69fb      	ldr	r3, [r7, #28]
 8011ade:	4413      	add	r3, r2
 8011ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ae4:	691a      	ldr	r2, [r3, #16]
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	6a1b      	ldr	r3, [r3, #32]
 8011aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011aee:	69b9      	ldr	r1, [r7, #24]
 8011af0:	0148      	lsls	r0, r1, #5
 8011af2:	69f9      	ldr	r1, [r7, #28]
 8011af4:	4401      	add	r1, r0
 8011af6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011afa:	4313      	orrs	r3, r2
 8011afc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8011afe:	79fb      	ldrb	r3, [r7, #7]
 8011b00:	2b01      	cmp	r3, #1
 8011b02:	d10d      	bne.n	8011b20 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d009      	beq.n	8011b20 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	68d9      	ldr	r1, [r3, #12]
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	015a      	lsls	r2, r3, #5
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	4413      	add	r3, r2
 8011b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b1c:	460a      	mov	r2, r1
 8011b1e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	791b      	ldrb	r3, [r3, #4]
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	d128      	bne.n	8011b7a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b2e:	689b      	ldr	r3, [r3, #8]
 8011b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d110      	bne.n	8011b5a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011b38:	69bb      	ldr	r3, [r7, #24]
 8011b3a:	015a      	lsls	r2, r3, #5
 8011b3c:	69fb      	ldr	r3, [r7, #28]
 8011b3e:	4413      	add	r3, r2
 8011b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	69ba      	ldr	r2, [r7, #24]
 8011b48:	0151      	lsls	r1, r2, #5
 8011b4a:	69fa      	ldr	r2, [r7, #28]
 8011b4c:	440a      	add	r2, r1
 8011b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011b56:	6013      	str	r3, [r2, #0]
 8011b58:	e00f      	b.n	8011b7a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	015a      	lsls	r2, r3, #5
 8011b5e:	69fb      	ldr	r3, [r7, #28]
 8011b60:	4413      	add	r3, r2
 8011b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	69ba      	ldr	r2, [r7, #24]
 8011b6a:	0151      	lsls	r1, r2, #5
 8011b6c:	69fa      	ldr	r2, [r7, #28]
 8011b6e:	440a      	add	r2, r1
 8011b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b78:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011b7a:	69bb      	ldr	r3, [r7, #24]
 8011b7c:	015a      	lsls	r2, r3, #5
 8011b7e:	69fb      	ldr	r3, [r7, #28]
 8011b80:	4413      	add	r3, r2
 8011b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	69ba      	ldr	r2, [r7, #24]
 8011b8a:	0151      	lsls	r1, r2, #5
 8011b8c:	69fa      	ldr	r2, [r7, #28]
 8011b8e:	440a      	add	r2, r1
 8011b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011b94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011b98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011b9a:	2300      	movs	r3, #0
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3720      	adds	r7, #32
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}
 8011ba4:	fff80000 	.word	0xfff80000
 8011ba8:	e007ffff 	.word	0xe007ffff
 8011bac:	1ff80000 	.word	0x1ff80000

08011bb0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b087      	sub	sp, #28
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	785b      	ldrb	r3, [r3, #1]
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	d14a      	bne.n	8011c64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	015a      	lsls	r2, r3, #5
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011be6:	f040 8086 	bne.w	8011cf6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	015a      	lsls	r2, r3, #5
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	683a      	ldr	r2, [r7, #0]
 8011bfc:	7812      	ldrb	r2, [r2, #0]
 8011bfe:	0151      	lsls	r1, r2, #5
 8011c00:	693a      	ldr	r2, [r7, #16]
 8011c02:	440a      	add	r2, r1
 8011c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	015a      	lsls	r2, r3, #5
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	4413      	add	r3, r2
 8011c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	683a      	ldr	r2, [r7, #0]
 8011c20:	7812      	ldrb	r2, [r2, #0]
 8011c22:	0151      	lsls	r1, r2, #5
 8011c24:	693a      	ldr	r2, [r7, #16]
 8011c26:	440a      	add	r2, r1
 8011c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011c30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	3301      	adds	r3, #1
 8011c36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d902      	bls.n	8011c48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011c42:	2301      	movs	r3, #1
 8011c44:	75fb      	strb	r3, [r7, #23]
          break;
 8011c46:	e056      	b.n	8011cf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	015a      	lsls	r2, r3, #5
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	4413      	add	r3, r2
 8011c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011c60:	d0e7      	beq.n	8011c32 <USB_EPStopXfer+0x82>
 8011c62:	e048      	b.n	8011cf6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	015a      	lsls	r2, r3, #5
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011c7c:	d13b      	bne.n	8011cf6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	015a      	lsls	r2, r3, #5
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	4413      	add	r3, r2
 8011c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	683a      	ldr	r2, [r7, #0]
 8011c90:	7812      	ldrb	r2, [r2, #0]
 8011c92:	0151      	lsls	r1, r2, #5
 8011c94:	693a      	ldr	r2, [r7, #16]
 8011c96:	440a      	add	r2, r1
 8011c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011ca0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	781b      	ldrb	r3, [r3, #0]
 8011ca6:	015a      	lsls	r2, r3, #5
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	4413      	add	r3, r2
 8011cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	683a      	ldr	r2, [r7, #0]
 8011cb4:	7812      	ldrb	r2, [r2, #0]
 8011cb6:	0151      	lsls	r1, r2, #5
 8011cb8:	693a      	ldr	r2, [r7, #16]
 8011cba:	440a      	add	r2, r1
 8011cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011cc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	3301      	adds	r3, #1
 8011cca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f242 7210 	movw	r2, #10000	; 0x2710
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d902      	bls.n	8011cdc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	75fb      	strb	r3, [r7, #23]
          break;
 8011cda:	e00c      	b.n	8011cf6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	015a      	lsls	r2, r3, #5
 8011ce2:	693b      	ldr	r3, [r7, #16]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011cf4:	d0e7      	beq.n	8011cc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	371c      	adds	r7, #28
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr

08011d04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011d04:	b480      	push	{r7}
 8011d06:	b089      	sub	sp, #36	; 0x24
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	4611      	mov	r1, r2
 8011d10:	461a      	mov	r2, r3
 8011d12:	460b      	mov	r3, r1
 8011d14:	71fb      	strb	r3, [r7, #7]
 8011d16:	4613      	mov	r3, r2
 8011d18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011d22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d123      	bne.n	8011d72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011d2a:	88bb      	ldrh	r3, [r7, #4]
 8011d2c:	3303      	adds	r3, #3
 8011d2e:	089b      	lsrs	r3, r3, #2
 8011d30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011d32:	2300      	movs	r3, #0
 8011d34:	61bb      	str	r3, [r7, #24]
 8011d36:	e018      	b.n	8011d6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011d38:	79fb      	ldrb	r3, [r7, #7]
 8011d3a:	031a      	lsls	r2, r3, #12
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	4413      	add	r3, r2
 8011d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d44:	461a      	mov	r2, r3
 8011d46:	69fb      	ldr	r3, [r7, #28]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011d4c:	69fb      	ldr	r3, [r7, #28]
 8011d4e:	3301      	adds	r3, #1
 8011d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011d52:	69fb      	ldr	r3, [r7, #28]
 8011d54:	3301      	adds	r3, #1
 8011d56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011d58:	69fb      	ldr	r3, [r7, #28]
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	3301      	adds	r3, #1
 8011d62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	3301      	adds	r3, #1
 8011d68:	61bb      	str	r3, [r7, #24]
 8011d6a:	69ba      	ldr	r2, [r7, #24]
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d3e2      	bcc.n	8011d38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011d72:	2300      	movs	r3, #0
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3724      	adds	r7, #36	; 0x24
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7e:	4770      	bx	lr

08011d80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011d80:	b480      	push	{r7}
 8011d82:	b08b      	sub	sp, #44	; 0x2c
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011d96:	88fb      	ldrh	r3, [r7, #6]
 8011d98:	089b      	lsrs	r3, r3, #2
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011d9e:	88fb      	ldrh	r3, [r7, #6]
 8011da0:	f003 0303 	and.w	r3, r3, #3
 8011da4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011da6:	2300      	movs	r3, #0
 8011da8:	623b      	str	r3, [r7, #32]
 8011daa:	e014      	b.n	8011dd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011dac:	69bb      	ldr	r3, [r7, #24]
 8011dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011db2:	681a      	ldr	r2, [r3, #0]
 8011db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db6:	601a      	str	r2, [r3, #0]
    pDest++;
 8011db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dba:	3301      	adds	r3, #1
 8011dbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc0:	3301      	adds	r3, #1
 8011dc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dcc:	3301      	adds	r3, #1
 8011dce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011dd0:	6a3b      	ldr	r3, [r7, #32]
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	623b      	str	r3, [r7, #32]
 8011dd6:	6a3a      	ldr	r2, [r7, #32]
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d3e6      	bcc.n	8011dac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011dde:	8bfb      	ldrh	r3, [r7, #30]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d01e      	beq.n	8011e22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011de4:	2300      	movs	r3, #0
 8011de6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011de8:	69bb      	ldr	r3, [r7, #24]
 8011dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011dee:	461a      	mov	r2, r3
 8011df0:	f107 0310 	add.w	r3, r7, #16
 8011df4:	6812      	ldr	r2, [r2, #0]
 8011df6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011df8:	693a      	ldr	r2, [r7, #16]
 8011dfa:	6a3b      	ldr	r3, [r7, #32]
 8011dfc:	b2db      	uxtb	r3, r3
 8011dfe:	00db      	lsls	r3, r3, #3
 8011e00:	fa22 f303 	lsr.w	r3, r2, r3
 8011e04:	b2da      	uxtb	r2, r3
 8011e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e08:	701a      	strb	r2, [r3, #0]
      i++;
 8011e0a:	6a3b      	ldr	r3, [r7, #32]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8011e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e12:	3301      	adds	r3, #1
 8011e14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8011e16:	8bfb      	ldrh	r3, [r7, #30]
 8011e18:	3b01      	subs	r3, #1
 8011e1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011e1c:	8bfb      	ldrh	r3, [r7, #30]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d1ea      	bne.n	8011df8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	372c      	adds	r7, #44	; 0x2c
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr

08011e30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b085      	sub	sp, #20
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	785b      	ldrb	r3, [r3, #1]
 8011e48:	2b01      	cmp	r3, #1
 8011e4a:	d12c      	bne.n	8011ea6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	015a      	lsls	r2, r3, #5
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	4413      	add	r3, r2
 8011e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	db12      	blt.n	8011e84 <USB_EPSetStall+0x54>
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d00f      	beq.n	8011e84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	015a      	lsls	r2, r3, #5
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	4413      	add	r3, r2
 8011e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	68ba      	ldr	r2, [r7, #8]
 8011e74:	0151      	lsls	r1, r2, #5
 8011e76:	68fa      	ldr	r2, [r7, #12]
 8011e78:	440a      	add	r2, r1
 8011e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011e82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	015a      	lsls	r2, r3, #5
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	4413      	add	r3, r2
 8011e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	68ba      	ldr	r2, [r7, #8]
 8011e94:	0151      	lsls	r1, r2, #5
 8011e96:	68fa      	ldr	r2, [r7, #12]
 8011e98:	440a      	add	r2, r1
 8011e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011ea2:	6013      	str	r3, [r2, #0]
 8011ea4:	e02b      	b.n	8011efe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	015a      	lsls	r2, r3, #5
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	4413      	add	r3, r2
 8011eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	db12      	blt.n	8011ede <USB_EPSetStall+0xae>
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00f      	beq.n	8011ede <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	015a      	lsls	r2, r3, #5
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	4413      	add	r3, r2
 8011ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	68ba      	ldr	r2, [r7, #8]
 8011ece:	0151      	lsls	r1, r2, #5
 8011ed0:	68fa      	ldr	r2, [r7, #12]
 8011ed2:	440a      	add	r2, r1
 8011ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ed8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011edc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	015a      	lsls	r2, r3, #5
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	4413      	add	r3, r2
 8011ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	68ba      	ldr	r2, [r7, #8]
 8011eee:	0151      	lsls	r1, r2, #5
 8011ef0:	68fa      	ldr	r2, [r7, #12]
 8011ef2:	440a      	add	r2, r1
 8011ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011efc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011efe:	2300      	movs	r3, #0
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3714      	adds	r7, #20
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr

08011f0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b085      	sub	sp, #20
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	785b      	ldrb	r3, [r3, #1]
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d128      	bne.n	8011f7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	015a      	lsls	r2, r3, #5
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	4413      	add	r3, r2
 8011f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	68ba      	ldr	r2, [r7, #8]
 8011f38:	0151      	lsls	r1, r2, #5
 8011f3a:	68fa      	ldr	r2, [r7, #12]
 8011f3c:	440a      	add	r2, r1
 8011f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011f46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	791b      	ldrb	r3, [r3, #4]
 8011f4c:	2b03      	cmp	r3, #3
 8011f4e:	d003      	beq.n	8011f58 <USB_EPClearStall+0x4c>
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	791b      	ldrb	r3, [r3, #4]
 8011f54:	2b02      	cmp	r3, #2
 8011f56:	d138      	bne.n	8011fca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	015a      	lsls	r2, r3, #5
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	4413      	add	r3, r2
 8011f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	68ba      	ldr	r2, [r7, #8]
 8011f68:	0151      	lsls	r1, r2, #5
 8011f6a:	68fa      	ldr	r2, [r7, #12]
 8011f6c:	440a      	add	r2, r1
 8011f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f76:	6013      	str	r3, [r2, #0]
 8011f78:	e027      	b.n	8011fca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	015a      	lsls	r2, r3, #5
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	4413      	add	r3, r2
 8011f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	68ba      	ldr	r2, [r7, #8]
 8011f8a:	0151      	lsls	r1, r2, #5
 8011f8c:	68fa      	ldr	r2, [r7, #12]
 8011f8e:	440a      	add	r2, r1
 8011f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011f98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	791b      	ldrb	r3, [r3, #4]
 8011f9e:	2b03      	cmp	r3, #3
 8011fa0:	d003      	beq.n	8011faa <USB_EPClearStall+0x9e>
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	791b      	ldrb	r3, [r3, #4]
 8011fa6:	2b02      	cmp	r3, #2
 8011fa8:	d10f      	bne.n	8011fca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	015a      	lsls	r2, r3, #5
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	68ba      	ldr	r2, [r7, #8]
 8011fba:	0151      	lsls	r1, r2, #5
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	440a      	add	r2, r1
 8011fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011fc8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011fca:	2300      	movs	r3, #0
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3714      	adds	r7, #20
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd6:	4770      	bx	lr

08011fd8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011fd8:	b480      	push	{r7}
 8011fda:	b085      	sub	sp, #20
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	460b      	mov	r3, r1
 8011fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	68fa      	ldr	r2, [r7, #12]
 8011ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ff6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011ffa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012002:	681a      	ldr	r2, [r3, #0]
 8012004:	78fb      	ldrb	r3, [r7, #3]
 8012006:	011b      	lsls	r3, r3, #4
 8012008:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801200c:	68f9      	ldr	r1, [r7, #12]
 801200e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012012:	4313      	orrs	r3, r2
 8012014:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012016:	2300      	movs	r3, #0
}
 8012018:	4618      	mov	r0, r3
 801201a:	3714      	adds	r7, #20
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr

08012024 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012024:	b480      	push	{r7}
 8012026:	b085      	sub	sp, #20
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	68fa      	ldr	r2, [r7, #12]
 801203a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801203e:	f023 0303 	bic.w	r3, r3, #3
 8012042:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801204a:	685b      	ldr	r3, [r3, #4]
 801204c:	68fa      	ldr	r2, [r7, #12]
 801204e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012052:	f023 0302 	bic.w	r3, r3, #2
 8012056:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012058:	2300      	movs	r3, #0
}
 801205a:	4618      	mov	r0, r3
 801205c:	3714      	adds	r7, #20
 801205e:	46bd      	mov	sp, r7
 8012060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012064:	4770      	bx	lr

08012066 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012066:	b480      	push	{r7}
 8012068:	b085      	sub	sp, #20
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	68fa      	ldr	r2, [r7, #12]
 801207c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012080:	f023 0303 	bic.w	r3, r3, #3
 8012084:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	68fa      	ldr	r2, [r7, #12]
 8012090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012094:	f043 0302 	orr.w	r3, r3, #2
 8012098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801209a:	2300      	movs	r3, #0
}
 801209c:	4618      	mov	r0, r3
 801209e:	3714      	adds	r7, #20
 80120a0:	46bd      	mov	sp, r7
 80120a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a6:	4770      	bx	lr

080120a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b085      	sub	sp, #20
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	695b      	ldr	r3, [r3, #20]
 80120b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	699b      	ldr	r3, [r3, #24]
 80120ba:	68fa      	ldr	r2, [r7, #12]
 80120bc:	4013      	ands	r3, r2
 80120be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80120c0:	68fb      	ldr	r3, [r7, #12]
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	3714      	adds	r7, #20
 80120c6:	46bd      	mov	sp, r7
 80120c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120cc:	4770      	bx	lr

080120ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80120ce:	b480      	push	{r7}
 80120d0:	b085      	sub	sp, #20
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120e0:	699b      	ldr	r3, [r3, #24]
 80120e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120ea:	69db      	ldr	r3, [r3, #28]
 80120ec:	68ba      	ldr	r2, [r7, #8]
 80120ee:	4013      	ands	r3, r2
 80120f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	0c1b      	lsrs	r3, r3, #16
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3714      	adds	r7, #20
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr

08012102 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012102:	b480      	push	{r7}
 8012104:	b085      	sub	sp, #20
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012114:	699b      	ldr	r3, [r3, #24]
 8012116:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801211e:	69db      	ldr	r3, [r3, #28]
 8012120:	68ba      	ldr	r2, [r7, #8]
 8012122:	4013      	ands	r3, r2
 8012124:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	b29b      	uxth	r3, r3
}
 801212a:	4618      	mov	r0, r3
 801212c:	3714      	adds	r7, #20
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr

08012136 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012136:	b480      	push	{r7}
 8012138:	b085      	sub	sp, #20
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
 801213e:	460b      	mov	r3, r1
 8012140:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012146:	78fb      	ldrb	r3, [r7, #3]
 8012148:	015a      	lsls	r2, r3, #5
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	4413      	add	r3, r2
 801214e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012152:	689b      	ldr	r3, [r3, #8]
 8012154:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801215c:	695b      	ldr	r3, [r3, #20]
 801215e:	68ba      	ldr	r2, [r7, #8]
 8012160:	4013      	ands	r3, r2
 8012162:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012164:	68bb      	ldr	r3, [r7, #8]
}
 8012166:	4618      	mov	r0, r3
 8012168:	3714      	adds	r7, #20
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr

08012172 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012172:	b480      	push	{r7}
 8012174:	b087      	sub	sp, #28
 8012176:	af00      	add	r7, sp, #0
 8012178:	6078      	str	r0, [r7, #4]
 801217a:	460b      	mov	r3, r1
 801217c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012188:	691b      	ldr	r3, [r3, #16]
 801218a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012194:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012196:	78fb      	ldrb	r3, [r7, #3]
 8012198:	f003 030f 	and.w	r3, r3, #15
 801219c:	68fa      	ldr	r2, [r7, #12]
 801219e:	fa22 f303 	lsr.w	r3, r2, r3
 80121a2:	01db      	lsls	r3, r3, #7
 80121a4:	b2db      	uxtb	r3, r3
 80121a6:	693a      	ldr	r2, [r7, #16]
 80121a8:	4313      	orrs	r3, r2
 80121aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80121ac:	78fb      	ldrb	r3, [r7, #3]
 80121ae:	015a      	lsls	r2, r3, #5
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	4413      	add	r3, r2
 80121b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121b8:	689b      	ldr	r3, [r3, #8]
 80121ba:	693a      	ldr	r2, [r7, #16]
 80121bc:	4013      	ands	r3, r2
 80121be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80121c0:	68bb      	ldr	r3, [r7, #8]
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	371c      	adds	r7, #28
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr

080121ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80121ce:	b480      	push	{r7}
 80121d0:	b083      	sub	sp, #12
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	695b      	ldr	r3, [r3, #20]
 80121da:	f003 0301 	and.w	r3, r3, #1
}
 80121de:	4618      	mov	r0, r3
 80121e0:	370c      	adds	r7, #12
 80121e2:	46bd      	mov	sp, r7
 80121e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e8:	4770      	bx	lr
	...

080121ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80121ec:	b480      	push	{r7}
 80121ee:	b085      	sub	sp, #20
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012206:	4619      	mov	r1, r3
 8012208:	4b09      	ldr	r3, [pc, #36]	; (8012230 <USB_ActivateSetup+0x44>)
 801220a:	4013      	ands	r3, r2
 801220c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	68fa      	ldr	r2, [r7, #12]
 8012218:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801221c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012220:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012222:	2300      	movs	r3, #0
}
 8012224:	4618      	mov	r0, r3
 8012226:	3714      	adds	r7, #20
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr
 8012230:	fffff800 	.word	0xfffff800

08012234 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8012234:	b480      	push	{r7}
 8012236:	b087      	sub	sp, #28
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	460b      	mov	r3, r1
 801223e:	607a      	str	r2, [r7, #4]
 8012240:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	333c      	adds	r3, #60	; 0x3c
 801224a:	3304      	adds	r3, #4
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	4a26      	ldr	r2, [pc, #152]	; (80122ec <USB_EP0_OutStart+0xb8>)
 8012254:	4293      	cmp	r3, r2
 8012256:	d90a      	bls.n	801226e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012268:	d101      	bne.n	801226e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801226a:	2300      	movs	r3, #0
 801226c:	e037      	b.n	80122de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012274:	461a      	mov	r2, r3
 8012276:	2300      	movs	r3, #0
 8012278:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012280:	691b      	ldr	r3, [r3, #16]
 8012282:	697a      	ldr	r2, [r7, #20]
 8012284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012288:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801228c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012294:	691b      	ldr	r3, [r3, #16]
 8012296:	697a      	ldr	r2, [r7, #20]
 8012298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801229c:	f043 0318 	orr.w	r3, r3, #24
 80122a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122a8:	691b      	ldr	r3, [r3, #16]
 80122aa:	697a      	ldr	r2, [r7, #20]
 80122ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80122b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80122b6:	7afb      	ldrb	r3, [r7, #11]
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	d10f      	bne.n	80122dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122c2:	461a      	mov	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	697a      	ldr	r2, [r7, #20]
 80122d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80122da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80122dc:	2300      	movs	r3, #0
}
 80122de:	4618      	mov	r0, r3
 80122e0:	371c      	adds	r7, #28
 80122e2:	46bd      	mov	sp, r7
 80122e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop
 80122ec:	4f54300a 	.word	0x4f54300a

080122f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80122f0:	b480      	push	{r7}
 80122f2:	b085      	sub	sp, #20
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80122f8:	2300      	movs	r3, #0
 80122fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	3301      	adds	r3, #1
 8012300:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	4a13      	ldr	r2, [pc, #76]	; (8012354 <USB_CoreReset+0x64>)
 8012306:	4293      	cmp	r3, r2
 8012308:	d901      	bls.n	801230e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801230a:	2303      	movs	r3, #3
 801230c:	e01b      	b.n	8012346 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	691b      	ldr	r3, [r3, #16]
 8012312:	2b00      	cmp	r3, #0
 8012314:	daf2      	bge.n	80122fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012316:	2300      	movs	r3, #0
 8012318:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	691b      	ldr	r3, [r3, #16]
 801231e:	f043 0201 	orr.w	r2, r3, #1
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	3301      	adds	r3, #1
 801232a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	4a09      	ldr	r2, [pc, #36]	; (8012354 <USB_CoreReset+0x64>)
 8012330:	4293      	cmp	r3, r2
 8012332:	d901      	bls.n	8012338 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012334:	2303      	movs	r3, #3
 8012336:	e006      	b.n	8012346 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	691b      	ldr	r3, [r3, #16]
 801233c:	f003 0301 	and.w	r3, r3, #1
 8012340:	2b01      	cmp	r3, #1
 8012342:	d0f0      	beq.n	8012326 <USB_CoreReset+0x36>

  return HAL_OK;
 8012344:	2300      	movs	r3, #0
}
 8012346:	4618      	mov	r0, r3
 8012348:	3714      	adds	r7, #20
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop
 8012354:	00030d40 	.word	0x00030d40

08012358 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801235c:	4904      	ldr	r1, [pc, #16]	; (8012370 <MX_FATFS_Init+0x18>)
 801235e:	4805      	ldr	r0, [pc, #20]	; (8012374 <MX_FATFS_Init+0x1c>)
 8012360:	f005 f906 	bl	8017570 <FATFS_LinkDriver>
 8012364:	4603      	mov	r3, r0
 8012366:	461a      	mov	r2, r3
 8012368:	4b03      	ldr	r3, [pc, #12]	; (8012378 <MX_FATFS_Init+0x20>)
 801236a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801236c:	bf00      	nop
 801236e:	bd80      	pop	{r7, pc}
 8012370:	24000d1c 	.word	0x24000d1c
 8012374:	0801c9d0 	.word	0x0801c9d0
 8012378:	24000d18 	.word	0x24000d18

0801237c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801237c:	b480      	push	{r7}
 801237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012380:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012382:	4618      	mov	r0, r3
 8012384:	46bd      	mov	sp, r7
 8012386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238a:	4770      	bx	lr

0801238c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012392:	2300      	movs	r3, #0
 8012394:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012396:	f000 f885 	bl	80124a4 <BSP_SD_IsDetected>
 801239a:	4603      	mov	r3, r0
 801239c:	2b01      	cmp	r3, #1
 801239e:	d001      	beq.n	80123a4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80123a0:	2302      	movs	r3, #2
 80123a2:	e012      	b.n	80123ca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80123a4:	480b      	ldr	r0, [pc, #44]	; (80123d4 <BSP_SD_Init+0x48>)
 80123a6:	f7f9 fff1 	bl	800c38c <HAL_SD_Init>
 80123aa:	4603      	mov	r3, r0
 80123ac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80123ae:	79fb      	ldrb	r3, [r7, #7]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d109      	bne.n	80123c8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80123b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80123b8:	4806      	ldr	r0, [pc, #24]	; (80123d4 <BSP_SD_Init+0x48>)
 80123ba:	f7fa fea7 	bl	800d10c <HAL_SD_ConfigWideBusOperation>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d001      	beq.n	80123c8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80123c4:	2301      	movs	r3, #1
 80123c6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80123c8:	79fb      	ldrb	r3, [r7, #7]
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3708      	adds	r7, #8
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	240005b4 	.word	0x240005b4

080123d8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b086      	sub	sp, #24
 80123dc:	af00      	add	r7, sp, #0
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80123e4:	2300      	movs	r3, #0
 80123e6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	68ba      	ldr	r2, [r7, #8]
 80123ec:	68f9      	ldr	r1, [r7, #12]
 80123ee:	4806      	ldr	r0, [pc, #24]	; (8012408 <BSP_SD_ReadBlocks_DMA+0x30>)
 80123f0:	f7fa f8ec 	bl	800c5cc <HAL_SD_ReadBlocks_DMA>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d001      	beq.n	80123fe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80123fa:	2301      	movs	r3, #1
 80123fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80123fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012400:	4618      	mov	r0, r3
 8012402:	3718      	adds	r7, #24
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}
 8012408:	240005b4 	.word	0x240005b4

0801240c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b086      	sub	sp, #24
 8012410:	af00      	add	r7, sp, #0
 8012412:	60f8      	str	r0, [r7, #12]
 8012414:	60b9      	str	r1, [r7, #8]
 8012416:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012418:	2300      	movs	r3, #0
 801241a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	68ba      	ldr	r2, [r7, #8]
 8012420:	68f9      	ldr	r1, [r7, #12]
 8012422:	4806      	ldr	r0, [pc, #24]	; (801243c <BSP_SD_WriteBlocks_DMA+0x30>)
 8012424:	f7fa f97a 	bl	800c71c <HAL_SD_WriteBlocks_DMA>
 8012428:	4603      	mov	r3, r0
 801242a:	2b00      	cmp	r3, #0
 801242c:	d001      	beq.n	8012432 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801242e:	2301      	movs	r3, #1
 8012430:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012432:	7dfb      	ldrb	r3, [r7, #23]
}
 8012434:	4618      	mov	r0, r3
 8012436:	3718      	adds	r7, #24
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}
 801243c:	240005b4 	.word	0x240005b4

08012440 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012444:	4805      	ldr	r0, [pc, #20]	; (801245c <BSP_SD_GetCardState+0x1c>)
 8012446:	f7fa ff73 	bl	800d330 <HAL_SD_GetCardState>
 801244a:	4603      	mov	r3, r0
 801244c:	2b04      	cmp	r3, #4
 801244e:	bf14      	ite	ne
 8012450:	2301      	movne	r3, #1
 8012452:	2300      	moveq	r3, #0
 8012454:	b2db      	uxtb	r3, r3
}
 8012456:	4618      	mov	r0, r3
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	240005b4 	.word	0x240005b4

08012460 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8012468:	6879      	ldr	r1, [r7, #4]
 801246a:	4803      	ldr	r0, [pc, #12]	; (8012478 <BSP_SD_GetCardInfo+0x18>)
 801246c:	f7fa fe22 	bl	800d0b4 <HAL_SD_GetCardInfo>
}
 8012470:	bf00      	nop
 8012472:	3708      	adds	r7, #8
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}
 8012478:	240005b4 	.word	0x240005b4

0801247c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b082      	sub	sp, #8
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012484:	f000 f984 	bl	8012790 <BSP_SD_WriteCpltCallback>
}
 8012488:	bf00      	nop
 801248a:	3708      	adds	r7, #8
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}

08012490 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012498:	f000 f986 	bl	80127a8 <BSP_SD_ReadCpltCallback>
}
 801249c:	bf00      	nop
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80124a4:	b480      	push	{r7}
 80124a6:	b083      	sub	sp, #12
 80124a8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80124aa:	2301      	movs	r3, #1
 80124ac:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 80124ae:	79fb      	ldrb	r3, [r7, #7]
 80124b0:	b2db      	uxtb	r3, r3
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	370c      	adds	r7, #12
 80124b6:	46bd      	mov	sp, r7
 80124b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124bc:	4770      	bx	lr

080124be <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80124be:	b580      	push	{r7, lr}
 80124c0:	b084      	sub	sp, #16
 80124c2:	af00      	add	r7, sp, #0
 80124c4:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80124c6:	f7f0 fc6f 	bl	8002da8 <HAL_GetTick>
 80124ca:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80124cc:	e006      	b.n	80124dc <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80124ce:	f7ff ffb7 	bl	8012440 <BSP_SD_GetCardState>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d101      	bne.n	80124dc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80124d8:	2300      	movs	r3, #0
 80124da:	e009      	b.n	80124f0 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80124dc:	f7f0 fc64 	bl	8002da8 <HAL_GetTick>
 80124e0:	4602      	mov	r2, r0
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	1ad3      	subs	r3, r2, r3
 80124e6:	687a      	ldr	r2, [r7, #4]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d8f0      	bhi.n	80124ce <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80124ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	3710      	adds	r7, #16
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b082      	sub	sp, #8
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	4603      	mov	r3, r0
 8012500:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012502:	4b0b      	ldr	r3, [pc, #44]	; (8012530 <SD_CheckStatus+0x38>)
 8012504:	2201      	movs	r2, #1
 8012506:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012508:	f7ff ff9a 	bl	8012440 <BSP_SD_GetCardState>
 801250c:	4603      	mov	r3, r0
 801250e:	2b00      	cmp	r3, #0
 8012510:	d107      	bne.n	8012522 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012512:	4b07      	ldr	r3, [pc, #28]	; (8012530 <SD_CheckStatus+0x38>)
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	b2db      	uxtb	r3, r3
 8012518:	f023 0301 	bic.w	r3, r3, #1
 801251c:	b2da      	uxtb	r2, r3
 801251e:	4b04      	ldr	r3, [pc, #16]	; (8012530 <SD_CheckStatus+0x38>)
 8012520:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012522:	4b03      	ldr	r3, [pc, #12]	; (8012530 <SD_CheckStatus+0x38>)
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	b2db      	uxtb	r3, r3
}
 8012528:	4618      	mov	r0, r3
 801252a:	3708      	adds	r7, #8
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}
 8012530:	2400000d 	.word	0x2400000d

08012534 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	4603      	mov	r3, r0
 801253c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801253e:	f7ff ff25 	bl	801238c <BSP_SD_Init>
 8012542:	4603      	mov	r3, r0
 8012544:	2b00      	cmp	r3, #0
 8012546:	d107      	bne.n	8012558 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012548:	79fb      	ldrb	r3, [r7, #7]
 801254a:	4618      	mov	r0, r3
 801254c:	f7ff ffd4 	bl	80124f8 <SD_CheckStatus>
 8012550:	4603      	mov	r3, r0
 8012552:	461a      	mov	r2, r3
 8012554:	4b04      	ldr	r3, [pc, #16]	; (8012568 <SD_initialize+0x34>)
 8012556:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012558:	4b03      	ldr	r3, [pc, #12]	; (8012568 <SD_initialize+0x34>)
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	b2db      	uxtb	r3, r3
}
 801255e:	4618      	mov	r0, r3
 8012560:	3708      	adds	r7, #8
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	2400000d 	.word	0x2400000d

0801256c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	4603      	mov	r3, r0
 8012574:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012576:	79fb      	ldrb	r3, [r7, #7]
 8012578:	4618      	mov	r0, r3
 801257a:	f7ff ffbd 	bl	80124f8 <SD_CheckStatus>
 801257e:	4603      	mov	r3, r0
}
 8012580:	4618      	mov	r0, r3
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b086      	sub	sp, #24
 801258c:	af00      	add	r7, sp, #0
 801258e:	60b9      	str	r1, [r7, #8]
 8012590:	607a      	str	r2, [r7, #4]
 8012592:	603b      	str	r3, [r7, #0]
 8012594:	4603      	mov	r3, r0
 8012596:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012598:	2301      	movs	r3, #1
 801259a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801259c:	f247 5030 	movw	r0, #30000	; 0x7530
 80125a0:	f7ff ff8d 	bl	80124be <SD_CheckStatusWithTimeout>
 80125a4:	4603      	mov	r3, r0
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	da01      	bge.n	80125ae <SD_read+0x26>
  {
    return res;
 80125aa:	7dfb      	ldrb	r3, [r7, #23]
 80125ac:	e03b      	b.n	8012626 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80125ae:	683a      	ldr	r2, [r7, #0]
 80125b0:	6879      	ldr	r1, [r7, #4]
 80125b2:	68b8      	ldr	r0, [r7, #8]
 80125b4:	f7ff ff10 	bl	80123d8 <BSP_SD_ReadBlocks_DMA>
 80125b8:	4603      	mov	r3, r0
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d132      	bne.n	8012624 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80125be:	4b1c      	ldr	r3, [pc, #112]	; (8012630 <SD_read+0xa8>)
 80125c0:	2200      	movs	r2, #0
 80125c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80125c4:	f7f0 fbf0 	bl	8002da8 <HAL_GetTick>
 80125c8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80125ca:	bf00      	nop
 80125cc:	4b18      	ldr	r3, [pc, #96]	; (8012630 <SD_read+0xa8>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d108      	bne.n	80125e6 <SD_read+0x5e>
 80125d4:	f7f0 fbe8 	bl	8002da8 <HAL_GetTick>
 80125d8:	4602      	mov	r2, r0
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	1ad3      	subs	r3, r2, r3
 80125de:	f247 522f 	movw	r2, #29999	; 0x752f
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d9f2      	bls.n	80125cc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80125e6:	4b12      	ldr	r3, [pc, #72]	; (8012630 <SD_read+0xa8>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d102      	bne.n	80125f4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80125ee:	2301      	movs	r3, #1
 80125f0:	75fb      	strb	r3, [r7, #23]
 80125f2:	e017      	b.n	8012624 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80125f4:	4b0e      	ldr	r3, [pc, #56]	; (8012630 <SD_read+0xa8>)
 80125f6:	2200      	movs	r2, #0
 80125f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80125fa:	f7f0 fbd5 	bl	8002da8 <HAL_GetTick>
 80125fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012600:	e007      	b.n	8012612 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012602:	f7ff ff1d 	bl	8012440 <BSP_SD_GetCardState>
 8012606:	4603      	mov	r3, r0
 8012608:	2b00      	cmp	r3, #0
 801260a:	d102      	bne.n	8012612 <SD_read+0x8a>
          {
            res = RES_OK;
 801260c:	2300      	movs	r3, #0
 801260e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012610:	e008      	b.n	8012624 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012612:	f7f0 fbc9 	bl	8002da8 <HAL_GetTick>
 8012616:	4602      	mov	r2, r0
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	1ad3      	subs	r3, r2, r3
 801261c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012620:	4293      	cmp	r3, r2
 8012622:	d9ee      	bls.n	8012602 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012624:	7dfb      	ldrb	r3, [r7, #23]
}
 8012626:	4618      	mov	r0, r3
 8012628:	3718      	adds	r7, #24
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	24000d24 	.word	0x24000d24

08012634 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b086      	sub	sp, #24
 8012638:	af00      	add	r7, sp, #0
 801263a:	60b9      	str	r1, [r7, #8]
 801263c:	607a      	str	r2, [r7, #4]
 801263e:	603b      	str	r3, [r7, #0]
 8012640:	4603      	mov	r3, r0
 8012642:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012644:	2301      	movs	r3, #1
 8012646:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012648:	4b24      	ldr	r3, [pc, #144]	; (80126dc <SD_write+0xa8>)
 801264a:	2200      	movs	r2, #0
 801264c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801264e:	f247 5030 	movw	r0, #30000	; 0x7530
 8012652:	f7ff ff34 	bl	80124be <SD_CheckStatusWithTimeout>
 8012656:	4603      	mov	r3, r0
 8012658:	2b00      	cmp	r3, #0
 801265a:	da01      	bge.n	8012660 <SD_write+0x2c>
  {
    return res;
 801265c:	7dfb      	ldrb	r3, [r7, #23]
 801265e:	e038      	b.n	80126d2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012660:	683a      	ldr	r2, [r7, #0]
 8012662:	6879      	ldr	r1, [r7, #4]
 8012664:	68b8      	ldr	r0, [r7, #8]
 8012666:	f7ff fed1 	bl	801240c <BSP_SD_WriteBlocks_DMA>
 801266a:	4603      	mov	r3, r0
 801266c:	2b00      	cmp	r3, #0
 801266e:	d12f      	bne.n	80126d0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012670:	f7f0 fb9a 	bl	8002da8 <HAL_GetTick>
 8012674:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012676:	bf00      	nop
 8012678:	4b18      	ldr	r3, [pc, #96]	; (80126dc <SD_write+0xa8>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d108      	bne.n	8012692 <SD_write+0x5e>
 8012680:	f7f0 fb92 	bl	8002da8 <HAL_GetTick>
 8012684:	4602      	mov	r2, r0
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	1ad3      	subs	r3, r2, r3
 801268a:	f247 522f 	movw	r2, #29999	; 0x752f
 801268e:	4293      	cmp	r3, r2
 8012690:	d9f2      	bls.n	8012678 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8012692:	4b12      	ldr	r3, [pc, #72]	; (80126dc <SD_write+0xa8>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d102      	bne.n	80126a0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801269a:	2301      	movs	r3, #1
 801269c:	75fb      	strb	r3, [r7, #23]
 801269e:	e017      	b.n	80126d0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80126a0:	4b0e      	ldr	r3, [pc, #56]	; (80126dc <SD_write+0xa8>)
 80126a2:	2200      	movs	r2, #0
 80126a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80126a6:	f7f0 fb7f 	bl	8002da8 <HAL_GetTick>
 80126aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80126ac:	e007      	b.n	80126be <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80126ae:	f7ff fec7 	bl	8012440 <BSP_SD_GetCardState>
 80126b2:	4603      	mov	r3, r0
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d102      	bne.n	80126be <SD_write+0x8a>
          {
            res = RES_OK;
 80126b8:	2300      	movs	r3, #0
 80126ba:	75fb      	strb	r3, [r7, #23]
            break;
 80126bc:	e008      	b.n	80126d0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80126be:	f7f0 fb73 	bl	8002da8 <HAL_GetTick>
 80126c2:	4602      	mov	r2, r0
 80126c4:	693b      	ldr	r3, [r7, #16]
 80126c6:	1ad3      	subs	r3, r2, r3
 80126c8:	f247 522f 	movw	r2, #29999	; 0x752f
 80126cc:	4293      	cmp	r3, r2
 80126ce:	d9ee      	bls.n	80126ae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80126d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3718      	adds	r7, #24
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	24000d20 	.word	0x24000d20

080126e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b08c      	sub	sp, #48	; 0x30
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	4603      	mov	r3, r0
 80126e8:	603a      	str	r2, [r7, #0]
 80126ea:	71fb      	strb	r3, [r7, #7]
 80126ec:	460b      	mov	r3, r1
 80126ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80126f0:	2301      	movs	r3, #1
 80126f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80126f6:	4b25      	ldr	r3, [pc, #148]	; (801278c <SD_ioctl+0xac>)
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	b2db      	uxtb	r3, r3
 80126fc:	f003 0301 	and.w	r3, r3, #1
 8012700:	2b00      	cmp	r3, #0
 8012702:	d001      	beq.n	8012708 <SD_ioctl+0x28>
 8012704:	2303      	movs	r3, #3
 8012706:	e03c      	b.n	8012782 <SD_ioctl+0xa2>

  switch (cmd)
 8012708:	79bb      	ldrb	r3, [r7, #6]
 801270a:	2b03      	cmp	r3, #3
 801270c:	d834      	bhi.n	8012778 <SD_ioctl+0x98>
 801270e:	a201      	add	r2, pc, #4	; (adr r2, 8012714 <SD_ioctl+0x34>)
 8012710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012714:	08012725 	.word	0x08012725
 8012718:	0801272d 	.word	0x0801272d
 801271c:	08012745 	.word	0x08012745
 8012720:	0801275f 	.word	0x0801275f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012724:	2300      	movs	r3, #0
 8012726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801272a:	e028      	b.n	801277e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801272c:	f107 0308 	add.w	r3, r7, #8
 8012730:	4618      	mov	r0, r3
 8012732:	f7ff fe95 	bl	8012460 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012736:	6a3a      	ldr	r2, [r7, #32]
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801273c:	2300      	movs	r3, #0
 801273e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012742:	e01c      	b.n	801277e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012744:	f107 0308 	add.w	r3, r7, #8
 8012748:	4618      	mov	r0, r3
 801274a:	f7ff fe89 	bl	8012460 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012750:	b29a      	uxth	r2, r3
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012756:	2300      	movs	r3, #0
 8012758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801275c:	e00f      	b.n	801277e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801275e:	f107 0308 	add.w	r3, r7, #8
 8012762:	4618      	mov	r0, r3
 8012764:	f7ff fe7c 	bl	8012460 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276a:	0a5a      	lsrs	r2, r3, #9
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012770:	2300      	movs	r3, #0
 8012772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012776:	e002      	b.n	801277e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012778:	2304      	movs	r3, #4
 801277a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801277e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012782:	4618      	mov	r0, r3
 8012784:	3730      	adds	r7, #48	; 0x30
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}
 801278a:	bf00      	nop
 801278c:	2400000d 	.word	0x2400000d

08012790 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012790:	b480      	push	{r7}
 8012792:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012794:	4b03      	ldr	r3, [pc, #12]	; (80127a4 <BSP_SD_WriteCpltCallback+0x14>)
 8012796:	2201      	movs	r2, #1
 8012798:	601a      	str	r2, [r3, #0]
}
 801279a:	bf00      	nop
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr
 80127a4:	24000d20 	.word	0x24000d20

080127a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80127a8:	b480      	push	{r7}
 80127aa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80127ac:	4b03      	ldr	r3, [pc, #12]	; (80127bc <BSP_SD_ReadCpltCallback+0x14>)
 80127ae:	2201      	movs	r2, #1
 80127b0:	601a      	str	r2, [r3, #0]
}
 80127b2:	bf00      	nop
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr
 80127bc:	24000d24 	.word	0x24000d24

080127c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	460b      	mov	r3, r1
 80127ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80127cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80127d0:	f005 fc74 	bl	80180bc <USBD_static_malloc>
 80127d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d109      	bne.n	80127f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	32b0      	adds	r2, #176	; 0xb0
 80127e6:	2100      	movs	r1, #0
 80127e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80127ec:	2302      	movs	r3, #2
 80127ee:	e0d4      	b.n	801299a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80127f0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80127f4:	2100      	movs	r1, #0
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	f005 fcdc 	bl	80181b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	32b0      	adds	r2, #176	; 0xb0
 8012806:	68f9      	ldr	r1, [r7, #12]
 8012808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	32b0      	adds	r2, #176	; 0xb0
 8012816:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	7c1b      	ldrb	r3, [r3, #16]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d138      	bne.n	801289a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012828:	4b5e      	ldr	r3, [pc, #376]	; (80129a4 <USBD_CDC_Init+0x1e4>)
 801282a:	7819      	ldrb	r1, [r3, #0]
 801282c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012830:	2202      	movs	r2, #2
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f005 fb1f 	bl	8017e76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012838:	4b5a      	ldr	r3, [pc, #360]	; (80129a4 <USBD_CDC_Init+0x1e4>)
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	f003 020f 	and.w	r2, r3, #15
 8012840:	6879      	ldr	r1, [r7, #4]
 8012842:	4613      	mov	r3, r2
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	4413      	add	r3, r2
 8012848:	009b      	lsls	r3, r3, #2
 801284a:	440b      	add	r3, r1
 801284c:	3324      	adds	r3, #36	; 0x24
 801284e:	2201      	movs	r2, #1
 8012850:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012852:	4b55      	ldr	r3, [pc, #340]	; (80129a8 <USBD_CDC_Init+0x1e8>)
 8012854:	7819      	ldrb	r1, [r3, #0]
 8012856:	f44f 7300 	mov.w	r3, #512	; 0x200
 801285a:	2202      	movs	r2, #2
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f005 fb0a 	bl	8017e76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012862:	4b51      	ldr	r3, [pc, #324]	; (80129a8 <USBD_CDC_Init+0x1e8>)
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	f003 020f 	and.w	r2, r3, #15
 801286a:	6879      	ldr	r1, [r7, #4]
 801286c:	4613      	mov	r3, r2
 801286e:	009b      	lsls	r3, r3, #2
 8012870:	4413      	add	r3, r2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	440b      	add	r3, r1
 8012876:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801287a:	2201      	movs	r2, #1
 801287c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801287e:	4b4b      	ldr	r3, [pc, #300]	; (80129ac <USBD_CDC_Init+0x1ec>)
 8012880:	781b      	ldrb	r3, [r3, #0]
 8012882:	f003 020f 	and.w	r2, r3, #15
 8012886:	6879      	ldr	r1, [r7, #4]
 8012888:	4613      	mov	r3, r2
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	4413      	add	r3, r2
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	440b      	add	r3, r1
 8012892:	3326      	adds	r3, #38	; 0x26
 8012894:	2210      	movs	r2, #16
 8012896:	801a      	strh	r2, [r3, #0]
 8012898:	e035      	b.n	8012906 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801289a:	4b42      	ldr	r3, [pc, #264]	; (80129a4 <USBD_CDC_Init+0x1e4>)
 801289c:	7819      	ldrb	r1, [r3, #0]
 801289e:	2340      	movs	r3, #64	; 0x40
 80128a0:	2202      	movs	r2, #2
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f005 fae7 	bl	8017e76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80128a8:	4b3e      	ldr	r3, [pc, #248]	; (80129a4 <USBD_CDC_Init+0x1e4>)
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	f003 020f 	and.w	r2, r3, #15
 80128b0:	6879      	ldr	r1, [r7, #4]
 80128b2:	4613      	mov	r3, r2
 80128b4:	009b      	lsls	r3, r3, #2
 80128b6:	4413      	add	r3, r2
 80128b8:	009b      	lsls	r3, r3, #2
 80128ba:	440b      	add	r3, r1
 80128bc:	3324      	adds	r3, #36	; 0x24
 80128be:	2201      	movs	r2, #1
 80128c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80128c2:	4b39      	ldr	r3, [pc, #228]	; (80129a8 <USBD_CDC_Init+0x1e8>)
 80128c4:	7819      	ldrb	r1, [r3, #0]
 80128c6:	2340      	movs	r3, #64	; 0x40
 80128c8:	2202      	movs	r2, #2
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f005 fad3 	bl	8017e76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80128d0:	4b35      	ldr	r3, [pc, #212]	; (80129a8 <USBD_CDC_Init+0x1e8>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	f003 020f 	and.w	r2, r3, #15
 80128d8:	6879      	ldr	r1, [r7, #4]
 80128da:	4613      	mov	r3, r2
 80128dc:	009b      	lsls	r3, r3, #2
 80128de:	4413      	add	r3, r2
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	440b      	add	r3, r1
 80128e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80128e8:	2201      	movs	r2, #1
 80128ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80128ec:	4b2f      	ldr	r3, [pc, #188]	; (80129ac <USBD_CDC_Init+0x1ec>)
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	f003 020f 	and.w	r2, r3, #15
 80128f4:	6879      	ldr	r1, [r7, #4]
 80128f6:	4613      	mov	r3, r2
 80128f8:	009b      	lsls	r3, r3, #2
 80128fa:	4413      	add	r3, r2
 80128fc:	009b      	lsls	r3, r3, #2
 80128fe:	440b      	add	r3, r1
 8012900:	3326      	adds	r3, #38	; 0x26
 8012902:	2210      	movs	r2, #16
 8012904:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012906:	4b29      	ldr	r3, [pc, #164]	; (80129ac <USBD_CDC_Init+0x1ec>)
 8012908:	7819      	ldrb	r1, [r3, #0]
 801290a:	2308      	movs	r3, #8
 801290c:	2203      	movs	r2, #3
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f005 fab1 	bl	8017e76 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012914:	4b25      	ldr	r3, [pc, #148]	; (80129ac <USBD_CDC_Init+0x1ec>)
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	f003 020f 	and.w	r2, r3, #15
 801291c:	6879      	ldr	r1, [r7, #4]
 801291e:	4613      	mov	r3, r2
 8012920:	009b      	lsls	r3, r3, #2
 8012922:	4413      	add	r3, r2
 8012924:	009b      	lsls	r3, r3, #2
 8012926:	440b      	add	r3, r1
 8012928:	3324      	adds	r3, #36	; 0x24
 801292a:	2201      	movs	r2, #1
 801292c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	2200      	movs	r2, #0
 8012932:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801293c:	687a      	ldr	r2, [r7, #4]
 801293e:	33b0      	adds	r3, #176	; 0xb0
 8012940:	009b      	lsls	r3, r3, #2
 8012942:	4413      	add	r3, r2
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	2200      	movs	r2, #0
 801294e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	2200      	movs	r2, #0
 8012956:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8012960:	2b00      	cmp	r3, #0
 8012962:	d101      	bne.n	8012968 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012964:	2302      	movs	r3, #2
 8012966:	e018      	b.n	801299a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	7c1b      	ldrb	r3, [r3, #16]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d10a      	bne.n	8012986 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012970:	4b0d      	ldr	r3, [pc, #52]	; (80129a8 <USBD_CDC_Init+0x1e8>)
 8012972:	7819      	ldrb	r1, [r3, #0]
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801297a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801297e:	6878      	ldr	r0, [r7, #4]
 8012980:	f005 fb68 	bl	8018054 <USBD_LL_PrepareReceive>
 8012984:	e008      	b.n	8012998 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012986:	4b08      	ldr	r3, [pc, #32]	; (80129a8 <USBD_CDC_Init+0x1e8>)
 8012988:	7819      	ldrb	r1, [r3, #0]
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012990:	2340      	movs	r3, #64	; 0x40
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f005 fb5e 	bl	8018054 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012998:	2300      	movs	r3, #0
}
 801299a:	4618      	mov	r0, r3
 801299c:	3710      	adds	r7, #16
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}
 80129a2:	bf00      	nop
 80129a4:	24000097 	.word	0x24000097
 80129a8:	24000098 	.word	0x24000098
 80129ac:	24000099 	.word	0x24000099

080129b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	460b      	mov	r3, r1
 80129ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80129bc:	4b3a      	ldr	r3, [pc, #232]	; (8012aa8 <USBD_CDC_DeInit+0xf8>)
 80129be:	781b      	ldrb	r3, [r3, #0]
 80129c0:	4619      	mov	r1, r3
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f005 fa7d 	bl	8017ec2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80129c8:	4b37      	ldr	r3, [pc, #220]	; (8012aa8 <USBD_CDC_DeInit+0xf8>)
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	f003 020f 	and.w	r2, r3, #15
 80129d0:	6879      	ldr	r1, [r7, #4]
 80129d2:	4613      	mov	r3, r2
 80129d4:	009b      	lsls	r3, r3, #2
 80129d6:	4413      	add	r3, r2
 80129d8:	009b      	lsls	r3, r3, #2
 80129da:	440b      	add	r3, r1
 80129dc:	3324      	adds	r3, #36	; 0x24
 80129de:	2200      	movs	r2, #0
 80129e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80129e2:	4b32      	ldr	r3, [pc, #200]	; (8012aac <USBD_CDC_DeInit+0xfc>)
 80129e4:	781b      	ldrb	r3, [r3, #0]
 80129e6:	4619      	mov	r1, r3
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f005 fa6a 	bl	8017ec2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80129ee:	4b2f      	ldr	r3, [pc, #188]	; (8012aac <USBD_CDC_DeInit+0xfc>)
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	f003 020f 	and.w	r2, r3, #15
 80129f6:	6879      	ldr	r1, [r7, #4]
 80129f8:	4613      	mov	r3, r2
 80129fa:	009b      	lsls	r3, r3, #2
 80129fc:	4413      	add	r3, r2
 80129fe:	009b      	lsls	r3, r3, #2
 8012a00:	440b      	add	r3, r1
 8012a02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012a06:	2200      	movs	r2, #0
 8012a08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012a0a:	4b29      	ldr	r3, [pc, #164]	; (8012ab0 <USBD_CDC_DeInit+0x100>)
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	4619      	mov	r1, r3
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f005 fa56 	bl	8017ec2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012a16:	4b26      	ldr	r3, [pc, #152]	; (8012ab0 <USBD_CDC_DeInit+0x100>)
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	f003 020f 	and.w	r2, r3, #15
 8012a1e:	6879      	ldr	r1, [r7, #4]
 8012a20:	4613      	mov	r3, r2
 8012a22:	009b      	lsls	r3, r3, #2
 8012a24:	4413      	add	r3, r2
 8012a26:	009b      	lsls	r3, r3, #2
 8012a28:	440b      	add	r3, r1
 8012a2a:	3324      	adds	r3, #36	; 0x24
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012a30:	4b1f      	ldr	r3, [pc, #124]	; (8012ab0 <USBD_CDC_DeInit+0x100>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	f003 020f 	and.w	r2, r3, #15
 8012a38:	6879      	ldr	r1, [r7, #4]
 8012a3a:	4613      	mov	r3, r2
 8012a3c:	009b      	lsls	r3, r3, #2
 8012a3e:	4413      	add	r3, r2
 8012a40:	009b      	lsls	r3, r3, #2
 8012a42:	440b      	add	r3, r1
 8012a44:	3326      	adds	r3, #38	; 0x26
 8012a46:	2200      	movs	r2, #0
 8012a48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	32b0      	adds	r2, #176	; 0xb0
 8012a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d01f      	beq.n	8012a9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012a62:	687a      	ldr	r2, [r7, #4]
 8012a64:	33b0      	adds	r3, #176	; 0xb0
 8012a66:	009b      	lsls	r3, r3, #2
 8012a68:	4413      	add	r3, r2
 8012a6a:	685b      	ldr	r3, [r3, #4]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	32b0      	adds	r2, #176	; 0xb0
 8012a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f005 fb2a 	bl	80180d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	32b0      	adds	r2, #176	; 0xb0
 8012a8e:	2100      	movs	r1, #0
 8012a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2200      	movs	r2, #0
 8012a98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012a9c:	2300      	movs	r3, #0
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3708      	adds	r7, #8
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	24000097 	.word	0x24000097
 8012aac:	24000098 	.word	0x24000098
 8012ab0:	24000099 	.word	0x24000099

08012ab4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b086      	sub	sp, #24
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	32b0      	adds	r2, #176	; 0xb0
 8012ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012acc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012ada:	693b      	ldr	r3, [r7, #16]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d101      	bne.n	8012ae4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012ae0:	2303      	movs	r3, #3
 8012ae2:	e0bf      	b.n	8012c64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d050      	beq.n	8012b92 <USBD_CDC_Setup+0xde>
 8012af0:	2b20      	cmp	r3, #32
 8012af2:	f040 80af 	bne.w	8012c54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	88db      	ldrh	r3, [r3, #6]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d03a      	beq.n	8012b74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	b25b      	sxtb	r3, r3
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	da1b      	bge.n	8012b40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012b0e:	687a      	ldr	r2, [r7, #4]
 8012b10:	33b0      	adds	r3, #176	; 0xb0
 8012b12:	009b      	lsls	r3, r3, #2
 8012b14:	4413      	add	r3, r2
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	689b      	ldr	r3, [r3, #8]
 8012b1a:	683a      	ldr	r2, [r7, #0]
 8012b1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012b1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012b20:	683a      	ldr	r2, [r7, #0]
 8012b22:	88d2      	ldrh	r2, [r2, #6]
 8012b24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	88db      	ldrh	r3, [r3, #6]
 8012b2a:	2b07      	cmp	r3, #7
 8012b2c:	bf28      	it	cs
 8012b2e:	2307      	movcs	r3, #7
 8012b30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	89fa      	ldrh	r2, [r7, #14]
 8012b36:	4619      	mov	r1, r3
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f001 fd89 	bl	8014650 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012b3e:	e090      	b.n	8012c62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	785a      	ldrb	r2, [r3, #1]
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	88db      	ldrh	r3, [r3, #6]
 8012b4e:	2b3f      	cmp	r3, #63	; 0x3f
 8012b50:	d803      	bhi.n	8012b5a <USBD_CDC_Setup+0xa6>
 8012b52:	683b      	ldr	r3, [r7, #0]
 8012b54:	88db      	ldrh	r3, [r3, #6]
 8012b56:	b2da      	uxtb	r2, r3
 8012b58:	e000      	b.n	8012b5c <USBD_CDC_Setup+0xa8>
 8012b5a:	2240      	movs	r2, #64	; 0x40
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012b62:	6939      	ldr	r1, [r7, #16]
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f001 fd9b 	bl	80146a8 <USBD_CtlPrepareRx>
      break;
 8012b72:	e076      	b.n	8012c62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012b7a:	687a      	ldr	r2, [r7, #4]
 8012b7c:	33b0      	adds	r3, #176	; 0xb0
 8012b7e:	009b      	lsls	r3, r3, #2
 8012b80:	4413      	add	r3, r2
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	689b      	ldr	r3, [r3, #8]
 8012b86:	683a      	ldr	r2, [r7, #0]
 8012b88:	7850      	ldrb	r0, [r2, #1]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	6839      	ldr	r1, [r7, #0]
 8012b8e:	4798      	blx	r3
      break;
 8012b90:	e067      	b.n	8012c62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	785b      	ldrb	r3, [r3, #1]
 8012b96:	2b0b      	cmp	r3, #11
 8012b98:	d851      	bhi.n	8012c3e <USBD_CDC_Setup+0x18a>
 8012b9a:	a201      	add	r2, pc, #4	; (adr r2, 8012ba0 <USBD_CDC_Setup+0xec>)
 8012b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ba0:	08012bd1 	.word	0x08012bd1
 8012ba4:	08012c4d 	.word	0x08012c4d
 8012ba8:	08012c3f 	.word	0x08012c3f
 8012bac:	08012c3f 	.word	0x08012c3f
 8012bb0:	08012c3f 	.word	0x08012c3f
 8012bb4:	08012c3f 	.word	0x08012c3f
 8012bb8:	08012c3f 	.word	0x08012c3f
 8012bbc:	08012c3f 	.word	0x08012c3f
 8012bc0:	08012c3f 	.word	0x08012c3f
 8012bc4:	08012c3f 	.word	0x08012c3f
 8012bc8:	08012bfb 	.word	0x08012bfb
 8012bcc:	08012c25 	.word	0x08012c25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bd6:	b2db      	uxtb	r3, r3
 8012bd8:	2b03      	cmp	r3, #3
 8012bda:	d107      	bne.n	8012bec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012bdc:	f107 030a 	add.w	r3, r7, #10
 8012be0:	2202      	movs	r2, #2
 8012be2:	4619      	mov	r1, r3
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f001 fd33 	bl	8014650 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012bea:	e032      	b.n	8012c52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012bec:	6839      	ldr	r1, [r7, #0]
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f001 fcbd 	bl	801456e <USBD_CtlError>
            ret = USBD_FAIL;
 8012bf4:	2303      	movs	r3, #3
 8012bf6:	75fb      	strb	r3, [r7, #23]
          break;
 8012bf8:	e02b      	b.n	8012c52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c00:	b2db      	uxtb	r3, r3
 8012c02:	2b03      	cmp	r3, #3
 8012c04:	d107      	bne.n	8012c16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012c06:	f107 030d 	add.w	r3, r7, #13
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f001 fd1e 	bl	8014650 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012c14:	e01d      	b.n	8012c52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012c16:	6839      	ldr	r1, [r7, #0]
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f001 fca8 	bl	801456e <USBD_CtlError>
            ret = USBD_FAIL;
 8012c1e:	2303      	movs	r3, #3
 8012c20:	75fb      	strb	r3, [r7, #23]
          break;
 8012c22:	e016      	b.n	8012c52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	2b03      	cmp	r3, #3
 8012c2e:	d00f      	beq.n	8012c50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012c30:	6839      	ldr	r1, [r7, #0]
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f001 fc9b 	bl	801456e <USBD_CtlError>
            ret = USBD_FAIL;
 8012c38:	2303      	movs	r3, #3
 8012c3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012c3c:	e008      	b.n	8012c50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012c3e:	6839      	ldr	r1, [r7, #0]
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f001 fc94 	bl	801456e <USBD_CtlError>
          ret = USBD_FAIL;
 8012c46:	2303      	movs	r3, #3
 8012c48:	75fb      	strb	r3, [r7, #23]
          break;
 8012c4a:	e002      	b.n	8012c52 <USBD_CDC_Setup+0x19e>
          break;
 8012c4c:	bf00      	nop
 8012c4e:	e008      	b.n	8012c62 <USBD_CDC_Setup+0x1ae>
          break;
 8012c50:	bf00      	nop
      }
      break;
 8012c52:	e006      	b.n	8012c62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012c54:	6839      	ldr	r1, [r7, #0]
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f001 fc89 	bl	801456e <USBD_CtlError>
      ret = USBD_FAIL;
 8012c5c:	2303      	movs	r3, #3
 8012c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8012c60:	bf00      	nop
  }

  return (uint8_t)ret;
 8012c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	3718      	adds	r7, #24
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}

08012c6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	460b      	mov	r3, r1
 8012c76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012c7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	32b0      	adds	r2, #176	; 0xb0
 8012c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d101      	bne.n	8012c96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012c92:	2303      	movs	r3, #3
 8012c94:	e065      	b.n	8012d62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	32b0      	adds	r2, #176	; 0xb0
 8012ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ca4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012ca6:	78fb      	ldrb	r3, [r7, #3]
 8012ca8:	f003 020f 	and.w	r2, r3, #15
 8012cac:	6879      	ldr	r1, [r7, #4]
 8012cae:	4613      	mov	r3, r2
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	4413      	add	r3, r2
 8012cb4:	009b      	lsls	r3, r3, #2
 8012cb6:	440b      	add	r3, r1
 8012cb8:	3318      	adds	r3, #24
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d02f      	beq.n	8012d20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012cc0:	78fb      	ldrb	r3, [r7, #3]
 8012cc2:	f003 020f 	and.w	r2, r3, #15
 8012cc6:	6879      	ldr	r1, [r7, #4]
 8012cc8:	4613      	mov	r3, r2
 8012cca:	009b      	lsls	r3, r3, #2
 8012ccc:	4413      	add	r3, r2
 8012cce:	009b      	lsls	r3, r3, #2
 8012cd0:	440b      	add	r3, r1
 8012cd2:	3318      	adds	r3, #24
 8012cd4:	681a      	ldr	r2, [r3, #0]
 8012cd6:	78fb      	ldrb	r3, [r7, #3]
 8012cd8:	f003 010f 	and.w	r1, r3, #15
 8012cdc:	68f8      	ldr	r0, [r7, #12]
 8012cde:	460b      	mov	r3, r1
 8012ce0:	00db      	lsls	r3, r3, #3
 8012ce2:	440b      	add	r3, r1
 8012ce4:	009b      	lsls	r3, r3, #2
 8012ce6:	4403      	add	r3, r0
 8012ce8:	3344      	adds	r3, #68	; 0x44
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	fbb2 f1f3 	udiv	r1, r2, r3
 8012cf0:	fb01 f303 	mul.w	r3, r1, r3
 8012cf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d112      	bne.n	8012d20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012cfa:	78fb      	ldrb	r3, [r7, #3]
 8012cfc:	f003 020f 	and.w	r2, r3, #15
 8012d00:	6879      	ldr	r1, [r7, #4]
 8012d02:	4613      	mov	r3, r2
 8012d04:	009b      	lsls	r3, r3, #2
 8012d06:	4413      	add	r3, r2
 8012d08:	009b      	lsls	r3, r3, #2
 8012d0a:	440b      	add	r3, r1
 8012d0c:	3318      	adds	r3, #24
 8012d0e:	2200      	movs	r2, #0
 8012d10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012d12:	78f9      	ldrb	r1, [r7, #3]
 8012d14:	2300      	movs	r3, #0
 8012d16:	2200      	movs	r2, #0
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f005 f97a 	bl	8018012 <USBD_LL_Transmit>
 8012d1e:	e01f      	b.n	8012d60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	2200      	movs	r2, #0
 8012d24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	33b0      	adds	r3, #176	; 0xb0
 8012d32:	009b      	lsls	r3, r3, #2
 8012d34:	4413      	add	r3, r2
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	691b      	ldr	r3, [r3, #16]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d010      	beq.n	8012d60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012d44:	687a      	ldr	r2, [r7, #4]
 8012d46:	33b0      	adds	r3, #176	; 0xb0
 8012d48:	009b      	lsls	r3, r3, #2
 8012d4a:	4413      	add	r3, r2
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	691b      	ldr	r3, [r3, #16]
 8012d50:	68ba      	ldr	r2, [r7, #8]
 8012d52:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8012d56:	68ba      	ldr	r2, [r7, #8]
 8012d58:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8012d5c:	78fa      	ldrb	r2, [r7, #3]
 8012d5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012d60:	2300      	movs	r3, #0
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3710      	adds	r7, #16
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}

08012d6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012d6a:	b580      	push	{r7, lr}
 8012d6c:	b084      	sub	sp, #16
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	6078      	str	r0, [r7, #4]
 8012d72:	460b      	mov	r3, r1
 8012d74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	32b0      	adds	r2, #176	; 0xb0
 8012d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	32b0      	adds	r2, #176	; 0xb0
 8012d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d101      	bne.n	8012d9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012d98:	2303      	movs	r3, #3
 8012d9a:	e01a      	b.n	8012dd2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012d9c:	78fb      	ldrb	r3, [r7, #3]
 8012d9e:	4619      	mov	r1, r3
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f005 f978 	bl	8018096 <USBD_LL_GetRxDataSize>
 8012da6:	4602      	mov	r2, r0
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012db4:	687a      	ldr	r2, [r7, #4]
 8012db6:	33b0      	adds	r3, #176	; 0xb0
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	4413      	add	r3, r2
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	68db      	ldr	r3, [r3, #12]
 8012dc0:	68fa      	ldr	r2, [r7, #12]
 8012dc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8012dc6:	68fa      	ldr	r2, [r7, #12]
 8012dc8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8012dcc:	4611      	mov	r1, r2
 8012dce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012dd0:	2300      	movs	r3, #0
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3710      	adds	r7, #16
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}

08012dda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012dda:	b580      	push	{r7, lr}
 8012ddc:	b084      	sub	sp, #16
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	32b0      	adds	r2, #176	; 0xb0
 8012dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012df0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d101      	bne.n	8012dfc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012df8:	2303      	movs	r3, #3
 8012dfa:	e025      	b.n	8012e48 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012e02:	687a      	ldr	r2, [r7, #4]
 8012e04:	33b0      	adds	r3, #176	; 0xb0
 8012e06:	009b      	lsls	r3, r3, #2
 8012e08:	4413      	add	r3, r2
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d01a      	beq.n	8012e46 <USBD_CDC_EP0_RxReady+0x6c>
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012e16:	2bff      	cmp	r3, #255	; 0xff
 8012e18:	d015      	beq.n	8012e46 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	33b0      	adds	r3, #176	; 0xb0
 8012e24:	009b      	lsls	r3, r3, #2
 8012e26:	4413      	add	r3, r2
 8012e28:	685b      	ldr	r3, [r3, #4]
 8012e2a:	689b      	ldr	r3, [r3, #8]
 8012e2c:	68fa      	ldr	r2, [r7, #12]
 8012e2e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8012e32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8012e34:	68fa      	ldr	r2, [r7, #12]
 8012e36:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012e3a:	b292      	uxth	r2, r2
 8012e3c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	22ff      	movs	r2, #255	; 0xff
 8012e42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8012e46:	2300      	movs	r3, #0
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3710      	adds	r7, #16
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}

08012e50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b086      	sub	sp, #24
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012e58:	2182      	movs	r1, #130	; 0x82
 8012e5a:	4818      	ldr	r0, [pc, #96]	; (8012ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012e5c:	f000 fd4f 	bl	80138fe <USBD_GetEpDesc>
 8012e60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012e62:	2101      	movs	r1, #1
 8012e64:	4815      	ldr	r0, [pc, #84]	; (8012ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012e66:	f000 fd4a 	bl	80138fe <USBD_GetEpDesc>
 8012e6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012e6c:	2181      	movs	r1, #129	; 0x81
 8012e6e:	4813      	ldr	r0, [pc, #76]	; (8012ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012e70:	f000 fd45 	bl	80138fe <USBD_GetEpDesc>
 8012e74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d002      	beq.n	8012e82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	2210      	movs	r2, #16
 8012e80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d006      	beq.n	8012e96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012e90:	711a      	strb	r2, [r3, #4]
 8012e92:	2200      	movs	r2, #0
 8012e94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d006      	beq.n	8012eaa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012ea4:	711a      	strb	r2, [r3, #4]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2243      	movs	r2, #67	; 0x43
 8012eae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012eb0:	4b02      	ldr	r3, [pc, #8]	; (8012ebc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3718      	adds	r7, #24
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	24000054 	.word	0x24000054

08012ec0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b086      	sub	sp, #24
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012ec8:	2182      	movs	r1, #130	; 0x82
 8012eca:	4818      	ldr	r0, [pc, #96]	; (8012f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012ecc:	f000 fd17 	bl	80138fe <USBD_GetEpDesc>
 8012ed0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012ed2:	2101      	movs	r1, #1
 8012ed4:	4815      	ldr	r0, [pc, #84]	; (8012f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012ed6:	f000 fd12 	bl	80138fe <USBD_GetEpDesc>
 8012eda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012edc:	2181      	movs	r1, #129	; 0x81
 8012ede:	4813      	ldr	r0, [pc, #76]	; (8012f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012ee0:	f000 fd0d 	bl	80138fe <USBD_GetEpDesc>
 8012ee4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012ee6:	697b      	ldr	r3, [r7, #20]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d002      	beq.n	8012ef2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	2210      	movs	r2, #16
 8012ef0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d006      	beq.n	8012f06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	2200      	movs	r2, #0
 8012efc:	711a      	strb	r2, [r3, #4]
 8012efe:	2200      	movs	r2, #0
 8012f00:	f042 0202 	orr.w	r2, r2, #2
 8012f04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d006      	beq.n	8012f1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	711a      	strb	r2, [r3, #4]
 8012f12:	2200      	movs	r2, #0
 8012f14:	f042 0202 	orr.w	r2, r2, #2
 8012f18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2243      	movs	r2, #67	; 0x43
 8012f1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012f20:	4b02      	ldr	r3, [pc, #8]	; (8012f2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012f22:	4618      	mov	r0, r3
 8012f24:	3718      	adds	r7, #24
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	24000054 	.word	0x24000054

08012f30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b086      	sub	sp, #24
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012f38:	2182      	movs	r1, #130	; 0x82
 8012f3a:	4818      	ldr	r0, [pc, #96]	; (8012f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012f3c:	f000 fcdf 	bl	80138fe <USBD_GetEpDesc>
 8012f40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012f42:	2101      	movs	r1, #1
 8012f44:	4815      	ldr	r0, [pc, #84]	; (8012f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012f46:	f000 fcda 	bl	80138fe <USBD_GetEpDesc>
 8012f4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012f4c:	2181      	movs	r1, #129	; 0x81
 8012f4e:	4813      	ldr	r0, [pc, #76]	; (8012f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012f50:	f000 fcd5 	bl	80138fe <USBD_GetEpDesc>
 8012f54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d002      	beq.n	8012f62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	2210      	movs	r2, #16
 8012f60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d006      	beq.n	8012f76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f70:	711a      	strb	r2, [r3, #4]
 8012f72:	2200      	movs	r2, #0
 8012f74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d006      	beq.n	8012f8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f84:	711a      	strb	r2, [r3, #4]
 8012f86:	2200      	movs	r2, #0
 8012f88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2243      	movs	r2, #67	; 0x43
 8012f8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012f90:	4b02      	ldr	r3, [pc, #8]	; (8012f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3718      	adds	r7, #24
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	24000054 	.word	0x24000054

08012fa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b083      	sub	sp, #12
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	220a      	movs	r2, #10
 8012fac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012fae:	4b03      	ldr	r3, [pc, #12]	; (8012fbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	370c      	adds	r7, #12
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr
 8012fbc:	24000010 	.word	0x24000010

08012fc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012fc0:	b480      	push	{r7}
 8012fc2:	b083      	sub	sp, #12
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d101      	bne.n	8012fd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012fd0:	2303      	movs	r3, #3
 8012fd2:	e009      	b.n	8012fe8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012fda:	687a      	ldr	r2, [r7, #4]
 8012fdc:	33b0      	adds	r3, #176	; 0xb0
 8012fde:	009b      	lsls	r3, r3, #2
 8012fe0:	4413      	add	r3, r2
 8012fe2:	683a      	ldr	r2, [r7, #0]
 8012fe4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012fe6:	2300      	movs	r3, #0
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	370c      	adds	r7, #12
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr

08012ff4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b087      	sub	sp, #28
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	60b9      	str	r1, [r7, #8]
 8012ffe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	32b0      	adds	r2, #176	; 0xb0
 801300a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801300e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d101      	bne.n	801301a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013016:	2303      	movs	r3, #3
 8013018:	e008      	b.n	801302c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	68ba      	ldr	r2, [r7, #8]
 801301e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801302a:	2300      	movs	r3, #0
}
 801302c:	4618      	mov	r0, r3
 801302e:	371c      	adds	r7, #28
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013038:	b480      	push	{r7}
 801303a:	b085      	sub	sp, #20
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	32b0      	adds	r2, #176	; 0xb0
 801304c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013050:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d101      	bne.n	801305c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013058:	2303      	movs	r3, #3
 801305a:	e004      	b.n	8013066 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	683a      	ldr	r2, [r7, #0]
 8013060:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013064:	2300      	movs	r3, #0
}
 8013066:	4618      	mov	r0, r3
 8013068:	3714      	adds	r7, #20
 801306a:	46bd      	mov	sp, r7
 801306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013070:	4770      	bx	lr
	...

08013074 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b084      	sub	sp, #16
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	32b0      	adds	r2, #176	; 0xb0
 8013086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801308a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801308c:	2301      	movs	r3, #1
 801308e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d101      	bne.n	801309a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013096:	2303      	movs	r3, #3
 8013098:	e025      	b.n	80130e6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d11f      	bne.n	80130e4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	2201      	movs	r2, #1
 80130a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80130ac:	4b10      	ldr	r3, [pc, #64]	; (80130f0 <USBD_CDC_TransmitPacket+0x7c>)
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	f003 020f 	and.w	r2, r3, #15
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	4613      	mov	r3, r2
 80130be:	009b      	lsls	r3, r3, #2
 80130c0:	4413      	add	r3, r2
 80130c2:	009b      	lsls	r3, r3, #2
 80130c4:	4403      	add	r3, r0
 80130c6:	3318      	adds	r3, #24
 80130c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80130ca:	4b09      	ldr	r3, [pc, #36]	; (80130f0 <USBD_CDC_TransmitPacket+0x7c>)
 80130cc:	7819      	ldrb	r1, [r3, #0]
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f004 ff99 	bl	8018012 <USBD_LL_Transmit>

    ret = USBD_OK;
 80130e0:	2300      	movs	r3, #0
 80130e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80130e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3710      	adds	r7, #16
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	24000097 	.word	0x24000097

080130f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b084      	sub	sp, #16
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	32b0      	adds	r2, #176	; 0xb0
 8013106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801310a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	32b0      	adds	r2, #176	; 0xb0
 8013116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d101      	bne.n	8013122 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801311e:	2303      	movs	r3, #3
 8013120:	e018      	b.n	8013154 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	7c1b      	ldrb	r3, [r3, #16]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d10a      	bne.n	8013140 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801312a:	4b0c      	ldr	r3, [pc, #48]	; (801315c <USBD_CDC_ReceivePacket+0x68>)
 801312c:	7819      	ldrb	r1, [r3, #0]
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f004 ff8b 	bl	8018054 <USBD_LL_PrepareReceive>
 801313e:	e008      	b.n	8013152 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013140:	4b06      	ldr	r3, [pc, #24]	; (801315c <USBD_CDC_ReceivePacket+0x68>)
 8013142:	7819      	ldrb	r1, [r3, #0]
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801314a:	2340      	movs	r3, #64	; 0x40
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f004 ff81 	bl	8018054 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013152:	2300      	movs	r3, #0
}
 8013154:	4618      	mov	r0, r3
 8013156:	3710      	adds	r7, #16
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}
 801315c:	24000098 	.word	0x24000098

08013160 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b086      	sub	sp, #24
 8013164:	af00      	add	r7, sp, #0
 8013166:	60f8      	str	r0, [r7, #12]
 8013168:	60b9      	str	r1, [r7, #8]
 801316a:	4613      	mov	r3, r2
 801316c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d101      	bne.n	8013178 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013174:	2303      	movs	r3, #3
 8013176:	e01f      	b.n	80131b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	2200      	movs	r2, #0
 801317c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	2200      	movs	r2, #0
 8013184:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	2200      	movs	r2, #0
 801318c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d003      	beq.n	801319e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	68ba      	ldr	r2, [r7, #8]
 801319a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2201      	movs	r2, #1
 80131a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	79fa      	ldrb	r2, [r7, #7]
 80131aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f004 fdf5 	bl	8017d9c <USBD_LL_Init>
 80131b2:	4603      	mov	r3, r0
 80131b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80131b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3718      	adds	r7, #24
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}

080131c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b084      	sub	sp, #16
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80131ca:	2300      	movs	r3, #0
 80131cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d101      	bne.n	80131d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80131d4:	2303      	movs	r3, #3
 80131d6:	e025      	b.n	8013224 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	683a      	ldr	r2, [r7, #0]
 80131dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	32ae      	adds	r2, #174	; 0xae
 80131ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d00f      	beq.n	8013214 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	32ae      	adds	r2, #174	; 0xae
 80131fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013204:	f107 020e 	add.w	r2, r7, #14
 8013208:	4610      	mov	r0, r2
 801320a:	4798      	blx	r3
 801320c:	4602      	mov	r2, r0
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801321a:	1c5a      	adds	r2, r3, #1
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013222:	2300      	movs	r3, #0
}
 8013224:	4618      	mov	r0, r3
 8013226:	3710      	adds	r7, #16
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}

0801322c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b082      	sub	sp, #8
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f004 fe03 	bl	8017e40 <USBD_LL_Start>
 801323a:	4603      	mov	r3, r0
}
 801323c:	4618      	mov	r0, r3
 801323e:	3708      	adds	r7, #8
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}

08013244 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013244:	b480      	push	{r7}
 8013246:	b083      	sub	sp, #12
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801324c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801324e:	4618      	mov	r0, r3
 8013250:	370c      	adds	r7, #12
 8013252:	46bd      	mov	sp, r7
 8013254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013258:	4770      	bx	lr

0801325a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801325a:	b580      	push	{r7, lr}
 801325c:	b084      	sub	sp, #16
 801325e:	af00      	add	r7, sp, #0
 8013260:	6078      	str	r0, [r7, #4]
 8013262:	460b      	mov	r3, r1
 8013264:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013266:	2300      	movs	r3, #0
 8013268:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013270:	2b00      	cmp	r3, #0
 8013272:	d009      	beq.n	8013288 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	78fa      	ldrb	r2, [r7, #3]
 801327e:	4611      	mov	r1, r2
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	4798      	blx	r3
 8013284:	4603      	mov	r3, r0
 8013286:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013288:	7bfb      	ldrb	r3, [r7, #15]
}
 801328a:	4618      	mov	r0, r3
 801328c:	3710      	adds	r7, #16
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}

08013292 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013292:	b580      	push	{r7, lr}
 8013294:	b084      	sub	sp, #16
 8013296:	af00      	add	r7, sp, #0
 8013298:	6078      	str	r0, [r7, #4]
 801329a:	460b      	mov	r3, r1
 801329c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801329e:	2300      	movs	r3, #0
 80132a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132a8:	685b      	ldr	r3, [r3, #4]
 80132aa:	78fa      	ldrb	r2, [r7, #3]
 80132ac:	4611      	mov	r1, r2
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	4798      	blx	r3
 80132b2:	4603      	mov	r3, r0
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d001      	beq.n	80132bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80132b8:	2303      	movs	r3, #3
 80132ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80132bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3710      	adds	r7, #16
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}

080132c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80132c6:	b580      	push	{r7, lr}
 80132c8:	b084      	sub	sp, #16
 80132ca:	af00      	add	r7, sp, #0
 80132cc:	6078      	str	r0, [r7, #4]
 80132ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80132d6:	6839      	ldr	r1, [r7, #0]
 80132d8:	4618      	mov	r0, r3
 80132da:	f001 f90e 	bl	80144fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2201      	movs	r2, #1
 80132e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80132ec:	461a      	mov	r2, r3
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80132fa:	f003 031f 	and.w	r3, r3, #31
 80132fe:	2b02      	cmp	r3, #2
 8013300:	d01a      	beq.n	8013338 <USBD_LL_SetupStage+0x72>
 8013302:	2b02      	cmp	r3, #2
 8013304:	d822      	bhi.n	801334c <USBD_LL_SetupStage+0x86>
 8013306:	2b00      	cmp	r3, #0
 8013308:	d002      	beq.n	8013310 <USBD_LL_SetupStage+0x4a>
 801330a:	2b01      	cmp	r3, #1
 801330c:	d00a      	beq.n	8013324 <USBD_LL_SetupStage+0x5e>
 801330e:	e01d      	b.n	801334c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013316:	4619      	mov	r1, r3
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f000 fb65 	bl	80139e8 <USBD_StdDevReq>
 801331e:	4603      	mov	r3, r0
 8013320:	73fb      	strb	r3, [r7, #15]
      break;
 8013322:	e020      	b.n	8013366 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801332a:	4619      	mov	r1, r3
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 fbcd 	bl	8013acc <USBD_StdItfReq>
 8013332:	4603      	mov	r3, r0
 8013334:	73fb      	strb	r3, [r7, #15]
      break;
 8013336:	e016      	b.n	8013366 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801333e:	4619      	mov	r1, r3
 8013340:	6878      	ldr	r0, [r7, #4]
 8013342:	f000 fc2f 	bl	8013ba4 <USBD_StdEPReq>
 8013346:	4603      	mov	r3, r0
 8013348:	73fb      	strb	r3, [r7, #15]
      break;
 801334a:	e00c      	b.n	8013366 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013352:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013356:	b2db      	uxtb	r3, r3
 8013358:	4619      	mov	r1, r3
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f004 fdd0 	bl	8017f00 <USBD_LL_StallEP>
 8013360:	4603      	mov	r3, r0
 8013362:	73fb      	strb	r3, [r7, #15]
      break;
 8013364:	bf00      	nop
  }

  return ret;
 8013366:	7bfb      	ldrb	r3, [r7, #15]
}
 8013368:	4618      	mov	r0, r3
 801336a:	3710      	adds	r7, #16
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b086      	sub	sp, #24
 8013374:	af00      	add	r7, sp, #0
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	460b      	mov	r3, r1
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801337e:	2300      	movs	r3, #0
 8013380:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013382:	7afb      	ldrb	r3, [r7, #11]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d16e      	bne.n	8013466 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801338e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013396:	2b03      	cmp	r3, #3
 8013398:	f040 8098 	bne.w	80134cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801339c:	693b      	ldr	r3, [r7, #16]
 801339e:	689a      	ldr	r2, [r3, #8]
 80133a0:	693b      	ldr	r3, [r7, #16]
 80133a2:	68db      	ldr	r3, [r3, #12]
 80133a4:	429a      	cmp	r2, r3
 80133a6:	d913      	bls.n	80133d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	689a      	ldr	r2, [r3, #8]
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	68db      	ldr	r3, [r3, #12]
 80133b0:	1ad2      	subs	r2, r2, r3
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	68da      	ldr	r2, [r3, #12]
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	689b      	ldr	r3, [r3, #8]
 80133be:	4293      	cmp	r3, r2
 80133c0:	bf28      	it	cs
 80133c2:	4613      	movcs	r3, r2
 80133c4:	461a      	mov	r2, r3
 80133c6:	6879      	ldr	r1, [r7, #4]
 80133c8:	68f8      	ldr	r0, [r7, #12]
 80133ca:	f001 f98a 	bl	80146e2 <USBD_CtlContinueRx>
 80133ce:	e07d      	b.n	80134cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80133d6:	f003 031f 	and.w	r3, r3, #31
 80133da:	2b02      	cmp	r3, #2
 80133dc:	d014      	beq.n	8013408 <USBD_LL_DataOutStage+0x98>
 80133de:	2b02      	cmp	r3, #2
 80133e0:	d81d      	bhi.n	801341e <USBD_LL_DataOutStage+0xae>
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d002      	beq.n	80133ec <USBD_LL_DataOutStage+0x7c>
 80133e6:	2b01      	cmp	r3, #1
 80133e8:	d003      	beq.n	80133f2 <USBD_LL_DataOutStage+0x82>
 80133ea:	e018      	b.n	801341e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80133ec:	2300      	movs	r3, #0
 80133ee:	75bb      	strb	r3, [r7, #22]
            break;
 80133f0:	e018      	b.n	8013424 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80133f8:	b2db      	uxtb	r3, r3
 80133fa:	4619      	mov	r1, r3
 80133fc:	68f8      	ldr	r0, [r7, #12]
 80133fe:	f000 fa64 	bl	80138ca <USBD_CoreFindIF>
 8013402:	4603      	mov	r3, r0
 8013404:	75bb      	strb	r3, [r7, #22]
            break;
 8013406:	e00d      	b.n	8013424 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801340e:	b2db      	uxtb	r3, r3
 8013410:	4619      	mov	r1, r3
 8013412:	68f8      	ldr	r0, [r7, #12]
 8013414:	f000 fa66 	bl	80138e4 <USBD_CoreFindEP>
 8013418:	4603      	mov	r3, r0
 801341a:	75bb      	strb	r3, [r7, #22]
            break;
 801341c:	e002      	b.n	8013424 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801341e:	2300      	movs	r3, #0
 8013420:	75bb      	strb	r3, [r7, #22]
            break;
 8013422:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013424:	7dbb      	ldrb	r3, [r7, #22]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d119      	bne.n	801345e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013430:	b2db      	uxtb	r3, r3
 8013432:	2b03      	cmp	r3, #3
 8013434:	d113      	bne.n	801345e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013436:	7dba      	ldrb	r2, [r7, #22]
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	32ae      	adds	r2, #174	; 0xae
 801343c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013440:	691b      	ldr	r3, [r3, #16]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d00b      	beq.n	801345e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013446:	7dba      	ldrb	r2, [r7, #22]
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801344e:	7dba      	ldrb	r2, [r7, #22]
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	32ae      	adds	r2, #174	; 0xae
 8013454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013458:	691b      	ldr	r3, [r3, #16]
 801345a:	68f8      	ldr	r0, [r7, #12]
 801345c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801345e:	68f8      	ldr	r0, [r7, #12]
 8013460:	f001 f950 	bl	8014704 <USBD_CtlSendStatus>
 8013464:	e032      	b.n	80134cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013466:	7afb      	ldrb	r3, [r7, #11]
 8013468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801346c:	b2db      	uxtb	r3, r3
 801346e:	4619      	mov	r1, r3
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	f000 fa37 	bl	80138e4 <USBD_CoreFindEP>
 8013476:	4603      	mov	r3, r0
 8013478:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801347a:	7dbb      	ldrb	r3, [r7, #22]
 801347c:	2bff      	cmp	r3, #255	; 0xff
 801347e:	d025      	beq.n	80134cc <USBD_LL_DataOutStage+0x15c>
 8013480:	7dbb      	ldrb	r3, [r7, #22]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d122      	bne.n	80134cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801348c:	b2db      	uxtb	r3, r3
 801348e:	2b03      	cmp	r3, #3
 8013490:	d117      	bne.n	80134c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013492:	7dba      	ldrb	r2, [r7, #22]
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	32ae      	adds	r2, #174	; 0xae
 8013498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801349c:	699b      	ldr	r3, [r3, #24]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d00f      	beq.n	80134c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80134a2:	7dba      	ldrb	r2, [r7, #22]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80134aa:	7dba      	ldrb	r2, [r7, #22]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	32ae      	adds	r2, #174	; 0xae
 80134b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134b4:	699b      	ldr	r3, [r3, #24]
 80134b6:	7afa      	ldrb	r2, [r7, #11]
 80134b8:	4611      	mov	r1, r2
 80134ba:	68f8      	ldr	r0, [r7, #12]
 80134bc:	4798      	blx	r3
 80134be:	4603      	mov	r3, r0
 80134c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80134c2:	7dfb      	ldrb	r3, [r7, #23]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d001      	beq.n	80134cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80134c8:	7dfb      	ldrb	r3, [r7, #23]
 80134ca:	e000      	b.n	80134ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80134cc:	2300      	movs	r3, #0
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3718      	adds	r7, #24
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}

080134d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80134d6:	b580      	push	{r7, lr}
 80134d8:	b086      	sub	sp, #24
 80134da:	af00      	add	r7, sp, #0
 80134dc:	60f8      	str	r0, [r7, #12]
 80134de:	460b      	mov	r3, r1
 80134e0:	607a      	str	r2, [r7, #4]
 80134e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80134e4:	7afb      	ldrb	r3, [r7, #11]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d16f      	bne.n	80135ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	3314      	adds	r3, #20
 80134ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80134f6:	2b02      	cmp	r3, #2
 80134f8:	d15a      	bne.n	80135b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	689a      	ldr	r2, [r3, #8]
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	68db      	ldr	r3, [r3, #12]
 8013502:	429a      	cmp	r2, r3
 8013504:	d914      	bls.n	8013530 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013506:	693b      	ldr	r3, [r7, #16]
 8013508:	689a      	ldr	r2, [r3, #8]
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	1ad2      	subs	r2, r2, r3
 8013510:	693b      	ldr	r3, [r7, #16]
 8013512:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013514:	693b      	ldr	r3, [r7, #16]
 8013516:	689b      	ldr	r3, [r3, #8]
 8013518:	461a      	mov	r2, r3
 801351a:	6879      	ldr	r1, [r7, #4]
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	f001 f8b2 	bl	8014686 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013522:	2300      	movs	r3, #0
 8013524:	2200      	movs	r2, #0
 8013526:	2100      	movs	r1, #0
 8013528:	68f8      	ldr	r0, [r7, #12]
 801352a:	f004 fd93 	bl	8018054 <USBD_LL_PrepareReceive>
 801352e:	e03f      	b.n	80135b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	68da      	ldr	r2, [r3, #12]
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	689b      	ldr	r3, [r3, #8]
 8013538:	429a      	cmp	r2, r3
 801353a:	d11c      	bne.n	8013576 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	685a      	ldr	r2, [r3, #4]
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013544:	429a      	cmp	r2, r3
 8013546:	d316      	bcc.n	8013576 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	685a      	ldr	r2, [r3, #4]
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013552:	429a      	cmp	r2, r3
 8013554:	d20f      	bcs.n	8013576 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013556:	2200      	movs	r2, #0
 8013558:	2100      	movs	r1, #0
 801355a:	68f8      	ldr	r0, [r7, #12]
 801355c:	f001 f893 	bl	8014686 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	2200      	movs	r2, #0
 8013564:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013568:	2300      	movs	r3, #0
 801356a:	2200      	movs	r2, #0
 801356c:	2100      	movs	r1, #0
 801356e:	68f8      	ldr	r0, [r7, #12]
 8013570:	f004 fd70 	bl	8018054 <USBD_LL_PrepareReceive>
 8013574:	e01c      	b.n	80135b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801357c:	b2db      	uxtb	r3, r3
 801357e:	2b03      	cmp	r3, #3
 8013580:	d10f      	bne.n	80135a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013588:	68db      	ldr	r3, [r3, #12]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d009      	beq.n	80135a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	2200      	movs	r2, #0
 8013592:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801359c:	68db      	ldr	r3, [r3, #12]
 801359e:	68f8      	ldr	r0, [r7, #12]
 80135a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80135a2:	2180      	movs	r1, #128	; 0x80
 80135a4:	68f8      	ldr	r0, [r7, #12]
 80135a6:	f004 fcab 	bl	8017f00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80135aa:	68f8      	ldr	r0, [r7, #12]
 80135ac:	f001 f8bd 	bl	801472a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d03a      	beq.n	8013630 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80135ba:	68f8      	ldr	r0, [r7, #12]
 80135bc:	f7ff fe42 	bl	8013244 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2200      	movs	r2, #0
 80135c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80135c8:	e032      	b.n	8013630 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80135ca:	7afb      	ldrb	r3, [r7, #11]
 80135cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80135d0:	b2db      	uxtb	r3, r3
 80135d2:	4619      	mov	r1, r3
 80135d4:	68f8      	ldr	r0, [r7, #12]
 80135d6:	f000 f985 	bl	80138e4 <USBD_CoreFindEP>
 80135da:	4603      	mov	r3, r0
 80135dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80135de:	7dfb      	ldrb	r3, [r7, #23]
 80135e0:	2bff      	cmp	r3, #255	; 0xff
 80135e2:	d025      	beq.n	8013630 <USBD_LL_DataInStage+0x15a>
 80135e4:	7dfb      	ldrb	r3, [r7, #23]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d122      	bne.n	8013630 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135f0:	b2db      	uxtb	r3, r3
 80135f2:	2b03      	cmp	r3, #3
 80135f4:	d11c      	bne.n	8013630 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80135f6:	7dfa      	ldrb	r2, [r7, #23]
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	32ae      	adds	r2, #174	; 0xae
 80135fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013600:	695b      	ldr	r3, [r3, #20]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d014      	beq.n	8013630 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013606:	7dfa      	ldrb	r2, [r7, #23]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801360e:	7dfa      	ldrb	r2, [r7, #23]
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	32ae      	adds	r2, #174	; 0xae
 8013614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013618:	695b      	ldr	r3, [r3, #20]
 801361a:	7afa      	ldrb	r2, [r7, #11]
 801361c:	4611      	mov	r1, r2
 801361e:	68f8      	ldr	r0, [r7, #12]
 8013620:	4798      	blx	r3
 8013622:	4603      	mov	r3, r0
 8013624:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013626:	7dbb      	ldrb	r3, [r7, #22]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d001      	beq.n	8013630 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801362c:	7dbb      	ldrb	r3, [r7, #22]
 801362e:	e000      	b.n	8013632 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013630:	2300      	movs	r3, #0
}
 8013632:	4618      	mov	r0, r3
 8013634:	3718      	adds	r7, #24
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}

0801363a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801363a:	b580      	push	{r7, lr}
 801363c:	b084      	sub	sp, #16
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013642:	2300      	movs	r3, #0
 8013644:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2201      	movs	r2, #1
 801364a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	2200      	movs	r2, #0
 8013652:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2200      	movs	r2, #0
 801365a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2200      	movs	r2, #0
 8013660:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2200      	movs	r2, #0
 8013668:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013672:	2b00      	cmp	r3, #0
 8013674:	d014      	beq.n	80136a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801367c:	685b      	ldr	r3, [r3, #4]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d00e      	beq.n	80136a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013688:	685b      	ldr	r3, [r3, #4]
 801368a:	687a      	ldr	r2, [r7, #4]
 801368c:	6852      	ldr	r2, [r2, #4]
 801368e:	b2d2      	uxtb	r2, r2
 8013690:	4611      	mov	r1, r2
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	4798      	blx	r3
 8013696:	4603      	mov	r3, r0
 8013698:	2b00      	cmp	r3, #0
 801369a:	d001      	beq.n	80136a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801369c:	2303      	movs	r3, #3
 801369e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80136a0:	2340      	movs	r3, #64	; 0x40
 80136a2:	2200      	movs	r2, #0
 80136a4:	2100      	movs	r1, #0
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f004 fbe5 	bl	8017e76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2201      	movs	r2, #1
 80136b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2240      	movs	r2, #64	; 0x40
 80136b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80136bc:	2340      	movs	r3, #64	; 0x40
 80136be:	2200      	movs	r2, #0
 80136c0:	2180      	movs	r1, #128	; 0x80
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f004 fbd7 	bl	8017e76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2201      	movs	r2, #1
 80136cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2240      	movs	r2, #64	; 0x40
 80136d2:	621a      	str	r2, [r3, #32]

  return ret;
 80136d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80136d6:	4618      	mov	r0, r3
 80136d8:	3710      	adds	r7, #16
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}

080136de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80136de:	b480      	push	{r7}
 80136e0:	b083      	sub	sp, #12
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	6078      	str	r0, [r7, #4]
 80136e6:	460b      	mov	r3, r1
 80136e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	78fa      	ldrb	r2, [r7, #3]
 80136ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	370c      	adds	r7, #12
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr

080136fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80136fe:	b480      	push	{r7}
 8013700:	b083      	sub	sp, #12
 8013702:	af00      	add	r7, sp, #0
 8013704:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801370c:	b2db      	uxtb	r3, r3
 801370e:	2b04      	cmp	r3, #4
 8013710:	d006      	beq.n	8013720 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013718:	b2da      	uxtb	r2, r3
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2204      	movs	r2, #4
 8013724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013728:	2300      	movs	r3, #0
}
 801372a:	4618      	mov	r0, r3
 801372c:	370c      	adds	r7, #12
 801372e:	46bd      	mov	sp, r7
 8013730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013734:	4770      	bx	lr

08013736 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013736:	b480      	push	{r7}
 8013738:	b083      	sub	sp, #12
 801373a:	af00      	add	r7, sp, #0
 801373c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013744:	b2db      	uxtb	r3, r3
 8013746:	2b04      	cmp	r3, #4
 8013748:	d106      	bne.n	8013758 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013750:	b2da      	uxtb	r2, r3
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013758:	2300      	movs	r3, #0
}
 801375a:	4618      	mov	r0, r3
 801375c:	370c      	adds	r7, #12
 801375e:	46bd      	mov	sp, r7
 8013760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013764:	4770      	bx	lr

08013766 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013766:	b580      	push	{r7, lr}
 8013768:	b082      	sub	sp, #8
 801376a:	af00      	add	r7, sp, #0
 801376c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013774:	b2db      	uxtb	r3, r3
 8013776:	2b03      	cmp	r3, #3
 8013778:	d110      	bne.n	801379c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013780:	2b00      	cmp	r3, #0
 8013782:	d00b      	beq.n	801379c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801378a:	69db      	ldr	r3, [r3, #28]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d005      	beq.n	801379c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013796:	69db      	ldr	r3, [r3, #28]
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801379c:	2300      	movs	r3, #0
}
 801379e:	4618      	mov	r0, r3
 80137a0:	3708      	adds	r7, #8
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}

080137a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80137a6:	b580      	push	{r7, lr}
 80137a8:	b082      	sub	sp, #8
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	6078      	str	r0, [r7, #4]
 80137ae:	460b      	mov	r3, r1
 80137b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	32ae      	adds	r2, #174	; 0xae
 80137bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d101      	bne.n	80137c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80137c4:	2303      	movs	r3, #3
 80137c6:	e01c      	b.n	8013802 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137ce:	b2db      	uxtb	r3, r3
 80137d0:	2b03      	cmp	r3, #3
 80137d2:	d115      	bne.n	8013800 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	32ae      	adds	r2, #174	; 0xae
 80137de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137e2:	6a1b      	ldr	r3, [r3, #32]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d00b      	beq.n	8013800 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	32ae      	adds	r2, #174	; 0xae
 80137f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137f6:	6a1b      	ldr	r3, [r3, #32]
 80137f8:	78fa      	ldrb	r2, [r7, #3]
 80137fa:	4611      	mov	r1, r2
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013800:	2300      	movs	r3, #0
}
 8013802:	4618      	mov	r0, r3
 8013804:	3708      	adds	r7, #8
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}

0801380a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801380a:	b580      	push	{r7, lr}
 801380c:	b082      	sub	sp, #8
 801380e:	af00      	add	r7, sp, #0
 8013810:	6078      	str	r0, [r7, #4]
 8013812:	460b      	mov	r3, r1
 8013814:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	32ae      	adds	r2, #174	; 0xae
 8013820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d101      	bne.n	801382c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013828:	2303      	movs	r3, #3
 801382a:	e01c      	b.n	8013866 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013832:	b2db      	uxtb	r3, r3
 8013834:	2b03      	cmp	r3, #3
 8013836:	d115      	bne.n	8013864 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	32ae      	adds	r2, #174	; 0xae
 8013842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013848:	2b00      	cmp	r3, #0
 801384a:	d00b      	beq.n	8013864 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	32ae      	adds	r2, #174	; 0xae
 8013856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801385c:	78fa      	ldrb	r2, [r7, #3]
 801385e:	4611      	mov	r1, r2
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013864:	2300      	movs	r3, #0
}
 8013866:	4618      	mov	r0, r3
 8013868:	3708      	adds	r7, #8
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}

0801386e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801386e:	b480      	push	{r7}
 8013870:	b083      	sub	sp, #12
 8013872:	af00      	add	r7, sp, #0
 8013874:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013876:	2300      	movs	r3, #0
}
 8013878:	4618      	mov	r0, r3
 801387a:	370c      	adds	r7, #12
 801387c:	46bd      	mov	sp, r7
 801387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013882:	4770      	bx	lr

08013884 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b084      	sub	sp, #16
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801388c:	2300      	movs	r3, #0
 801388e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2201      	movs	r2, #1
 8013894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d00e      	beq.n	80138c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	6852      	ldr	r2, [r2, #4]
 80138ae:	b2d2      	uxtb	r2, r2
 80138b0:	4611      	mov	r1, r2
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	4798      	blx	r3
 80138b6:	4603      	mov	r3, r0
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d001      	beq.n	80138c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80138bc:	2303      	movs	r3, #3
 80138be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80138c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80138c2:	4618      	mov	r0, r3
 80138c4:	3710      	adds	r7, #16
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bd80      	pop	{r7, pc}

080138ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80138ca:	b480      	push	{r7}
 80138cc:	b083      	sub	sp, #12
 80138ce:	af00      	add	r7, sp, #0
 80138d0:	6078      	str	r0, [r7, #4]
 80138d2:	460b      	mov	r3, r1
 80138d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80138d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80138d8:	4618      	mov	r0, r3
 80138da:	370c      	adds	r7, #12
 80138dc:	46bd      	mov	sp, r7
 80138de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e2:	4770      	bx	lr

080138e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80138e4:	b480      	push	{r7}
 80138e6:	b083      	sub	sp, #12
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	460b      	mov	r3, r1
 80138ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80138f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	370c      	adds	r7, #12
 80138f6:	46bd      	mov	sp, r7
 80138f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fc:	4770      	bx	lr

080138fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80138fe:	b580      	push	{r7, lr}
 8013900:	b086      	sub	sp, #24
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
 8013906:	460b      	mov	r3, r1
 8013908:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013912:	2300      	movs	r3, #0
 8013914:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	885b      	ldrh	r3, [r3, #2]
 801391a:	b29a      	uxth	r2, r3
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	b29b      	uxth	r3, r3
 8013922:	429a      	cmp	r2, r3
 8013924:	d920      	bls.n	8013968 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	b29b      	uxth	r3, r3
 801392c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801392e:	e013      	b.n	8013958 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013930:	f107 030a 	add.w	r3, r7, #10
 8013934:	4619      	mov	r1, r3
 8013936:	6978      	ldr	r0, [r7, #20]
 8013938:	f000 f81b 	bl	8013972 <USBD_GetNextDesc>
 801393c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	785b      	ldrb	r3, [r3, #1]
 8013942:	2b05      	cmp	r3, #5
 8013944:	d108      	bne.n	8013958 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	789b      	ldrb	r3, [r3, #2]
 801394e:	78fa      	ldrb	r2, [r7, #3]
 8013950:	429a      	cmp	r2, r3
 8013952:	d008      	beq.n	8013966 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013954:	2300      	movs	r3, #0
 8013956:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	885b      	ldrh	r3, [r3, #2]
 801395c:	b29a      	uxth	r2, r3
 801395e:	897b      	ldrh	r3, [r7, #10]
 8013960:	429a      	cmp	r2, r3
 8013962:	d8e5      	bhi.n	8013930 <USBD_GetEpDesc+0x32>
 8013964:	e000      	b.n	8013968 <USBD_GetEpDesc+0x6a>
          break;
 8013966:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013968:	693b      	ldr	r3, [r7, #16]
}
 801396a:	4618      	mov	r0, r3
 801396c:	3718      	adds	r7, #24
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}

08013972 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013972:	b480      	push	{r7}
 8013974:	b085      	sub	sp, #20
 8013976:	af00      	add	r7, sp, #0
 8013978:	6078      	str	r0, [r7, #4]
 801397a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	881a      	ldrh	r2, [r3, #0]
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	b29b      	uxth	r3, r3
 801398a:	4413      	add	r3, r2
 801398c:	b29a      	uxth	r2, r3
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	781b      	ldrb	r3, [r3, #0]
 8013996:	461a      	mov	r2, r3
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	4413      	add	r3, r2
 801399c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801399e:	68fb      	ldr	r3, [r7, #12]
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3714      	adds	r7, #20
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr

080139ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b087      	sub	sp, #28
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	781b      	ldrb	r3, [r3, #0]
 80139bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	3301      	adds	r3, #1
 80139c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80139ca:	8a3b      	ldrh	r3, [r7, #16]
 80139cc:	021b      	lsls	r3, r3, #8
 80139ce:	b21a      	sxth	r2, r3
 80139d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80139d4:	4313      	orrs	r3, r2
 80139d6:	b21b      	sxth	r3, r3
 80139d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80139da:	89fb      	ldrh	r3, [r7, #14]
}
 80139dc:	4618      	mov	r0, r3
 80139de:	371c      	adds	r7, #28
 80139e0:	46bd      	mov	sp, r7
 80139e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e6:	4770      	bx	lr

080139e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b084      	sub	sp, #16
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
 80139f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80139f2:	2300      	movs	r3, #0
 80139f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80139fe:	2b40      	cmp	r3, #64	; 0x40
 8013a00:	d005      	beq.n	8013a0e <USBD_StdDevReq+0x26>
 8013a02:	2b40      	cmp	r3, #64	; 0x40
 8013a04:	d857      	bhi.n	8013ab6 <USBD_StdDevReq+0xce>
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d00f      	beq.n	8013a2a <USBD_StdDevReq+0x42>
 8013a0a:	2b20      	cmp	r3, #32
 8013a0c:	d153      	bne.n	8013ab6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	32ae      	adds	r2, #174	; 0xae
 8013a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a1c:	689b      	ldr	r3, [r3, #8]
 8013a1e:	6839      	ldr	r1, [r7, #0]
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	4798      	blx	r3
 8013a24:	4603      	mov	r3, r0
 8013a26:	73fb      	strb	r3, [r7, #15]
      break;
 8013a28:	e04a      	b.n	8013ac0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	785b      	ldrb	r3, [r3, #1]
 8013a2e:	2b09      	cmp	r3, #9
 8013a30:	d83b      	bhi.n	8013aaa <USBD_StdDevReq+0xc2>
 8013a32:	a201      	add	r2, pc, #4	; (adr r2, 8013a38 <USBD_StdDevReq+0x50>)
 8013a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a38:	08013a8d 	.word	0x08013a8d
 8013a3c:	08013aa1 	.word	0x08013aa1
 8013a40:	08013aab 	.word	0x08013aab
 8013a44:	08013a97 	.word	0x08013a97
 8013a48:	08013aab 	.word	0x08013aab
 8013a4c:	08013a6b 	.word	0x08013a6b
 8013a50:	08013a61 	.word	0x08013a61
 8013a54:	08013aab 	.word	0x08013aab
 8013a58:	08013a83 	.word	0x08013a83
 8013a5c:	08013a75 	.word	0x08013a75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013a60:	6839      	ldr	r1, [r7, #0]
 8013a62:	6878      	ldr	r0, [r7, #4]
 8013a64:	f000 fa3c 	bl	8013ee0 <USBD_GetDescriptor>
          break;
 8013a68:	e024      	b.n	8013ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013a6a:	6839      	ldr	r1, [r7, #0]
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f000 fba1 	bl	80141b4 <USBD_SetAddress>
          break;
 8013a72:	e01f      	b.n	8013ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013a74:	6839      	ldr	r1, [r7, #0]
 8013a76:	6878      	ldr	r0, [r7, #4]
 8013a78:	f000 fbe0 	bl	801423c <USBD_SetConfig>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	73fb      	strb	r3, [r7, #15]
          break;
 8013a80:	e018      	b.n	8013ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013a82:	6839      	ldr	r1, [r7, #0]
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f000 fc83 	bl	8014390 <USBD_GetConfig>
          break;
 8013a8a:	e013      	b.n	8013ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013a8c:	6839      	ldr	r1, [r7, #0]
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 fcb4 	bl	80143fc <USBD_GetStatus>
          break;
 8013a94:	e00e      	b.n	8013ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013a96:	6839      	ldr	r1, [r7, #0]
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f000 fce3 	bl	8014464 <USBD_SetFeature>
          break;
 8013a9e:	e009      	b.n	8013ab4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013aa0:	6839      	ldr	r1, [r7, #0]
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	f000 fd07 	bl	80144b6 <USBD_ClrFeature>
          break;
 8013aa8:	e004      	b.n	8013ab4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013aaa:	6839      	ldr	r1, [r7, #0]
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f000 fd5e 	bl	801456e <USBD_CtlError>
          break;
 8013ab2:	bf00      	nop
      }
      break;
 8013ab4:	e004      	b.n	8013ac0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013ab6:	6839      	ldr	r1, [r7, #0]
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f000 fd58 	bl	801456e <USBD_CtlError>
      break;
 8013abe:	bf00      	nop
  }

  return ret;
 8013ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3710      	adds	r7, #16
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}
 8013aca:	bf00      	nop

08013acc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b084      	sub	sp, #16
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	781b      	ldrb	r3, [r3, #0]
 8013ade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013ae2:	2b40      	cmp	r3, #64	; 0x40
 8013ae4:	d005      	beq.n	8013af2 <USBD_StdItfReq+0x26>
 8013ae6:	2b40      	cmp	r3, #64	; 0x40
 8013ae8:	d852      	bhi.n	8013b90 <USBD_StdItfReq+0xc4>
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d001      	beq.n	8013af2 <USBD_StdItfReq+0x26>
 8013aee:	2b20      	cmp	r3, #32
 8013af0:	d14e      	bne.n	8013b90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013af8:	b2db      	uxtb	r3, r3
 8013afa:	3b01      	subs	r3, #1
 8013afc:	2b02      	cmp	r3, #2
 8013afe:	d840      	bhi.n	8013b82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	889b      	ldrh	r3, [r3, #4]
 8013b04:	b2db      	uxtb	r3, r3
 8013b06:	2b01      	cmp	r3, #1
 8013b08:	d836      	bhi.n	8013b78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	889b      	ldrh	r3, [r3, #4]
 8013b0e:	b2db      	uxtb	r3, r3
 8013b10:	4619      	mov	r1, r3
 8013b12:	6878      	ldr	r0, [r7, #4]
 8013b14:	f7ff fed9 	bl	80138ca <USBD_CoreFindIF>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013b1c:	7bbb      	ldrb	r3, [r7, #14]
 8013b1e:	2bff      	cmp	r3, #255	; 0xff
 8013b20:	d01d      	beq.n	8013b5e <USBD_StdItfReq+0x92>
 8013b22:	7bbb      	ldrb	r3, [r7, #14]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d11a      	bne.n	8013b5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013b28:	7bba      	ldrb	r2, [r7, #14]
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	32ae      	adds	r2, #174	; 0xae
 8013b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b32:	689b      	ldr	r3, [r3, #8]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d00f      	beq.n	8013b58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013b38:	7bba      	ldrb	r2, [r7, #14]
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013b40:	7bba      	ldrb	r2, [r7, #14]
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	32ae      	adds	r2, #174	; 0xae
 8013b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b4a:	689b      	ldr	r3, [r3, #8]
 8013b4c:	6839      	ldr	r1, [r7, #0]
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	4798      	blx	r3
 8013b52:	4603      	mov	r3, r0
 8013b54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013b56:	e004      	b.n	8013b62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013b58:	2303      	movs	r3, #3
 8013b5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013b5c:	e001      	b.n	8013b62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013b5e:	2303      	movs	r3, #3
 8013b60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	88db      	ldrh	r3, [r3, #6]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d110      	bne.n	8013b8c <USBD_StdItfReq+0xc0>
 8013b6a:	7bfb      	ldrb	r3, [r7, #15]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d10d      	bne.n	8013b8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f000 fdc7 	bl	8014704 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013b76:	e009      	b.n	8013b8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013b78:	6839      	ldr	r1, [r7, #0]
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f000 fcf7 	bl	801456e <USBD_CtlError>
          break;
 8013b80:	e004      	b.n	8013b8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013b82:	6839      	ldr	r1, [r7, #0]
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f000 fcf2 	bl	801456e <USBD_CtlError>
          break;
 8013b8a:	e000      	b.n	8013b8e <USBD_StdItfReq+0xc2>
          break;
 8013b8c:	bf00      	nop
      }
      break;
 8013b8e:	e004      	b.n	8013b9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013b90:	6839      	ldr	r1, [r7, #0]
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f000 fceb 	bl	801456e <USBD_CtlError>
      break;
 8013b98:	bf00      	nop
  }

  return ret;
 8013b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	3710      	adds	r7, #16
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b084      	sub	sp, #16
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	889b      	ldrh	r3, [r3, #4]
 8013bb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013bc0:	2b40      	cmp	r3, #64	; 0x40
 8013bc2:	d007      	beq.n	8013bd4 <USBD_StdEPReq+0x30>
 8013bc4:	2b40      	cmp	r3, #64	; 0x40
 8013bc6:	f200 817f 	bhi.w	8013ec8 <USBD_StdEPReq+0x324>
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d02a      	beq.n	8013c24 <USBD_StdEPReq+0x80>
 8013bce:	2b20      	cmp	r3, #32
 8013bd0:	f040 817a 	bne.w	8013ec8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013bd4:	7bbb      	ldrb	r3, [r7, #14]
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f7ff fe83 	bl	80138e4 <USBD_CoreFindEP>
 8013bde:	4603      	mov	r3, r0
 8013be0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013be2:	7b7b      	ldrb	r3, [r7, #13]
 8013be4:	2bff      	cmp	r3, #255	; 0xff
 8013be6:	f000 8174 	beq.w	8013ed2 <USBD_StdEPReq+0x32e>
 8013bea:	7b7b      	ldrb	r3, [r7, #13]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	f040 8170 	bne.w	8013ed2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013bf2:	7b7a      	ldrb	r2, [r7, #13]
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013bfa:	7b7a      	ldrb	r2, [r7, #13]
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	32ae      	adds	r2, #174	; 0xae
 8013c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c04:	689b      	ldr	r3, [r3, #8]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	f000 8163 	beq.w	8013ed2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013c0c:	7b7a      	ldrb	r2, [r7, #13]
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	32ae      	adds	r2, #174	; 0xae
 8013c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c16:	689b      	ldr	r3, [r3, #8]
 8013c18:	6839      	ldr	r1, [r7, #0]
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	4798      	blx	r3
 8013c1e:	4603      	mov	r3, r0
 8013c20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013c22:	e156      	b.n	8013ed2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	785b      	ldrb	r3, [r3, #1]
 8013c28:	2b03      	cmp	r3, #3
 8013c2a:	d008      	beq.n	8013c3e <USBD_StdEPReq+0x9a>
 8013c2c:	2b03      	cmp	r3, #3
 8013c2e:	f300 8145 	bgt.w	8013ebc <USBD_StdEPReq+0x318>
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	f000 809b 	beq.w	8013d6e <USBD_StdEPReq+0x1ca>
 8013c38:	2b01      	cmp	r3, #1
 8013c3a:	d03c      	beq.n	8013cb6 <USBD_StdEPReq+0x112>
 8013c3c:	e13e      	b.n	8013ebc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c44:	b2db      	uxtb	r3, r3
 8013c46:	2b02      	cmp	r3, #2
 8013c48:	d002      	beq.n	8013c50 <USBD_StdEPReq+0xac>
 8013c4a:	2b03      	cmp	r3, #3
 8013c4c:	d016      	beq.n	8013c7c <USBD_StdEPReq+0xd8>
 8013c4e:	e02c      	b.n	8013caa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013c50:	7bbb      	ldrb	r3, [r7, #14]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d00d      	beq.n	8013c72 <USBD_StdEPReq+0xce>
 8013c56:	7bbb      	ldrb	r3, [r7, #14]
 8013c58:	2b80      	cmp	r3, #128	; 0x80
 8013c5a:	d00a      	beq.n	8013c72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013c5c:	7bbb      	ldrb	r3, [r7, #14]
 8013c5e:	4619      	mov	r1, r3
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f004 f94d 	bl	8017f00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013c66:	2180      	movs	r1, #128	; 0x80
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f004 f949 	bl	8017f00 <USBD_LL_StallEP>
 8013c6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013c70:	e020      	b.n	8013cb4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013c72:	6839      	ldr	r1, [r7, #0]
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f000 fc7a 	bl	801456e <USBD_CtlError>
              break;
 8013c7a:	e01b      	b.n	8013cb4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	885b      	ldrh	r3, [r3, #2]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d10e      	bne.n	8013ca2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013c84:	7bbb      	ldrb	r3, [r7, #14]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d00b      	beq.n	8013ca2 <USBD_StdEPReq+0xfe>
 8013c8a:	7bbb      	ldrb	r3, [r7, #14]
 8013c8c:	2b80      	cmp	r3, #128	; 0x80
 8013c8e:	d008      	beq.n	8013ca2 <USBD_StdEPReq+0xfe>
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	88db      	ldrh	r3, [r3, #6]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d104      	bne.n	8013ca2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013c98:	7bbb      	ldrb	r3, [r7, #14]
 8013c9a:	4619      	mov	r1, r3
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f004 f92f 	bl	8017f00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fd2e 	bl	8014704 <USBD_CtlSendStatus>

              break;
 8013ca8:	e004      	b.n	8013cb4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013caa:	6839      	ldr	r1, [r7, #0]
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f000 fc5e 	bl	801456e <USBD_CtlError>
              break;
 8013cb2:	bf00      	nop
          }
          break;
 8013cb4:	e107      	b.n	8013ec6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	2b02      	cmp	r3, #2
 8013cc0:	d002      	beq.n	8013cc8 <USBD_StdEPReq+0x124>
 8013cc2:	2b03      	cmp	r3, #3
 8013cc4:	d016      	beq.n	8013cf4 <USBD_StdEPReq+0x150>
 8013cc6:	e04b      	b.n	8013d60 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013cc8:	7bbb      	ldrb	r3, [r7, #14]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d00d      	beq.n	8013cea <USBD_StdEPReq+0x146>
 8013cce:	7bbb      	ldrb	r3, [r7, #14]
 8013cd0:	2b80      	cmp	r3, #128	; 0x80
 8013cd2:	d00a      	beq.n	8013cea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013cd4:	7bbb      	ldrb	r3, [r7, #14]
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f004 f911 	bl	8017f00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013cde:	2180      	movs	r1, #128	; 0x80
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f004 f90d 	bl	8017f00 <USBD_LL_StallEP>
 8013ce6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ce8:	e040      	b.n	8013d6c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013cea:	6839      	ldr	r1, [r7, #0]
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f000 fc3e 	bl	801456e <USBD_CtlError>
              break;
 8013cf2:	e03b      	b.n	8013d6c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	885b      	ldrh	r3, [r3, #2]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d136      	bne.n	8013d6a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013cfc:	7bbb      	ldrb	r3, [r7, #14]
 8013cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d004      	beq.n	8013d10 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013d06:	7bbb      	ldrb	r3, [r7, #14]
 8013d08:	4619      	mov	r1, r3
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f004 f917 	bl	8017f3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f000 fcf7 	bl	8014704 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013d16:	7bbb      	ldrb	r3, [r7, #14]
 8013d18:	4619      	mov	r1, r3
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f7ff fde2 	bl	80138e4 <USBD_CoreFindEP>
 8013d20:	4603      	mov	r3, r0
 8013d22:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013d24:	7b7b      	ldrb	r3, [r7, #13]
 8013d26:	2bff      	cmp	r3, #255	; 0xff
 8013d28:	d01f      	beq.n	8013d6a <USBD_StdEPReq+0x1c6>
 8013d2a:	7b7b      	ldrb	r3, [r7, #13]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d11c      	bne.n	8013d6a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013d30:	7b7a      	ldrb	r2, [r7, #13]
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013d38:	7b7a      	ldrb	r2, [r7, #13]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	32ae      	adds	r2, #174	; 0xae
 8013d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d42:	689b      	ldr	r3, [r3, #8]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d010      	beq.n	8013d6a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013d48:	7b7a      	ldrb	r2, [r7, #13]
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	32ae      	adds	r2, #174	; 0xae
 8013d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d52:	689b      	ldr	r3, [r3, #8]
 8013d54:	6839      	ldr	r1, [r7, #0]
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	4798      	blx	r3
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013d5e:	e004      	b.n	8013d6a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013d60:	6839      	ldr	r1, [r7, #0]
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f000 fc03 	bl	801456e <USBD_CtlError>
              break;
 8013d68:	e000      	b.n	8013d6c <USBD_StdEPReq+0x1c8>
              break;
 8013d6a:	bf00      	nop
          }
          break;
 8013d6c:	e0ab      	b.n	8013ec6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	2b02      	cmp	r3, #2
 8013d78:	d002      	beq.n	8013d80 <USBD_StdEPReq+0x1dc>
 8013d7a:	2b03      	cmp	r3, #3
 8013d7c:	d032      	beq.n	8013de4 <USBD_StdEPReq+0x240>
 8013d7e:	e097      	b.n	8013eb0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013d80:	7bbb      	ldrb	r3, [r7, #14]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d007      	beq.n	8013d96 <USBD_StdEPReq+0x1f2>
 8013d86:	7bbb      	ldrb	r3, [r7, #14]
 8013d88:	2b80      	cmp	r3, #128	; 0x80
 8013d8a:	d004      	beq.n	8013d96 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013d8c:	6839      	ldr	r1, [r7, #0]
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f000 fbed 	bl	801456e <USBD_CtlError>
                break;
 8013d94:	e091      	b.n	8013eba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	da0b      	bge.n	8013db6 <USBD_StdEPReq+0x212>
 8013d9e:	7bbb      	ldrb	r3, [r7, #14]
 8013da0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013da4:	4613      	mov	r3, r2
 8013da6:	009b      	lsls	r3, r3, #2
 8013da8:	4413      	add	r3, r2
 8013daa:	009b      	lsls	r3, r3, #2
 8013dac:	3310      	adds	r3, #16
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	4413      	add	r3, r2
 8013db2:	3304      	adds	r3, #4
 8013db4:	e00b      	b.n	8013dce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013db6:	7bbb      	ldrb	r3, [r7, #14]
 8013db8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013dbc:	4613      	mov	r3, r2
 8013dbe:	009b      	lsls	r3, r3, #2
 8013dc0:	4413      	add	r3, r2
 8013dc2:	009b      	lsls	r3, r3, #2
 8013dc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	4413      	add	r3, r2
 8013dcc:	3304      	adds	r3, #4
 8013dce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013dd6:	68bb      	ldr	r3, [r7, #8]
 8013dd8:	2202      	movs	r2, #2
 8013dda:	4619      	mov	r1, r3
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f000 fc37 	bl	8014650 <USBD_CtlSendData>
              break;
 8013de2:	e06a      	b.n	8013eba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	da11      	bge.n	8013e10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013dec:	7bbb      	ldrb	r3, [r7, #14]
 8013dee:	f003 020f 	and.w	r2, r3, #15
 8013df2:	6879      	ldr	r1, [r7, #4]
 8013df4:	4613      	mov	r3, r2
 8013df6:	009b      	lsls	r3, r3, #2
 8013df8:	4413      	add	r3, r2
 8013dfa:	009b      	lsls	r3, r3, #2
 8013dfc:	440b      	add	r3, r1
 8013dfe:	3324      	adds	r3, #36	; 0x24
 8013e00:	881b      	ldrh	r3, [r3, #0]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d117      	bne.n	8013e36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013e06:	6839      	ldr	r1, [r7, #0]
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f000 fbb0 	bl	801456e <USBD_CtlError>
                  break;
 8013e0e:	e054      	b.n	8013eba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013e10:	7bbb      	ldrb	r3, [r7, #14]
 8013e12:	f003 020f 	and.w	r2, r3, #15
 8013e16:	6879      	ldr	r1, [r7, #4]
 8013e18:	4613      	mov	r3, r2
 8013e1a:	009b      	lsls	r3, r3, #2
 8013e1c:	4413      	add	r3, r2
 8013e1e:	009b      	lsls	r3, r3, #2
 8013e20:	440b      	add	r3, r1
 8013e22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013e26:	881b      	ldrh	r3, [r3, #0]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d104      	bne.n	8013e36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013e2c:	6839      	ldr	r1, [r7, #0]
 8013e2e:	6878      	ldr	r0, [r7, #4]
 8013e30:	f000 fb9d 	bl	801456e <USBD_CtlError>
                  break;
 8013e34:	e041      	b.n	8013eba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	da0b      	bge.n	8013e56 <USBD_StdEPReq+0x2b2>
 8013e3e:	7bbb      	ldrb	r3, [r7, #14]
 8013e40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e44:	4613      	mov	r3, r2
 8013e46:	009b      	lsls	r3, r3, #2
 8013e48:	4413      	add	r3, r2
 8013e4a:	009b      	lsls	r3, r3, #2
 8013e4c:	3310      	adds	r3, #16
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	4413      	add	r3, r2
 8013e52:	3304      	adds	r3, #4
 8013e54:	e00b      	b.n	8013e6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013e56:	7bbb      	ldrb	r3, [r7, #14]
 8013e58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013e5c:	4613      	mov	r3, r2
 8013e5e:	009b      	lsls	r3, r3, #2
 8013e60:	4413      	add	r3, r2
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	4413      	add	r3, r2
 8013e6c:	3304      	adds	r3, #4
 8013e6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013e70:	7bbb      	ldrb	r3, [r7, #14]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d002      	beq.n	8013e7c <USBD_StdEPReq+0x2d8>
 8013e76:	7bbb      	ldrb	r3, [r7, #14]
 8013e78:	2b80      	cmp	r3, #128	; 0x80
 8013e7a:	d103      	bne.n	8013e84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013e7c:	68bb      	ldr	r3, [r7, #8]
 8013e7e:	2200      	movs	r2, #0
 8013e80:	601a      	str	r2, [r3, #0]
 8013e82:	e00e      	b.n	8013ea2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013e84:	7bbb      	ldrb	r3, [r7, #14]
 8013e86:	4619      	mov	r1, r3
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f004 f877 	bl	8017f7c <USBD_LL_IsStallEP>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d003      	beq.n	8013e9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	2201      	movs	r2, #1
 8013e98:	601a      	str	r2, [r3, #0]
 8013e9a:	e002      	b.n	8013ea2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	2202      	movs	r2, #2
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f000 fbd1 	bl	8014650 <USBD_CtlSendData>
              break;
 8013eae:	e004      	b.n	8013eba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013eb0:	6839      	ldr	r1, [r7, #0]
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f000 fb5b 	bl	801456e <USBD_CtlError>
              break;
 8013eb8:	bf00      	nop
          }
          break;
 8013eba:	e004      	b.n	8013ec6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013ebc:	6839      	ldr	r1, [r7, #0]
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f000 fb55 	bl	801456e <USBD_CtlError>
          break;
 8013ec4:	bf00      	nop
      }
      break;
 8013ec6:	e005      	b.n	8013ed4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013ec8:	6839      	ldr	r1, [r7, #0]
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 fb4f 	bl	801456e <USBD_CtlError>
      break;
 8013ed0:	e000      	b.n	8013ed4 <USBD_StdEPReq+0x330>
      break;
 8013ed2:	bf00      	nop
  }

  return ret;
 8013ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3710      	adds	r7, #16
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
	...

08013ee0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013eea:	2300      	movs	r3, #0
 8013eec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	885b      	ldrh	r3, [r3, #2]
 8013efa:	0a1b      	lsrs	r3, r3, #8
 8013efc:	b29b      	uxth	r3, r3
 8013efe:	3b01      	subs	r3, #1
 8013f00:	2b06      	cmp	r3, #6
 8013f02:	f200 8128 	bhi.w	8014156 <USBD_GetDescriptor+0x276>
 8013f06:	a201      	add	r2, pc, #4	; (adr r2, 8013f0c <USBD_GetDescriptor+0x2c>)
 8013f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f0c:	08013f29 	.word	0x08013f29
 8013f10:	08013f41 	.word	0x08013f41
 8013f14:	08013f81 	.word	0x08013f81
 8013f18:	08014157 	.word	0x08014157
 8013f1c:	08014157 	.word	0x08014157
 8013f20:	080140f7 	.word	0x080140f7
 8013f24:	08014123 	.word	0x08014123
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	687a      	ldr	r2, [r7, #4]
 8013f32:	7c12      	ldrb	r2, [r2, #16]
 8013f34:	f107 0108 	add.w	r1, r7, #8
 8013f38:	4610      	mov	r0, r2
 8013f3a:	4798      	blx	r3
 8013f3c:	60f8      	str	r0, [r7, #12]
      break;
 8013f3e:	e112      	b.n	8014166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	7c1b      	ldrb	r3, [r3, #16]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d10d      	bne.n	8013f64 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f50:	f107 0208 	add.w	r2, r7, #8
 8013f54:	4610      	mov	r0, r2
 8013f56:	4798      	blx	r3
 8013f58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	2202      	movs	r2, #2
 8013f60:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013f62:	e100      	b.n	8014166 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f6c:	f107 0208 	add.w	r2, r7, #8
 8013f70:	4610      	mov	r0, r2
 8013f72:	4798      	blx	r3
 8013f74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	3301      	adds	r3, #1
 8013f7a:	2202      	movs	r2, #2
 8013f7c:	701a      	strb	r2, [r3, #0]
      break;
 8013f7e:	e0f2      	b.n	8014166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	885b      	ldrh	r3, [r3, #2]
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	2b05      	cmp	r3, #5
 8013f88:	f200 80ac 	bhi.w	80140e4 <USBD_GetDescriptor+0x204>
 8013f8c:	a201      	add	r2, pc, #4	; (adr r2, 8013f94 <USBD_GetDescriptor+0xb4>)
 8013f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f92:	bf00      	nop
 8013f94:	08013fad 	.word	0x08013fad
 8013f98:	08013fe1 	.word	0x08013fe1
 8013f9c:	08014015 	.word	0x08014015
 8013fa0:	08014049 	.word	0x08014049
 8013fa4:	0801407d 	.word	0x0801407d
 8013fa8:	080140b1 	.word	0x080140b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fb2:	685b      	ldr	r3, [r3, #4]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d00b      	beq.n	8013fd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	687a      	ldr	r2, [r7, #4]
 8013fc2:	7c12      	ldrb	r2, [r2, #16]
 8013fc4:	f107 0108 	add.w	r1, r7, #8
 8013fc8:	4610      	mov	r0, r2
 8013fca:	4798      	blx	r3
 8013fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013fce:	e091      	b.n	80140f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013fd0:	6839      	ldr	r1, [r7, #0]
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f000 facb 	bl	801456e <USBD_CtlError>
            err++;
 8013fd8:	7afb      	ldrb	r3, [r7, #11]
 8013fda:	3301      	adds	r3, #1
 8013fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8013fde:	e089      	b.n	80140f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fe6:	689b      	ldr	r3, [r3, #8]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d00b      	beq.n	8014004 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ff2:	689b      	ldr	r3, [r3, #8]
 8013ff4:	687a      	ldr	r2, [r7, #4]
 8013ff6:	7c12      	ldrb	r2, [r2, #16]
 8013ff8:	f107 0108 	add.w	r1, r7, #8
 8013ffc:	4610      	mov	r0, r2
 8013ffe:	4798      	blx	r3
 8014000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014002:	e077      	b.n	80140f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014004:	6839      	ldr	r1, [r7, #0]
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f000 fab1 	bl	801456e <USBD_CtlError>
            err++;
 801400c:	7afb      	ldrb	r3, [r7, #11]
 801400e:	3301      	adds	r3, #1
 8014010:	72fb      	strb	r3, [r7, #11]
          break;
 8014012:	e06f      	b.n	80140f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801401a:	68db      	ldr	r3, [r3, #12]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d00b      	beq.n	8014038 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	7c12      	ldrb	r2, [r2, #16]
 801402c:	f107 0108 	add.w	r1, r7, #8
 8014030:	4610      	mov	r0, r2
 8014032:	4798      	blx	r3
 8014034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014036:	e05d      	b.n	80140f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014038:	6839      	ldr	r1, [r7, #0]
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f000 fa97 	bl	801456e <USBD_CtlError>
            err++;
 8014040:	7afb      	ldrb	r3, [r7, #11]
 8014042:	3301      	adds	r3, #1
 8014044:	72fb      	strb	r3, [r7, #11]
          break;
 8014046:	e055      	b.n	80140f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801404e:	691b      	ldr	r3, [r3, #16]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d00b      	beq.n	801406c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801405a:	691b      	ldr	r3, [r3, #16]
 801405c:	687a      	ldr	r2, [r7, #4]
 801405e:	7c12      	ldrb	r2, [r2, #16]
 8014060:	f107 0108 	add.w	r1, r7, #8
 8014064:	4610      	mov	r0, r2
 8014066:	4798      	blx	r3
 8014068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801406a:	e043      	b.n	80140f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801406c:	6839      	ldr	r1, [r7, #0]
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	f000 fa7d 	bl	801456e <USBD_CtlError>
            err++;
 8014074:	7afb      	ldrb	r3, [r7, #11]
 8014076:	3301      	adds	r3, #1
 8014078:	72fb      	strb	r3, [r7, #11]
          break;
 801407a:	e03b      	b.n	80140f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014082:	695b      	ldr	r3, [r3, #20]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d00b      	beq.n	80140a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801408e:	695b      	ldr	r3, [r3, #20]
 8014090:	687a      	ldr	r2, [r7, #4]
 8014092:	7c12      	ldrb	r2, [r2, #16]
 8014094:	f107 0108 	add.w	r1, r7, #8
 8014098:	4610      	mov	r0, r2
 801409a:	4798      	blx	r3
 801409c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801409e:	e029      	b.n	80140f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80140a0:	6839      	ldr	r1, [r7, #0]
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f000 fa63 	bl	801456e <USBD_CtlError>
            err++;
 80140a8:	7afb      	ldrb	r3, [r7, #11]
 80140aa:	3301      	adds	r3, #1
 80140ac:	72fb      	strb	r3, [r7, #11]
          break;
 80140ae:	e021      	b.n	80140f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140b6:	699b      	ldr	r3, [r3, #24]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d00b      	beq.n	80140d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140c2:	699b      	ldr	r3, [r3, #24]
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	7c12      	ldrb	r2, [r2, #16]
 80140c8:	f107 0108 	add.w	r1, r7, #8
 80140cc:	4610      	mov	r0, r2
 80140ce:	4798      	blx	r3
 80140d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80140d2:	e00f      	b.n	80140f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80140d4:	6839      	ldr	r1, [r7, #0]
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f000 fa49 	bl	801456e <USBD_CtlError>
            err++;
 80140dc:	7afb      	ldrb	r3, [r7, #11]
 80140de:	3301      	adds	r3, #1
 80140e0:	72fb      	strb	r3, [r7, #11]
          break;
 80140e2:	e007      	b.n	80140f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80140e4:	6839      	ldr	r1, [r7, #0]
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f000 fa41 	bl	801456e <USBD_CtlError>
          err++;
 80140ec:	7afb      	ldrb	r3, [r7, #11]
 80140ee:	3301      	adds	r3, #1
 80140f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80140f2:	bf00      	nop
      }
      break;
 80140f4:	e037      	b.n	8014166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	7c1b      	ldrb	r3, [r3, #16]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d109      	bne.n	8014112 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014106:	f107 0208 	add.w	r2, r7, #8
 801410a:	4610      	mov	r0, r2
 801410c:	4798      	blx	r3
 801410e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014110:	e029      	b.n	8014166 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014112:	6839      	ldr	r1, [r7, #0]
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f000 fa2a 	bl	801456e <USBD_CtlError>
        err++;
 801411a:	7afb      	ldrb	r3, [r7, #11]
 801411c:	3301      	adds	r3, #1
 801411e:	72fb      	strb	r3, [r7, #11]
      break;
 8014120:	e021      	b.n	8014166 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	7c1b      	ldrb	r3, [r3, #16]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d10d      	bne.n	8014146 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014132:	f107 0208 	add.w	r2, r7, #8
 8014136:	4610      	mov	r0, r2
 8014138:	4798      	blx	r3
 801413a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	3301      	adds	r3, #1
 8014140:	2207      	movs	r2, #7
 8014142:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014144:	e00f      	b.n	8014166 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014146:	6839      	ldr	r1, [r7, #0]
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f000 fa10 	bl	801456e <USBD_CtlError>
        err++;
 801414e:	7afb      	ldrb	r3, [r7, #11]
 8014150:	3301      	adds	r3, #1
 8014152:	72fb      	strb	r3, [r7, #11]
      break;
 8014154:	e007      	b.n	8014166 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014156:	6839      	ldr	r1, [r7, #0]
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f000 fa08 	bl	801456e <USBD_CtlError>
      err++;
 801415e:	7afb      	ldrb	r3, [r7, #11]
 8014160:	3301      	adds	r3, #1
 8014162:	72fb      	strb	r3, [r7, #11]
      break;
 8014164:	bf00      	nop
  }

  if (err != 0U)
 8014166:	7afb      	ldrb	r3, [r7, #11]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d11e      	bne.n	80141aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	88db      	ldrh	r3, [r3, #6]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d016      	beq.n	80141a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014174:	893b      	ldrh	r3, [r7, #8]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d00e      	beq.n	8014198 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	88da      	ldrh	r2, [r3, #6]
 801417e:	893b      	ldrh	r3, [r7, #8]
 8014180:	4293      	cmp	r3, r2
 8014182:	bf28      	it	cs
 8014184:	4613      	movcs	r3, r2
 8014186:	b29b      	uxth	r3, r3
 8014188:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801418a:	893b      	ldrh	r3, [r7, #8]
 801418c:	461a      	mov	r2, r3
 801418e:	68f9      	ldr	r1, [r7, #12]
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f000 fa5d 	bl	8014650 <USBD_CtlSendData>
 8014196:	e009      	b.n	80141ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014198:	6839      	ldr	r1, [r7, #0]
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f000 f9e7 	bl	801456e <USBD_CtlError>
 80141a0:	e004      	b.n	80141ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f000 faae 	bl	8014704 <USBD_CtlSendStatus>
 80141a8:	e000      	b.n	80141ac <USBD_GetDescriptor+0x2cc>
    return;
 80141aa:	bf00      	nop
  }
}
 80141ac:	3710      	adds	r7, #16
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
 80141b2:	bf00      	nop

080141b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b084      	sub	sp, #16
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
 80141bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	889b      	ldrh	r3, [r3, #4]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d131      	bne.n	801422a <USBD_SetAddress+0x76>
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	88db      	ldrh	r3, [r3, #6]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d12d      	bne.n	801422a <USBD_SetAddress+0x76>
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	885b      	ldrh	r3, [r3, #2]
 80141d2:	2b7f      	cmp	r3, #127	; 0x7f
 80141d4:	d829      	bhi.n	801422a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	885b      	ldrh	r3, [r3, #2]
 80141da:	b2db      	uxtb	r3, r3
 80141dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80141e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141e8:	b2db      	uxtb	r3, r3
 80141ea:	2b03      	cmp	r3, #3
 80141ec:	d104      	bne.n	80141f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80141ee:	6839      	ldr	r1, [r7, #0]
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f000 f9bc 	bl	801456e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141f6:	e01d      	b.n	8014234 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	7bfa      	ldrb	r2, [r7, #15]
 80141fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014200:	7bfb      	ldrb	r3, [r7, #15]
 8014202:	4619      	mov	r1, r3
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f003 fee5 	bl	8017fd4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f000 fa7a 	bl	8014704 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014210:	7bfb      	ldrb	r3, [r7, #15]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d004      	beq.n	8014220 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	2202      	movs	r2, #2
 801421a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801421e:	e009      	b.n	8014234 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2201      	movs	r2, #1
 8014224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014228:	e004      	b.n	8014234 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801422a:	6839      	ldr	r1, [r7, #0]
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f000 f99e 	bl	801456e <USBD_CtlError>
  }
}
 8014232:	bf00      	nop
 8014234:	bf00      	nop
 8014236:	3710      	adds	r7, #16
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}

0801423c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014246:	2300      	movs	r3, #0
 8014248:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801424a:	683b      	ldr	r3, [r7, #0]
 801424c:	885b      	ldrh	r3, [r3, #2]
 801424e:	b2da      	uxtb	r2, r3
 8014250:	4b4e      	ldr	r3, [pc, #312]	; (801438c <USBD_SetConfig+0x150>)
 8014252:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014254:	4b4d      	ldr	r3, [pc, #308]	; (801438c <USBD_SetConfig+0x150>)
 8014256:	781b      	ldrb	r3, [r3, #0]
 8014258:	2b01      	cmp	r3, #1
 801425a:	d905      	bls.n	8014268 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801425c:	6839      	ldr	r1, [r7, #0]
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f000 f985 	bl	801456e <USBD_CtlError>
    return USBD_FAIL;
 8014264:	2303      	movs	r3, #3
 8014266:	e08c      	b.n	8014382 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801426e:	b2db      	uxtb	r3, r3
 8014270:	2b02      	cmp	r3, #2
 8014272:	d002      	beq.n	801427a <USBD_SetConfig+0x3e>
 8014274:	2b03      	cmp	r3, #3
 8014276:	d029      	beq.n	80142cc <USBD_SetConfig+0x90>
 8014278:	e075      	b.n	8014366 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801427a:	4b44      	ldr	r3, [pc, #272]	; (801438c <USBD_SetConfig+0x150>)
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d020      	beq.n	80142c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014282:	4b42      	ldr	r3, [pc, #264]	; (801438c <USBD_SetConfig+0x150>)
 8014284:	781b      	ldrb	r3, [r3, #0]
 8014286:	461a      	mov	r2, r3
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801428c:	4b3f      	ldr	r3, [pc, #252]	; (801438c <USBD_SetConfig+0x150>)
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	4619      	mov	r1, r3
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f7fe ffe1 	bl	801325a <USBD_SetClassConfig>
 8014298:	4603      	mov	r3, r0
 801429a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801429c:	7bfb      	ldrb	r3, [r7, #15]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d008      	beq.n	80142b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80142a2:	6839      	ldr	r1, [r7, #0]
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f000 f962 	bl	801456e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2202      	movs	r2, #2
 80142ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80142b2:	e065      	b.n	8014380 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f000 fa25 	bl	8014704 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2203      	movs	r2, #3
 80142be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80142c2:	e05d      	b.n	8014380 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f000 fa1d 	bl	8014704 <USBD_CtlSendStatus>
      break;
 80142ca:	e059      	b.n	8014380 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80142cc:	4b2f      	ldr	r3, [pc, #188]	; (801438c <USBD_SetConfig+0x150>)
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d112      	bne.n	80142fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2202      	movs	r2, #2
 80142d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80142dc:	4b2b      	ldr	r3, [pc, #172]	; (801438c <USBD_SetConfig+0x150>)
 80142de:	781b      	ldrb	r3, [r3, #0]
 80142e0:	461a      	mov	r2, r3
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80142e6:	4b29      	ldr	r3, [pc, #164]	; (801438c <USBD_SetConfig+0x150>)
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	4619      	mov	r1, r3
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f7fe ffd0 	bl	8013292 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f000 fa06 	bl	8014704 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80142f8:	e042      	b.n	8014380 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80142fa:	4b24      	ldr	r3, [pc, #144]	; (801438c <USBD_SetConfig+0x150>)
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	461a      	mov	r2, r3
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	685b      	ldr	r3, [r3, #4]
 8014304:	429a      	cmp	r2, r3
 8014306:	d02a      	beq.n	801435e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	685b      	ldr	r3, [r3, #4]
 801430c:	b2db      	uxtb	r3, r3
 801430e:	4619      	mov	r1, r3
 8014310:	6878      	ldr	r0, [r7, #4]
 8014312:	f7fe ffbe 	bl	8013292 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014316:	4b1d      	ldr	r3, [pc, #116]	; (801438c <USBD_SetConfig+0x150>)
 8014318:	781b      	ldrb	r3, [r3, #0]
 801431a:	461a      	mov	r2, r3
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014320:	4b1a      	ldr	r3, [pc, #104]	; (801438c <USBD_SetConfig+0x150>)
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	4619      	mov	r1, r3
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f7fe ff97 	bl	801325a <USBD_SetClassConfig>
 801432c:	4603      	mov	r3, r0
 801432e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014330:	7bfb      	ldrb	r3, [r7, #15]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d00f      	beq.n	8014356 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014336:	6839      	ldr	r1, [r7, #0]
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f000 f918 	bl	801456e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	685b      	ldr	r3, [r3, #4]
 8014342:	b2db      	uxtb	r3, r3
 8014344:	4619      	mov	r1, r3
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f7fe ffa3 	bl	8013292 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2202      	movs	r2, #2
 8014350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014354:	e014      	b.n	8014380 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f000 f9d4 	bl	8014704 <USBD_CtlSendStatus>
      break;
 801435c:	e010      	b.n	8014380 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f000 f9d0 	bl	8014704 <USBD_CtlSendStatus>
      break;
 8014364:	e00c      	b.n	8014380 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014366:	6839      	ldr	r1, [r7, #0]
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f000 f900 	bl	801456e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801436e:	4b07      	ldr	r3, [pc, #28]	; (801438c <USBD_SetConfig+0x150>)
 8014370:	781b      	ldrb	r3, [r3, #0]
 8014372:	4619      	mov	r1, r3
 8014374:	6878      	ldr	r0, [r7, #4]
 8014376:	f7fe ff8c 	bl	8013292 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801437a:	2303      	movs	r3, #3
 801437c:	73fb      	strb	r3, [r7, #15]
      break;
 801437e:	bf00      	nop
  }

  return ret;
 8014380:	7bfb      	ldrb	r3, [r7, #15]
}
 8014382:	4618      	mov	r0, r3
 8014384:	3710      	adds	r7, #16
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	24000d28 	.word	0x24000d28

08014390 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	88db      	ldrh	r3, [r3, #6]
 801439e:	2b01      	cmp	r3, #1
 80143a0:	d004      	beq.n	80143ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80143a2:	6839      	ldr	r1, [r7, #0]
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f000 f8e2 	bl	801456e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80143aa:	e023      	b.n	80143f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143b2:	b2db      	uxtb	r3, r3
 80143b4:	2b02      	cmp	r3, #2
 80143b6:	dc02      	bgt.n	80143be <USBD_GetConfig+0x2e>
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	dc03      	bgt.n	80143c4 <USBD_GetConfig+0x34>
 80143bc:	e015      	b.n	80143ea <USBD_GetConfig+0x5a>
 80143be:	2b03      	cmp	r3, #3
 80143c0:	d00b      	beq.n	80143da <USBD_GetConfig+0x4a>
 80143c2:	e012      	b.n	80143ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2200      	movs	r2, #0
 80143c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	3308      	adds	r3, #8
 80143ce:	2201      	movs	r2, #1
 80143d0:	4619      	mov	r1, r3
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f000 f93c 	bl	8014650 <USBD_CtlSendData>
        break;
 80143d8:	e00c      	b.n	80143f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	3304      	adds	r3, #4
 80143de:	2201      	movs	r2, #1
 80143e0:	4619      	mov	r1, r3
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f000 f934 	bl	8014650 <USBD_CtlSendData>
        break;
 80143e8:	e004      	b.n	80143f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80143ea:	6839      	ldr	r1, [r7, #0]
 80143ec:	6878      	ldr	r0, [r7, #4]
 80143ee:	f000 f8be 	bl	801456e <USBD_CtlError>
        break;
 80143f2:	bf00      	nop
}
 80143f4:	bf00      	nop
 80143f6:	3708      	adds	r7, #8
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}

080143fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801440c:	b2db      	uxtb	r3, r3
 801440e:	3b01      	subs	r3, #1
 8014410:	2b02      	cmp	r3, #2
 8014412:	d81e      	bhi.n	8014452 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	88db      	ldrh	r3, [r3, #6]
 8014418:	2b02      	cmp	r3, #2
 801441a:	d004      	beq.n	8014426 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801441c:	6839      	ldr	r1, [r7, #0]
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	f000 f8a5 	bl	801456e <USBD_CtlError>
        break;
 8014424:	e01a      	b.n	801445c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2201      	movs	r2, #1
 801442a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014432:	2b00      	cmp	r3, #0
 8014434:	d005      	beq.n	8014442 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	68db      	ldr	r3, [r3, #12]
 801443a:	f043 0202 	orr.w	r2, r3, #2
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	330c      	adds	r3, #12
 8014446:	2202      	movs	r2, #2
 8014448:	4619      	mov	r1, r3
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f000 f900 	bl	8014650 <USBD_CtlSendData>
      break;
 8014450:	e004      	b.n	801445c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014452:	6839      	ldr	r1, [r7, #0]
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f000 f88a 	bl	801456e <USBD_CtlError>
      break;
 801445a:	bf00      	nop
  }
}
 801445c:	bf00      	nop
 801445e:	3708      	adds	r7, #8
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}

08014464 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b082      	sub	sp, #8
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	885b      	ldrh	r3, [r3, #2]
 8014472:	2b01      	cmp	r3, #1
 8014474:	d107      	bne.n	8014486 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2201      	movs	r2, #1
 801447a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f000 f940 	bl	8014704 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014484:	e013      	b.n	80144ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	885b      	ldrh	r3, [r3, #2]
 801448a:	2b02      	cmp	r3, #2
 801448c:	d10b      	bne.n	80144a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801448e:	683b      	ldr	r3, [r7, #0]
 8014490:	889b      	ldrh	r3, [r3, #4]
 8014492:	0a1b      	lsrs	r3, r3, #8
 8014494:	b29b      	uxth	r3, r3
 8014496:	b2da      	uxtb	r2, r3
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f000 f930 	bl	8014704 <USBD_CtlSendStatus>
}
 80144a4:	e003      	b.n	80144ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80144a6:	6839      	ldr	r1, [r7, #0]
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f000 f860 	bl	801456e <USBD_CtlError>
}
 80144ae:	bf00      	nop
 80144b0:	3708      	adds	r7, #8
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}

080144b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144b6:	b580      	push	{r7, lr}
 80144b8:	b082      	sub	sp, #8
 80144ba:	af00      	add	r7, sp, #0
 80144bc:	6078      	str	r0, [r7, #4]
 80144be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144c6:	b2db      	uxtb	r3, r3
 80144c8:	3b01      	subs	r3, #1
 80144ca:	2b02      	cmp	r3, #2
 80144cc:	d80b      	bhi.n	80144e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	885b      	ldrh	r3, [r3, #2]
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	d10c      	bne.n	80144f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2200      	movs	r2, #0
 80144da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f000 f910 	bl	8014704 <USBD_CtlSendStatus>
      }
      break;
 80144e4:	e004      	b.n	80144f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80144e6:	6839      	ldr	r1, [r7, #0]
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f000 f840 	bl	801456e <USBD_CtlError>
      break;
 80144ee:	e000      	b.n	80144f2 <USBD_ClrFeature+0x3c>
      break;
 80144f0:	bf00      	nop
  }
}
 80144f2:	bf00      	nop
 80144f4:	3708      	adds	r7, #8
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}

080144fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80144fa:	b580      	push	{r7, lr}
 80144fc:	b084      	sub	sp, #16
 80144fe:	af00      	add	r7, sp, #0
 8014500:	6078      	str	r0, [r7, #4]
 8014502:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	781a      	ldrb	r2, [r3, #0]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	3301      	adds	r3, #1
 8014514:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	781a      	ldrb	r2, [r3, #0]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	3301      	adds	r3, #1
 8014522:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014524:	68f8      	ldr	r0, [r7, #12]
 8014526:	f7ff fa41 	bl	80139ac <SWAPBYTE>
 801452a:	4603      	mov	r3, r0
 801452c:	461a      	mov	r2, r3
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	3301      	adds	r3, #1
 8014536:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	3301      	adds	r3, #1
 801453c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801453e:	68f8      	ldr	r0, [r7, #12]
 8014540:	f7ff fa34 	bl	80139ac <SWAPBYTE>
 8014544:	4603      	mov	r3, r0
 8014546:	461a      	mov	r2, r3
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	3301      	adds	r3, #1
 8014550:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	3301      	adds	r3, #1
 8014556:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014558:	68f8      	ldr	r0, [r7, #12]
 801455a:	f7ff fa27 	bl	80139ac <SWAPBYTE>
 801455e:	4603      	mov	r3, r0
 8014560:	461a      	mov	r2, r3
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	80da      	strh	r2, [r3, #6]
}
 8014566:	bf00      	nop
 8014568:	3710      	adds	r7, #16
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}

0801456e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801456e:	b580      	push	{r7, lr}
 8014570:	b082      	sub	sp, #8
 8014572:	af00      	add	r7, sp, #0
 8014574:	6078      	str	r0, [r7, #4]
 8014576:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014578:	2180      	movs	r1, #128	; 0x80
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f003 fcc0 	bl	8017f00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014580:	2100      	movs	r1, #0
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f003 fcbc 	bl	8017f00 <USBD_LL_StallEP>
}
 8014588:	bf00      	nop
 801458a:	3708      	adds	r7, #8
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}

08014590 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b086      	sub	sp, #24
 8014594:	af00      	add	r7, sp, #0
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	60b9      	str	r1, [r7, #8]
 801459a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801459c:	2300      	movs	r3, #0
 801459e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d036      	beq.n	8014614 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80145aa:	6938      	ldr	r0, [r7, #16]
 80145ac:	f000 f836 	bl	801461c <USBD_GetLen>
 80145b0:	4603      	mov	r3, r0
 80145b2:	3301      	adds	r3, #1
 80145b4:	b29b      	uxth	r3, r3
 80145b6:	005b      	lsls	r3, r3, #1
 80145b8:	b29a      	uxth	r2, r3
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80145be:	7dfb      	ldrb	r3, [r7, #23]
 80145c0:	68ba      	ldr	r2, [r7, #8]
 80145c2:	4413      	add	r3, r2
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	7812      	ldrb	r2, [r2, #0]
 80145c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80145ca:	7dfb      	ldrb	r3, [r7, #23]
 80145cc:	3301      	adds	r3, #1
 80145ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80145d0:	7dfb      	ldrb	r3, [r7, #23]
 80145d2:	68ba      	ldr	r2, [r7, #8]
 80145d4:	4413      	add	r3, r2
 80145d6:	2203      	movs	r2, #3
 80145d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80145da:	7dfb      	ldrb	r3, [r7, #23]
 80145dc:	3301      	adds	r3, #1
 80145de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80145e0:	e013      	b.n	801460a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80145e2:	7dfb      	ldrb	r3, [r7, #23]
 80145e4:	68ba      	ldr	r2, [r7, #8]
 80145e6:	4413      	add	r3, r2
 80145e8:	693a      	ldr	r2, [r7, #16]
 80145ea:	7812      	ldrb	r2, [r2, #0]
 80145ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	3301      	adds	r3, #1
 80145f2:	613b      	str	r3, [r7, #16]
    idx++;
 80145f4:	7dfb      	ldrb	r3, [r7, #23]
 80145f6:	3301      	adds	r3, #1
 80145f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80145fa:	7dfb      	ldrb	r3, [r7, #23]
 80145fc:	68ba      	ldr	r2, [r7, #8]
 80145fe:	4413      	add	r3, r2
 8014600:	2200      	movs	r2, #0
 8014602:	701a      	strb	r2, [r3, #0]
    idx++;
 8014604:	7dfb      	ldrb	r3, [r7, #23]
 8014606:	3301      	adds	r3, #1
 8014608:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	781b      	ldrb	r3, [r3, #0]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d1e7      	bne.n	80145e2 <USBD_GetString+0x52>
 8014612:	e000      	b.n	8014616 <USBD_GetString+0x86>
    return;
 8014614:	bf00      	nop
  }
}
 8014616:	3718      	adds	r7, #24
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}

0801461c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801461c:	b480      	push	{r7}
 801461e:	b085      	sub	sp, #20
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014624:	2300      	movs	r3, #0
 8014626:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801462c:	e005      	b.n	801463a <USBD_GetLen+0x1e>
  {
    len++;
 801462e:	7bfb      	ldrb	r3, [r7, #15]
 8014630:	3301      	adds	r3, #1
 8014632:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	3301      	adds	r3, #1
 8014638:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d1f5      	bne.n	801462e <USBD_GetLen+0x12>
  }

  return len;
 8014642:	7bfb      	ldrb	r3, [r7, #15]
}
 8014644:	4618      	mov	r0, r3
 8014646:	3714      	adds	r7, #20
 8014648:	46bd      	mov	sp, r7
 801464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464e:	4770      	bx	lr

08014650 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	60f8      	str	r0, [r7, #12]
 8014658:	60b9      	str	r1, [r7, #8]
 801465a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2202      	movs	r2, #2
 8014660:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	687a      	ldr	r2, [r7, #4]
 801466e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	68ba      	ldr	r2, [r7, #8]
 8014674:	2100      	movs	r1, #0
 8014676:	68f8      	ldr	r0, [r7, #12]
 8014678:	f003 fccb 	bl	8018012 <USBD_LL_Transmit>

  return USBD_OK;
 801467c:	2300      	movs	r3, #0
}
 801467e:	4618      	mov	r0, r3
 8014680:	3710      	adds	r7, #16
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}

08014686 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014686:	b580      	push	{r7, lr}
 8014688:	b084      	sub	sp, #16
 801468a:	af00      	add	r7, sp, #0
 801468c:	60f8      	str	r0, [r7, #12]
 801468e:	60b9      	str	r1, [r7, #8]
 8014690:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	68ba      	ldr	r2, [r7, #8]
 8014696:	2100      	movs	r1, #0
 8014698:	68f8      	ldr	r0, [r7, #12]
 801469a:	f003 fcba 	bl	8018012 <USBD_LL_Transmit>

  return USBD_OK;
 801469e:	2300      	movs	r3, #0
}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3710      	adds	r7, #16
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b084      	sub	sp, #16
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	60f8      	str	r0, [r7, #12]
 80146b0:	60b9      	str	r1, [r7, #8]
 80146b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	2203      	movs	r2, #3
 80146b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	687a      	ldr	r2, [r7, #4]
 80146c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	687a      	ldr	r2, [r7, #4]
 80146c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	68ba      	ldr	r2, [r7, #8]
 80146d0:	2100      	movs	r1, #0
 80146d2:	68f8      	ldr	r0, [r7, #12]
 80146d4:	f003 fcbe 	bl	8018054 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80146d8:	2300      	movs	r3, #0
}
 80146da:	4618      	mov	r0, r3
 80146dc:	3710      	adds	r7, #16
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}

080146e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80146e2:	b580      	push	{r7, lr}
 80146e4:	b084      	sub	sp, #16
 80146e6:	af00      	add	r7, sp, #0
 80146e8:	60f8      	str	r0, [r7, #12]
 80146ea:	60b9      	str	r1, [r7, #8]
 80146ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	68ba      	ldr	r2, [r7, #8]
 80146f2:	2100      	movs	r1, #0
 80146f4:	68f8      	ldr	r0, [r7, #12]
 80146f6:	f003 fcad 	bl	8018054 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80146fa:	2300      	movs	r3, #0
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3710      	adds	r7, #16
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}

08014704 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b082      	sub	sp, #8
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2204      	movs	r2, #4
 8014710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014714:	2300      	movs	r3, #0
 8014716:	2200      	movs	r2, #0
 8014718:	2100      	movs	r1, #0
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f003 fc79 	bl	8018012 <USBD_LL_Transmit>

  return USBD_OK;
 8014720:	2300      	movs	r3, #0
}
 8014722:	4618      	mov	r0, r3
 8014724:	3708      	adds	r7, #8
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}

0801472a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801472a:	b580      	push	{r7, lr}
 801472c:	b082      	sub	sp, #8
 801472e:	af00      	add	r7, sp, #0
 8014730:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	2205      	movs	r2, #5
 8014736:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801473a:	2300      	movs	r3, #0
 801473c:	2200      	movs	r2, #0
 801473e:	2100      	movs	r1, #0
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f003 fc87 	bl	8018054 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014746:	2300      	movs	r3, #0
}
 8014748:	4618      	mov	r0, r3
 801474a:	3708      	adds	r7, #8
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b084      	sub	sp, #16
 8014754:	af00      	add	r7, sp, #0
 8014756:	4603      	mov	r3, r0
 8014758:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801475a:	79fb      	ldrb	r3, [r7, #7]
 801475c:	4a08      	ldr	r2, [pc, #32]	; (8014780 <disk_status+0x30>)
 801475e:	009b      	lsls	r3, r3, #2
 8014760:	4413      	add	r3, r2
 8014762:	685b      	ldr	r3, [r3, #4]
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	79fa      	ldrb	r2, [r7, #7]
 8014768:	4905      	ldr	r1, [pc, #20]	; (8014780 <disk_status+0x30>)
 801476a:	440a      	add	r2, r1
 801476c:	7a12      	ldrb	r2, [r2, #8]
 801476e:	4610      	mov	r0, r2
 8014770:	4798      	blx	r3
 8014772:	4603      	mov	r3, r0
 8014774:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014776:	7bfb      	ldrb	r3, [r7, #15]
}
 8014778:	4618      	mov	r0, r3
 801477a:	3710      	adds	r7, #16
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}
 8014780:	24000f54 	.word	0x24000f54

08014784 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b084      	sub	sp, #16
 8014788:	af00      	add	r7, sp, #0
 801478a:	4603      	mov	r3, r0
 801478c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801478e:	2300      	movs	r3, #0
 8014790:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014792:	79fb      	ldrb	r3, [r7, #7]
 8014794:	4a0d      	ldr	r2, [pc, #52]	; (80147cc <disk_initialize+0x48>)
 8014796:	5cd3      	ldrb	r3, [r2, r3]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d111      	bne.n	80147c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801479c:	79fb      	ldrb	r3, [r7, #7]
 801479e:	4a0b      	ldr	r2, [pc, #44]	; (80147cc <disk_initialize+0x48>)
 80147a0:	2101      	movs	r1, #1
 80147a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80147a4:	79fb      	ldrb	r3, [r7, #7]
 80147a6:	4a09      	ldr	r2, [pc, #36]	; (80147cc <disk_initialize+0x48>)
 80147a8:	009b      	lsls	r3, r3, #2
 80147aa:	4413      	add	r3, r2
 80147ac:	685b      	ldr	r3, [r3, #4]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	79fa      	ldrb	r2, [r7, #7]
 80147b2:	4906      	ldr	r1, [pc, #24]	; (80147cc <disk_initialize+0x48>)
 80147b4:	440a      	add	r2, r1
 80147b6:	7a12      	ldrb	r2, [r2, #8]
 80147b8:	4610      	mov	r0, r2
 80147ba:	4798      	blx	r3
 80147bc:	4603      	mov	r3, r0
 80147be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80147c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80147c2:	4618      	mov	r0, r3
 80147c4:	3710      	adds	r7, #16
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
 80147ca:	bf00      	nop
 80147cc:	24000f54 	.word	0x24000f54

080147d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80147d0:	b590      	push	{r4, r7, lr}
 80147d2:	b087      	sub	sp, #28
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	60b9      	str	r1, [r7, #8]
 80147d8:	607a      	str	r2, [r7, #4]
 80147da:	603b      	str	r3, [r7, #0]
 80147dc:	4603      	mov	r3, r0
 80147de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80147e0:	7bfb      	ldrb	r3, [r7, #15]
 80147e2:	4a0a      	ldr	r2, [pc, #40]	; (801480c <disk_read+0x3c>)
 80147e4:	009b      	lsls	r3, r3, #2
 80147e6:	4413      	add	r3, r2
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	689c      	ldr	r4, [r3, #8]
 80147ec:	7bfb      	ldrb	r3, [r7, #15]
 80147ee:	4a07      	ldr	r2, [pc, #28]	; (801480c <disk_read+0x3c>)
 80147f0:	4413      	add	r3, r2
 80147f2:	7a18      	ldrb	r0, [r3, #8]
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	68b9      	ldr	r1, [r7, #8]
 80147fa:	47a0      	blx	r4
 80147fc:	4603      	mov	r3, r0
 80147fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8014800:	7dfb      	ldrb	r3, [r7, #23]
}
 8014802:	4618      	mov	r0, r3
 8014804:	371c      	adds	r7, #28
 8014806:	46bd      	mov	sp, r7
 8014808:	bd90      	pop	{r4, r7, pc}
 801480a:	bf00      	nop
 801480c:	24000f54 	.word	0x24000f54

08014810 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014810:	b590      	push	{r4, r7, lr}
 8014812:	b087      	sub	sp, #28
 8014814:	af00      	add	r7, sp, #0
 8014816:	60b9      	str	r1, [r7, #8]
 8014818:	607a      	str	r2, [r7, #4]
 801481a:	603b      	str	r3, [r7, #0]
 801481c:	4603      	mov	r3, r0
 801481e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014820:	7bfb      	ldrb	r3, [r7, #15]
 8014822:	4a0a      	ldr	r2, [pc, #40]	; (801484c <disk_write+0x3c>)
 8014824:	009b      	lsls	r3, r3, #2
 8014826:	4413      	add	r3, r2
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	68dc      	ldr	r4, [r3, #12]
 801482c:	7bfb      	ldrb	r3, [r7, #15]
 801482e:	4a07      	ldr	r2, [pc, #28]	; (801484c <disk_write+0x3c>)
 8014830:	4413      	add	r3, r2
 8014832:	7a18      	ldrb	r0, [r3, #8]
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	687a      	ldr	r2, [r7, #4]
 8014838:	68b9      	ldr	r1, [r7, #8]
 801483a:	47a0      	blx	r4
 801483c:	4603      	mov	r3, r0
 801483e:	75fb      	strb	r3, [r7, #23]
  return res;
 8014840:	7dfb      	ldrb	r3, [r7, #23]
}
 8014842:	4618      	mov	r0, r3
 8014844:	371c      	adds	r7, #28
 8014846:	46bd      	mov	sp, r7
 8014848:	bd90      	pop	{r4, r7, pc}
 801484a:	bf00      	nop
 801484c:	24000f54 	.word	0x24000f54

08014850 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b084      	sub	sp, #16
 8014854:	af00      	add	r7, sp, #0
 8014856:	4603      	mov	r3, r0
 8014858:	603a      	str	r2, [r7, #0]
 801485a:	71fb      	strb	r3, [r7, #7]
 801485c:	460b      	mov	r3, r1
 801485e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014860:	79fb      	ldrb	r3, [r7, #7]
 8014862:	4a09      	ldr	r2, [pc, #36]	; (8014888 <disk_ioctl+0x38>)
 8014864:	009b      	lsls	r3, r3, #2
 8014866:	4413      	add	r3, r2
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	691b      	ldr	r3, [r3, #16]
 801486c:	79fa      	ldrb	r2, [r7, #7]
 801486e:	4906      	ldr	r1, [pc, #24]	; (8014888 <disk_ioctl+0x38>)
 8014870:	440a      	add	r2, r1
 8014872:	7a10      	ldrb	r0, [r2, #8]
 8014874:	79b9      	ldrb	r1, [r7, #6]
 8014876:	683a      	ldr	r2, [r7, #0]
 8014878:	4798      	blx	r3
 801487a:	4603      	mov	r3, r0
 801487c:	73fb      	strb	r3, [r7, #15]
  return res;
 801487e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014880:	4618      	mov	r0, r3
 8014882:	3710      	adds	r7, #16
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}
 8014888:	24000f54 	.word	0x24000f54

0801488c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801488c:	b480      	push	{r7}
 801488e:	b085      	sub	sp, #20
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	3301      	adds	r3, #1
 8014898:	781b      	ldrb	r3, [r3, #0]
 801489a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801489c:	89fb      	ldrh	r3, [r7, #14]
 801489e:	021b      	lsls	r3, r3, #8
 80148a0:	b21a      	sxth	r2, r3
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	781b      	ldrb	r3, [r3, #0]
 80148a6:	b21b      	sxth	r3, r3
 80148a8:	4313      	orrs	r3, r2
 80148aa:	b21b      	sxth	r3, r3
 80148ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80148ae:	89fb      	ldrh	r3, [r7, #14]
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3714      	adds	r7, #20
 80148b4:	46bd      	mov	sp, r7
 80148b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ba:	4770      	bx	lr

080148bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80148bc:	b480      	push	{r7}
 80148be:	b085      	sub	sp, #20
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	3303      	adds	r3, #3
 80148c8:	781b      	ldrb	r3, [r3, #0]
 80148ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	021b      	lsls	r3, r3, #8
 80148d0:	687a      	ldr	r2, [r7, #4]
 80148d2:	3202      	adds	r2, #2
 80148d4:	7812      	ldrb	r2, [r2, #0]
 80148d6:	4313      	orrs	r3, r2
 80148d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	021b      	lsls	r3, r3, #8
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	3201      	adds	r2, #1
 80148e2:	7812      	ldrb	r2, [r2, #0]
 80148e4:	4313      	orrs	r3, r2
 80148e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	021b      	lsls	r3, r3, #8
 80148ec:	687a      	ldr	r2, [r7, #4]
 80148ee:	7812      	ldrb	r2, [r2, #0]
 80148f0:	4313      	orrs	r3, r2
 80148f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80148f4:	68fb      	ldr	r3, [r7, #12]
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3714      	adds	r7, #20
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr

08014902 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014902:	b480      	push	{r7}
 8014904:	b083      	sub	sp, #12
 8014906:	af00      	add	r7, sp, #0
 8014908:	6078      	str	r0, [r7, #4]
 801490a:	460b      	mov	r3, r1
 801490c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	1c5a      	adds	r2, r3, #1
 8014912:	607a      	str	r2, [r7, #4]
 8014914:	887a      	ldrh	r2, [r7, #2]
 8014916:	b2d2      	uxtb	r2, r2
 8014918:	701a      	strb	r2, [r3, #0]
 801491a:	887b      	ldrh	r3, [r7, #2]
 801491c:	0a1b      	lsrs	r3, r3, #8
 801491e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	1c5a      	adds	r2, r3, #1
 8014924:	607a      	str	r2, [r7, #4]
 8014926:	887a      	ldrh	r2, [r7, #2]
 8014928:	b2d2      	uxtb	r2, r2
 801492a:	701a      	strb	r2, [r3, #0]
}
 801492c:	bf00      	nop
 801492e:	370c      	adds	r7, #12
 8014930:	46bd      	mov	sp, r7
 8014932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014936:	4770      	bx	lr

08014938 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014938:	b480      	push	{r7}
 801493a:	b083      	sub	sp, #12
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	1c5a      	adds	r2, r3, #1
 8014946:	607a      	str	r2, [r7, #4]
 8014948:	683a      	ldr	r2, [r7, #0]
 801494a:	b2d2      	uxtb	r2, r2
 801494c:	701a      	strb	r2, [r3, #0]
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	0a1b      	lsrs	r3, r3, #8
 8014952:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	1c5a      	adds	r2, r3, #1
 8014958:	607a      	str	r2, [r7, #4]
 801495a:	683a      	ldr	r2, [r7, #0]
 801495c:	b2d2      	uxtb	r2, r2
 801495e:	701a      	strb	r2, [r3, #0]
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	0a1b      	lsrs	r3, r3, #8
 8014964:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	1c5a      	adds	r2, r3, #1
 801496a:	607a      	str	r2, [r7, #4]
 801496c:	683a      	ldr	r2, [r7, #0]
 801496e:	b2d2      	uxtb	r2, r2
 8014970:	701a      	strb	r2, [r3, #0]
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	0a1b      	lsrs	r3, r3, #8
 8014976:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	1c5a      	adds	r2, r3, #1
 801497c:	607a      	str	r2, [r7, #4]
 801497e:	683a      	ldr	r2, [r7, #0]
 8014980:	b2d2      	uxtb	r2, r2
 8014982:	701a      	strb	r2, [r3, #0]
}
 8014984:	bf00      	nop
 8014986:	370c      	adds	r7, #12
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr

08014990 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014990:	b480      	push	{r7}
 8014992:	b087      	sub	sp, #28
 8014994:	af00      	add	r7, sp, #0
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	60b9      	str	r1, [r7, #8]
 801499a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d00d      	beq.n	80149c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80149aa:	693a      	ldr	r2, [r7, #16]
 80149ac:	1c53      	adds	r3, r2, #1
 80149ae:	613b      	str	r3, [r7, #16]
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	1c59      	adds	r1, r3, #1
 80149b4:	6179      	str	r1, [r7, #20]
 80149b6:	7812      	ldrb	r2, [r2, #0]
 80149b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	3b01      	subs	r3, #1
 80149be:	607b      	str	r3, [r7, #4]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d1f1      	bne.n	80149aa <mem_cpy+0x1a>
	}
}
 80149c6:	bf00      	nop
 80149c8:	371c      	adds	r7, #28
 80149ca:	46bd      	mov	sp, r7
 80149cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d0:	4770      	bx	lr

080149d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80149d2:	b480      	push	{r7}
 80149d4:	b087      	sub	sp, #28
 80149d6:	af00      	add	r7, sp, #0
 80149d8:	60f8      	str	r0, [r7, #12]
 80149da:	60b9      	str	r1, [r7, #8]
 80149dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	1c5a      	adds	r2, r3, #1
 80149e6:	617a      	str	r2, [r7, #20]
 80149e8:	68ba      	ldr	r2, [r7, #8]
 80149ea:	b2d2      	uxtb	r2, r2
 80149ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	3b01      	subs	r3, #1
 80149f2:	607b      	str	r3, [r7, #4]
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d1f3      	bne.n	80149e2 <mem_set+0x10>
}
 80149fa:	bf00      	nop
 80149fc:	bf00      	nop
 80149fe:	371c      	adds	r7, #28
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr

08014a08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014a08:	b480      	push	{r7}
 8014a0a:	b089      	sub	sp, #36	; 0x24
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	60b9      	str	r1, [r7, #8]
 8014a12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	61fb      	str	r3, [r7, #28]
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014a20:	69fb      	ldr	r3, [r7, #28]
 8014a22:	1c5a      	adds	r2, r3, #1
 8014a24:	61fa      	str	r2, [r7, #28]
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	4619      	mov	r1, r3
 8014a2a:	69bb      	ldr	r3, [r7, #24]
 8014a2c:	1c5a      	adds	r2, r3, #1
 8014a2e:	61ba      	str	r2, [r7, #24]
 8014a30:	781b      	ldrb	r3, [r3, #0]
 8014a32:	1acb      	subs	r3, r1, r3
 8014a34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	3b01      	subs	r3, #1
 8014a3a:	607b      	str	r3, [r7, #4]
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d002      	beq.n	8014a48 <mem_cmp+0x40>
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d0eb      	beq.n	8014a20 <mem_cmp+0x18>

	return r;
 8014a48:	697b      	ldr	r3, [r7, #20]
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3724      	adds	r7, #36	; 0x24
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a54:	4770      	bx	lr

08014a56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014a56:	b480      	push	{r7}
 8014a58:	b083      	sub	sp, #12
 8014a5a:	af00      	add	r7, sp, #0
 8014a5c:	6078      	str	r0, [r7, #4]
 8014a5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014a60:	e002      	b.n	8014a68 <chk_chr+0x12>
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	3301      	adds	r3, #1
 8014a66:	607b      	str	r3, [r7, #4]
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d005      	beq.n	8014a7c <chk_chr+0x26>
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	461a      	mov	r2, r3
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	4293      	cmp	r3, r2
 8014a7a:	d1f2      	bne.n	8014a62 <chk_chr+0xc>
	return *str;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	781b      	ldrb	r3, [r3, #0]
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	370c      	adds	r7, #12
 8014a84:	46bd      	mov	sp, r7
 8014a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8a:	4770      	bx	lr

08014a8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014a8c:	b480      	push	{r7}
 8014a8e:	b085      	sub	sp, #20
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014a96:	2300      	movs	r3, #0
 8014a98:	60bb      	str	r3, [r7, #8]
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	60fb      	str	r3, [r7, #12]
 8014a9e:	e029      	b.n	8014af4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014aa0:	4a27      	ldr	r2, [pc, #156]	; (8014b40 <chk_lock+0xb4>)
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	011b      	lsls	r3, r3, #4
 8014aa6:	4413      	add	r3, r2
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d01d      	beq.n	8014aea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014aae:	4a24      	ldr	r2, [pc, #144]	; (8014b40 <chk_lock+0xb4>)
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	011b      	lsls	r3, r3, #4
 8014ab4:	4413      	add	r3, r2
 8014ab6:	681a      	ldr	r2, [r3, #0]
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d116      	bne.n	8014aee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014ac0:	4a1f      	ldr	r2, [pc, #124]	; (8014b40 <chk_lock+0xb4>)
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	011b      	lsls	r3, r3, #4
 8014ac6:	4413      	add	r3, r2
 8014ac8:	3304      	adds	r3, #4
 8014aca:	681a      	ldr	r2, [r3, #0]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d10c      	bne.n	8014aee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014ad4:	4a1a      	ldr	r2, [pc, #104]	; (8014b40 <chk_lock+0xb4>)
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	011b      	lsls	r3, r3, #4
 8014ada:	4413      	add	r3, r2
 8014adc:	3308      	adds	r3, #8
 8014ade:	681a      	ldr	r2, [r3, #0]
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8014ae4:	429a      	cmp	r2, r3
 8014ae6:	d102      	bne.n	8014aee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014ae8:	e007      	b.n	8014afa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8014aea:	2301      	movs	r3, #1
 8014aec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	3301      	adds	r3, #1
 8014af2:	60fb      	str	r3, [r7, #12]
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	2b01      	cmp	r3, #1
 8014af8:	d9d2      	bls.n	8014aa0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	d109      	bne.n	8014b14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8014b00:	68bb      	ldr	r3, [r7, #8]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d102      	bne.n	8014b0c <chk_lock+0x80>
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	2b02      	cmp	r3, #2
 8014b0a:	d101      	bne.n	8014b10 <chk_lock+0x84>
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	e010      	b.n	8014b32 <chk_lock+0xa6>
 8014b10:	2312      	movs	r3, #18
 8014b12:	e00e      	b.n	8014b32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d108      	bne.n	8014b2c <chk_lock+0xa0>
 8014b1a:	4a09      	ldr	r2, [pc, #36]	; (8014b40 <chk_lock+0xb4>)
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	011b      	lsls	r3, r3, #4
 8014b20:	4413      	add	r3, r2
 8014b22:	330c      	adds	r3, #12
 8014b24:	881b      	ldrh	r3, [r3, #0]
 8014b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b2a:	d101      	bne.n	8014b30 <chk_lock+0xa4>
 8014b2c:	2310      	movs	r3, #16
 8014b2e:	e000      	b.n	8014b32 <chk_lock+0xa6>
 8014b30:	2300      	movs	r3, #0
}
 8014b32:	4618      	mov	r0, r3
 8014b34:	3714      	adds	r7, #20
 8014b36:	46bd      	mov	sp, r7
 8014b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3c:	4770      	bx	lr
 8014b3e:	bf00      	nop
 8014b40:	24000d34 	.word	0x24000d34

08014b44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8014b44:	b480      	push	{r7}
 8014b46:	b083      	sub	sp, #12
 8014b48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	607b      	str	r3, [r7, #4]
 8014b4e:	e002      	b.n	8014b56 <enq_lock+0x12>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	3301      	adds	r3, #1
 8014b54:	607b      	str	r3, [r7, #4]
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2b01      	cmp	r3, #1
 8014b5a:	d806      	bhi.n	8014b6a <enq_lock+0x26>
 8014b5c:	4a09      	ldr	r2, [pc, #36]	; (8014b84 <enq_lock+0x40>)
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	011b      	lsls	r3, r3, #4
 8014b62:	4413      	add	r3, r2
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d1f2      	bne.n	8014b50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2b02      	cmp	r3, #2
 8014b6e:	bf14      	ite	ne
 8014b70:	2301      	movne	r3, #1
 8014b72:	2300      	moveq	r3, #0
 8014b74:	b2db      	uxtb	r3, r3
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	370c      	adds	r7, #12
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b80:	4770      	bx	lr
 8014b82:	bf00      	nop
 8014b84:	24000d34 	.word	0x24000d34

08014b88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014b88:	b480      	push	{r7}
 8014b8a:	b085      	sub	sp, #20
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014b92:	2300      	movs	r3, #0
 8014b94:	60fb      	str	r3, [r7, #12]
 8014b96:	e01f      	b.n	8014bd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8014b98:	4a41      	ldr	r2, [pc, #260]	; (8014ca0 <inc_lock+0x118>)
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	011b      	lsls	r3, r3, #4
 8014b9e:	4413      	add	r3, r2
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d113      	bne.n	8014bd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8014baa:	4a3d      	ldr	r2, [pc, #244]	; (8014ca0 <inc_lock+0x118>)
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	011b      	lsls	r3, r3, #4
 8014bb0:	4413      	add	r3, r2
 8014bb2:	3304      	adds	r3, #4
 8014bb4:	681a      	ldr	r2, [r3, #0]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8014bba:	429a      	cmp	r2, r3
 8014bbc:	d109      	bne.n	8014bd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8014bbe:	4a38      	ldr	r2, [pc, #224]	; (8014ca0 <inc_lock+0x118>)
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	011b      	lsls	r3, r3, #4
 8014bc4:	4413      	add	r3, r2
 8014bc6:	3308      	adds	r3, #8
 8014bc8:	681a      	ldr	r2, [r3, #0]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	d006      	beq.n	8014be0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	3301      	adds	r3, #1
 8014bd6:	60fb      	str	r3, [r7, #12]
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	2b01      	cmp	r3, #1
 8014bdc:	d9dc      	bls.n	8014b98 <inc_lock+0x10>
 8014bde:	e000      	b.n	8014be2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8014be0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	2b02      	cmp	r3, #2
 8014be6:	d132      	bne.n	8014c4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014be8:	2300      	movs	r3, #0
 8014bea:	60fb      	str	r3, [r7, #12]
 8014bec:	e002      	b.n	8014bf4 <inc_lock+0x6c>
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	3301      	adds	r3, #1
 8014bf2:	60fb      	str	r3, [r7, #12]
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d806      	bhi.n	8014c08 <inc_lock+0x80>
 8014bfa:	4a29      	ldr	r2, [pc, #164]	; (8014ca0 <inc_lock+0x118>)
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	011b      	lsls	r3, r3, #4
 8014c00:	4413      	add	r3, r2
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d1f2      	bne.n	8014bee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	2b02      	cmp	r3, #2
 8014c0c:	d101      	bne.n	8014c12 <inc_lock+0x8a>
 8014c0e:	2300      	movs	r3, #0
 8014c10:	e040      	b.n	8014c94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	681a      	ldr	r2, [r3, #0]
 8014c16:	4922      	ldr	r1, [pc, #136]	; (8014ca0 <inc_lock+0x118>)
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	011b      	lsls	r3, r3, #4
 8014c1c:	440b      	add	r3, r1
 8014c1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	689a      	ldr	r2, [r3, #8]
 8014c24:	491e      	ldr	r1, [pc, #120]	; (8014ca0 <inc_lock+0x118>)
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	011b      	lsls	r3, r3, #4
 8014c2a:	440b      	add	r3, r1
 8014c2c:	3304      	adds	r3, #4
 8014c2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	695a      	ldr	r2, [r3, #20]
 8014c34:	491a      	ldr	r1, [pc, #104]	; (8014ca0 <inc_lock+0x118>)
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	011b      	lsls	r3, r3, #4
 8014c3a:	440b      	add	r3, r1
 8014c3c:	3308      	adds	r3, #8
 8014c3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8014c40:	4a17      	ldr	r2, [pc, #92]	; (8014ca0 <inc_lock+0x118>)
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	011b      	lsls	r3, r3, #4
 8014c46:	4413      	add	r3, r2
 8014c48:	330c      	adds	r3, #12
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d009      	beq.n	8014c68 <inc_lock+0xe0>
 8014c54:	4a12      	ldr	r2, [pc, #72]	; (8014ca0 <inc_lock+0x118>)
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	011b      	lsls	r3, r3, #4
 8014c5a:	4413      	add	r3, r2
 8014c5c:	330c      	adds	r3, #12
 8014c5e:	881b      	ldrh	r3, [r3, #0]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d001      	beq.n	8014c68 <inc_lock+0xe0>
 8014c64:	2300      	movs	r3, #0
 8014c66:	e015      	b.n	8014c94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d108      	bne.n	8014c80 <inc_lock+0xf8>
 8014c6e:	4a0c      	ldr	r2, [pc, #48]	; (8014ca0 <inc_lock+0x118>)
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	011b      	lsls	r3, r3, #4
 8014c74:	4413      	add	r3, r2
 8014c76:	330c      	adds	r3, #12
 8014c78:	881b      	ldrh	r3, [r3, #0]
 8014c7a:	3301      	adds	r3, #1
 8014c7c:	b29a      	uxth	r2, r3
 8014c7e:	e001      	b.n	8014c84 <inc_lock+0xfc>
 8014c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c84:	4906      	ldr	r1, [pc, #24]	; (8014ca0 <inc_lock+0x118>)
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	011b      	lsls	r3, r3, #4
 8014c8a:	440b      	add	r3, r1
 8014c8c:	330c      	adds	r3, #12
 8014c8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	3301      	adds	r3, #1
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3714      	adds	r7, #20
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr
 8014ca0:	24000d34 	.word	0x24000d34

08014ca4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8014ca4:	b480      	push	{r7}
 8014ca6:	b085      	sub	sp, #20
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	3b01      	subs	r3, #1
 8014cb0:	607b      	str	r3, [r7, #4]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	2b01      	cmp	r3, #1
 8014cb6:	d825      	bhi.n	8014d04 <dec_lock+0x60>
		n = Files[i].ctr;
 8014cb8:	4a17      	ldr	r2, [pc, #92]	; (8014d18 <dec_lock+0x74>)
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	011b      	lsls	r3, r3, #4
 8014cbe:	4413      	add	r3, r2
 8014cc0:	330c      	adds	r3, #12
 8014cc2:	881b      	ldrh	r3, [r3, #0]
 8014cc4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8014cc6:	89fb      	ldrh	r3, [r7, #14]
 8014cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ccc:	d101      	bne.n	8014cd2 <dec_lock+0x2e>
 8014cce:	2300      	movs	r3, #0
 8014cd0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8014cd2:	89fb      	ldrh	r3, [r7, #14]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d002      	beq.n	8014cde <dec_lock+0x3a>
 8014cd8:	89fb      	ldrh	r3, [r7, #14]
 8014cda:	3b01      	subs	r3, #1
 8014cdc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8014cde:	4a0e      	ldr	r2, [pc, #56]	; (8014d18 <dec_lock+0x74>)
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	011b      	lsls	r3, r3, #4
 8014ce4:	4413      	add	r3, r2
 8014ce6:	330c      	adds	r3, #12
 8014ce8:	89fa      	ldrh	r2, [r7, #14]
 8014cea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8014cec:	89fb      	ldrh	r3, [r7, #14]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d105      	bne.n	8014cfe <dec_lock+0x5a>
 8014cf2:	4a09      	ldr	r2, [pc, #36]	; (8014d18 <dec_lock+0x74>)
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	011b      	lsls	r3, r3, #4
 8014cf8:	4413      	add	r3, r2
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	737b      	strb	r3, [r7, #13]
 8014d02:	e001      	b.n	8014d08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8014d04:	2302      	movs	r3, #2
 8014d06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8014d08:	7b7b      	ldrb	r3, [r7, #13]
}
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	3714      	adds	r7, #20
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d14:	4770      	bx	lr
 8014d16:	bf00      	nop
 8014d18:	24000d34 	.word	0x24000d34

08014d1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	b085      	sub	sp, #20
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8014d24:	2300      	movs	r3, #0
 8014d26:	60fb      	str	r3, [r7, #12]
 8014d28:	e010      	b.n	8014d4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8014d2a:	4a0d      	ldr	r2, [pc, #52]	; (8014d60 <clear_lock+0x44>)
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	011b      	lsls	r3, r3, #4
 8014d30:	4413      	add	r3, r2
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	429a      	cmp	r2, r3
 8014d38:	d105      	bne.n	8014d46 <clear_lock+0x2a>
 8014d3a:	4a09      	ldr	r2, [pc, #36]	; (8014d60 <clear_lock+0x44>)
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	011b      	lsls	r3, r3, #4
 8014d40:	4413      	add	r3, r2
 8014d42:	2200      	movs	r2, #0
 8014d44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	3301      	adds	r3, #1
 8014d4a:	60fb      	str	r3, [r7, #12]
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2b01      	cmp	r3, #1
 8014d50:	d9eb      	bls.n	8014d2a <clear_lock+0xe>
	}
}
 8014d52:	bf00      	nop
 8014d54:	bf00      	nop
 8014d56:	3714      	adds	r7, #20
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr
 8014d60:	24000d34 	.word	0x24000d34

08014d64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b086      	sub	sp, #24
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	78db      	ldrb	r3, [r3, #3]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d034      	beq.n	8014de2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	7858      	ldrb	r0, [r3, #1]
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d88:	2301      	movs	r3, #1
 8014d8a:	697a      	ldr	r2, [r7, #20]
 8014d8c:	f7ff fd40 	bl	8014810 <disk_write>
 8014d90:	4603      	mov	r3, r0
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d002      	beq.n	8014d9c <sync_window+0x38>
			res = FR_DISK_ERR;
 8014d96:	2301      	movs	r3, #1
 8014d98:	73fb      	strb	r3, [r7, #15]
 8014d9a:	e022      	b.n	8014de2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014da6:	697a      	ldr	r2, [r7, #20]
 8014da8:	1ad2      	subs	r2, r2, r3
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	6a1b      	ldr	r3, [r3, #32]
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d217      	bcs.n	8014de2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	789b      	ldrb	r3, [r3, #2]
 8014db6:	613b      	str	r3, [r7, #16]
 8014db8:	e010      	b.n	8014ddc <sync_window+0x78>
					wsect += fs->fsize;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6a1b      	ldr	r3, [r3, #32]
 8014dbe:	697a      	ldr	r2, [r7, #20]
 8014dc0:	4413      	add	r3, r2
 8014dc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	7858      	ldrb	r0, [r3, #1]
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014dce:	2301      	movs	r3, #1
 8014dd0:	697a      	ldr	r2, [r7, #20]
 8014dd2:	f7ff fd1d 	bl	8014810 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	3b01      	subs	r3, #1
 8014dda:	613b      	str	r3, [r7, #16]
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	2b01      	cmp	r3, #1
 8014de0:	d8eb      	bhi.n	8014dba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8014de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	3718      	adds	r7, #24
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}

08014dec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b084      	sub	sp, #16
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
 8014df4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8014df6:	2300      	movs	r3, #0
 8014df8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dfe:	683a      	ldr	r2, [r7, #0]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d01b      	beq.n	8014e3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f7ff ffad 	bl	8014d64 <sync_window>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014e0e:	7bfb      	ldrb	r3, [r7, #15]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d113      	bne.n	8014e3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	7858      	ldrb	r0, [r3, #1]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014e1e:	2301      	movs	r3, #1
 8014e20:	683a      	ldr	r2, [r7, #0]
 8014e22:	f7ff fcd5 	bl	80147d0 <disk_read>
 8014e26:	4603      	mov	r3, r0
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d004      	beq.n	8014e36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014e32:	2301      	movs	r3, #1
 8014e34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	683a      	ldr	r2, [r7, #0]
 8014e3a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8014e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3710      	adds	r7, #16
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}
	...

08014e48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b084      	sub	sp, #16
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f7ff ff87 	bl	8014d64 <sync_window>
 8014e56:	4603      	mov	r3, r0
 8014e58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014e5a:	7bfb      	ldrb	r3, [r7, #15]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d159      	bne.n	8014f14 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	781b      	ldrb	r3, [r3, #0]
 8014e64:	2b03      	cmp	r3, #3
 8014e66:	d149      	bne.n	8014efc <sync_fs+0xb4>
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	791b      	ldrb	r3, [r3, #4]
 8014e6c:	2b01      	cmp	r3, #1
 8014e6e:	d145      	bne.n	8014efc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	899b      	ldrh	r3, [r3, #12]
 8014e7a:	461a      	mov	r2, r3
 8014e7c:	2100      	movs	r1, #0
 8014e7e:	f7ff fda8 	bl	80149d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	3338      	adds	r3, #56	; 0x38
 8014e86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014e8a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7ff fd37 	bl	8014902 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	3338      	adds	r3, #56	; 0x38
 8014e98:	4921      	ldr	r1, [pc, #132]	; (8014f20 <sync_fs+0xd8>)
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f7ff fd4c 	bl	8014938 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	3338      	adds	r3, #56	; 0x38
 8014ea4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014ea8:	491e      	ldr	r1, [pc, #120]	; (8014f24 <sync_fs+0xdc>)
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f7ff fd44 	bl	8014938 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	3338      	adds	r3, #56	; 0x38
 8014eb4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	699b      	ldr	r3, [r3, #24]
 8014ebc:	4619      	mov	r1, r3
 8014ebe:	4610      	mov	r0, r2
 8014ec0:	f7ff fd3a 	bl	8014938 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	3338      	adds	r3, #56	; 0x38
 8014ec8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	695b      	ldr	r3, [r3, #20]
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	4610      	mov	r0, r2
 8014ed4:	f7ff fd30 	bl	8014938 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014edc:	1c5a      	adds	r2, r3, #1
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	7858      	ldrb	r0, [r3, #1]
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	f7ff fc8d 	bl	8014810 <disk_write>
			fs->fsi_flag = 0;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	785b      	ldrb	r3, [r3, #1]
 8014f00:	2200      	movs	r2, #0
 8014f02:	2100      	movs	r1, #0
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7ff fca3 	bl	8014850 <disk_ioctl>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d001      	beq.n	8014f14 <sync_fs+0xcc>
 8014f10:	2301      	movs	r3, #1
 8014f12:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3710      	adds	r7, #16
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}
 8014f1e:	bf00      	nop
 8014f20:	41615252 	.word	0x41615252
 8014f24:	61417272 	.word	0x61417272

08014f28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014f28:	b480      	push	{r7}
 8014f2a:	b083      	sub	sp, #12
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
 8014f30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	3b02      	subs	r3, #2
 8014f36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	69db      	ldr	r3, [r3, #28]
 8014f3c:	3b02      	subs	r3, #2
 8014f3e:	683a      	ldr	r2, [r7, #0]
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d301      	bcc.n	8014f48 <clust2sect+0x20>
 8014f44:	2300      	movs	r3, #0
 8014f46:	e008      	b.n	8014f5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	895b      	ldrh	r3, [r3, #10]
 8014f4c:	461a      	mov	r2, r3
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	fb03 f202 	mul.w	r2, r3, r2
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f58:	4413      	add	r3, r2
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	370c      	adds	r7, #12
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f64:	4770      	bx	lr

08014f66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014f66:	b580      	push	{r7, lr}
 8014f68:	b086      	sub	sp, #24
 8014f6a:	af00      	add	r7, sp, #0
 8014f6c:	6078      	str	r0, [r7, #4]
 8014f6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	2b01      	cmp	r3, #1
 8014f7a:	d904      	bls.n	8014f86 <get_fat+0x20>
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	69db      	ldr	r3, [r3, #28]
 8014f80:	683a      	ldr	r2, [r7, #0]
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d302      	bcc.n	8014f8c <get_fat+0x26>
		val = 1;	/* Internal error */
 8014f86:	2301      	movs	r3, #1
 8014f88:	617b      	str	r3, [r7, #20]
 8014f8a:	e0bb      	b.n	8015104 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	781b      	ldrb	r3, [r3, #0]
 8014f96:	2b03      	cmp	r3, #3
 8014f98:	f000 8083 	beq.w	80150a2 <get_fat+0x13c>
 8014f9c:	2b03      	cmp	r3, #3
 8014f9e:	f300 80a7 	bgt.w	80150f0 <get_fat+0x18a>
 8014fa2:	2b01      	cmp	r3, #1
 8014fa4:	d002      	beq.n	8014fac <get_fat+0x46>
 8014fa6:	2b02      	cmp	r3, #2
 8014fa8:	d056      	beq.n	8015058 <get_fat+0xf2>
 8014faa:	e0a1      	b.n	80150f0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	60fb      	str	r3, [r7, #12]
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	085b      	lsrs	r3, r3, #1
 8014fb4:	68fa      	ldr	r2, [r7, #12]
 8014fb6:	4413      	add	r3, r2
 8014fb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014fba:	693b      	ldr	r3, [r7, #16]
 8014fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014fbe:	693b      	ldr	r3, [r7, #16]
 8014fc0:	899b      	ldrh	r3, [r3, #12]
 8014fc2:	4619      	mov	r1, r3
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8014fca:	4413      	add	r3, r2
 8014fcc:	4619      	mov	r1, r3
 8014fce:	6938      	ldr	r0, [r7, #16]
 8014fd0:	f7ff ff0c 	bl	8014dec <move_window>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	f040 808d 	bne.w	80150f6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	1c5a      	adds	r2, r3, #1
 8014fe0:	60fa      	str	r2, [r7, #12]
 8014fe2:	693a      	ldr	r2, [r7, #16]
 8014fe4:	8992      	ldrh	r2, [r2, #12]
 8014fe6:	fbb3 f1f2 	udiv	r1, r3, r2
 8014fea:	fb01 f202 	mul.w	r2, r1, r2
 8014fee:	1a9b      	subs	r3, r3, r2
 8014ff0:	693a      	ldr	r2, [r7, #16]
 8014ff2:	4413      	add	r3, r2
 8014ff4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014ff8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	899b      	ldrh	r3, [r3, #12]
 8015002:	4619      	mov	r1, r3
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	fbb3 f3f1 	udiv	r3, r3, r1
 801500a:	4413      	add	r3, r2
 801500c:	4619      	mov	r1, r3
 801500e:	6938      	ldr	r0, [r7, #16]
 8015010:	f7ff feec 	bl	8014dec <move_window>
 8015014:	4603      	mov	r3, r0
 8015016:	2b00      	cmp	r3, #0
 8015018:	d16f      	bne.n	80150fa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801501a:	693b      	ldr	r3, [r7, #16]
 801501c:	899b      	ldrh	r3, [r3, #12]
 801501e:	461a      	mov	r2, r3
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	fbb3 f1f2 	udiv	r1, r3, r2
 8015026:	fb01 f202 	mul.w	r2, r1, r2
 801502a:	1a9b      	subs	r3, r3, r2
 801502c:	693a      	ldr	r2, [r7, #16]
 801502e:	4413      	add	r3, r2
 8015030:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015034:	021b      	lsls	r3, r3, #8
 8015036:	461a      	mov	r2, r3
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	4313      	orrs	r3, r2
 801503c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	f003 0301 	and.w	r3, r3, #1
 8015044:	2b00      	cmp	r3, #0
 8015046:	d002      	beq.n	801504e <get_fat+0xe8>
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	091b      	lsrs	r3, r3, #4
 801504c:	e002      	b.n	8015054 <get_fat+0xee>
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015054:	617b      	str	r3, [r7, #20]
			break;
 8015056:	e055      	b.n	8015104 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015058:	693b      	ldr	r3, [r7, #16]
 801505a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801505c:	693b      	ldr	r3, [r7, #16]
 801505e:	899b      	ldrh	r3, [r3, #12]
 8015060:	085b      	lsrs	r3, r3, #1
 8015062:	b29b      	uxth	r3, r3
 8015064:	4619      	mov	r1, r3
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	fbb3 f3f1 	udiv	r3, r3, r1
 801506c:	4413      	add	r3, r2
 801506e:	4619      	mov	r1, r3
 8015070:	6938      	ldr	r0, [r7, #16]
 8015072:	f7ff febb 	bl	8014dec <move_window>
 8015076:	4603      	mov	r3, r0
 8015078:	2b00      	cmp	r3, #0
 801507a:	d140      	bne.n	80150fe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	005b      	lsls	r3, r3, #1
 8015086:	693a      	ldr	r2, [r7, #16]
 8015088:	8992      	ldrh	r2, [r2, #12]
 801508a:	fbb3 f0f2 	udiv	r0, r3, r2
 801508e:	fb00 f202 	mul.w	r2, r0, r2
 8015092:	1a9b      	subs	r3, r3, r2
 8015094:	440b      	add	r3, r1
 8015096:	4618      	mov	r0, r3
 8015098:	f7ff fbf8 	bl	801488c <ld_word>
 801509c:	4603      	mov	r3, r0
 801509e:	617b      	str	r3, [r7, #20]
			break;
 80150a0:	e030      	b.n	8015104 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	899b      	ldrh	r3, [r3, #12]
 80150aa:	089b      	lsrs	r3, r3, #2
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	4619      	mov	r1, r3
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80150b6:	4413      	add	r3, r2
 80150b8:	4619      	mov	r1, r3
 80150ba:	6938      	ldr	r0, [r7, #16]
 80150bc:	f7ff fe96 	bl	8014dec <move_window>
 80150c0:	4603      	mov	r3, r0
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d11d      	bne.n	8015102 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80150c6:	693b      	ldr	r3, [r7, #16]
 80150c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	009b      	lsls	r3, r3, #2
 80150d0:	693a      	ldr	r2, [r7, #16]
 80150d2:	8992      	ldrh	r2, [r2, #12]
 80150d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80150d8:	fb00 f202 	mul.w	r2, r0, r2
 80150dc:	1a9b      	subs	r3, r3, r2
 80150de:	440b      	add	r3, r1
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7ff fbeb 	bl	80148bc <ld_dword>
 80150e6:	4603      	mov	r3, r0
 80150e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80150ec:	617b      	str	r3, [r7, #20]
			break;
 80150ee:	e009      	b.n	8015104 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80150f0:	2301      	movs	r3, #1
 80150f2:	617b      	str	r3, [r7, #20]
 80150f4:	e006      	b.n	8015104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80150f6:	bf00      	nop
 80150f8:	e004      	b.n	8015104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80150fa:	bf00      	nop
 80150fc:	e002      	b.n	8015104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80150fe:	bf00      	nop
 8015100:	e000      	b.n	8015104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015102:	bf00      	nop
		}
	}

	return val;
 8015104:	697b      	ldr	r3, [r7, #20]
}
 8015106:	4618      	mov	r0, r3
 8015108:	3718      	adds	r7, #24
 801510a:	46bd      	mov	sp, r7
 801510c:	bd80      	pop	{r7, pc}

0801510e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801510e:	b590      	push	{r4, r7, lr}
 8015110:	b089      	sub	sp, #36	; 0x24
 8015112:	af00      	add	r7, sp, #0
 8015114:	60f8      	str	r0, [r7, #12]
 8015116:	60b9      	str	r1, [r7, #8]
 8015118:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801511a:	2302      	movs	r3, #2
 801511c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801511e:	68bb      	ldr	r3, [r7, #8]
 8015120:	2b01      	cmp	r3, #1
 8015122:	f240 8102 	bls.w	801532a <put_fat+0x21c>
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	69db      	ldr	r3, [r3, #28]
 801512a:	68ba      	ldr	r2, [r7, #8]
 801512c:	429a      	cmp	r2, r3
 801512e:	f080 80fc 	bcs.w	801532a <put_fat+0x21c>
		switch (fs->fs_type) {
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	781b      	ldrb	r3, [r3, #0]
 8015136:	2b03      	cmp	r3, #3
 8015138:	f000 80b6 	beq.w	80152a8 <put_fat+0x19a>
 801513c:	2b03      	cmp	r3, #3
 801513e:	f300 80fd 	bgt.w	801533c <put_fat+0x22e>
 8015142:	2b01      	cmp	r3, #1
 8015144:	d003      	beq.n	801514e <put_fat+0x40>
 8015146:	2b02      	cmp	r3, #2
 8015148:	f000 8083 	beq.w	8015252 <put_fat+0x144>
 801514c:	e0f6      	b.n	801533c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801514e:	68bb      	ldr	r3, [r7, #8]
 8015150:	61bb      	str	r3, [r7, #24]
 8015152:	69bb      	ldr	r3, [r7, #24]
 8015154:	085b      	lsrs	r3, r3, #1
 8015156:	69ba      	ldr	r2, [r7, #24]
 8015158:	4413      	add	r3, r2
 801515a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	899b      	ldrh	r3, [r3, #12]
 8015164:	4619      	mov	r1, r3
 8015166:	69bb      	ldr	r3, [r7, #24]
 8015168:	fbb3 f3f1 	udiv	r3, r3, r1
 801516c:	4413      	add	r3, r2
 801516e:	4619      	mov	r1, r3
 8015170:	68f8      	ldr	r0, [r7, #12]
 8015172:	f7ff fe3b 	bl	8014dec <move_window>
 8015176:	4603      	mov	r3, r0
 8015178:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801517a:	7ffb      	ldrb	r3, [r7, #31]
 801517c:	2b00      	cmp	r3, #0
 801517e:	f040 80d6 	bne.w	801532e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015188:	69bb      	ldr	r3, [r7, #24]
 801518a:	1c5a      	adds	r2, r3, #1
 801518c:	61ba      	str	r2, [r7, #24]
 801518e:	68fa      	ldr	r2, [r7, #12]
 8015190:	8992      	ldrh	r2, [r2, #12]
 8015192:	fbb3 f0f2 	udiv	r0, r3, r2
 8015196:	fb00 f202 	mul.w	r2, r0, r2
 801519a:	1a9b      	subs	r3, r3, r2
 801519c:	440b      	add	r3, r1
 801519e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	f003 0301 	and.w	r3, r3, #1
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d00d      	beq.n	80151c6 <put_fat+0xb8>
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	781b      	ldrb	r3, [r3, #0]
 80151ae:	b25b      	sxtb	r3, r3
 80151b0:	f003 030f 	and.w	r3, r3, #15
 80151b4:	b25a      	sxtb	r2, r3
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	b2db      	uxtb	r3, r3
 80151ba:	011b      	lsls	r3, r3, #4
 80151bc:	b25b      	sxtb	r3, r3
 80151be:	4313      	orrs	r3, r2
 80151c0:	b25b      	sxtb	r3, r3
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	e001      	b.n	80151ca <put_fat+0xbc>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	b2db      	uxtb	r3, r3
 80151ca:	697a      	ldr	r2, [r7, #20]
 80151cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	2201      	movs	r2, #1
 80151d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	899b      	ldrh	r3, [r3, #12]
 80151dc:	4619      	mov	r1, r3
 80151de:	69bb      	ldr	r3, [r7, #24]
 80151e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80151e4:	4413      	add	r3, r2
 80151e6:	4619      	mov	r1, r3
 80151e8:	68f8      	ldr	r0, [r7, #12]
 80151ea:	f7ff fdff 	bl	8014dec <move_window>
 80151ee:	4603      	mov	r3, r0
 80151f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80151f2:	7ffb      	ldrb	r3, [r7, #31]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	f040 809c 	bne.w	8015332 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	899b      	ldrh	r3, [r3, #12]
 8015204:	461a      	mov	r2, r3
 8015206:	69bb      	ldr	r3, [r7, #24]
 8015208:	fbb3 f0f2 	udiv	r0, r3, r2
 801520c:	fb00 f202 	mul.w	r2, r0, r2
 8015210:	1a9b      	subs	r3, r3, r2
 8015212:	440b      	add	r3, r1
 8015214:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	f003 0301 	and.w	r3, r3, #1
 801521c:	2b00      	cmp	r3, #0
 801521e:	d003      	beq.n	8015228 <put_fat+0x11a>
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	091b      	lsrs	r3, r3, #4
 8015224:	b2db      	uxtb	r3, r3
 8015226:	e00e      	b.n	8015246 <put_fat+0x138>
 8015228:	697b      	ldr	r3, [r7, #20]
 801522a:	781b      	ldrb	r3, [r3, #0]
 801522c:	b25b      	sxtb	r3, r3
 801522e:	f023 030f 	bic.w	r3, r3, #15
 8015232:	b25a      	sxtb	r2, r3
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	0a1b      	lsrs	r3, r3, #8
 8015238:	b25b      	sxtb	r3, r3
 801523a:	f003 030f 	and.w	r3, r3, #15
 801523e:	b25b      	sxtb	r3, r3
 8015240:	4313      	orrs	r3, r2
 8015242:	b25b      	sxtb	r3, r3
 8015244:	b2db      	uxtb	r3, r3
 8015246:	697a      	ldr	r2, [r7, #20]
 8015248:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	2201      	movs	r2, #1
 801524e:	70da      	strb	r2, [r3, #3]
			break;
 8015250:	e074      	b.n	801533c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	899b      	ldrh	r3, [r3, #12]
 801525a:	085b      	lsrs	r3, r3, #1
 801525c:	b29b      	uxth	r3, r3
 801525e:	4619      	mov	r1, r3
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	fbb3 f3f1 	udiv	r3, r3, r1
 8015266:	4413      	add	r3, r2
 8015268:	4619      	mov	r1, r3
 801526a:	68f8      	ldr	r0, [r7, #12]
 801526c:	f7ff fdbe 	bl	8014dec <move_window>
 8015270:	4603      	mov	r3, r0
 8015272:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015274:	7ffb      	ldrb	r3, [r7, #31]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d15d      	bne.n	8015336 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	005b      	lsls	r3, r3, #1
 8015284:	68fa      	ldr	r2, [r7, #12]
 8015286:	8992      	ldrh	r2, [r2, #12]
 8015288:	fbb3 f0f2 	udiv	r0, r3, r2
 801528c:	fb00 f202 	mul.w	r2, r0, r2
 8015290:	1a9b      	subs	r3, r3, r2
 8015292:	440b      	add	r3, r1
 8015294:	687a      	ldr	r2, [r7, #4]
 8015296:	b292      	uxth	r2, r2
 8015298:	4611      	mov	r1, r2
 801529a:	4618      	mov	r0, r3
 801529c:	f7ff fb31 	bl	8014902 <st_word>
			fs->wflag = 1;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	2201      	movs	r2, #1
 80152a4:	70da      	strb	r2, [r3, #3]
			break;
 80152a6:	e049      	b.n	801533c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	899b      	ldrh	r3, [r3, #12]
 80152b0:	089b      	lsrs	r3, r3, #2
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	4619      	mov	r1, r3
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80152bc:	4413      	add	r3, r2
 80152be:	4619      	mov	r1, r3
 80152c0:	68f8      	ldr	r0, [r7, #12]
 80152c2:	f7ff fd93 	bl	8014dec <move_window>
 80152c6:	4603      	mov	r3, r0
 80152c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80152ca:	7ffb      	ldrb	r3, [r7, #31]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d134      	bne.n	801533a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	009b      	lsls	r3, r3, #2
 80152e0:	68fa      	ldr	r2, [r7, #12]
 80152e2:	8992      	ldrh	r2, [r2, #12]
 80152e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80152e8:	fb00 f202 	mul.w	r2, r0, r2
 80152ec:	1a9b      	subs	r3, r3, r2
 80152ee:	440b      	add	r3, r1
 80152f0:	4618      	mov	r0, r3
 80152f2:	f7ff fae3 	bl	80148bc <ld_dword>
 80152f6:	4603      	mov	r3, r0
 80152f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80152fc:	4323      	orrs	r3, r4
 80152fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015306:	68bb      	ldr	r3, [r7, #8]
 8015308:	009b      	lsls	r3, r3, #2
 801530a:	68fa      	ldr	r2, [r7, #12]
 801530c:	8992      	ldrh	r2, [r2, #12]
 801530e:	fbb3 f0f2 	udiv	r0, r3, r2
 8015312:	fb00 f202 	mul.w	r2, r0, r2
 8015316:	1a9b      	subs	r3, r3, r2
 8015318:	440b      	add	r3, r1
 801531a:	6879      	ldr	r1, [r7, #4]
 801531c:	4618      	mov	r0, r3
 801531e:	f7ff fb0b 	bl	8014938 <st_dword>
			fs->wflag = 1;
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	2201      	movs	r2, #1
 8015326:	70da      	strb	r2, [r3, #3]
			break;
 8015328:	e008      	b.n	801533c <put_fat+0x22e>
		}
	}
 801532a:	bf00      	nop
 801532c:	e006      	b.n	801533c <put_fat+0x22e>
			if (res != FR_OK) break;
 801532e:	bf00      	nop
 8015330:	e004      	b.n	801533c <put_fat+0x22e>
			if (res != FR_OK) break;
 8015332:	bf00      	nop
 8015334:	e002      	b.n	801533c <put_fat+0x22e>
			if (res != FR_OK) break;
 8015336:	bf00      	nop
 8015338:	e000      	b.n	801533c <put_fat+0x22e>
			if (res != FR_OK) break;
 801533a:	bf00      	nop
	return res;
 801533c:	7ffb      	ldrb	r3, [r7, #31]
}
 801533e:	4618      	mov	r0, r3
 8015340:	3724      	adds	r7, #36	; 0x24
 8015342:	46bd      	mov	sp, r7
 8015344:	bd90      	pop	{r4, r7, pc}

08015346 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015346:	b580      	push	{r7, lr}
 8015348:	b088      	sub	sp, #32
 801534a:	af00      	add	r7, sp, #0
 801534c:	60f8      	str	r0, [r7, #12]
 801534e:	60b9      	str	r1, [r7, #8]
 8015350:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015352:	2300      	movs	r3, #0
 8015354:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801535c:	68bb      	ldr	r3, [r7, #8]
 801535e:	2b01      	cmp	r3, #1
 8015360:	d904      	bls.n	801536c <remove_chain+0x26>
 8015362:	69bb      	ldr	r3, [r7, #24]
 8015364:	69db      	ldr	r3, [r3, #28]
 8015366:	68ba      	ldr	r2, [r7, #8]
 8015368:	429a      	cmp	r2, r3
 801536a:	d301      	bcc.n	8015370 <remove_chain+0x2a>
 801536c:	2302      	movs	r3, #2
 801536e:	e04b      	b.n	8015408 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d00c      	beq.n	8015390 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015376:	f04f 32ff 	mov.w	r2, #4294967295
 801537a:	6879      	ldr	r1, [r7, #4]
 801537c:	69b8      	ldr	r0, [r7, #24]
 801537e:	f7ff fec6 	bl	801510e <put_fat>
 8015382:	4603      	mov	r3, r0
 8015384:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015386:	7ffb      	ldrb	r3, [r7, #31]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d001      	beq.n	8015390 <remove_chain+0x4a>
 801538c:	7ffb      	ldrb	r3, [r7, #31]
 801538e:	e03b      	b.n	8015408 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015390:	68b9      	ldr	r1, [r7, #8]
 8015392:	68f8      	ldr	r0, [r7, #12]
 8015394:	f7ff fde7 	bl	8014f66 <get_fat>
 8015398:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801539a:	697b      	ldr	r3, [r7, #20]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d031      	beq.n	8015404 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80153a0:	697b      	ldr	r3, [r7, #20]
 80153a2:	2b01      	cmp	r3, #1
 80153a4:	d101      	bne.n	80153aa <remove_chain+0x64>
 80153a6:	2302      	movs	r3, #2
 80153a8:	e02e      	b.n	8015408 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153b0:	d101      	bne.n	80153b6 <remove_chain+0x70>
 80153b2:	2301      	movs	r3, #1
 80153b4:	e028      	b.n	8015408 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80153b6:	2200      	movs	r2, #0
 80153b8:	68b9      	ldr	r1, [r7, #8]
 80153ba:	69b8      	ldr	r0, [r7, #24]
 80153bc:	f7ff fea7 	bl	801510e <put_fat>
 80153c0:	4603      	mov	r3, r0
 80153c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80153c4:	7ffb      	ldrb	r3, [r7, #31]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d001      	beq.n	80153ce <remove_chain+0x88>
 80153ca:	7ffb      	ldrb	r3, [r7, #31]
 80153cc:	e01c      	b.n	8015408 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80153ce:	69bb      	ldr	r3, [r7, #24]
 80153d0:	699a      	ldr	r2, [r3, #24]
 80153d2:	69bb      	ldr	r3, [r7, #24]
 80153d4:	69db      	ldr	r3, [r3, #28]
 80153d6:	3b02      	subs	r3, #2
 80153d8:	429a      	cmp	r2, r3
 80153da:	d20b      	bcs.n	80153f4 <remove_chain+0xae>
			fs->free_clst++;
 80153dc:	69bb      	ldr	r3, [r7, #24]
 80153de:	699b      	ldr	r3, [r3, #24]
 80153e0:	1c5a      	adds	r2, r3, #1
 80153e2:	69bb      	ldr	r3, [r7, #24]
 80153e4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80153e6:	69bb      	ldr	r3, [r7, #24]
 80153e8:	791b      	ldrb	r3, [r3, #4]
 80153ea:	f043 0301 	orr.w	r3, r3, #1
 80153ee:	b2da      	uxtb	r2, r3
 80153f0:	69bb      	ldr	r3, [r7, #24]
 80153f2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80153f8:	69bb      	ldr	r3, [r7, #24]
 80153fa:	69db      	ldr	r3, [r3, #28]
 80153fc:	68ba      	ldr	r2, [r7, #8]
 80153fe:	429a      	cmp	r2, r3
 8015400:	d3c6      	bcc.n	8015390 <remove_chain+0x4a>
 8015402:	e000      	b.n	8015406 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015404:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015406:	2300      	movs	r3, #0
}
 8015408:	4618      	mov	r0, r3
 801540a:	3720      	adds	r7, #32
 801540c:	46bd      	mov	sp, r7
 801540e:	bd80      	pop	{r7, pc}

08015410 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b088      	sub	sp, #32
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d10d      	bne.n	8015442 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015426:	693b      	ldr	r3, [r7, #16]
 8015428:	695b      	ldr	r3, [r3, #20]
 801542a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801542c:	69bb      	ldr	r3, [r7, #24]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d004      	beq.n	801543c <create_chain+0x2c>
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	69db      	ldr	r3, [r3, #28]
 8015436:	69ba      	ldr	r2, [r7, #24]
 8015438:	429a      	cmp	r2, r3
 801543a:	d31b      	bcc.n	8015474 <create_chain+0x64>
 801543c:	2301      	movs	r3, #1
 801543e:	61bb      	str	r3, [r7, #24]
 8015440:	e018      	b.n	8015474 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015442:	6839      	ldr	r1, [r7, #0]
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7ff fd8e 	bl	8014f66 <get_fat>
 801544a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	2b01      	cmp	r3, #1
 8015450:	d801      	bhi.n	8015456 <create_chain+0x46>
 8015452:	2301      	movs	r3, #1
 8015454:	e070      	b.n	8015538 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801545c:	d101      	bne.n	8015462 <create_chain+0x52>
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	e06a      	b.n	8015538 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015462:	693b      	ldr	r3, [r7, #16]
 8015464:	69db      	ldr	r3, [r3, #28]
 8015466:	68fa      	ldr	r2, [r7, #12]
 8015468:	429a      	cmp	r2, r3
 801546a:	d201      	bcs.n	8015470 <create_chain+0x60>
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	e063      	b.n	8015538 <create_chain+0x128>
		scl = clst;
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015474:	69bb      	ldr	r3, [r7, #24]
 8015476:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015478:	69fb      	ldr	r3, [r7, #28]
 801547a:	3301      	adds	r3, #1
 801547c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801547e:	693b      	ldr	r3, [r7, #16]
 8015480:	69db      	ldr	r3, [r3, #28]
 8015482:	69fa      	ldr	r2, [r7, #28]
 8015484:	429a      	cmp	r2, r3
 8015486:	d307      	bcc.n	8015498 <create_chain+0x88>
				ncl = 2;
 8015488:	2302      	movs	r3, #2
 801548a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801548c:	69fa      	ldr	r2, [r7, #28]
 801548e:	69bb      	ldr	r3, [r7, #24]
 8015490:	429a      	cmp	r2, r3
 8015492:	d901      	bls.n	8015498 <create_chain+0x88>
 8015494:	2300      	movs	r3, #0
 8015496:	e04f      	b.n	8015538 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015498:	69f9      	ldr	r1, [r7, #28]
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	f7ff fd63 	bl	8014f66 <get_fat>
 80154a0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d00e      	beq.n	80154c6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	2b01      	cmp	r3, #1
 80154ac:	d003      	beq.n	80154b6 <create_chain+0xa6>
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154b4:	d101      	bne.n	80154ba <create_chain+0xaa>
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	e03e      	b.n	8015538 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80154ba:	69fa      	ldr	r2, [r7, #28]
 80154bc:	69bb      	ldr	r3, [r7, #24]
 80154be:	429a      	cmp	r2, r3
 80154c0:	d1da      	bne.n	8015478 <create_chain+0x68>
 80154c2:	2300      	movs	r3, #0
 80154c4:	e038      	b.n	8015538 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80154c6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80154c8:	f04f 32ff 	mov.w	r2, #4294967295
 80154cc:	69f9      	ldr	r1, [r7, #28]
 80154ce:	6938      	ldr	r0, [r7, #16]
 80154d0:	f7ff fe1d 	bl	801510e <put_fat>
 80154d4:	4603      	mov	r3, r0
 80154d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80154d8:	7dfb      	ldrb	r3, [r7, #23]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d109      	bne.n	80154f2 <create_chain+0xe2>
 80154de:	683b      	ldr	r3, [r7, #0]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d006      	beq.n	80154f2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80154e4:	69fa      	ldr	r2, [r7, #28]
 80154e6:	6839      	ldr	r1, [r7, #0]
 80154e8:	6938      	ldr	r0, [r7, #16]
 80154ea:	f7ff fe10 	bl	801510e <put_fat>
 80154ee:	4603      	mov	r3, r0
 80154f0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80154f2:	7dfb      	ldrb	r3, [r7, #23]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d116      	bne.n	8015526 <create_chain+0x116>
		fs->last_clst = ncl;
 80154f8:	693b      	ldr	r3, [r7, #16]
 80154fa:	69fa      	ldr	r2, [r7, #28]
 80154fc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80154fe:	693b      	ldr	r3, [r7, #16]
 8015500:	699a      	ldr	r2, [r3, #24]
 8015502:	693b      	ldr	r3, [r7, #16]
 8015504:	69db      	ldr	r3, [r3, #28]
 8015506:	3b02      	subs	r3, #2
 8015508:	429a      	cmp	r2, r3
 801550a:	d804      	bhi.n	8015516 <create_chain+0x106>
 801550c:	693b      	ldr	r3, [r7, #16]
 801550e:	699b      	ldr	r3, [r3, #24]
 8015510:	1e5a      	subs	r2, r3, #1
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	791b      	ldrb	r3, [r3, #4]
 801551a:	f043 0301 	orr.w	r3, r3, #1
 801551e:	b2da      	uxtb	r2, r3
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	711a      	strb	r2, [r3, #4]
 8015524:	e007      	b.n	8015536 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015526:	7dfb      	ldrb	r3, [r7, #23]
 8015528:	2b01      	cmp	r3, #1
 801552a:	d102      	bne.n	8015532 <create_chain+0x122>
 801552c:	f04f 33ff 	mov.w	r3, #4294967295
 8015530:	e000      	b.n	8015534 <create_chain+0x124>
 8015532:	2301      	movs	r3, #1
 8015534:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015536:	69fb      	ldr	r3, [r7, #28]
}
 8015538:	4618      	mov	r0, r3
 801553a:	3720      	adds	r7, #32
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}

08015540 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015540:	b480      	push	{r7}
 8015542:	b087      	sub	sp, #28
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
 8015548:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015554:	3304      	adds	r3, #4
 8015556:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	899b      	ldrh	r3, [r3, #12]
 801555c:	461a      	mov	r2, r3
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	fbb3 f3f2 	udiv	r3, r3, r2
 8015564:	68fa      	ldr	r2, [r7, #12]
 8015566:	8952      	ldrh	r2, [r2, #10]
 8015568:	fbb3 f3f2 	udiv	r3, r3, r2
 801556c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801556e:	693b      	ldr	r3, [r7, #16]
 8015570:	1d1a      	adds	r2, r3, #4
 8015572:	613a      	str	r2, [r7, #16]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d101      	bne.n	8015582 <clmt_clust+0x42>
 801557e:	2300      	movs	r3, #0
 8015580:	e010      	b.n	80155a4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8015582:	697a      	ldr	r2, [r7, #20]
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	429a      	cmp	r2, r3
 8015588:	d307      	bcc.n	801559a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801558a:	697a      	ldr	r2, [r7, #20]
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	1ad3      	subs	r3, r2, r3
 8015590:	617b      	str	r3, [r7, #20]
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	3304      	adds	r3, #4
 8015596:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015598:	e7e9      	b.n	801556e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801559a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	681a      	ldr	r2, [r3, #0]
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	4413      	add	r3, r2
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	371c      	adds	r7, #28
 80155a8:	46bd      	mov	sp, r7
 80155aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ae:	4770      	bx	lr

080155b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b086      	sub	sp, #24
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80155c6:	d204      	bcs.n	80155d2 <dir_sdi+0x22>
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	f003 031f 	and.w	r3, r3, #31
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d001      	beq.n	80155d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80155d2:	2302      	movs	r3, #2
 80155d4:	e071      	b.n	80156ba <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	683a      	ldr	r2, [r7, #0]
 80155da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	689b      	ldr	r3, [r3, #8]
 80155e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d106      	bne.n	80155f6 <dir_sdi+0x46>
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	781b      	ldrb	r3, [r3, #0]
 80155ec:	2b02      	cmp	r3, #2
 80155ee:	d902      	bls.n	80155f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80155f0:	693b      	ldr	r3, [r7, #16]
 80155f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d10c      	bne.n	8015616 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	095b      	lsrs	r3, r3, #5
 8015600:	693a      	ldr	r2, [r7, #16]
 8015602:	8912      	ldrh	r2, [r2, #8]
 8015604:	4293      	cmp	r3, r2
 8015606:	d301      	bcc.n	801560c <dir_sdi+0x5c>
 8015608:	2302      	movs	r3, #2
 801560a:	e056      	b.n	80156ba <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	61da      	str	r2, [r3, #28]
 8015614:	e02d      	b.n	8015672 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015616:	693b      	ldr	r3, [r7, #16]
 8015618:	895b      	ldrh	r3, [r3, #10]
 801561a:	461a      	mov	r2, r3
 801561c:	693b      	ldr	r3, [r7, #16]
 801561e:	899b      	ldrh	r3, [r3, #12]
 8015620:	fb02 f303 	mul.w	r3, r2, r3
 8015624:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015626:	e019      	b.n	801565c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6979      	ldr	r1, [r7, #20]
 801562c:	4618      	mov	r0, r3
 801562e:	f7ff fc9a 	bl	8014f66 <get_fat>
 8015632:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801563a:	d101      	bne.n	8015640 <dir_sdi+0x90>
 801563c:	2301      	movs	r3, #1
 801563e:	e03c      	b.n	80156ba <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015640:	697b      	ldr	r3, [r7, #20]
 8015642:	2b01      	cmp	r3, #1
 8015644:	d904      	bls.n	8015650 <dir_sdi+0xa0>
 8015646:	693b      	ldr	r3, [r7, #16]
 8015648:	69db      	ldr	r3, [r3, #28]
 801564a:	697a      	ldr	r2, [r7, #20]
 801564c:	429a      	cmp	r2, r3
 801564e:	d301      	bcc.n	8015654 <dir_sdi+0xa4>
 8015650:	2302      	movs	r3, #2
 8015652:	e032      	b.n	80156ba <dir_sdi+0x10a>
			ofs -= csz;
 8015654:	683a      	ldr	r2, [r7, #0]
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	1ad3      	subs	r3, r2, r3
 801565a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801565c:	683a      	ldr	r2, [r7, #0]
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	429a      	cmp	r2, r3
 8015662:	d2e1      	bcs.n	8015628 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8015664:	6979      	ldr	r1, [r7, #20]
 8015666:	6938      	ldr	r0, [r7, #16]
 8015668:	f7ff fc5e 	bl	8014f28 <clust2sect>
 801566c:	4602      	mov	r2, r0
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	697a      	ldr	r2, [r7, #20]
 8015676:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	69db      	ldr	r3, [r3, #28]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d101      	bne.n	8015684 <dir_sdi+0xd4>
 8015680:	2302      	movs	r3, #2
 8015682:	e01a      	b.n	80156ba <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	69da      	ldr	r2, [r3, #28]
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	899b      	ldrh	r3, [r3, #12]
 801568c:	4619      	mov	r1, r3
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	fbb3 f3f1 	udiv	r3, r3, r1
 8015694:	441a      	add	r2, r3
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801569a:	693b      	ldr	r3, [r7, #16]
 801569c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80156a0:	693b      	ldr	r3, [r7, #16]
 80156a2:	899b      	ldrh	r3, [r3, #12]
 80156a4:	461a      	mov	r2, r3
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80156ac:	fb00 f202 	mul.w	r2, r0, r2
 80156b0:	1a9b      	subs	r3, r3, r2
 80156b2:	18ca      	adds	r2, r1, r3
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80156b8:	2300      	movs	r3, #0
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	3718      	adds	r7, #24
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}

080156c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80156c2:	b580      	push	{r7, lr}
 80156c4:	b086      	sub	sp, #24
 80156c6:	af00      	add	r7, sp, #0
 80156c8:	6078      	str	r0, [r7, #4]
 80156ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	695b      	ldr	r3, [r3, #20]
 80156d6:	3320      	adds	r3, #32
 80156d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	69db      	ldr	r3, [r3, #28]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d003      	beq.n	80156ea <dir_next+0x28>
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80156e8:	d301      	bcc.n	80156ee <dir_next+0x2c>
 80156ea:	2304      	movs	r3, #4
 80156ec:	e0bb      	b.n	8015866 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	899b      	ldrh	r3, [r3, #12]
 80156f2:	461a      	mov	r2, r3
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80156fa:	fb01 f202 	mul.w	r2, r1, r2
 80156fe:	1a9b      	subs	r3, r3, r2
 8015700:	2b00      	cmp	r3, #0
 8015702:	f040 809d 	bne.w	8015840 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	69db      	ldr	r3, [r3, #28]
 801570a:	1c5a      	adds	r2, r3, #1
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	699b      	ldr	r3, [r3, #24]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d10b      	bne.n	8015730 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	095b      	lsrs	r3, r3, #5
 801571c:	68fa      	ldr	r2, [r7, #12]
 801571e:	8912      	ldrh	r2, [r2, #8]
 8015720:	4293      	cmp	r3, r2
 8015722:	f0c0 808d 	bcc.w	8015840 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	2200      	movs	r2, #0
 801572a:	61da      	str	r2, [r3, #28]
 801572c:	2304      	movs	r3, #4
 801572e:	e09a      	b.n	8015866 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	899b      	ldrh	r3, [r3, #12]
 8015734:	461a      	mov	r2, r3
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	fbb3 f3f2 	udiv	r3, r3, r2
 801573c:	68fa      	ldr	r2, [r7, #12]
 801573e:	8952      	ldrh	r2, [r2, #10]
 8015740:	3a01      	subs	r2, #1
 8015742:	4013      	ands	r3, r2
 8015744:	2b00      	cmp	r3, #0
 8015746:	d17b      	bne.n	8015840 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	699b      	ldr	r3, [r3, #24]
 801574e:	4619      	mov	r1, r3
 8015750:	4610      	mov	r0, r2
 8015752:	f7ff fc08 	bl	8014f66 <get_fat>
 8015756:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	2b01      	cmp	r3, #1
 801575c:	d801      	bhi.n	8015762 <dir_next+0xa0>
 801575e:	2302      	movs	r3, #2
 8015760:	e081      	b.n	8015866 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015768:	d101      	bne.n	801576e <dir_next+0xac>
 801576a:	2301      	movs	r3, #1
 801576c:	e07b      	b.n	8015866 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	69db      	ldr	r3, [r3, #28]
 8015772:	697a      	ldr	r2, [r7, #20]
 8015774:	429a      	cmp	r2, r3
 8015776:	d359      	bcc.n	801582c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d104      	bne.n	8015788 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2200      	movs	r2, #0
 8015782:	61da      	str	r2, [r3, #28]
 8015784:	2304      	movs	r3, #4
 8015786:	e06e      	b.n	8015866 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015788:	687a      	ldr	r2, [r7, #4]
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	699b      	ldr	r3, [r3, #24]
 801578e:	4619      	mov	r1, r3
 8015790:	4610      	mov	r0, r2
 8015792:	f7ff fe3d 	bl	8015410 <create_chain>
 8015796:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015798:	697b      	ldr	r3, [r7, #20]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d101      	bne.n	80157a2 <dir_next+0xe0>
 801579e:	2307      	movs	r3, #7
 80157a0:	e061      	b.n	8015866 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	2b01      	cmp	r3, #1
 80157a6:	d101      	bne.n	80157ac <dir_next+0xea>
 80157a8:	2302      	movs	r3, #2
 80157aa:	e05c      	b.n	8015866 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157b2:	d101      	bne.n	80157b8 <dir_next+0xf6>
 80157b4:	2301      	movs	r3, #1
 80157b6:	e056      	b.n	8015866 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80157b8:	68f8      	ldr	r0, [r7, #12]
 80157ba:	f7ff fad3 	bl	8014d64 <sync_window>
 80157be:	4603      	mov	r3, r0
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d001      	beq.n	80157c8 <dir_next+0x106>
 80157c4:	2301      	movs	r3, #1
 80157c6:	e04e      	b.n	8015866 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	899b      	ldrh	r3, [r3, #12]
 80157d2:	461a      	mov	r2, r3
 80157d4:	2100      	movs	r1, #0
 80157d6:	f7ff f8fc 	bl	80149d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80157da:	2300      	movs	r3, #0
 80157dc:	613b      	str	r3, [r7, #16]
 80157de:	6979      	ldr	r1, [r7, #20]
 80157e0:	68f8      	ldr	r0, [r7, #12]
 80157e2:	f7ff fba1 	bl	8014f28 <clust2sect>
 80157e6:	4602      	mov	r2, r0
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	635a      	str	r2, [r3, #52]	; 0x34
 80157ec:	e012      	b.n	8015814 <dir_next+0x152>
						fs->wflag = 1;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2201      	movs	r2, #1
 80157f2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80157f4:	68f8      	ldr	r0, [r7, #12]
 80157f6:	f7ff fab5 	bl	8014d64 <sync_window>
 80157fa:	4603      	mov	r3, r0
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d001      	beq.n	8015804 <dir_next+0x142>
 8015800:	2301      	movs	r3, #1
 8015802:	e030      	b.n	8015866 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015804:	693b      	ldr	r3, [r7, #16]
 8015806:	3301      	adds	r3, #1
 8015808:	613b      	str	r3, [r7, #16]
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801580e:	1c5a      	adds	r2, r3, #1
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	635a      	str	r2, [r3, #52]	; 0x34
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	895b      	ldrh	r3, [r3, #10]
 8015818:	461a      	mov	r2, r3
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	4293      	cmp	r3, r2
 801581e:	d3e6      	bcc.n	80157ee <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015824:	693b      	ldr	r3, [r7, #16]
 8015826:	1ad2      	subs	r2, r2, r3
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	697a      	ldr	r2, [r7, #20]
 8015830:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015832:	6979      	ldr	r1, [r7, #20]
 8015834:	68f8      	ldr	r0, [r7, #12]
 8015836:	f7ff fb77 	bl	8014f28 <clust2sect>
 801583a:	4602      	mov	r2, r0
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	68ba      	ldr	r2, [r7, #8]
 8015844:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	899b      	ldrh	r3, [r3, #12]
 8015850:	461a      	mov	r2, r3
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	fbb3 f0f2 	udiv	r0, r3, r2
 8015858:	fb00 f202 	mul.w	r2, r0, r2
 801585c:	1a9b      	subs	r3, r3, r2
 801585e:	18ca      	adds	r2, r1, r3
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015864:	2300      	movs	r3, #0
}
 8015866:	4618      	mov	r0, r3
 8015868:	3718      	adds	r7, #24
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}

0801586e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801586e:	b580      	push	{r7, lr}
 8015870:	b086      	sub	sp, #24
 8015872:	af00      	add	r7, sp, #0
 8015874:	6078      	str	r0, [r7, #4]
 8015876:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801587e:	2100      	movs	r1, #0
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f7ff fe95 	bl	80155b0 <dir_sdi>
 8015886:	4603      	mov	r3, r0
 8015888:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801588a:	7dfb      	ldrb	r3, [r7, #23]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d12b      	bne.n	80158e8 <dir_alloc+0x7a>
		n = 0;
 8015890:	2300      	movs	r3, #0
 8015892:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	69db      	ldr	r3, [r3, #28]
 8015898:	4619      	mov	r1, r3
 801589a:	68f8      	ldr	r0, [r7, #12]
 801589c:	f7ff faa6 	bl	8014dec <move_window>
 80158a0:	4603      	mov	r3, r0
 80158a2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80158a4:	7dfb      	ldrb	r3, [r7, #23]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d11d      	bne.n	80158e6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	6a1b      	ldr	r3, [r3, #32]
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	2be5      	cmp	r3, #229	; 0xe5
 80158b2:	d004      	beq.n	80158be <dir_alloc+0x50>
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	6a1b      	ldr	r3, [r3, #32]
 80158b8:	781b      	ldrb	r3, [r3, #0]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d107      	bne.n	80158ce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80158be:	693b      	ldr	r3, [r7, #16]
 80158c0:	3301      	adds	r3, #1
 80158c2:	613b      	str	r3, [r7, #16]
 80158c4:	693a      	ldr	r2, [r7, #16]
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d102      	bne.n	80158d2 <dir_alloc+0x64>
 80158cc:	e00c      	b.n	80158e8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80158ce:	2300      	movs	r3, #0
 80158d0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80158d2:	2101      	movs	r1, #1
 80158d4:	6878      	ldr	r0, [r7, #4]
 80158d6:	f7ff fef4 	bl	80156c2 <dir_next>
 80158da:	4603      	mov	r3, r0
 80158dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80158de:	7dfb      	ldrb	r3, [r7, #23]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d0d7      	beq.n	8015894 <dir_alloc+0x26>
 80158e4:	e000      	b.n	80158e8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80158e6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80158e8:	7dfb      	ldrb	r3, [r7, #23]
 80158ea:	2b04      	cmp	r3, #4
 80158ec:	d101      	bne.n	80158f2 <dir_alloc+0x84>
 80158ee:	2307      	movs	r3, #7
 80158f0:	75fb      	strb	r3, [r7, #23]
	return res;
 80158f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80158f4:	4618      	mov	r0, r3
 80158f6:	3718      	adds	r7, #24
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}

080158fc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b084      	sub	sp, #16
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
 8015904:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	331a      	adds	r3, #26
 801590a:	4618      	mov	r0, r3
 801590c:	f7fe ffbe 	bl	801488c <ld_word>
 8015910:	4603      	mov	r3, r0
 8015912:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	2b03      	cmp	r3, #3
 801591a:	d109      	bne.n	8015930 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	3314      	adds	r3, #20
 8015920:	4618      	mov	r0, r3
 8015922:	f7fe ffb3 	bl	801488c <ld_word>
 8015926:	4603      	mov	r3, r0
 8015928:	041b      	lsls	r3, r3, #16
 801592a:	68fa      	ldr	r2, [r7, #12]
 801592c:	4313      	orrs	r3, r2
 801592e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015930:	68fb      	ldr	r3, [r7, #12]
}
 8015932:	4618      	mov	r0, r3
 8015934:	3710      	adds	r7, #16
 8015936:	46bd      	mov	sp, r7
 8015938:	bd80      	pop	{r7, pc}

0801593a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801593a:	b580      	push	{r7, lr}
 801593c:	b084      	sub	sp, #16
 801593e:	af00      	add	r7, sp, #0
 8015940:	60f8      	str	r0, [r7, #12]
 8015942:	60b9      	str	r1, [r7, #8]
 8015944:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015946:	68bb      	ldr	r3, [r7, #8]
 8015948:	331a      	adds	r3, #26
 801594a:	687a      	ldr	r2, [r7, #4]
 801594c:	b292      	uxth	r2, r2
 801594e:	4611      	mov	r1, r2
 8015950:	4618      	mov	r0, r3
 8015952:	f7fe ffd6 	bl	8014902 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	781b      	ldrb	r3, [r3, #0]
 801595a:	2b03      	cmp	r3, #3
 801595c:	d109      	bne.n	8015972 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801595e:	68bb      	ldr	r3, [r7, #8]
 8015960:	f103 0214 	add.w	r2, r3, #20
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	0c1b      	lsrs	r3, r3, #16
 8015968:	b29b      	uxth	r3, r3
 801596a:	4619      	mov	r1, r3
 801596c:	4610      	mov	r0, r2
 801596e:	f7fe ffc8 	bl	8014902 <st_word>
	}
}
 8015972:	bf00      	nop
 8015974:	3710      	adds	r7, #16
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
	...

0801597c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801597c:	b590      	push	{r4, r7, lr}
 801597e:	b087      	sub	sp, #28
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
 8015984:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	331a      	adds	r3, #26
 801598a:	4618      	mov	r0, r3
 801598c:	f7fe ff7e 	bl	801488c <ld_word>
 8015990:	4603      	mov	r3, r0
 8015992:	2b00      	cmp	r3, #0
 8015994:	d001      	beq.n	801599a <cmp_lfn+0x1e>
 8015996:	2300      	movs	r3, #0
 8015998:	e059      	b.n	8015a4e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80159a2:	1e5a      	subs	r2, r3, #1
 80159a4:	4613      	mov	r3, r2
 80159a6:	005b      	lsls	r3, r3, #1
 80159a8:	4413      	add	r3, r2
 80159aa:	009b      	lsls	r3, r3, #2
 80159ac:	4413      	add	r3, r2
 80159ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80159b0:	2301      	movs	r3, #1
 80159b2:	81fb      	strh	r3, [r7, #14]
 80159b4:	2300      	movs	r3, #0
 80159b6:	613b      	str	r3, [r7, #16]
 80159b8:	e033      	b.n	8015a22 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80159ba:	4a27      	ldr	r2, [pc, #156]	; (8015a58 <cmp_lfn+0xdc>)
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	4413      	add	r3, r2
 80159c0:	781b      	ldrb	r3, [r3, #0]
 80159c2:	461a      	mov	r2, r3
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	4413      	add	r3, r2
 80159c8:	4618      	mov	r0, r3
 80159ca:	f7fe ff5f 	bl	801488c <ld_word>
 80159ce:	4603      	mov	r3, r0
 80159d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80159d2:	89fb      	ldrh	r3, [r7, #14]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d01a      	beq.n	8015a0e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	2bfe      	cmp	r3, #254	; 0xfe
 80159dc:	d812      	bhi.n	8015a04 <cmp_lfn+0x88>
 80159de:	89bb      	ldrh	r3, [r7, #12]
 80159e0:	4618      	mov	r0, r3
 80159e2:	f001 fe11 	bl	8017608 <ff_wtoupper>
 80159e6:	4603      	mov	r3, r0
 80159e8:	461c      	mov	r4, r3
 80159ea:	697b      	ldr	r3, [r7, #20]
 80159ec:	1c5a      	adds	r2, r3, #1
 80159ee:	617a      	str	r2, [r7, #20]
 80159f0:	005b      	lsls	r3, r3, #1
 80159f2:	687a      	ldr	r2, [r7, #4]
 80159f4:	4413      	add	r3, r2
 80159f6:	881b      	ldrh	r3, [r3, #0]
 80159f8:	4618      	mov	r0, r3
 80159fa:	f001 fe05 	bl	8017608 <ff_wtoupper>
 80159fe:	4603      	mov	r3, r0
 8015a00:	429c      	cmp	r4, r3
 8015a02:	d001      	beq.n	8015a08 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8015a04:	2300      	movs	r3, #0
 8015a06:	e022      	b.n	8015a4e <cmp_lfn+0xd2>
			}
			wc = uc;
 8015a08:	89bb      	ldrh	r3, [r7, #12]
 8015a0a:	81fb      	strh	r3, [r7, #14]
 8015a0c:	e006      	b.n	8015a1c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015a0e:	89bb      	ldrh	r3, [r7, #12]
 8015a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a14:	4293      	cmp	r3, r2
 8015a16:	d001      	beq.n	8015a1c <cmp_lfn+0xa0>
 8015a18:	2300      	movs	r3, #0
 8015a1a:	e018      	b.n	8015a4e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	3301      	adds	r3, #1
 8015a20:	613b      	str	r3, [r7, #16]
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	2b0c      	cmp	r3, #12
 8015a26:	d9c8      	bls.n	80159ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d00b      	beq.n	8015a4c <cmp_lfn+0xd0>
 8015a34:	89fb      	ldrh	r3, [r7, #14]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d008      	beq.n	8015a4c <cmp_lfn+0xd0>
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	005b      	lsls	r3, r3, #1
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	4413      	add	r3, r2
 8015a42:	881b      	ldrh	r3, [r3, #0]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d001      	beq.n	8015a4c <cmp_lfn+0xd0>
 8015a48:	2300      	movs	r3, #0
 8015a4a:	e000      	b.n	8015a4e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8015a4c:	2301      	movs	r3, #1
}
 8015a4e:	4618      	mov	r0, r3
 8015a50:	371c      	adds	r7, #28
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd90      	pop	{r4, r7, pc}
 8015a56:	bf00      	nop
 8015a58:	0801ca64 	.word	0x0801ca64

08015a5c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b088      	sub	sp, #32
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	60b9      	str	r1, [r7, #8]
 8015a66:	4611      	mov	r1, r2
 8015a68:	461a      	mov	r2, r3
 8015a6a:	460b      	mov	r3, r1
 8015a6c:	71fb      	strb	r3, [r7, #7]
 8015a6e:	4613      	mov	r3, r2
 8015a70:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8015a72:	68bb      	ldr	r3, [r7, #8]
 8015a74:	330d      	adds	r3, #13
 8015a76:	79ba      	ldrb	r2, [r7, #6]
 8015a78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015a7a:	68bb      	ldr	r3, [r7, #8]
 8015a7c:	330b      	adds	r3, #11
 8015a7e:	220f      	movs	r2, #15
 8015a80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8015a82:	68bb      	ldr	r3, [r7, #8]
 8015a84:	330c      	adds	r3, #12
 8015a86:	2200      	movs	r2, #0
 8015a88:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8015a8a:	68bb      	ldr	r3, [r7, #8]
 8015a8c:	331a      	adds	r3, #26
 8015a8e:	2100      	movs	r1, #0
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7fe ff36 	bl	8014902 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015a96:	79fb      	ldrb	r3, [r7, #7]
 8015a98:	1e5a      	subs	r2, r3, #1
 8015a9a:	4613      	mov	r3, r2
 8015a9c:	005b      	lsls	r3, r3, #1
 8015a9e:	4413      	add	r3, r2
 8015aa0:	009b      	lsls	r3, r3, #2
 8015aa2:	4413      	add	r3, r2
 8015aa4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	82fb      	strh	r3, [r7, #22]
 8015aaa:	2300      	movs	r3, #0
 8015aac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015aae:	8afb      	ldrh	r3, [r7, #22]
 8015ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ab4:	4293      	cmp	r3, r2
 8015ab6:	d007      	beq.n	8015ac8 <put_lfn+0x6c>
 8015ab8:	69fb      	ldr	r3, [r7, #28]
 8015aba:	1c5a      	adds	r2, r3, #1
 8015abc:	61fa      	str	r2, [r7, #28]
 8015abe:	005b      	lsls	r3, r3, #1
 8015ac0:	68fa      	ldr	r2, [r7, #12]
 8015ac2:	4413      	add	r3, r2
 8015ac4:	881b      	ldrh	r3, [r3, #0]
 8015ac6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8015ac8:	4a17      	ldr	r2, [pc, #92]	; (8015b28 <put_lfn+0xcc>)
 8015aca:	69bb      	ldr	r3, [r7, #24]
 8015acc:	4413      	add	r3, r2
 8015ace:	781b      	ldrb	r3, [r3, #0]
 8015ad0:	461a      	mov	r2, r3
 8015ad2:	68bb      	ldr	r3, [r7, #8]
 8015ad4:	4413      	add	r3, r2
 8015ad6:	8afa      	ldrh	r2, [r7, #22]
 8015ad8:	4611      	mov	r1, r2
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7fe ff11 	bl	8014902 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015ae0:	8afb      	ldrh	r3, [r7, #22]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d102      	bne.n	8015aec <put_lfn+0x90>
 8015ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015aea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8015aec:	69bb      	ldr	r3, [r7, #24]
 8015aee:	3301      	adds	r3, #1
 8015af0:	61bb      	str	r3, [r7, #24]
 8015af2:	69bb      	ldr	r3, [r7, #24]
 8015af4:	2b0c      	cmp	r3, #12
 8015af6:	d9da      	bls.n	8015aae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015af8:	8afb      	ldrh	r3, [r7, #22]
 8015afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015afe:	4293      	cmp	r3, r2
 8015b00:	d006      	beq.n	8015b10 <put_lfn+0xb4>
 8015b02:	69fb      	ldr	r3, [r7, #28]
 8015b04:	005b      	lsls	r3, r3, #1
 8015b06:	68fa      	ldr	r2, [r7, #12]
 8015b08:	4413      	add	r3, r2
 8015b0a:	881b      	ldrh	r3, [r3, #0]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d103      	bne.n	8015b18 <put_lfn+0xbc>
 8015b10:	79fb      	ldrb	r3, [r7, #7]
 8015b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b16:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	79fa      	ldrb	r2, [r7, #7]
 8015b1c:	701a      	strb	r2, [r3, #0]
}
 8015b1e:	bf00      	nop
 8015b20:	3720      	adds	r7, #32
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}
 8015b26:	bf00      	nop
 8015b28:	0801ca64 	.word	0x0801ca64

08015b2c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b08c      	sub	sp, #48	; 0x30
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	60f8      	str	r0, [r7, #12]
 8015b34:	60b9      	str	r1, [r7, #8]
 8015b36:	607a      	str	r2, [r7, #4]
 8015b38:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8015b3a:	220b      	movs	r2, #11
 8015b3c:	68b9      	ldr	r1, [r7, #8]
 8015b3e:	68f8      	ldr	r0, [r7, #12]
 8015b40:	f7fe ff26 	bl	8014990 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	2b05      	cmp	r3, #5
 8015b48:	d929      	bls.n	8015b9e <gen_numname+0x72>
		sr = seq;
 8015b4a:	683b      	ldr	r3, [r7, #0]
 8015b4c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8015b4e:	e020      	b.n	8015b92 <gen_numname+0x66>
			wc = *lfn++;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	1c9a      	adds	r2, r3, #2
 8015b54:	607a      	str	r2, [r7, #4]
 8015b56:	881b      	ldrh	r3, [r3, #0]
 8015b58:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b5e:	e015      	b.n	8015b8c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8015b60:	69fb      	ldr	r3, [r7, #28]
 8015b62:	005a      	lsls	r2, r3, #1
 8015b64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b66:	f003 0301 	and.w	r3, r3, #1
 8015b6a:	4413      	add	r3, r2
 8015b6c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8015b6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b70:	085b      	lsrs	r3, r3, #1
 8015b72:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8015b74:	69fb      	ldr	r3, [r7, #28]
 8015b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d003      	beq.n	8015b86 <gen_numname+0x5a>
 8015b7e:	69fa      	ldr	r2, [r7, #28]
 8015b80:	4b30      	ldr	r3, [pc, #192]	; (8015c44 <gen_numname+0x118>)
 8015b82:	4053      	eors	r3, r2
 8015b84:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8015b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b88:	3301      	adds	r3, #1
 8015b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b8e:	2b0f      	cmp	r3, #15
 8015b90:	d9e6      	bls.n	8015b60 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	881b      	ldrh	r3, [r3, #0]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d1da      	bne.n	8015b50 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8015b9a:	69fb      	ldr	r3, [r7, #28]
 8015b9c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8015b9e:	2307      	movs	r3, #7
 8015ba0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	b2db      	uxtb	r3, r3
 8015ba6:	f003 030f 	and.w	r3, r3, #15
 8015baa:	b2db      	uxtb	r3, r3
 8015bac:	3330      	adds	r3, #48	; 0x30
 8015bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8015bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015bb6:	2b39      	cmp	r3, #57	; 0x39
 8015bb8:	d904      	bls.n	8015bc4 <gen_numname+0x98>
 8015bba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015bbe:	3307      	adds	r3, #7
 8015bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8015bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc6:	1e5a      	subs	r2, r3, #1
 8015bc8:	62ba      	str	r2, [r7, #40]	; 0x28
 8015bca:	3330      	adds	r3, #48	; 0x30
 8015bcc:	443b      	add	r3, r7
 8015bce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8015bd2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	091b      	lsrs	r3, r3, #4
 8015bda:	603b      	str	r3, [r7, #0]
	} while (seq);
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d1df      	bne.n	8015ba2 <gen_numname+0x76>
	ns[i] = '~';
 8015be2:	f107 0214 	add.w	r2, r7, #20
 8015be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be8:	4413      	add	r3, r2
 8015bea:	227e      	movs	r2, #126	; 0x7e
 8015bec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015bee:	2300      	movs	r3, #0
 8015bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8015bf2:	e002      	b.n	8015bfa <gen_numname+0xce>
 8015bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf6:	3301      	adds	r3, #1
 8015bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8015bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d205      	bcs.n	8015c0e <gen_numname+0xe2>
 8015c02:	68fa      	ldr	r2, [r7, #12]
 8015c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c06:	4413      	add	r3, r2
 8015c08:	781b      	ldrb	r3, [r3, #0]
 8015c0a:	2b20      	cmp	r3, #32
 8015c0c:	d1f2      	bne.n	8015bf4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c10:	2b07      	cmp	r3, #7
 8015c12:	d807      	bhi.n	8015c24 <gen_numname+0xf8>
 8015c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c16:	1c5a      	adds	r2, r3, #1
 8015c18:	62ba      	str	r2, [r7, #40]	; 0x28
 8015c1a:	3330      	adds	r3, #48	; 0x30
 8015c1c:	443b      	add	r3, r7
 8015c1e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8015c22:	e000      	b.n	8015c26 <gen_numname+0xfa>
 8015c24:	2120      	movs	r1, #32
 8015c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c28:	1c5a      	adds	r2, r3, #1
 8015c2a:	627a      	str	r2, [r7, #36]	; 0x24
 8015c2c:	68fa      	ldr	r2, [r7, #12]
 8015c2e:	4413      	add	r3, r2
 8015c30:	460a      	mov	r2, r1
 8015c32:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8015c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c36:	2b07      	cmp	r3, #7
 8015c38:	d9e9      	bls.n	8015c0e <gen_numname+0xe2>
}
 8015c3a:	bf00      	nop
 8015c3c:	bf00      	nop
 8015c3e:	3730      	adds	r7, #48	; 0x30
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}
 8015c44:	00011021 	.word	0x00011021

08015c48 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8015c48:	b480      	push	{r7}
 8015c4a:	b085      	sub	sp, #20
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8015c50:	2300      	movs	r3, #0
 8015c52:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8015c54:	230b      	movs	r3, #11
 8015c56:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015c58:	7bfb      	ldrb	r3, [r7, #15]
 8015c5a:	b2da      	uxtb	r2, r3
 8015c5c:	0852      	lsrs	r2, r2, #1
 8015c5e:	01db      	lsls	r3, r3, #7
 8015c60:	4313      	orrs	r3, r2
 8015c62:	b2da      	uxtb	r2, r3
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	1c59      	adds	r1, r3, #1
 8015c68:	6079      	str	r1, [r7, #4]
 8015c6a:	781b      	ldrb	r3, [r3, #0]
 8015c6c:	4413      	add	r3, r2
 8015c6e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	3b01      	subs	r3, #1
 8015c74:	60bb      	str	r3, [r7, #8]
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d1ed      	bne.n	8015c58 <sum_sfn+0x10>
	return sum;
 8015c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c7e:	4618      	mov	r0, r3
 8015c80:	3714      	adds	r7, #20
 8015c82:	46bd      	mov	sp, r7
 8015c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c88:	4770      	bx	lr

08015c8a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015c8a:	b580      	push	{r7, lr}
 8015c8c:	b086      	sub	sp, #24
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015c98:	2100      	movs	r1, #0
 8015c9a:	6878      	ldr	r0, [r7, #4]
 8015c9c:	f7ff fc88 	bl	80155b0 <dir_sdi>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015ca4:	7dfb      	ldrb	r3, [r7, #23]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d001      	beq.n	8015cae <dir_find+0x24>
 8015caa:	7dfb      	ldrb	r3, [r7, #23]
 8015cac:	e0a9      	b.n	8015e02 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015cae:	23ff      	movs	r3, #255	; 0xff
 8015cb0:	753b      	strb	r3, [r7, #20]
 8015cb2:	7d3b      	ldrb	r3, [r7, #20]
 8015cb4:	757b      	strb	r3, [r7, #21]
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8015cbc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	69db      	ldr	r3, [r3, #28]
 8015cc2:	4619      	mov	r1, r3
 8015cc4:	6938      	ldr	r0, [r7, #16]
 8015cc6:	f7ff f891 	bl	8014dec <move_window>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015cce:	7dfb      	ldrb	r3, [r7, #23]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	f040 8090 	bne.w	8015df6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	6a1b      	ldr	r3, [r3, #32]
 8015cda:	781b      	ldrb	r3, [r3, #0]
 8015cdc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015cde:	7dbb      	ldrb	r3, [r7, #22]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d102      	bne.n	8015cea <dir_find+0x60>
 8015ce4:	2304      	movs	r3, #4
 8015ce6:	75fb      	strb	r3, [r7, #23]
 8015ce8:	e08a      	b.n	8015e00 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	6a1b      	ldr	r3, [r3, #32]
 8015cee:	330b      	adds	r3, #11
 8015cf0:	781b      	ldrb	r3, [r3, #0]
 8015cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015cf6:	73fb      	strb	r3, [r7, #15]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	7bfa      	ldrb	r2, [r7, #15]
 8015cfc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015cfe:	7dbb      	ldrb	r3, [r7, #22]
 8015d00:	2be5      	cmp	r3, #229	; 0xe5
 8015d02:	d007      	beq.n	8015d14 <dir_find+0x8a>
 8015d04:	7bfb      	ldrb	r3, [r7, #15]
 8015d06:	f003 0308 	and.w	r3, r3, #8
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d009      	beq.n	8015d22 <dir_find+0x98>
 8015d0e:	7bfb      	ldrb	r3, [r7, #15]
 8015d10:	2b0f      	cmp	r3, #15
 8015d12:	d006      	beq.n	8015d22 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015d14:	23ff      	movs	r3, #255	; 0xff
 8015d16:	757b      	strb	r3, [r7, #21]
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8015d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8015d20:	e05e      	b.n	8015de0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8015d22:	7bfb      	ldrb	r3, [r7, #15]
 8015d24:	2b0f      	cmp	r3, #15
 8015d26:	d136      	bne.n	8015d96 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d154      	bne.n	8015de0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8015d36:	7dbb      	ldrb	r3, [r7, #22]
 8015d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d00d      	beq.n	8015d5c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	6a1b      	ldr	r3, [r3, #32]
 8015d44:	7b5b      	ldrb	r3, [r3, #13]
 8015d46:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8015d48:	7dbb      	ldrb	r3, [r7, #22]
 8015d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d4e:	75bb      	strb	r3, [r7, #22]
 8015d50:	7dbb      	ldrb	r3, [r7, #22]
 8015d52:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	695a      	ldr	r2, [r3, #20]
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015d5c:	7dba      	ldrb	r2, [r7, #22]
 8015d5e:	7d7b      	ldrb	r3, [r7, #21]
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d115      	bne.n	8015d90 <dir_find+0x106>
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	6a1b      	ldr	r3, [r3, #32]
 8015d68:	330d      	adds	r3, #13
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	7d3a      	ldrb	r2, [r7, #20]
 8015d6e:	429a      	cmp	r2, r3
 8015d70:	d10e      	bne.n	8015d90 <dir_find+0x106>
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	691a      	ldr	r2, [r3, #16]
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6a1b      	ldr	r3, [r3, #32]
 8015d7a:	4619      	mov	r1, r3
 8015d7c:	4610      	mov	r0, r2
 8015d7e:	f7ff fdfd 	bl	801597c <cmp_lfn>
 8015d82:	4603      	mov	r3, r0
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d003      	beq.n	8015d90 <dir_find+0x106>
 8015d88:	7d7b      	ldrb	r3, [r7, #21]
 8015d8a:	3b01      	subs	r3, #1
 8015d8c:	b2db      	uxtb	r3, r3
 8015d8e:	e000      	b.n	8015d92 <dir_find+0x108>
 8015d90:	23ff      	movs	r3, #255	; 0xff
 8015d92:	757b      	strb	r3, [r7, #21]
 8015d94:	e024      	b.n	8015de0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015d96:	7d7b      	ldrb	r3, [r7, #21]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d109      	bne.n	8015db0 <dir_find+0x126>
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	6a1b      	ldr	r3, [r3, #32]
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7ff ff51 	bl	8015c48 <sum_sfn>
 8015da6:	4603      	mov	r3, r0
 8015da8:	461a      	mov	r2, r3
 8015daa:	7d3b      	ldrb	r3, [r7, #20]
 8015dac:	4293      	cmp	r3, r2
 8015dae:	d024      	beq.n	8015dfa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015db6:	f003 0301 	and.w	r3, r3, #1
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d10a      	bne.n	8015dd4 <dir_find+0x14a>
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	6a18      	ldr	r0, [r3, #32]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	3324      	adds	r3, #36	; 0x24
 8015dc6:	220b      	movs	r2, #11
 8015dc8:	4619      	mov	r1, r3
 8015dca:	f7fe fe1d 	bl	8014a08 <mem_cmp>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d014      	beq.n	8015dfe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015dd4:	23ff      	movs	r3, #255	; 0xff
 8015dd6:	757b      	strb	r3, [r7, #21]
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f04f 32ff 	mov.w	r2, #4294967295
 8015dde:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015de0:	2100      	movs	r1, #0
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f7ff fc6d 	bl	80156c2 <dir_next>
 8015de8:	4603      	mov	r3, r0
 8015dea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015dec:	7dfb      	ldrb	r3, [r7, #23]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	f43f af65 	beq.w	8015cbe <dir_find+0x34>
 8015df4:	e004      	b.n	8015e00 <dir_find+0x176>
		if (res != FR_OK) break;
 8015df6:	bf00      	nop
 8015df8:	e002      	b.n	8015e00 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015dfa:	bf00      	nop
 8015dfc:	e000      	b.n	8015e00 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015dfe:	bf00      	nop

	return res;
 8015e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e02:	4618      	mov	r0, r3
 8015e04:	3718      	adds	r7, #24
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}
	...

08015e0c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b08c      	sub	sp, #48	; 0x30
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015e20:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d001      	beq.n	8015e2c <dir_register+0x20>
 8015e28:	2306      	movs	r3, #6
 8015e2a:	e0e0      	b.n	8015fee <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8015e30:	e002      	b.n	8015e38 <dir_register+0x2c>
 8015e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e34:	3301      	adds	r3, #1
 8015e36:	627b      	str	r3, [r7, #36]	; 0x24
 8015e38:	69fb      	ldr	r3, [r7, #28]
 8015e3a:	691a      	ldr	r2, [r3, #16]
 8015e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e3e:	005b      	lsls	r3, r3, #1
 8015e40:	4413      	add	r3, r2
 8015e42:	881b      	ldrh	r3, [r3, #0]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d1f4      	bne.n	8015e32 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8015e4e:	f107 030c 	add.w	r3, r7, #12
 8015e52:	220c      	movs	r2, #12
 8015e54:	4618      	mov	r0, r3
 8015e56:	f7fe fd9b 	bl	8014990 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8015e5a:	7dfb      	ldrb	r3, [r7, #23]
 8015e5c:	f003 0301 	and.w	r3, r3, #1
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d032      	beq.n	8015eca <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2240      	movs	r2, #64	; 0x40
 8015e68:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8015e6c:	2301      	movs	r3, #1
 8015e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e70:	e016      	b.n	8015ea0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	691a      	ldr	r2, [r3, #16]
 8015e7c:	f107 010c 	add.w	r1, r7, #12
 8015e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e82:	f7ff fe53 	bl	8015b2c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f7ff feff 	bl	8015c8a <dir_find>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8015e92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d106      	bne.n	8015ea8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8015e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e9c:	3301      	adds	r3, #1
 8015e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea2:	2b63      	cmp	r3, #99	; 0x63
 8015ea4:	d9e5      	bls.n	8015e72 <dir_register+0x66>
 8015ea6:	e000      	b.n	8015eaa <dir_register+0x9e>
			if (res != FR_OK) break;
 8015ea8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8015eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eac:	2b64      	cmp	r3, #100	; 0x64
 8015eae:	d101      	bne.n	8015eb4 <dir_register+0xa8>
 8015eb0:	2307      	movs	r3, #7
 8015eb2:	e09c      	b.n	8015fee <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8015eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015eb8:	2b04      	cmp	r3, #4
 8015eba:	d002      	beq.n	8015ec2 <dir_register+0xb6>
 8015ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ec0:	e095      	b.n	8015fee <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015ec2:	7dfa      	ldrb	r2, [r7, #23]
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015eca:	7dfb      	ldrb	r3, [r7, #23]
 8015ecc:	f003 0302 	and.w	r3, r3, #2
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d007      	beq.n	8015ee4 <dir_register+0xd8>
 8015ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed6:	330c      	adds	r3, #12
 8015ed8:	4a47      	ldr	r2, [pc, #284]	; (8015ff8 <dir_register+0x1ec>)
 8015eda:	fba2 2303 	umull	r2, r3, r2, r3
 8015ede:	089b      	lsrs	r3, r3, #2
 8015ee0:	3301      	adds	r3, #1
 8015ee2:	e000      	b.n	8015ee6 <dir_register+0xda>
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015ee8:	6a39      	ldr	r1, [r7, #32]
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f7ff fcbf 	bl	801586e <dir_alloc>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d148      	bne.n	8015f90 <dir_register+0x184>
 8015efe:	6a3b      	ldr	r3, [r7, #32]
 8015f00:	3b01      	subs	r3, #1
 8015f02:	623b      	str	r3, [r7, #32]
 8015f04:	6a3b      	ldr	r3, [r7, #32]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d042      	beq.n	8015f90 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	695a      	ldr	r2, [r3, #20]
 8015f0e:	6a3b      	ldr	r3, [r7, #32]
 8015f10:	015b      	lsls	r3, r3, #5
 8015f12:	1ad3      	subs	r3, r2, r3
 8015f14:	4619      	mov	r1, r3
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f7ff fb4a 	bl	80155b0 <dir_sdi>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d132      	bne.n	8015f90 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	3324      	adds	r3, #36	; 0x24
 8015f2e:	4618      	mov	r0, r3
 8015f30:	f7ff fe8a 	bl	8015c48 <sum_sfn>
 8015f34:	4603      	mov	r3, r0
 8015f36:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	69db      	ldr	r3, [r3, #28]
 8015f3c:	4619      	mov	r1, r3
 8015f3e:	69f8      	ldr	r0, [r7, #28]
 8015f40:	f7fe ff54 	bl	8014dec <move_window>
 8015f44:	4603      	mov	r3, r0
 8015f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8015f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d11d      	bne.n	8015f8e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015f52:	69fb      	ldr	r3, [r7, #28]
 8015f54:	6918      	ldr	r0, [r3, #16]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	6a19      	ldr	r1, [r3, #32]
 8015f5a:	6a3b      	ldr	r3, [r7, #32]
 8015f5c:	b2da      	uxtb	r2, r3
 8015f5e:	7efb      	ldrb	r3, [r7, #27]
 8015f60:	f7ff fd7c 	bl	8015a5c <put_lfn>
				fs->wflag = 1;
 8015f64:	69fb      	ldr	r3, [r7, #28]
 8015f66:	2201      	movs	r2, #1
 8015f68:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015f6a:	2100      	movs	r1, #0
 8015f6c:	6878      	ldr	r0, [r7, #4]
 8015f6e:	f7ff fba8 	bl	80156c2 <dir_next>
 8015f72:	4603      	mov	r3, r0
 8015f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015f78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d107      	bne.n	8015f90 <dir_register+0x184>
 8015f80:	6a3b      	ldr	r3, [r7, #32]
 8015f82:	3b01      	subs	r3, #1
 8015f84:	623b      	str	r3, [r7, #32]
 8015f86:	6a3b      	ldr	r3, [r7, #32]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d1d5      	bne.n	8015f38 <dir_register+0x12c>
 8015f8c:	e000      	b.n	8015f90 <dir_register+0x184>
				if (res != FR_OK) break;
 8015f8e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015f90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d128      	bne.n	8015fea <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	69db      	ldr	r3, [r3, #28]
 8015f9c:	4619      	mov	r1, r3
 8015f9e:	69f8      	ldr	r0, [r7, #28]
 8015fa0:	f7fe ff24 	bl	8014dec <move_window>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015faa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d11b      	bne.n	8015fea <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6a1b      	ldr	r3, [r3, #32]
 8015fb6:	2220      	movs	r2, #32
 8015fb8:	2100      	movs	r1, #0
 8015fba:	4618      	mov	r0, r3
 8015fbc:	f7fe fd09 	bl	80149d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	6a18      	ldr	r0, [r3, #32]
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	3324      	adds	r3, #36	; 0x24
 8015fc8:	220b      	movs	r2, #11
 8015fca:	4619      	mov	r1, r3
 8015fcc:	f7fe fce0 	bl	8014990 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6a1b      	ldr	r3, [r3, #32]
 8015fda:	330c      	adds	r3, #12
 8015fdc:	f002 0218 	and.w	r2, r2, #24
 8015fe0:	b2d2      	uxtb	r2, r2
 8015fe2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015fe4:	69fb      	ldr	r3, [r7, #28]
 8015fe6:	2201      	movs	r2, #1
 8015fe8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015fee:	4618      	mov	r0, r3
 8015ff0:	3730      	adds	r7, #48	; 0x30
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd80      	pop	{r7, pc}
 8015ff6:	bf00      	nop
 8015ff8:	4ec4ec4f 	.word	0x4ec4ec4f

08015ffc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b08a      	sub	sp, #40	; 0x28
 8016000:	af00      	add	r7, sp, #0
 8016002:	6078      	str	r0, [r7, #4]
 8016004:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	613b      	str	r3, [r7, #16]
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	691b      	ldr	r3, [r3, #16]
 8016012:	60fb      	str	r3, [r7, #12]
 8016014:	2300      	movs	r3, #0
 8016016:	617b      	str	r3, [r7, #20]
 8016018:	697b      	ldr	r3, [r7, #20]
 801601a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801601c:	69bb      	ldr	r3, [r7, #24]
 801601e:	1c5a      	adds	r2, r3, #1
 8016020:	61ba      	str	r2, [r7, #24]
 8016022:	693a      	ldr	r2, [r7, #16]
 8016024:	4413      	add	r3, r2
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801602a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801602c:	2b1f      	cmp	r3, #31
 801602e:	d940      	bls.n	80160b2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8016030:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016032:	2b2f      	cmp	r3, #47	; 0x2f
 8016034:	d006      	beq.n	8016044 <create_name+0x48>
 8016036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016038:	2b5c      	cmp	r3, #92	; 0x5c
 801603a:	d110      	bne.n	801605e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801603c:	e002      	b.n	8016044 <create_name+0x48>
 801603e:	69bb      	ldr	r3, [r7, #24]
 8016040:	3301      	adds	r3, #1
 8016042:	61bb      	str	r3, [r7, #24]
 8016044:	693a      	ldr	r2, [r7, #16]
 8016046:	69bb      	ldr	r3, [r7, #24]
 8016048:	4413      	add	r3, r2
 801604a:	781b      	ldrb	r3, [r3, #0]
 801604c:	2b2f      	cmp	r3, #47	; 0x2f
 801604e:	d0f6      	beq.n	801603e <create_name+0x42>
 8016050:	693a      	ldr	r2, [r7, #16]
 8016052:	69bb      	ldr	r3, [r7, #24]
 8016054:	4413      	add	r3, r2
 8016056:	781b      	ldrb	r3, [r3, #0]
 8016058:	2b5c      	cmp	r3, #92	; 0x5c
 801605a:	d0f0      	beq.n	801603e <create_name+0x42>
			break;
 801605c:	e02a      	b.n	80160b4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	2bfe      	cmp	r3, #254	; 0xfe
 8016062:	d901      	bls.n	8016068 <create_name+0x6c>
 8016064:	2306      	movs	r3, #6
 8016066:	e17d      	b.n	8016364 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8016068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801606a:	b2db      	uxtb	r3, r3
 801606c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801606e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016070:	2101      	movs	r1, #1
 8016072:	4618      	mov	r0, r3
 8016074:	f001 fa8c 	bl	8017590 <ff_convert>
 8016078:	4603      	mov	r3, r0
 801607a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801607c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801607e:	2b00      	cmp	r3, #0
 8016080:	d101      	bne.n	8016086 <create_name+0x8a>
 8016082:	2306      	movs	r3, #6
 8016084:	e16e      	b.n	8016364 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8016086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016088:	2b7f      	cmp	r3, #127	; 0x7f
 801608a:	d809      	bhi.n	80160a0 <create_name+0xa4>
 801608c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801608e:	4619      	mov	r1, r3
 8016090:	488d      	ldr	r0, [pc, #564]	; (80162c8 <create_name+0x2cc>)
 8016092:	f7fe fce0 	bl	8014a56 <chk_chr>
 8016096:	4603      	mov	r3, r0
 8016098:	2b00      	cmp	r3, #0
 801609a:	d001      	beq.n	80160a0 <create_name+0xa4>
 801609c:	2306      	movs	r3, #6
 801609e:	e161      	b.n	8016364 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80160a0:	697b      	ldr	r3, [r7, #20]
 80160a2:	1c5a      	adds	r2, r3, #1
 80160a4:	617a      	str	r2, [r7, #20]
 80160a6:	005b      	lsls	r3, r3, #1
 80160a8:	68fa      	ldr	r2, [r7, #12]
 80160aa:	4413      	add	r3, r2
 80160ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160ae:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80160b0:	e7b4      	b.n	801601c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80160b2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80160b4:	693a      	ldr	r2, [r7, #16]
 80160b6:	69bb      	ldr	r3, [r7, #24]
 80160b8:	441a      	add	r2, r3
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80160be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160c0:	2b1f      	cmp	r3, #31
 80160c2:	d801      	bhi.n	80160c8 <create_name+0xcc>
 80160c4:	2304      	movs	r3, #4
 80160c6:	e000      	b.n	80160ca <create_name+0xce>
 80160c8:	2300      	movs	r3, #0
 80160ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80160ce:	e011      	b.n	80160f4 <create_name+0xf8>
		w = lfn[di - 1];
 80160d0:	697a      	ldr	r2, [r7, #20]
 80160d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80160d6:	4413      	add	r3, r2
 80160d8:	005b      	lsls	r3, r3, #1
 80160da:	68fa      	ldr	r2, [r7, #12]
 80160dc:	4413      	add	r3, r2
 80160de:	881b      	ldrh	r3, [r3, #0]
 80160e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80160e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160e4:	2b20      	cmp	r3, #32
 80160e6:	d002      	beq.n	80160ee <create_name+0xf2>
 80160e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160ea:	2b2e      	cmp	r3, #46	; 0x2e
 80160ec:	d106      	bne.n	80160fc <create_name+0x100>
		di--;
 80160ee:	697b      	ldr	r3, [r7, #20]
 80160f0:	3b01      	subs	r3, #1
 80160f2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80160f4:	697b      	ldr	r3, [r7, #20]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d1ea      	bne.n	80160d0 <create_name+0xd4>
 80160fa:	e000      	b.n	80160fe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80160fc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80160fe:	697b      	ldr	r3, [r7, #20]
 8016100:	005b      	lsls	r3, r3, #1
 8016102:	68fa      	ldr	r2, [r7, #12]
 8016104:	4413      	add	r3, r2
 8016106:	2200      	movs	r2, #0
 8016108:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d101      	bne.n	8016114 <create_name+0x118>
 8016110:	2306      	movs	r3, #6
 8016112:	e127      	b.n	8016364 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	3324      	adds	r3, #36	; 0x24
 8016118:	220b      	movs	r2, #11
 801611a:	2120      	movs	r1, #32
 801611c:	4618      	mov	r0, r3
 801611e:	f7fe fc58 	bl	80149d2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8016122:	2300      	movs	r3, #0
 8016124:	61bb      	str	r3, [r7, #24]
 8016126:	e002      	b.n	801612e <create_name+0x132>
 8016128:	69bb      	ldr	r3, [r7, #24]
 801612a:	3301      	adds	r3, #1
 801612c:	61bb      	str	r3, [r7, #24]
 801612e:	69bb      	ldr	r3, [r7, #24]
 8016130:	005b      	lsls	r3, r3, #1
 8016132:	68fa      	ldr	r2, [r7, #12]
 8016134:	4413      	add	r3, r2
 8016136:	881b      	ldrh	r3, [r3, #0]
 8016138:	2b20      	cmp	r3, #32
 801613a:	d0f5      	beq.n	8016128 <create_name+0x12c>
 801613c:	69bb      	ldr	r3, [r7, #24]
 801613e:	005b      	lsls	r3, r3, #1
 8016140:	68fa      	ldr	r2, [r7, #12]
 8016142:	4413      	add	r3, r2
 8016144:	881b      	ldrh	r3, [r3, #0]
 8016146:	2b2e      	cmp	r3, #46	; 0x2e
 8016148:	d0ee      	beq.n	8016128 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801614a:	69bb      	ldr	r3, [r7, #24]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d009      	beq.n	8016164 <create_name+0x168>
 8016150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016154:	f043 0303 	orr.w	r3, r3, #3
 8016158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801615c:	e002      	b.n	8016164 <create_name+0x168>
 801615e:	697b      	ldr	r3, [r7, #20]
 8016160:	3b01      	subs	r3, #1
 8016162:	617b      	str	r3, [r7, #20]
 8016164:	697b      	ldr	r3, [r7, #20]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d009      	beq.n	801617e <create_name+0x182>
 801616a:	697a      	ldr	r2, [r7, #20]
 801616c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016170:	4413      	add	r3, r2
 8016172:	005b      	lsls	r3, r3, #1
 8016174:	68fa      	ldr	r2, [r7, #12]
 8016176:	4413      	add	r3, r2
 8016178:	881b      	ldrh	r3, [r3, #0]
 801617a:	2b2e      	cmp	r3, #46	; 0x2e
 801617c:	d1ef      	bne.n	801615e <create_name+0x162>

	i = b = 0; ni = 8;
 801617e:	2300      	movs	r3, #0
 8016180:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016184:	2300      	movs	r3, #0
 8016186:	623b      	str	r3, [r7, #32]
 8016188:	2308      	movs	r3, #8
 801618a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801618c:	69bb      	ldr	r3, [r7, #24]
 801618e:	1c5a      	adds	r2, r3, #1
 8016190:	61ba      	str	r2, [r7, #24]
 8016192:	005b      	lsls	r3, r3, #1
 8016194:	68fa      	ldr	r2, [r7, #12]
 8016196:	4413      	add	r3, r2
 8016198:	881b      	ldrh	r3, [r3, #0]
 801619a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801619c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801619e:	2b00      	cmp	r3, #0
 80161a0:	f000 8090 	beq.w	80162c4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80161a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161a6:	2b20      	cmp	r3, #32
 80161a8:	d006      	beq.n	80161b8 <create_name+0x1bc>
 80161aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161ac:	2b2e      	cmp	r3, #46	; 0x2e
 80161ae:	d10a      	bne.n	80161c6 <create_name+0x1ca>
 80161b0:	69ba      	ldr	r2, [r7, #24]
 80161b2:	697b      	ldr	r3, [r7, #20]
 80161b4:	429a      	cmp	r2, r3
 80161b6:	d006      	beq.n	80161c6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80161b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161bc:	f043 0303 	orr.w	r3, r3, #3
 80161c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80161c4:	e07d      	b.n	80162c2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80161c6:	6a3a      	ldr	r2, [r7, #32]
 80161c8:	69fb      	ldr	r3, [r7, #28]
 80161ca:	429a      	cmp	r2, r3
 80161cc:	d203      	bcs.n	80161d6 <create_name+0x1da>
 80161ce:	69ba      	ldr	r2, [r7, #24]
 80161d0:	697b      	ldr	r3, [r7, #20]
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d123      	bne.n	801621e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80161d6:	69fb      	ldr	r3, [r7, #28]
 80161d8:	2b0b      	cmp	r3, #11
 80161da:	d106      	bne.n	80161ea <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80161dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161e0:	f043 0303 	orr.w	r3, r3, #3
 80161e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80161e8:	e075      	b.n	80162d6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80161ea:	69ba      	ldr	r2, [r7, #24]
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d005      	beq.n	80161fe <create_name+0x202>
 80161f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161f6:	f043 0303 	orr.w	r3, r3, #3
 80161fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80161fe:	69ba      	ldr	r2, [r7, #24]
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	429a      	cmp	r2, r3
 8016204:	d866      	bhi.n	80162d4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8016206:	697b      	ldr	r3, [r7, #20]
 8016208:	61bb      	str	r3, [r7, #24]
 801620a:	2308      	movs	r3, #8
 801620c:	623b      	str	r3, [r7, #32]
 801620e:	230b      	movs	r3, #11
 8016210:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8016212:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016216:	009b      	lsls	r3, r3, #2
 8016218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801621c:	e051      	b.n	80162c2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801621e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016220:	2b7f      	cmp	r3, #127	; 0x7f
 8016222:	d914      	bls.n	801624e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8016224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016226:	2100      	movs	r1, #0
 8016228:	4618      	mov	r0, r3
 801622a:	f001 f9b1 	bl	8017590 <ff_convert>
 801622e:	4603      	mov	r3, r0
 8016230:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016234:	2b00      	cmp	r3, #0
 8016236:	d004      	beq.n	8016242 <create_name+0x246>
 8016238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801623a:	3b80      	subs	r3, #128	; 0x80
 801623c:	4a23      	ldr	r2, [pc, #140]	; (80162cc <create_name+0x2d0>)
 801623e:	5cd3      	ldrb	r3, [r2, r3]
 8016240:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8016242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016246:	f043 0302 	orr.w	r3, r3, #2
 801624a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801624e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016250:	2b00      	cmp	r3, #0
 8016252:	d007      	beq.n	8016264 <create_name+0x268>
 8016254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016256:	4619      	mov	r1, r3
 8016258:	481d      	ldr	r0, [pc, #116]	; (80162d0 <create_name+0x2d4>)
 801625a:	f7fe fbfc 	bl	8014a56 <chk_chr>
 801625e:	4603      	mov	r3, r0
 8016260:	2b00      	cmp	r3, #0
 8016262:	d008      	beq.n	8016276 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016264:	235f      	movs	r3, #95	; 0x5f
 8016266:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801626c:	f043 0303 	orr.w	r3, r3, #3
 8016270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016274:	e01b      	b.n	80162ae <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8016276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016278:	2b40      	cmp	r3, #64	; 0x40
 801627a:	d909      	bls.n	8016290 <create_name+0x294>
 801627c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801627e:	2b5a      	cmp	r3, #90	; 0x5a
 8016280:	d806      	bhi.n	8016290 <create_name+0x294>
					b |= 2;
 8016282:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016286:	f043 0302 	orr.w	r3, r3, #2
 801628a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801628e:	e00e      	b.n	80162ae <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8016290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016292:	2b60      	cmp	r3, #96	; 0x60
 8016294:	d90b      	bls.n	80162ae <create_name+0x2b2>
 8016296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016298:	2b7a      	cmp	r3, #122	; 0x7a
 801629a:	d808      	bhi.n	80162ae <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801629c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80162a0:	f043 0301 	orr.w	r3, r3, #1
 80162a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80162a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80162aa:	3b20      	subs	r3, #32
 80162ac:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80162ae:	6a3b      	ldr	r3, [r7, #32]
 80162b0:	1c5a      	adds	r2, r3, #1
 80162b2:	623a      	str	r2, [r7, #32]
 80162b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162b6:	b2d1      	uxtb	r1, r2
 80162b8:	687a      	ldr	r2, [r7, #4]
 80162ba:	4413      	add	r3, r2
 80162bc:	460a      	mov	r2, r1
 80162be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80162c2:	e763      	b.n	801618c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80162c4:	bf00      	nop
 80162c6:	e006      	b.n	80162d6 <create_name+0x2da>
 80162c8:	0801c90c 	.word	0x0801c90c
 80162cc:	0801c9e4 	.word	0x0801c9e4
 80162d0:	0801c918 	.word	0x0801c918
			if (si > di) break;			/* No extension */
 80162d4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80162dc:	2be5      	cmp	r3, #229	; 0xe5
 80162de:	d103      	bne.n	80162e8 <create_name+0x2ec>
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	2205      	movs	r2, #5
 80162e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80162e8:	69fb      	ldr	r3, [r7, #28]
 80162ea:	2b08      	cmp	r3, #8
 80162ec:	d104      	bne.n	80162f8 <create_name+0x2fc>
 80162ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80162f2:	009b      	lsls	r3, r3, #2
 80162f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80162f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80162fc:	f003 030c 	and.w	r3, r3, #12
 8016300:	2b0c      	cmp	r3, #12
 8016302:	d005      	beq.n	8016310 <create_name+0x314>
 8016304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016308:	f003 0303 	and.w	r3, r3, #3
 801630c:	2b03      	cmp	r3, #3
 801630e:	d105      	bne.n	801631c <create_name+0x320>
 8016310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016314:	f043 0302 	orr.w	r3, r3, #2
 8016318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801631c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016320:	f003 0302 	and.w	r3, r3, #2
 8016324:	2b00      	cmp	r3, #0
 8016326:	d117      	bne.n	8016358 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8016328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801632c:	f003 0303 	and.w	r3, r3, #3
 8016330:	2b01      	cmp	r3, #1
 8016332:	d105      	bne.n	8016340 <create_name+0x344>
 8016334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016338:	f043 0310 	orr.w	r3, r3, #16
 801633c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8016340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016344:	f003 030c 	and.w	r3, r3, #12
 8016348:	2b04      	cmp	r3, #4
 801634a:	d105      	bne.n	8016358 <create_name+0x35c>
 801634c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016350:	f043 0308 	orr.w	r3, r3, #8
 8016354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801635e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8016362:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8016364:	4618      	mov	r0, r3
 8016366:	3728      	adds	r7, #40	; 0x28
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}

0801636c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b086      	sub	sp, #24
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801637a:	693b      	ldr	r3, [r7, #16]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016380:	e002      	b.n	8016388 <follow_path+0x1c>
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	3301      	adds	r3, #1
 8016386:	603b      	str	r3, [r7, #0]
 8016388:	683b      	ldr	r3, [r7, #0]
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	2b2f      	cmp	r3, #47	; 0x2f
 801638e:	d0f8      	beq.n	8016382 <follow_path+0x16>
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	781b      	ldrb	r3, [r3, #0]
 8016394:	2b5c      	cmp	r3, #92	; 0x5c
 8016396:	d0f4      	beq.n	8016382 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016398:	693b      	ldr	r3, [r7, #16]
 801639a:	2200      	movs	r2, #0
 801639c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801639e:	683b      	ldr	r3, [r7, #0]
 80163a0:	781b      	ldrb	r3, [r3, #0]
 80163a2:	2b1f      	cmp	r3, #31
 80163a4:	d80a      	bhi.n	80163bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	2280      	movs	r2, #128	; 0x80
 80163aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80163ae:	2100      	movs	r1, #0
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	f7ff f8fd 	bl	80155b0 <dir_sdi>
 80163b6:	4603      	mov	r3, r0
 80163b8:	75fb      	strb	r3, [r7, #23]
 80163ba:	e048      	b.n	801644e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80163bc:	463b      	mov	r3, r7
 80163be:	4619      	mov	r1, r3
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f7ff fe1b 	bl	8015ffc <create_name>
 80163c6:	4603      	mov	r3, r0
 80163c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80163ca:	7dfb      	ldrb	r3, [r7, #23]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d139      	bne.n	8016444 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	f7ff fc5a 	bl	8015c8a <dir_find>
 80163d6:	4603      	mov	r3, r0
 80163d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80163e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80163e2:	7dfb      	ldrb	r3, [r7, #23]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d00a      	beq.n	80163fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80163e8:	7dfb      	ldrb	r3, [r7, #23]
 80163ea:	2b04      	cmp	r3, #4
 80163ec:	d12c      	bne.n	8016448 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80163ee:	7afb      	ldrb	r3, [r7, #11]
 80163f0:	f003 0304 	and.w	r3, r3, #4
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d127      	bne.n	8016448 <follow_path+0xdc>
 80163f8:	2305      	movs	r3, #5
 80163fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80163fc:	e024      	b.n	8016448 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80163fe:	7afb      	ldrb	r3, [r7, #11]
 8016400:	f003 0304 	and.w	r3, r3, #4
 8016404:	2b00      	cmp	r3, #0
 8016406:	d121      	bne.n	801644c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016408:	693b      	ldr	r3, [r7, #16]
 801640a:	799b      	ldrb	r3, [r3, #6]
 801640c:	f003 0310 	and.w	r3, r3, #16
 8016410:	2b00      	cmp	r3, #0
 8016412:	d102      	bne.n	801641a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016414:	2305      	movs	r3, #5
 8016416:	75fb      	strb	r3, [r7, #23]
 8016418:	e019      	b.n	801644e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	695b      	ldr	r3, [r3, #20]
 8016424:	68fa      	ldr	r2, [r7, #12]
 8016426:	8992      	ldrh	r2, [r2, #12]
 8016428:	fbb3 f0f2 	udiv	r0, r3, r2
 801642c:	fb00 f202 	mul.w	r2, r0, r2
 8016430:	1a9b      	subs	r3, r3, r2
 8016432:	440b      	add	r3, r1
 8016434:	4619      	mov	r1, r3
 8016436:	68f8      	ldr	r0, [r7, #12]
 8016438:	f7ff fa60 	bl	80158fc <ld_clust>
 801643c:	4602      	mov	r2, r0
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016442:	e7bb      	b.n	80163bc <follow_path+0x50>
			if (res != FR_OK) break;
 8016444:	bf00      	nop
 8016446:	e002      	b.n	801644e <follow_path+0xe2>
				break;
 8016448:	bf00      	nop
 801644a:	e000      	b.n	801644e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801644c:	bf00      	nop
			}
		}
	}

	return res;
 801644e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016450:	4618      	mov	r0, r3
 8016452:	3718      	adds	r7, #24
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}

08016458 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016458:	b480      	push	{r7}
 801645a:	b087      	sub	sp, #28
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016460:	f04f 33ff 	mov.w	r3, #4294967295
 8016464:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d031      	beq.n	80164d2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	617b      	str	r3, [r7, #20]
 8016474:	e002      	b.n	801647c <get_ldnumber+0x24>
 8016476:	697b      	ldr	r3, [r7, #20]
 8016478:	3301      	adds	r3, #1
 801647a:	617b      	str	r3, [r7, #20]
 801647c:	697b      	ldr	r3, [r7, #20]
 801647e:	781b      	ldrb	r3, [r3, #0]
 8016480:	2b1f      	cmp	r3, #31
 8016482:	d903      	bls.n	801648c <get_ldnumber+0x34>
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	781b      	ldrb	r3, [r3, #0]
 8016488:	2b3a      	cmp	r3, #58	; 0x3a
 801648a:	d1f4      	bne.n	8016476 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801648c:	697b      	ldr	r3, [r7, #20]
 801648e:	781b      	ldrb	r3, [r3, #0]
 8016490:	2b3a      	cmp	r3, #58	; 0x3a
 8016492:	d11c      	bne.n	80164ce <get_ldnumber+0x76>
			tp = *path;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	1c5a      	adds	r2, r3, #1
 801649e:	60fa      	str	r2, [r7, #12]
 80164a0:	781b      	ldrb	r3, [r3, #0]
 80164a2:	3b30      	subs	r3, #48	; 0x30
 80164a4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80164a6:	68bb      	ldr	r3, [r7, #8]
 80164a8:	2b09      	cmp	r3, #9
 80164aa:	d80e      	bhi.n	80164ca <get_ldnumber+0x72>
 80164ac:	68fa      	ldr	r2, [r7, #12]
 80164ae:	697b      	ldr	r3, [r7, #20]
 80164b0:	429a      	cmp	r2, r3
 80164b2:	d10a      	bne.n	80164ca <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d107      	bne.n	80164ca <get_ldnumber+0x72>
					vol = (int)i;
 80164ba:	68bb      	ldr	r3, [r7, #8]
 80164bc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80164be:	697b      	ldr	r3, [r7, #20]
 80164c0:	3301      	adds	r3, #1
 80164c2:	617b      	str	r3, [r7, #20]
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	697a      	ldr	r2, [r7, #20]
 80164c8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	e002      	b.n	80164d4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80164ce:	2300      	movs	r3, #0
 80164d0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80164d2:	693b      	ldr	r3, [r7, #16]
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	371c      	adds	r7, #28
 80164d8:	46bd      	mov	sp, r7
 80164da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164de:	4770      	bx	lr

080164e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b082      	sub	sp, #8
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
 80164e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	2200      	movs	r2, #0
 80164ee:	70da      	strb	r2, [r3, #3]
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f04f 32ff 	mov.w	r2, #4294967295
 80164f6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80164f8:	6839      	ldr	r1, [r7, #0]
 80164fa:	6878      	ldr	r0, [r7, #4]
 80164fc:	f7fe fc76 	bl	8014dec <move_window>
 8016500:	4603      	mov	r3, r0
 8016502:	2b00      	cmp	r3, #0
 8016504:	d001      	beq.n	801650a <check_fs+0x2a>
 8016506:	2304      	movs	r3, #4
 8016508:	e038      	b.n	801657c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	3338      	adds	r3, #56	; 0x38
 801650e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016512:	4618      	mov	r0, r3
 8016514:	f7fe f9ba 	bl	801488c <ld_word>
 8016518:	4603      	mov	r3, r0
 801651a:	461a      	mov	r2, r3
 801651c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016520:	429a      	cmp	r2, r3
 8016522:	d001      	beq.n	8016528 <check_fs+0x48>
 8016524:	2303      	movs	r3, #3
 8016526:	e029      	b.n	801657c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801652e:	2be9      	cmp	r3, #233	; 0xe9
 8016530:	d009      	beq.n	8016546 <check_fs+0x66>
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016538:	2beb      	cmp	r3, #235	; 0xeb
 801653a:	d11e      	bne.n	801657a <check_fs+0x9a>
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016542:	2b90      	cmp	r3, #144	; 0x90
 8016544:	d119      	bne.n	801657a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	3338      	adds	r3, #56	; 0x38
 801654a:	3336      	adds	r3, #54	; 0x36
 801654c:	4618      	mov	r0, r3
 801654e:	f7fe f9b5 	bl	80148bc <ld_dword>
 8016552:	4603      	mov	r3, r0
 8016554:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016558:	4a0a      	ldr	r2, [pc, #40]	; (8016584 <check_fs+0xa4>)
 801655a:	4293      	cmp	r3, r2
 801655c:	d101      	bne.n	8016562 <check_fs+0x82>
 801655e:	2300      	movs	r3, #0
 8016560:	e00c      	b.n	801657c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	3338      	adds	r3, #56	; 0x38
 8016566:	3352      	adds	r3, #82	; 0x52
 8016568:	4618      	mov	r0, r3
 801656a:	f7fe f9a7 	bl	80148bc <ld_dword>
 801656e:	4603      	mov	r3, r0
 8016570:	4a05      	ldr	r2, [pc, #20]	; (8016588 <check_fs+0xa8>)
 8016572:	4293      	cmp	r3, r2
 8016574:	d101      	bne.n	801657a <check_fs+0x9a>
 8016576:	2300      	movs	r3, #0
 8016578:	e000      	b.n	801657c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801657a:	2302      	movs	r3, #2
}
 801657c:	4618      	mov	r0, r3
 801657e:	3708      	adds	r7, #8
 8016580:	46bd      	mov	sp, r7
 8016582:	bd80      	pop	{r7, pc}
 8016584:	00544146 	.word	0x00544146
 8016588:	33544146 	.word	0x33544146

0801658c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b096      	sub	sp, #88	; 0x58
 8016590:	af00      	add	r7, sp, #0
 8016592:	60f8      	str	r0, [r7, #12]
 8016594:	60b9      	str	r1, [r7, #8]
 8016596:	4613      	mov	r3, r2
 8016598:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801659a:	68bb      	ldr	r3, [r7, #8]
 801659c:	2200      	movs	r2, #0
 801659e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80165a0:	68f8      	ldr	r0, [r7, #12]
 80165a2:	f7ff ff59 	bl	8016458 <get_ldnumber>
 80165a6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80165a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	da01      	bge.n	80165b2 <find_volume+0x26>
 80165ae:	230b      	movs	r3, #11
 80165b0:	e265      	b.n	8016a7e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80165b2:	4a9f      	ldr	r2, [pc, #636]	; (8016830 <find_volume+0x2a4>)
 80165b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80165ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80165bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d101      	bne.n	80165c6 <find_volume+0x3a>
 80165c2:	230c      	movs	r3, #12
 80165c4:	e25b      	b.n	8016a7e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80165c6:	68bb      	ldr	r3, [r7, #8]
 80165c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80165ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80165cc:	79fb      	ldrb	r3, [r7, #7]
 80165ce:	f023 0301 	bic.w	r3, r3, #1
 80165d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80165d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d6:	781b      	ldrb	r3, [r3, #0]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d01a      	beq.n	8016612 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80165dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165de:	785b      	ldrb	r3, [r3, #1]
 80165e0:	4618      	mov	r0, r3
 80165e2:	f7fe f8b5 	bl	8014750 <disk_status>
 80165e6:	4603      	mov	r3, r0
 80165e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80165ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80165f0:	f003 0301 	and.w	r3, r3, #1
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d10c      	bne.n	8016612 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80165f8:	79fb      	ldrb	r3, [r7, #7]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d007      	beq.n	801660e <find_volume+0x82>
 80165fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016602:	f003 0304 	and.w	r3, r3, #4
 8016606:	2b00      	cmp	r3, #0
 8016608:	d001      	beq.n	801660e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801660a:	230a      	movs	r3, #10
 801660c:	e237      	b.n	8016a7e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801660e:	2300      	movs	r3, #0
 8016610:	e235      	b.n	8016a7e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016614:	2200      	movs	r2, #0
 8016616:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801661a:	b2da      	uxtb	r2, r3
 801661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801661e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016622:	785b      	ldrb	r3, [r3, #1]
 8016624:	4618      	mov	r0, r3
 8016626:	f7fe f8ad 	bl	8014784 <disk_initialize>
 801662a:	4603      	mov	r3, r0
 801662c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016634:	f003 0301 	and.w	r3, r3, #1
 8016638:	2b00      	cmp	r3, #0
 801663a:	d001      	beq.n	8016640 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801663c:	2303      	movs	r3, #3
 801663e:	e21e      	b.n	8016a7e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016640:	79fb      	ldrb	r3, [r7, #7]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d007      	beq.n	8016656 <find_volume+0xca>
 8016646:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801664a:	f003 0304 	and.w	r3, r3, #4
 801664e:	2b00      	cmp	r3, #0
 8016650:	d001      	beq.n	8016656 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016652:	230a      	movs	r3, #10
 8016654:	e213      	b.n	8016a7e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8016656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016658:	7858      	ldrb	r0, [r3, #1]
 801665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801665c:	330c      	adds	r3, #12
 801665e:	461a      	mov	r2, r3
 8016660:	2102      	movs	r1, #2
 8016662:	f7fe f8f5 	bl	8014850 <disk_ioctl>
 8016666:	4603      	mov	r3, r0
 8016668:	2b00      	cmp	r3, #0
 801666a:	d001      	beq.n	8016670 <find_volume+0xe4>
 801666c:	2301      	movs	r3, #1
 801666e:	e206      	b.n	8016a7e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8016670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016672:	899b      	ldrh	r3, [r3, #12]
 8016674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016678:	d80d      	bhi.n	8016696 <find_volume+0x10a>
 801667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801667c:	899b      	ldrh	r3, [r3, #12]
 801667e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016682:	d308      	bcc.n	8016696 <find_volume+0x10a>
 8016684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016686:	899b      	ldrh	r3, [r3, #12]
 8016688:	461a      	mov	r2, r3
 801668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801668c:	899b      	ldrh	r3, [r3, #12]
 801668e:	3b01      	subs	r3, #1
 8016690:	4013      	ands	r3, r2
 8016692:	2b00      	cmp	r3, #0
 8016694:	d001      	beq.n	801669a <find_volume+0x10e>
 8016696:	2301      	movs	r3, #1
 8016698:	e1f1      	b.n	8016a7e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801669a:	2300      	movs	r3, #0
 801669c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801669e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80166a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80166a2:	f7ff ff1d 	bl	80164e0 <check_fs>
 80166a6:	4603      	mov	r3, r0
 80166a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80166ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80166b0:	2b02      	cmp	r3, #2
 80166b2:	d149      	bne.n	8016748 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80166b4:	2300      	movs	r3, #0
 80166b6:	643b      	str	r3, [r7, #64]	; 0x40
 80166b8:	e01e      	b.n	80166f8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80166ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166bc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80166c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166c2:	011b      	lsls	r3, r3, #4
 80166c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80166c8:	4413      	add	r3, r2
 80166ca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80166cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ce:	3304      	adds	r3, #4
 80166d0:	781b      	ldrb	r3, [r3, #0]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d006      	beq.n	80166e4 <find_volume+0x158>
 80166d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166d8:	3308      	adds	r3, #8
 80166da:	4618      	mov	r0, r3
 80166dc:	f7fe f8ee 	bl	80148bc <ld_dword>
 80166e0:	4602      	mov	r2, r0
 80166e2:	e000      	b.n	80166e6 <find_volume+0x15a>
 80166e4:	2200      	movs	r2, #0
 80166e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166e8:	009b      	lsls	r3, r3, #2
 80166ea:	3358      	adds	r3, #88	; 0x58
 80166ec:	443b      	add	r3, r7
 80166ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80166f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166f4:	3301      	adds	r3, #1
 80166f6:	643b      	str	r3, [r7, #64]	; 0x40
 80166f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166fa:	2b03      	cmp	r3, #3
 80166fc:	d9dd      	bls.n	80166ba <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80166fe:	2300      	movs	r3, #0
 8016700:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016704:	2b00      	cmp	r3, #0
 8016706:	d002      	beq.n	801670e <find_volume+0x182>
 8016708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801670a:	3b01      	subs	r3, #1
 801670c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801670e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016710:	009b      	lsls	r3, r3, #2
 8016712:	3358      	adds	r3, #88	; 0x58
 8016714:	443b      	add	r3, r7
 8016716:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801671a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801671c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801671e:	2b00      	cmp	r3, #0
 8016720:	d005      	beq.n	801672e <find_volume+0x1a2>
 8016722:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016726:	f7ff fedb 	bl	80164e0 <check_fs>
 801672a:	4603      	mov	r3, r0
 801672c:	e000      	b.n	8016730 <find_volume+0x1a4>
 801672e:	2303      	movs	r3, #3
 8016730:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016734:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016738:	2b01      	cmp	r3, #1
 801673a:	d905      	bls.n	8016748 <find_volume+0x1bc>
 801673c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801673e:	3301      	adds	r3, #1
 8016740:	643b      	str	r3, [r7, #64]	; 0x40
 8016742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016744:	2b03      	cmp	r3, #3
 8016746:	d9e2      	bls.n	801670e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801674c:	2b04      	cmp	r3, #4
 801674e:	d101      	bne.n	8016754 <find_volume+0x1c8>
 8016750:	2301      	movs	r3, #1
 8016752:	e194      	b.n	8016a7e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016754:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016758:	2b01      	cmp	r3, #1
 801675a:	d901      	bls.n	8016760 <find_volume+0x1d4>
 801675c:	230d      	movs	r3, #13
 801675e:	e18e      	b.n	8016a7e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016762:	3338      	adds	r3, #56	; 0x38
 8016764:	330b      	adds	r3, #11
 8016766:	4618      	mov	r0, r3
 8016768:	f7fe f890 	bl	801488c <ld_word>
 801676c:	4603      	mov	r3, r0
 801676e:	461a      	mov	r2, r3
 8016770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016772:	899b      	ldrh	r3, [r3, #12]
 8016774:	429a      	cmp	r2, r3
 8016776:	d001      	beq.n	801677c <find_volume+0x1f0>
 8016778:	230d      	movs	r3, #13
 801677a:	e180      	b.n	8016a7e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801677e:	3338      	adds	r3, #56	; 0x38
 8016780:	3316      	adds	r3, #22
 8016782:	4618      	mov	r0, r3
 8016784:	f7fe f882 	bl	801488c <ld_word>
 8016788:	4603      	mov	r3, r0
 801678a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801678c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801678e:	2b00      	cmp	r3, #0
 8016790:	d106      	bne.n	80167a0 <find_volume+0x214>
 8016792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016794:	3338      	adds	r3, #56	; 0x38
 8016796:	3324      	adds	r3, #36	; 0x24
 8016798:	4618      	mov	r0, r3
 801679a:	f7fe f88f 	bl	80148bc <ld_dword>
 801679e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80167a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80167a4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80167a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80167ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80167b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167b2:	789b      	ldrb	r3, [r3, #2]
 80167b4:	2b01      	cmp	r3, #1
 80167b6:	d005      	beq.n	80167c4 <find_volume+0x238>
 80167b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ba:	789b      	ldrb	r3, [r3, #2]
 80167bc:	2b02      	cmp	r3, #2
 80167be:	d001      	beq.n	80167c4 <find_volume+0x238>
 80167c0:	230d      	movs	r3, #13
 80167c2:	e15c      	b.n	8016a7e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80167c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c6:	789b      	ldrb	r3, [r3, #2]
 80167c8:	461a      	mov	r2, r3
 80167ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167cc:	fb02 f303 	mul.w	r3, r2, r3
 80167d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80167d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80167d8:	b29a      	uxth	r2, r3
 80167da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80167de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e0:	895b      	ldrh	r3, [r3, #10]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d008      	beq.n	80167f8 <find_volume+0x26c>
 80167e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e8:	895b      	ldrh	r3, [r3, #10]
 80167ea:	461a      	mov	r2, r3
 80167ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ee:	895b      	ldrh	r3, [r3, #10]
 80167f0:	3b01      	subs	r3, #1
 80167f2:	4013      	ands	r3, r2
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d001      	beq.n	80167fc <find_volume+0x270>
 80167f8:	230d      	movs	r3, #13
 80167fa:	e140      	b.n	8016a7e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80167fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167fe:	3338      	adds	r3, #56	; 0x38
 8016800:	3311      	adds	r3, #17
 8016802:	4618      	mov	r0, r3
 8016804:	f7fe f842 	bl	801488c <ld_word>
 8016808:	4603      	mov	r3, r0
 801680a:	461a      	mov	r2, r3
 801680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801680e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016812:	891b      	ldrh	r3, [r3, #8]
 8016814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016816:	8992      	ldrh	r2, [r2, #12]
 8016818:	0952      	lsrs	r2, r2, #5
 801681a:	b292      	uxth	r2, r2
 801681c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016820:	fb01 f202 	mul.w	r2, r1, r2
 8016824:	1a9b      	subs	r3, r3, r2
 8016826:	b29b      	uxth	r3, r3
 8016828:	2b00      	cmp	r3, #0
 801682a:	d003      	beq.n	8016834 <find_volume+0x2a8>
 801682c:	230d      	movs	r3, #13
 801682e:	e126      	b.n	8016a7e <find_volume+0x4f2>
 8016830:	24000d2c 	.word	0x24000d2c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016836:	3338      	adds	r3, #56	; 0x38
 8016838:	3313      	adds	r3, #19
 801683a:	4618      	mov	r0, r3
 801683c:	f7fe f826 	bl	801488c <ld_word>
 8016840:	4603      	mov	r3, r0
 8016842:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016846:	2b00      	cmp	r3, #0
 8016848:	d106      	bne.n	8016858 <find_volume+0x2cc>
 801684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801684c:	3338      	adds	r3, #56	; 0x38
 801684e:	3320      	adds	r3, #32
 8016850:	4618      	mov	r0, r3
 8016852:	f7fe f833 	bl	80148bc <ld_dword>
 8016856:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801685a:	3338      	adds	r3, #56	; 0x38
 801685c:	330e      	adds	r3, #14
 801685e:	4618      	mov	r0, r3
 8016860:	f7fe f814 	bl	801488c <ld_word>
 8016864:	4603      	mov	r3, r0
 8016866:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016868:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801686a:	2b00      	cmp	r3, #0
 801686c:	d101      	bne.n	8016872 <find_volume+0x2e6>
 801686e:	230d      	movs	r3, #13
 8016870:	e105      	b.n	8016a7e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016872:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016876:	4413      	add	r3, r2
 8016878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801687a:	8911      	ldrh	r1, [r2, #8]
 801687c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801687e:	8992      	ldrh	r2, [r2, #12]
 8016880:	0952      	lsrs	r2, r2, #5
 8016882:	b292      	uxth	r2, r2
 8016884:	fbb1 f2f2 	udiv	r2, r1, r2
 8016888:	b292      	uxth	r2, r2
 801688a:	4413      	add	r3, r2
 801688c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801688e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016892:	429a      	cmp	r2, r3
 8016894:	d201      	bcs.n	801689a <find_volume+0x30e>
 8016896:	230d      	movs	r3, #13
 8016898:	e0f1      	b.n	8016a7e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801689a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801689e:	1ad3      	subs	r3, r2, r3
 80168a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80168a2:	8952      	ldrh	r2, [r2, #10]
 80168a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80168a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80168aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d101      	bne.n	80168b4 <find_volume+0x328>
 80168b0:	230d      	movs	r3, #13
 80168b2:	e0e4      	b.n	8016a7e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80168b4:	2303      	movs	r3, #3
 80168b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80168ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80168c0:	4293      	cmp	r3, r2
 80168c2:	d802      	bhi.n	80168ca <find_volume+0x33e>
 80168c4:	2302      	movs	r3, #2
 80168c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80168ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80168d0:	4293      	cmp	r3, r2
 80168d2:	d802      	bhi.n	80168da <find_volume+0x34e>
 80168d4:	2301      	movs	r3, #1
 80168d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80168da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168dc:	1c9a      	adds	r2, r3, #2
 80168de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168e0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80168e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80168e6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80168e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80168ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80168ec:	441a      	add	r2, r3
 80168ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168f0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80168f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80168f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f6:	441a      	add	r2, r3
 80168f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168fa:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80168fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016900:	2b03      	cmp	r3, #3
 8016902:	d11e      	bne.n	8016942 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016906:	3338      	adds	r3, #56	; 0x38
 8016908:	332a      	adds	r3, #42	; 0x2a
 801690a:	4618      	mov	r0, r3
 801690c:	f7fd ffbe 	bl	801488c <ld_word>
 8016910:	4603      	mov	r3, r0
 8016912:	2b00      	cmp	r3, #0
 8016914:	d001      	beq.n	801691a <find_volume+0x38e>
 8016916:	230d      	movs	r3, #13
 8016918:	e0b1      	b.n	8016a7e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801691c:	891b      	ldrh	r3, [r3, #8]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d001      	beq.n	8016926 <find_volume+0x39a>
 8016922:	230d      	movs	r3, #13
 8016924:	e0ab      	b.n	8016a7e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016928:	3338      	adds	r3, #56	; 0x38
 801692a:	332c      	adds	r3, #44	; 0x2c
 801692c:	4618      	mov	r0, r3
 801692e:	f7fd ffc5 	bl	80148bc <ld_dword>
 8016932:	4602      	mov	r2, r0
 8016934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016936:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801693a:	69db      	ldr	r3, [r3, #28]
 801693c:	009b      	lsls	r3, r3, #2
 801693e:	647b      	str	r3, [r7, #68]	; 0x44
 8016940:	e01f      	b.n	8016982 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016944:	891b      	ldrh	r3, [r3, #8]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d101      	bne.n	801694e <find_volume+0x3c2>
 801694a:	230d      	movs	r3, #13
 801694c:	e097      	b.n	8016a7e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016954:	441a      	add	r2, r3
 8016956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016958:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801695a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801695e:	2b02      	cmp	r3, #2
 8016960:	d103      	bne.n	801696a <find_volume+0x3de>
 8016962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016964:	69db      	ldr	r3, [r3, #28]
 8016966:	005b      	lsls	r3, r3, #1
 8016968:	e00a      	b.n	8016980 <find_volume+0x3f4>
 801696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801696c:	69da      	ldr	r2, [r3, #28]
 801696e:	4613      	mov	r3, r2
 8016970:	005b      	lsls	r3, r3, #1
 8016972:	4413      	add	r3, r2
 8016974:	085a      	lsrs	r2, r3, #1
 8016976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016978:	69db      	ldr	r3, [r3, #28]
 801697a:	f003 0301 	and.w	r3, r3, #1
 801697e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016980:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016984:	6a1a      	ldr	r2, [r3, #32]
 8016986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016988:	899b      	ldrh	r3, [r3, #12]
 801698a:	4619      	mov	r1, r3
 801698c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801698e:	440b      	add	r3, r1
 8016990:	3b01      	subs	r3, #1
 8016992:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016994:	8989      	ldrh	r1, [r1, #12]
 8016996:	fbb3 f3f1 	udiv	r3, r3, r1
 801699a:	429a      	cmp	r2, r3
 801699c:	d201      	bcs.n	80169a2 <find_volume+0x416>
 801699e:	230d      	movs	r3, #13
 80169a0:	e06d      	b.n	8016a7e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80169a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169a4:	f04f 32ff 	mov.w	r2, #4294967295
 80169a8:	619a      	str	r2, [r3, #24]
 80169aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169ac:	699a      	ldr	r2, [r3, #24]
 80169ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169b0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80169b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169b4:	2280      	movs	r2, #128	; 0x80
 80169b6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80169b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80169bc:	2b03      	cmp	r3, #3
 80169be:	d149      	bne.n	8016a54 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80169c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169c2:	3338      	adds	r3, #56	; 0x38
 80169c4:	3330      	adds	r3, #48	; 0x30
 80169c6:	4618      	mov	r0, r3
 80169c8:	f7fd ff60 	bl	801488c <ld_word>
 80169cc:	4603      	mov	r3, r0
 80169ce:	2b01      	cmp	r3, #1
 80169d0:	d140      	bne.n	8016a54 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80169d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169d4:	3301      	adds	r3, #1
 80169d6:	4619      	mov	r1, r3
 80169d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80169da:	f7fe fa07 	bl	8014dec <move_window>
 80169de:	4603      	mov	r3, r0
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d137      	bne.n	8016a54 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80169e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169e6:	2200      	movs	r2, #0
 80169e8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80169ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169ec:	3338      	adds	r3, #56	; 0x38
 80169ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80169f2:	4618      	mov	r0, r3
 80169f4:	f7fd ff4a 	bl	801488c <ld_word>
 80169f8:	4603      	mov	r3, r0
 80169fa:	461a      	mov	r2, r3
 80169fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016a00:	429a      	cmp	r2, r3
 8016a02:	d127      	bne.n	8016a54 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a06:	3338      	adds	r3, #56	; 0x38
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7fd ff57 	bl	80148bc <ld_dword>
 8016a0e:	4603      	mov	r3, r0
 8016a10:	4a1d      	ldr	r2, [pc, #116]	; (8016a88 <find_volume+0x4fc>)
 8016a12:	4293      	cmp	r3, r2
 8016a14:	d11e      	bne.n	8016a54 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a18:	3338      	adds	r3, #56	; 0x38
 8016a1a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016a1e:	4618      	mov	r0, r3
 8016a20:	f7fd ff4c 	bl	80148bc <ld_dword>
 8016a24:	4603      	mov	r3, r0
 8016a26:	4a19      	ldr	r2, [pc, #100]	; (8016a8c <find_volume+0x500>)
 8016a28:	4293      	cmp	r3, r2
 8016a2a:	d113      	bne.n	8016a54 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a2e:	3338      	adds	r3, #56	; 0x38
 8016a30:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016a34:	4618      	mov	r0, r3
 8016a36:	f7fd ff41 	bl	80148bc <ld_dword>
 8016a3a:	4602      	mov	r2, r0
 8016a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a3e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a42:	3338      	adds	r3, #56	; 0x38
 8016a44:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f7fd ff37 	bl	80148bc <ld_dword>
 8016a4e:	4602      	mov	r2, r0
 8016a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a52:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a56:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016a5a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016a5c:	4b0c      	ldr	r3, [pc, #48]	; (8016a90 <find_volume+0x504>)
 8016a5e:	881b      	ldrh	r3, [r3, #0]
 8016a60:	3301      	adds	r3, #1
 8016a62:	b29a      	uxth	r2, r3
 8016a64:	4b0a      	ldr	r3, [pc, #40]	; (8016a90 <find_volume+0x504>)
 8016a66:	801a      	strh	r2, [r3, #0]
 8016a68:	4b09      	ldr	r3, [pc, #36]	; (8016a90 <find_volume+0x504>)
 8016a6a:	881a      	ldrh	r2, [r3, #0]
 8016a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a6e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8016a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a72:	4a08      	ldr	r2, [pc, #32]	; (8016a94 <find_volume+0x508>)
 8016a74:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8016a76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016a78:	f7fe f950 	bl	8014d1c <clear_lock>
#endif
	return FR_OK;
 8016a7c:	2300      	movs	r3, #0
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3758      	adds	r7, #88	; 0x58
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}
 8016a86:	bf00      	nop
 8016a88:	41615252 	.word	0x41615252
 8016a8c:	61417272 	.word	0x61417272
 8016a90:	24000d30 	.word	0x24000d30
 8016a94:	24000d54 	.word	0x24000d54

08016a98 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b084      	sub	sp, #16
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016aa2:	2309      	movs	r3, #9
 8016aa4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d01c      	beq.n	8016ae6 <validate+0x4e>
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d018      	beq.n	8016ae6 <validate+0x4e>
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	781b      	ldrb	r3, [r3, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d013      	beq.n	8016ae6 <validate+0x4e>
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	889a      	ldrh	r2, [r3, #4]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	88db      	ldrh	r3, [r3, #6]
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d10c      	bne.n	8016ae6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	785b      	ldrb	r3, [r3, #1]
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7fd fe3c 	bl	8014750 <disk_status>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	f003 0301 	and.w	r3, r3, #1
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d101      	bne.n	8016ae6 <validate+0x4e>
			res = FR_OK;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016ae6:	7bfb      	ldrb	r3, [r7, #15]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d102      	bne.n	8016af2 <validate+0x5a>
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	e000      	b.n	8016af4 <validate+0x5c>
 8016af2:	2300      	movs	r3, #0
 8016af4:	683a      	ldr	r2, [r7, #0]
 8016af6:	6013      	str	r3, [r2, #0]
	return res;
 8016af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	3710      	adds	r7, #16
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}
	...

08016b04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b088      	sub	sp, #32
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	60f8      	str	r0, [r7, #12]
 8016b0c:	60b9      	str	r1, [r7, #8]
 8016b0e:	4613      	mov	r3, r2
 8016b10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016b12:	68bb      	ldr	r3, [r7, #8]
 8016b14:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016b16:	f107 0310 	add.w	r3, r7, #16
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f7ff fc9c 	bl	8016458 <get_ldnumber>
 8016b20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016b22:	69fb      	ldr	r3, [r7, #28]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	da01      	bge.n	8016b2c <f_mount+0x28>
 8016b28:	230b      	movs	r3, #11
 8016b2a:	e02b      	b.n	8016b84 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016b2c:	4a17      	ldr	r2, [pc, #92]	; (8016b8c <f_mount+0x88>)
 8016b2e:	69fb      	ldr	r3, [r7, #28]
 8016b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016b36:	69bb      	ldr	r3, [r7, #24]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d005      	beq.n	8016b48 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016b3c:	69b8      	ldr	r0, [r7, #24]
 8016b3e:	f7fe f8ed 	bl	8014d1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016b42:	69bb      	ldr	r3, [r7, #24]
 8016b44:	2200      	movs	r2, #0
 8016b46:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d002      	beq.n	8016b54 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	2200      	movs	r2, #0
 8016b52:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016b54:	68fa      	ldr	r2, [r7, #12]
 8016b56:	490d      	ldr	r1, [pc, #52]	; (8016b8c <f_mount+0x88>)
 8016b58:	69fb      	ldr	r3, [r7, #28]
 8016b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d002      	beq.n	8016b6a <f_mount+0x66>
 8016b64:	79fb      	ldrb	r3, [r7, #7]
 8016b66:	2b01      	cmp	r3, #1
 8016b68:	d001      	beq.n	8016b6e <f_mount+0x6a>
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	e00a      	b.n	8016b84 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016b6e:	f107 010c 	add.w	r1, r7, #12
 8016b72:	f107 0308 	add.w	r3, r7, #8
 8016b76:	2200      	movs	r2, #0
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7ff fd07 	bl	801658c <find_volume>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b84:	4618      	mov	r0, r3
 8016b86:	3720      	adds	r7, #32
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bd80      	pop	{r7, pc}
 8016b8c:	24000d2c 	.word	0x24000d2c

08016b90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b09a      	sub	sp, #104	; 0x68
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	60f8      	str	r0, [r7, #12]
 8016b98:	60b9      	str	r1, [r7, #8]
 8016b9a:	4613      	mov	r3, r2
 8016b9c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d101      	bne.n	8016ba8 <f_open+0x18>
 8016ba4:	2309      	movs	r3, #9
 8016ba6:	e1bb      	b.n	8016f20 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016ba8:	79fb      	ldrb	r3, [r7, #7]
 8016baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016bae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016bb0:	79fa      	ldrb	r2, [r7, #7]
 8016bb2:	f107 0114 	add.w	r1, r7, #20
 8016bb6:	f107 0308 	add.w	r3, r7, #8
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7ff fce6 	bl	801658c <find_volume>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8016bc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	f040 819f 	bne.w	8016f0e <f_open+0x37e>
		dj.obj.fs = fs;
 8016bd0:	697b      	ldr	r3, [r7, #20]
 8016bd2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016bd4:	68ba      	ldr	r2, [r7, #8]
 8016bd6:	f107 0318 	add.w	r3, r7, #24
 8016bda:	4611      	mov	r1, r2
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f7ff fbc5 	bl	801636c <follow_path>
 8016be2:	4603      	mov	r3, r0
 8016be4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016be8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d11a      	bne.n	8016c26 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016bf0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016bf4:	b25b      	sxtb	r3, r3
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	da03      	bge.n	8016c02 <f_open+0x72>
				res = FR_INVALID_NAME;
 8016bfa:	2306      	movs	r3, #6
 8016bfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016c00:	e011      	b.n	8016c26 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016c02:	79fb      	ldrb	r3, [r7, #7]
 8016c04:	f023 0301 	bic.w	r3, r3, #1
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	bf14      	ite	ne
 8016c0c:	2301      	movne	r3, #1
 8016c0e:	2300      	moveq	r3, #0
 8016c10:	b2db      	uxtb	r3, r3
 8016c12:	461a      	mov	r2, r3
 8016c14:	f107 0318 	add.w	r3, r7, #24
 8016c18:	4611      	mov	r1, r2
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7fd ff36 	bl	8014a8c <chk_lock>
 8016c20:	4603      	mov	r3, r0
 8016c22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016c26:	79fb      	ldrb	r3, [r7, #7]
 8016c28:	f003 031c 	and.w	r3, r3, #28
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d07f      	beq.n	8016d30 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8016c30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d017      	beq.n	8016c68 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016c38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016c3c:	2b04      	cmp	r3, #4
 8016c3e:	d10e      	bne.n	8016c5e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016c40:	f7fd ff80 	bl	8014b44 <enq_lock>
 8016c44:	4603      	mov	r3, r0
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d006      	beq.n	8016c58 <f_open+0xc8>
 8016c4a:	f107 0318 	add.w	r3, r7, #24
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7ff f8dc 	bl	8015e0c <dir_register>
 8016c54:	4603      	mov	r3, r0
 8016c56:	e000      	b.n	8016c5a <f_open+0xca>
 8016c58:	2312      	movs	r3, #18
 8016c5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016c5e:	79fb      	ldrb	r3, [r7, #7]
 8016c60:	f043 0308 	orr.w	r3, r3, #8
 8016c64:	71fb      	strb	r3, [r7, #7]
 8016c66:	e010      	b.n	8016c8a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016c68:	7fbb      	ldrb	r3, [r7, #30]
 8016c6a:	f003 0311 	and.w	r3, r3, #17
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d003      	beq.n	8016c7a <f_open+0xea>
					res = FR_DENIED;
 8016c72:	2307      	movs	r3, #7
 8016c74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016c78:	e007      	b.n	8016c8a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016c7a:	79fb      	ldrb	r3, [r7, #7]
 8016c7c:	f003 0304 	and.w	r3, r3, #4
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d002      	beq.n	8016c8a <f_open+0xfa>
 8016c84:	2308      	movs	r3, #8
 8016c86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016c8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d168      	bne.n	8016d64 <f_open+0x1d4>
 8016c92:	79fb      	ldrb	r3, [r7, #7]
 8016c94:	f003 0308 	and.w	r3, r3, #8
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d063      	beq.n	8016d64 <f_open+0x1d4>
				dw = GET_FATTIME();
 8016c9c:	f7fb fb6e 	bl	801237c <get_fattime>
 8016ca0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca4:	330e      	adds	r3, #14
 8016ca6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7fd fe45 	bl	8014938 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cb0:	3316      	adds	r3, #22
 8016cb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	f7fd fe3f 	bl	8014938 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cbc:	330b      	adds	r3, #11
 8016cbe:	2220      	movs	r2, #32
 8016cc0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016cc2:	697b      	ldr	r3, [r7, #20]
 8016cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016cc6:	4611      	mov	r1, r2
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7fe fe17 	bl	80158fc <ld_clust>
 8016cce:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016cd0:	697b      	ldr	r3, [r7, #20]
 8016cd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f7fe fe2f 	bl	801593a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cde:	331c      	adds	r3, #28
 8016ce0:	2100      	movs	r1, #0
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f7fd fe28 	bl	8014938 <st_dword>
					fs->wflag = 1;
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	2201      	movs	r2, #1
 8016cec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d037      	beq.n	8016d64 <f_open+0x1d4>
						dw = fs->winsect;
 8016cf4:	697b      	ldr	r3, [r7, #20]
 8016cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cf8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8016cfa:	f107 0318 	add.w	r3, r7, #24
 8016cfe:	2200      	movs	r2, #0
 8016d00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7fe fb1f 	bl	8015346 <remove_chain>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8016d0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d126      	bne.n	8016d64 <f_open+0x1d4>
							res = move_window(fs, dw);
 8016d16:	697b      	ldr	r3, [r7, #20]
 8016d18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f7fe f866 	bl	8014dec <move_window>
 8016d20:	4603      	mov	r3, r0
 8016d22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016d26:	697b      	ldr	r3, [r7, #20]
 8016d28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016d2a:	3a01      	subs	r2, #1
 8016d2c:	615a      	str	r2, [r3, #20]
 8016d2e:	e019      	b.n	8016d64 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016d30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d115      	bne.n	8016d64 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016d38:	7fbb      	ldrb	r3, [r7, #30]
 8016d3a:	f003 0310 	and.w	r3, r3, #16
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d003      	beq.n	8016d4a <f_open+0x1ba>
					res = FR_NO_FILE;
 8016d42:	2304      	movs	r3, #4
 8016d44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016d48:	e00c      	b.n	8016d64 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016d4a:	79fb      	ldrb	r3, [r7, #7]
 8016d4c:	f003 0302 	and.w	r3, r3, #2
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d007      	beq.n	8016d64 <f_open+0x1d4>
 8016d54:	7fbb      	ldrb	r3, [r7, #30]
 8016d56:	f003 0301 	and.w	r3, r3, #1
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d002      	beq.n	8016d64 <f_open+0x1d4>
						res = FR_DENIED;
 8016d5e:	2307      	movs	r3, #7
 8016d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8016d64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d128      	bne.n	8016dbe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016d6c:	79fb      	ldrb	r3, [r7, #7]
 8016d6e:	f003 0308 	and.w	r3, r3, #8
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d003      	beq.n	8016d7e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8016d76:	79fb      	ldrb	r3, [r7, #7]
 8016d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d7c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8016d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016d8c:	79fb      	ldrb	r3, [r7, #7]
 8016d8e:	f023 0301 	bic.w	r3, r3, #1
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	bf14      	ite	ne
 8016d96:	2301      	movne	r3, #1
 8016d98:	2300      	moveq	r3, #0
 8016d9a:	b2db      	uxtb	r3, r3
 8016d9c:	461a      	mov	r2, r3
 8016d9e:	f107 0318 	add.w	r3, r7, #24
 8016da2:	4611      	mov	r1, r2
 8016da4:	4618      	mov	r0, r3
 8016da6:	f7fd feef 	bl	8014b88 <inc_lock>
 8016daa:	4602      	mov	r2, r0
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	691b      	ldr	r3, [r3, #16]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d102      	bne.n	8016dbe <f_open+0x22e>
 8016db8:	2302      	movs	r3, #2
 8016dba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016dbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	f040 80a3 	bne.w	8016f0e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016dcc:	4611      	mov	r1, r2
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7fe fd94 	bl	80158fc <ld_clust>
 8016dd4:	4602      	mov	r2, r0
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ddc:	331c      	adds	r3, #28
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7fd fd6c 	bl	80148bc <ld_dword>
 8016de4:	4602      	mov	r2, r0
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	2200      	movs	r2, #0
 8016dee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016df0:	697a      	ldr	r2, [r7, #20]
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016df6:	697b      	ldr	r3, [r7, #20]
 8016df8:	88da      	ldrh	r2, [r3, #6]
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	79fa      	ldrb	r2, [r7, #7]
 8016e02:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	2200      	movs	r2, #0
 8016e08:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	2200      	movs	r2, #0
 8016e14:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	3330      	adds	r3, #48	; 0x30
 8016e1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016e1e:	2100      	movs	r1, #0
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7fd fdd6 	bl	80149d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016e26:	79fb      	ldrb	r3, [r7, #7]
 8016e28:	f003 0320 	and.w	r3, r3, #32
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d06e      	beq.n	8016f0e <f_open+0x37e>
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	68db      	ldr	r3, [r3, #12]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d06a      	beq.n	8016f0e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	68da      	ldr	r2, [r3, #12]
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016e40:	697b      	ldr	r3, [r7, #20]
 8016e42:	895b      	ldrh	r3, [r3, #10]
 8016e44:	461a      	mov	r2, r3
 8016e46:	697b      	ldr	r3, [r7, #20]
 8016e48:	899b      	ldrh	r3, [r3, #12]
 8016e4a:	fb02 f303 	mul.w	r3, r2, r3
 8016e4e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	689b      	ldr	r3, [r3, #8]
 8016e54:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	68db      	ldr	r3, [r3, #12]
 8016e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016e5c:	e016      	b.n	8016e8c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016e62:	4618      	mov	r0, r3
 8016e64:	f7fe f87f 	bl	8014f66 <get_fat>
 8016e68:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8016e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016e6c:	2b01      	cmp	r3, #1
 8016e6e:	d802      	bhi.n	8016e76 <f_open+0x2e6>
 8016e70:	2302      	movs	r3, #2
 8016e72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e7c:	d102      	bne.n	8016e84 <f_open+0x2f4>
 8016e7e:	2301      	movs	r3, #1
 8016e80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e88:	1ad3      	subs	r3, r2, r3
 8016e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016e8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d103      	bne.n	8016e9c <f_open+0x30c>
 8016e94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e98:	429a      	cmp	r2, r3
 8016e9a:	d8e0      	bhi.n	8016e5e <f_open+0x2ce>
				}
				fp->clust = clst;
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016ea0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016ea2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d131      	bne.n	8016f0e <f_open+0x37e>
 8016eaa:	697b      	ldr	r3, [r7, #20]
 8016eac:	899b      	ldrh	r3, [r3, #12]
 8016eae:	461a      	mov	r2, r3
 8016eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016eb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8016eb6:	fb01 f202 	mul.w	r2, r1, r2
 8016eba:	1a9b      	subs	r3, r3, r2
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d026      	beq.n	8016f0e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f7fe f82f 	bl	8014f28 <clust2sect>
 8016eca:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d103      	bne.n	8016eda <f_open+0x34a>
						res = FR_INT_ERR;
 8016ed2:	2302      	movs	r3, #2
 8016ed4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016ed8:	e019      	b.n	8016f0e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016eda:	697b      	ldr	r3, [r7, #20]
 8016edc:	899b      	ldrh	r3, [r3, #12]
 8016ede:	461a      	mov	r2, r3
 8016ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ee2:	fbb3 f2f2 	udiv	r2, r3, r2
 8016ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ee8:	441a      	add	r2, r3
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	7858      	ldrb	r0, [r3, #1]
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	6a1a      	ldr	r2, [r3, #32]
 8016efc:	2301      	movs	r3, #1
 8016efe:	f7fd fc67 	bl	80147d0 <disk_read>
 8016f02:	4603      	mov	r3, r0
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d002      	beq.n	8016f0e <f_open+0x37e>
 8016f08:	2301      	movs	r3, #1
 8016f0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016f0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d002      	beq.n	8016f1c <f_open+0x38c>
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	2200      	movs	r2, #0
 8016f1a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016f1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8016f20:	4618      	mov	r0, r3
 8016f22:	3768      	adds	r7, #104	; 0x68
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}

08016f28 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b08c      	sub	sp, #48	; 0x30
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	60f8      	str	r0, [r7, #12]
 8016f30:	60b9      	str	r1, [r7, #8]
 8016f32:	607a      	str	r2, [r7, #4]
 8016f34:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	f107 0210 	add.w	r2, r7, #16
 8016f46:	4611      	mov	r1, r2
 8016f48:	4618      	mov	r0, r3
 8016f4a:	f7ff fda5 	bl	8016a98 <validate>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016f54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d107      	bne.n	8016f6c <f_write+0x44>
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	7d5b      	ldrb	r3, [r3, #21]
 8016f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d002      	beq.n	8016f72 <f_write+0x4a>
 8016f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016f70:	e16a      	b.n	8017248 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	7d1b      	ldrb	r3, [r3, #20]
 8016f76:	f003 0302 	and.w	r3, r3, #2
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d101      	bne.n	8016f82 <f_write+0x5a>
 8016f7e:	2307      	movs	r3, #7
 8016f80:	e162      	b.n	8017248 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	699a      	ldr	r2, [r3, #24]
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	441a      	add	r2, r3
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	699b      	ldr	r3, [r3, #24]
 8016f8e:	429a      	cmp	r2, r3
 8016f90:	f080 814c 	bcs.w	801722c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	699b      	ldr	r3, [r3, #24]
 8016f98:	43db      	mvns	r3, r3
 8016f9a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016f9c:	e146      	b.n	801722c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	699b      	ldr	r3, [r3, #24]
 8016fa2:	693a      	ldr	r2, [r7, #16]
 8016fa4:	8992      	ldrh	r2, [r2, #12]
 8016fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8016faa:	fb01 f202 	mul.w	r2, r1, r2
 8016fae:	1a9b      	subs	r3, r3, r2
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	f040 80f1 	bne.w	8017198 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	699b      	ldr	r3, [r3, #24]
 8016fba:	693a      	ldr	r2, [r7, #16]
 8016fbc:	8992      	ldrh	r2, [r2, #12]
 8016fbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8016fc2:	693a      	ldr	r2, [r7, #16]
 8016fc4:	8952      	ldrh	r2, [r2, #10]
 8016fc6:	3a01      	subs	r2, #1
 8016fc8:	4013      	ands	r3, r2
 8016fca:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016fcc:	69bb      	ldr	r3, [r7, #24]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d143      	bne.n	801705a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	699b      	ldr	r3, [r3, #24]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d10c      	bne.n	8016ff4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	689b      	ldr	r3, [r3, #8]
 8016fde:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d11a      	bne.n	801701c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	2100      	movs	r1, #0
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7fe fa10 	bl	8015410 <create_chain>
 8016ff0:	62b8      	str	r0, [r7, #40]	; 0x28
 8016ff2:	e013      	b.n	801701c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d007      	beq.n	801700c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	699b      	ldr	r3, [r3, #24]
 8017000:	4619      	mov	r1, r3
 8017002:	68f8      	ldr	r0, [r7, #12]
 8017004:	f7fe fa9c 	bl	8015540 <clmt_clust>
 8017008:	62b8      	str	r0, [r7, #40]	; 0x28
 801700a:	e007      	b.n	801701c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801700c:	68fa      	ldr	r2, [r7, #12]
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	69db      	ldr	r3, [r3, #28]
 8017012:	4619      	mov	r1, r3
 8017014:	4610      	mov	r0, r2
 8017016:	f7fe f9fb 	bl	8015410 <create_chain>
 801701a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701e:	2b00      	cmp	r3, #0
 8017020:	f000 8109 	beq.w	8017236 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017026:	2b01      	cmp	r3, #1
 8017028:	d104      	bne.n	8017034 <f_write+0x10c>
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	2202      	movs	r2, #2
 801702e:	755a      	strb	r2, [r3, #21]
 8017030:	2302      	movs	r3, #2
 8017032:	e109      	b.n	8017248 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801703a:	d104      	bne.n	8017046 <f_write+0x11e>
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	2201      	movs	r2, #1
 8017040:	755a      	strb	r2, [r3, #21]
 8017042:	2301      	movs	r3, #1
 8017044:	e100      	b.n	8017248 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801704a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	689b      	ldr	r3, [r3, #8]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d102      	bne.n	801705a <f_write+0x132>
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017058:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	7d1b      	ldrb	r3, [r3, #20]
 801705e:	b25b      	sxtb	r3, r3
 8017060:	2b00      	cmp	r3, #0
 8017062:	da18      	bge.n	8017096 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017064:	693b      	ldr	r3, [r7, #16]
 8017066:	7858      	ldrb	r0, [r3, #1]
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	6a1a      	ldr	r2, [r3, #32]
 8017072:	2301      	movs	r3, #1
 8017074:	f7fd fbcc 	bl	8014810 <disk_write>
 8017078:	4603      	mov	r3, r0
 801707a:	2b00      	cmp	r3, #0
 801707c:	d004      	beq.n	8017088 <f_write+0x160>
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	2201      	movs	r2, #1
 8017082:	755a      	strb	r2, [r3, #21]
 8017084:	2301      	movs	r3, #1
 8017086:	e0df      	b.n	8017248 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	7d1b      	ldrb	r3, [r3, #20]
 801708c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017090:	b2da      	uxtb	r2, r3
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017096:	693a      	ldr	r2, [r7, #16]
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	69db      	ldr	r3, [r3, #28]
 801709c:	4619      	mov	r1, r3
 801709e:	4610      	mov	r0, r2
 80170a0:	f7fd ff42 	bl	8014f28 <clust2sect>
 80170a4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80170a6:	697b      	ldr	r3, [r7, #20]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d104      	bne.n	80170b6 <f_write+0x18e>
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	2202      	movs	r2, #2
 80170b0:	755a      	strb	r2, [r3, #21]
 80170b2:	2302      	movs	r3, #2
 80170b4:	e0c8      	b.n	8017248 <f_write+0x320>
			sect += csect;
 80170b6:	697a      	ldr	r2, [r7, #20]
 80170b8:	69bb      	ldr	r3, [r7, #24]
 80170ba:	4413      	add	r3, r2
 80170bc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80170be:	693b      	ldr	r3, [r7, #16]
 80170c0:	899b      	ldrh	r3, [r3, #12]
 80170c2:	461a      	mov	r2, r3
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80170ca:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80170cc:	6a3b      	ldr	r3, [r7, #32]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d043      	beq.n	801715a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80170d2:	69ba      	ldr	r2, [r7, #24]
 80170d4:	6a3b      	ldr	r3, [r7, #32]
 80170d6:	4413      	add	r3, r2
 80170d8:	693a      	ldr	r2, [r7, #16]
 80170da:	8952      	ldrh	r2, [r2, #10]
 80170dc:	4293      	cmp	r3, r2
 80170de:	d905      	bls.n	80170ec <f_write+0x1c4>
					cc = fs->csize - csect;
 80170e0:	693b      	ldr	r3, [r7, #16]
 80170e2:	895b      	ldrh	r3, [r3, #10]
 80170e4:	461a      	mov	r2, r3
 80170e6:	69bb      	ldr	r3, [r7, #24]
 80170e8:	1ad3      	subs	r3, r2, r3
 80170ea:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80170ec:	693b      	ldr	r3, [r7, #16]
 80170ee:	7858      	ldrb	r0, [r3, #1]
 80170f0:	6a3b      	ldr	r3, [r7, #32]
 80170f2:	697a      	ldr	r2, [r7, #20]
 80170f4:	69f9      	ldr	r1, [r7, #28]
 80170f6:	f7fd fb8b 	bl	8014810 <disk_write>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d004      	beq.n	801710a <f_write+0x1e2>
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	2201      	movs	r2, #1
 8017104:	755a      	strb	r2, [r3, #21]
 8017106:	2301      	movs	r3, #1
 8017108:	e09e      	b.n	8017248 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	6a1a      	ldr	r2, [r3, #32]
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	1ad3      	subs	r3, r2, r3
 8017112:	6a3a      	ldr	r2, [r7, #32]
 8017114:	429a      	cmp	r2, r3
 8017116:	d918      	bls.n	801714a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	6a1a      	ldr	r2, [r3, #32]
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	1ad3      	subs	r3, r2, r3
 8017126:	693a      	ldr	r2, [r7, #16]
 8017128:	8992      	ldrh	r2, [r2, #12]
 801712a:	fb02 f303 	mul.w	r3, r2, r3
 801712e:	69fa      	ldr	r2, [r7, #28]
 8017130:	18d1      	adds	r1, r2, r3
 8017132:	693b      	ldr	r3, [r7, #16]
 8017134:	899b      	ldrh	r3, [r3, #12]
 8017136:	461a      	mov	r2, r3
 8017138:	f7fd fc2a 	bl	8014990 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	7d1b      	ldrb	r3, [r3, #20]
 8017140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017144:	b2da      	uxtb	r2, r3
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801714a:	693b      	ldr	r3, [r7, #16]
 801714c:	899b      	ldrh	r3, [r3, #12]
 801714e:	461a      	mov	r2, r3
 8017150:	6a3b      	ldr	r3, [r7, #32]
 8017152:	fb02 f303 	mul.w	r3, r2, r3
 8017156:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017158:	e04b      	b.n	80171f2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	6a1b      	ldr	r3, [r3, #32]
 801715e:	697a      	ldr	r2, [r7, #20]
 8017160:	429a      	cmp	r2, r3
 8017162:	d016      	beq.n	8017192 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	699a      	ldr	r2, [r3, #24]
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801716c:	429a      	cmp	r2, r3
 801716e:	d210      	bcs.n	8017192 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017170:	693b      	ldr	r3, [r7, #16]
 8017172:	7858      	ldrb	r0, [r3, #1]
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801717a:	2301      	movs	r3, #1
 801717c:	697a      	ldr	r2, [r7, #20]
 801717e:	f7fd fb27 	bl	80147d0 <disk_read>
 8017182:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017184:	2b00      	cmp	r3, #0
 8017186:	d004      	beq.n	8017192 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	2201      	movs	r2, #1
 801718c:	755a      	strb	r2, [r3, #21]
 801718e:	2301      	movs	r3, #1
 8017190:	e05a      	b.n	8017248 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	697a      	ldr	r2, [r7, #20]
 8017196:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017198:	693b      	ldr	r3, [r7, #16]
 801719a:	899b      	ldrh	r3, [r3, #12]
 801719c:	4618      	mov	r0, r3
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	699b      	ldr	r3, [r3, #24]
 80171a2:	693a      	ldr	r2, [r7, #16]
 80171a4:	8992      	ldrh	r2, [r2, #12]
 80171a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80171aa:	fb01 f202 	mul.w	r2, r1, r2
 80171ae:	1a9b      	subs	r3, r3, r2
 80171b0:	1ac3      	subs	r3, r0, r3
 80171b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80171b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	429a      	cmp	r2, r3
 80171ba:	d901      	bls.n	80171c0 <f_write+0x298>
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	699b      	ldr	r3, [r3, #24]
 80171ca:	693a      	ldr	r2, [r7, #16]
 80171cc:	8992      	ldrh	r2, [r2, #12]
 80171ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80171d2:	fb00 f202 	mul.w	r2, r0, r2
 80171d6:	1a9b      	subs	r3, r3, r2
 80171d8:	440b      	add	r3, r1
 80171da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171dc:	69f9      	ldr	r1, [r7, #28]
 80171de:	4618      	mov	r0, r3
 80171e0:	f7fd fbd6 	bl	8014990 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	7d1b      	ldrb	r3, [r3, #20]
 80171e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80171ec:	b2da      	uxtb	r2, r3
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80171f2:	69fa      	ldr	r2, [r7, #28]
 80171f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f6:	4413      	add	r3, r2
 80171f8:	61fb      	str	r3, [r7, #28]
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	699a      	ldr	r2, [r3, #24]
 80171fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017200:	441a      	add	r2, r3
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	619a      	str	r2, [r3, #24]
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	68da      	ldr	r2, [r3, #12]
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	699b      	ldr	r3, [r3, #24]
 801720e:	429a      	cmp	r2, r3
 8017210:	bf38      	it	cc
 8017212:	461a      	movcc	r2, r3
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	60da      	str	r2, [r3, #12]
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	681a      	ldr	r2, [r3, #0]
 801721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801721e:	441a      	add	r2, r3
 8017220:	683b      	ldr	r3, [r7, #0]
 8017222:	601a      	str	r2, [r3, #0]
 8017224:	687a      	ldr	r2, [r7, #4]
 8017226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017228:	1ad3      	subs	r3, r2, r3
 801722a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	2b00      	cmp	r3, #0
 8017230:	f47f aeb5 	bne.w	8016f9e <f_write+0x76>
 8017234:	e000      	b.n	8017238 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017236:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	7d1b      	ldrb	r3, [r3, #20]
 801723c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017240:	b2da      	uxtb	r2, r3
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017246:	2300      	movs	r3, #0
}
 8017248:	4618      	mov	r0, r3
 801724a:	3730      	adds	r7, #48	; 0x30
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}

08017250 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b086      	sub	sp, #24
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f107 0208 	add.w	r2, r7, #8
 801725e:	4611      	mov	r1, r2
 8017260:	4618      	mov	r0, r3
 8017262:	f7ff fc19 	bl	8016a98 <validate>
 8017266:	4603      	mov	r3, r0
 8017268:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801726a:	7dfb      	ldrb	r3, [r7, #23]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d168      	bne.n	8017342 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	7d1b      	ldrb	r3, [r3, #20]
 8017274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017278:	2b00      	cmp	r3, #0
 801727a:	d062      	beq.n	8017342 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	7d1b      	ldrb	r3, [r3, #20]
 8017280:	b25b      	sxtb	r3, r3
 8017282:	2b00      	cmp	r3, #0
 8017284:	da15      	bge.n	80172b2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017286:	68bb      	ldr	r3, [r7, #8]
 8017288:	7858      	ldrb	r0, [r3, #1]
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	6a1a      	ldr	r2, [r3, #32]
 8017294:	2301      	movs	r3, #1
 8017296:	f7fd fabb 	bl	8014810 <disk_write>
 801729a:	4603      	mov	r3, r0
 801729c:	2b00      	cmp	r3, #0
 801729e:	d001      	beq.n	80172a4 <f_sync+0x54>
 80172a0:	2301      	movs	r3, #1
 80172a2:	e04f      	b.n	8017344 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	7d1b      	ldrb	r3, [r3, #20]
 80172a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80172ac:	b2da      	uxtb	r2, r3
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80172b2:	f7fb f863 	bl	801237c <get_fattime>
 80172b6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80172b8:	68ba      	ldr	r2, [r7, #8]
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172be:	4619      	mov	r1, r3
 80172c0:	4610      	mov	r0, r2
 80172c2:	f7fd fd93 	bl	8014dec <move_window>
 80172c6:	4603      	mov	r3, r0
 80172c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80172ca:	7dfb      	ldrb	r3, [r7, #23]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d138      	bne.n	8017342 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172d4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	330b      	adds	r3, #11
 80172da:	781a      	ldrb	r2, [r3, #0]
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	330b      	adds	r3, #11
 80172e0:	f042 0220 	orr.w	r2, r2, #32
 80172e4:	b2d2      	uxtb	r2, r2
 80172e6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	6818      	ldr	r0, [r3, #0]
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	689b      	ldr	r3, [r3, #8]
 80172f0:	461a      	mov	r2, r3
 80172f2:	68f9      	ldr	r1, [r7, #12]
 80172f4:	f7fe fb21 	bl	801593a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	f103 021c 	add.w	r2, r3, #28
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	68db      	ldr	r3, [r3, #12]
 8017302:	4619      	mov	r1, r3
 8017304:	4610      	mov	r0, r2
 8017306:	f7fd fb17 	bl	8014938 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	3316      	adds	r3, #22
 801730e:	6939      	ldr	r1, [r7, #16]
 8017310:	4618      	mov	r0, r3
 8017312:	f7fd fb11 	bl	8014938 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	3312      	adds	r3, #18
 801731a:	2100      	movs	r1, #0
 801731c:	4618      	mov	r0, r3
 801731e:	f7fd faf0 	bl	8014902 <st_word>
					fs->wflag = 1;
 8017322:	68bb      	ldr	r3, [r7, #8]
 8017324:	2201      	movs	r2, #1
 8017326:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017328:	68bb      	ldr	r3, [r7, #8]
 801732a:	4618      	mov	r0, r3
 801732c:	f7fd fd8c 	bl	8014e48 <sync_fs>
 8017330:	4603      	mov	r3, r0
 8017332:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	7d1b      	ldrb	r3, [r3, #20]
 8017338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801733c:	b2da      	uxtb	r2, r3
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017342:	7dfb      	ldrb	r3, [r7, #23]
}
 8017344:	4618      	mov	r0, r3
 8017346:	3718      	adds	r7, #24
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}

0801734c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b084      	sub	sp, #16
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017354:	6878      	ldr	r0, [r7, #4]
 8017356:	f7ff ff7b 	bl	8017250 <f_sync>
 801735a:	4603      	mov	r3, r0
 801735c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801735e:	7bfb      	ldrb	r3, [r7, #15]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d118      	bne.n	8017396 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	f107 0208 	add.w	r2, r7, #8
 801736a:	4611      	mov	r1, r2
 801736c:	4618      	mov	r0, r3
 801736e:	f7ff fb93 	bl	8016a98 <validate>
 8017372:	4603      	mov	r3, r0
 8017374:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017376:	7bfb      	ldrb	r3, [r7, #15]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d10c      	bne.n	8017396 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	691b      	ldr	r3, [r3, #16]
 8017380:	4618      	mov	r0, r3
 8017382:	f7fd fc8f 	bl	8014ca4 <dec_lock>
 8017386:	4603      	mov	r3, r0
 8017388:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801738a:	7bfb      	ldrb	r3, [r7, #15]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d102      	bne.n	8017396 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2200      	movs	r2, #0
 8017394:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017396:	7bfb      	ldrb	r3, [r7, #15]
}
 8017398:	4618      	mov	r0, r3
 801739a:	3710      	adds	r7, #16
 801739c:	46bd      	mov	sp, r7
 801739e:	bd80      	pop	{r7, pc}

080173a0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b084      	sub	sp, #16
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
 80173a8:	460b      	mov	r3, r1
 80173aa:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80173ac:	78fb      	ldrb	r3, [r7, #3]
 80173ae:	2b0a      	cmp	r3, #10
 80173b0:	d103      	bne.n	80173ba <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80173b2:	210d      	movs	r1, #13
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f7ff fff3 	bl	80173a0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	685b      	ldr	r3, [r3, #4]
 80173be:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	db25      	blt.n	8017412 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	1c5a      	adds	r2, r3, #1
 80173ca:	60fa      	str	r2, [r7, #12]
 80173cc:	687a      	ldr	r2, [r7, #4]
 80173ce:	4413      	add	r3, r2
 80173d0:	78fa      	ldrb	r2, [r7, #3]
 80173d2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	2b3c      	cmp	r3, #60	; 0x3c
 80173d8:	dd12      	ble.n	8017400 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	6818      	ldr	r0, [r3, #0]
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	f103 010c 	add.w	r1, r3, #12
 80173e4:	68fa      	ldr	r2, [r7, #12]
 80173e6:	f107 0308 	add.w	r3, r7, #8
 80173ea:	f7ff fd9d 	bl	8016f28 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80173ee:	68ba      	ldr	r2, [r7, #8]
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d101      	bne.n	80173fa <putc_bfd+0x5a>
 80173f6:	2300      	movs	r3, #0
 80173f8:	e001      	b.n	80173fe <putc_bfd+0x5e>
 80173fa:	f04f 33ff 	mov.w	r3, #4294967295
 80173fe:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	68fa      	ldr	r2, [r7, #12]
 8017404:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	689b      	ldr	r3, [r3, #8]
 801740a:	1c5a      	adds	r2, r3, #1
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	609a      	str	r2, [r3, #8]
 8017410:	e000      	b.n	8017414 <putc_bfd+0x74>
	if (i < 0) return;
 8017412:	bf00      	nop
}
 8017414:	3710      	adds	r7, #16
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}

0801741a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801741a:	b580      	push	{r7, lr}
 801741c:	b084      	sub	sp, #16
 801741e:	af00      	add	r7, sp, #0
 8017420:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	685b      	ldr	r3, [r3, #4]
 8017426:	2b00      	cmp	r3, #0
 8017428:	db16      	blt.n	8017458 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	6818      	ldr	r0, [r3, #0]
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	f103 010c 	add.w	r1, r3, #12
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	685b      	ldr	r3, [r3, #4]
 8017438:	461a      	mov	r2, r3
 801743a:	f107 030c 	add.w	r3, r7, #12
 801743e:	f7ff fd73 	bl	8016f28 <f_write>
 8017442:	4603      	mov	r3, r0
 8017444:	2b00      	cmp	r3, #0
 8017446:	d107      	bne.n	8017458 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	685b      	ldr	r3, [r3, #4]
 801744c:	68fa      	ldr	r2, [r7, #12]
 801744e:	4293      	cmp	r3, r2
 8017450:	d102      	bne.n	8017458 <putc_flush+0x3e>
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	689b      	ldr	r3, [r3, #8]
 8017456:	e001      	b.n	801745c <putc_flush+0x42>
	return EOF;
 8017458:	f04f 33ff 	mov.w	r3, #4294967295
}
 801745c:	4618      	mov	r0, r3
 801745e:	3710      	adds	r7, #16
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}

08017464 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8017464:	b480      	push	{r7}
 8017466:	b083      	sub	sp, #12
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	683a      	ldr	r2, [r7, #0]
 8017472:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	2200      	movs	r2, #0
 8017478:	605a      	str	r2, [r3, #4]
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	685a      	ldr	r2, [r3, #4]
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	609a      	str	r2, [r3, #8]
}
 8017482:	bf00      	nop
 8017484:	370c      	adds	r7, #12
 8017486:	46bd      	mov	sp, r7
 8017488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748c:	4770      	bx	lr

0801748e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801748e:	b580      	push	{r7, lr}
 8017490:	b096      	sub	sp, #88	; 0x58
 8017492:	af00      	add	r7, sp, #0
 8017494:	6078      	str	r0, [r7, #4]
 8017496:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8017498:	f107 030c 	add.w	r3, r7, #12
 801749c:	6839      	ldr	r1, [r7, #0]
 801749e:	4618      	mov	r0, r3
 80174a0:	f7ff ffe0 	bl	8017464 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80174a4:	e009      	b.n	80174ba <f_puts+0x2c>
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	1c5a      	adds	r2, r3, #1
 80174aa:	607a      	str	r2, [r7, #4]
 80174ac:	781a      	ldrb	r2, [r3, #0]
 80174ae:	f107 030c 	add.w	r3, r7, #12
 80174b2:	4611      	mov	r1, r2
 80174b4:	4618      	mov	r0, r3
 80174b6:	f7ff ff73 	bl	80173a0 <putc_bfd>
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	781b      	ldrb	r3, [r3, #0]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d1f1      	bne.n	80174a6 <f_puts+0x18>
	return putc_flush(&pb);
 80174c2:	f107 030c 	add.w	r3, r7, #12
 80174c6:	4618      	mov	r0, r3
 80174c8:	f7ff ffa7 	bl	801741a <putc_flush>
 80174cc:	4603      	mov	r3, r0
}
 80174ce:	4618      	mov	r0, r3
 80174d0:	3758      	adds	r7, #88	; 0x58
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}
	...

080174d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80174d8:	b480      	push	{r7}
 80174da:	b087      	sub	sp, #28
 80174dc:	af00      	add	r7, sp, #0
 80174de:	60f8      	str	r0, [r7, #12]
 80174e0:	60b9      	str	r1, [r7, #8]
 80174e2:	4613      	mov	r3, r2
 80174e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80174e6:	2301      	movs	r3, #1
 80174e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80174ea:	2300      	movs	r3, #0
 80174ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80174ee:	4b1f      	ldr	r3, [pc, #124]	; (801756c <FATFS_LinkDriverEx+0x94>)
 80174f0:	7a5b      	ldrb	r3, [r3, #9]
 80174f2:	b2db      	uxtb	r3, r3
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d131      	bne.n	801755c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80174f8:	4b1c      	ldr	r3, [pc, #112]	; (801756c <FATFS_LinkDriverEx+0x94>)
 80174fa:	7a5b      	ldrb	r3, [r3, #9]
 80174fc:	b2db      	uxtb	r3, r3
 80174fe:	461a      	mov	r2, r3
 8017500:	4b1a      	ldr	r3, [pc, #104]	; (801756c <FATFS_LinkDriverEx+0x94>)
 8017502:	2100      	movs	r1, #0
 8017504:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017506:	4b19      	ldr	r3, [pc, #100]	; (801756c <FATFS_LinkDriverEx+0x94>)
 8017508:	7a5b      	ldrb	r3, [r3, #9]
 801750a:	b2db      	uxtb	r3, r3
 801750c:	4a17      	ldr	r2, [pc, #92]	; (801756c <FATFS_LinkDriverEx+0x94>)
 801750e:	009b      	lsls	r3, r3, #2
 8017510:	4413      	add	r3, r2
 8017512:	68fa      	ldr	r2, [r7, #12]
 8017514:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017516:	4b15      	ldr	r3, [pc, #84]	; (801756c <FATFS_LinkDriverEx+0x94>)
 8017518:	7a5b      	ldrb	r3, [r3, #9]
 801751a:	b2db      	uxtb	r3, r3
 801751c:	461a      	mov	r2, r3
 801751e:	4b13      	ldr	r3, [pc, #76]	; (801756c <FATFS_LinkDriverEx+0x94>)
 8017520:	4413      	add	r3, r2
 8017522:	79fa      	ldrb	r2, [r7, #7]
 8017524:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017526:	4b11      	ldr	r3, [pc, #68]	; (801756c <FATFS_LinkDriverEx+0x94>)
 8017528:	7a5b      	ldrb	r3, [r3, #9]
 801752a:	b2db      	uxtb	r3, r3
 801752c:	1c5a      	adds	r2, r3, #1
 801752e:	b2d1      	uxtb	r1, r2
 8017530:	4a0e      	ldr	r2, [pc, #56]	; (801756c <FATFS_LinkDriverEx+0x94>)
 8017532:	7251      	strb	r1, [r2, #9]
 8017534:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017536:	7dbb      	ldrb	r3, [r7, #22]
 8017538:	3330      	adds	r3, #48	; 0x30
 801753a:	b2da      	uxtb	r2, r3
 801753c:	68bb      	ldr	r3, [r7, #8]
 801753e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017540:	68bb      	ldr	r3, [r7, #8]
 8017542:	3301      	adds	r3, #1
 8017544:	223a      	movs	r2, #58	; 0x3a
 8017546:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017548:	68bb      	ldr	r3, [r7, #8]
 801754a:	3302      	adds	r3, #2
 801754c:	222f      	movs	r2, #47	; 0x2f
 801754e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	3303      	adds	r3, #3
 8017554:	2200      	movs	r2, #0
 8017556:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017558:	2300      	movs	r3, #0
 801755a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801755c:	7dfb      	ldrb	r3, [r7, #23]
}
 801755e:	4618      	mov	r0, r3
 8017560:	371c      	adds	r7, #28
 8017562:	46bd      	mov	sp, r7
 8017564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017568:	4770      	bx	lr
 801756a:	bf00      	nop
 801756c:	24000f54 	.word	0x24000f54

08017570 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b082      	sub	sp, #8
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
 8017578:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801757a:	2200      	movs	r2, #0
 801757c:	6839      	ldr	r1, [r7, #0]
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	f7ff ffaa 	bl	80174d8 <FATFS_LinkDriverEx>
 8017584:	4603      	mov	r3, r0
}
 8017586:	4618      	mov	r0, r3
 8017588:	3708      	adds	r7, #8
 801758a:	46bd      	mov	sp, r7
 801758c:	bd80      	pop	{r7, pc}
	...

08017590 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8017590:	b480      	push	{r7}
 8017592:	b085      	sub	sp, #20
 8017594:	af00      	add	r7, sp, #0
 8017596:	4603      	mov	r3, r0
 8017598:	6039      	str	r1, [r7, #0]
 801759a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801759c:	88fb      	ldrh	r3, [r7, #6]
 801759e:	2b7f      	cmp	r3, #127	; 0x7f
 80175a0:	d802      	bhi.n	80175a8 <ff_convert+0x18>
		c = chr;
 80175a2:	88fb      	ldrh	r3, [r7, #6]
 80175a4:	81fb      	strh	r3, [r7, #14]
 80175a6:	e025      	b.n	80175f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d00b      	beq.n	80175c6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80175ae:	88fb      	ldrh	r3, [r7, #6]
 80175b0:	2bff      	cmp	r3, #255	; 0xff
 80175b2:	d805      	bhi.n	80175c0 <ff_convert+0x30>
 80175b4:	88fb      	ldrh	r3, [r7, #6]
 80175b6:	3b80      	subs	r3, #128	; 0x80
 80175b8:	4a12      	ldr	r2, [pc, #72]	; (8017604 <ff_convert+0x74>)
 80175ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80175be:	e000      	b.n	80175c2 <ff_convert+0x32>
 80175c0:	2300      	movs	r3, #0
 80175c2:	81fb      	strh	r3, [r7, #14]
 80175c4:	e016      	b.n	80175f4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80175c6:	2300      	movs	r3, #0
 80175c8:	81fb      	strh	r3, [r7, #14]
 80175ca:	e009      	b.n	80175e0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80175cc:	89fb      	ldrh	r3, [r7, #14]
 80175ce:	4a0d      	ldr	r2, [pc, #52]	; (8017604 <ff_convert+0x74>)
 80175d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80175d4:	88fa      	ldrh	r2, [r7, #6]
 80175d6:	429a      	cmp	r2, r3
 80175d8:	d006      	beq.n	80175e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80175da:	89fb      	ldrh	r3, [r7, #14]
 80175dc:	3301      	adds	r3, #1
 80175de:	81fb      	strh	r3, [r7, #14]
 80175e0:	89fb      	ldrh	r3, [r7, #14]
 80175e2:	2b7f      	cmp	r3, #127	; 0x7f
 80175e4:	d9f2      	bls.n	80175cc <ff_convert+0x3c>
 80175e6:	e000      	b.n	80175ea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80175e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80175ea:	89fb      	ldrh	r3, [r7, #14]
 80175ec:	3380      	adds	r3, #128	; 0x80
 80175ee:	b29b      	uxth	r3, r3
 80175f0:	b2db      	uxtb	r3, r3
 80175f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80175f4:	89fb      	ldrh	r3, [r7, #14]
}
 80175f6:	4618      	mov	r0, r3
 80175f8:	3714      	adds	r7, #20
 80175fa:	46bd      	mov	sp, r7
 80175fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017600:	4770      	bx	lr
 8017602:	bf00      	nop
 8017604:	0801ca74 	.word	0x0801ca74

08017608 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8017608:	b480      	push	{r7}
 801760a:	b087      	sub	sp, #28
 801760c:	af00      	add	r7, sp, #0
 801760e:	4603      	mov	r3, r0
 8017610:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8017612:	88fb      	ldrh	r3, [r7, #6]
 8017614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017618:	d201      	bcs.n	801761e <ff_wtoupper+0x16>
 801761a:	4b3e      	ldr	r3, [pc, #248]	; (8017714 <ff_wtoupper+0x10c>)
 801761c:	e000      	b.n	8017620 <ff_wtoupper+0x18>
 801761e:	4b3e      	ldr	r3, [pc, #248]	; (8017718 <ff_wtoupper+0x110>)
 8017620:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8017622:	697b      	ldr	r3, [r7, #20]
 8017624:	1c9a      	adds	r2, r3, #2
 8017626:	617a      	str	r2, [r7, #20]
 8017628:	881b      	ldrh	r3, [r3, #0]
 801762a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801762c:	8a7b      	ldrh	r3, [r7, #18]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d068      	beq.n	8017704 <ff_wtoupper+0xfc>
 8017632:	88fa      	ldrh	r2, [r7, #6]
 8017634:	8a7b      	ldrh	r3, [r7, #18]
 8017636:	429a      	cmp	r2, r3
 8017638:	d364      	bcc.n	8017704 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	1c9a      	adds	r2, r3, #2
 801763e:	617a      	str	r2, [r7, #20]
 8017640:	881b      	ldrh	r3, [r3, #0]
 8017642:	823b      	strh	r3, [r7, #16]
 8017644:	8a3b      	ldrh	r3, [r7, #16]
 8017646:	0a1b      	lsrs	r3, r3, #8
 8017648:	81fb      	strh	r3, [r7, #14]
 801764a:	8a3b      	ldrh	r3, [r7, #16]
 801764c:	b2db      	uxtb	r3, r3
 801764e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8017650:	88fa      	ldrh	r2, [r7, #6]
 8017652:	8a79      	ldrh	r1, [r7, #18]
 8017654:	8a3b      	ldrh	r3, [r7, #16]
 8017656:	440b      	add	r3, r1
 8017658:	429a      	cmp	r2, r3
 801765a:	da49      	bge.n	80176f0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801765c:	89fb      	ldrh	r3, [r7, #14]
 801765e:	2b08      	cmp	r3, #8
 8017660:	d84f      	bhi.n	8017702 <ff_wtoupper+0xfa>
 8017662:	a201      	add	r2, pc, #4	; (adr r2, 8017668 <ff_wtoupper+0x60>)
 8017664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017668:	0801768d 	.word	0x0801768d
 801766c:	0801769f 	.word	0x0801769f
 8017670:	080176b5 	.word	0x080176b5
 8017674:	080176bd 	.word	0x080176bd
 8017678:	080176c5 	.word	0x080176c5
 801767c:	080176cd 	.word	0x080176cd
 8017680:	080176d5 	.word	0x080176d5
 8017684:	080176dd 	.word	0x080176dd
 8017688:	080176e5 	.word	0x080176e5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801768c:	88fa      	ldrh	r2, [r7, #6]
 801768e:	8a7b      	ldrh	r3, [r7, #18]
 8017690:	1ad3      	subs	r3, r2, r3
 8017692:	005b      	lsls	r3, r3, #1
 8017694:	697a      	ldr	r2, [r7, #20]
 8017696:	4413      	add	r3, r2
 8017698:	881b      	ldrh	r3, [r3, #0]
 801769a:	80fb      	strh	r3, [r7, #6]
 801769c:	e027      	b.n	80176ee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801769e:	88fa      	ldrh	r2, [r7, #6]
 80176a0:	8a7b      	ldrh	r3, [r7, #18]
 80176a2:	1ad3      	subs	r3, r2, r3
 80176a4:	b29b      	uxth	r3, r3
 80176a6:	f003 0301 	and.w	r3, r3, #1
 80176aa:	b29b      	uxth	r3, r3
 80176ac:	88fa      	ldrh	r2, [r7, #6]
 80176ae:	1ad3      	subs	r3, r2, r3
 80176b0:	80fb      	strh	r3, [r7, #6]
 80176b2:	e01c      	b.n	80176ee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80176b4:	88fb      	ldrh	r3, [r7, #6]
 80176b6:	3b10      	subs	r3, #16
 80176b8:	80fb      	strh	r3, [r7, #6]
 80176ba:	e018      	b.n	80176ee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80176bc:	88fb      	ldrh	r3, [r7, #6]
 80176be:	3b20      	subs	r3, #32
 80176c0:	80fb      	strh	r3, [r7, #6]
 80176c2:	e014      	b.n	80176ee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80176c4:	88fb      	ldrh	r3, [r7, #6]
 80176c6:	3b30      	subs	r3, #48	; 0x30
 80176c8:	80fb      	strh	r3, [r7, #6]
 80176ca:	e010      	b.n	80176ee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80176cc:	88fb      	ldrh	r3, [r7, #6]
 80176ce:	3b1a      	subs	r3, #26
 80176d0:	80fb      	strh	r3, [r7, #6]
 80176d2:	e00c      	b.n	80176ee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80176d4:	88fb      	ldrh	r3, [r7, #6]
 80176d6:	3308      	adds	r3, #8
 80176d8:	80fb      	strh	r3, [r7, #6]
 80176da:	e008      	b.n	80176ee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80176dc:	88fb      	ldrh	r3, [r7, #6]
 80176de:	3b50      	subs	r3, #80	; 0x50
 80176e0:	80fb      	strh	r3, [r7, #6]
 80176e2:	e004      	b.n	80176ee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80176e4:	88fb      	ldrh	r3, [r7, #6]
 80176e6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80176ea:	80fb      	strh	r3, [r7, #6]
 80176ec:	bf00      	nop
			}
			break;
 80176ee:	e008      	b.n	8017702 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80176f0:	89fb      	ldrh	r3, [r7, #14]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d195      	bne.n	8017622 <ff_wtoupper+0x1a>
 80176f6:	8a3b      	ldrh	r3, [r7, #16]
 80176f8:	005b      	lsls	r3, r3, #1
 80176fa:	697a      	ldr	r2, [r7, #20]
 80176fc:	4413      	add	r3, r2
 80176fe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8017700:	e78f      	b.n	8017622 <ff_wtoupper+0x1a>
			break;
 8017702:	bf00      	nop
	}

	return chr;
 8017704:	88fb      	ldrh	r3, [r7, #6]
}
 8017706:	4618      	mov	r0, r3
 8017708:	371c      	adds	r7, #28
 801770a:	46bd      	mov	sp, r7
 801770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017710:	4770      	bx	lr
 8017712:	bf00      	nop
 8017714:	0801cb74 	.word	0x0801cb74
 8017718:	0801cd68 	.word	0x0801cd68

0801771c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8017720:	2201      	movs	r2, #1
 8017722:	4913      	ldr	r1, [pc, #76]	; (8017770 <MX_USB_DEVICE_Init+0x54>)
 8017724:	4813      	ldr	r0, [pc, #76]	; (8017774 <MX_USB_DEVICE_Init+0x58>)
 8017726:	f7fb fd1b 	bl	8013160 <USBD_Init>
 801772a:	4603      	mov	r3, r0
 801772c:	2b00      	cmp	r3, #0
 801772e:	d001      	beq.n	8017734 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017730:	f7ea fa00 	bl	8001b34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8017734:	4910      	ldr	r1, [pc, #64]	; (8017778 <MX_USB_DEVICE_Init+0x5c>)
 8017736:	480f      	ldr	r0, [pc, #60]	; (8017774 <MX_USB_DEVICE_Init+0x58>)
 8017738:	f7fb fd42 	bl	80131c0 <USBD_RegisterClass>
 801773c:	4603      	mov	r3, r0
 801773e:	2b00      	cmp	r3, #0
 8017740:	d001      	beq.n	8017746 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017742:	f7ea f9f7 	bl	8001b34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8017746:	490d      	ldr	r1, [pc, #52]	; (801777c <MX_USB_DEVICE_Init+0x60>)
 8017748:	480a      	ldr	r0, [pc, #40]	; (8017774 <MX_USB_DEVICE_Init+0x58>)
 801774a:	f7fb fc39 	bl	8012fc0 <USBD_CDC_RegisterInterface>
 801774e:	4603      	mov	r3, r0
 8017750:	2b00      	cmp	r3, #0
 8017752:	d001      	beq.n	8017758 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017754:	f7ea f9ee 	bl	8001b34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8017758:	4806      	ldr	r0, [pc, #24]	; (8017774 <MX_USB_DEVICE_Init+0x58>)
 801775a:	f7fb fd67 	bl	801322c <USBD_Start>
 801775e:	4603      	mov	r3, r0
 8017760:	2b00      	cmp	r3, #0
 8017762:	d001      	beq.n	8017768 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017764:	f7ea f9e6 	bl	8001b34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017768:	f7f1 fa4a 	bl	8008c00 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801776c:	bf00      	nop
 801776e:	bd80      	pop	{r7, pc}
 8017770:	240000b0 	.word	0x240000b0
 8017774:	24000f60 	.word	0x24000f60
 8017778:	2400001c 	.word	0x2400001c
 801777c:	2400009c 	.word	0x2400009c

08017780 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8017784:	2200      	movs	r2, #0
 8017786:	4905      	ldr	r1, [pc, #20]	; (801779c <CDC_Init_HS+0x1c>)
 8017788:	4805      	ldr	r0, [pc, #20]	; (80177a0 <CDC_Init_HS+0x20>)
 801778a:	f7fb fc33 	bl	8012ff4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801778e:	4905      	ldr	r1, [pc, #20]	; (80177a4 <CDC_Init_HS+0x24>)
 8017790:	4803      	ldr	r0, [pc, #12]	; (80177a0 <CDC_Init_HS+0x20>)
 8017792:	f7fb fc51 	bl	8013038 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017796:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017798:	4618      	mov	r0, r3
 801779a:	bd80      	pop	{r7, pc}
 801779c:	24001a3c 	.word	0x24001a3c
 80177a0:	24000f60 	.word	0x24000f60
 80177a4:	2400123c 	.word	0x2400123c

080177a8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80177a8:	b480      	push	{r7}
 80177aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80177ac:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80177ae:	4618      	mov	r0, r3
 80177b0:	46bd      	mov	sp, r7
 80177b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b6:	4770      	bx	lr

080177b8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80177b8:	b480      	push	{r7}
 80177ba:	b083      	sub	sp, #12
 80177bc:	af00      	add	r7, sp, #0
 80177be:	4603      	mov	r3, r0
 80177c0:	6039      	str	r1, [r7, #0]
 80177c2:	71fb      	strb	r3, [r7, #7]
 80177c4:	4613      	mov	r3, r2
 80177c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80177c8:	79fb      	ldrb	r3, [r7, #7]
 80177ca:	2b23      	cmp	r3, #35	; 0x23
 80177cc:	d84a      	bhi.n	8017864 <CDC_Control_HS+0xac>
 80177ce:	a201      	add	r2, pc, #4	; (adr r2, 80177d4 <CDC_Control_HS+0x1c>)
 80177d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177d4:	08017865 	.word	0x08017865
 80177d8:	08017865 	.word	0x08017865
 80177dc:	08017865 	.word	0x08017865
 80177e0:	08017865 	.word	0x08017865
 80177e4:	08017865 	.word	0x08017865
 80177e8:	08017865 	.word	0x08017865
 80177ec:	08017865 	.word	0x08017865
 80177f0:	08017865 	.word	0x08017865
 80177f4:	08017865 	.word	0x08017865
 80177f8:	08017865 	.word	0x08017865
 80177fc:	08017865 	.word	0x08017865
 8017800:	08017865 	.word	0x08017865
 8017804:	08017865 	.word	0x08017865
 8017808:	08017865 	.word	0x08017865
 801780c:	08017865 	.word	0x08017865
 8017810:	08017865 	.word	0x08017865
 8017814:	08017865 	.word	0x08017865
 8017818:	08017865 	.word	0x08017865
 801781c:	08017865 	.word	0x08017865
 8017820:	08017865 	.word	0x08017865
 8017824:	08017865 	.word	0x08017865
 8017828:	08017865 	.word	0x08017865
 801782c:	08017865 	.word	0x08017865
 8017830:	08017865 	.word	0x08017865
 8017834:	08017865 	.word	0x08017865
 8017838:	08017865 	.word	0x08017865
 801783c:	08017865 	.word	0x08017865
 8017840:	08017865 	.word	0x08017865
 8017844:	08017865 	.word	0x08017865
 8017848:	08017865 	.word	0x08017865
 801784c:	08017865 	.word	0x08017865
 8017850:	08017865 	.word	0x08017865
 8017854:	08017865 	.word	0x08017865
 8017858:	08017865 	.word	0x08017865
 801785c:	08017865 	.word	0x08017865
 8017860:	08017865 	.word	0x08017865
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017864:	bf00      	nop
  }

  return (USBD_OK);
 8017866:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8017868:	4618      	mov	r0, r3
 801786a:	370c      	adds	r7, #12
 801786c:	46bd      	mov	sp, r7
 801786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017872:	4770      	bx	lr

08017874 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b082      	sub	sp, #8
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
 801787c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801787e:	6879      	ldr	r1, [r7, #4]
 8017880:	4805      	ldr	r0, [pc, #20]	; (8017898 <CDC_Receive_HS+0x24>)
 8017882:	f7fb fbd9 	bl	8013038 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8017886:	4804      	ldr	r0, [pc, #16]	; (8017898 <CDC_Receive_HS+0x24>)
 8017888:	f7fb fc34 	bl	80130f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801788c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801788e:	4618      	mov	r0, r3
 8017890:	3708      	adds	r7, #8
 8017892:	46bd      	mov	sp, r7
 8017894:	bd80      	pop	{r7, pc}
 8017896:	bf00      	nop
 8017898:	24000f60 	.word	0x24000f60

0801789c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b084      	sub	sp, #16
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
 80178a4:	460b      	mov	r3, r1
 80178a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80178a8:	2300      	movs	r3, #0
 80178aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80178ac:	4b0d      	ldr	r3, [pc, #52]	; (80178e4 <CDC_Transmit_HS+0x48>)
 80178ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80178b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80178b4:	68bb      	ldr	r3, [r7, #8]
 80178b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d001      	beq.n	80178c2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80178be:	2301      	movs	r3, #1
 80178c0:	e00b      	b.n	80178da <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80178c2:	887b      	ldrh	r3, [r7, #2]
 80178c4:	461a      	mov	r2, r3
 80178c6:	6879      	ldr	r1, [r7, #4]
 80178c8:	4806      	ldr	r0, [pc, #24]	; (80178e4 <CDC_Transmit_HS+0x48>)
 80178ca:	f7fb fb93 	bl	8012ff4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80178ce:	4805      	ldr	r0, [pc, #20]	; (80178e4 <CDC_Transmit_HS+0x48>)
 80178d0:	f7fb fbd0 	bl	8013074 <USBD_CDC_TransmitPacket>
 80178d4:	4603      	mov	r3, r0
 80178d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80178d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80178da:	4618      	mov	r0, r3
 80178dc:	3710      	adds	r7, #16
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	24000f60 	.word	0x24000f60

080178e8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80178e8:	b480      	push	{r7}
 80178ea:	b087      	sub	sp, #28
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	60f8      	str	r0, [r7, #12]
 80178f0:	60b9      	str	r1, [r7, #8]
 80178f2:	4613      	mov	r3, r2
 80178f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80178f6:	2300      	movs	r3, #0
 80178f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80178fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80178fe:	4618      	mov	r0, r3
 8017900:	371c      	adds	r7, #28
 8017902:	46bd      	mov	sp, r7
 8017904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017908:	4770      	bx	lr
	...

0801790c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801790c:	b480      	push	{r7}
 801790e:	b083      	sub	sp, #12
 8017910:	af00      	add	r7, sp, #0
 8017912:	4603      	mov	r3, r0
 8017914:	6039      	str	r1, [r7, #0]
 8017916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8017918:	683b      	ldr	r3, [r7, #0]
 801791a:	2212      	movs	r2, #18
 801791c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801791e:	4b03      	ldr	r3, [pc, #12]	; (801792c <USBD_HS_DeviceDescriptor+0x20>)
}
 8017920:	4618      	mov	r0, r3
 8017922:	370c      	adds	r7, #12
 8017924:	46bd      	mov	sp, r7
 8017926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792a:	4770      	bx	lr
 801792c:	240000cc 	.word	0x240000cc

08017930 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017930:	b480      	push	{r7}
 8017932:	b083      	sub	sp, #12
 8017934:	af00      	add	r7, sp, #0
 8017936:	4603      	mov	r3, r0
 8017938:	6039      	str	r1, [r7, #0]
 801793a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801793c:	683b      	ldr	r3, [r7, #0]
 801793e:	2204      	movs	r2, #4
 8017940:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017942:	4b03      	ldr	r3, [pc, #12]	; (8017950 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8017944:	4618      	mov	r0, r3
 8017946:	370c      	adds	r7, #12
 8017948:	46bd      	mov	sp, r7
 801794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794e:	4770      	bx	lr
 8017950:	240000e0 	.word	0x240000e0

08017954 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b082      	sub	sp, #8
 8017958:	af00      	add	r7, sp, #0
 801795a:	4603      	mov	r3, r0
 801795c:	6039      	str	r1, [r7, #0]
 801795e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017960:	79fb      	ldrb	r3, [r7, #7]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d105      	bne.n	8017972 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017966:	683a      	ldr	r2, [r7, #0]
 8017968:	4907      	ldr	r1, [pc, #28]	; (8017988 <USBD_HS_ProductStrDescriptor+0x34>)
 801796a:	4808      	ldr	r0, [pc, #32]	; (801798c <USBD_HS_ProductStrDescriptor+0x38>)
 801796c:	f7fc fe10 	bl	8014590 <USBD_GetString>
 8017970:	e004      	b.n	801797c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017972:	683a      	ldr	r2, [r7, #0]
 8017974:	4904      	ldr	r1, [pc, #16]	; (8017988 <USBD_HS_ProductStrDescriptor+0x34>)
 8017976:	4805      	ldr	r0, [pc, #20]	; (801798c <USBD_HS_ProductStrDescriptor+0x38>)
 8017978:	f7fc fe0a 	bl	8014590 <USBD_GetString>
  }
  return USBD_StrDesc;
 801797c:	4b02      	ldr	r3, [pc, #8]	; (8017988 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801797e:	4618      	mov	r0, r3
 8017980:	3708      	adds	r7, #8
 8017982:	46bd      	mov	sp, r7
 8017984:	bd80      	pop	{r7, pc}
 8017986:	bf00      	nop
 8017988:	2400223c 	.word	0x2400223c
 801798c:	0801c954 	.word	0x0801c954

08017990 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b082      	sub	sp, #8
 8017994:	af00      	add	r7, sp, #0
 8017996:	4603      	mov	r3, r0
 8017998:	6039      	str	r1, [r7, #0]
 801799a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801799c:	683a      	ldr	r2, [r7, #0]
 801799e:	4904      	ldr	r1, [pc, #16]	; (80179b0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80179a0:	4804      	ldr	r0, [pc, #16]	; (80179b4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80179a2:	f7fc fdf5 	bl	8014590 <USBD_GetString>
  return USBD_StrDesc;
 80179a6:	4b02      	ldr	r3, [pc, #8]	; (80179b0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80179a8:	4618      	mov	r0, r3
 80179aa:	3708      	adds	r7, #8
 80179ac:	46bd      	mov	sp, r7
 80179ae:	bd80      	pop	{r7, pc}
 80179b0:	2400223c 	.word	0x2400223c
 80179b4:	0801c970 	.word	0x0801c970

080179b8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b082      	sub	sp, #8
 80179bc:	af00      	add	r7, sp, #0
 80179be:	4603      	mov	r3, r0
 80179c0:	6039      	str	r1, [r7, #0]
 80179c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80179c4:	683b      	ldr	r3, [r7, #0]
 80179c6:	221a      	movs	r2, #26
 80179c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80179ca:	f000 f843 	bl	8017a54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80179ce:	4b02      	ldr	r3, [pc, #8]	; (80179d8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80179d0:	4618      	mov	r0, r3
 80179d2:	3708      	adds	r7, #8
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd80      	pop	{r7, pc}
 80179d8:	240000e4 	.word	0x240000e4

080179dc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b082      	sub	sp, #8
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	4603      	mov	r3, r0
 80179e4:	6039      	str	r1, [r7, #0]
 80179e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80179e8:	79fb      	ldrb	r3, [r7, #7]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d105      	bne.n	80179fa <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80179ee:	683a      	ldr	r2, [r7, #0]
 80179f0:	4907      	ldr	r1, [pc, #28]	; (8017a10 <USBD_HS_ConfigStrDescriptor+0x34>)
 80179f2:	4808      	ldr	r0, [pc, #32]	; (8017a14 <USBD_HS_ConfigStrDescriptor+0x38>)
 80179f4:	f7fc fdcc 	bl	8014590 <USBD_GetString>
 80179f8:	e004      	b.n	8017a04 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80179fa:	683a      	ldr	r2, [r7, #0]
 80179fc:	4904      	ldr	r1, [pc, #16]	; (8017a10 <USBD_HS_ConfigStrDescriptor+0x34>)
 80179fe:	4805      	ldr	r0, [pc, #20]	; (8017a14 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017a00:	f7fc fdc6 	bl	8014590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017a04:	4b02      	ldr	r3, [pc, #8]	; (8017a10 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8017a06:	4618      	mov	r0, r3
 8017a08:	3708      	adds	r7, #8
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bd80      	pop	{r7, pc}
 8017a0e:	bf00      	nop
 8017a10:	2400223c 	.word	0x2400223c
 8017a14:	0801c974 	.word	0x0801c974

08017a18 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b082      	sub	sp, #8
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	4603      	mov	r3, r0
 8017a20:	6039      	str	r1, [r7, #0]
 8017a22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017a24:	79fb      	ldrb	r3, [r7, #7]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d105      	bne.n	8017a36 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8017a2a:	683a      	ldr	r2, [r7, #0]
 8017a2c:	4907      	ldr	r1, [pc, #28]	; (8017a4c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017a2e:	4808      	ldr	r0, [pc, #32]	; (8017a50 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017a30:	f7fc fdae 	bl	8014590 <USBD_GetString>
 8017a34:	e004      	b.n	8017a40 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8017a36:	683a      	ldr	r2, [r7, #0]
 8017a38:	4904      	ldr	r1, [pc, #16]	; (8017a4c <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017a3a:	4805      	ldr	r0, [pc, #20]	; (8017a50 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017a3c:	f7fc fda8 	bl	8014590 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017a40:	4b02      	ldr	r3, [pc, #8]	; (8017a4c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017a42:	4618      	mov	r0, r3
 8017a44:	3708      	adds	r7, #8
 8017a46:	46bd      	mov	sp, r7
 8017a48:	bd80      	pop	{r7, pc}
 8017a4a:	bf00      	nop
 8017a4c:	2400223c 	.word	0x2400223c
 8017a50:	0801c980 	.word	0x0801c980

08017a54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b084      	sub	sp, #16
 8017a58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017a5a:	4b0f      	ldr	r3, [pc, #60]	; (8017a98 <Get_SerialNum+0x44>)
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017a60:	4b0e      	ldr	r3, [pc, #56]	; (8017a9c <Get_SerialNum+0x48>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017a66:	4b0e      	ldr	r3, [pc, #56]	; (8017aa0 <Get_SerialNum+0x4c>)
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017a6c:	68fa      	ldr	r2, [r7, #12]
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	4413      	add	r3, r2
 8017a72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d009      	beq.n	8017a8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017a7a:	2208      	movs	r2, #8
 8017a7c:	4909      	ldr	r1, [pc, #36]	; (8017aa4 <Get_SerialNum+0x50>)
 8017a7e:	68f8      	ldr	r0, [r7, #12]
 8017a80:	f000 f814 	bl	8017aac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017a84:	2204      	movs	r2, #4
 8017a86:	4908      	ldr	r1, [pc, #32]	; (8017aa8 <Get_SerialNum+0x54>)
 8017a88:	68b8      	ldr	r0, [r7, #8]
 8017a8a:	f000 f80f 	bl	8017aac <IntToUnicode>
  }
}
 8017a8e:	bf00      	nop
 8017a90:	3710      	adds	r7, #16
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bd80      	pop	{r7, pc}
 8017a96:	bf00      	nop
 8017a98:	1ff1e800 	.word	0x1ff1e800
 8017a9c:	1ff1e804 	.word	0x1ff1e804
 8017aa0:	1ff1e808 	.word	0x1ff1e808
 8017aa4:	240000e6 	.word	0x240000e6
 8017aa8:	240000f6 	.word	0x240000f6

08017aac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017aac:	b480      	push	{r7}
 8017aae:	b087      	sub	sp, #28
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	60b9      	str	r1, [r7, #8]
 8017ab6:	4613      	mov	r3, r2
 8017ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017aba:	2300      	movs	r3, #0
 8017abc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017abe:	2300      	movs	r3, #0
 8017ac0:	75fb      	strb	r3, [r7, #23]
 8017ac2:	e027      	b.n	8017b14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	0f1b      	lsrs	r3, r3, #28
 8017ac8:	2b09      	cmp	r3, #9
 8017aca:	d80b      	bhi.n	8017ae4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	0f1b      	lsrs	r3, r3, #28
 8017ad0:	b2da      	uxtb	r2, r3
 8017ad2:	7dfb      	ldrb	r3, [r7, #23]
 8017ad4:	005b      	lsls	r3, r3, #1
 8017ad6:	4619      	mov	r1, r3
 8017ad8:	68bb      	ldr	r3, [r7, #8]
 8017ada:	440b      	add	r3, r1
 8017adc:	3230      	adds	r2, #48	; 0x30
 8017ade:	b2d2      	uxtb	r2, r2
 8017ae0:	701a      	strb	r2, [r3, #0]
 8017ae2:	e00a      	b.n	8017afa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	0f1b      	lsrs	r3, r3, #28
 8017ae8:	b2da      	uxtb	r2, r3
 8017aea:	7dfb      	ldrb	r3, [r7, #23]
 8017aec:	005b      	lsls	r3, r3, #1
 8017aee:	4619      	mov	r1, r3
 8017af0:	68bb      	ldr	r3, [r7, #8]
 8017af2:	440b      	add	r3, r1
 8017af4:	3237      	adds	r2, #55	; 0x37
 8017af6:	b2d2      	uxtb	r2, r2
 8017af8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	011b      	lsls	r3, r3, #4
 8017afe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017b00:	7dfb      	ldrb	r3, [r7, #23]
 8017b02:	005b      	lsls	r3, r3, #1
 8017b04:	3301      	adds	r3, #1
 8017b06:	68ba      	ldr	r2, [r7, #8]
 8017b08:	4413      	add	r3, r2
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017b0e:	7dfb      	ldrb	r3, [r7, #23]
 8017b10:	3301      	adds	r3, #1
 8017b12:	75fb      	strb	r3, [r7, #23]
 8017b14:	7dfa      	ldrb	r2, [r7, #23]
 8017b16:	79fb      	ldrb	r3, [r7, #7]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d3d3      	bcc.n	8017ac4 <IntToUnicode+0x18>
  }
}
 8017b1c:	bf00      	nop
 8017b1e:	bf00      	nop
 8017b20:	371c      	adds	r7, #28
 8017b22:	46bd      	mov	sp, r7
 8017b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b28:	4770      	bx	lr
	...

08017b2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b0b2      	sub	sp, #200	; 0xc8
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017b34:	f107 0310 	add.w	r3, r7, #16
 8017b38:	22b8      	movs	r2, #184	; 0xb8
 8017b3a:	2100      	movs	r1, #0
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f000 fb39 	bl	80181b4 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	4a1a      	ldr	r2, [pc, #104]	; (8017bb0 <HAL_PCD_MspInit+0x84>)
 8017b48:	4293      	cmp	r3, r2
 8017b4a:	d12c      	bne.n	8017ba6 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017b4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8017b50:	f04f 0300 	mov.w	r3, #0
 8017b54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017b58:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8017b5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017b60:	f107 0310 	add.w	r3, r7, #16
 8017b64:	4618      	mov	r0, r3
 8017b66:	f7f2 f82b 	bl	8009bc0 <HAL_RCCEx_PeriphCLKConfig>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d001      	beq.n	8017b74 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8017b70:	f7e9 ffe0 	bl	8001b34 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017b74:	f7f1 f844 	bl	8008c00 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017b78:	4b0e      	ldr	r3, [pc, #56]	; (8017bb4 <HAL_PCD_MspInit+0x88>)
 8017b7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017b7e:	4a0d      	ldr	r2, [pc, #52]	; (8017bb4 <HAL_PCD_MspInit+0x88>)
 8017b80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017b84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017b88:	4b0a      	ldr	r3, [pc, #40]	; (8017bb4 <HAL_PCD_MspInit+0x88>)
 8017b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017b92:	60fb      	str	r3, [r7, #12]
 8017b94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8017b96:	2200      	movs	r2, #0
 8017b98:	2100      	movs	r1, #0
 8017b9a:	204d      	movs	r0, #77	; 0x4d
 8017b9c:	f7ed f9e1 	bl	8004f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017ba0:	204d      	movs	r0, #77	; 0x4d
 8017ba2:	f7ed f9f8 	bl	8004f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017ba6:	bf00      	nop
 8017ba8:	37c8      	adds	r7, #200	; 0xc8
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bd80      	pop	{r7, pc}
 8017bae:	bf00      	nop
 8017bb0:	40040000 	.word	0x40040000
 8017bb4:	58024400 	.word	0x58024400

08017bb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b082      	sub	sp, #8
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017bcc:	4619      	mov	r1, r3
 8017bce:	4610      	mov	r0, r2
 8017bd0:	f7fb fb79 	bl	80132c6 <USBD_LL_SetupStage>
}
 8017bd4:	bf00      	nop
 8017bd6:	3708      	adds	r7, #8
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	bd80      	pop	{r7, pc}

08017bdc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b082      	sub	sp, #8
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	6078      	str	r0, [r7, #4]
 8017be4:	460b      	mov	r3, r1
 8017be6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017bee:	78fa      	ldrb	r2, [r7, #3]
 8017bf0:	6879      	ldr	r1, [r7, #4]
 8017bf2:	4613      	mov	r3, r2
 8017bf4:	00db      	lsls	r3, r3, #3
 8017bf6:	4413      	add	r3, r2
 8017bf8:	009b      	lsls	r3, r3, #2
 8017bfa:	440b      	add	r3, r1
 8017bfc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8017c00:	681a      	ldr	r2, [r3, #0]
 8017c02:	78fb      	ldrb	r3, [r7, #3]
 8017c04:	4619      	mov	r1, r3
 8017c06:	f7fb fbb3 	bl	8013370 <USBD_LL_DataOutStage>
}
 8017c0a:	bf00      	nop
 8017c0c:	3708      	adds	r7, #8
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bd80      	pop	{r7, pc}

08017c12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c12:	b580      	push	{r7, lr}
 8017c14:	b082      	sub	sp, #8
 8017c16:	af00      	add	r7, sp, #0
 8017c18:	6078      	str	r0, [r7, #4]
 8017c1a:	460b      	mov	r3, r1
 8017c1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017c24:	78fa      	ldrb	r2, [r7, #3]
 8017c26:	6879      	ldr	r1, [r7, #4]
 8017c28:	4613      	mov	r3, r2
 8017c2a:	00db      	lsls	r3, r3, #3
 8017c2c:	4413      	add	r3, r2
 8017c2e:	009b      	lsls	r3, r3, #2
 8017c30:	440b      	add	r3, r1
 8017c32:	3348      	adds	r3, #72	; 0x48
 8017c34:	681a      	ldr	r2, [r3, #0]
 8017c36:	78fb      	ldrb	r3, [r7, #3]
 8017c38:	4619      	mov	r1, r3
 8017c3a:	f7fb fc4c 	bl	80134d6 <USBD_LL_DataInStage>
}
 8017c3e:	bf00      	nop
 8017c40:	3708      	adds	r7, #8
 8017c42:	46bd      	mov	sp, r7
 8017c44:	bd80      	pop	{r7, pc}

08017c46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c46:	b580      	push	{r7, lr}
 8017c48:	b082      	sub	sp, #8
 8017c4a:	af00      	add	r7, sp, #0
 8017c4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017c54:	4618      	mov	r0, r3
 8017c56:	f7fb fd86 	bl	8013766 <USBD_LL_SOF>
}
 8017c5a:	bf00      	nop
 8017c5c:	3708      	adds	r7, #8
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bd80      	pop	{r7, pc}

08017c62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c62:	b580      	push	{r7, lr}
 8017c64:	b084      	sub	sp, #16
 8017c66:	af00      	add	r7, sp, #0
 8017c68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017c6a:	2301      	movs	r3, #1
 8017c6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	691b      	ldr	r3, [r3, #16]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d102      	bne.n	8017c7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017c76:	2300      	movs	r3, #0
 8017c78:	73fb      	strb	r3, [r7, #15]
 8017c7a:	e008      	b.n	8017c8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	691b      	ldr	r3, [r3, #16]
 8017c80:	2b02      	cmp	r3, #2
 8017c82:	d102      	bne.n	8017c8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017c84:	2301      	movs	r3, #1
 8017c86:	73fb      	strb	r3, [r7, #15]
 8017c88:	e001      	b.n	8017c8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017c8a:	f7e9 ff53 	bl	8001b34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017c94:	7bfa      	ldrb	r2, [r7, #15]
 8017c96:	4611      	mov	r1, r2
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f7fb fd20 	bl	80136de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f7fb fcc8 	bl	801363a <USBD_LL_Reset>
}
 8017caa:	bf00      	nop
 8017cac:	3710      	adds	r7, #16
 8017cae:	46bd      	mov	sp, r7
 8017cb0:	bd80      	pop	{r7, pc}
	...

08017cb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b082      	sub	sp, #8
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	f7fb fd1b 	bl	80136fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	687a      	ldr	r2, [r7, #4]
 8017cd4:	6812      	ldr	r2, [r2, #0]
 8017cd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017cda:	f043 0301 	orr.w	r3, r3, #1
 8017cde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	6a1b      	ldr	r3, [r3, #32]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d005      	beq.n	8017cf4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017ce8:	4b04      	ldr	r3, [pc, #16]	; (8017cfc <HAL_PCD_SuspendCallback+0x48>)
 8017cea:	691b      	ldr	r3, [r3, #16]
 8017cec:	4a03      	ldr	r2, [pc, #12]	; (8017cfc <HAL_PCD_SuspendCallback+0x48>)
 8017cee:	f043 0306 	orr.w	r3, r3, #6
 8017cf2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017cf4:	bf00      	nop
 8017cf6:	3708      	adds	r7, #8
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	bd80      	pop	{r7, pc}
 8017cfc:	e000ed00 	.word	0xe000ed00

08017d00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b082      	sub	sp, #8
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f7fb fd11 	bl	8013736 <USBD_LL_Resume>
}
 8017d14:	bf00      	nop
 8017d16:	3708      	adds	r7, #8
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
 8017d24:	460b      	mov	r3, r1
 8017d26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017d2e:	78fa      	ldrb	r2, [r7, #3]
 8017d30:	4611      	mov	r1, r2
 8017d32:	4618      	mov	r0, r3
 8017d34:	f7fb fd69 	bl	801380a <USBD_LL_IsoOUTIncomplete>
}
 8017d38:	bf00      	nop
 8017d3a:	3708      	adds	r7, #8
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}

08017d40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b082      	sub	sp, #8
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
 8017d48:	460b      	mov	r3, r1
 8017d4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017d52:	78fa      	ldrb	r2, [r7, #3]
 8017d54:	4611      	mov	r1, r2
 8017d56:	4618      	mov	r0, r3
 8017d58:	f7fb fd25 	bl	80137a6 <USBD_LL_IsoINIncomplete>
}
 8017d5c:	bf00      	nop
 8017d5e:	3708      	adds	r7, #8
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}

08017d64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b082      	sub	sp, #8
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017d72:	4618      	mov	r0, r3
 8017d74:	f7fb fd7b 	bl	801386e <USBD_LL_DevConnected>
}
 8017d78:	bf00      	nop
 8017d7a:	3708      	adds	r7, #8
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}

08017d80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b082      	sub	sp, #8
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017d8e:	4618      	mov	r0, r3
 8017d90:	f7fb fd78 	bl	8013884 <USBD_LL_DevDisconnected>
}
 8017d94:	bf00      	nop
 8017d96:	3708      	adds	r7, #8
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	bd80      	pop	{r7, pc}

08017d9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b082      	sub	sp, #8
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	781b      	ldrb	r3, [r3, #0]
 8017da8:	2b01      	cmp	r3, #1
 8017daa:	d140      	bne.n	8017e2e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017dac:	4a22      	ldr	r2, [pc, #136]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	4a20      	ldr	r2, [pc, #128]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017db8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017dbc:	4b1e      	ldr	r3, [pc, #120]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017dbe:	4a1f      	ldr	r2, [pc, #124]	; (8017e3c <USBD_LL_Init+0xa0>)
 8017dc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8017dc2:	4b1d      	ldr	r3, [pc, #116]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017dc4:	2209      	movs	r2, #9
 8017dc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017dc8:	4b1b      	ldr	r3, [pc, #108]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017dca:	2202      	movs	r2, #2
 8017dcc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017dce:	4b1a      	ldr	r3, [pc, #104]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017dd0:	2200      	movs	r2, #0
 8017dd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017dd4:	4b18      	ldr	r3, [pc, #96]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017dd6:	2202      	movs	r2, #2
 8017dd8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017dda:	4b17      	ldr	r3, [pc, #92]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017ddc:	2200      	movs	r2, #0
 8017dde:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017de0:	4b15      	ldr	r3, [pc, #84]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017de2:	2200      	movs	r2, #0
 8017de4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017de6:	4b14      	ldr	r3, [pc, #80]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017de8:	2200      	movs	r2, #0
 8017dea:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017dec:	4b12      	ldr	r3, [pc, #72]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017dee:	2200      	movs	r2, #0
 8017df0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017df2:	4b11      	ldr	r3, [pc, #68]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017df4:	2200      	movs	r2, #0
 8017df6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017df8:	4b0f      	ldr	r3, [pc, #60]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017dfe:	480e      	ldr	r0, [pc, #56]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017e00:	f7ef fc0b 	bl	800761a <HAL_PCD_Init>
 8017e04:	4603      	mov	r3, r0
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d001      	beq.n	8017e0e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017e0a:	f7e9 fe93 	bl	8001b34 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017e0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017e12:	4809      	ldr	r0, [pc, #36]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017e14:	f7f0 fe79 	bl	8008b0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017e18:	2280      	movs	r2, #128	; 0x80
 8017e1a:	2100      	movs	r1, #0
 8017e1c:	4806      	ldr	r0, [pc, #24]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017e1e:	f7f0 fe2d 	bl	8008a7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017e22:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017e26:	2101      	movs	r1, #1
 8017e28:	4803      	ldr	r0, [pc, #12]	; (8017e38 <USBD_LL_Init+0x9c>)
 8017e2a:	f7f0 fe27 	bl	8008a7c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8017e2e:	2300      	movs	r3, #0
}
 8017e30:	4618      	mov	r0, r3
 8017e32:	3708      	adds	r7, #8
 8017e34:	46bd      	mov	sp, r7
 8017e36:	bd80      	pop	{r7, pc}
 8017e38:	2400243c 	.word	0x2400243c
 8017e3c:	40040000 	.word	0x40040000

08017e40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b084      	sub	sp, #16
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e48:	2300      	movs	r3, #0
 8017e4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017e56:	4618      	mov	r0, r3
 8017e58:	f7ef fd03 	bl	8007862 <HAL_PCD_Start>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e60:	7bfb      	ldrb	r3, [r7, #15]
 8017e62:	4618      	mov	r0, r3
 8017e64:	f000 f942 	bl	80180ec <USBD_Get_USB_Status>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e6e:	4618      	mov	r0, r3
 8017e70:	3710      	adds	r7, #16
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd80      	pop	{r7, pc}

08017e76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017e76:	b580      	push	{r7, lr}
 8017e78:	b084      	sub	sp, #16
 8017e7a:	af00      	add	r7, sp, #0
 8017e7c:	6078      	str	r0, [r7, #4]
 8017e7e:	4608      	mov	r0, r1
 8017e80:	4611      	mov	r1, r2
 8017e82:	461a      	mov	r2, r3
 8017e84:	4603      	mov	r3, r0
 8017e86:	70fb      	strb	r3, [r7, #3]
 8017e88:	460b      	mov	r3, r1
 8017e8a:	70bb      	strb	r3, [r7, #2]
 8017e8c:	4613      	mov	r3, r2
 8017e8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e90:	2300      	movs	r3, #0
 8017e92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e94:	2300      	movs	r3, #0
 8017e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017e9e:	78bb      	ldrb	r3, [r7, #2]
 8017ea0:	883a      	ldrh	r2, [r7, #0]
 8017ea2:	78f9      	ldrb	r1, [r7, #3]
 8017ea4:	f7f0 fa03 	bl	80082ae <HAL_PCD_EP_Open>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017eac:	7bfb      	ldrb	r3, [r7, #15]
 8017eae:	4618      	mov	r0, r3
 8017eb0:	f000 f91c 	bl	80180ec <USBD_Get_USB_Status>
 8017eb4:	4603      	mov	r3, r0
 8017eb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017eb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017eba:	4618      	mov	r0, r3
 8017ebc:	3710      	adds	r7, #16
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	bd80      	pop	{r7, pc}

08017ec2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ec2:	b580      	push	{r7, lr}
 8017ec4:	b084      	sub	sp, #16
 8017ec6:	af00      	add	r7, sp, #0
 8017ec8:	6078      	str	r0, [r7, #4]
 8017eca:	460b      	mov	r3, r1
 8017ecc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ece:	2300      	movs	r3, #0
 8017ed0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017edc:	78fa      	ldrb	r2, [r7, #3]
 8017ede:	4611      	mov	r1, r2
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	f7f0 fa4c 	bl	800837e <HAL_PCD_EP_Close>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017eea:	7bfb      	ldrb	r3, [r7, #15]
 8017eec:	4618      	mov	r0, r3
 8017eee:	f000 f8fd 	bl	80180ec <USBD_Get_USB_Status>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ef6:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ef8:	4618      	mov	r0, r3
 8017efa:	3710      	adds	r7, #16
 8017efc:	46bd      	mov	sp, r7
 8017efe:	bd80      	pop	{r7, pc}

08017f00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	b084      	sub	sp, #16
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	6078      	str	r0, [r7, #4]
 8017f08:	460b      	mov	r3, r1
 8017f0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f10:	2300      	movs	r3, #0
 8017f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017f1a:	78fa      	ldrb	r2, [r7, #3]
 8017f1c:	4611      	mov	r1, r2
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f7f0 fb06 	bl	8008530 <HAL_PCD_EP_SetStall>
 8017f24:	4603      	mov	r3, r0
 8017f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f28:	7bfb      	ldrb	r3, [r7, #15]
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	f000 f8de 	bl	80180ec <USBD_Get_USB_Status>
 8017f30:	4603      	mov	r3, r0
 8017f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3710      	adds	r7, #16
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}

08017f3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f3e:	b580      	push	{r7, lr}
 8017f40:	b084      	sub	sp, #16
 8017f42:	af00      	add	r7, sp, #0
 8017f44:	6078      	str	r0, [r7, #4]
 8017f46:	460b      	mov	r3, r1
 8017f48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017f58:	78fa      	ldrb	r2, [r7, #3]
 8017f5a:	4611      	mov	r1, r2
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	f7f0 fb4b 	bl	80085f8 <HAL_PCD_EP_ClrStall>
 8017f62:	4603      	mov	r3, r0
 8017f64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f66:	7bfb      	ldrb	r3, [r7, #15]
 8017f68:	4618      	mov	r0, r3
 8017f6a:	f000 f8bf 	bl	80180ec <USBD_Get_USB_Status>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f74:	4618      	mov	r0, r3
 8017f76:	3710      	adds	r7, #16
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bd80      	pop	{r7, pc}

08017f7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f7c:	b480      	push	{r7}
 8017f7e:	b085      	sub	sp, #20
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
 8017f84:	460b      	mov	r3, r1
 8017f86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017f8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	da0b      	bge.n	8017fb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017f98:	78fb      	ldrb	r3, [r7, #3]
 8017f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017f9e:	68f9      	ldr	r1, [r7, #12]
 8017fa0:	4613      	mov	r3, r2
 8017fa2:	00db      	lsls	r3, r3, #3
 8017fa4:	4413      	add	r3, r2
 8017fa6:	009b      	lsls	r3, r3, #2
 8017fa8:	440b      	add	r3, r1
 8017faa:	333e      	adds	r3, #62	; 0x3e
 8017fac:	781b      	ldrb	r3, [r3, #0]
 8017fae:	e00b      	b.n	8017fc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017fb0:	78fb      	ldrb	r3, [r7, #3]
 8017fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017fb6:	68f9      	ldr	r1, [r7, #12]
 8017fb8:	4613      	mov	r3, r2
 8017fba:	00db      	lsls	r3, r3, #3
 8017fbc:	4413      	add	r3, r2
 8017fbe:	009b      	lsls	r3, r3, #2
 8017fc0:	440b      	add	r3, r1
 8017fc2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017fc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017fc8:	4618      	mov	r0, r3
 8017fca:	3714      	adds	r7, #20
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd2:	4770      	bx	lr

08017fd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b084      	sub	sp, #16
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
 8017fdc:	460b      	mov	r3, r1
 8017fde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017fee:	78fa      	ldrb	r2, [r7, #3]
 8017ff0:	4611      	mov	r1, r2
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f7f0 f936 	bl	8008264 <HAL_PCD_SetAddress>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ffc:	7bfb      	ldrb	r3, [r7, #15]
 8017ffe:	4618      	mov	r0, r3
 8018000:	f000 f874 	bl	80180ec <USBD_Get_USB_Status>
 8018004:	4603      	mov	r3, r0
 8018006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018008:	7bbb      	ldrb	r3, [r7, #14]
}
 801800a:	4618      	mov	r0, r3
 801800c:	3710      	adds	r7, #16
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}

08018012 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018012:	b580      	push	{r7, lr}
 8018014:	b086      	sub	sp, #24
 8018016:	af00      	add	r7, sp, #0
 8018018:	60f8      	str	r0, [r7, #12]
 801801a:	607a      	str	r2, [r7, #4]
 801801c:	603b      	str	r3, [r7, #0]
 801801e:	460b      	mov	r3, r1
 8018020:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018022:	2300      	movs	r3, #0
 8018024:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018026:	2300      	movs	r3, #0
 8018028:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018030:	7af9      	ldrb	r1, [r7, #11]
 8018032:	683b      	ldr	r3, [r7, #0]
 8018034:	687a      	ldr	r2, [r7, #4]
 8018036:	f7f0 fa40 	bl	80084ba <HAL_PCD_EP_Transmit>
 801803a:	4603      	mov	r3, r0
 801803c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801803e:	7dfb      	ldrb	r3, [r7, #23]
 8018040:	4618      	mov	r0, r3
 8018042:	f000 f853 	bl	80180ec <USBD_Get_USB_Status>
 8018046:	4603      	mov	r3, r0
 8018048:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801804a:	7dbb      	ldrb	r3, [r7, #22]
}
 801804c:	4618      	mov	r0, r3
 801804e:	3718      	adds	r7, #24
 8018050:	46bd      	mov	sp, r7
 8018052:	bd80      	pop	{r7, pc}

08018054 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018054:	b580      	push	{r7, lr}
 8018056:	b086      	sub	sp, #24
 8018058:	af00      	add	r7, sp, #0
 801805a:	60f8      	str	r0, [r7, #12]
 801805c:	607a      	str	r2, [r7, #4]
 801805e:	603b      	str	r3, [r7, #0]
 8018060:	460b      	mov	r3, r1
 8018062:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018064:	2300      	movs	r3, #0
 8018066:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018068:	2300      	movs	r3, #0
 801806a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018072:	7af9      	ldrb	r1, [r7, #11]
 8018074:	683b      	ldr	r3, [r7, #0]
 8018076:	687a      	ldr	r2, [r7, #4]
 8018078:	f7f0 f9cb 	bl	8008412 <HAL_PCD_EP_Receive>
 801807c:	4603      	mov	r3, r0
 801807e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018080:	7dfb      	ldrb	r3, [r7, #23]
 8018082:	4618      	mov	r0, r3
 8018084:	f000 f832 	bl	80180ec <USBD_Get_USB_Status>
 8018088:	4603      	mov	r3, r0
 801808a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801808c:	7dbb      	ldrb	r3, [r7, #22]
}
 801808e:	4618      	mov	r0, r3
 8018090:	3718      	adds	r7, #24
 8018092:	46bd      	mov	sp, r7
 8018094:	bd80      	pop	{r7, pc}

08018096 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018096:	b580      	push	{r7, lr}
 8018098:	b082      	sub	sp, #8
 801809a:	af00      	add	r7, sp, #0
 801809c:	6078      	str	r0, [r7, #4]
 801809e:	460b      	mov	r3, r1
 80180a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80180a8:	78fa      	ldrb	r2, [r7, #3]
 80180aa:	4611      	mov	r1, r2
 80180ac:	4618      	mov	r0, r3
 80180ae:	f7f0 f9ec 	bl	800848a <HAL_PCD_EP_GetRxCount>
 80180b2:	4603      	mov	r3, r0
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	3708      	adds	r7, #8
 80180b8:	46bd      	mov	sp, r7
 80180ba:	bd80      	pop	{r7, pc}

080180bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80180bc:	b480      	push	{r7}
 80180be:	b083      	sub	sp, #12
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80180c4:	4b03      	ldr	r3, [pc, #12]	; (80180d4 <USBD_static_malloc+0x18>)
}
 80180c6:	4618      	mov	r0, r3
 80180c8:	370c      	adds	r7, #12
 80180ca:	46bd      	mov	sp, r7
 80180cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d0:	4770      	bx	lr
 80180d2:	bf00      	nop
 80180d4:	24002948 	.word	0x24002948

080180d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80180d8:	b480      	push	{r7}
 80180da:	b083      	sub	sp, #12
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80180e0:	bf00      	nop
 80180e2:	370c      	adds	r7, #12
 80180e4:	46bd      	mov	sp, r7
 80180e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ea:	4770      	bx	lr

080180ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80180ec:	b480      	push	{r7}
 80180ee:	b085      	sub	sp, #20
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	4603      	mov	r3, r0
 80180f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180f6:	2300      	movs	r3, #0
 80180f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80180fa:	79fb      	ldrb	r3, [r7, #7]
 80180fc:	2b03      	cmp	r3, #3
 80180fe:	d817      	bhi.n	8018130 <USBD_Get_USB_Status+0x44>
 8018100:	a201      	add	r2, pc, #4	; (adr r2, 8018108 <USBD_Get_USB_Status+0x1c>)
 8018102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018106:	bf00      	nop
 8018108:	08018119 	.word	0x08018119
 801810c:	0801811f 	.word	0x0801811f
 8018110:	08018125 	.word	0x08018125
 8018114:	0801812b 	.word	0x0801812b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018118:	2300      	movs	r3, #0
 801811a:	73fb      	strb	r3, [r7, #15]
    break;
 801811c:	e00b      	b.n	8018136 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801811e:	2303      	movs	r3, #3
 8018120:	73fb      	strb	r3, [r7, #15]
    break;
 8018122:	e008      	b.n	8018136 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018124:	2301      	movs	r3, #1
 8018126:	73fb      	strb	r3, [r7, #15]
    break;
 8018128:	e005      	b.n	8018136 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801812a:	2303      	movs	r3, #3
 801812c:	73fb      	strb	r3, [r7, #15]
    break;
 801812e:	e002      	b.n	8018136 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018130:	2303      	movs	r3, #3
 8018132:	73fb      	strb	r3, [r7, #15]
    break;
 8018134:	bf00      	nop
  }
  return usb_status;
 8018136:	7bfb      	ldrb	r3, [r7, #15]
}
 8018138:	4618      	mov	r0, r3
 801813a:	3714      	adds	r7, #20
 801813c:	46bd      	mov	sp, r7
 801813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018142:	4770      	bx	lr

08018144 <__errno>:
 8018144:	4b01      	ldr	r3, [pc, #4]	; (801814c <__errno+0x8>)
 8018146:	6818      	ldr	r0, [r3, #0]
 8018148:	4770      	bx	lr
 801814a:	bf00      	nop
 801814c:	24000100 	.word	0x24000100

08018150 <__libc_init_array>:
 8018150:	b570      	push	{r4, r5, r6, lr}
 8018152:	4d0d      	ldr	r5, [pc, #52]	; (8018188 <__libc_init_array+0x38>)
 8018154:	4c0d      	ldr	r4, [pc, #52]	; (801818c <__libc_init_array+0x3c>)
 8018156:	1b64      	subs	r4, r4, r5
 8018158:	10a4      	asrs	r4, r4, #2
 801815a:	2600      	movs	r6, #0
 801815c:	42a6      	cmp	r6, r4
 801815e:	d109      	bne.n	8018174 <__libc_init_array+0x24>
 8018160:	4d0b      	ldr	r5, [pc, #44]	; (8018190 <__libc_init_array+0x40>)
 8018162:	4c0c      	ldr	r4, [pc, #48]	; (8018194 <__libc_init_array+0x44>)
 8018164:	f004 fb88 	bl	801c878 <_init>
 8018168:	1b64      	subs	r4, r4, r5
 801816a:	10a4      	asrs	r4, r4, #2
 801816c:	2600      	movs	r6, #0
 801816e:	42a6      	cmp	r6, r4
 8018170:	d105      	bne.n	801817e <__libc_init_array+0x2e>
 8018172:	bd70      	pop	{r4, r5, r6, pc}
 8018174:	f855 3b04 	ldr.w	r3, [r5], #4
 8018178:	4798      	blx	r3
 801817a:	3601      	adds	r6, #1
 801817c:	e7ee      	b.n	801815c <__libc_init_array+0xc>
 801817e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018182:	4798      	blx	r3
 8018184:	3601      	adds	r6, #1
 8018186:	e7f2      	b.n	801816e <__libc_init_array+0x1e>
 8018188:	0801d2d4 	.word	0x0801d2d4
 801818c:	0801d2d4 	.word	0x0801d2d4
 8018190:	0801d2d4 	.word	0x0801d2d4
 8018194:	0801d2d8 	.word	0x0801d2d8

08018198 <memcpy>:
 8018198:	440a      	add	r2, r1
 801819a:	4291      	cmp	r1, r2
 801819c:	f100 33ff 	add.w	r3, r0, #4294967295
 80181a0:	d100      	bne.n	80181a4 <memcpy+0xc>
 80181a2:	4770      	bx	lr
 80181a4:	b510      	push	{r4, lr}
 80181a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80181aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80181ae:	4291      	cmp	r1, r2
 80181b0:	d1f9      	bne.n	80181a6 <memcpy+0xe>
 80181b2:	bd10      	pop	{r4, pc}

080181b4 <memset>:
 80181b4:	4402      	add	r2, r0
 80181b6:	4603      	mov	r3, r0
 80181b8:	4293      	cmp	r3, r2
 80181ba:	d100      	bne.n	80181be <memset+0xa>
 80181bc:	4770      	bx	lr
 80181be:	f803 1b01 	strb.w	r1, [r3], #1
 80181c2:	e7f9      	b.n	80181b8 <memset+0x4>

080181c4 <__cvt>:
 80181c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181c6:	ed2d 8b02 	vpush	{d8}
 80181ca:	eeb0 8b40 	vmov.f64	d8, d0
 80181ce:	b085      	sub	sp, #20
 80181d0:	4617      	mov	r7, r2
 80181d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80181d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80181d6:	ee18 2a90 	vmov	r2, s17
 80181da:	f025 0520 	bic.w	r5, r5, #32
 80181de:	2a00      	cmp	r2, #0
 80181e0:	bfb6      	itet	lt
 80181e2:	222d      	movlt	r2, #45	; 0x2d
 80181e4:	2200      	movge	r2, #0
 80181e6:	eeb1 8b40 	vneglt.f64	d8, d0
 80181ea:	2d46      	cmp	r5, #70	; 0x46
 80181ec:	460c      	mov	r4, r1
 80181ee:	701a      	strb	r2, [r3, #0]
 80181f0:	d004      	beq.n	80181fc <__cvt+0x38>
 80181f2:	2d45      	cmp	r5, #69	; 0x45
 80181f4:	d100      	bne.n	80181f8 <__cvt+0x34>
 80181f6:	3401      	adds	r4, #1
 80181f8:	2102      	movs	r1, #2
 80181fa:	e000      	b.n	80181fe <__cvt+0x3a>
 80181fc:	2103      	movs	r1, #3
 80181fe:	ab03      	add	r3, sp, #12
 8018200:	9301      	str	r3, [sp, #4]
 8018202:	ab02      	add	r3, sp, #8
 8018204:	9300      	str	r3, [sp, #0]
 8018206:	4622      	mov	r2, r4
 8018208:	4633      	mov	r3, r6
 801820a:	eeb0 0b48 	vmov.f64	d0, d8
 801820e:	f001 fd97 	bl	8019d40 <_dtoa_r>
 8018212:	2d47      	cmp	r5, #71	; 0x47
 8018214:	d101      	bne.n	801821a <__cvt+0x56>
 8018216:	07fb      	lsls	r3, r7, #31
 8018218:	d51a      	bpl.n	8018250 <__cvt+0x8c>
 801821a:	2d46      	cmp	r5, #70	; 0x46
 801821c:	eb00 0204 	add.w	r2, r0, r4
 8018220:	d10c      	bne.n	801823c <__cvt+0x78>
 8018222:	7803      	ldrb	r3, [r0, #0]
 8018224:	2b30      	cmp	r3, #48	; 0x30
 8018226:	d107      	bne.n	8018238 <__cvt+0x74>
 8018228:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801822c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018230:	bf1c      	itt	ne
 8018232:	f1c4 0401 	rsbne	r4, r4, #1
 8018236:	6034      	strne	r4, [r6, #0]
 8018238:	6833      	ldr	r3, [r6, #0]
 801823a:	441a      	add	r2, r3
 801823c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018244:	bf08      	it	eq
 8018246:	9203      	streq	r2, [sp, #12]
 8018248:	2130      	movs	r1, #48	; 0x30
 801824a:	9b03      	ldr	r3, [sp, #12]
 801824c:	4293      	cmp	r3, r2
 801824e:	d307      	bcc.n	8018260 <__cvt+0x9c>
 8018250:	9b03      	ldr	r3, [sp, #12]
 8018252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018254:	1a1b      	subs	r3, r3, r0
 8018256:	6013      	str	r3, [r2, #0]
 8018258:	b005      	add	sp, #20
 801825a:	ecbd 8b02 	vpop	{d8}
 801825e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018260:	1c5c      	adds	r4, r3, #1
 8018262:	9403      	str	r4, [sp, #12]
 8018264:	7019      	strb	r1, [r3, #0]
 8018266:	e7f0      	b.n	801824a <__cvt+0x86>

08018268 <__exponent>:
 8018268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801826a:	4603      	mov	r3, r0
 801826c:	2900      	cmp	r1, #0
 801826e:	bfb8      	it	lt
 8018270:	4249      	neglt	r1, r1
 8018272:	f803 2b02 	strb.w	r2, [r3], #2
 8018276:	bfb4      	ite	lt
 8018278:	222d      	movlt	r2, #45	; 0x2d
 801827a:	222b      	movge	r2, #43	; 0x2b
 801827c:	2909      	cmp	r1, #9
 801827e:	7042      	strb	r2, [r0, #1]
 8018280:	dd2a      	ble.n	80182d8 <__exponent+0x70>
 8018282:	f10d 0407 	add.w	r4, sp, #7
 8018286:	46a4      	mov	ip, r4
 8018288:	270a      	movs	r7, #10
 801828a:	46a6      	mov	lr, r4
 801828c:	460a      	mov	r2, r1
 801828e:	fb91 f6f7 	sdiv	r6, r1, r7
 8018292:	fb07 1516 	mls	r5, r7, r6, r1
 8018296:	3530      	adds	r5, #48	; 0x30
 8018298:	2a63      	cmp	r2, #99	; 0x63
 801829a:	f104 34ff 	add.w	r4, r4, #4294967295
 801829e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80182a2:	4631      	mov	r1, r6
 80182a4:	dcf1      	bgt.n	801828a <__exponent+0x22>
 80182a6:	3130      	adds	r1, #48	; 0x30
 80182a8:	f1ae 0502 	sub.w	r5, lr, #2
 80182ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80182b0:	1c44      	adds	r4, r0, #1
 80182b2:	4629      	mov	r1, r5
 80182b4:	4561      	cmp	r1, ip
 80182b6:	d30a      	bcc.n	80182ce <__exponent+0x66>
 80182b8:	f10d 0209 	add.w	r2, sp, #9
 80182bc:	eba2 020e 	sub.w	r2, r2, lr
 80182c0:	4565      	cmp	r5, ip
 80182c2:	bf88      	it	hi
 80182c4:	2200      	movhi	r2, #0
 80182c6:	4413      	add	r3, r2
 80182c8:	1a18      	subs	r0, r3, r0
 80182ca:	b003      	add	sp, #12
 80182cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80182d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80182d6:	e7ed      	b.n	80182b4 <__exponent+0x4c>
 80182d8:	2330      	movs	r3, #48	; 0x30
 80182da:	3130      	adds	r1, #48	; 0x30
 80182dc:	7083      	strb	r3, [r0, #2]
 80182de:	70c1      	strb	r1, [r0, #3]
 80182e0:	1d03      	adds	r3, r0, #4
 80182e2:	e7f1      	b.n	80182c8 <__exponent+0x60>
 80182e4:	0000      	movs	r0, r0
	...

080182e8 <_printf_float>:
 80182e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182ec:	b08b      	sub	sp, #44	; 0x2c
 80182ee:	460c      	mov	r4, r1
 80182f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80182f4:	4616      	mov	r6, r2
 80182f6:	461f      	mov	r7, r3
 80182f8:	4605      	mov	r5, r0
 80182fa:	f002 fdff 	bl	801aefc <_localeconv_r>
 80182fe:	f8d0 b000 	ldr.w	fp, [r0]
 8018302:	4658      	mov	r0, fp
 8018304:	f7e8 f804 	bl	8000310 <strlen>
 8018308:	2300      	movs	r3, #0
 801830a:	9308      	str	r3, [sp, #32]
 801830c:	f8d8 3000 	ldr.w	r3, [r8]
 8018310:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018314:	6822      	ldr	r2, [r4, #0]
 8018316:	3307      	adds	r3, #7
 8018318:	f023 0307 	bic.w	r3, r3, #7
 801831c:	f103 0108 	add.w	r1, r3, #8
 8018320:	f8c8 1000 	str.w	r1, [r8]
 8018324:	4682      	mov	sl, r0
 8018326:	e9d3 0100 	ldrd	r0, r1, [r3]
 801832a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801832e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8018590 <_printf_float+0x2a8>
 8018332:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8018336:	eeb0 6bc0 	vabs.f64	d6, d0
 801833a:	eeb4 6b47 	vcmp.f64	d6, d7
 801833e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018342:	dd24      	ble.n	801838e <_printf_float+0xa6>
 8018344:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801834c:	d502      	bpl.n	8018354 <_printf_float+0x6c>
 801834e:	232d      	movs	r3, #45	; 0x2d
 8018350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018354:	4b90      	ldr	r3, [pc, #576]	; (8018598 <_printf_float+0x2b0>)
 8018356:	4891      	ldr	r0, [pc, #580]	; (801859c <_printf_float+0x2b4>)
 8018358:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801835c:	bf94      	ite	ls
 801835e:	4698      	movls	r8, r3
 8018360:	4680      	movhi	r8, r0
 8018362:	2303      	movs	r3, #3
 8018364:	6123      	str	r3, [r4, #16]
 8018366:	f022 0204 	bic.w	r2, r2, #4
 801836a:	2300      	movs	r3, #0
 801836c:	6022      	str	r2, [r4, #0]
 801836e:	9304      	str	r3, [sp, #16]
 8018370:	9700      	str	r7, [sp, #0]
 8018372:	4633      	mov	r3, r6
 8018374:	aa09      	add	r2, sp, #36	; 0x24
 8018376:	4621      	mov	r1, r4
 8018378:	4628      	mov	r0, r5
 801837a:	f000 f9d3 	bl	8018724 <_printf_common>
 801837e:	3001      	adds	r0, #1
 8018380:	f040 808a 	bne.w	8018498 <_printf_float+0x1b0>
 8018384:	f04f 30ff 	mov.w	r0, #4294967295
 8018388:	b00b      	add	sp, #44	; 0x2c
 801838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801838e:	eeb4 0b40 	vcmp.f64	d0, d0
 8018392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018396:	d709      	bvc.n	80183ac <_printf_float+0xc4>
 8018398:	ee10 3a90 	vmov	r3, s1
 801839c:	2b00      	cmp	r3, #0
 801839e:	bfbc      	itt	lt
 80183a0:	232d      	movlt	r3, #45	; 0x2d
 80183a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80183a6:	487e      	ldr	r0, [pc, #504]	; (80185a0 <_printf_float+0x2b8>)
 80183a8:	4b7e      	ldr	r3, [pc, #504]	; (80185a4 <_printf_float+0x2bc>)
 80183aa:	e7d5      	b.n	8018358 <_printf_float+0x70>
 80183ac:	6863      	ldr	r3, [r4, #4]
 80183ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80183b2:	9104      	str	r1, [sp, #16]
 80183b4:	1c59      	adds	r1, r3, #1
 80183b6:	d13c      	bne.n	8018432 <_printf_float+0x14a>
 80183b8:	2306      	movs	r3, #6
 80183ba:	6063      	str	r3, [r4, #4]
 80183bc:	2300      	movs	r3, #0
 80183be:	9303      	str	r3, [sp, #12]
 80183c0:	ab08      	add	r3, sp, #32
 80183c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80183c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80183ca:	ab07      	add	r3, sp, #28
 80183cc:	6861      	ldr	r1, [r4, #4]
 80183ce:	9300      	str	r3, [sp, #0]
 80183d0:	6022      	str	r2, [r4, #0]
 80183d2:	f10d 031b 	add.w	r3, sp, #27
 80183d6:	4628      	mov	r0, r5
 80183d8:	f7ff fef4 	bl	80181c4 <__cvt>
 80183dc:	9b04      	ldr	r3, [sp, #16]
 80183de:	9907      	ldr	r1, [sp, #28]
 80183e0:	2b47      	cmp	r3, #71	; 0x47
 80183e2:	4680      	mov	r8, r0
 80183e4:	d108      	bne.n	80183f8 <_printf_float+0x110>
 80183e6:	1cc8      	adds	r0, r1, #3
 80183e8:	db02      	blt.n	80183f0 <_printf_float+0x108>
 80183ea:	6863      	ldr	r3, [r4, #4]
 80183ec:	4299      	cmp	r1, r3
 80183ee:	dd41      	ble.n	8018474 <_printf_float+0x18c>
 80183f0:	f1a9 0902 	sub.w	r9, r9, #2
 80183f4:	fa5f f989 	uxtb.w	r9, r9
 80183f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80183fc:	d820      	bhi.n	8018440 <_printf_float+0x158>
 80183fe:	3901      	subs	r1, #1
 8018400:	464a      	mov	r2, r9
 8018402:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018406:	9107      	str	r1, [sp, #28]
 8018408:	f7ff ff2e 	bl	8018268 <__exponent>
 801840c:	9a08      	ldr	r2, [sp, #32]
 801840e:	9004      	str	r0, [sp, #16]
 8018410:	1813      	adds	r3, r2, r0
 8018412:	2a01      	cmp	r2, #1
 8018414:	6123      	str	r3, [r4, #16]
 8018416:	dc02      	bgt.n	801841e <_printf_float+0x136>
 8018418:	6822      	ldr	r2, [r4, #0]
 801841a:	07d2      	lsls	r2, r2, #31
 801841c:	d501      	bpl.n	8018422 <_printf_float+0x13a>
 801841e:	3301      	adds	r3, #1
 8018420:	6123      	str	r3, [r4, #16]
 8018422:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d0a2      	beq.n	8018370 <_printf_float+0x88>
 801842a:	232d      	movs	r3, #45	; 0x2d
 801842c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018430:	e79e      	b.n	8018370 <_printf_float+0x88>
 8018432:	9904      	ldr	r1, [sp, #16]
 8018434:	2947      	cmp	r1, #71	; 0x47
 8018436:	d1c1      	bne.n	80183bc <_printf_float+0xd4>
 8018438:	2b00      	cmp	r3, #0
 801843a:	d1bf      	bne.n	80183bc <_printf_float+0xd4>
 801843c:	2301      	movs	r3, #1
 801843e:	e7bc      	b.n	80183ba <_printf_float+0xd2>
 8018440:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8018444:	d118      	bne.n	8018478 <_printf_float+0x190>
 8018446:	2900      	cmp	r1, #0
 8018448:	6863      	ldr	r3, [r4, #4]
 801844a:	dd0b      	ble.n	8018464 <_printf_float+0x17c>
 801844c:	6121      	str	r1, [r4, #16]
 801844e:	b913      	cbnz	r3, 8018456 <_printf_float+0x16e>
 8018450:	6822      	ldr	r2, [r4, #0]
 8018452:	07d0      	lsls	r0, r2, #31
 8018454:	d502      	bpl.n	801845c <_printf_float+0x174>
 8018456:	3301      	adds	r3, #1
 8018458:	440b      	add	r3, r1
 801845a:	6123      	str	r3, [r4, #16]
 801845c:	2300      	movs	r3, #0
 801845e:	65a1      	str	r1, [r4, #88]	; 0x58
 8018460:	9304      	str	r3, [sp, #16]
 8018462:	e7de      	b.n	8018422 <_printf_float+0x13a>
 8018464:	b913      	cbnz	r3, 801846c <_printf_float+0x184>
 8018466:	6822      	ldr	r2, [r4, #0]
 8018468:	07d2      	lsls	r2, r2, #31
 801846a:	d501      	bpl.n	8018470 <_printf_float+0x188>
 801846c:	3302      	adds	r3, #2
 801846e:	e7f4      	b.n	801845a <_printf_float+0x172>
 8018470:	2301      	movs	r3, #1
 8018472:	e7f2      	b.n	801845a <_printf_float+0x172>
 8018474:	f04f 0967 	mov.w	r9, #103	; 0x67
 8018478:	9b08      	ldr	r3, [sp, #32]
 801847a:	4299      	cmp	r1, r3
 801847c:	db05      	blt.n	801848a <_printf_float+0x1a2>
 801847e:	6823      	ldr	r3, [r4, #0]
 8018480:	6121      	str	r1, [r4, #16]
 8018482:	07d8      	lsls	r0, r3, #31
 8018484:	d5ea      	bpl.n	801845c <_printf_float+0x174>
 8018486:	1c4b      	adds	r3, r1, #1
 8018488:	e7e7      	b.n	801845a <_printf_float+0x172>
 801848a:	2900      	cmp	r1, #0
 801848c:	bfd4      	ite	le
 801848e:	f1c1 0202 	rsble	r2, r1, #2
 8018492:	2201      	movgt	r2, #1
 8018494:	4413      	add	r3, r2
 8018496:	e7e0      	b.n	801845a <_printf_float+0x172>
 8018498:	6823      	ldr	r3, [r4, #0]
 801849a:	055a      	lsls	r2, r3, #21
 801849c:	d407      	bmi.n	80184ae <_printf_float+0x1c6>
 801849e:	6923      	ldr	r3, [r4, #16]
 80184a0:	4642      	mov	r2, r8
 80184a2:	4631      	mov	r1, r6
 80184a4:	4628      	mov	r0, r5
 80184a6:	47b8      	blx	r7
 80184a8:	3001      	adds	r0, #1
 80184aa:	d12a      	bne.n	8018502 <_printf_float+0x21a>
 80184ac:	e76a      	b.n	8018384 <_printf_float+0x9c>
 80184ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80184b2:	f240 80e2 	bls.w	801867a <_printf_float+0x392>
 80184b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80184ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80184be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184c2:	d133      	bne.n	801852c <_printf_float+0x244>
 80184c4:	4a38      	ldr	r2, [pc, #224]	; (80185a8 <_printf_float+0x2c0>)
 80184c6:	2301      	movs	r3, #1
 80184c8:	4631      	mov	r1, r6
 80184ca:	4628      	mov	r0, r5
 80184cc:	47b8      	blx	r7
 80184ce:	3001      	adds	r0, #1
 80184d0:	f43f af58 	beq.w	8018384 <_printf_float+0x9c>
 80184d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80184d8:	429a      	cmp	r2, r3
 80184da:	db02      	blt.n	80184e2 <_printf_float+0x1fa>
 80184dc:	6823      	ldr	r3, [r4, #0]
 80184de:	07d8      	lsls	r0, r3, #31
 80184e0:	d50f      	bpl.n	8018502 <_printf_float+0x21a>
 80184e2:	4653      	mov	r3, sl
 80184e4:	465a      	mov	r2, fp
 80184e6:	4631      	mov	r1, r6
 80184e8:	4628      	mov	r0, r5
 80184ea:	47b8      	blx	r7
 80184ec:	3001      	adds	r0, #1
 80184ee:	f43f af49 	beq.w	8018384 <_printf_float+0x9c>
 80184f2:	f04f 0800 	mov.w	r8, #0
 80184f6:	f104 091a 	add.w	r9, r4, #26
 80184fa:	9b08      	ldr	r3, [sp, #32]
 80184fc:	3b01      	subs	r3, #1
 80184fe:	4543      	cmp	r3, r8
 8018500:	dc09      	bgt.n	8018516 <_printf_float+0x22e>
 8018502:	6823      	ldr	r3, [r4, #0]
 8018504:	079b      	lsls	r3, r3, #30
 8018506:	f100 8108 	bmi.w	801871a <_printf_float+0x432>
 801850a:	68e0      	ldr	r0, [r4, #12]
 801850c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801850e:	4298      	cmp	r0, r3
 8018510:	bfb8      	it	lt
 8018512:	4618      	movlt	r0, r3
 8018514:	e738      	b.n	8018388 <_printf_float+0xa0>
 8018516:	2301      	movs	r3, #1
 8018518:	464a      	mov	r2, r9
 801851a:	4631      	mov	r1, r6
 801851c:	4628      	mov	r0, r5
 801851e:	47b8      	blx	r7
 8018520:	3001      	adds	r0, #1
 8018522:	f43f af2f 	beq.w	8018384 <_printf_float+0x9c>
 8018526:	f108 0801 	add.w	r8, r8, #1
 801852a:	e7e6      	b.n	80184fa <_printf_float+0x212>
 801852c:	9b07      	ldr	r3, [sp, #28]
 801852e:	2b00      	cmp	r3, #0
 8018530:	dc3c      	bgt.n	80185ac <_printf_float+0x2c4>
 8018532:	4a1d      	ldr	r2, [pc, #116]	; (80185a8 <_printf_float+0x2c0>)
 8018534:	2301      	movs	r3, #1
 8018536:	4631      	mov	r1, r6
 8018538:	4628      	mov	r0, r5
 801853a:	47b8      	blx	r7
 801853c:	3001      	adds	r0, #1
 801853e:	f43f af21 	beq.w	8018384 <_printf_float+0x9c>
 8018542:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018546:	4313      	orrs	r3, r2
 8018548:	d102      	bne.n	8018550 <_printf_float+0x268>
 801854a:	6823      	ldr	r3, [r4, #0]
 801854c:	07d9      	lsls	r1, r3, #31
 801854e:	d5d8      	bpl.n	8018502 <_printf_float+0x21a>
 8018550:	4653      	mov	r3, sl
 8018552:	465a      	mov	r2, fp
 8018554:	4631      	mov	r1, r6
 8018556:	4628      	mov	r0, r5
 8018558:	47b8      	blx	r7
 801855a:	3001      	adds	r0, #1
 801855c:	f43f af12 	beq.w	8018384 <_printf_float+0x9c>
 8018560:	f04f 0900 	mov.w	r9, #0
 8018564:	f104 0a1a 	add.w	sl, r4, #26
 8018568:	9b07      	ldr	r3, [sp, #28]
 801856a:	425b      	negs	r3, r3
 801856c:	454b      	cmp	r3, r9
 801856e:	dc01      	bgt.n	8018574 <_printf_float+0x28c>
 8018570:	9b08      	ldr	r3, [sp, #32]
 8018572:	e795      	b.n	80184a0 <_printf_float+0x1b8>
 8018574:	2301      	movs	r3, #1
 8018576:	4652      	mov	r2, sl
 8018578:	4631      	mov	r1, r6
 801857a:	4628      	mov	r0, r5
 801857c:	47b8      	blx	r7
 801857e:	3001      	adds	r0, #1
 8018580:	f43f af00 	beq.w	8018384 <_printf_float+0x9c>
 8018584:	f109 0901 	add.w	r9, r9, #1
 8018588:	e7ee      	b.n	8018568 <_printf_float+0x280>
 801858a:	bf00      	nop
 801858c:	f3af 8000 	nop.w
 8018590:	ffffffff 	.word	0xffffffff
 8018594:	7fefffff 	.word	0x7fefffff
 8018598:	0801ce28 	.word	0x0801ce28
 801859c:	0801ce2c 	.word	0x0801ce2c
 80185a0:	0801ce34 	.word	0x0801ce34
 80185a4:	0801ce30 	.word	0x0801ce30
 80185a8:	0801ce38 	.word	0x0801ce38
 80185ac:	9a08      	ldr	r2, [sp, #32]
 80185ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80185b0:	429a      	cmp	r2, r3
 80185b2:	bfa8      	it	ge
 80185b4:	461a      	movge	r2, r3
 80185b6:	2a00      	cmp	r2, #0
 80185b8:	4691      	mov	r9, r2
 80185ba:	dc38      	bgt.n	801862e <_printf_float+0x346>
 80185bc:	2300      	movs	r3, #0
 80185be:	9305      	str	r3, [sp, #20]
 80185c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80185c4:	f104 021a 	add.w	r2, r4, #26
 80185c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80185ca:	9905      	ldr	r1, [sp, #20]
 80185cc:	9304      	str	r3, [sp, #16]
 80185ce:	eba3 0309 	sub.w	r3, r3, r9
 80185d2:	428b      	cmp	r3, r1
 80185d4:	dc33      	bgt.n	801863e <_printf_float+0x356>
 80185d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80185da:	429a      	cmp	r2, r3
 80185dc:	db3c      	blt.n	8018658 <_printf_float+0x370>
 80185de:	6823      	ldr	r3, [r4, #0]
 80185e0:	07da      	lsls	r2, r3, #31
 80185e2:	d439      	bmi.n	8018658 <_printf_float+0x370>
 80185e4:	9b08      	ldr	r3, [sp, #32]
 80185e6:	9a04      	ldr	r2, [sp, #16]
 80185e8:	9907      	ldr	r1, [sp, #28]
 80185ea:	1a9a      	subs	r2, r3, r2
 80185ec:	eba3 0901 	sub.w	r9, r3, r1
 80185f0:	4591      	cmp	r9, r2
 80185f2:	bfa8      	it	ge
 80185f4:	4691      	movge	r9, r2
 80185f6:	f1b9 0f00 	cmp.w	r9, #0
 80185fa:	dc35      	bgt.n	8018668 <_printf_float+0x380>
 80185fc:	f04f 0800 	mov.w	r8, #0
 8018600:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018604:	f104 0a1a 	add.w	sl, r4, #26
 8018608:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801860c:	1a9b      	subs	r3, r3, r2
 801860e:	eba3 0309 	sub.w	r3, r3, r9
 8018612:	4543      	cmp	r3, r8
 8018614:	f77f af75 	ble.w	8018502 <_printf_float+0x21a>
 8018618:	2301      	movs	r3, #1
 801861a:	4652      	mov	r2, sl
 801861c:	4631      	mov	r1, r6
 801861e:	4628      	mov	r0, r5
 8018620:	47b8      	blx	r7
 8018622:	3001      	adds	r0, #1
 8018624:	f43f aeae 	beq.w	8018384 <_printf_float+0x9c>
 8018628:	f108 0801 	add.w	r8, r8, #1
 801862c:	e7ec      	b.n	8018608 <_printf_float+0x320>
 801862e:	4613      	mov	r3, r2
 8018630:	4631      	mov	r1, r6
 8018632:	4642      	mov	r2, r8
 8018634:	4628      	mov	r0, r5
 8018636:	47b8      	blx	r7
 8018638:	3001      	adds	r0, #1
 801863a:	d1bf      	bne.n	80185bc <_printf_float+0x2d4>
 801863c:	e6a2      	b.n	8018384 <_printf_float+0x9c>
 801863e:	2301      	movs	r3, #1
 8018640:	4631      	mov	r1, r6
 8018642:	4628      	mov	r0, r5
 8018644:	9204      	str	r2, [sp, #16]
 8018646:	47b8      	blx	r7
 8018648:	3001      	adds	r0, #1
 801864a:	f43f ae9b 	beq.w	8018384 <_printf_float+0x9c>
 801864e:	9b05      	ldr	r3, [sp, #20]
 8018650:	9a04      	ldr	r2, [sp, #16]
 8018652:	3301      	adds	r3, #1
 8018654:	9305      	str	r3, [sp, #20]
 8018656:	e7b7      	b.n	80185c8 <_printf_float+0x2e0>
 8018658:	4653      	mov	r3, sl
 801865a:	465a      	mov	r2, fp
 801865c:	4631      	mov	r1, r6
 801865e:	4628      	mov	r0, r5
 8018660:	47b8      	blx	r7
 8018662:	3001      	adds	r0, #1
 8018664:	d1be      	bne.n	80185e4 <_printf_float+0x2fc>
 8018666:	e68d      	b.n	8018384 <_printf_float+0x9c>
 8018668:	9a04      	ldr	r2, [sp, #16]
 801866a:	464b      	mov	r3, r9
 801866c:	4442      	add	r2, r8
 801866e:	4631      	mov	r1, r6
 8018670:	4628      	mov	r0, r5
 8018672:	47b8      	blx	r7
 8018674:	3001      	adds	r0, #1
 8018676:	d1c1      	bne.n	80185fc <_printf_float+0x314>
 8018678:	e684      	b.n	8018384 <_printf_float+0x9c>
 801867a:	9a08      	ldr	r2, [sp, #32]
 801867c:	2a01      	cmp	r2, #1
 801867e:	dc01      	bgt.n	8018684 <_printf_float+0x39c>
 8018680:	07db      	lsls	r3, r3, #31
 8018682:	d537      	bpl.n	80186f4 <_printf_float+0x40c>
 8018684:	2301      	movs	r3, #1
 8018686:	4642      	mov	r2, r8
 8018688:	4631      	mov	r1, r6
 801868a:	4628      	mov	r0, r5
 801868c:	47b8      	blx	r7
 801868e:	3001      	adds	r0, #1
 8018690:	f43f ae78 	beq.w	8018384 <_printf_float+0x9c>
 8018694:	4653      	mov	r3, sl
 8018696:	465a      	mov	r2, fp
 8018698:	4631      	mov	r1, r6
 801869a:	4628      	mov	r0, r5
 801869c:	47b8      	blx	r7
 801869e:	3001      	adds	r0, #1
 80186a0:	f43f ae70 	beq.w	8018384 <_printf_float+0x9c>
 80186a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80186a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80186ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186b0:	d01b      	beq.n	80186ea <_printf_float+0x402>
 80186b2:	9b08      	ldr	r3, [sp, #32]
 80186b4:	f108 0201 	add.w	r2, r8, #1
 80186b8:	3b01      	subs	r3, #1
 80186ba:	4631      	mov	r1, r6
 80186bc:	4628      	mov	r0, r5
 80186be:	47b8      	blx	r7
 80186c0:	3001      	adds	r0, #1
 80186c2:	d10e      	bne.n	80186e2 <_printf_float+0x3fa>
 80186c4:	e65e      	b.n	8018384 <_printf_float+0x9c>
 80186c6:	2301      	movs	r3, #1
 80186c8:	464a      	mov	r2, r9
 80186ca:	4631      	mov	r1, r6
 80186cc:	4628      	mov	r0, r5
 80186ce:	47b8      	blx	r7
 80186d0:	3001      	adds	r0, #1
 80186d2:	f43f ae57 	beq.w	8018384 <_printf_float+0x9c>
 80186d6:	f108 0801 	add.w	r8, r8, #1
 80186da:	9b08      	ldr	r3, [sp, #32]
 80186dc:	3b01      	subs	r3, #1
 80186de:	4543      	cmp	r3, r8
 80186e0:	dcf1      	bgt.n	80186c6 <_printf_float+0x3de>
 80186e2:	9b04      	ldr	r3, [sp, #16]
 80186e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80186e8:	e6db      	b.n	80184a2 <_printf_float+0x1ba>
 80186ea:	f04f 0800 	mov.w	r8, #0
 80186ee:	f104 091a 	add.w	r9, r4, #26
 80186f2:	e7f2      	b.n	80186da <_printf_float+0x3f2>
 80186f4:	2301      	movs	r3, #1
 80186f6:	4642      	mov	r2, r8
 80186f8:	e7df      	b.n	80186ba <_printf_float+0x3d2>
 80186fa:	2301      	movs	r3, #1
 80186fc:	464a      	mov	r2, r9
 80186fe:	4631      	mov	r1, r6
 8018700:	4628      	mov	r0, r5
 8018702:	47b8      	blx	r7
 8018704:	3001      	adds	r0, #1
 8018706:	f43f ae3d 	beq.w	8018384 <_printf_float+0x9c>
 801870a:	f108 0801 	add.w	r8, r8, #1
 801870e:	68e3      	ldr	r3, [r4, #12]
 8018710:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018712:	1a5b      	subs	r3, r3, r1
 8018714:	4543      	cmp	r3, r8
 8018716:	dcf0      	bgt.n	80186fa <_printf_float+0x412>
 8018718:	e6f7      	b.n	801850a <_printf_float+0x222>
 801871a:	f04f 0800 	mov.w	r8, #0
 801871e:	f104 0919 	add.w	r9, r4, #25
 8018722:	e7f4      	b.n	801870e <_printf_float+0x426>

08018724 <_printf_common>:
 8018724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018728:	4616      	mov	r6, r2
 801872a:	4699      	mov	r9, r3
 801872c:	688a      	ldr	r2, [r1, #8]
 801872e:	690b      	ldr	r3, [r1, #16]
 8018730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018734:	4293      	cmp	r3, r2
 8018736:	bfb8      	it	lt
 8018738:	4613      	movlt	r3, r2
 801873a:	6033      	str	r3, [r6, #0]
 801873c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018740:	4607      	mov	r7, r0
 8018742:	460c      	mov	r4, r1
 8018744:	b10a      	cbz	r2, 801874a <_printf_common+0x26>
 8018746:	3301      	adds	r3, #1
 8018748:	6033      	str	r3, [r6, #0]
 801874a:	6823      	ldr	r3, [r4, #0]
 801874c:	0699      	lsls	r1, r3, #26
 801874e:	bf42      	ittt	mi
 8018750:	6833      	ldrmi	r3, [r6, #0]
 8018752:	3302      	addmi	r3, #2
 8018754:	6033      	strmi	r3, [r6, #0]
 8018756:	6825      	ldr	r5, [r4, #0]
 8018758:	f015 0506 	ands.w	r5, r5, #6
 801875c:	d106      	bne.n	801876c <_printf_common+0x48>
 801875e:	f104 0a19 	add.w	sl, r4, #25
 8018762:	68e3      	ldr	r3, [r4, #12]
 8018764:	6832      	ldr	r2, [r6, #0]
 8018766:	1a9b      	subs	r3, r3, r2
 8018768:	42ab      	cmp	r3, r5
 801876a:	dc26      	bgt.n	80187ba <_printf_common+0x96>
 801876c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018770:	1e13      	subs	r3, r2, #0
 8018772:	6822      	ldr	r2, [r4, #0]
 8018774:	bf18      	it	ne
 8018776:	2301      	movne	r3, #1
 8018778:	0692      	lsls	r2, r2, #26
 801877a:	d42b      	bmi.n	80187d4 <_printf_common+0xb0>
 801877c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018780:	4649      	mov	r1, r9
 8018782:	4638      	mov	r0, r7
 8018784:	47c0      	blx	r8
 8018786:	3001      	adds	r0, #1
 8018788:	d01e      	beq.n	80187c8 <_printf_common+0xa4>
 801878a:	6823      	ldr	r3, [r4, #0]
 801878c:	68e5      	ldr	r5, [r4, #12]
 801878e:	6832      	ldr	r2, [r6, #0]
 8018790:	f003 0306 	and.w	r3, r3, #6
 8018794:	2b04      	cmp	r3, #4
 8018796:	bf08      	it	eq
 8018798:	1aad      	subeq	r5, r5, r2
 801879a:	68a3      	ldr	r3, [r4, #8]
 801879c:	6922      	ldr	r2, [r4, #16]
 801879e:	bf0c      	ite	eq
 80187a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80187a4:	2500      	movne	r5, #0
 80187a6:	4293      	cmp	r3, r2
 80187a8:	bfc4      	itt	gt
 80187aa:	1a9b      	subgt	r3, r3, r2
 80187ac:	18ed      	addgt	r5, r5, r3
 80187ae:	2600      	movs	r6, #0
 80187b0:	341a      	adds	r4, #26
 80187b2:	42b5      	cmp	r5, r6
 80187b4:	d11a      	bne.n	80187ec <_printf_common+0xc8>
 80187b6:	2000      	movs	r0, #0
 80187b8:	e008      	b.n	80187cc <_printf_common+0xa8>
 80187ba:	2301      	movs	r3, #1
 80187bc:	4652      	mov	r2, sl
 80187be:	4649      	mov	r1, r9
 80187c0:	4638      	mov	r0, r7
 80187c2:	47c0      	blx	r8
 80187c4:	3001      	adds	r0, #1
 80187c6:	d103      	bne.n	80187d0 <_printf_common+0xac>
 80187c8:	f04f 30ff 	mov.w	r0, #4294967295
 80187cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187d0:	3501      	adds	r5, #1
 80187d2:	e7c6      	b.n	8018762 <_printf_common+0x3e>
 80187d4:	18e1      	adds	r1, r4, r3
 80187d6:	1c5a      	adds	r2, r3, #1
 80187d8:	2030      	movs	r0, #48	; 0x30
 80187da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80187de:	4422      	add	r2, r4
 80187e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80187e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80187e8:	3302      	adds	r3, #2
 80187ea:	e7c7      	b.n	801877c <_printf_common+0x58>
 80187ec:	2301      	movs	r3, #1
 80187ee:	4622      	mov	r2, r4
 80187f0:	4649      	mov	r1, r9
 80187f2:	4638      	mov	r0, r7
 80187f4:	47c0      	blx	r8
 80187f6:	3001      	adds	r0, #1
 80187f8:	d0e6      	beq.n	80187c8 <_printf_common+0xa4>
 80187fa:	3601      	adds	r6, #1
 80187fc:	e7d9      	b.n	80187b2 <_printf_common+0x8e>
	...

08018800 <_printf_i>:
 8018800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018804:	7e0f      	ldrb	r7, [r1, #24]
 8018806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018808:	2f78      	cmp	r7, #120	; 0x78
 801880a:	4691      	mov	r9, r2
 801880c:	4680      	mov	r8, r0
 801880e:	460c      	mov	r4, r1
 8018810:	469a      	mov	sl, r3
 8018812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018816:	d807      	bhi.n	8018828 <_printf_i+0x28>
 8018818:	2f62      	cmp	r7, #98	; 0x62
 801881a:	d80a      	bhi.n	8018832 <_printf_i+0x32>
 801881c:	2f00      	cmp	r7, #0
 801881e:	f000 80d8 	beq.w	80189d2 <_printf_i+0x1d2>
 8018822:	2f58      	cmp	r7, #88	; 0x58
 8018824:	f000 80a3 	beq.w	801896e <_printf_i+0x16e>
 8018828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801882c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018830:	e03a      	b.n	80188a8 <_printf_i+0xa8>
 8018832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018836:	2b15      	cmp	r3, #21
 8018838:	d8f6      	bhi.n	8018828 <_printf_i+0x28>
 801883a:	a101      	add	r1, pc, #4	; (adr r1, 8018840 <_printf_i+0x40>)
 801883c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018840:	08018899 	.word	0x08018899
 8018844:	080188ad 	.word	0x080188ad
 8018848:	08018829 	.word	0x08018829
 801884c:	08018829 	.word	0x08018829
 8018850:	08018829 	.word	0x08018829
 8018854:	08018829 	.word	0x08018829
 8018858:	080188ad 	.word	0x080188ad
 801885c:	08018829 	.word	0x08018829
 8018860:	08018829 	.word	0x08018829
 8018864:	08018829 	.word	0x08018829
 8018868:	08018829 	.word	0x08018829
 801886c:	080189b9 	.word	0x080189b9
 8018870:	080188dd 	.word	0x080188dd
 8018874:	0801899b 	.word	0x0801899b
 8018878:	08018829 	.word	0x08018829
 801887c:	08018829 	.word	0x08018829
 8018880:	080189db 	.word	0x080189db
 8018884:	08018829 	.word	0x08018829
 8018888:	080188dd 	.word	0x080188dd
 801888c:	08018829 	.word	0x08018829
 8018890:	08018829 	.word	0x08018829
 8018894:	080189a3 	.word	0x080189a3
 8018898:	682b      	ldr	r3, [r5, #0]
 801889a:	1d1a      	adds	r2, r3, #4
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	602a      	str	r2, [r5, #0]
 80188a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80188a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80188a8:	2301      	movs	r3, #1
 80188aa:	e0a3      	b.n	80189f4 <_printf_i+0x1f4>
 80188ac:	6820      	ldr	r0, [r4, #0]
 80188ae:	6829      	ldr	r1, [r5, #0]
 80188b0:	0606      	lsls	r6, r0, #24
 80188b2:	f101 0304 	add.w	r3, r1, #4
 80188b6:	d50a      	bpl.n	80188ce <_printf_i+0xce>
 80188b8:	680e      	ldr	r6, [r1, #0]
 80188ba:	602b      	str	r3, [r5, #0]
 80188bc:	2e00      	cmp	r6, #0
 80188be:	da03      	bge.n	80188c8 <_printf_i+0xc8>
 80188c0:	232d      	movs	r3, #45	; 0x2d
 80188c2:	4276      	negs	r6, r6
 80188c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80188c8:	485e      	ldr	r0, [pc, #376]	; (8018a44 <_printf_i+0x244>)
 80188ca:	230a      	movs	r3, #10
 80188cc:	e019      	b.n	8018902 <_printf_i+0x102>
 80188ce:	680e      	ldr	r6, [r1, #0]
 80188d0:	602b      	str	r3, [r5, #0]
 80188d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80188d6:	bf18      	it	ne
 80188d8:	b236      	sxthne	r6, r6
 80188da:	e7ef      	b.n	80188bc <_printf_i+0xbc>
 80188dc:	682b      	ldr	r3, [r5, #0]
 80188de:	6820      	ldr	r0, [r4, #0]
 80188e0:	1d19      	adds	r1, r3, #4
 80188e2:	6029      	str	r1, [r5, #0]
 80188e4:	0601      	lsls	r1, r0, #24
 80188e6:	d501      	bpl.n	80188ec <_printf_i+0xec>
 80188e8:	681e      	ldr	r6, [r3, #0]
 80188ea:	e002      	b.n	80188f2 <_printf_i+0xf2>
 80188ec:	0646      	lsls	r6, r0, #25
 80188ee:	d5fb      	bpl.n	80188e8 <_printf_i+0xe8>
 80188f0:	881e      	ldrh	r6, [r3, #0]
 80188f2:	4854      	ldr	r0, [pc, #336]	; (8018a44 <_printf_i+0x244>)
 80188f4:	2f6f      	cmp	r7, #111	; 0x6f
 80188f6:	bf0c      	ite	eq
 80188f8:	2308      	moveq	r3, #8
 80188fa:	230a      	movne	r3, #10
 80188fc:	2100      	movs	r1, #0
 80188fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018902:	6865      	ldr	r5, [r4, #4]
 8018904:	60a5      	str	r5, [r4, #8]
 8018906:	2d00      	cmp	r5, #0
 8018908:	bfa2      	ittt	ge
 801890a:	6821      	ldrge	r1, [r4, #0]
 801890c:	f021 0104 	bicge.w	r1, r1, #4
 8018910:	6021      	strge	r1, [r4, #0]
 8018912:	b90e      	cbnz	r6, 8018918 <_printf_i+0x118>
 8018914:	2d00      	cmp	r5, #0
 8018916:	d04d      	beq.n	80189b4 <_printf_i+0x1b4>
 8018918:	4615      	mov	r5, r2
 801891a:	fbb6 f1f3 	udiv	r1, r6, r3
 801891e:	fb03 6711 	mls	r7, r3, r1, r6
 8018922:	5dc7      	ldrb	r7, [r0, r7]
 8018924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018928:	4637      	mov	r7, r6
 801892a:	42bb      	cmp	r3, r7
 801892c:	460e      	mov	r6, r1
 801892e:	d9f4      	bls.n	801891a <_printf_i+0x11a>
 8018930:	2b08      	cmp	r3, #8
 8018932:	d10b      	bne.n	801894c <_printf_i+0x14c>
 8018934:	6823      	ldr	r3, [r4, #0]
 8018936:	07de      	lsls	r6, r3, #31
 8018938:	d508      	bpl.n	801894c <_printf_i+0x14c>
 801893a:	6923      	ldr	r3, [r4, #16]
 801893c:	6861      	ldr	r1, [r4, #4]
 801893e:	4299      	cmp	r1, r3
 8018940:	bfde      	ittt	le
 8018942:	2330      	movle	r3, #48	; 0x30
 8018944:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018948:	f105 35ff 	addle.w	r5, r5, #4294967295
 801894c:	1b52      	subs	r2, r2, r5
 801894e:	6122      	str	r2, [r4, #16]
 8018950:	f8cd a000 	str.w	sl, [sp]
 8018954:	464b      	mov	r3, r9
 8018956:	aa03      	add	r2, sp, #12
 8018958:	4621      	mov	r1, r4
 801895a:	4640      	mov	r0, r8
 801895c:	f7ff fee2 	bl	8018724 <_printf_common>
 8018960:	3001      	adds	r0, #1
 8018962:	d14c      	bne.n	80189fe <_printf_i+0x1fe>
 8018964:	f04f 30ff 	mov.w	r0, #4294967295
 8018968:	b004      	add	sp, #16
 801896a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801896e:	4835      	ldr	r0, [pc, #212]	; (8018a44 <_printf_i+0x244>)
 8018970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018974:	6829      	ldr	r1, [r5, #0]
 8018976:	6823      	ldr	r3, [r4, #0]
 8018978:	f851 6b04 	ldr.w	r6, [r1], #4
 801897c:	6029      	str	r1, [r5, #0]
 801897e:	061d      	lsls	r5, r3, #24
 8018980:	d514      	bpl.n	80189ac <_printf_i+0x1ac>
 8018982:	07df      	lsls	r7, r3, #31
 8018984:	bf44      	itt	mi
 8018986:	f043 0320 	orrmi.w	r3, r3, #32
 801898a:	6023      	strmi	r3, [r4, #0]
 801898c:	b91e      	cbnz	r6, 8018996 <_printf_i+0x196>
 801898e:	6823      	ldr	r3, [r4, #0]
 8018990:	f023 0320 	bic.w	r3, r3, #32
 8018994:	6023      	str	r3, [r4, #0]
 8018996:	2310      	movs	r3, #16
 8018998:	e7b0      	b.n	80188fc <_printf_i+0xfc>
 801899a:	6823      	ldr	r3, [r4, #0]
 801899c:	f043 0320 	orr.w	r3, r3, #32
 80189a0:	6023      	str	r3, [r4, #0]
 80189a2:	2378      	movs	r3, #120	; 0x78
 80189a4:	4828      	ldr	r0, [pc, #160]	; (8018a48 <_printf_i+0x248>)
 80189a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80189aa:	e7e3      	b.n	8018974 <_printf_i+0x174>
 80189ac:	0659      	lsls	r1, r3, #25
 80189ae:	bf48      	it	mi
 80189b0:	b2b6      	uxthmi	r6, r6
 80189b2:	e7e6      	b.n	8018982 <_printf_i+0x182>
 80189b4:	4615      	mov	r5, r2
 80189b6:	e7bb      	b.n	8018930 <_printf_i+0x130>
 80189b8:	682b      	ldr	r3, [r5, #0]
 80189ba:	6826      	ldr	r6, [r4, #0]
 80189bc:	6961      	ldr	r1, [r4, #20]
 80189be:	1d18      	adds	r0, r3, #4
 80189c0:	6028      	str	r0, [r5, #0]
 80189c2:	0635      	lsls	r5, r6, #24
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	d501      	bpl.n	80189cc <_printf_i+0x1cc>
 80189c8:	6019      	str	r1, [r3, #0]
 80189ca:	e002      	b.n	80189d2 <_printf_i+0x1d2>
 80189cc:	0670      	lsls	r0, r6, #25
 80189ce:	d5fb      	bpl.n	80189c8 <_printf_i+0x1c8>
 80189d0:	8019      	strh	r1, [r3, #0]
 80189d2:	2300      	movs	r3, #0
 80189d4:	6123      	str	r3, [r4, #16]
 80189d6:	4615      	mov	r5, r2
 80189d8:	e7ba      	b.n	8018950 <_printf_i+0x150>
 80189da:	682b      	ldr	r3, [r5, #0]
 80189dc:	1d1a      	adds	r2, r3, #4
 80189de:	602a      	str	r2, [r5, #0]
 80189e0:	681d      	ldr	r5, [r3, #0]
 80189e2:	6862      	ldr	r2, [r4, #4]
 80189e4:	2100      	movs	r1, #0
 80189e6:	4628      	mov	r0, r5
 80189e8:	f7e7 fc9a 	bl	8000320 <memchr>
 80189ec:	b108      	cbz	r0, 80189f2 <_printf_i+0x1f2>
 80189ee:	1b40      	subs	r0, r0, r5
 80189f0:	6060      	str	r0, [r4, #4]
 80189f2:	6863      	ldr	r3, [r4, #4]
 80189f4:	6123      	str	r3, [r4, #16]
 80189f6:	2300      	movs	r3, #0
 80189f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80189fc:	e7a8      	b.n	8018950 <_printf_i+0x150>
 80189fe:	6923      	ldr	r3, [r4, #16]
 8018a00:	462a      	mov	r2, r5
 8018a02:	4649      	mov	r1, r9
 8018a04:	4640      	mov	r0, r8
 8018a06:	47d0      	blx	sl
 8018a08:	3001      	adds	r0, #1
 8018a0a:	d0ab      	beq.n	8018964 <_printf_i+0x164>
 8018a0c:	6823      	ldr	r3, [r4, #0]
 8018a0e:	079b      	lsls	r3, r3, #30
 8018a10:	d413      	bmi.n	8018a3a <_printf_i+0x23a>
 8018a12:	68e0      	ldr	r0, [r4, #12]
 8018a14:	9b03      	ldr	r3, [sp, #12]
 8018a16:	4298      	cmp	r0, r3
 8018a18:	bfb8      	it	lt
 8018a1a:	4618      	movlt	r0, r3
 8018a1c:	e7a4      	b.n	8018968 <_printf_i+0x168>
 8018a1e:	2301      	movs	r3, #1
 8018a20:	4632      	mov	r2, r6
 8018a22:	4649      	mov	r1, r9
 8018a24:	4640      	mov	r0, r8
 8018a26:	47d0      	blx	sl
 8018a28:	3001      	adds	r0, #1
 8018a2a:	d09b      	beq.n	8018964 <_printf_i+0x164>
 8018a2c:	3501      	adds	r5, #1
 8018a2e:	68e3      	ldr	r3, [r4, #12]
 8018a30:	9903      	ldr	r1, [sp, #12]
 8018a32:	1a5b      	subs	r3, r3, r1
 8018a34:	42ab      	cmp	r3, r5
 8018a36:	dcf2      	bgt.n	8018a1e <_printf_i+0x21e>
 8018a38:	e7eb      	b.n	8018a12 <_printf_i+0x212>
 8018a3a:	2500      	movs	r5, #0
 8018a3c:	f104 0619 	add.w	r6, r4, #25
 8018a40:	e7f5      	b.n	8018a2e <_printf_i+0x22e>
 8018a42:	bf00      	nop
 8018a44:	0801ce3a 	.word	0x0801ce3a
 8018a48:	0801ce4b 	.word	0x0801ce4b

08018a4c <_scanf_float>:
 8018a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a50:	b087      	sub	sp, #28
 8018a52:	4617      	mov	r7, r2
 8018a54:	9303      	str	r3, [sp, #12]
 8018a56:	688b      	ldr	r3, [r1, #8]
 8018a58:	1e5a      	subs	r2, r3, #1
 8018a5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018a5e:	bf83      	ittte	hi
 8018a60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018a64:	195b      	addhi	r3, r3, r5
 8018a66:	9302      	strhi	r3, [sp, #8]
 8018a68:	2300      	movls	r3, #0
 8018a6a:	bf86      	itte	hi
 8018a6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018a70:	608b      	strhi	r3, [r1, #8]
 8018a72:	9302      	strls	r3, [sp, #8]
 8018a74:	680b      	ldr	r3, [r1, #0]
 8018a76:	468b      	mov	fp, r1
 8018a78:	2500      	movs	r5, #0
 8018a7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8018a7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8018a82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018a86:	4680      	mov	r8, r0
 8018a88:	460c      	mov	r4, r1
 8018a8a:	465e      	mov	r6, fp
 8018a8c:	46aa      	mov	sl, r5
 8018a8e:	46a9      	mov	r9, r5
 8018a90:	9501      	str	r5, [sp, #4]
 8018a92:	68a2      	ldr	r2, [r4, #8]
 8018a94:	b152      	cbz	r2, 8018aac <_scanf_float+0x60>
 8018a96:	683b      	ldr	r3, [r7, #0]
 8018a98:	781b      	ldrb	r3, [r3, #0]
 8018a9a:	2b4e      	cmp	r3, #78	; 0x4e
 8018a9c:	d864      	bhi.n	8018b68 <_scanf_float+0x11c>
 8018a9e:	2b40      	cmp	r3, #64	; 0x40
 8018aa0:	d83c      	bhi.n	8018b1c <_scanf_float+0xd0>
 8018aa2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8018aa6:	b2c8      	uxtb	r0, r1
 8018aa8:	280e      	cmp	r0, #14
 8018aaa:	d93a      	bls.n	8018b22 <_scanf_float+0xd6>
 8018aac:	f1b9 0f00 	cmp.w	r9, #0
 8018ab0:	d003      	beq.n	8018aba <_scanf_float+0x6e>
 8018ab2:	6823      	ldr	r3, [r4, #0]
 8018ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018ab8:	6023      	str	r3, [r4, #0]
 8018aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018abe:	f1ba 0f01 	cmp.w	sl, #1
 8018ac2:	f200 8113 	bhi.w	8018cec <_scanf_float+0x2a0>
 8018ac6:	455e      	cmp	r6, fp
 8018ac8:	f200 8105 	bhi.w	8018cd6 <_scanf_float+0x28a>
 8018acc:	2501      	movs	r5, #1
 8018ace:	4628      	mov	r0, r5
 8018ad0:	b007      	add	sp, #28
 8018ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ad6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018ada:	2a0d      	cmp	r2, #13
 8018adc:	d8e6      	bhi.n	8018aac <_scanf_float+0x60>
 8018ade:	a101      	add	r1, pc, #4	; (adr r1, 8018ae4 <_scanf_float+0x98>)
 8018ae0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018ae4:	08018c23 	.word	0x08018c23
 8018ae8:	08018aad 	.word	0x08018aad
 8018aec:	08018aad 	.word	0x08018aad
 8018af0:	08018aad 	.word	0x08018aad
 8018af4:	08018c83 	.word	0x08018c83
 8018af8:	08018c5b 	.word	0x08018c5b
 8018afc:	08018aad 	.word	0x08018aad
 8018b00:	08018aad 	.word	0x08018aad
 8018b04:	08018c31 	.word	0x08018c31
 8018b08:	08018aad 	.word	0x08018aad
 8018b0c:	08018aad 	.word	0x08018aad
 8018b10:	08018aad 	.word	0x08018aad
 8018b14:	08018aad 	.word	0x08018aad
 8018b18:	08018be9 	.word	0x08018be9
 8018b1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8018b20:	e7db      	b.n	8018ada <_scanf_float+0x8e>
 8018b22:	290e      	cmp	r1, #14
 8018b24:	d8c2      	bhi.n	8018aac <_scanf_float+0x60>
 8018b26:	a001      	add	r0, pc, #4	; (adr r0, 8018b2c <_scanf_float+0xe0>)
 8018b28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8018b2c:	08018bdb 	.word	0x08018bdb
 8018b30:	08018aad 	.word	0x08018aad
 8018b34:	08018bdb 	.word	0x08018bdb
 8018b38:	08018c6f 	.word	0x08018c6f
 8018b3c:	08018aad 	.word	0x08018aad
 8018b40:	08018b89 	.word	0x08018b89
 8018b44:	08018bc5 	.word	0x08018bc5
 8018b48:	08018bc5 	.word	0x08018bc5
 8018b4c:	08018bc5 	.word	0x08018bc5
 8018b50:	08018bc5 	.word	0x08018bc5
 8018b54:	08018bc5 	.word	0x08018bc5
 8018b58:	08018bc5 	.word	0x08018bc5
 8018b5c:	08018bc5 	.word	0x08018bc5
 8018b60:	08018bc5 	.word	0x08018bc5
 8018b64:	08018bc5 	.word	0x08018bc5
 8018b68:	2b6e      	cmp	r3, #110	; 0x6e
 8018b6a:	d809      	bhi.n	8018b80 <_scanf_float+0x134>
 8018b6c:	2b60      	cmp	r3, #96	; 0x60
 8018b6e:	d8b2      	bhi.n	8018ad6 <_scanf_float+0x8a>
 8018b70:	2b54      	cmp	r3, #84	; 0x54
 8018b72:	d077      	beq.n	8018c64 <_scanf_float+0x218>
 8018b74:	2b59      	cmp	r3, #89	; 0x59
 8018b76:	d199      	bne.n	8018aac <_scanf_float+0x60>
 8018b78:	2d07      	cmp	r5, #7
 8018b7a:	d197      	bne.n	8018aac <_scanf_float+0x60>
 8018b7c:	2508      	movs	r5, #8
 8018b7e:	e029      	b.n	8018bd4 <_scanf_float+0x188>
 8018b80:	2b74      	cmp	r3, #116	; 0x74
 8018b82:	d06f      	beq.n	8018c64 <_scanf_float+0x218>
 8018b84:	2b79      	cmp	r3, #121	; 0x79
 8018b86:	e7f6      	b.n	8018b76 <_scanf_float+0x12a>
 8018b88:	6821      	ldr	r1, [r4, #0]
 8018b8a:	05c8      	lsls	r0, r1, #23
 8018b8c:	d51a      	bpl.n	8018bc4 <_scanf_float+0x178>
 8018b8e:	9b02      	ldr	r3, [sp, #8]
 8018b90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018b94:	6021      	str	r1, [r4, #0]
 8018b96:	f109 0901 	add.w	r9, r9, #1
 8018b9a:	b11b      	cbz	r3, 8018ba4 <_scanf_float+0x158>
 8018b9c:	3b01      	subs	r3, #1
 8018b9e:	3201      	adds	r2, #1
 8018ba0:	9302      	str	r3, [sp, #8]
 8018ba2:	60a2      	str	r2, [r4, #8]
 8018ba4:	68a3      	ldr	r3, [r4, #8]
 8018ba6:	3b01      	subs	r3, #1
 8018ba8:	60a3      	str	r3, [r4, #8]
 8018baa:	6923      	ldr	r3, [r4, #16]
 8018bac:	3301      	adds	r3, #1
 8018bae:	6123      	str	r3, [r4, #16]
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	3b01      	subs	r3, #1
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	607b      	str	r3, [r7, #4]
 8018bb8:	f340 8084 	ble.w	8018cc4 <_scanf_float+0x278>
 8018bbc:	683b      	ldr	r3, [r7, #0]
 8018bbe:	3301      	adds	r3, #1
 8018bc0:	603b      	str	r3, [r7, #0]
 8018bc2:	e766      	b.n	8018a92 <_scanf_float+0x46>
 8018bc4:	eb1a 0f05 	cmn.w	sl, r5
 8018bc8:	f47f af70 	bne.w	8018aac <_scanf_float+0x60>
 8018bcc:	6822      	ldr	r2, [r4, #0]
 8018bce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8018bd2:	6022      	str	r2, [r4, #0]
 8018bd4:	f806 3b01 	strb.w	r3, [r6], #1
 8018bd8:	e7e4      	b.n	8018ba4 <_scanf_float+0x158>
 8018bda:	6822      	ldr	r2, [r4, #0]
 8018bdc:	0610      	lsls	r0, r2, #24
 8018bde:	f57f af65 	bpl.w	8018aac <_scanf_float+0x60>
 8018be2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018be6:	e7f4      	b.n	8018bd2 <_scanf_float+0x186>
 8018be8:	f1ba 0f00 	cmp.w	sl, #0
 8018bec:	d10e      	bne.n	8018c0c <_scanf_float+0x1c0>
 8018bee:	f1b9 0f00 	cmp.w	r9, #0
 8018bf2:	d10e      	bne.n	8018c12 <_scanf_float+0x1c6>
 8018bf4:	6822      	ldr	r2, [r4, #0]
 8018bf6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018bfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018bfe:	d108      	bne.n	8018c12 <_scanf_float+0x1c6>
 8018c00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018c04:	6022      	str	r2, [r4, #0]
 8018c06:	f04f 0a01 	mov.w	sl, #1
 8018c0a:	e7e3      	b.n	8018bd4 <_scanf_float+0x188>
 8018c0c:	f1ba 0f02 	cmp.w	sl, #2
 8018c10:	d055      	beq.n	8018cbe <_scanf_float+0x272>
 8018c12:	2d01      	cmp	r5, #1
 8018c14:	d002      	beq.n	8018c1c <_scanf_float+0x1d0>
 8018c16:	2d04      	cmp	r5, #4
 8018c18:	f47f af48 	bne.w	8018aac <_scanf_float+0x60>
 8018c1c:	3501      	adds	r5, #1
 8018c1e:	b2ed      	uxtb	r5, r5
 8018c20:	e7d8      	b.n	8018bd4 <_scanf_float+0x188>
 8018c22:	f1ba 0f01 	cmp.w	sl, #1
 8018c26:	f47f af41 	bne.w	8018aac <_scanf_float+0x60>
 8018c2a:	f04f 0a02 	mov.w	sl, #2
 8018c2e:	e7d1      	b.n	8018bd4 <_scanf_float+0x188>
 8018c30:	b97d      	cbnz	r5, 8018c52 <_scanf_float+0x206>
 8018c32:	f1b9 0f00 	cmp.w	r9, #0
 8018c36:	f47f af3c 	bne.w	8018ab2 <_scanf_float+0x66>
 8018c3a:	6822      	ldr	r2, [r4, #0]
 8018c3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018c40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018c44:	f47f af39 	bne.w	8018aba <_scanf_float+0x6e>
 8018c48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018c4c:	6022      	str	r2, [r4, #0]
 8018c4e:	2501      	movs	r5, #1
 8018c50:	e7c0      	b.n	8018bd4 <_scanf_float+0x188>
 8018c52:	2d03      	cmp	r5, #3
 8018c54:	d0e2      	beq.n	8018c1c <_scanf_float+0x1d0>
 8018c56:	2d05      	cmp	r5, #5
 8018c58:	e7de      	b.n	8018c18 <_scanf_float+0x1cc>
 8018c5a:	2d02      	cmp	r5, #2
 8018c5c:	f47f af26 	bne.w	8018aac <_scanf_float+0x60>
 8018c60:	2503      	movs	r5, #3
 8018c62:	e7b7      	b.n	8018bd4 <_scanf_float+0x188>
 8018c64:	2d06      	cmp	r5, #6
 8018c66:	f47f af21 	bne.w	8018aac <_scanf_float+0x60>
 8018c6a:	2507      	movs	r5, #7
 8018c6c:	e7b2      	b.n	8018bd4 <_scanf_float+0x188>
 8018c6e:	6822      	ldr	r2, [r4, #0]
 8018c70:	0591      	lsls	r1, r2, #22
 8018c72:	f57f af1b 	bpl.w	8018aac <_scanf_float+0x60>
 8018c76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8018c7a:	6022      	str	r2, [r4, #0]
 8018c7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018c80:	e7a8      	b.n	8018bd4 <_scanf_float+0x188>
 8018c82:	6822      	ldr	r2, [r4, #0]
 8018c84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8018c88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8018c8c:	d006      	beq.n	8018c9c <_scanf_float+0x250>
 8018c8e:	0550      	lsls	r0, r2, #21
 8018c90:	f57f af0c 	bpl.w	8018aac <_scanf_float+0x60>
 8018c94:	f1b9 0f00 	cmp.w	r9, #0
 8018c98:	f43f af0f 	beq.w	8018aba <_scanf_float+0x6e>
 8018c9c:	0591      	lsls	r1, r2, #22
 8018c9e:	bf58      	it	pl
 8018ca0:	9901      	ldrpl	r1, [sp, #4]
 8018ca2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018ca6:	bf58      	it	pl
 8018ca8:	eba9 0101 	subpl.w	r1, r9, r1
 8018cac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8018cb0:	bf58      	it	pl
 8018cb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8018cb6:	6022      	str	r2, [r4, #0]
 8018cb8:	f04f 0900 	mov.w	r9, #0
 8018cbc:	e78a      	b.n	8018bd4 <_scanf_float+0x188>
 8018cbe:	f04f 0a03 	mov.w	sl, #3
 8018cc2:	e787      	b.n	8018bd4 <_scanf_float+0x188>
 8018cc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018cc8:	4639      	mov	r1, r7
 8018cca:	4640      	mov	r0, r8
 8018ccc:	4798      	blx	r3
 8018cce:	2800      	cmp	r0, #0
 8018cd0:	f43f aedf 	beq.w	8018a92 <_scanf_float+0x46>
 8018cd4:	e6ea      	b.n	8018aac <_scanf_float+0x60>
 8018cd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018cda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018cde:	463a      	mov	r2, r7
 8018ce0:	4640      	mov	r0, r8
 8018ce2:	4798      	blx	r3
 8018ce4:	6923      	ldr	r3, [r4, #16]
 8018ce6:	3b01      	subs	r3, #1
 8018ce8:	6123      	str	r3, [r4, #16]
 8018cea:	e6ec      	b.n	8018ac6 <_scanf_float+0x7a>
 8018cec:	1e6b      	subs	r3, r5, #1
 8018cee:	2b06      	cmp	r3, #6
 8018cf0:	d825      	bhi.n	8018d3e <_scanf_float+0x2f2>
 8018cf2:	2d02      	cmp	r5, #2
 8018cf4:	d836      	bhi.n	8018d64 <_scanf_float+0x318>
 8018cf6:	455e      	cmp	r6, fp
 8018cf8:	f67f aee8 	bls.w	8018acc <_scanf_float+0x80>
 8018cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018d04:	463a      	mov	r2, r7
 8018d06:	4640      	mov	r0, r8
 8018d08:	4798      	blx	r3
 8018d0a:	6923      	ldr	r3, [r4, #16]
 8018d0c:	3b01      	subs	r3, #1
 8018d0e:	6123      	str	r3, [r4, #16]
 8018d10:	e7f1      	b.n	8018cf6 <_scanf_float+0x2aa>
 8018d12:	9802      	ldr	r0, [sp, #8]
 8018d14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8018d1c:	9002      	str	r0, [sp, #8]
 8018d1e:	463a      	mov	r2, r7
 8018d20:	4640      	mov	r0, r8
 8018d22:	4798      	blx	r3
 8018d24:	6923      	ldr	r3, [r4, #16]
 8018d26:	3b01      	subs	r3, #1
 8018d28:	6123      	str	r3, [r4, #16]
 8018d2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018d2e:	fa5f fa8a 	uxtb.w	sl, sl
 8018d32:	f1ba 0f02 	cmp.w	sl, #2
 8018d36:	d1ec      	bne.n	8018d12 <_scanf_float+0x2c6>
 8018d38:	3d03      	subs	r5, #3
 8018d3a:	b2ed      	uxtb	r5, r5
 8018d3c:	1b76      	subs	r6, r6, r5
 8018d3e:	6823      	ldr	r3, [r4, #0]
 8018d40:	05da      	lsls	r2, r3, #23
 8018d42:	d52f      	bpl.n	8018da4 <_scanf_float+0x358>
 8018d44:	055b      	lsls	r3, r3, #21
 8018d46:	d510      	bpl.n	8018d6a <_scanf_float+0x31e>
 8018d48:	455e      	cmp	r6, fp
 8018d4a:	f67f aebf 	bls.w	8018acc <_scanf_float+0x80>
 8018d4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018d56:	463a      	mov	r2, r7
 8018d58:	4640      	mov	r0, r8
 8018d5a:	4798      	blx	r3
 8018d5c:	6923      	ldr	r3, [r4, #16]
 8018d5e:	3b01      	subs	r3, #1
 8018d60:	6123      	str	r3, [r4, #16]
 8018d62:	e7f1      	b.n	8018d48 <_scanf_float+0x2fc>
 8018d64:	46aa      	mov	sl, r5
 8018d66:	9602      	str	r6, [sp, #8]
 8018d68:	e7df      	b.n	8018d2a <_scanf_float+0x2de>
 8018d6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8018d6e:	6923      	ldr	r3, [r4, #16]
 8018d70:	2965      	cmp	r1, #101	; 0x65
 8018d72:	f103 33ff 	add.w	r3, r3, #4294967295
 8018d76:	f106 35ff 	add.w	r5, r6, #4294967295
 8018d7a:	6123      	str	r3, [r4, #16]
 8018d7c:	d00c      	beq.n	8018d98 <_scanf_float+0x34c>
 8018d7e:	2945      	cmp	r1, #69	; 0x45
 8018d80:	d00a      	beq.n	8018d98 <_scanf_float+0x34c>
 8018d82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d86:	463a      	mov	r2, r7
 8018d88:	4640      	mov	r0, r8
 8018d8a:	4798      	blx	r3
 8018d8c:	6923      	ldr	r3, [r4, #16]
 8018d8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8018d92:	3b01      	subs	r3, #1
 8018d94:	1eb5      	subs	r5, r6, #2
 8018d96:	6123      	str	r3, [r4, #16]
 8018d98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018d9c:	463a      	mov	r2, r7
 8018d9e:	4640      	mov	r0, r8
 8018da0:	4798      	blx	r3
 8018da2:	462e      	mov	r6, r5
 8018da4:	6825      	ldr	r5, [r4, #0]
 8018da6:	f015 0510 	ands.w	r5, r5, #16
 8018daa:	d14e      	bne.n	8018e4a <_scanf_float+0x3fe>
 8018dac:	7035      	strb	r5, [r6, #0]
 8018dae:	6823      	ldr	r3, [r4, #0]
 8018db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8018db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018db8:	d119      	bne.n	8018dee <_scanf_float+0x3a2>
 8018dba:	9b01      	ldr	r3, [sp, #4]
 8018dbc:	454b      	cmp	r3, r9
 8018dbe:	eba3 0209 	sub.w	r2, r3, r9
 8018dc2:	d121      	bne.n	8018e08 <_scanf_float+0x3bc>
 8018dc4:	2200      	movs	r2, #0
 8018dc6:	4659      	mov	r1, fp
 8018dc8:	4640      	mov	r0, r8
 8018dca:	f000 fe7f 	bl	8019acc <_strtod_r>
 8018dce:	6822      	ldr	r2, [r4, #0]
 8018dd0:	9b03      	ldr	r3, [sp, #12]
 8018dd2:	f012 0f02 	tst.w	r2, #2
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	d021      	beq.n	8018e1e <_scanf_float+0x3d2>
 8018dda:	9903      	ldr	r1, [sp, #12]
 8018ddc:	1d1a      	adds	r2, r3, #4
 8018dde:	600a      	str	r2, [r1, #0]
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	ed83 0b00 	vstr	d0, [r3]
 8018de6:	68e3      	ldr	r3, [r4, #12]
 8018de8:	3301      	adds	r3, #1
 8018dea:	60e3      	str	r3, [r4, #12]
 8018dec:	e66f      	b.n	8018ace <_scanf_float+0x82>
 8018dee:	9b04      	ldr	r3, [sp, #16]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d0e7      	beq.n	8018dc4 <_scanf_float+0x378>
 8018df4:	9905      	ldr	r1, [sp, #20]
 8018df6:	230a      	movs	r3, #10
 8018df8:	462a      	mov	r2, r5
 8018dfa:	3101      	adds	r1, #1
 8018dfc:	4640      	mov	r0, r8
 8018dfe:	f000 feed 	bl	8019bdc <_strtol_r>
 8018e02:	9b04      	ldr	r3, [sp, #16]
 8018e04:	9e05      	ldr	r6, [sp, #20]
 8018e06:	1ac2      	subs	r2, r0, r3
 8018e08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8018e0c:	429e      	cmp	r6, r3
 8018e0e:	bf28      	it	cs
 8018e10:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8018e14:	490e      	ldr	r1, [pc, #56]	; (8018e50 <_scanf_float+0x404>)
 8018e16:	4630      	mov	r0, r6
 8018e18:	f000 f824 	bl	8018e64 <siprintf>
 8018e1c:	e7d2      	b.n	8018dc4 <_scanf_float+0x378>
 8018e1e:	9903      	ldr	r1, [sp, #12]
 8018e20:	f012 0f04 	tst.w	r2, #4
 8018e24:	f103 0204 	add.w	r2, r3, #4
 8018e28:	600a      	str	r2, [r1, #0]
 8018e2a:	d1d9      	bne.n	8018de0 <_scanf_float+0x394>
 8018e2c:	eeb4 0b40 	vcmp.f64	d0, d0
 8018e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e34:	681e      	ldr	r6, [r3, #0]
 8018e36:	d705      	bvc.n	8018e44 <_scanf_float+0x3f8>
 8018e38:	4806      	ldr	r0, [pc, #24]	; (8018e54 <_scanf_float+0x408>)
 8018e3a:	f000 f80d 	bl	8018e58 <nanf>
 8018e3e:	ed86 0a00 	vstr	s0, [r6]
 8018e42:	e7d0      	b.n	8018de6 <_scanf_float+0x39a>
 8018e44:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018e48:	e7f9      	b.n	8018e3e <_scanf_float+0x3f2>
 8018e4a:	2500      	movs	r5, #0
 8018e4c:	e63f      	b.n	8018ace <_scanf_float+0x82>
 8018e4e:	bf00      	nop
 8018e50:	0801ce5c 	.word	0x0801ce5c
 8018e54:	0801d268 	.word	0x0801d268

08018e58 <nanf>:
 8018e58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018e60 <nanf+0x8>
 8018e5c:	4770      	bx	lr
 8018e5e:	bf00      	nop
 8018e60:	7fc00000 	.word	0x7fc00000

08018e64 <siprintf>:
 8018e64:	b40e      	push	{r1, r2, r3}
 8018e66:	b500      	push	{lr}
 8018e68:	b09c      	sub	sp, #112	; 0x70
 8018e6a:	ab1d      	add	r3, sp, #116	; 0x74
 8018e6c:	9002      	str	r0, [sp, #8]
 8018e6e:	9006      	str	r0, [sp, #24]
 8018e70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018e74:	4809      	ldr	r0, [pc, #36]	; (8018e9c <siprintf+0x38>)
 8018e76:	9107      	str	r1, [sp, #28]
 8018e78:	9104      	str	r1, [sp, #16]
 8018e7a:	4909      	ldr	r1, [pc, #36]	; (8018ea0 <siprintf+0x3c>)
 8018e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e80:	9105      	str	r1, [sp, #20]
 8018e82:	6800      	ldr	r0, [r0, #0]
 8018e84:	9301      	str	r3, [sp, #4]
 8018e86:	a902      	add	r1, sp, #8
 8018e88:	f002 fe78 	bl	801bb7c <_svfiprintf_r>
 8018e8c:	9b02      	ldr	r3, [sp, #8]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	701a      	strb	r2, [r3, #0]
 8018e92:	b01c      	add	sp, #112	; 0x70
 8018e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8018e98:	b003      	add	sp, #12
 8018e9a:	4770      	bx	lr
 8018e9c:	24000100 	.word	0x24000100
 8018ea0:	ffff0208 	.word	0xffff0208

08018ea4 <__sread>:
 8018ea4:	b510      	push	{r4, lr}
 8018ea6:	460c      	mov	r4, r1
 8018ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018eac:	f002 ff66 	bl	801bd7c <_read_r>
 8018eb0:	2800      	cmp	r0, #0
 8018eb2:	bfab      	itete	ge
 8018eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8018eb8:	181b      	addge	r3, r3, r0
 8018eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018ebe:	bfac      	ite	ge
 8018ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8018ec2:	81a3      	strhlt	r3, [r4, #12]
 8018ec4:	bd10      	pop	{r4, pc}

08018ec6 <__swrite>:
 8018ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eca:	461f      	mov	r7, r3
 8018ecc:	898b      	ldrh	r3, [r1, #12]
 8018ece:	05db      	lsls	r3, r3, #23
 8018ed0:	4605      	mov	r5, r0
 8018ed2:	460c      	mov	r4, r1
 8018ed4:	4616      	mov	r6, r2
 8018ed6:	d505      	bpl.n	8018ee4 <__swrite+0x1e>
 8018ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018edc:	2302      	movs	r3, #2
 8018ede:	2200      	movs	r2, #0
 8018ee0:	f002 f810 	bl	801af04 <_lseek_r>
 8018ee4:	89a3      	ldrh	r3, [r4, #12]
 8018ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018eee:	81a3      	strh	r3, [r4, #12]
 8018ef0:	4632      	mov	r2, r6
 8018ef2:	463b      	mov	r3, r7
 8018ef4:	4628      	mov	r0, r5
 8018ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018efa:	f000 be71 	b.w	8019be0 <_write_r>

08018efe <__sseek>:
 8018efe:	b510      	push	{r4, lr}
 8018f00:	460c      	mov	r4, r1
 8018f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f06:	f001 fffd 	bl	801af04 <_lseek_r>
 8018f0a:	1c43      	adds	r3, r0, #1
 8018f0c:	89a3      	ldrh	r3, [r4, #12]
 8018f0e:	bf15      	itete	ne
 8018f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8018f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018f1a:	81a3      	strheq	r3, [r4, #12]
 8018f1c:	bf18      	it	ne
 8018f1e:	81a3      	strhne	r3, [r4, #12]
 8018f20:	bd10      	pop	{r4, pc}

08018f22 <__sclose>:
 8018f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f26:	f000 be6d 	b.w	8019c04 <_close_r>

08018f2a <sulp>:
 8018f2a:	b570      	push	{r4, r5, r6, lr}
 8018f2c:	4604      	mov	r4, r0
 8018f2e:	460d      	mov	r5, r1
 8018f30:	4616      	mov	r6, r2
 8018f32:	ec45 4b10 	vmov	d0, r4, r5
 8018f36:	f002 fb83 	bl	801b640 <__ulp>
 8018f3a:	b17e      	cbz	r6, 8018f5c <sulp+0x32>
 8018f3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018f40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	dd09      	ble.n	8018f5c <sulp+0x32>
 8018f48:	051b      	lsls	r3, r3, #20
 8018f4a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8018f4e:	2000      	movs	r0, #0
 8018f50:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8018f54:	ec41 0b17 	vmov	d7, r0, r1
 8018f58:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018f60 <_strtod_l>:
 8018f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f64:	ed2d 8b0e 	vpush	{d8-d14}
 8018f68:	b097      	sub	sp, #92	; 0x5c
 8018f6a:	461f      	mov	r7, r3
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	9312      	str	r3, [sp, #72]	; 0x48
 8018f70:	4ba1      	ldr	r3, [pc, #644]	; (80191f8 <_strtod_l+0x298>)
 8018f72:	920d      	str	r2, [sp, #52]	; 0x34
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	9307      	str	r3, [sp, #28]
 8018f78:	4604      	mov	r4, r0
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	468b      	mov	fp, r1
 8018f7e:	f7e7 f9c7 	bl	8000310 <strlen>
 8018f82:	f04f 0800 	mov.w	r8, #0
 8018f86:	4605      	mov	r5, r0
 8018f88:	f04f 0900 	mov.w	r9, #0
 8018f8c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8018f90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018f92:	7813      	ldrb	r3, [r2, #0]
 8018f94:	2b2b      	cmp	r3, #43	; 0x2b
 8018f96:	d04d      	beq.n	8019034 <_strtod_l+0xd4>
 8018f98:	d83a      	bhi.n	8019010 <_strtod_l+0xb0>
 8018f9a:	2b0d      	cmp	r3, #13
 8018f9c:	d833      	bhi.n	8019006 <_strtod_l+0xa6>
 8018f9e:	2b08      	cmp	r3, #8
 8018fa0:	d833      	bhi.n	801900a <_strtod_l+0xaa>
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d03d      	beq.n	8019022 <_strtod_l+0xc2>
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	9308      	str	r3, [sp, #32]
 8018faa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018fac:	7833      	ldrb	r3, [r6, #0]
 8018fae:	2b30      	cmp	r3, #48	; 0x30
 8018fb0:	f040 80b0 	bne.w	8019114 <_strtod_l+0x1b4>
 8018fb4:	7873      	ldrb	r3, [r6, #1]
 8018fb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018fba:	2b58      	cmp	r3, #88	; 0x58
 8018fbc:	d167      	bne.n	801908e <_strtod_l+0x12e>
 8018fbe:	9b08      	ldr	r3, [sp, #32]
 8018fc0:	9301      	str	r3, [sp, #4]
 8018fc2:	ab12      	add	r3, sp, #72	; 0x48
 8018fc4:	9702      	str	r7, [sp, #8]
 8018fc6:	9300      	str	r3, [sp, #0]
 8018fc8:	4a8c      	ldr	r2, [pc, #560]	; (80191fc <_strtod_l+0x29c>)
 8018fca:	ab13      	add	r3, sp, #76	; 0x4c
 8018fcc:	a911      	add	r1, sp, #68	; 0x44
 8018fce:	4620      	mov	r0, r4
 8018fd0:	f001 fc8c 	bl	801a8ec <__gethex>
 8018fd4:	f010 0507 	ands.w	r5, r0, #7
 8018fd8:	4607      	mov	r7, r0
 8018fda:	d005      	beq.n	8018fe8 <_strtod_l+0x88>
 8018fdc:	2d06      	cmp	r5, #6
 8018fde:	d12b      	bne.n	8019038 <_strtod_l+0xd8>
 8018fe0:	3601      	adds	r6, #1
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	9611      	str	r6, [sp, #68]	; 0x44
 8018fe6:	9308      	str	r3, [sp, #32]
 8018fe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	f040 854e 	bne.w	8019a8c <_strtod_l+0xb2c>
 8018ff0:	9b08      	ldr	r3, [sp, #32]
 8018ff2:	b1e3      	cbz	r3, 801902e <_strtod_l+0xce>
 8018ff4:	ec49 8b17 	vmov	d7, r8, r9
 8018ff8:	eeb1 0b47 	vneg.f64	d0, d7
 8018ffc:	b017      	add	sp, #92	; 0x5c
 8018ffe:	ecbd 8b0e 	vpop	{d8-d14}
 8019002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019006:	2b20      	cmp	r3, #32
 8019008:	d1cd      	bne.n	8018fa6 <_strtod_l+0x46>
 801900a:	3201      	adds	r2, #1
 801900c:	9211      	str	r2, [sp, #68]	; 0x44
 801900e:	e7bf      	b.n	8018f90 <_strtod_l+0x30>
 8019010:	2b2d      	cmp	r3, #45	; 0x2d
 8019012:	d1c8      	bne.n	8018fa6 <_strtod_l+0x46>
 8019014:	2301      	movs	r3, #1
 8019016:	9308      	str	r3, [sp, #32]
 8019018:	1c53      	adds	r3, r2, #1
 801901a:	9311      	str	r3, [sp, #68]	; 0x44
 801901c:	7853      	ldrb	r3, [r2, #1]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d1c3      	bne.n	8018faa <_strtod_l+0x4a>
 8019022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019024:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8019028:	2b00      	cmp	r3, #0
 801902a:	f040 852d 	bne.w	8019a88 <_strtod_l+0xb28>
 801902e:	ec49 8b10 	vmov	d0, r8, r9
 8019032:	e7e3      	b.n	8018ffc <_strtod_l+0x9c>
 8019034:	2300      	movs	r3, #0
 8019036:	e7ee      	b.n	8019016 <_strtod_l+0xb6>
 8019038:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801903a:	b13a      	cbz	r2, 801904c <_strtod_l+0xec>
 801903c:	2135      	movs	r1, #53	; 0x35
 801903e:	a814      	add	r0, sp, #80	; 0x50
 8019040:	f002 fc06 	bl	801b850 <__copybits>
 8019044:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019046:	4620      	mov	r0, r4
 8019048:	f001 ffc8 	bl	801afdc <_Bfree>
 801904c:	3d01      	subs	r5, #1
 801904e:	2d04      	cmp	r5, #4
 8019050:	d806      	bhi.n	8019060 <_strtod_l+0x100>
 8019052:	e8df f005 	tbb	[pc, r5]
 8019056:	030a      	.short	0x030a
 8019058:	1714      	.short	0x1714
 801905a:	0a          	.byte	0x0a
 801905b:	00          	.byte	0x00
 801905c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8019060:	073f      	lsls	r7, r7, #28
 8019062:	d5c1      	bpl.n	8018fe8 <_strtod_l+0x88>
 8019064:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8019068:	e7be      	b.n	8018fe8 <_strtod_l+0x88>
 801906a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801906e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019070:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019074:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019078:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801907c:	e7f0      	b.n	8019060 <_strtod_l+0x100>
 801907e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8019200 <_strtod_l+0x2a0>
 8019082:	e7ed      	b.n	8019060 <_strtod_l+0x100>
 8019084:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019088:	f04f 38ff 	mov.w	r8, #4294967295
 801908c:	e7e8      	b.n	8019060 <_strtod_l+0x100>
 801908e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019090:	1c5a      	adds	r2, r3, #1
 8019092:	9211      	str	r2, [sp, #68]	; 0x44
 8019094:	785b      	ldrb	r3, [r3, #1]
 8019096:	2b30      	cmp	r3, #48	; 0x30
 8019098:	d0f9      	beq.n	801908e <_strtod_l+0x12e>
 801909a:	2b00      	cmp	r3, #0
 801909c:	d0a4      	beq.n	8018fe8 <_strtod_l+0x88>
 801909e:	2301      	movs	r3, #1
 80190a0:	f04f 0a00 	mov.w	sl, #0
 80190a4:	9304      	str	r3, [sp, #16]
 80190a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80190a8:	930a      	str	r3, [sp, #40]	; 0x28
 80190aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80190ae:	f8cd a018 	str.w	sl, [sp, #24]
 80190b2:	220a      	movs	r2, #10
 80190b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80190b6:	7807      	ldrb	r7, [r0, #0]
 80190b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80190bc:	b2d9      	uxtb	r1, r3
 80190be:	2909      	cmp	r1, #9
 80190c0:	d92a      	bls.n	8019118 <_strtod_l+0x1b8>
 80190c2:	9907      	ldr	r1, [sp, #28]
 80190c4:	462a      	mov	r2, r5
 80190c6:	f002 fe83 	bl	801bdd0 <strncmp>
 80190ca:	2800      	cmp	r0, #0
 80190cc:	d033      	beq.n	8019136 <_strtod_l+0x1d6>
 80190ce:	2000      	movs	r0, #0
 80190d0:	9b06      	ldr	r3, [sp, #24]
 80190d2:	463a      	mov	r2, r7
 80190d4:	4601      	mov	r1, r0
 80190d6:	4607      	mov	r7, r0
 80190d8:	2a65      	cmp	r2, #101	; 0x65
 80190da:	d001      	beq.n	80190e0 <_strtod_l+0x180>
 80190dc:	2a45      	cmp	r2, #69	; 0x45
 80190de:	d117      	bne.n	8019110 <_strtod_l+0x1b0>
 80190e0:	b91b      	cbnz	r3, 80190ea <_strtod_l+0x18a>
 80190e2:	9b04      	ldr	r3, [sp, #16]
 80190e4:	4303      	orrs	r3, r0
 80190e6:	d09c      	beq.n	8019022 <_strtod_l+0xc2>
 80190e8:	2300      	movs	r3, #0
 80190ea:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80190ee:	f10b 0201 	add.w	r2, fp, #1
 80190f2:	9211      	str	r2, [sp, #68]	; 0x44
 80190f4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80190f8:	2a2b      	cmp	r2, #43	; 0x2b
 80190fa:	d071      	beq.n	80191e0 <_strtod_l+0x280>
 80190fc:	2a2d      	cmp	r2, #45	; 0x2d
 80190fe:	d077      	beq.n	80191f0 <_strtod_l+0x290>
 8019100:	f04f 0e00 	mov.w	lr, #0
 8019104:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8019108:	2d09      	cmp	r5, #9
 801910a:	d97f      	bls.n	801920c <_strtod_l+0x2ac>
 801910c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8019110:	2500      	movs	r5, #0
 8019112:	e09b      	b.n	801924c <_strtod_l+0x2ec>
 8019114:	2300      	movs	r3, #0
 8019116:	e7c3      	b.n	80190a0 <_strtod_l+0x140>
 8019118:	9906      	ldr	r1, [sp, #24]
 801911a:	2908      	cmp	r1, #8
 801911c:	bfdd      	ittte	le
 801911e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8019120:	fb02 3301 	mlale	r3, r2, r1, r3
 8019124:	9309      	strle	r3, [sp, #36]	; 0x24
 8019126:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801912a:	9b06      	ldr	r3, [sp, #24]
 801912c:	3001      	adds	r0, #1
 801912e:	3301      	adds	r3, #1
 8019130:	9306      	str	r3, [sp, #24]
 8019132:	9011      	str	r0, [sp, #68]	; 0x44
 8019134:	e7be      	b.n	80190b4 <_strtod_l+0x154>
 8019136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019138:	195a      	adds	r2, r3, r5
 801913a:	9211      	str	r2, [sp, #68]	; 0x44
 801913c:	5d5a      	ldrb	r2, [r3, r5]
 801913e:	9b06      	ldr	r3, [sp, #24]
 8019140:	b3a3      	cbz	r3, 80191ac <_strtod_l+0x24c>
 8019142:	4607      	mov	r7, r0
 8019144:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019148:	2909      	cmp	r1, #9
 801914a:	d912      	bls.n	8019172 <_strtod_l+0x212>
 801914c:	2101      	movs	r1, #1
 801914e:	e7c3      	b.n	80190d8 <_strtod_l+0x178>
 8019150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019152:	1c5a      	adds	r2, r3, #1
 8019154:	9211      	str	r2, [sp, #68]	; 0x44
 8019156:	785a      	ldrb	r2, [r3, #1]
 8019158:	3001      	adds	r0, #1
 801915a:	2a30      	cmp	r2, #48	; 0x30
 801915c:	d0f8      	beq.n	8019150 <_strtod_l+0x1f0>
 801915e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019162:	2b08      	cmp	r3, #8
 8019164:	f200 8497 	bhi.w	8019a96 <_strtod_l+0xb36>
 8019168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801916a:	930a      	str	r3, [sp, #40]	; 0x28
 801916c:	4607      	mov	r7, r0
 801916e:	2000      	movs	r0, #0
 8019170:	4603      	mov	r3, r0
 8019172:	3a30      	subs	r2, #48	; 0x30
 8019174:	f100 0101 	add.w	r1, r0, #1
 8019178:	d012      	beq.n	80191a0 <_strtod_l+0x240>
 801917a:	440f      	add	r7, r1
 801917c:	eb00 0c03 	add.w	ip, r0, r3
 8019180:	4619      	mov	r1, r3
 8019182:	250a      	movs	r5, #10
 8019184:	4561      	cmp	r1, ip
 8019186:	d113      	bne.n	80191b0 <_strtod_l+0x250>
 8019188:	1819      	adds	r1, r3, r0
 801918a:	2908      	cmp	r1, #8
 801918c:	f103 0301 	add.w	r3, r3, #1
 8019190:	4403      	add	r3, r0
 8019192:	dc1c      	bgt.n	80191ce <_strtod_l+0x26e>
 8019194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019196:	210a      	movs	r1, #10
 8019198:	fb01 2200 	mla	r2, r1, r0, r2
 801919c:	9209      	str	r2, [sp, #36]	; 0x24
 801919e:	2100      	movs	r1, #0
 80191a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80191a2:	1c50      	adds	r0, r2, #1
 80191a4:	9011      	str	r0, [sp, #68]	; 0x44
 80191a6:	7852      	ldrb	r2, [r2, #1]
 80191a8:	4608      	mov	r0, r1
 80191aa:	e7cb      	b.n	8019144 <_strtod_l+0x1e4>
 80191ac:	9806      	ldr	r0, [sp, #24]
 80191ae:	e7d4      	b.n	801915a <_strtod_l+0x1fa>
 80191b0:	2908      	cmp	r1, #8
 80191b2:	dc04      	bgt.n	80191be <_strtod_l+0x25e>
 80191b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80191b6:	436e      	muls	r6, r5
 80191b8:	9609      	str	r6, [sp, #36]	; 0x24
 80191ba:	3101      	adds	r1, #1
 80191bc:	e7e2      	b.n	8019184 <_strtod_l+0x224>
 80191be:	f101 0e01 	add.w	lr, r1, #1
 80191c2:	f1be 0f10 	cmp.w	lr, #16
 80191c6:	bfd8      	it	le
 80191c8:	fb05 fa0a 	mulle.w	sl, r5, sl
 80191cc:	e7f5      	b.n	80191ba <_strtod_l+0x25a>
 80191ce:	2b10      	cmp	r3, #16
 80191d0:	bfdc      	itt	le
 80191d2:	210a      	movle	r1, #10
 80191d4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80191d8:	e7e1      	b.n	801919e <_strtod_l+0x23e>
 80191da:	2700      	movs	r7, #0
 80191dc:	2101      	movs	r1, #1
 80191de:	e780      	b.n	80190e2 <_strtod_l+0x182>
 80191e0:	f04f 0e00 	mov.w	lr, #0
 80191e4:	f10b 0202 	add.w	r2, fp, #2
 80191e8:	9211      	str	r2, [sp, #68]	; 0x44
 80191ea:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80191ee:	e789      	b.n	8019104 <_strtod_l+0x1a4>
 80191f0:	f04f 0e01 	mov.w	lr, #1
 80191f4:	e7f6      	b.n	80191e4 <_strtod_l+0x284>
 80191f6:	bf00      	nop
 80191f8:	0801d0b0 	.word	0x0801d0b0
 80191fc:	0801ce64 	.word	0x0801ce64
 8019200:	7ff00000 	.word	0x7ff00000
 8019204:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019206:	1c55      	adds	r5, r2, #1
 8019208:	9511      	str	r5, [sp, #68]	; 0x44
 801920a:	7852      	ldrb	r2, [r2, #1]
 801920c:	2a30      	cmp	r2, #48	; 0x30
 801920e:	d0f9      	beq.n	8019204 <_strtod_l+0x2a4>
 8019210:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8019214:	2d08      	cmp	r5, #8
 8019216:	f63f af7b 	bhi.w	8019110 <_strtod_l+0x1b0>
 801921a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801921e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019220:	9207      	str	r2, [sp, #28]
 8019222:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019224:	1c55      	adds	r5, r2, #1
 8019226:	9511      	str	r5, [sp, #68]	; 0x44
 8019228:	7852      	ldrb	r2, [r2, #1]
 801922a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801922e:	2e09      	cmp	r6, #9
 8019230:	d937      	bls.n	80192a2 <_strtod_l+0x342>
 8019232:	9e07      	ldr	r6, [sp, #28]
 8019234:	1bad      	subs	r5, r5, r6
 8019236:	2d08      	cmp	r5, #8
 8019238:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801923c:	dc02      	bgt.n	8019244 <_strtod_l+0x2e4>
 801923e:	4565      	cmp	r5, ip
 8019240:	bfa8      	it	ge
 8019242:	4665      	movge	r5, ip
 8019244:	f1be 0f00 	cmp.w	lr, #0
 8019248:	d000      	beq.n	801924c <_strtod_l+0x2ec>
 801924a:	426d      	negs	r5, r5
 801924c:	2b00      	cmp	r3, #0
 801924e:	d14d      	bne.n	80192ec <_strtod_l+0x38c>
 8019250:	9b04      	ldr	r3, [sp, #16]
 8019252:	4303      	orrs	r3, r0
 8019254:	f47f aec8 	bne.w	8018fe8 <_strtod_l+0x88>
 8019258:	2900      	cmp	r1, #0
 801925a:	f47f aee2 	bne.w	8019022 <_strtod_l+0xc2>
 801925e:	2a69      	cmp	r2, #105	; 0x69
 8019260:	d027      	beq.n	80192b2 <_strtod_l+0x352>
 8019262:	dc24      	bgt.n	80192ae <_strtod_l+0x34e>
 8019264:	2a49      	cmp	r2, #73	; 0x49
 8019266:	d024      	beq.n	80192b2 <_strtod_l+0x352>
 8019268:	2a4e      	cmp	r2, #78	; 0x4e
 801926a:	f47f aeda 	bne.w	8019022 <_strtod_l+0xc2>
 801926e:	4996      	ldr	r1, [pc, #600]	; (80194c8 <_strtod_l+0x568>)
 8019270:	a811      	add	r0, sp, #68	; 0x44
 8019272:	f001 fd93 	bl	801ad9c <__match>
 8019276:	2800      	cmp	r0, #0
 8019278:	f43f aed3 	beq.w	8019022 <_strtod_l+0xc2>
 801927c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801927e:	781b      	ldrb	r3, [r3, #0]
 8019280:	2b28      	cmp	r3, #40	; 0x28
 8019282:	d12d      	bne.n	80192e0 <_strtod_l+0x380>
 8019284:	4991      	ldr	r1, [pc, #580]	; (80194cc <_strtod_l+0x56c>)
 8019286:	aa14      	add	r2, sp, #80	; 0x50
 8019288:	a811      	add	r0, sp, #68	; 0x44
 801928a:	f001 fd9b 	bl	801adc4 <__hexnan>
 801928e:	2805      	cmp	r0, #5
 8019290:	d126      	bne.n	80192e0 <_strtod_l+0x380>
 8019292:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019294:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019298:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801929c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80192a0:	e6a2      	b.n	8018fe8 <_strtod_l+0x88>
 80192a2:	250a      	movs	r5, #10
 80192a4:	fb05 250c 	mla	r5, r5, ip, r2
 80192a8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80192ac:	e7b9      	b.n	8019222 <_strtod_l+0x2c2>
 80192ae:	2a6e      	cmp	r2, #110	; 0x6e
 80192b0:	e7db      	b.n	801926a <_strtod_l+0x30a>
 80192b2:	4987      	ldr	r1, [pc, #540]	; (80194d0 <_strtod_l+0x570>)
 80192b4:	a811      	add	r0, sp, #68	; 0x44
 80192b6:	f001 fd71 	bl	801ad9c <__match>
 80192ba:	2800      	cmp	r0, #0
 80192bc:	f43f aeb1 	beq.w	8019022 <_strtod_l+0xc2>
 80192c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80192c2:	4984      	ldr	r1, [pc, #528]	; (80194d4 <_strtod_l+0x574>)
 80192c4:	3b01      	subs	r3, #1
 80192c6:	a811      	add	r0, sp, #68	; 0x44
 80192c8:	9311      	str	r3, [sp, #68]	; 0x44
 80192ca:	f001 fd67 	bl	801ad9c <__match>
 80192ce:	b910      	cbnz	r0, 80192d6 <_strtod_l+0x376>
 80192d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80192d2:	3301      	adds	r3, #1
 80192d4:	9311      	str	r3, [sp, #68]	; 0x44
 80192d6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80194e8 <_strtod_l+0x588>
 80192da:	f04f 0800 	mov.w	r8, #0
 80192de:	e683      	b.n	8018fe8 <_strtod_l+0x88>
 80192e0:	487d      	ldr	r0, [pc, #500]	; (80194d8 <_strtod_l+0x578>)
 80192e2:	f002 fd5d 	bl	801bda0 <nan>
 80192e6:	ec59 8b10 	vmov	r8, r9, d0
 80192ea:	e67d      	b.n	8018fe8 <_strtod_l+0x88>
 80192ec:	1bea      	subs	r2, r5, r7
 80192ee:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80192f2:	9207      	str	r2, [sp, #28]
 80192f4:	9a06      	ldr	r2, [sp, #24]
 80192f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80192fa:	2a00      	cmp	r2, #0
 80192fc:	bf08      	it	eq
 80192fe:	461a      	moveq	r2, r3
 8019300:	2b10      	cmp	r3, #16
 8019302:	9206      	str	r2, [sp, #24]
 8019304:	461a      	mov	r2, r3
 8019306:	bfa8      	it	ge
 8019308:	2210      	movge	r2, #16
 801930a:	2b09      	cmp	r3, #9
 801930c:	ec59 8b17 	vmov	r8, r9, d7
 8019310:	dd0c      	ble.n	801932c <_strtod_l+0x3cc>
 8019312:	4972      	ldr	r1, [pc, #456]	; (80194dc <_strtod_l+0x57c>)
 8019314:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019318:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801931c:	ee06 aa90 	vmov	s13, sl
 8019320:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8019324:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019328:	ec59 8b16 	vmov	r8, r9, d6
 801932c:	2b0f      	cmp	r3, #15
 801932e:	dc36      	bgt.n	801939e <_strtod_l+0x43e>
 8019330:	9907      	ldr	r1, [sp, #28]
 8019332:	2900      	cmp	r1, #0
 8019334:	f43f ae58 	beq.w	8018fe8 <_strtod_l+0x88>
 8019338:	dd23      	ble.n	8019382 <_strtod_l+0x422>
 801933a:	2916      	cmp	r1, #22
 801933c:	dc0b      	bgt.n	8019356 <_strtod_l+0x3f6>
 801933e:	4b67      	ldr	r3, [pc, #412]	; (80194dc <_strtod_l+0x57c>)
 8019340:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8019344:	ed93 7b00 	vldr	d7, [r3]
 8019348:	ec49 8b16 	vmov	d6, r8, r9
 801934c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019350:	ec59 8b17 	vmov	r8, r9, d7
 8019354:	e648      	b.n	8018fe8 <_strtod_l+0x88>
 8019356:	9807      	ldr	r0, [sp, #28]
 8019358:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801935c:	4281      	cmp	r1, r0
 801935e:	db1e      	blt.n	801939e <_strtod_l+0x43e>
 8019360:	4a5e      	ldr	r2, [pc, #376]	; (80194dc <_strtod_l+0x57c>)
 8019362:	f1c3 030f 	rsb	r3, r3, #15
 8019366:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801936a:	ed91 7b00 	vldr	d7, [r1]
 801936e:	ec49 8b16 	vmov	d6, r8, r9
 8019372:	1ac3      	subs	r3, r0, r3
 8019374:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019378:	ee27 7b06 	vmul.f64	d7, d7, d6
 801937c:	ed92 6b00 	vldr	d6, [r2]
 8019380:	e7e4      	b.n	801934c <_strtod_l+0x3ec>
 8019382:	9907      	ldr	r1, [sp, #28]
 8019384:	3116      	adds	r1, #22
 8019386:	db0a      	blt.n	801939e <_strtod_l+0x43e>
 8019388:	4b54      	ldr	r3, [pc, #336]	; (80194dc <_strtod_l+0x57c>)
 801938a:	1b7d      	subs	r5, r7, r5
 801938c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8019390:	ed95 7b00 	vldr	d7, [r5]
 8019394:	ec49 8b16 	vmov	d6, r8, r9
 8019398:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801939c:	e7d8      	b.n	8019350 <_strtod_l+0x3f0>
 801939e:	9907      	ldr	r1, [sp, #28]
 80193a0:	1a9a      	subs	r2, r3, r2
 80193a2:	440a      	add	r2, r1
 80193a4:	2a00      	cmp	r2, #0
 80193a6:	dd6f      	ble.n	8019488 <_strtod_l+0x528>
 80193a8:	f012 000f 	ands.w	r0, r2, #15
 80193ac:	d00a      	beq.n	80193c4 <_strtod_l+0x464>
 80193ae:	494b      	ldr	r1, [pc, #300]	; (80194dc <_strtod_l+0x57c>)
 80193b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80193b4:	ed91 7b00 	vldr	d7, [r1]
 80193b8:	ec49 8b16 	vmov	d6, r8, r9
 80193bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80193c0:	ec59 8b17 	vmov	r8, r9, d7
 80193c4:	f032 020f 	bics.w	r2, r2, #15
 80193c8:	d04f      	beq.n	801946a <_strtod_l+0x50a>
 80193ca:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80193ce:	dd22      	ble.n	8019416 <_strtod_l+0x4b6>
 80193d0:	2500      	movs	r5, #0
 80193d2:	462e      	mov	r6, r5
 80193d4:	9506      	str	r5, [sp, #24]
 80193d6:	462f      	mov	r7, r5
 80193d8:	2322      	movs	r3, #34	; 0x22
 80193da:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80194e8 <_strtod_l+0x588>
 80193de:	6023      	str	r3, [r4, #0]
 80193e0:	f04f 0800 	mov.w	r8, #0
 80193e4:	9b06      	ldr	r3, [sp, #24]
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	f43f adfe 	beq.w	8018fe8 <_strtod_l+0x88>
 80193ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 80193ee:	4620      	mov	r0, r4
 80193f0:	f001 fdf4 	bl	801afdc <_Bfree>
 80193f4:	4639      	mov	r1, r7
 80193f6:	4620      	mov	r0, r4
 80193f8:	f001 fdf0 	bl	801afdc <_Bfree>
 80193fc:	4631      	mov	r1, r6
 80193fe:	4620      	mov	r0, r4
 8019400:	f001 fdec 	bl	801afdc <_Bfree>
 8019404:	9906      	ldr	r1, [sp, #24]
 8019406:	4620      	mov	r0, r4
 8019408:	f001 fde8 	bl	801afdc <_Bfree>
 801940c:	4629      	mov	r1, r5
 801940e:	4620      	mov	r0, r4
 8019410:	f001 fde4 	bl	801afdc <_Bfree>
 8019414:	e5e8      	b.n	8018fe8 <_strtod_l+0x88>
 8019416:	2000      	movs	r0, #0
 8019418:	ec49 8b17 	vmov	d7, r8, r9
 801941c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80194e0 <_strtod_l+0x580>
 8019420:	1112      	asrs	r2, r2, #4
 8019422:	4601      	mov	r1, r0
 8019424:	2a01      	cmp	r2, #1
 8019426:	dc23      	bgt.n	8019470 <_strtod_l+0x510>
 8019428:	b108      	cbz	r0, 801942e <_strtod_l+0x4ce>
 801942a:	ec59 8b17 	vmov	r8, r9, d7
 801942e:	4a2c      	ldr	r2, [pc, #176]	; (80194e0 <_strtod_l+0x580>)
 8019430:	482c      	ldr	r0, [pc, #176]	; (80194e4 <_strtod_l+0x584>)
 8019432:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019436:	ed92 7b00 	vldr	d7, [r2]
 801943a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801943e:	ec49 8b16 	vmov	d6, r8, r9
 8019442:	4a29      	ldr	r2, [pc, #164]	; (80194e8 <_strtod_l+0x588>)
 8019444:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019448:	ee17 1a90 	vmov	r1, s15
 801944c:	400a      	ands	r2, r1
 801944e:	4282      	cmp	r2, r0
 8019450:	ec59 8b17 	vmov	r8, r9, d7
 8019454:	d8bc      	bhi.n	80193d0 <_strtod_l+0x470>
 8019456:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801945a:	4282      	cmp	r2, r0
 801945c:	bf86      	itte	hi
 801945e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80194ec <_strtod_l+0x58c>
 8019462:	f04f 38ff 	movhi.w	r8, #4294967295
 8019466:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801946a:	2200      	movs	r2, #0
 801946c:	9204      	str	r2, [sp, #16]
 801946e:	e078      	b.n	8019562 <_strtod_l+0x602>
 8019470:	07d6      	lsls	r6, r2, #31
 8019472:	d504      	bpl.n	801947e <_strtod_l+0x51e>
 8019474:	ed9c 6b00 	vldr	d6, [ip]
 8019478:	2001      	movs	r0, #1
 801947a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801947e:	3101      	adds	r1, #1
 8019480:	1052      	asrs	r2, r2, #1
 8019482:	f10c 0c08 	add.w	ip, ip, #8
 8019486:	e7cd      	b.n	8019424 <_strtod_l+0x4c4>
 8019488:	d0ef      	beq.n	801946a <_strtod_l+0x50a>
 801948a:	4252      	negs	r2, r2
 801948c:	f012 000f 	ands.w	r0, r2, #15
 8019490:	d00a      	beq.n	80194a8 <_strtod_l+0x548>
 8019492:	4912      	ldr	r1, [pc, #72]	; (80194dc <_strtod_l+0x57c>)
 8019494:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019498:	ed91 7b00 	vldr	d7, [r1]
 801949c:	ec49 8b16 	vmov	d6, r8, r9
 80194a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80194a4:	ec59 8b17 	vmov	r8, r9, d7
 80194a8:	1112      	asrs	r2, r2, #4
 80194aa:	d0de      	beq.n	801946a <_strtod_l+0x50a>
 80194ac:	2a1f      	cmp	r2, #31
 80194ae:	dd1f      	ble.n	80194f0 <_strtod_l+0x590>
 80194b0:	2500      	movs	r5, #0
 80194b2:	462e      	mov	r6, r5
 80194b4:	9506      	str	r5, [sp, #24]
 80194b6:	462f      	mov	r7, r5
 80194b8:	2322      	movs	r3, #34	; 0x22
 80194ba:	f04f 0800 	mov.w	r8, #0
 80194be:	f04f 0900 	mov.w	r9, #0
 80194c2:	6023      	str	r3, [r4, #0]
 80194c4:	e78e      	b.n	80193e4 <_strtod_l+0x484>
 80194c6:	bf00      	nop
 80194c8:	0801ce35 	.word	0x0801ce35
 80194cc:	0801ce78 	.word	0x0801ce78
 80194d0:	0801ce2d 	.word	0x0801ce2d
 80194d4:	0801cfbc 	.word	0x0801cfbc
 80194d8:	0801d268 	.word	0x0801d268
 80194dc:	0801d148 	.word	0x0801d148
 80194e0:	0801d120 	.word	0x0801d120
 80194e4:	7ca00000 	.word	0x7ca00000
 80194e8:	7ff00000 	.word	0x7ff00000
 80194ec:	7fefffff 	.word	0x7fefffff
 80194f0:	f012 0110 	ands.w	r1, r2, #16
 80194f4:	bf18      	it	ne
 80194f6:	216a      	movne	r1, #106	; 0x6a
 80194f8:	9104      	str	r1, [sp, #16]
 80194fa:	ec49 8b17 	vmov	d7, r8, r9
 80194fe:	49be      	ldr	r1, [pc, #760]	; (80197f8 <_strtod_l+0x898>)
 8019500:	2000      	movs	r0, #0
 8019502:	07d6      	lsls	r6, r2, #31
 8019504:	d504      	bpl.n	8019510 <_strtod_l+0x5b0>
 8019506:	ed91 6b00 	vldr	d6, [r1]
 801950a:	2001      	movs	r0, #1
 801950c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019510:	1052      	asrs	r2, r2, #1
 8019512:	f101 0108 	add.w	r1, r1, #8
 8019516:	d1f4      	bne.n	8019502 <_strtod_l+0x5a2>
 8019518:	b108      	cbz	r0, 801951e <_strtod_l+0x5be>
 801951a:	ec59 8b17 	vmov	r8, r9, d7
 801951e:	9a04      	ldr	r2, [sp, #16]
 8019520:	b1c2      	cbz	r2, 8019554 <_strtod_l+0x5f4>
 8019522:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8019526:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801952a:	2a00      	cmp	r2, #0
 801952c:	4648      	mov	r0, r9
 801952e:	dd11      	ble.n	8019554 <_strtod_l+0x5f4>
 8019530:	2a1f      	cmp	r2, #31
 8019532:	f340 812e 	ble.w	8019792 <_strtod_l+0x832>
 8019536:	2a34      	cmp	r2, #52	; 0x34
 8019538:	bfde      	ittt	le
 801953a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801953e:	f04f 32ff 	movle.w	r2, #4294967295
 8019542:	fa02 f101 	lslle.w	r1, r2, r1
 8019546:	f04f 0800 	mov.w	r8, #0
 801954a:	bfcc      	ite	gt
 801954c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019550:	ea01 0900 	andle.w	r9, r1, r0
 8019554:	ec49 8b17 	vmov	d7, r8, r9
 8019558:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801955c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019560:	d0a6      	beq.n	80194b0 <_strtod_l+0x550>
 8019562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019564:	9200      	str	r2, [sp, #0]
 8019566:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019568:	9a06      	ldr	r2, [sp, #24]
 801956a:	4620      	mov	r0, r4
 801956c:	f001 fd9e 	bl	801b0ac <__s2b>
 8019570:	9006      	str	r0, [sp, #24]
 8019572:	2800      	cmp	r0, #0
 8019574:	f43f af2c 	beq.w	80193d0 <_strtod_l+0x470>
 8019578:	9b07      	ldr	r3, [sp, #28]
 801957a:	1b7d      	subs	r5, r7, r5
 801957c:	2b00      	cmp	r3, #0
 801957e:	bfb4      	ite	lt
 8019580:	462b      	movlt	r3, r5
 8019582:	2300      	movge	r3, #0
 8019584:	9309      	str	r3, [sp, #36]	; 0x24
 8019586:	9b07      	ldr	r3, [sp, #28]
 8019588:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80197d8 <_strtod_l+0x878>
 801958c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80197e0 <_strtod_l+0x880>
 8019590:	ed9f bb95 	vldr	d11, [pc, #596]	; 80197e8 <_strtod_l+0x888>
 8019594:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019598:	2500      	movs	r5, #0
 801959a:	930c      	str	r3, [sp, #48]	; 0x30
 801959c:	462e      	mov	r6, r5
 801959e:	9b06      	ldr	r3, [sp, #24]
 80195a0:	4620      	mov	r0, r4
 80195a2:	6859      	ldr	r1, [r3, #4]
 80195a4:	f001 fcda 	bl	801af5c <_Balloc>
 80195a8:	4607      	mov	r7, r0
 80195aa:	2800      	cmp	r0, #0
 80195ac:	f43f af14 	beq.w	80193d8 <_strtod_l+0x478>
 80195b0:	9b06      	ldr	r3, [sp, #24]
 80195b2:	691a      	ldr	r2, [r3, #16]
 80195b4:	3202      	adds	r2, #2
 80195b6:	f103 010c 	add.w	r1, r3, #12
 80195ba:	0092      	lsls	r2, r2, #2
 80195bc:	300c      	adds	r0, #12
 80195be:	f7fe fdeb 	bl	8018198 <memcpy>
 80195c2:	ec49 8b10 	vmov	d0, r8, r9
 80195c6:	aa14      	add	r2, sp, #80	; 0x50
 80195c8:	a913      	add	r1, sp, #76	; 0x4c
 80195ca:	4620      	mov	r0, r4
 80195cc:	f002 f8b4 	bl	801b738 <__d2b>
 80195d0:	ec49 8b18 	vmov	d8, r8, r9
 80195d4:	9012      	str	r0, [sp, #72]	; 0x48
 80195d6:	2800      	cmp	r0, #0
 80195d8:	f43f aefe 	beq.w	80193d8 <_strtod_l+0x478>
 80195dc:	2101      	movs	r1, #1
 80195de:	4620      	mov	r0, r4
 80195e0:	f001 fdfe 	bl	801b1e0 <__i2b>
 80195e4:	4606      	mov	r6, r0
 80195e6:	2800      	cmp	r0, #0
 80195e8:	f43f aef6 	beq.w	80193d8 <_strtod_l+0x478>
 80195ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80195ee:	9914      	ldr	r1, [sp, #80]	; 0x50
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	bfab      	itete	ge
 80195f4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80195f6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80195f8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80195fc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8019600:	bfac      	ite	ge
 8019602:	eb03 0b02 	addge.w	fp, r3, r2
 8019606:	eba2 0a03 	sublt.w	sl, r2, r3
 801960a:	9a04      	ldr	r2, [sp, #16]
 801960c:	1a9b      	subs	r3, r3, r2
 801960e:	440b      	add	r3, r1
 8019610:	4a7a      	ldr	r2, [pc, #488]	; (80197fc <_strtod_l+0x89c>)
 8019612:	3b01      	subs	r3, #1
 8019614:	4293      	cmp	r3, r2
 8019616:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801961a:	f280 80cd 	bge.w	80197b8 <_strtod_l+0x858>
 801961e:	1ad2      	subs	r2, r2, r3
 8019620:	2a1f      	cmp	r2, #31
 8019622:	eba1 0102 	sub.w	r1, r1, r2
 8019626:	f04f 0001 	mov.w	r0, #1
 801962a:	f300 80b9 	bgt.w	80197a0 <_strtod_l+0x840>
 801962e:	fa00 f302 	lsl.w	r3, r0, r2
 8019632:	930b      	str	r3, [sp, #44]	; 0x2c
 8019634:	2300      	movs	r3, #0
 8019636:	930a      	str	r3, [sp, #40]	; 0x28
 8019638:	eb0b 0301 	add.w	r3, fp, r1
 801963c:	9a04      	ldr	r2, [sp, #16]
 801963e:	459b      	cmp	fp, r3
 8019640:	448a      	add	sl, r1
 8019642:	4492      	add	sl, r2
 8019644:	465a      	mov	r2, fp
 8019646:	bfa8      	it	ge
 8019648:	461a      	movge	r2, r3
 801964a:	4552      	cmp	r2, sl
 801964c:	bfa8      	it	ge
 801964e:	4652      	movge	r2, sl
 8019650:	2a00      	cmp	r2, #0
 8019652:	bfc2      	ittt	gt
 8019654:	1a9b      	subgt	r3, r3, r2
 8019656:	ebaa 0a02 	subgt.w	sl, sl, r2
 801965a:	ebab 0b02 	subgt.w	fp, fp, r2
 801965e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019660:	2a00      	cmp	r2, #0
 8019662:	dd18      	ble.n	8019696 <_strtod_l+0x736>
 8019664:	4631      	mov	r1, r6
 8019666:	4620      	mov	r0, r4
 8019668:	930f      	str	r3, [sp, #60]	; 0x3c
 801966a:	f001 fe79 	bl	801b360 <__pow5mult>
 801966e:	4606      	mov	r6, r0
 8019670:	2800      	cmp	r0, #0
 8019672:	f43f aeb1 	beq.w	80193d8 <_strtod_l+0x478>
 8019676:	4601      	mov	r1, r0
 8019678:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801967a:	4620      	mov	r0, r4
 801967c:	f001 fdc6 	bl	801b20c <__multiply>
 8019680:	900e      	str	r0, [sp, #56]	; 0x38
 8019682:	2800      	cmp	r0, #0
 8019684:	f43f aea8 	beq.w	80193d8 <_strtod_l+0x478>
 8019688:	9912      	ldr	r1, [sp, #72]	; 0x48
 801968a:	4620      	mov	r0, r4
 801968c:	f001 fca6 	bl	801afdc <_Bfree>
 8019690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019694:	9212      	str	r2, [sp, #72]	; 0x48
 8019696:	2b00      	cmp	r3, #0
 8019698:	f300 8093 	bgt.w	80197c2 <_strtod_l+0x862>
 801969c:	9b07      	ldr	r3, [sp, #28]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	dd08      	ble.n	80196b4 <_strtod_l+0x754>
 80196a2:	4639      	mov	r1, r7
 80196a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80196a6:	4620      	mov	r0, r4
 80196a8:	f001 fe5a 	bl	801b360 <__pow5mult>
 80196ac:	4607      	mov	r7, r0
 80196ae:	2800      	cmp	r0, #0
 80196b0:	f43f ae92 	beq.w	80193d8 <_strtod_l+0x478>
 80196b4:	f1ba 0f00 	cmp.w	sl, #0
 80196b8:	dd08      	ble.n	80196cc <_strtod_l+0x76c>
 80196ba:	4639      	mov	r1, r7
 80196bc:	4652      	mov	r2, sl
 80196be:	4620      	mov	r0, r4
 80196c0:	f001 fea8 	bl	801b414 <__lshift>
 80196c4:	4607      	mov	r7, r0
 80196c6:	2800      	cmp	r0, #0
 80196c8:	f43f ae86 	beq.w	80193d8 <_strtod_l+0x478>
 80196cc:	f1bb 0f00 	cmp.w	fp, #0
 80196d0:	dd08      	ble.n	80196e4 <_strtod_l+0x784>
 80196d2:	4631      	mov	r1, r6
 80196d4:	465a      	mov	r2, fp
 80196d6:	4620      	mov	r0, r4
 80196d8:	f001 fe9c 	bl	801b414 <__lshift>
 80196dc:	4606      	mov	r6, r0
 80196de:	2800      	cmp	r0, #0
 80196e0:	f43f ae7a 	beq.w	80193d8 <_strtod_l+0x478>
 80196e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80196e6:	463a      	mov	r2, r7
 80196e8:	4620      	mov	r0, r4
 80196ea:	f001 ff1f 	bl	801b52c <__mdiff>
 80196ee:	4605      	mov	r5, r0
 80196f0:	2800      	cmp	r0, #0
 80196f2:	f43f ae71 	beq.w	80193d8 <_strtod_l+0x478>
 80196f6:	2300      	movs	r3, #0
 80196f8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80196fc:	60c3      	str	r3, [r0, #12]
 80196fe:	4631      	mov	r1, r6
 8019700:	f001 fef8 	bl	801b4f4 <__mcmp>
 8019704:	2800      	cmp	r0, #0
 8019706:	da7d      	bge.n	8019804 <_strtod_l+0x8a4>
 8019708:	ea5a 0308 	orrs.w	r3, sl, r8
 801970c:	f040 80a3 	bne.w	8019856 <_strtod_l+0x8f6>
 8019710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019714:	2b00      	cmp	r3, #0
 8019716:	f040 809e 	bne.w	8019856 <_strtod_l+0x8f6>
 801971a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801971e:	0d1b      	lsrs	r3, r3, #20
 8019720:	051b      	lsls	r3, r3, #20
 8019722:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019726:	f240 8096 	bls.w	8019856 <_strtod_l+0x8f6>
 801972a:	696b      	ldr	r3, [r5, #20]
 801972c:	b91b      	cbnz	r3, 8019736 <_strtod_l+0x7d6>
 801972e:	692b      	ldr	r3, [r5, #16]
 8019730:	2b01      	cmp	r3, #1
 8019732:	f340 8090 	ble.w	8019856 <_strtod_l+0x8f6>
 8019736:	4629      	mov	r1, r5
 8019738:	2201      	movs	r2, #1
 801973a:	4620      	mov	r0, r4
 801973c:	f001 fe6a 	bl	801b414 <__lshift>
 8019740:	4631      	mov	r1, r6
 8019742:	4605      	mov	r5, r0
 8019744:	f001 fed6 	bl	801b4f4 <__mcmp>
 8019748:	2800      	cmp	r0, #0
 801974a:	f340 8084 	ble.w	8019856 <_strtod_l+0x8f6>
 801974e:	9904      	ldr	r1, [sp, #16]
 8019750:	4a2b      	ldr	r2, [pc, #172]	; (8019800 <_strtod_l+0x8a0>)
 8019752:	464b      	mov	r3, r9
 8019754:	2900      	cmp	r1, #0
 8019756:	f000 809d 	beq.w	8019894 <_strtod_l+0x934>
 801975a:	ea02 0109 	and.w	r1, r2, r9
 801975e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019762:	f300 8097 	bgt.w	8019894 <_strtod_l+0x934>
 8019766:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801976a:	f77f aea5 	ble.w	80194b8 <_strtod_l+0x558>
 801976e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80197f0 <_strtod_l+0x890>
 8019772:	ec49 8b16 	vmov	d6, r8, r9
 8019776:	ee26 7b07 	vmul.f64	d7, d6, d7
 801977a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801977e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8019782:	4313      	orrs	r3, r2
 8019784:	bf08      	it	eq
 8019786:	2322      	moveq	r3, #34	; 0x22
 8019788:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801978c:	bf08      	it	eq
 801978e:	6023      	streq	r3, [r4, #0]
 8019790:	e62c      	b.n	80193ec <_strtod_l+0x48c>
 8019792:	f04f 31ff 	mov.w	r1, #4294967295
 8019796:	fa01 f202 	lsl.w	r2, r1, r2
 801979a:	ea02 0808 	and.w	r8, r2, r8
 801979e:	e6d9      	b.n	8019554 <_strtod_l+0x5f4>
 80197a0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80197a4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80197a8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80197ac:	33e2      	adds	r3, #226	; 0xe2
 80197ae:	fa00 f303 	lsl.w	r3, r0, r3
 80197b2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80197b6:	e73f      	b.n	8019638 <_strtod_l+0x6d8>
 80197b8:	2200      	movs	r2, #0
 80197ba:	2301      	movs	r3, #1
 80197bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80197c0:	e73a      	b.n	8019638 <_strtod_l+0x6d8>
 80197c2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80197c4:	461a      	mov	r2, r3
 80197c6:	4620      	mov	r0, r4
 80197c8:	f001 fe24 	bl	801b414 <__lshift>
 80197cc:	9012      	str	r0, [sp, #72]	; 0x48
 80197ce:	2800      	cmp	r0, #0
 80197d0:	f47f af64 	bne.w	801969c <_strtod_l+0x73c>
 80197d4:	e600      	b.n	80193d8 <_strtod_l+0x478>
 80197d6:	bf00      	nop
 80197d8:	94a03595 	.word	0x94a03595
 80197dc:	3fcfffff 	.word	0x3fcfffff
 80197e0:	94a03595 	.word	0x94a03595
 80197e4:	3fdfffff 	.word	0x3fdfffff
 80197e8:	35afe535 	.word	0x35afe535
 80197ec:	3fe00000 	.word	0x3fe00000
 80197f0:	00000000 	.word	0x00000000
 80197f4:	39500000 	.word	0x39500000
 80197f8:	0801ce90 	.word	0x0801ce90
 80197fc:	fffffc02 	.word	0xfffffc02
 8019800:	7ff00000 	.word	0x7ff00000
 8019804:	46cb      	mov	fp, r9
 8019806:	d15f      	bne.n	80198c8 <_strtod_l+0x968>
 8019808:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801980c:	f1ba 0f00 	cmp.w	sl, #0
 8019810:	d02a      	beq.n	8019868 <_strtod_l+0x908>
 8019812:	4aa7      	ldr	r2, [pc, #668]	; (8019ab0 <_strtod_l+0xb50>)
 8019814:	4293      	cmp	r3, r2
 8019816:	d12b      	bne.n	8019870 <_strtod_l+0x910>
 8019818:	9b04      	ldr	r3, [sp, #16]
 801981a:	4642      	mov	r2, r8
 801981c:	b1fb      	cbz	r3, 801985e <_strtod_l+0x8fe>
 801981e:	4ba5      	ldr	r3, [pc, #660]	; (8019ab4 <_strtod_l+0xb54>)
 8019820:	ea09 0303 	and.w	r3, r9, r3
 8019824:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019828:	f04f 31ff 	mov.w	r1, #4294967295
 801982c:	d81a      	bhi.n	8019864 <_strtod_l+0x904>
 801982e:	0d1b      	lsrs	r3, r3, #20
 8019830:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019834:	fa01 f303 	lsl.w	r3, r1, r3
 8019838:	429a      	cmp	r2, r3
 801983a:	d119      	bne.n	8019870 <_strtod_l+0x910>
 801983c:	4b9e      	ldr	r3, [pc, #632]	; (8019ab8 <_strtod_l+0xb58>)
 801983e:	459b      	cmp	fp, r3
 8019840:	d102      	bne.n	8019848 <_strtod_l+0x8e8>
 8019842:	3201      	adds	r2, #1
 8019844:	f43f adc8 	beq.w	80193d8 <_strtod_l+0x478>
 8019848:	4b9a      	ldr	r3, [pc, #616]	; (8019ab4 <_strtod_l+0xb54>)
 801984a:	ea0b 0303 	and.w	r3, fp, r3
 801984e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8019852:	f04f 0800 	mov.w	r8, #0
 8019856:	9b04      	ldr	r3, [sp, #16]
 8019858:	2b00      	cmp	r3, #0
 801985a:	d188      	bne.n	801976e <_strtod_l+0x80e>
 801985c:	e5c6      	b.n	80193ec <_strtod_l+0x48c>
 801985e:	f04f 33ff 	mov.w	r3, #4294967295
 8019862:	e7e9      	b.n	8019838 <_strtod_l+0x8d8>
 8019864:	460b      	mov	r3, r1
 8019866:	e7e7      	b.n	8019838 <_strtod_l+0x8d8>
 8019868:	ea53 0308 	orrs.w	r3, r3, r8
 801986c:	f43f af6f 	beq.w	801974e <_strtod_l+0x7ee>
 8019870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019872:	b1cb      	cbz	r3, 80198a8 <_strtod_l+0x948>
 8019874:	ea13 0f0b 	tst.w	r3, fp
 8019878:	d0ed      	beq.n	8019856 <_strtod_l+0x8f6>
 801987a:	9a04      	ldr	r2, [sp, #16]
 801987c:	4640      	mov	r0, r8
 801987e:	4649      	mov	r1, r9
 8019880:	f1ba 0f00 	cmp.w	sl, #0
 8019884:	d014      	beq.n	80198b0 <_strtod_l+0x950>
 8019886:	f7ff fb50 	bl	8018f2a <sulp>
 801988a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801988e:	ec59 8b17 	vmov	r8, r9, d7
 8019892:	e7e0      	b.n	8019856 <_strtod_l+0x8f6>
 8019894:	4013      	ands	r3, r2
 8019896:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801989a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801989e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80198a2:	f04f 38ff 	mov.w	r8, #4294967295
 80198a6:	e7d6      	b.n	8019856 <_strtod_l+0x8f6>
 80198a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198aa:	ea13 0f08 	tst.w	r3, r8
 80198ae:	e7e3      	b.n	8019878 <_strtod_l+0x918>
 80198b0:	f7ff fb3b 	bl	8018f2a <sulp>
 80198b4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80198b8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80198bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198c0:	ec59 8b10 	vmov	r8, r9, d0
 80198c4:	d1c7      	bne.n	8019856 <_strtod_l+0x8f6>
 80198c6:	e5f7      	b.n	80194b8 <_strtod_l+0x558>
 80198c8:	4631      	mov	r1, r6
 80198ca:	4628      	mov	r0, r5
 80198cc:	f001 ff90 	bl	801b7f0 <__ratio>
 80198d0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80198d4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80198d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198dc:	d865      	bhi.n	80199aa <_strtod_l+0xa4a>
 80198de:	f1ba 0f00 	cmp.w	sl, #0
 80198e2:	d042      	beq.n	801996a <_strtod_l+0xa0a>
 80198e4:	4b75      	ldr	r3, [pc, #468]	; (8019abc <_strtod_l+0xb5c>)
 80198e6:	2200      	movs	r2, #0
 80198e8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80198ec:	4871      	ldr	r0, [pc, #452]	; (8019ab4 <_strtod_l+0xb54>)
 80198ee:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8019ac8 <_strtod_l+0xb68>
 80198f2:	ea0b 0100 	and.w	r1, fp, r0
 80198f6:	4561      	cmp	r1, ip
 80198f8:	f040 808e 	bne.w	8019a18 <_strtod_l+0xab8>
 80198fc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8019900:	ec49 8b10 	vmov	d0, r8, r9
 8019904:	ec43 2b1c 	vmov	d12, r2, r3
 8019908:	910a      	str	r1, [sp, #40]	; 0x28
 801990a:	f001 fe99 	bl	801b640 <__ulp>
 801990e:	ec49 8b1e 	vmov	d14, r8, r9
 8019912:	4868      	ldr	r0, [pc, #416]	; (8019ab4 <_strtod_l+0xb54>)
 8019914:	eeac eb00 	vfma.f64	d14, d12, d0
 8019918:	ee1e 3a90 	vmov	r3, s29
 801991c:	4a68      	ldr	r2, [pc, #416]	; (8019ac0 <_strtod_l+0xb60>)
 801991e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019920:	4018      	ands	r0, r3
 8019922:	4290      	cmp	r0, r2
 8019924:	ec59 8b1e 	vmov	r8, r9, d14
 8019928:	d94e      	bls.n	80199c8 <_strtod_l+0xa68>
 801992a:	ee18 3a90 	vmov	r3, s17
 801992e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8019932:	4293      	cmp	r3, r2
 8019934:	d104      	bne.n	8019940 <_strtod_l+0x9e0>
 8019936:	ee18 3a10 	vmov	r3, s16
 801993a:	3301      	adds	r3, #1
 801993c:	f43f ad4c 	beq.w	80193d8 <_strtod_l+0x478>
 8019940:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8019ab8 <_strtod_l+0xb58>
 8019944:	f04f 38ff 	mov.w	r8, #4294967295
 8019948:	9912      	ldr	r1, [sp, #72]	; 0x48
 801994a:	4620      	mov	r0, r4
 801994c:	f001 fb46 	bl	801afdc <_Bfree>
 8019950:	4639      	mov	r1, r7
 8019952:	4620      	mov	r0, r4
 8019954:	f001 fb42 	bl	801afdc <_Bfree>
 8019958:	4631      	mov	r1, r6
 801995a:	4620      	mov	r0, r4
 801995c:	f001 fb3e 	bl	801afdc <_Bfree>
 8019960:	4629      	mov	r1, r5
 8019962:	4620      	mov	r0, r4
 8019964:	f001 fb3a 	bl	801afdc <_Bfree>
 8019968:	e619      	b.n	801959e <_strtod_l+0x63e>
 801996a:	f1b8 0f00 	cmp.w	r8, #0
 801996e:	d112      	bne.n	8019996 <_strtod_l+0xa36>
 8019970:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019974:	b9b3      	cbnz	r3, 80199a4 <_strtod_l+0xa44>
 8019976:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801997a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801997e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019982:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8019986:	bf58      	it	pl
 8019988:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801998c:	eeb1 7b4d 	vneg.f64	d7, d13
 8019990:	ec53 2b17 	vmov	r2, r3, d7
 8019994:	e7aa      	b.n	80198ec <_strtod_l+0x98c>
 8019996:	f1b8 0f01 	cmp.w	r8, #1
 801999a:	d103      	bne.n	80199a4 <_strtod_l+0xa44>
 801999c:	f1b9 0f00 	cmp.w	r9, #0
 80199a0:	f43f ad8a 	beq.w	80194b8 <_strtod_l+0x558>
 80199a4:	4b47      	ldr	r3, [pc, #284]	; (8019ac4 <_strtod_l+0xb64>)
 80199a6:	2200      	movs	r2, #0
 80199a8:	e79e      	b.n	80198e8 <_strtod_l+0x988>
 80199aa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80199ae:	ee20 db0d 	vmul.f64	d13, d0, d13
 80199b2:	f1ba 0f00 	cmp.w	sl, #0
 80199b6:	d104      	bne.n	80199c2 <_strtod_l+0xa62>
 80199b8:	eeb1 7b4d 	vneg.f64	d7, d13
 80199bc:	ec53 2b17 	vmov	r2, r3, d7
 80199c0:	e794      	b.n	80198ec <_strtod_l+0x98c>
 80199c2:	eeb0 7b4d 	vmov.f64	d7, d13
 80199c6:	e7f9      	b.n	80199bc <_strtod_l+0xa5c>
 80199c8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80199cc:	9b04      	ldr	r3, [sp, #16]
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d1ba      	bne.n	8019948 <_strtod_l+0x9e8>
 80199d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80199d6:	0d1b      	lsrs	r3, r3, #20
 80199d8:	051b      	lsls	r3, r3, #20
 80199da:	4299      	cmp	r1, r3
 80199dc:	d1b4      	bne.n	8019948 <_strtod_l+0x9e8>
 80199de:	ec51 0b1d 	vmov	r0, r1, d13
 80199e2:	f7e6 fec1 	bl	8000768 <__aeabi_d2lz>
 80199e6:	f7e6 fe79 	bl	80006dc <__aeabi_l2d>
 80199ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80199ee:	ec41 0b17 	vmov	d7, r0, r1
 80199f2:	ea43 0308 	orr.w	r3, r3, r8
 80199f6:	ea53 030a 	orrs.w	r3, r3, sl
 80199fa:	ee3d db47 	vsub.f64	d13, d13, d7
 80199fe:	d03c      	beq.n	8019a7a <_strtod_l+0xb1a>
 8019a00:	eeb4 dbca 	vcmpe.f64	d13, d10
 8019a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a08:	f53f acf0 	bmi.w	80193ec <_strtod_l+0x48c>
 8019a0c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8019a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a14:	dd98      	ble.n	8019948 <_strtod_l+0x9e8>
 8019a16:	e4e9      	b.n	80193ec <_strtod_l+0x48c>
 8019a18:	9804      	ldr	r0, [sp, #16]
 8019a1a:	b1f0      	cbz	r0, 8019a5a <_strtod_l+0xafa>
 8019a1c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8019a20:	d81b      	bhi.n	8019a5a <_strtod_l+0xafa>
 8019a22:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8019aa8 <_strtod_l+0xb48>
 8019a26:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8019a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a2e:	d811      	bhi.n	8019a54 <_strtod_l+0xaf4>
 8019a30:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8019a34:	ee1d 3a10 	vmov	r3, s26
 8019a38:	2b01      	cmp	r3, #1
 8019a3a:	bf38      	it	cc
 8019a3c:	2301      	movcc	r3, #1
 8019a3e:	ee0d 3a10 	vmov	s26, r3
 8019a42:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8019a46:	f1ba 0f00 	cmp.w	sl, #0
 8019a4a:	d113      	bne.n	8019a74 <_strtod_l+0xb14>
 8019a4c:	eeb1 7b4d 	vneg.f64	d7, d13
 8019a50:	ec53 2b17 	vmov	r2, r3, d7
 8019a54:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8019a58:	1a43      	subs	r3, r0, r1
 8019a5a:	eeb0 0b48 	vmov.f64	d0, d8
 8019a5e:	ec43 2b1c 	vmov	d12, r2, r3
 8019a62:	910a      	str	r1, [sp, #40]	; 0x28
 8019a64:	f001 fdec 	bl	801b640 <__ulp>
 8019a68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019a6a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8019a6e:	ec59 8b18 	vmov	r8, r9, d8
 8019a72:	e7ab      	b.n	80199cc <_strtod_l+0xa6c>
 8019a74:	eeb0 7b4d 	vmov.f64	d7, d13
 8019a78:	e7ea      	b.n	8019a50 <_strtod_l+0xaf0>
 8019a7a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8019a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a82:	f57f af61 	bpl.w	8019948 <_strtod_l+0x9e8>
 8019a86:	e4b1      	b.n	80193ec <_strtod_l+0x48c>
 8019a88:	2300      	movs	r3, #0
 8019a8a:	9308      	str	r3, [sp, #32]
 8019a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019a8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019a90:	6013      	str	r3, [r2, #0]
 8019a92:	f7ff baad 	b.w	8018ff0 <_strtod_l+0x90>
 8019a96:	2a65      	cmp	r2, #101	; 0x65
 8019a98:	f43f ab9f 	beq.w	80191da <_strtod_l+0x27a>
 8019a9c:	2a45      	cmp	r2, #69	; 0x45
 8019a9e:	f43f ab9c 	beq.w	80191da <_strtod_l+0x27a>
 8019aa2:	2101      	movs	r1, #1
 8019aa4:	f7ff bbd4 	b.w	8019250 <_strtod_l+0x2f0>
 8019aa8:	ffc00000 	.word	0xffc00000
 8019aac:	41dfffff 	.word	0x41dfffff
 8019ab0:	000fffff 	.word	0x000fffff
 8019ab4:	7ff00000 	.word	0x7ff00000
 8019ab8:	7fefffff 	.word	0x7fefffff
 8019abc:	3ff00000 	.word	0x3ff00000
 8019ac0:	7c9fffff 	.word	0x7c9fffff
 8019ac4:	bff00000 	.word	0xbff00000
 8019ac8:	7fe00000 	.word	0x7fe00000

08019acc <_strtod_r>:
 8019acc:	4b01      	ldr	r3, [pc, #4]	; (8019ad4 <_strtod_r+0x8>)
 8019ace:	f7ff ba47 	b.w	8018f60 <_strtod_l>
 8019ad2:	bf00      	nop
 8019ad4:	24000168 	.word	0x24000168

08019ad8 <_strtol_l.constprop.0>:
 8019ad8:	2b01      	cmp	r3, #1
 8019ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ade:	d001      	beq.n	8019ae4 <_strtol_l.constprop.0+0xc>
 8019ae0:	2b24      	cmp	r3, #36	; 0x24
 8019ae2:	d906      	bls.n	8019af2 <_strtol_l.constprop.0+0x1a>
 8019ae4:	f7fe fb2e 	bl	8018144 <__errno>
 8019ae8:	2316      	movs	r3, #22
 8019aea:	6003      	str	r3, [r0, #0]
 8019aec:	2000      	movs	r0, #0
 8019aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019af2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8019bd8 <_strtol_l.constprop.0+0x100>
 8019af6:	460d      	mov	r5, r1
 8019af8:	462e      	mov	r6, r5
 8019afa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019afe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8019b02:	f017 0708 	ands.w	r7, r7, #8
 8019b06:	d1f7      	bne.n	8019af8 <_strtol_l.constprop.0+0x20>
 8019b08:	2c2d      	cmp	r4, #45	; 0x2d
 8019b0a:	d132      	bne.n	8019b72 <_strtol_l.constprop.0+0x9a>
 8019b0c:	782c      	ldrb	r4, [r5, #0]
 8019b0e:	2701      	movs	r7, #1
 8019b10:	1cb5      	adds	r5, r6, #2
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d05b      	beq.n	8019bce <_strtol_l.constprop.0+0xf6>
 8019b16:	2b10      	cmp	r3, #16
 8019b18:	d109      	bne.n	8019b2e <_strtol_l.constprop.0+0x56>
 8019b1a:	2c30      	cmp	r4, #48	; 0x30
 8019b1c:	d107      	bne.n	8019b2e <_strtol_l.constprop.0+0x56>
 8019b1e:	782c      	ldrb	r4, [r5, #0]
 8019b20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019b24:	2c58      	cmp	r4, #88	; 0x58
 8019b26:	d14d      	bne.n	8019bc4 <_strtol_l.constprop.0+0xec>
 8019b28:	786c      	ldrb	r4, [r5, #1]
 8019b2a:	2310      	movs	r3, #16
 8019b2c:	3502      	adds	r5, #2
 8019b2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019b32:	f108 38ff 	add.w	r8, r8, #4294967295
 8019b36:	f04f 0c00 	mov.w	ip, #0
 8019b3a:	fbb8 f9f3 	udiv	r9, r8, r3
 8019b3e:	4666      	mov	r6, ip
 8019b40:	fb03 8a19 	mls	sl, r3, r9, r8
 8019b44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8019b48:	f1be 0f09 	cmp.w	lr, #9
 8019b4c:	d816      	bhi.n	8019b7c <_strtol_l.constprop.0+0xa4>
 8019b4e:	4674      	mov	r4, lr
 8019b50:	42a3      	cmp	r3, r4
 8019b52:	dd24      	ble.n	8019b9e <_strtol_l.constprop.0+0xc6>
 8019b54:	f1bc 0f00 	cmp.w	ip, #0
 8019b58:	db1e      	blt.n	8019b98 <_strtol_l.constprop.0+0xc0>
 8019b5a:	45b1      	cmp	r9, r6
 8019b5c:	d31c      	bcc.n	8019b98 <_strtol_l.constprop.0+0xc0>
 8019b5e:	d101      	bne.n	8019b64 <_strtol_l.constprop.0+0x8c>
 8019b60:	45a2      	cmp	sl, r4
 8019b62:	db19      	blt.n	8019b98 <_strtol_l.constprop.0+0xc0>
 8019b64:	fb06 4603 	mla	r6, r6, r3, r4
 8019b68:	f04f 0c01 	mov.w	ip, #1
 8019b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019b70:	e7e8      	b.n	8019b44 <_strtol_l.constprop.0+0x6c>
 8019b72:	2c2b      	cmp	r4, #43	; 0x2b
 8019b74:	bf04      	itt	eq
 8019b76:	782c      	ldrbeq	r4, [r5, #0]
 8019b78:	1cb5      	addeq	r5, r6, #2
 8019b7a:	e7ca      	b.n	8019b12 <_strtol_l.constprop.0+0x3a>
 8019b7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8019b80:	f1be 0f19 	cmp.w	lr, #25
 8019b84:	d801      	bhi.n	8019b8a <_strtol_l.constprop.0+0xb2>
 8019b86:	3c37      	subs	r4, #55	; 0x37
 8019b88:	e7e2      	b.n	8019b50 <_strtol_l.constprop.0+0x78>
 8019b8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8019b8e:	f1be 0f19 	cmp.w	lr, #25
 8019b92:	d804      	bhi.n	8019b9e <_strtol_l.constprop.0+0xc6>
 8019b94:	3c57      	subs	r4, #87	; 0x57
 8019b96:	e7db      	b.n	8019b50 <_strtol_l.constprop.0+0x78>
 8019b98:	f04f 3cff 	mov.w	ip, #4294967295
 8019b9c:	e7e6      	b.n	8019b6c <_strtol_l.constprop.0+0x94>
 8019b9e:	f1bc 0f00 	cmp.w	ip, #0
 8019ba2:	da05      	bge.n	8019bb0 <_strtol_l.constprop.0+0xd8>
 8019ba4:	2322      	movs	r3, #34	; 0x22
 8019ba6:	6003      	str	r3, [r0, #0]
 8019ba8:	4646      	mov	r6, r8
 8019baa:	b942      	cbnz	r2, 8019bbe <_strtol_l.constprop.0+0xe6>
 8019bac:	4630      	mov	r0, r6
 8019bae:	e79e      	b.n	8019aee <_strtol_l.constprop.0+0x16>
 8019bb0:	b107      	cbz	r7, 8019bb4 <_strtol_l.constprop.0+0xdc>
 8019bb2:	4276      	negs	r6, r6
 8019bb4:	2a00      	cmp	r2, #0
 8019bb6:	d0f9      	beq.n	8019bac <_strtol_l.constprop.0+0xd4>
 8019bb8:	f1bc 0f00 	cmp.w	ip, #0
 8019bbc:	d000      	beq.n	8019bc0 <_strtol_l.constprop.0+0xe8>
 8019bbe:	1e69      	subs	r1, r5, #1
 8019bc0:	6011      	str	r1, [r2, #0]
 8019bc2:	e7f3      	b.n	8019bac <_strtol_l.constprop.0+0xd4>
 8019bc4:	2430      	movs	r4, #48	; 0x30
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d1b1      	bne.n	8019b2e <_strtol_l.constprop.0+0x56>
 8019bca:	2308      	movs	r3, #8
 8019bcc:	e7af      	b.n	8019b2e <_strtol_l.constprop.0+0x56>
 8019bce:	2c30      	cmp	r4, #48	; 0x30
 8019bd0:	d0a5      	beq.n	8019b1e <_strtol_l.constprop.0+0x46>
 8019bd2:	230a      	movs	r3, #10
 8019bd4:	e7ab      	b.n	8019b2e <_strtol_l.constprop.0+0x56>
 8019bd6:	bf00      	nop
 8019bd8:	0801ceb9 	.word	0x0801ceb9

08019bdc <_strtol_r>:
 8019bdc:	f7ff bf7c 	b.w	8019ad8 <_strtol_l.constprop.0>

08019be0 <_write_r>:
 8019be0:	b538      	push	{r3, r4, r5, lr}
 8019be2:	4d07      	ldr	r5, [pc, #28]	; (8019c00 <_write_r+0x20>)
 8019be4:	4604      	mov	r4, r0
 8019be6:	4608      	mov	r0, r1
 8019be8:	4611      	mov	r1, r2
 8019bea:	2200      	movs	r2, #0
 8019bec:	602a      	str	r2, [r5, #0]
 8019bee:	461a      	mov	r2, r3
 8019bf0:	f7e8 ff2b 	bl	8002a4a <_write>
 8019bf4:	1c43      	adds	r3, r0, #1
 8019bf6:	d102      	bne.n	8019bfe <_write_r+0x1e>
 8019bf8:	682b      	ldr	r3, [r5, #0]
 8019bfa:	b103      	cbz	r3, 8019bfe <_write_r+0x1e>
 8019bfc:	6023      	str	r3, [r4, #0]
 8019bfe:	bd38      	pop	{r3, r4, r5, pc}
 8019c00:	24002b70 	.word	0x24002b70

08019c04 <_close_r>:
 8019c04:	b538      	push	{r3, r4, r5, lr}
 8019c06:	4d06      	ldr	r5, [pc, #24]	; (8019c20 <_close_r+0x1c>)
 8019c08:	2300      	movs	r3, #0
 8019c0a:	4604      	mov	r4, r0
 8019c0c:	4608      	mov	r0, r1
 8019c0e:	602b      	str	r3, [r5, #0]
 8019c10:	f7e8 ff37 	bl	8002a82 <_close>
 8019c14:	1c43      	adds	r3, r0, #1
 8019c16:	d102      	bne.n	8019c1e <_close_r+0x1a>
 8019c18:	682b      	ldr	r3, [r5, #0]
 8019c1a:	b103      	cbz	r3, 8019c1e <_close_r+0x1a>
 8019c1c:	6023      	str	r3, [r4, #0]
 8019c1e:	bd38      	pop	{r3, r4, r5, pc}
 8019c20:	24002b70 	.word	0x24002b70

08019c24 <quorem>:
 8019c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c28:	6903      	ldr	r3, [r0, #16]
 8019c2a:	690c      	ldr	r4, [r1, #16]
 8019c2c:	42a3      	cmp	r3, r4
 8019c2e:	4607      	mov	r7, r0
 8019c30:	f2c0 8081 	blt.w	8019d36 <quorem+0x112>
 8019c34:	3c01      	subs	r4, #1
 8019c36:	f101 0814 	add.w	r8, r1, #20
 8019c3a:	f100 0514 	add.w	r5, r0, #20
 8019c3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019c42:	9301      	str	r3, [sp, #4]
 8019c44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019c48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019c4c:	3301      	adds	r3, #1
 8019c4e:	429a      	cmp	r2, r3
 8019c50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019c54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019c58:	fbb2 f6f3 	udiv	r6, r2, r3
 8019c5c:	d331      	bcc.n	8019cc2 <quorem+0x9e>
 8019c5e:	f04f 0e00 	mov.w	lr, #0
 8019c62:	4640      	mov	r0, r8
 8019c64:	46ac      	mov	ip, r5
 8019c66:	46f2      	mov	sl, lr
 8019c68:	f850 2b04 	ldr.w	r2, [r0], #4
 8019c6c:	b293      	uxth	r3, r2
 8019c6e:	fb06 e303 	mla	r3, r6, r3, lr
 8019c72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8019c76:	b29b      	uxth	r3, r3
 8019c78:	ebaa 0303 	sub.w	r3, sl, r3
 8019c7c:	f8dc a000 	ldr.w	sl, [ip]
 8019c80:	0c12      	lsrs	r2, r2, #16
 8019c82:	fa13 f38a 	uxtah	r3, r3, sl
 8019c86:	fb06 e202 	mla	r2, r6, r2, lr
 8019c8a:	9300      	str	r3, [sp, #0]
 8019c8c:	9b00      	ldr	r3, [sp, #0]
 8019c8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019c92:	b292      	uxth	r2, r2
 8019c94:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8019c98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019c9c:	f8bd 3000 	ldrh.w	r3, [sp]
 8019ca0:	4581      	cmp	r9, r0
 8019ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019ca6:	f84c 3b04 	str.w	r3, [ip], #4
 8019caa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019cae:	d2db      	bcs.n	8019c68 <quorem+0x44>
 8019cb0:	f855 300b 	ldr.w	r3, [r5, fp]
 8019cb4:	b92b      	cbnz	r3, 8019cc2 <quorem+0x9e>
 8019cb6:	9b01      	ldr	r3, [sp, #4]
 8019cb8:	3b04      	subs	r3, #4
 8019cba:	429d      	cmp	r5, r3
 8019cbc:	461a      	mov	r2, r3
 8019cbe:	d32e      	bcc.n	8019d1e <quorem+0xfa>
 8019cc0:	613c      	str	r4, [r7, #16]
 8019cc2:	4638      	mov	r0, r7
 8019cc4:	f001 fc16 	bl	801b4f4 <__mcmp>
 8019cc8:	2800      	cmp	r0, #0
 8019cca:	db24      	blt.n	8019d16 <quorem+0xf2>
 8019ccc:	3601      	adds	r6, #1
 8019cce:	4628      	mov	r0, r5
 8019cd0:	f04f 0c00 	mov.w	ip, #0
 8019cd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8019cd8:	f8d0 e000 	ldr.w	lr, [r0]
 8019cdc:	b293      	uxth	r3, r2
 8019cde:	ebac 0303 	sub.w	r3, ip, r3
 8019ce2:	0c12      	lsrs	r2, r2, #16
 8019ce4:	fa13 f38e 	uxtah	r3, r3, lr
 8019ce8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8019cec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019cf0:	b29b      	uxth	r3, r3
 8019cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019cf6:	45c1      	cmp	r9, r8
 8019cf8:	f840 3b04 	str.w	r3, [r0], #4
 8019cfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019d00:	d2e8      	bcs.n	8019cd4 <quorem+0xb0>
 8019d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019d0a:	b922      	cbnz	r2, 8019d16 <quorem+0xf2>
 8019d0c:	3b04      	subs	r3, #4
 8019d0e:	429d      	cmp	r5, r3
 8019d10:	461a      	mov	r2, r3
 8019d12:	d30a      	bcc.n	8019d2a <quorem+0x106>
 8019d14:	613c      	str	r4, [r7, #16]
 8019d16:	4630      	mov	r0, r6
 8019d18:	b003      	add	sp, #12
 8019d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d1e:	6812      	ldr	r2, [r2, #0]
 8019d20:	3b04      	subs	r3, #4
 8019d22:	2a00      	cmp	r2, #0
 8019d24:	d1cc      	bne.n	8019cc0 <quorem+0x9c>
 8019d26:	3c01      	subs	r4, #1
 8019d28:	e7c7      	b.n	8019cba <quorem+0x96>
 8019d2a:	6812      	ldr	r2, [r2, #0]
 8019d2c:	3b04      	subs	r3, #4
 8019d2e:	2a00      	cmp	r2, #0
 8019d30:	d1f0      	bne.n	8019d14 <quorem+0xf0>
 8019d32:	3c01      	subs	r4, #1
 8019d34:	e7eb      	b.n	8019d0e <quorem+0xea>
 8019d36:	2000      	movs	r0, #0
 8019d38:	e7ee      	b.n	8019d18 <quorem+0xf4>
 8019d3a:	0000      	movs	r0, r0
 8019d3c:	0000      	movs	r0, r0
	...

08019d40 <_dtoa_r>:
 8019d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d44:	ed2d 8b02 	vpush	{d8}
 8019d48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019d4a:	b091      	sub	sp, #68	; 0x44
 8019d4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019d50:	ec59 8b10 	vmov	r8, r9, d0
 8019d54:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019d56:	9106      	str	r1, [sp, #24]
 8019d58:	4606      	mov	r6, r0
 8019d5a:	9208      	str	r2, [sp, #32]
 8019d5c:	930c      	str	r3, [sp, #48]	; 0x30
 8019d5e:	b975      	cbnz	r5, 8019d7e <_dtoa_r+0x3e>
 8019d60:	2010      	movs	r0, #16
 8019d62:	f001 f8e1 	bl	801af28 <malloc>
 8019d66:	4602      	mov	r2, r0
 8019d68:	6270      	str	r0, [r6, #36]	; 0x24
 8019d6a:	b920      	cbnz	r0, 8019d76 <_dtoa_r+0x36>
 8019d6c:	4baa      	ldr	r3, [pc, #680]	; (801a018 <_dtoa_r+0x2d8>)
 8019d6e:	21ea      	movs	r1, #234	; 0xea
 8019d70:	48aa      	ldr	r0, [pc, #680]	; (801a01c <_dtoa_r+0x2dc>)
 8019d72:	f002 f84f 	bl	801be14 <__assert_func>
 8019d76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019d7a:	6005      	str	r5, [r0, #0]
 8019d7c:	60c5      	str	r5, [r0, #12]
 8019d7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019d80:	6819      	ldr	r1, [r3, #0]
 8019d82:	b151      	cbz	r1, 8019d9a <_dtoa_r+0x5a>
 8019d84:	685a      	ldr	r2, [r3, #4]
 8019d86:	604a      	str	r2, [r1, #4]
 8019d88:	2301      	movs	r3, #1
 8019d8a:	4093      	lsls	r3, r2
 8019d8c:	608b      	str	r3, [r1, #8]
 8019d8e:	4630      	mov	r0, r6
 8019d90:	f001 f924 	bl	801afdc <_Bfree>
 8019d94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019d96:	2200      	movs	r2, #0
 8019d98:	601a      	str	r2, [r3, #0]
 8019d9a:	f1b9 0300 	subs.w	r3, r9, #0
 8019d9e:	bfbb      	ittet	lt
 8019da0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019da4:	9303      	strlt	r3, [sp, #12]
 8019da6:	2300      	movge	r3, #0
 8019da8:	2201      	movlt	r2, #1
 8019daa:	bfac      	ite	ge
 8019dac:	6023      	strge	r3, [r4, #0]
 8019dae:	6022      	strlt	r2, [r4, #0]
 8019db0:	4b9b      	ldr	r3, [pc, #620]	; (801a020 <_dtoa_r+0x2e0>)
 8019db2:	9c03      	ldr	r4, [sp, #12]
 8019db4:	43a3      	bics	r3, r4
 8019db6:	d11c      	bne.n	8019df2 <_dtoa_r+0xb2>
 8019db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019dba:	f242 730f 	movw	r3, #9999	; 0x270f
 8019dbe:	6013      	str	r3, [r2, #0]
 8019dc0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8019dc4:	ea53 0308 	orrs.w	r3, r3, r8
 8019dc8:	f000 84fd 	beq.w	801a7c6 <_dtoa_r+0xa86>
 8019dcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019dce:	b963      	cbnz	r3, 8019dea <_dtoa_r+0xaa>
 8019dd0:	4b94      	ldr	r3, [pc, #592]	; (801a024 <_dtoa_r+0x2e4>)
 8019dd2:	e01f      	b.n	8019e14 <_dtoa_r+0xd4>
 8019dd4:	4b94      	ldr	r3, [pc, #592]	; (801a028 <_dtoa_r+0x2e8>)
 8019dd6:	9301      	str	r3, [sp, #4]
 8019dd8:	3308      	adds	r3, #8
 8019dda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019ddc:	6013      	str	r3, [r2, #0]
 8019dde:	9801      	ldr	r0, [sp, #4]
 8019de0:	b011      	add	sp, #68	; 0x44
 8019de2:	ecbd 8b02 	vpop	{d8}
 8019de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dea:	4b8e      	ldr	r3, [pc, #568]	; (801a024 <_dtoa_r+0x2e4>)
 8019dec:	9301      	str	r3, [sp, #4]
 8019dee:	3303      	adds	r3, #3
 8019df0:	e7f3      	b.n	8019dda <_dtoa_r+0x9a>
 8019df2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019df6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dfe:	d10b      	bne.n	8019e18 <_dtoa_r+0xd8>
 8019e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019e02:	2301      	movs	r3, #1
 8019e04:	6013      	str	r3, [r2, #0]
 8019e06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	f000 84d9 	beq.w	801a7c0 <_dtoa_r+0xa80>
 8019e0e:	4887      	ldr	r0, [pc, #540]	; (801a02c <_dtoa_r+0x2ec>)
 8019e10:	6018      	str	r0, [r3, #0]
 8019e12:	1e43      	subs	r3, r0, #1
 8019e14:	9301      	str	r3, [sp, #4]
 8019e16:	e7e2      	b.n	8019dde <_dtoa_r+0x9e>
 8019e18:	a90f      	add	r1, sp, #60	; 0x3c
 8019e1a:	aa0e      	add	r2, sp, #56	; 0x38
 8019e1c:	4630      	mov	r0, r6
 8019e1e:	eeb0 0b48 	vmov.f64	d0, d8
 8019e22:	f001 fc89 	bl	801b738 <__d2b>
 8019e26:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8019e2a:	4605      	mov	r5, r0
 8019e2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8019e2e:	2900      	cmp	r1, #0
 8019e30:	d046      	beq.n	8019ec0 <_dtoa_r+0x180>
 8019e32:	ee18 4a90 	vmov	r4, s17
 8019e36:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019e3a:	ec53 2b18 	vmov	r2, r3, d8
 8019e3e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8019e42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019e46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8019e4a:	2400      	movs	r4, #0
 8019e4c:	ec43 2b16 	vmov	d6, r2, r3
 8019e50:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8019e54:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801a000 <_dtoa_r+0x2c0>
 8019e58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8019e5c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801a008 <_dtoa_r+0x2c8>
 8019e60:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019e64:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801a010 <_dtoa_r+0x2d0>
 8019e68:	ee07 1a90 	vmov	s15, r1
 8019e6c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019e70:	eeb0 7b46 	vmov.f64	d7, d6
 8019e74:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019e78:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019e7c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e84:	ee16 ba90 	vmov	fp, s13
 8019e88:	940a      	str	r4, [sp, #40]	; 0x28
 8019e8a:	d508      	bpl.n	8019e9e <_dtoa_r+0x15e>
 8019e8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019e90:	eeb4 6b47 	vcmp.f64	d6, d7
 8019e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e98:	bf18      	it	ne
 8019e9a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8019e9e:	f1bb 0f16 	cmp.w	fp, #22
 8019ea2:	d82f      	bhi.n	8019f04 <_dtoa_r+0x1c4>
 8019ea4:	4b62      	ldr	r3, [pc, #392]	; (801a030 <_dtoa_r+0x2f0>)
 8019ea6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019eaa:	ed93 7b00 	vldr	d7, [r3]
 8019eae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eb6:	d501      	bpl.n	8019ebc <_dtoa_r+0x17c>
 8019eb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	e022      	b.n	8019f06 <_dtoa_r+0x1c6>
 8019ec0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019ec2:	4401      	add	r1, r0
 8019ec4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8019ec8:	2b20      	cmp	r3, #32
 8019eca:	bfc1      	itttt	gt
 8019ecc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8019ed0:	fa04 f303 	lslgt.w	r3, r4, r3
 8019ed4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8019ed8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8019edc:	bfd6      	itet	le
 8019ede:	f1c3 0320 	rsble	r3, r3, #32
 8019ee2:	ea43 0808 	orrgt.w	r8, r3, r8
 8019ee6:	fa08 f803 	lslle.w	r8, r8, r3
 8019eea:	ee07 8a90 	vmov	s15, r8
 8019eee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019ef2:	3901      	subs	r1, #1
 8019ef4:	ee17 4a90 	vmov	r4, s15
 8019ef8:	ec53 2b17 	vmov	r2, r3, d7
 8019efc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8019f00:	2401      	movs	r4, #1
 8019f02:	e7a3      	b.n	8019e4c <_dtoa_r+0x10c>
 8019f04:	2301      	movs	r3, #1
 8019f06:	930b      	str	r3, [sp, #44]	; 0x2c
 8019f08:	1a43      	subs	r3, r0, r1
 8019f0a:	1e5a      	subs	r2, r3, #1
 8019f0c:	bf45      	ittet	mi
 8019f0e:	f1c3 0301 	rsbmi	r3, r3, #1
 8019f12:	9304      	strmi	r3, [sp, #16]
 8019f14:	2300      	movpl	r3, #0
 8019f16:	2300      	movmi	r3, #0
 8019f18:	9205      	str	r2, [sp, #20]
 8019f1a:	bf54      	ite	pl
 8019f1c:	9304      	strpl	r3, [sp, #16]
 8019f1e:	9305      	strmi	r3, [sp, #20]
 8019f20:	f1bb 0f00 	cmp.w	fp, #0
 8019f24:	db18      	blt.n	8019f58 <_dtoa_r+0x218>
 8019f26:	9b05      	ldr	r3, [sp, #20]
 8019f28:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019f2c:	445b      	add	r3, fp
 8019f2e:	9305      	str	r3, [sp, #20]
 8019f30:	2300      	movs	r3, #0
 8019f32:	9a06      	ldr	r2, [sp, #24]
 8019f34:	2a09      	cmp	r2, #9
 8019f36:	d849      	bhi.n	8019fcc <_dtoa_r+0x28c>
 8019f38:	2a05      	cmp	r2, #5
 8019f3a:	bfc4      	itt	gt
 8019f3c:	3a04      	subgt	r2, #4
 8019f3e:	9206      	strgt	r2, [sp, #24]
 8019f40:	9a06      	ldr	r2, [sp, #24]
 8019f42:	f1a2 0202 	sub.w	r2, r2, #2
 8019f46:	bfcc      	ite	gt
 8019f48:	2400      	movgt	r4, #0
 8019f4a:	2401      	movle	r4, #1
 8019f4c:	2a03      	cmp	r2, #3
 8019f4e:	d848      	bhi.n	8019fe2 <_dtoa_r+0x2a2>
 8019f50:	e8df f002 	tbb	[pc, r2]
 8019f54:	3a2c2e0b 	.word	0x3a2c2e0b
 8019f58:	9b04      	ldr	r3, [sp, #16]
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	eba3 030b 	sub.w	r3, r3, fp
 8019f60:	9304      	str	r3, [sp, #16]
 8019f62:	9209      	str	r2, [sp, #36]	; 0x24
 8019f64:	f1cb 0300 	rsb	r3, fp, #0
 8019f68:	e7e3      	b.n	8019f32 <_dtoa_r+0x1f2>
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	9207      	str	r2, [sp, #28]
 8019f6e:	9a08      	ldr	r2, [sp, #32]
 8019f70:	2a00      	cmp	r2, #0
 8019f72:	dc39      	bgt.n	8019fe8 <_dtoa_r+0x2a8>
 8019f74:	f04f 0a01 	mov.w	sl, #1
 8019f78:	46d1      	mov	r9, sl
 8019f7a:	4652      	mov	r2, sl
 8019f7c:	f8cd a020 	str.w	sl, [sp, #32]
 8019f80:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8019f82:	2100      	movs	r1, #0
 8019f84:	6079      	str	r1, [r7, #4]
 8019f86:	2004      	movs	r0, #4
 8019f88:	f100 0c14 	add.w	ip, r0, #20
 8019f8c:	4594      	cmp	ip, r2
 8019f8e:	6879      	ldr	r1, [r7, #4]
 8019f90:	d92f      	bls.n	8019ff2 <_dtoa_r+0x2b2>
 8019f92:	4630      	mov	r0, r6
 8019f94:	930d      	str	r3, [sp, #52]	; 0x34
 8019f96:	f000 ffe1 	bl	801af5c <_Balloc>
 8019f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019f9c:	9001      	str	r0, [sp, #4]
 8019f9e:	4602      	mov	r2, r0
 8019fa0:	2800      	cmp	r0, #0
 8019fa2:	d149      	bne.n	801a038 <_dtoa_r+0x2f8>
 8019fa4:	4b23      	ldr	r3, [pc, #140]	; (801a034 <_dtoa_r+0x2f4>)
 8019fa6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8019faa:	e6e1      	b.n	8019d70 <_dtoa_r+0x30>
 8019fac:	2201      	movs	r2, #1
 8019fae:	e7dd      	b.n	8019f6c <_dtoa_r+0x22c>
 8019fb0:	2200      	movs	r2, #0
 8019fb2:	9207      	str	r2, [sp, #28]
 8019fb4:	9a08      	ldr	r2, [sp, #32]
 8019fb6:	eb0b 0a02 	add.w	sl, fp, r2
 8019fba:	f10a 0901 	add.w	r9, sl, #1
 8019fbe:	464a      	mov	r2, r9
 8019fc0:	2a01      	cmp	r2, #1
 8019fc2:	bfb8      	it	lt
 8019fc4:	2201      	movlt	r2, #1
 8019fc6:	e7db      	b.n	8019f80 <_dtoa_r+0x240>
 8019fc8:	2201      	movs	r2, #1
 8019fca:	e7f2      	b.n	8019fb2 <_dtoa_r+0x272>
 8019fcc:	2401      	movs	r4, #1
 8019fce:	2200      	movs	r2, #0
 8019fd0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8019fd4:	f04f 3aff 	mov.w	sl, #4294967295
 8019fd8:	2100      	movs	r1, #0
 8019fda:	46d1      	mov	r9, sl
 8019fdc:	2212      	movs	r2, #18
 8019fde:	9108      	str	r1, [sp, #32]
 8019fe0:	e7ce      	b.n	8019f80 <_dtoa_r+0x240>
 8019fe2:	2201      	movs	r2, #1
 8019fe4:	9207      	str	r2, [sp, #28]
 8019fe6:	e7f5      	b.n	8019fd4 <_dtoa_r+0x294>
 8019fe8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019fec:	46d1      	mov	r9, sl
 8019fee:	4652      	mov	r2, sl
 8019ff0:	e7c6      	b.n	8019f80 <_dtoa_r+0x240>
 8019ff2:	3101      	adds	r1, #1
 8019ff4:	6079      	str	r1, [r7, #4]
 8019ff6:	0040      	lsls	r0, r0, #1
 8019ff8:	e7c6      	b.n	8019f88 <_dtoa_r+0x248>
 8019ffa:	bf00      	nop
 8019ffc:	f3af 8000 	nop.w
 801a000:	636f4361 	.word	0x636f4361
 801a004:	3fd287a7 	.word	0x3fd287a7
 801a008:	8b60c8b3 	.word	0x8b60c8b3
 801a00c:	3fc68a28 	.word	0x3fc68a28
 801a010:	509f79fb 	.word	0x509f79fb
 801a014:	3fd34413 	.word	0x3fd34413
 801a018:	0801cfc6 	.word	0x0801cfc6
 801a01c:	0801cfdd 	.word	0x0801cfdd
 801a020:	7ff00000 	.word	0x7ff00000
 801a024:	0801cfc2 	.word	0x0801cfc2
 801a028:	0801cfb9 	.word	0x0801cfb9
 801a02c:	0801ce39 	.word	0x0801ce39
 801a030:	0801d148 	.word	0x0801d148
 801a034:	0801d038 	.word	0x0801d038
 801a038:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801a03a:	9901      	ldr	r1, [sp, #4]
 801a03c:	6011      	str	r1, [r2, #0]
 801a03e:	f1b9 0f0e 	cmp.w	r9, #14
 801a042:	d86c      	bhi.n	801a11e <_dtoa_r+0x3de>
 801a044:	2c00      	cmp	r4, #0
 801a046:	d06a      	beq.n	801a11e <_dtoa_r+0x3de>
 801a048:	f1bb 0f00 	cmp.w	fp, #0
 801a04c:	f340 80a0 	ble.w	801a190 <_dtoa_r+0x450>
 801a050:	49c1      	ldr	r1, [pc, #772]	; (801a358 <_dtoa_r+0x618>)
 801a052:	f00b 020f 	and.w	r2, fp, #15
 801a056:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801a05a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a05e:	ed92 7b00 	vldr	d7, [r2]
 801a062:	ea4f 112b 	mov.w	r1, fp, asr #4
 801a066:	f000 8087 	beq.w	801a178 <_dtoa_r+0x438>
 801a06a:	4abc      	ldr	r2, [pc, #752]	; (801a35c <_dtoa_r+0x61c>)
 801a06c:	ed92 6b08 	vldr	d6, [r2, #32]
 801a070:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a074:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a078:	f001 010f 	and.w	r1, r1, #15
 801a07c:	2203      	movs	r2, #3
 801a07e:	48b7      	ldr	r0, [pc, #732]	; (801a35c <_dtoa_r+0x61c>)
 801a080:	2900      	cmp	r1, #0
 801a082:	d17b      	bne.n	801a17c <_dtoa_r+0x43c>
 801a084:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a088:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a08c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a092:	2900      	cmp	r1, #0
 801a094:	f000 80a2 	beq.w	801a1dc <_dtoa_r+0x49c>
 801a098:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a09c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a0a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0a8:	f140 8098 	bpl.w	801a1dc <_dtoa_r+0x49c>
 801a0ac:	f1b9 0f00 	cmp.w	r9, #0
 801a0b0:	f000 8094 	beq.w	801a1dc <_dtoa_r+0x49c>
 801a0b4:	f1ba 0f00 	cmp.w	sl, #0
 801a0b8:	dd2f      	ble.n	801a11a <_dtoa_r+0x3da>
 801a0ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a0be:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a0c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a0c6:	f10b 37ff 	add.w	r7, fp, #4294967295
 801a0ca:	3201      	adds	r2, #1
 801a0cc:	4650      	mov	r0, sl
 801a0ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a0d2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a0d6:	ee07 2a90 	vmov	s15, r2
 801a0da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a0de:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a0e2:	ee15 4a90 	vmov	r4, s11
 801a0e6:	ec52 1b15 	vmov	r1, r2, d5
 801a0ea:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801a0ee:	2800      	cmp	r0, #0
 801a0f0:	d177      	bne.n	801a1e2 <_dtoa_r+0x4a2>
 801a0f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a0f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a0fa:	ec42 1b17 	vmov	d7, r1, r2
 801a0fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a106:	f300 8263 	bgt.w	801a5d0 <_dtoa_r+0x890>
 801a10a:	eeb1 7b47 	vneg.f64	d7, d7
 801a10e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a116:	f100 8258 	bmi.w	801a5ca <_dtoa_r+0x88a>
 801a11a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a11e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a120:	2a00      	cmp	r2, #0
 801a122:	f2c0 811d 	blt.w	801a360 <_dtoa_r+0x620>
 801a126:	f1bb 0f0e 	cmp.w	fp, #14
 801a12a:	f300 8119 	bgt.w	801a360 <_dtoa_r+0x620>
 801a12e:	4b8a      	ldr	r3, [pc, #552]	; (801a358 <_dtoa_r+0x618>)
 801a130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a134:	ed93 6b00 	vldr	d6, [r3]
 801a138:	9b08      	ldr	r3, [sp, #32]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	f280 80b7 	bge.w	801a2ae <_dtoa_r+0x56e>
 801a140:	f1b9 0f00 	cmp.w	r9, #0
 801a144:	f300 80b3 	bgt.w	801a2ae <_dtoa_r+0x56e>
 801a148:	f040 823f 	bne.w	801a5ca <_dtoa_r+0x88a>
 801a14c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a150:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a154:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a158:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a160:	464c      	mov	r4, r9
 801a162:	464f      	mov	r7, r9
 801a164:	f280 8215 	bge.w	801a592 <_dtoa_r+0x852>
 801a168:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a16c:	2331      	movs	r3, #49	; 0x31
 801a16e:	f808 3b01 	strb.w	r3, [r8], #1
 801a172:	f10b 0b01 	add.w	fp, fp, #1
 801a176:	e211      	b.n	801a59c <_dtoa_r+0x85c>
 801a178:	2202      	movs	r2, #2
 801a17a:	e780      	b.n	801a07e <_dtoa_r+0x33e>
 801a17c:	07cc      	lsls	r4, r1, #31
 801a17e:	d504      	bpl.n	801a18a <_dtoa_r+0x44a>
 801a180:	ed90 6b00 	vldr	d6, [r0]
 801a184:	3201      	adds	r2, #1
 801a186:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a18a:	1049      	asrs	r1, r1, #1
 801a18c:	3008      	adds	r0, #8
 801a18e:	e777      	b.n	801a080 <_dtoa_r+0x340>
 801a190:	d022      	beq.n	801a1d8 <_dtoa_r+0x498>
 801a192:	f1cb 0100 	rsb	r1, fp, #0
 801a196:	4a70      	ldr	r2, [pc, #448]	; (801a358 <_dtoa_r+0x618>)
 801a198:	f001 000f 	and.w	r0, r1, #15
 801a19c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a1a0:	ed92 7b00 	vldr	d7, [r2]
 801a1a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a1a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a1ac:	486b      	ldr	r0, [pc, #428]	; (801a35c <_dtoa_r+0x61c>)
 801a1ae:	1109      	asrs	r1, r1, #4
 801a1b0:	2400      	movs	r4, #0
 801a1b2:	2202      	movs	r2, #2
 801a1b4:	b929      	cbnz	r1, 801a1c2 <_dtoa_r+0x482>
 801a1b6:	2c00      	cmp	r4, #0
 801a1b8:	f43f af6a 	beq.w	801a090 <_dtoa_r+0x350>
 801a1bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a1c0:	e766      	b.n	801a090 <_dtoa_r+0x350>
 801a1c2:	07cf      	lsls	r7, r1, #31
 801a1c4:	d505      	bpl.n	801a1d2 <_dtoa_r+0x492>
 801a1c6:	ed90 6b00 	vldr	d6, [r0]
 801a1ca:	3201      	adds	r2, #1
 801a1cc:	2401      	movs	r4, #1
 801a1ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a1d2:	1049      	asrs	r1, r1, #1
 801a1d4:	3008      	adds	r0, #8
 801a1d6:	e7ed      	b.n	801a1b4 <_dtoa_r+0x474>
 801a1d8:	2202      	movs	r2, #2
 801a1da:	e759      	b.n	801a090 <_dtoa_r+0x350>
 801a1dc:	465f      	mov	r7, fp
 801a1de:	4648      	mov	r0, r9
 801a1e0:	e775      	b.n	801a0ce <_dtoa_r+0x38e>
 801a1e2:	ec42 1b17 	vmov	d7, r1, r2
 801a1e6:	4a5c      	ldr	r2, [pc, #368]	; (801a358 <_dtoa_r+0x618>)
 801a1e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a1ec:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a1f0:	9a01      	ldr	r2, [sp, #4]
 801a1f2:	1814      	adds	r4, r2, r0
 801a1f4:	9a07      	ldr	r2, [sp, #28]
 801a1f6:	b352      	cbz	r2, 801a24e <_dtoa_r+0x50e>
 801a1f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a1fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a200:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a204:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a208:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a20c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a210:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a214:	ee14 2a90 	vmov	r2, s9
 801a218:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a21c:	3230      	adds	r2, #48	; 0x30
 801a21e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a222:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a22a:	f808 2b01 	strb.w	r2, [r8], #1
 801a22e:	d439      	bmi.n	801a2a4 <_dtoa_r+0x564>
 801a230:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a234:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a23c:	d472      	bmi.n	801a324 <_dtoa_r+0x5e4>
 801a23e:	45a0      	cmp	r8, r4
 801a240:	f43f af6b 	beq.w	801a11a <_dtoa_r+0x3da>
 801a244:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a248:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a24c:	e7e0      	b.n	801a210 <_dtoa_r+0x4d0>
 801a24e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a252:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a256:	4621      	mov	r1, r4
 801a258:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a25c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a260:	ee14 2a90 	vmov	r2, s9
 801a264:	3230      	adds	r2, #48	; 0x30
 801a266:	f808 2b01 	strb.w	r2, [r8], #1
 801a26a:	45a0      	cmp	r8, r4
 801a26c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a270:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a274:	d118      	bne.n	801a2a8 <_dtoa_r+0x568>
 801a276:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a27a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a27e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a286:	dc4d      	bgt.n	801a324 <_dtoa_r+0x5e4>
 801a288:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a28c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a294:	f57f af41 	bpl.w	801a11a <_dtoa_r+0x3da>
 801a298:	4688      	mov	r8, r1
 801a29a:	3901      	subs	r1, #1
 801a29c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a2a0:	2b30      	cmp	r3, #48	; 0x30
 801a2a2:	d0f9      	beq.n	801a298 <_dtoa_r+0x558>
 801a2a4:	46bb      	mov	fp, r7
 801a2a6:	e02a      	b.n	801a2fe <_dtoa_r+0x5be>
 801a2a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a2ac:	e7d6      	b.n	801a25c <_dtoa_r+0x51c>
 801a2ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a2b2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a2b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a2ba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a2be:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a2c2:	ee15 3a10 	vmov	r3, s10
 801a2c6:	3330      	adds	r3, #48	; 0x30
 801a2c8:	f808 3b01 	strb.w	r3, [r8], #1
 801a2cc:	9b01      	ldr	r3, [sp, #4]
 801a2ce:	eba8 0303 	sub.w	r3, r8, r3
 801a2d2:	4599      	cmp	r9, r3
 801a2d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a2d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a2dc:	d133      	bne.n	801a346 <_dtoa_r+0x606>
 801a2de:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a2e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2ea:	dc1a      	bgt.n	801a322 <_dtoa_r+0x5e2>
 801a2ec:	eeb4 7b46 	vcmp.f64	d7, d6
 801a2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2f4:	d103      	bne.n	801a2fe <_dtoa_r+0x5be>
 801a2f6:	ee15 3a10 	vmov	r3, s10
 801a2fa:	07d9      	lsls	r1, r3, #31
 801a2fc:	d411      	bmi.n	801a322 <_dtoa_r+0x5e2>
 801a2fe:	4629      	mov	r1, r5
 801a300:	4630      	mov	r0, r6
 801a302:	f000 fe6b 	bl	801afdc <_Bfree>
 801a306:	2300      	movs	r3, #0
 801a308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a30a:	f888 3000 	strb.w	r3, [r8]
 801a30e:	f10b 0301 	add.w	r3, fp, #1
 801a312:	6013      	str	r3, [r2, #0]
 801a314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a316:	2b00      	cmp	r3, #0
 801a318:	f43f ad61 	beq.w	8019dde <_dtoa_r+0x9e>
 801a31c:	f8c3 8000 	str.w	r8, [r3]
 801a320:	e55d      	b.n	8019dde <_dtoa_r+0x9e>
 801a322:	465f      	mov	r7, fp
 801a324:	4643      	mov	r3, r8
 801a326:	4698      	mov	r8, r3
 801a328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a32c:	2a39      	cmp	r2, #57	; 0x39
 801a32e:	d106      	bne.n	801a33e <_dtoa_r+0x5fe>
 801a330:	9a01      	ldr	r2, [sp, #4]
 801a332:	429a      	cmp	r2, r3
 801a334:	d1f7      	bne.n	801a326 <_dtoa_r+0x5e6>
 801a336:	9901      	ldr	r1, [sp, #4]
 801a338:	2230      	movs	r2, #48	; 0x30
 801a33a:	3701      	adds	r7, #1
 801a33c:	700a      	strb	r2, [r1, #0]
 801a33e:	781a      	ldrb	r2, [r3, #0]
 801a340:	3201      	adds	r2, #1
 801a342:	701a      	strb	r2, [r3, #0]
 801a344:	e7ae      	b.n	801a2a4 <_dtoa_r+0x564>
 801a346:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a34a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a352:	d1b2      	bne.n	801a2ba <_dtoa_r+0x57a>
 801a354:	e7d3      	b.n	801a2fe <_dtoa_r+0x5be>
 801a356:	bf00      	nop
 801a358:	0801d148 	.word	0x0801d148
 801a35c:	0801d120 	.word	0x0801d120
 801a360:	9907      	ldr	r1, [sp, #28]
 801a362:	2900      	cmp	r1, #0
 801a364:	f000 80d0 	beq.w	801a508 <_dtoa_r+0x7c8>
 801a368:	9906      	ldr	r1, [sp, #24]
 801a36a:	2901      	cmp	r1, #1
 801a36c:	f300 80b4 	bgt.w	801a4d8 <_dtoa_r+0x798>
 801a370:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a372:	2900      	cmp	r1, #0
 801a374:	f000 80ac 	beq.w	801a4d0 <_dtoa_r+0x790>
 801a378:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a37c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a380:	461c      	mov	r4, r3
 801a382:	930a      	str	r3, [sp, #40]	; 0x28
 801a384:	9b04      	ldr	r3, [sp, #16]
 801a386:	4413      	add	r3, r2
 801a388:	9304      	str	r3, [sp, #16]
 801a38a:	9b05      	ldr	r3, [sp, #20]
 801a38c:	2101      	movs	r1, #1
 801a38e:	4413      	add	r3, r2
 801a390:	4630      	mov	r0, r6
 801a392:	9305      	str	r3, [sp, #20]
 801a394:	f000 ff24 	bl	801b1e0 <__i2b>
 801a398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a39a:	4607      	mov	r7, r0
 801a39c:	f1b8 0f00 	cmp.w	r8, #0
 801a3a0:	dd0d      	ble.n	801a3be <_dtoa_r+0x67e>
 801a3a2:	9a05      	ldr	r2, [sp, #20]
 801a3a4:	2a00      	cmp	r2, #0
 801a3a6:	dd0a      	ble.n	801a3be <_dtoa_r+0x67e>
 801a3a8:	4542      	cmp	r2, r8
 801a3aa:	9904      	ldr	r1, [sp, #16]
 801a3ac:	bfa8      	it	ge
 801a3ae:	4642      	movge	r2, r8
 801a3b0:	1a89      	subs	r1, r1, r2
 801a3b2:	9104      	str	r1, [sp, #16]
 801a3b4:	9905      	ldr	r1, [sp, #20]
 801a3b6:	eba8 0802 	sub.w	r8, r8, r2
 801a3ba:	1a8a      	subs	r2, r1, r2
 801a3bc:	9205      	str	r2, [sp, #20]
 801a3be:	b303      	cbz	r3, 801a402 <_dtoa_r+0x6c2>
 801a3c0:	9a07      	ldr	r2, [sp, #28]
 801a3c2:	2a00      	cmp	r2, #0
 801a3c4:	f000 80a5 	beq.w	801a512 <_dtoa_r+0x7d2>
 801a3c8:	2c00      	cmp	r4, #0
 801a3ca:	dd13      	ble.n	801a3f4 <_dtoa_r+0x6b4>
 801a3cc:	4639      	mov	r1, r7
 801a3ce:	4622      	mov	r2, r4
 801a3d0:	4630      	mov	r0, r6
 801a3d2:	930d      	str	r3, [sp, #52]	; 0x34
 801a3d4:	f000 ffc4 	bl	801b360 <__pow5mult>
 801a3d8:	462a      	mov	r2, r5
 801a3da:	4601      	mov	r1, r0
 801a3dc:	4607      	mov	r7, r0
 801a3de:	4630      	mov	r0, r6
 801a3e0:	f000 ff14 	bl	801b20c <__multiply>
 801a3e4:	4629      	mov	r1, r5
 801a3e6:	900a      	str	r0, [sp, #40]	; 0x28
 801a3e8:	4630      	mov	r0, r6
 801a3ea:	f000 fdf7 	bl	801afdc <_Bfree>
 801a3ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a3f2:	4615      	mov	r5, r2
 801a3f4:	1b1a      	subs	r2, r3, r4
 801a3f6:	d004      	beq.n	801a402 <_dtoa_r+0x6c2>
 801a3f8:	4629      	mov	r1, r5
 801a3fa:	4630      	mov	r0, r6
 801a3fc:	f000 ffb0 	bl	801b360 <__pow5mult>
 801a400:	4605      	mov	r5, r0
 801a402:	2101      	movs	r1, #1
 801a404:	4630      	mov	r0, r6
 801a406:	f000 feeb 	bl	801b1e0 <__i2b>
 801a40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	4604      	mov	r4, r0
 801a410:	f340 8081 	ble.w	801a516 <_dtoa_r+0x7d6>
 801a414:	461a      	mov	r2, r3
 801a416:	4601      	mov	r1, r0
 801a418:	4630      	mov	r0, r6
 801a41a:	f000 ffa1 	bl	801b360 <__pow5mult>
 801a41e:	9b06      	ldr	r3, [sp, #24]
 801a420:	2b01      	cmp	r3, #1
 801a422:	4604      	mov	r4, r0
 801a424:	dd7a      	ble.n	801a51c <_dtoa_r+0x7dc>
 801a426:	2300      	movs	r3, #0
 801a428:	930a      	str	r3, [sp, #40]	; 0x28
 801a42a:	6922      	ldr	r2, [r4, #16]
 801a42c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a430:	6910      	ldr	r0, [r2, #16]
 801a432:	f000 fe85 	bl	801b140 <__hi0bits>
 801a436:	f1c0 0020 	rsb	r0, r0, #32
 801a43a:	9b05      	ldr	r3, [sp, #20]
 801a43c:	4418      	add	r0, r3
 801a43e:	f010 001f 	ands.w	r0, r0, #31
 801a442:	f000 808c 	beq.w	801a55e <_dtoa_r+0x81e>
 801a446:	f1c0 0220 	rsb	r2, r0, #32
 801a44a:	2a04      	cmp	r2, #4
 801a44c:	f340 8085 	ble.w	801a55a <_dtoa_r+0x81a>
 801a450:	f1c0 001c 	rsb	r0, r0, #28
 801a454:	9b04      	ldr	r3, [sp, #16]
 801a456:	4403      	add	r3, r0
 801a458:	9304      	str	r3, [sp, #16]
 801a45a:	9b05      	ldr	r3, [sp, #20]
 801a45c:	4403      	add	r3, r0
 801a45e:	4480      	add	r8, r0
 801a460:	9305      	str	r3, [sp, #20]
 801a462:	9b04      	ldr	r3, [sp, #16]
 801a464:	2b00      	cmp	r3, #0
 801a466:	dd05      	ble.n	801a474 <_dtoa_r+0x734>
 801a468:	4629      	mov	r1, r5
 801a46a:	461a      	mov	r2, r3
 801a46c:	4630      	mov	r0, r6
 801a46e:	f000 ffd1 	bl	801b414 <__lshift>
 801a472:	4605      	mov	r5, r0
 801a474:	9b05      	ldr	r3, [sp, #20]
 801a476:	2b00      	cmp	r3, #0
 801a478:	dd05      	ble.n	801a486 <_dtoa_r+0x746>
 801a47a:	4621      	mov	r1, r4
 801a47c:	461a      	mov	r2, r3
 801a47e:	4630      	mov	r0, r6
 801a480:	f000 ffc8 	bl	801b414 <__lshift>
 801a484:	4604      	mov	r4, r0
 801a486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d06a      	beq.n	801a562 <_dtoa_r+0x822>
 801a48c:	4621      	mov	r1, r4
 801a48e:	4628      	mov	r0, r5
 801a490:	f001 f830 	bl	801b4f4 <__mcmp>
 801a494:	2800      	cmp	r0, #0
 801a496:	da64      	bge.n	801a562 <_dtoa_r+0x822>
 801a498:	2300      	movs	r3, #0
 801a49a:	4629      	mov	r1, r5
 801a49c:	220a      	movs	r2, #10
 801a49e:	4630      	mov	r0, r6
 801a4a0:	f000 fdbe 	bl	801b020 <__multadd>
 801a4a4:	9b07      	ldr	r3, [sp, #28]
 801a4a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a4aa:	4605      	mov	r5, r0
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	f000 8191 	beq.w	801a7d4 <_dtoa_r+0xa94>
 801a4b2:	4639      	mov	r1, r7
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	220a      	movs	r2, #10
 801a4b8:	4630      	mov	r0, r6
 801a4ba:	f000 fdb1 	bl	801b020 <__multadd>
 801a4be:	f1ba 0f00 	cmp.w	sl, #0
 801a4c2:	4607      	mov	r7, r0
 801a4c4:	f300 808d 	bgt.w	801a5e2 <_dtoa_r+0x8a2>
 801a4c8:	9b06      	ldr	r3, [sp, #24]
 801a4ca:	2b02      	cmp	r3, #2
 801a4cc:	dc50      	bgt.n	801a570 <_dtoa_r+0x830>
 801a4ce:	e088      	b.n	801a5e2 <_dtoa_r+0x8a2>
 801a4d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a4d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a4d6:	e751      	b.n	801a37c <_dtoa_r+0x63c>
 801a4d8:	f109 34ff 	add.w	r4, r9, #4294967295
 801a4dc:	42a3      	cmp	r3, r4
 801a4de:	bfbf      	itttt	lt
 801a4e0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801a4e2:	1ae3      	sublt	r3, r4, r3
 801a4e4:	18d2      	addlt	r2, r2, r3
 801a4e6:	9209      	strlt	r2, [sp, #36]	; 0x24
 801a4e8:	bfb6      	itet	lt
 801a4ea:	4623      	movlt	r3, r4
 801a4ec:	1b1c      	subge	r4, r3, r4
 801a4ee:	2400      	movlt	r4, #0
 801a4f0:	f1b9 0f00 	cmp.w	r9, #0
 801a4f4:	bfb5      	itete	lt
 801a4f6:	9a04      	ldrlt	r2, [sp, #16]
 801a4f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801a4fc:	eba2 0809 	sublt.w	r8, r2, r9
 801a500:	464a      	movge	r2, r9
 801a502:	bfb8      	it	lt
 801a504:	2200      	movlt	r2, #0
 801a506:	e73c      	b.n	801a382 <_dtoa_r+0x642>
 801a508:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a50c:	9f07      	ldr	r7, [sp, #28]
 801a50e:	461c      	mov	r4, r3
 801a510:	e744      	b.n	801a39c <_dtoa_r+0x65c>
 801a512:	461a      	mov	r2, r3
 801a514:	e770      	b.n	801a3f8 <_dtoa_r+0x6b8>
 801a516:	9b06      	ldr	r3, [sp, #24]
 801a518:	2b01      	cmp	r3, #1
 801a51a:	dc18      	bgt.n	801a54e <_dtoa_r+0x80e>
 801a51c:	9b02      	ldr	r3, [sp, #8]
 801a51e:	b9b3      	cbnz	r3, 801a54e <_dtoa_r+0x80e>
 801a520:	9b03      	ldr	r3, [sp, #12]
 801a522:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a526:	b9a2      	cbnz	r2, 801a552 <_dtoa_r+0x812>
 801a528:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a52c:	0d12      	lsrs	r2, r2, #20
 801a52e:	0512      	lsls	r2, r2, #20
 801a530:	b18a      	cbz	r2, 801a556 <_dtoa_r+0x816>
 801a532:	9b04      	ldr	r3, [sp, #16]
 801a534:	3301      	adds	r3, #1
 801a536:	9304      	str	r3, [sp, #16]
 801a538:	9b05      	ldr	r3, [sp, #20]
 801a53a:	3301      	adds	r3, #1
 801a53c:	9305      	str	r3, [sp, #20]
 801a53e:	2301      	movs	r3, #1
 801a540:	930a      	str	r3, [sp, #40]	; 0x28
 801a542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a544:	2b00      	cmp	r3, #0
 801a546:	f47f af70 	bne.w	801a42a <_dtoa_r+0x6ea>
 801a54a:	2001      	movs	r0, #1
 801a54c:	e775      	b.n	801a43a <_dtoa_r+0x6fa>
 801a54e:	2300      	movs	r3, #0
 801a550:	e7f6      	b.n	801a540 <_dtoa_r+0x800>
 801a552:	9b02      	ldr	r3, [sp, #8]
 801a554:	e7f4      	b.n	801a540 <_dtoa_r+0x800>
 801a556:	920a      	str	r2, [sp, #40]	; 0x28
 801a558:	e7f3      	b.n	801a542 <_dtoa_r+0x802>
 801a55a:	d082      	beq.n	801a462 <_dtoa_r+0x722>
 801a55c:	4610      	mov	r0, r2
 801a55e:	301c      	adds	r0, #28
 801a560:	e778      	b.n	801a454 <_dtoa_r+0x714>
 801a562:	f1b9 0f00 	cmp.w	r9, #0
 801a566:	dc37      	bgt.n	801a5d8 <_dtoa_r+0x898>
 801a568:	9b06      	ldr	r3, [sp, #24]
 801a56a:	2b02      	cmp	r3, #2
 801a56c:	dd34      	ble.n	801a5d8 <_dtoa_r+0x898>
 801a56e:	46ca      	mov	sl, r9
 801a570:	f1ba 0f00 	cmp.w	sl, #0
 801a574:	d10d      	bne.n	801a592 <_dtoa_r+0x852>
 801a576:	4621      	mov	r1, r4
 801a578:	4653      	mov	r3, sl
 801a57a:	2205      	movs	r2, #5
 801a57c:	4630      	mov	r0, r6
 801a57e:	f000 fd4f 	bl	801b020 <__multadd>
 801a582:	4601      	mov	r1, r0
 801a584:	4604      	mov	r4, r0
 801a586:	4628      	mov	r0, r5
 801a588:	f000 ffb4 	bl	801b4f4 <__mcmp>
 801a58c:	2800      	cmp	r0, #0
 801a58e:	f73f adeb 	bgt.w	801a168 <_dtoa_r+0x428>
 801a592:	9b08      	ldr	r3, [sp, #32]
 801a594:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a598:	ea6f 0b03 	mvn.w	fp, r3
 801a59c:	f04f 0900 	mov.w	r9, #0
 801a5a0:	4621      	mov	r1, r4
 801a5a2:	4630      	mov	r0, r6
 801a5a4:	f000 fd1a 	bl	801afdc <_Bfree>
 801a5a8:	2f00      	cmp	r7, #0
 801a5aa:	f43f aea8 	beq.w	801a2fe <_dtoa_r+0x5be>
 801a5ae:	f1b9 0f00 	cmp.w	r9, #0
 801a5b2:	d005      	beq.n	801a5c0 <_dtoa_r+0x880>
 801a5b4:	45b9      	cmp	r9, r7
 801a5b6:	d003      	beq.n	801a5c0 <_dtoa_r+0x880>
 801a5b8:	4649      	mov	r1, r9
 801a5ba:	4630      	mov	r0, r6
 801a5bc:	f000 fd0e 	bl	801afdc <_Bfree>
 801a5c0:	4639      	mov	r1, r7
 801a5c2:	4630      	mov	r0, r6
 801a5c4:	f000 fd0a 	bl	801afdc <_Bfree>
 801a5c8:	e699      	b.n	801a2fe <_dtoa_r+0x5be>
 801a5ca:	2400      	movs	r4, #0
 801a5cc:	4627      	mov	r7, r4
 801a5ce:	e7e0      	b.n	801a592 <_dtoa_r+0x852>
 801a5d0:	46bb      	mov	fp, r7
 801a5d2:	4604      	mov	r4, r0
 801a5d4:	4607      	mov	r7, r0
 801a5d6:	e5c7      	b.n	801a168 <_dtoa_r+0x428>
 801a5d8:	9b07      	ldr	r3, [sp, #28]
 801a5da:	46ca      	mov	sl, r9
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	f000 8100 	beq.w	801a7e2 <_dtoa_r+0xaa2>
 801a5e2:	f1b8 0f00 	cmp.w	r8, #0
 801a5e6:	dd05      	ble.n	801a5f4 <_dtoa_r+0x8b4>
 801a5e8:	4639      	mov	r1, r7
 801a5ea:	4642      	mov	r2, r8
 801a5ec:	4630      	mov	r0, r6
 801a5ee:	f000 ff11 	bl	801b414 <__lshift>
 801a5f2:	4607      	mov	r7, r0
 801a5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d05d      	beq.n	801a6b6 <_dtoa_r+0x976>
 801a5fa:	6879      	ldr	r1, [r7, #4]
 801a5fc:	4630      	mov	r0, r6
 801a5fe:	f000 fcad 	bl	801af5c <_Balloc>
 801a602:	4680      	mov	r8, r0
 801a604:	b928      	cbnz	r0, 801a612 <_dtoa_r+0x8d2>
 801a606:	4b82      	ldr	r3, [pc, #520]	; (801a810 <_dtoa_r+0xad0>)
 801a608:	4602      	mov	r2, r0
 801a60a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801a60e:	f7ff bbaf 	b.w	8019d70 <_dtoa_r+0x30>
 801a612:	693a      	ldr	r2, [r7, #16]
 801a614:	3202      	adds	r2, #2
 801a616:	0092      	lsls	r2, r2, #2
 801a618:	f107 010c 	add.w	r1, r7, #12
 801a61c:	300c      	adds	r0, #12
 801a61e:	f7fd fdbb 	bl	8018198 <memcpy>
 801a622:	2201      	movs	r2, #1
 801a624:	4641      	mov	r1, r8
 801a626:	4630      	mov	r0, r6
 801a628:	f000 fef4 	bl	801b414 <__lshift>
 801a62c:	9b01      	ldr	r3, [sp, #4]
 801a62e:	3301      	adds	r3, #1
 801a630:	9304      	str	r3, [sp, #16]
 801a632:	9b01      	ldr	r3, [sp, #4]
 801a634:	4453      	add	r3, sl
 801a636:	9308      	str	r3, [sp, #32]
 801a638:	9b02      	ldr	r3, [sp, #8]
 801a63a:	f003 0301 	and.w	r3, r3, #1
 801a63e:	46b9      	mov	r9, r7
 801a640:	9307      	str	r3, [sp, #28]
 801a642:	4607      	mov	r7, r0
 801a644:	9b04      	ldr	r3, [sp, #16]
 801a646:	4621      	mov	r1, r4
 801a648:	3b01      	subs	r3, #1
 801a64a:	4628      	mov	r0, r5
 801a64c:	9302      	str	r3, [sp, #8]
 801a64e:	f7ff fae9 	bl	8019c24 <quorem>
 801a652:	4603      	mov	r3, r0
 801a654:	3330      	adds	r3, #48	; 0x30
 801a656:	9005      	str	r0, [sp, #20]
 801a658:	4649      	mov	r1, r9
 801a65a:	4628      	mov	r0, r5
 801a65c:	9309      	str	r3, [sp, #36]	; 0x24
 801a65e:	f000 ff49 	bl	801b4f4 <__mcmp>
 801a662:	463a      	mov	r2, r7
 801a664:	4682      	mov	sl, r0
 801a666:	4621      	mov	r1, r4
 801a668:	4630      	mov	r0, r6
 801a66a:	f000 ff5f 	bl	801b52c <__mdiff>
 801a66e:	68c2      	ldr	r2, [r0, #12]
 801a670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a672:	4680      	mov	r8, r0
 801a674:	bb0a      	cbnz	r2, 801a6ba <_dtoa_r+0x97a>
 801a676:	4601      	mov	r1, r0
 801a678:	4628      	mov	r0, r5
 801a67a:	f000 ff3b 	bl	801b4f4 <__mcmp>
 801a67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a680:	4602      	mov	r2, r0
 801a682:	4641      	mov	r1, r8
 801a684:	4630      	mov	r0, r6
 801a686:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801a68a:	f000 fca7 	bl	801afdc <_Bfree>
 801a68e:	9b06      	ldr	r3, [sp, #24]
 801a690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a692:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a696:	ea43 0102 	orr.w	r1, r3, r2
 801a69a:	9b07      	ldr	r3, [sp, #28]
 801a69c:	430b      	orrs	r3, r1
 801a69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6a0:	d10d      	bne.n	801a6be <_dtoa_r+0x97e>
 801a6a2:	2b39      	cmp	r3, #57	; 0x39
 801a6a4:	d029      	beq.n	801a6fa <_dtoa_r+0x9ba>
 801a6a6:	f1ba 0f00 	cmp.w	sl, #0
 801a6aa:	dd01      	ble.n	801a6b0 <_dtoa_r+0x970>
 801a6ac:	9b05      	ldr	r3, [sp, #20]
 801a6ae:	3331      	adds	r3, #49	; 0x31
 801a6b0:	9a02      	ldr	r2, [sp, #8]
 801a6b2:	7013      	strb	r3, [r2, #0]
 801a6b4:	e774      	b.n	801a5a0 <_dtoa_r+0x860>
 801a6b6:	4638      	mov	r0, r7
 801a6b8:	e7b8      	b.n	801a62c <_dtoa_r+0x8ec>
 801a6ba:	2201      	movs	r2, #1
 801a6bc:	e7e1      	b.n	801a682 <_dtoa_r+0x942>
 801a6be:	f1ba 0f00 	cmp.w	sl, #0
 801a6c2:	db06      	blt.n	801a6d2 <_dtoa_r+0x992>
 801a6c4:	9906      	ldr	r1, [sp, #24]
 801a6c6:	ea41 0a0a 	orr.w	sl, r1, sl
 801a6ca:	9907      	ldr	r1, [sp, #28]
 801a6cc:	ea5a 0101 	orrs.w	r1, sl, r1
 801a6d0:	d120      	bne.n	801a714 <_dtoa_r+0x9d4>
 801a6d2:	2a00      	cmp	r2, #0
 801a6d4:	ddec      	ble.n	801a6b0 <_dtoa_r+0x970>
 801a6d6:	4629      	mov	r1, r5
 801a6d8:	2201      	movs	r2, #1
 801a6da:	4630      	mov	r0, r6
 801a6dc:	9304      	str	r3, [sp, #16]
 801a6de:	f000 fe99 	bl	801b414 <__lshift>
 801a6e2:	4621      	mov	r1, r4
 801a6e4:	4605      	mov	r5, r0
 801a6e6:	f000 ff05 	bl	801b4f4 <__mcmp>
 801a6ea:	2800      	cmp	r0, #0
 801a6ec:	9b04      	ldr	r3, [sp, #16]
 801a6ee:	dc02      	bgt.n	801a6f6 <_dtoa_r+0x9b6>
 801a6f0:	d1de      	bne.n	801a6b0 <_dtoa_r+0x970>
 801a6f2:	07da      	lsls	r2, r3, #31
 801a6f4:	d5dc      	bpl.n	801a6b0 <_dtoa_r+0x970>
 801a6f6:	2b39      	cmp	r3, #57	; 0x39
 801a6f8:	d1d8      	bne.n	801a6ac <_dtoa_r+0x96c>
 801a6fa:	9a02      	ldr	r2, [sp, #8]
 801a6fc:	2339      	movs	r3, #57	; 0x39
 801a6fe:	7013      	strb	r3, [r2, #0]
 801a700:	4643      	mov	r3, r8
 801a702:	4698      	mov	r8, r3
 801a704:	3b01      	subs	r3, #1
 801a706:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801a70a:	2a39      	cmp	r2, #57	; 0x39
 801a70c:	d051      	beq.n	801a7b2 <_dtoa_r+0xa72>
 801a70e:	3201      	adds	r2, #1
 801a710:	701a      	strb	r2, [r3, #0]
 801a712:	e745      	b.n	801a5a0 <_dtoa_r+0x860>
 801a714:	2a00      	cmp	r2, #0
 801a716:	dd03      	ble.n	801a720 <_dtoa_r+0x9e0>
 801a718:	2b39      	cmp	r3, #57	; 0x39
 801a71a:	d0ee      	beq.n	801a6fa <_dtoa_r+0x9ba>
 801a71c:	3301      	adds	r3, #1
 801a71e:	e7c7      	b.n	801a6b0 <_dtoa_r+0x970>
 801a720:	9a04      	ldr	r2, [sp, #16]
 801a722:	9908      	ldr	r1, [sp, #32]
 801a724:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a728:	428a      	cmp	r2, r1
 801a72a:	d02b      	beq.n	801a784 <_dtoa_r+0xa44>
 801a72c:	4629      	mov	r1, r5
 801a72e:	2300      	movs	r3, #0
 801a730:	220a      	movs	r2, #10
 801a732:	4630      	mov	r0, r6
 801a734:	f000 fc74 	bl	801b020 <__multadd>
 801a738:	45b9      	cmp	r9, r7
 801a73a:	4605      	mov	r5, r0
 801a73c:	f04f 0300 	mov.w	r3, #0
 801a740:	f04f 020a 	mov.w	r2, #10
 801a744:	4649      	mov	r1, r9
 801a746:	4630      	mov	r0, r6
 801a748:	d107      	bne.n	801a75a <_dtoa_r+0xa1a>
 801a74a:	f000 fc69 	bl	801b020 <__multadd>
 801a74e:	4681      	mov	r9, r0
 801a750:	4607      	mov	r7, r0
 801a752:	9b04      	ldr	r3, [sp, #16]
 801a754:	3301      	adds	r3, #1
 801a756:	9304      	str	r3, [sp, #16]
 801a758:	e774      	b.n	801a644 <_dtoa_r+0x904>
 801a75a:	f000 fc61 	bl	801b020 <__multadd>
 801a75e:	4639      	mov	r1, r7
 801a760:	4681      	mov	r9, r0
 801a762:	2300      	movs	r3, #0
 801a764:	220a      	movs	r2, #10
 801a766:	4630      	mov	r0, r6
 801a768:	f000 fc5a 	bl	801b020 <__multadd>
 801a76c:	4607      	mov	r7, r0
 801a76e:	e7f0      	b.n	801a752 <_dtoa_r+0xa12>
 801a770:	f1ba 0f00 	cmp.w	sl, #0
 801a774:	9a01      	ldr	r2, [sp, #4]
 801a776:	bfcc      	ite	gt
 801a778:	46d0      	movgt	r8, sl
 801a77a:	f04f 0801 	movle.w	r8, #1
 801a77e:	4490      	add	r8, r2
 801a780:	f04f 0900 	mov.w	r9, #0
 801a784:	4629      	mov	r1, r5
 801a786:	2201      	movs	r2, #1
 801a788:	4630      	mov	r0, r6
 801a78a:	9302      	str	r3, [sp, #8]
 801a78c:	f000 fe42 	bl	801b414 <__lshift>
 801a790:	4621      	mov	r1, r4
 801a792:	4605      	mov	r5, r0
 801a794:	f000 feae 	bl	801b4f4 <__mcmp>
 801a798:	2800      	cmp	r0, #0
 801a79a:	dcb1      	bgt.n	801a700 <_dtoa_r+0x9c0>
 801a79c:	d102      	bne.n	801a7a4 <_dtoa_r+0xa64>
 801a79e:	9b02      	ldr	r3, [sp, #8]
 801a7a0:	07db      	lsls	r3, r3, #31
 801a7a2:	d4ad      	bmi.n	801a700 <_dtoa_r+0x9c0>
 801a7a4:	4643      	mov	r3, r8
 801a7a6:	4698      	mov	r8, r3
 801a7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a7ac:	2a30      	cmp	r2, #48	; 0x30
 801a7ae:	d0fa      	beq.n	801a7a6 <_dtoa_r+0xa66>
 801a7b0:	e6f6      	b.n	801a5a0 <_dtoa_r+0x860>
 801a7b2:	9a01      	ldr	r2, [sp, #4]
 801a7b4:	429a      	cmp	r2, r3
 801a7b6:	d1a4      	bne.n	801a702 <_dtoa_r+0x9c2>
 801a7b8:	f10b 0b01 	add.w	fp, fp, #1
 801a7bc:	2331      	movs	r3, #49	; 0x31
 801a7be:	e778      	b.n	801a6b2 <_dtoa_r+0x972>
 801a7c0:	4b14      	ldr	r3, [pc, #80]	; (801a814 <_dtoa_r+0xad4>)
 801a7c2:	f7ff bb27 	b.w	8019e14 <_dtoa_r+0xd4>
 801a7c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	f47f ab03 	bne.w	8019dd4 <_dtoa_r+0x94>
 801a7ce:	4b12      	ldr	r3, [pc, #72]	; (801a818 <_dtoa_r+0xad8>)
 801a7d0:	f7ff bb20 	b.w	8019e14 <_dtoa_r+0xd4>
 801a7d4:	f1ba 0f00 	cmp.w	sl, #0
 801a7d8:	dc03      	bgt.n	801a7e2 <_dtoa_r+0xaa2>
 801a7da:	9b06      	ldr	r3, [sp, #24]
 801a7dc:	2b02      	cmp	r3, #2
 801a7de:	f73f aec7 	bgt.w	801a570 <_dtoa_r+0x830>
 801a7e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a7e6:	4621      	mov	r1, r4
 801a7e8:	4628      	mov	r0, r5
 801a7ea:	f7ff fa1b 	bl	8019c24 <quorem>
 801a7ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801a7f2:	f808 3b01 	strb.w	r3, [r8], #1
 801a7f6:	9a01      	ldr	r2, [sp, #4]
 801a7f8:	eba8 0202 	sub.w	r2, r8, r2
 801a7fc:	4592      	cmp	sl, r2
 801a7fe:	ddb7      	ble.n	801a770 <_dtoa_r+0xa30>
 801a800:	4629      	mov	r1, r5
 801a802:	2300      	movs	r3, #0
 801a804:	220a      	movs	r2, #10
 801a806:	4630      	mov	r0, r6
 801a808:	f000 fc0a 	bl	801b020 <__multadd>
 801a80c:	4605      	mov	r5, r0
 801a80e:	e7ea      	b.n	801a7e6 <_dtoa_r+0xaa6>
 801a810:	0801d038 	.word	0x0801d038
 801a814:	0801ce38 	.word	0x0801ce38
 801a818:	0801cfb9 	.word	0x0801cfb9

0801a81c <rshift>:
 801a81c:	6903      	ldr	r3, [r0, #16]
 801a81e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a822:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a826:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a82a:	f100 0414 	add.w	r4, r0, #20
 801a82e:	dd45      	ble.n	801a8bc <rshift+0xa0>
 801a830:	f011 011f 	ands.w	r1, r1, #31
 801a834:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a838:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a83c:	d10c      	bne.n	801a858 <rshift+0x3c>
 801a83e:	f100 0710 	add.w	r7, r0, #16
 801a842:	4629      	mov	r1, r5
 801a844:	42b1      	cmp	r1, r6
 801a846:	d334      	bcc.n	801a8b2 <rshift+0x96>
 801a848:	1a9b      	subs	r3, r3, r2
 801a84a:	009b      	lsls	r3, r3, #2
 801a84c:	1eea      	subs	r2, r5, #3
 801a84e:	4296      	cmp	r6, r2
 801a850:	bf38      	it	cc
 801a852:	2300      	movcc	r3, #0
 801a854:	4423      	add	r3, r4
 801a856:	e015      	b.n	801a884 <rshift+0x68>
 801a858:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a85c:	f1c1 0820 	rsb	r8, r1, #32
 801a860:	40cf      	lsrs	r7, r1
 801a862:	f105 0e04 	add.w	lr, r5, #4
 801a866:	46a1      	mov	r9, r4
 801a868:	4576      	cmp	r6, lr
 801a86a:	46f4      	mov	ip, lr
 801a86c:	d815      	bhi.n	801a89a <rshift+0x7e>
 801a86e:	1a9a      	subs	r2, r3, r2
 801a870:	0092      	lsls	r2, r2, #2
 801a872:	3a04      	subs	r2, #4
 801a874:	3501      	adds	r5, #1
 801a876:	42ae      	cmp	r6, r5
 801a878:	bf38      	it	cc
 801a87a:	2200      	movcc	r2, #0
 801a87c:	18a3      	adds	r3, r4, r2
 801a87e:	50a7      	str	r7, [r4, r2]
 801a880:	b107      	cbz	r7, 801a884 <rshift+0x68>
 801a882:	3304      	adds	r3, #4
 801a884:	1b1a      	subs	r2, r3, r4
 801a886:	42a3      	cmp	r3, r4
 801a888:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a88c:	bf08      	it	eq
 801a88e:	2300      	moveq	r3, #0
 801a890:	6102      	str	r2, [r0, #16]
 801a892:	bf08      	it	eq
 801a894:	6143      	streq	r3, [r0, #20]
 801a896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a89a:	f8dc c000 	ldr.w	ip, [ip]
 801a89e:	fa0c fc08 	lsl.w	ip, ip, r8
 801a8a2:	ea4c 0707 	orr.w	r7, ip, r7
 801a8a6:	f849 7b04 	str.w	r7, [r9], #4
 801a8aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a8ae:	40cf      	lsrs	r7, r1
 801a8b0:	e7da      	b.n	801a868 <rshift+0x4c>
 801a8b2:	f851 cb04 	ldr.w	ip, [r1], #4
 801a8b6:	f847 cf04 	str.w	ip, [r7, #4]!
 801a8ba:	e7c3      	b.n	801a844 <rshift+0x28>
 801a8bc:	4623      	mov	r3, r4
 801a8be:	e7e1      	b.n	801a884 <rshift+0x68>

0801a8c0 <__hexdig_fun>:
 801a8c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a8c4:	2b09      	cmp	r3, #9
 801a8c6:	d802      	bhi.n	801a8ce <__hexdig_fun+0xe>
 801a8c8:	3820      	subs	r0, #32
 801a8ca:	b2c0      	uxtb	r0, r0
 801a8cc:	4770      	bx	lr
 801a8ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a8d2:	2b05      	cmp	r3, #5
 801a8d4:	d801      	bhi.n	801a8da <__hexdig_fun+0x1a>
 801a8d6:	3847      	subs	r0, #71	; 0x47
 801a8d8:	e7f7      	b.n	801a8ca <__hexdig_fun+0xa>
 801a8da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a8de:	2b05      	cmp	r3, #5
 801a8e0:	d801      	bhi.n	801a8e6 <__hexdig_fun+0x26>
 801a8e2:	3827      	subs	r0, #39	; 0x27
 801a8e4:	e7f1      	b.n	801a8ca <__hexdig_fun+0xa>
 801a8e6:	2000      	movs	r0, #0
 801a8e8:	4770      	bx	lr
	...

0801a8ec <__gethex>:
 801a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8f0:	ed2d 8b02 	vpush	{d8}
 801a8f4:	b089      	sub	sp, #36	; 0x24
 801a8f6:	ee08 0a10 	vmov	s16, r0
 801a8fa:	9304      	str	r3, [sp, #16]
 801a8fc:	4bb4      	ldr	r3, [pc, #720]	; (801abd0 <__gethex+0x2e4>)
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	9301      	str	r3, [sp, #4]
 801a902:	4618      	mov	r0, r3
 801a904:	468b      	mov	fp, r1
 801a906:	4690      	mov	r8, r2
 801a908:	f7e5 fd02 	bl	8000310 <strlen>
 801a90c:	9b01      	ldr	r3, [sp, #4]
 801a90e:	f8db 2000 	ldr.w	r2, [fp]
 801a912:	4403      	add	r3, r0
 801a914:	4682      	mov	sl, r0
 801a916:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801a91a:	9305      	str	r3, [sp, #20]
 801a91c:	1c93      	adds	r3, r2, #2
 801a91e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a922:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a926:	32fe      	adds	r2, #254	; 0xfe
 801a928:	18d1      	adds	r1, r2, r3
 801a92a:	461f      	mov	r7, r3
 801a92c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a930:	9100      	str	r1, [sp, #0]
 801a932:	2830      	cmp	r0, #48	; 0x30
 801a934:	d0f8      	beq.n	801a928 <__gethex+0x3c>
 801a936:	f7ff ffc3 	bl	801a8c0 <__hexdig_fun>
 801a93a:	4604      	mov	r4, r0
 801a93c:	2800      	cmp	r0, #0
 801a93e:	d13a      	bne.n	801a9b6 <__gethex+0xca>
 801a940:	9901      	ldr	r1, [sp, #4]
 801a942:	4652      	mov	r2, sl
 801a944:	4638      	mov	r0, r7
 801a946:	f001 fa43 	bl	801bdd0 <strncmp>
 801a94a:	4605      	mov	r5, r0
 801a94c:	2800      	cmp	r0, #0
 801a94e:	d168      	bne.n	801aa22 <__gethex+0x136>
 801a950:	f817 000a 	ldrb.w	r0, [r7, sl]
 801a954:	eb07 060a 	add.w	r6, r7, sl
 801a958:	f7ff ffb2 	bl	801a8c0 <__hexdig_fun>
 801a95c:	2800      	cmp	r0, #0
 801a95e:	d062      	beq.n	801aa26 <__gethex+0x13a>
 801a960:	4633      	mov	r3, r6
 801a962:	7818      	ldrb	r0, [r3, #0]
 801a964:	2830      	cmp	r0, #48	; 0x30
 801a966:	461f      	mov	r7, r3
 801a968:	f103 0301 	add.w	r3, r3, #1
 801a96c:	d0f9      	beq.n	801a962 <__gethex+0x76>
 801a96e:	f7ff ffa7 	bl	801a8c0 <__hexdig_fun>
 801a972:	2301      	movs	r3, #1
 801a974:	fab0 f480 	clz	r4, r0
 801a978:	0964      	lsrs	r4, r4, #5
 801a97a:	4635      	mov	r5, r6
 801a97c:	9300      	str	r3, [sp, #0]
 801a97e:	463a      	mov	r2, r7
 801a980:	4616      	mov	r6, r2
 801a982:	3201      	adds	r2, #1
 801a984:	7830      	ldrb	r0, [r6, #0]
 801a986:	f7ff ff9b 	bl	801a8c0 <__hexdig_fun>
 801a98a:	2800      	cmp	r0, #0
 801a98c:	d1f8      	bne.n	801a980 <__gethex+0x94>
 801a98e:	9901      	ldr	r1, [sp, #4]
 801a990:	4652      	mov	r2, sl
 801a992:	4630      	mov	r0, r6
 801a994:	f001 fa1c 	bl	801bdd0 <strncmp>
 801a998:	b980      	cbnz	r0, 801a9bc <__gethex+0xd0>
 801a99a:	b94d      	cbnz	r5, 801a9b0 <__gethex+0xc4>
 801a99c:	eb06 050a 	add.w	r5, r6, sl
 801a9a0:	462a      	mov	r2, r5
 801a9a2:	4616      	mov	r6, r2
 801a9a4:	3201      	adds	r2, #1
 801a9a6:	7830      	ldrb	r0, [r6, #0]
 801a9a8:	f7ff ff8a 	bl	801a8c0 <__hexdig_fun>
 801a9ac:	2800      	cmp	r0, #0
 801a9ae:	d1f8      	bne.n	801a9a2 <__gethex+0xb6>
 801a9b0:	1bad      	subs	r5, r5, r6
 801a9b2:	00ad      	lsls	r5, r5, #2
 801a9b4:	e004      	b.n	801a9c0 <__gethex+0xd4>
 801a9b6:	2400      	movs	r4, #0
 801a9b8:	4625      	mov	r5, r4
 801a9ba:	e7e0      	b.n	801a97e <__gethex+0x92>
 801a9bc:	2d00      	cmp	r5, #0
 801a9be:	d1f7      	bne.n	801a9b0 <__gethex+0xc4>
 801a9c0:	7833      	ldrb	r3, [r6, #0]
 801a9c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a9c6:	2b50      	cmp	r3, #80	; 0x50
 801a9c8:	d13b      	bne.n	801aa42 <__gethex+0x156>
 801a9ca:	7873      	ldrb	r3, [r6, #1]
 801a9cc:	2b2b      	cmp	r3, #43	; 0x2b
 801a9ce:	d02c      	beq.n	801aa2a <__gethex+0x13e>
 801a9d0:	2b2d      	cmp	r3, #45	; 0x2d
 801a9d2:	d02e      	beq.n	801aa32 <__gethex+0x146>
 801a9d4:	1c71      	adds	r1, r6, #1
 801a9d6:	f04f 0900 	mov.w	r9, #0
 801a9da:	7808      	ldrb	r0, [r1, #0]
 801a9dc:	f7ff ff70 	bl	801a8c0 <__hexdig_fun>
 801a9e0:	1e43      	subs	r3, r0, #1
 801a9e2:	b2db      	uxtb	r3, r3
 801a9e4:	2b18      	cmp	r3, #24
 801a9e6:	d82c      	bhi.n	801aa42 <__gethex+0x156>
 801a9e8:	f1a0 0210 	sub.w	r2, r0, #16
 801a9ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a9f0:	f7ff ff66 	bl	801a8c0 <__hexdig_fun>
 801a9f4:	1e43      	subs	r3, r0, #1
 801a9f6:	b2db      	uxtb	r3, r3
 801a9f8:	2b18      	cmp	r3, #24
 801a9fa:	d91d      	bls.n	801aa38 <__gethex+0x14c>
 801a9fc:	f1b9 0f00 	cmp.w	r9, #0
 801aa00:	d000      	beq.n	801aa04 <__gethex+0x118>
 801aa02:	4252      	negs	r2, r2
 801aa04:	4415      	add	r5, r2
 801aa06:	f8cb 1000 	str.w	r1, [fp]
 801aa0a:	b1e4      	cbz	r4, 801aa46 <__gethex+0x15a>
 801aa0c:	9b00      	ldr	r3, [sp, #0]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	bf14      	ite	ne
 801aa12:	2700      	movne	r7, #0
 801aa14:	2706      	moveq	r7, #6
 801aa16:	4638      	mov	r0, r7
 801aa18:	b009      	add	sp, #36	; 0x24
 801aa1a:	ecbd 8b02 	vpop	{d8}
 801aa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa22:	463e      	mov	r6, r7
 801aa24:	4625      	mov	r5, r4
 801aa26:	2401      	movs	r4, #1
 801aa28:	e7ca      	b.n	801a9c0 <__gethex+0xd4>
 801aa2a:	f04f 0900 	mov.w	r9, #0
 801aa2e:	1cb1      	adds	r1, r6, #2
 801aa30:	e7d3      	b.n	801a9da <__gethex+0xee>
 801aa32:	f04f 0901 	mov.w	r9, #1
 801aa36:	e7fa      	b.n	801aa2e <__gethex+0x142>
 801aa38:	230a      	movs	r3, #10
 801aa3a:	fb03 0202 	mla	r2, r3, r2, r0
 801aa3e:	3a10      	subs	r2, #16
 801aa40:	e7d4      	b.n	801a9ec <__gethex+0x100>
 801aa42:	4631      	mov	r1, r6
 801aa44:	e7df      	b.n	801aa06 <__gethex+0x11a>
 801aa46:	1bf3      	subs	r3, r6, r7
 801aa48:	3b01      	subs	r3, #1
 801aa4a:	4621      	mov	r1, r4
 801aa4c:	2b07      	cmp	r3, #7
 801aa4e:	dc0b      	bgt.n	801aa68 <__gethex+0x17c>
 801aa50:	ee18 0a10 	vmov	r0, s16
 801aa54:	f000 fa82 	bl	801af5c <_Balloc>
 801aa58:	4604      	mov	r4, r0
 801aa5a:	b940      	cbnz	r0, 801aa6e <__gethex+0x182>
 801aa5c:	4b5d      	ldr	r3, [pc, #372]	; (801abd4 <__gethex+0x2e8>)
 801aa5e:	4602      	mov	r2, r0
 801aa60:	21de      	movs	r1, #222	; 0xde
 801aa62:	485d      	ldr	r0, [pc, #372]	; (801abd8 <__gethex+0x2ec>)
 801aa64:	f001 f9d6 	bl	801be14 <__assert_func>
 801aa68:	3101      	adds	r1, #1
 801aa6a:	105b      	asrs	r3, r3, #1
 801aa6c:	e7ee      	b.n	801aa4c <__gethex+0x160>
 801aa6e:	f100 0914 	add.w	r9, r0, #20
 801aa72:	f04f 0b00 	mov.w	fp, #0
 801aa76:	f1ca 0301 	rsb	r3, sl, #1
 801aa7a:	f8cd 9008 	str.w	r9, [sp, #8]
 801aa7e:	f8cd b000 	str.w	fp, [sp]
 801aa82:	9306      	str	r3, [sp, #24]
 801aa84:	42b7      	cmp	r7, r6
 801aa86:	d340      	bcc.n	801ab0a <__gethex+0x21e>
 801aa88:	9802      	ldr	r0, [sp, #8]
 801aa8a:	9b00      	ldr	r3, [sp, #0]
 801aa8c:	f840 3b04 	str.w	r3, [r0], #4
 801aa90:	eba0 0009 	sub.w	r0, r0, r9
 801aa94:	1080      	asrs	r0, r0, #2
 801aa96:	0146      	lsls	r6, r0, #5
 801aa98:	6120      	str	r0, [r4, #16]
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	f000 fb50 	bl	801b140 <__hi0bits>
 801aaa0:	1a30      	subs	r0, r6, r0
 801aaa2:	f8d8 6000 	ldr.w	r6, [r8]
 801aaa6:	42b0      	cmp	r0, r6
 801aaa8:	dd63      	ble.n	801ab72 <__gethex+0x286>
 801aaaa:	1b87      	subs	r7, r0, r6
 801aaac:	4639      	mov	r1, r7
 801aaae:	4620      	mov	r0, r4
 801aab0:	f000 fef1 	bl	801b896 <__any_on>
 801aab4:	4682      	mov	sl, r0
 801aab6:	b1a8      	cbz	r0, 801aae4 <__gethex+0x1f8>
 801aab8:	1e7b      	subs	r3, r7, #1
 801aaba:	1159      	asrs	r1, r3, #5
 801aabc:	f003 021f 	and.w	r2, r3, #31
 801aac0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801aac4:	f04f 0a01 	mov.w	sl, #1
 801aac8:	fa0a f202 	lsl.w	r2, sl, r2
 801aacc:	420a      	tst	r2, r1
 801aace:	d009      	beq.n	801aae4 <__gethex+0x1f8>
 801aad0:	4553      	cmp	r3, sl
 801aad2:	dd05      	ble.n	801aae0 <__gethex+0x1f4>
 801aad4:	1eb9      	subs	r1, r7, #2
 801aad6:	4620      	mov	r0, r4
 801aad8:	f000 fedd 	bl	801b896 <__any_on>
 801aadc:	2800      	cmp	r0, #0
 801aade:	d145      	bne.n	801ab6c <__gethex+0x280>
 801aae0:	f04f 0a02 	mov.w	sl, #2
 801aae4:	4639      	mov	r1, r7
 801aae6:	4620      	mov	r0, r4
 801aae8:	f7ff fe98 	bl	801a81c <rshift>
 801aaec:	443d      	add	r5, r7
 801aaee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801aaf2:	42ab      	cmp	r3, r5
 801aaf4:	da4c      	bge.n	801ab90 <__gethex+0x2a4>
 801aaf6:	ee18 0a10 	vmov	r0, s16
 801aafa:	4621      	mov	r1, r4
 801aafc:	f000 fa6e 	bl	801afdc <_Bfree>
 801ab00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ab02:	2300      	movs	r3, #0
 801ab04:	6013      	str	r3, [r2, #0]
 801ab06:	27a3      	movs	r7, #163	; 0xa3
 801ab08:	e785      	b.n	801aa16 <__gethex+0x12a>
 801ab0a:	1e73      	subs	r3, r6, #1
 801ab0c:	9a05      	ldr	r2, [sp, #20]
 801ab0e:	9303      	str	r3, [sp, #12]
 801ab10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ab14:	4293      	cmp	r3, r2
 801ab16:	d019      	beq.n	801ab4c <__gethex+0x260>
 801ab18:	f1bb 0f20 	cmp.w	fp, #32
 801ab1c:	d107      	bne.n	801ab2e <__gethex+0x242>
 801ab1e:	9b02      	ldr	r3, [sp, #8]
 801ab20:	9a00      	ldr	r2, [sp, #0]
 801ab22:	f843 2b04 	str.w	r2, [r3], #4
 801ab26:	9302      	str	r3, [sp, #8]
 801ab28:	2300      	movs	r3, #0
 801ab2a:	9300      	str	r3, [sp, #0]
 801ab2c:	469b      	mov	fp, r3
 801ab2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ab32:	f7ff fec5 	bl	801a8c0 <__hexdig_fun>
 801ab36:	9b00      	ldr	r3, [sp, #0]
 801ab38:	f000 000f 	and.w	r0, r0, #15
 801ab3c:	fa00 f00b 	lsl.w	r0, r0, fp
 801ab40:	4303      	orrs	r3, r0
 801ab42:	9300      	str	r3, [sp, #0]
 801ab44:	f10b 0b04 	add.w	fp, fp, #4
 801ab48:	9b03      	ldr	r3, [sp, #12]
 801ab4a:	e00d      	b.n	801ab68 <__gethex+0x27c>
 801ab4c:	9b03      	ldr	r3, [sp, #12]
 801ab4e:	9a06      	ldr	r2, [sp, #24]
 801ab50:	4413      	add	r3, r2
 801ab52:	42bb      	cmp	r3, r7
 801ab54:	d3e0      	bcc.n	801ab18 <__gethex+0x22c>
 801ab56:	4618      	mov	r0, r3
 801ab58:	9901      	ldr	r1, [sp, #4]
 801ab5a:	9307      	str	r3, [sp, #28]
 801ab5c:	4652      	mov	r2, sl
 801ab5e:	f001 f937 	bl	801bdd0 <strncmp>
 801ab62:	9b07      	ldr	r3, [sp, #28]
 801ab64:	2800      	cmp	r0, #0
 801ab66:	d1d7      	bne.n	801ab18 <__gethex+0x22c>
 801ab68:	461e      	mov	r6, r3
 801ab6a:	e78b      	b.n	801aa84 <__gethex+0x198>
 801ab6c:	f04f 0a03 	mov.w	sl, #3
 801ab70:	e7b8      	b.n	801aae4 <__gethex+0x1f8>
 801ab72:	da0a      	bge.n	801ab8a <__gethex+0x29e>
 801ab74:	1a37      	subs	r7, r6, r0
 801ab76:	4621      	mov	r1, r4
 801ab78:	ee18 0a10 	vmov	r0, s16
 801ab7c:	463a      	mov	r2, r7
 801ab7e:	f000 fc49 	bl	801b414 <__lshift>
 801ab82:	1bed      	subs	r5, r5, r7
 801ab84:	4604      	mov	r4, r0
 801ab86:	f100 0914 	add.w	r9, r0, #20
 801ab8a:	f04f 0a00 	mov.w	sl, #0
 801ab8e:	e7ae      	b.n	801aaee <__gethex+0x202>
 801ab90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ab94:	42a8      	cmp	r0, r5
 801ab96:	dd72      	ble.n	801ac7e <__gethex+0x392>
 801ab98:	1b45      	subs	r5, r0, r5
 801ab9a:	42ae      	cmp	r6, r5
 801ab9c:	dc36      	bgt.n	801ac0c <__gethex+0x320>
 801ab9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801aba2:	2b02      	cmp	r3, #2
 801aba4:	d02a      	beq.n	801abfc <__gethex+0x310>
 801aba6:	2b03      	cmp	r3, #3
 801aba8:	d02c      	beq.n	801ac04 <__gethex+0x318>
 801abaa:	2b01      	cmp	r3, #1
 801abac:	d11c      	bne.n	801abe8 <__gethex+0x2fc>
 801abae:	42ae      	cmp	r6, r5
 801abb0:	d11a      	bne.n	801abe8 <__gethex+0x2fc>
 801abb2:	2e01      	cmp	r6, #1
 801abb4:	d112      	bne.n	801abdc <__gethex+0x2f0>
 801abb6:	9a04      	ldr	r2, [sp, #16]
 801abb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801abbc:	6013      	str	r3, [r2, #0]
 801abbe:	2301      	movs	r3, #1
 801abc0:	6123      	str	r3, [r4, #16]
 801abc2:	f8c9 3000 	str.w	r3, [r9]
 801abc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801abc8:	2762      	movs	r7, #98	; 0x62
 801abca:	601c      	str	r4, [r3, #0]
 801abcc:	e723      	b.n	801aa16 <__gethex+0x12a>
 801abce:	bf00      	nop
 801abd0:	0801d0b0 	.word	0x0801d0b0
 801abd4:	0801d038 	.word	0x0801d038
 801abd8:	0801d049 	.word	0x0801d049
 801abdc:	1e71      	subs	r1, r6, #1
 801abde:	4620      	mov	r0, r4
 801abe0:	f000 fe59 	bl	801b896 <__any_on>
 801abe4:	2800      	cmp	r0, #0
 801abe6:	d1e6      	bne.n	801abb6 <__gethex+0x2ca>
 801abe8:	ee18 0a10 	vmov	r0, s16
 801abec:	4621      	mov	r1, r4
 801abee:	f000 f9f5 	bl	801afdc <_Bfree>
 801abf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801abf4:	2300      	movs	r3, #0
 801abf6:	6013      	str	r3, [r2, #0]
 801abf8:	2750      	movs	r7, #80	; 0x50
 801abfa:	e70c      	b.n	801aa16 <__gethex+0x12a>
 801abfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d1f2      	bne.n	801abe8 <__gethex+0x2fc>
 801ac02:	e7d8      	b.n	801abb6 <__gethex+0x2ca>
 801ac04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d1d5      	bne.n	801abb6 <__gethex+0x2ca>
 801ac0a:	e7ed      	b.n	801abe8 <__gethex+0x2fc>
 801ac0c:	1e6f      	subs	r7, r5, #1
 801ac0e:	f1ba 0f00 	cmp.w	sl, #0
 801ac12:	d131      	bne.n	801ac78 <__gethex+0x38c>
 801ac14:	b127      	cbz	r7, 801ac20 <__gethex+0x334>
 801ac16:	4639      	mov	r1, r7
 801ac18:	4620      	mov	r0, r4
 801ac1a:	f000 fe3c 	bl	801b896 <__any_on>
 801ac1e:	4682      	mov	sl, r0
 801ac20:	117b      	asrs	r3, r7, #5
 801ac22:	2101      	movs	r1, #1
 801ac24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801ac28:	f007 071f 	and.w	r7, r7, #31
 801ac2c:	fa01 f707 	lsl.w	r7, r1, r7
 801ac30:	421f      	tst	r7, r3
 801ac32:	4629      	mov	r1, r5
 801ac34:	4620      	mov	r0, r4
 801ac36:	bf18      	it	ne
 801ac38:	f04a 0a02 	orrne.w	sl, sl, #2
 801ac3c:	1b76      	subs	r6, r6, r5
 801ac3e:	f7ff fded 	bl	801a81c <rshift>
 801ac42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ac46:	2702      	movs	r7, #2
 801ac48:	f1ba 0f00 	cmp.w	sl, #0
 801ac4c:	d048      	beq.n	801ace0 <__gethex+0x3f4>
 801ac4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ac52:	2b02      	cmp	r3, #2
 801ac54:	d015      	beq.n	801ac82 <__gethex+0x396>
 801ac56:	2b03      	cmp	r3, #3
 801ac58:	d017      	beq.n	801ac8a <__gethex+0x39e>
 801ac5a:	2b01      	cmp	r3, #1
 801ac5c:	d109      	bne.n	801ac72 <__gethex+0x386>
 801ac5e:	f01a 0f02 	tst.w	sl, #2
 801ac62:	d006      	beq.n	801ac72 <__gethex+0x386>
 801ac64:	f8d9 0000 	ldr.w	r0, [r9]
 801ac68:	ea4a 0a00 	orr.w	sl, sl, r0
 801ac6c:	f01a 0f01 	tst.w	sl, #1
 801ac70:	d10e      	bne.n	801ac90 <__gethex+0x3a4>
 801ac72:	f047 0710 	orr.w	r7, r7, #16
 801ac76:	e033      	b.n	801ace0 <__gethex+0x3f4>
 801ac78:	f04f 0a01 	mov.w	sl, #1
 801ac7c:	e7d0      	b.n	801ac20 <__gethex+0x334>
 801ac7e:	2701      	movs	r7, #1
 801ac80:	e7e2      	b.n	801ac48 <__gethex+0x35c>
 801ac82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ac84:	f1c3 0301 	rsb	r3, r3, #1
 801ac88:	9315      	str	r3, [sp, #84]	; 0x54
 801ac8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d0f0      	beq.n	801ac72 <__gethex+0x386>
 801ac90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ac94:	f104 0314 	add.w	r3, r4, #20
 801ac98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ac9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801aca0:	f04f 0c00 	mov.w	ip, #0
 801aca4:	4618      	mov	r0, r3
 801aca6:	f853 2b04 	ldr.w	r2, [r3], #4
 801acaa:	f1b2 3fff 	cmp.w	r2, #4294967295
 801acae:	d01c      	beq.n	801acea <__gethex+0x3fe>
 801acb0:	3201      	adds	r2, #1
 801acb2:	6002      	str	r2, [r0, #0]
 801acb4:	2f02      	cmp	r7, #2
 801acb6:	f104 0314 	add.w	r3, r4, #20
 801acba:	d13f      	bne.n	801ad3c <__gethex+0x450>
 801acbc:	f8d8 2000 	ldr.w	r2, [r8]
 801acc0:	3a01      	subs	r2, #1
 801acc2:	42b2      	cmp	r2, r6
 801acc4:	d10a      	bne.n	801acdc <__gethex+0x3f0>
 801acc6:	1171      	asrs	r1, r6, #5
 801acc8:	2201      	movs	r2, #1
 801acca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801acce:	f006 061f 	and.w	r6, r6, #31
 801acd2:	fa02 f606 	lsl.w	r6, r2, r6
 801acd6:	421e      	tst	r6, r3
 801acd8:	bf18      	it	ne
 801acda:	4617      	movne	r7, r2
 801acdc:	f047 0720 	orr.w	r7, r7, #32
 801ace0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ace2:	601c      	str	r4, [r3, #0]
 801ace4:	9b04      	ldr	r3, [sp, #16]
 801ace6:	601d      	str	r5, [r3, #0]
 801ace8:	e695      	b.n	801aa16 <__gethex+0x12a>
 801acea:	4299      	cmp	r1, r3
 801acec:	f843 cc04 	str.w	ip, [r3, #-4]
 801acf0:	d8d8      	bhi.n	801aca4 <__gethex+0x3b8>
 801acf2:	68a3      	ldr	r3, [r4, #8]
 801acf4:	459b      	cmp	fp, r3
 801acf6:	db19      	blt.n	801ad2c <__gethex+0x440>
 801acf8:	6861      	ldr	r1, [r4, #4]
 801acfa:	ee18 0a10 	vmov	r0, s16
 801acfe:	3101      	adds	r1, #1
 801ad00:	f000 f92c 	bl	801af5c <_Balloc>
 801ad04:	4681      	mov	r9, r0
 801ad06:	b918      	cbnz	r0, 801ad10 <__gethex+0x424>
 801ad08:	4b1a      	ldr	r3, [pc, #104]	; (801ad74 <__gethex+0x488>)
 801ad0a:	4602      	mov	r2, r0
 801ad0c:	2184      	movs	r1, #132	; 0x84
 801ad0e:	e6a8      	b.n	801aa62 <__gethex+0x176>
 801ad10:	6922      	ldr	r2, [r4, #16]
 801ad12:	3202      	adds	r2, #2
 801ad14:	f104 010c 	add.w	r1, r4, #12
 801ad18:	0092      	lsls	r2, r2, #2
 801ad1a:	300c      	adds	r0, #12
 801ad1c:	f7fd fa3c 	bl	8018198 <memcpy>
 801ad20:	4621      	mov	r1, r4
 801ad22:	ee18 0a10 	vmov	r0, s16
 801ad26:	f000 f959 	bl	801afdc <_Bfree>
 801ad2a:	464c      	mov	r4, r9
 801ad2c:	6923      	ldr	r3, [r4, #16]
 801ad2e:	1c5a      	adds	r2, r3, #1
 801ad30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ad34:	6122      	str	r2, [r4, #16]
 801ad36:	2201      	movs	r2, #1
 801ad38:	615a      	str	r2, [r3, #20]
 801ad3a:	e7bb      	b.n	801acb4 <__gethex+0x3c8>
 801ad3c:	6922      	ldr	r2, [r4, #16]
 801ad3e:	455a      	cmp	r2, fp
 801ad40:	dd0b      	ble.n	801ad5a <__gethex+0x46e>
 801ad42:	2101      	movs	r1, #1
 801ad44:	4620      	mov	r0, r4
 801ad46:	f7ff fd69 	bl	801a81c <rshift>
 801ad4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ad4e:	3501      	adds	r5, #1
 801ad50:	42ab      	cmp	r3, r5
 801ad52:	f6ff aed0 	blt.w	801aaf6 <__gethex+0x20a>
 801ad56:	2701      	movs	r7, #1
 801ad58:	e7c0      	b.n	801acdc <__gethex+0x3f0>
 801ad5a:	f016 061f 	ands.w	r6, r6, #31
 801ad5e:	d0fa      	beq.n	801ad56 <__gethex+0x46a>
 801ad60:	4453      	add	r3, sl
 801ad62:	f1c6 0620 	rsb	r6, r6, #32
 801ad66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ad6a:	f000 f9e9 	bl	801b140 <__hi0bits>
 801ad6e:	42b0      	cmp	r0, r6
 801ad70:	dbe7      	blt.n	801ad42 <__gethex+0x456>
 801ad72:	e7f0      	b.n	801ad56 <__gethex+0x46a>
 801ad74:	0801d038 	.word	0x0801d038

0801ad78 <L_shift>:
 801ad78:	f1c2 0208 	rsb	r2, r2, #8
 801ad7c:	0092      	lsls	r2, r2, #2
 801ad7e:	b570      	push	{r4, r5, r6, lr}
 801ad80:	f1c2 0620 	rsb	r6, r2, #32
 801ad84:	6843      	ldr	r3, [r0, #4]
 801ad86:	6804      	ldr	r4, [r0, #0]
 801ad88:	fa03 f506 	lsl.w	r5, r3, r6
 801ad8c:	432c      	orrs	r4, r5
 801ad8e:	40d3      	lsrs	r3, r2
 801ad90:	6004      	str	r4, [r0, #0]
 801ad92:	f840 3f04 	str.w	r3, [r0, #4]!
 801ad96:	4288      	cmp	r0, r1
 801ad98:	d3f4      	bcc.n	801ad84 <L_shift+0xc>
 801ad9a:	bd70      	pop	{r4, r5, r6, pc}

0801ad9c <__match>:
 801ad9c:	b530      	push	{r4, r5, lr}
 801ad9e:	6803      	ldr	r3, [r0, #0]
 801ada0:	3301      	adds	r3, #1
 801ada2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ada6:	b914      	cbnz	r4, 801adae <__match+0x12>
 801ada8:	6003      	str	r3, [r0, #0]
 801adaa:	2001      	movs	r0, #1
 801adac:	bd30      	pop	{r4, r5, pc}
 801adae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801adb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801adb6:	2d19      	cmp	r5, #25
 801adb8:	bf98      	it	ls
 801adba:	3220      	addls	r2, #32
 801adbc:	42a2      	cmp	r2, r4
 801adbe:	d0f0      	beq.n	801ada2 <__match+0x6>
 801adc0:	2000      	movs	r0, #0
 801adc2:	e7f3      	b.n	801adac <__match+0x10>

0801adc4 <__hexnan>:
 801adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adc8:	680b      	ldr	r3, [r1, #0]
 801adca:	115e      	asrs	r6, r3, #5
 801adcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801add0:	f013 031f 	ands.w	r3, r3, #31
 801add4:	b087      	sub	sp, #28
 801add6:	bf18      	it	ne
 801add8:	3604      	addne	r6, #4
 801adda:	2500      	movs	r5, #0
 801addc:	1f37      	subs	r7, r6, #4
 801adde:	4690      	mov	r8, r2
 801ade0:	6802      	ldr	r2, [r0, #0]
 801ade2:	9301      	str	r3, [sp, #4]
 801ade4:	4682      	mov	sl, r0
 801ade6:	f846 5c04 	str.w	r5, [r6, #-4]
 801adea:	46b9      	mov	r9, r7
 801adec:	463c      	mov	r4, r7
 801adee:	9502      	str	r5, [sp, #8]
 801adf0:	46ab      	mov	fp, r5
 801adf2:	7851      	ldrb	r1, [r2, #1]
 801adf4:	1c53      	adds	r3, r2, #1
 801adf6:	9303      	str	r3, [sp, #12]
 801adf8:	b341      	cbz	r1, 801ae4c <__hexnan+0x88>
 801adfa:	4608      	mov	r0, r1
 801adfc:	9205      	str	r2, [sp, #20]
 801adfe:	9104      	str	r1, [sp, #16]
 801ae00:	f7ff fd5e 	bl	801a8c0 <__hexdig_fun>
 801ae04:	2800      	cmp	r0, #0
 801ae06:	d14f      	bne.n	801aea8 <__hexnan+0xe4>
 801ae08:	9904      	ldr	r1, [sp, #16]
 801ae0a:	9a05      	ldr	r2, [sp, #20]
 801ae0c:	2920      	cmp	r1, #32
 801ae0e:	d818      	bhi.n	801ae42 <__hexnan+0x7e>
 801ae10:	9b02      	ldr	r3, [sp, #8]
 801ae12:	459b      	cmp	fp, r3
 801ae14:	dd13      	ble.n	801ae3e <__hexnan+0x7a>
 801ae16:	454c      	cmp	r4, r9
 801ae18:	d206      	bcs.n	801ae28 <__hexnan+0x64>
 801ae1a:	2d07      	cmp	r5, #7
 801ae1c:	dc04      	bgt.n	801ae28 <__hexnan+0x64>
 801ae1e:	462a      	mov	r2, r5
 801ae20:	4649      	mov	r1, r9
 801ae22:	4620      	mov	r0, r4
 801ae24:	f7ff ffa8 	bl	801ad78 <L_shift>
 801ae28:	4544      	cmp	r4, r8
 801ae2a:	d950      	bls.n	801aece <__hexnan+0x10a>
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	f1a4 0904 	sub.w	r9, r4, #4
 801ae32:	f844 3c04 	str.w	r3, [r4, #-4]
 801ae36:	f8cd b008 	str.w	fp, [sp, #8]
 801ae3a:	464c      	mov	r4, r9
 801ae3c:	461d      	mov	r5, r3
 801ae3e:	9a03      	ldr	r2, [sp, #12]
 801ae40:	e7d7      	b.n	801adf2 <__hexnan+0x2e>
 801ae42:	2929      	cmp	r1, #41	; 0x29
 801ae44:	d156      	bne.n	801aef4 <__hexnan+0x130>
 801ae46:	3202      	adds	r2, #2
 801ae48:	f8ca 2000 	str.w	r2, [sl]
 801ae4c:	f1bb 0f00 	cmp.w	fp, #0
 801ae50:	d050      	beq.n	801aef4 <__hexnan+0x130>
 801ae52:	454c      	cmp	r4, r9
 801ae54:	d206      	bcs.n	801ae64 <__hexnan+0xa0>
 801ae56:	2d07      	cmp	r5, #7
 801ae58:	dc04      	bgt.n	801ae64 <__hexnan+0xa0>
 801ae5a:	462a      	mov	r2, r5
 801ae5c:	4649      	mov	r1, r9
 801ae5e:	4620      	mov	r0, r4
 801ae60:	f7ff ff8a 	bl	801ad78 <L_shift>
 801ae64:	4544      	cmp	r4, r8
 801ae66:	d934      	bls.n	801aed2 <__hexnan+0x10e>
 801ae68:	f1a8 0204 	sub.w	r2, r8, #4
 801ae6c:	4623      	mov	r3, r4
 801ae6e:	f853 1b04 	ldr.w	r1, [r3], #4
 801ae72:	f842 1f04 	str.w	r1, [r2, #4]!
 801ae76:	429f      	cmp	r7, r3
 801ae78:	d2f9      	bcs.n	801ae6e <__hexnan+0xaa>
 801ae7a:	1b3b      	subs	r3, r7, r4
 801ae7c:	f023 0303 	bic.w	r3, r3, #3
 801ae80:	3304      	adds	r3, #4
 801ae82:	3401      	adds	r4, #1
 801ae84:	3e03      	subs	r6, #3
 801ae86:	42b4      	cmp	r4, r6
 801ae88:	bf88      	it	hi
 801ae8a:	2304      	movhi	r3, #4
 801ae8c:	4443      	add	r3, r8
 801ae8e:	2200      	movs	r2, #0
 801ae90:	f843 2b04 	str.w	r2, [r3], #4
 801ae94:	429f      	cmp	r7, r3
 801ae96:	d2fb      	bcs.n	801ae90 <__hexnan+0xcc>
 801ae98:	683b      	ldr	r3, [r7, #0]
 801ae9a:	b91b      	cbnz	r3, 801aea4 <__hexnan+0xe0>
 801ae9c:	4547      	cmp	r7, r8
 801ae9e:	d127      	bne.n	801aef0 <__hexnan+0x12c>
 801aea0:	2301      	movs	r3, #1
 801aea2:	603b      	str	r3, [r7, #0]
 801aea4:	2005      	movs	r0, #5
 801aea6:	e026      	b.n	801aef6 <__hexnan+0x132>
 801aea8:	3501      	adds	r5, #1
 801aeaa:	2d08      	cmp	r5, #8
 801aeac:	f10b 0b01 	add.w	fp, fp, #1
 801aeb0:	dd06      	ble.n	801aec0 <__hexnan+0xfc>
 801aeb2:	4544      	cmp	r4, r8
 801aeb4:	d9c3      	bls.n	801ae3e <__hexnan+0x7a>
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	f844 3c04 	str.w	r3, [r4, #-4]
 801aebc:	2501      	movs	r5, #1
 801aebe:	3c04      	subs	r4, #4
 801aec0:	6822      	ldr	r2, [r4, #0]
 801aec2:	f000 000f 	and.w	r0, r0, #15
 801aec6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801aeca:	6022      	str	r2, [r4, #0]
 801aecc:	e7b7      	b.n	801ae3e <__hexnan+0x7a>
 801aece:	2508      	movs	r5, #8
 801aed0:	e7b5      	b.n	801ae3e <__hexnan+0x7a>
 801aed2:	9b01      	ldr	r3, [sp, #4]
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d0df      	beq.n	801ae98 <__hexnan+0xd4>
 801aed8:	f04f 32ff 	mov.w	r2, #4294967295
 801aedc:	f1c3 0320 	rsb	r3, r3, #32
 801aee0:	fa22 f303 	lsr.w	r3, r2, r3
 801aee4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801aee8:	401a      	ands	r2, r3
 801aeea:	f846 2c04 	str.w	r2, [r6, #-4]
 801aeee:	e7d3      	b.n	801ae98 <__hexnan+0xd4>
 801aef0:	3f04      	subs	r7, #4
 801aef2:	e7d1      	b.n	801ae98 <__hexnan+0xd4>
 801aef4:	2004      	movs	r0, #4
 801aef6:	b007      	add	sp, #28
 801aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aefc <_localeconv_r>:
 801aefc:	4800      	ldr	r0, [pc, #0]	; (801af00 <_localeconv_r+0x4>)
 801aefe:	4770      	bx	lr
 801af00:	24000258 	.word	0x24000258

0801af04 <_lseek_r>:
 801af04:	b538      	push	{r3, r4, r5, lr}
 801af06:	4d07      	ldr	r5, [pc, #28]	; (801af24 <_lseek_r+0x20>)
 801af08:	4604      	mov	r4, r0
 801af0a:	4608      	mov	r0, r1
 801af0c:	4611      	mov	r1, r2
 801af0e:	2200      	movs	r2, #0
 801af10:	602a      	str	r2, [r5, #0]
 801af12:	461a      	mov	r2, r3
 801af14:	f7e7 fddc 	bl	8002ad0 <_lseek>
 801af18:	1c43      	adds	r3, r0, #1
 801af1a:	d102      	bne.n	801af22 <_lseek_r+0x1e>
 801af1c:	682b      	ldr	r3, [r5, #0]
 801af1e:	b103      	cbz	r3, 801af22 <_lseek_r+0x1e>
 801af20:	6023      	str	r3, [r4, #0]
 801af22:	bd38      	pop	{r3, r4, r5, pc}
 801af24:	24002b70 	.word	0x24002b70

0801af28 <malloc>:
 801af28:	4b02      	ldr	r3, [pc, #8]	; (801af34 <malloc+0xc>)
 801af2a:	4601      	mov	r1, r0
 801af2c:	6818      	ldr	r0, [r3, #0]
 801af2e:	f000 bd55 	b.w	801b9dc <_malloc_r>
 801af32:	bf00      	nop
 801af34:	24000100 	.word	0x24000100

0801af38 <__ascii_mbtowc>:
 801af38:	b082      	sub	sp, #8
 801af3a:	b901      	cbnz	r1, 801af3e <__ascii_mbtowc+0x6>
 801af3c:	a901      	add	r1, sp, #4
 801af3e:	b142      	cbz	r2, 801af52 <__ascii_mbtowc+0x1a>
 801af40:	b14b      	cbz	r3, 801af56 <__ascii_mbtowc+0x1e>
 801af42:	7813      	ldrb	r3, [r2, #0]
 801af44:	600b      	str	r3, [r1, #0]
 801af46:	7812      	ldrb	r2, [r2, #0]
 801af48:	1e10      	subs	r0, r2, #0
 801af4a:	bf18      	it	ne
 801af4c:	2001      	movne	r0, #1
 801af4e:	b002      	add	sp, #8
 801af50:	4770      	bx	lr
 801af52:	4610      	mov	r0, r2
 801af54:	e7fb      	b.n	801af4e <__ascii_mbtowc+0x16>
 801af56:	f06f 0001 	mvn.w	r0, #1
 801af5a:	e7f8      	b.n	801af4e <__ascii_mbtowc+0x16>

0801af5c <_Balloc>:
 801af5c:	b570      	push	{r4, r5, r6, lr}
 801af5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801af60:	4604      	mov	r4, r0
 801af62:	460d      	mov	r5, r1
 801af64:	b976      	cbnz	r6, 801af84 <_Balloc+0x28>
 801af66:	2010      	movs	r0, #16
 801af68:	f7ff ffde 	bl	801af28 <malloc>
 801af6c:	4602      	mov	r2, r0
 801af6e:	6260      	str	r0, [r4, #36]	; 0x24
 801af70:	b920      	cbnz	r0, 801af7c <_Balloc+0x20>
 801af72:	4b18      	ldr	r3, [pc, #96]	; (801afd4 <_Balloc+0x78>)
 801af74:	4818      	ldr	r0, [pc, #96]	; (801afd8 <_Balloc+0x7c>)
 801af76:	2166      	movs	r1, #102	; 0x66
 801af78:	f000 ff4c 	bl	801be14 <__assert_func>
 801af7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801af80:	6006      	str	r6, [r0, #0]
 801af82:	60c6      	str	r6, [r0, #12]
 801af84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801af86:	68f3      	ldr	r3, [r6, #12]
 801af88:	b183      	cbz	r3, 801afac <_Balloc+0x50>
 801af8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801af8c:	68db      	ldr	r3, [r3, #12]
 801af8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801af92:	b9b8      	cbnz	r0, 801afc4 <_Balloc+0x68>
 801af94:	2101      	movs	r1, #1
 801af96:	fa01 f605 	lsl.w	r6, r1, r5
 801af9a:	1d72      	adds	r2, r6, #5
 801af9c:	0092      	lsls	r2, r2, #2
 801af9e:	4620      	mov	r0, r4
 801afa0:	f000 fc9a 	bl	801b8d8 <_calloc_r>
 801afa4:	b160      	cbz	r0, 801afc0 <_Balloc+0x64>
 801afa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801afaa:	e00e      	b.n	801afca <_Balloc+0x6e>
 801afac:	2221      	movs	r2, #33	; 0x21
 801afae:	2104      	movs	r1, #4
 801afb0:	4620      	mov	r0, r4
 801afb2:	f000 fc91 	bl	801b8d8 <_calloc_r>
 801afb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801afb8:	60f0      	str	r0, [r6, #12]
 801afba:	68db      	ldr	r3, [r3, #12]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d1e4      	bne.n	801af8a <_Balloc+0x2e>
 801afc0:	2000      	movs	r0, #0
 801afc2:	bd70      	pop	{r4, r5, r6, pc}
 801afc4:	6802      	ldr	r2, [r0, #0]
 801afc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801afca:	2300      	movs	r3, #0
 801afcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801afd0:	e7f7      	b.n	801afc2 <_Balloc+0x66>
 801afd2:	bf00      	nop
 801afd4:	0801cfc6 	.word	0x0801cfc6
 801afd8:	0801d0c4 	.word	0x0801d0c4

0801afdc <_Bfree>:
 801afdc:	b570      	push	{r4, r5, r6, lr}
 801afde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801afe0:	4605      	mov	r5, r0
 801afe2:	460c      	mov	r4, r1
 801afe4:	b976      	cbnz	r6, 801b004 <_Bfree+0x28>
 801afe6:	2010      	movs	r0, #16
 801afe8:	f7ff ff9e 	bl	801af28 <malloc>
 801afec:	4602      	mov	r2, r0
 801afee:	6268      	str	r0, [r5, #36]	; 0x24
 801aff0:	b920      	cbnz	r0, 801affc <_Bfree+0x20>
 801aff2:	4b09      	ldr	r3, [pc, #36]	; (801b018 <_Bfree+0x3c>)
 801aff4:	4809      	ldr	r0, [pc, #36]	; (801b01c <_Bfree+0x40>)
 801aff6:	218a      	movs	r1, #138	; 0x8a
 801aff8:	f000 ff0c 	bl	801be14 <__assert_func>
 801affc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b000:	6006      	str	r6, [r0, #0]
 801b002:	60c6      	str	r6, [r0, #12]
 801b004:	b13c      	cbz	r4, 801b016 <_Bfree+0x3a>
 801b006:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b008:	6862      	ldr	r2, [r4, #4]
 801b00a:	68db      	ldr	r3, [r3, #12]
 801b00c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b010:	6021      	str	r1, [r4, #0]
 801b012:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b016:	bd70      	pop	{r4, r5, r6, pc}
 801b018:	0801cfc6 	.word	0x0801cfc6
 801b01c:	0801d0c4 	.word	0x0801d0c4

0801b020 <__multadd>:
 801b020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b024:	690d      	ldr	r5, [r1, #16]
 801b026:	4607      	mov	r7, r0
 801b028:	460c      	mov	r4, r1
 801b02a:	461e      	mov	r6, r3
 801b02c:	f101 0c14 	add.w	ip, r1, #20
 801b030:	2000      	movs	r0, #0
 801b032:	f8dc 3000 	ldr.w	r3, [ip]
 801b036:	b299      	uxth	r1, r3
 801b038:	fb02 6101 	mla	r1, r2, r1, r6
 801b03c:	0c1e      	lsrs	r6, r3, #16
 801b03e:	0c0b      	lsrs	r3, r1, #16
 801b040:	fb02 3306 	mla	r3, r2, r6, r3
 801b044:	b289      	uxth	r1, r1
 801b046:	3001      	adds	r0, #1
 801b048:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b04c:	4285      	cmp	r5, r0
 801b04e:	f84c 1b04 	str.w	r1, [ip], #4
 801b052:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b056:	dcec      	bgt.n	801b032 <__multadd+0x12>
 801b058:	b30e      	cbz	r6, 801b09e <__multadd+0x7e>
 801b05a:	68a3      	ldr	r3, [r4, #8]
 801b05c:	42ab      	cmp	r3, r5
 801b05e:	dc19      	bgt.n	801b094 <__multadd+0x74>
 801b060:	6861      	ldr	r1, [r4, #4]
 801b062:	4638      	mov	r0, r7
 801b064:	3101      	adds	r1, #1
 801b066:	f7ff ff79 	bl	801af5c <_Balloc>
 801b06a:	4680      	mov	r8, r0
 801b06c:	b928      	cbnz	r0, 801b07a <__multadd+0x5a>
 801b06e:	4602      	mov	r2, r0
 801b070:	4b0c      	ldr	r3, [pc, #48]	; (801b0a4 <__multadd+0x84>)
 801b072:	480d      	ldr	r0, [pc, #52]	; (801b0a8 <__multadd+0x88>)
 801b074:	21b5      	movs	r1, #181	; 0xb5
 801b076:	f000 fecd 	bl	801be14 <__assert_func>
 801b07a:	6922      	ldr	r2, [r4, #16]
 801b07c:	3202      	adds	r2, #2
 801b07e:	f104 010c 	add.w	r1, r4, #12
 801b082:	0092      	lsls	r2, r2, #2
 801b084:	300c      	adds	r0, #12
 801b086:	f7fd f887 	bl	8018198 <memcpy>
 801b08a:	4621      	mov	r1, r4
 801b08c:	4638      	mov	r0, r7
 801b08e:	f7ff ffa5 	bl	801afdc <_Bfree>
 801b092:	4644      	mov	r4, r8
 801b094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b098:	3501      	adds	r5, #1
 801b09a:	615e      	str	r6, [r3, #20]
 801b09c:	6125      	str	r5, [r4, #16]
 801b09e:	4620      	mov	r0, r4
 801b0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0a4:	0801d038 	.word	0x0801d038
 801b0a8:	0801d0c4 	.word	0x0801d0c4

0801b0ac <__s2b>:
 801b0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0b0:	460c      	mov	r4, r1
 801b0b2:	4615      	mov	r5, r2
 801b0b4:	461f      	mov	r7, r3
 801b0b6:	2209      	movs	r2, #9
 801b0b8:	3308      	adds	r3, #8
 801b0ba:	4606      	mov	r6, r0
 801b0bc:	fb93 f3f2 	sdiv	r3, r3, r2
 801b0c0:	2100      	movs	r1, #0
 801b0c2:	2201      	movs	r2, #1
 801b0c4:	429a      	cmp	r2, r3
 801b0c6:	db09      	blt.n	801b0dc <__s2b+0x30>
 801b0c8:	4630      	mov	r0, r6
 801b0ca:	f7ff ff47 	bl	801af5c <_Balloc>
 801b0ce:	b940      	cbnz	r0, 801b0e2 <__s2b+0x36>
 801b0d0:	4602      	mov	r2, r0
 801b0d2:	4b19      	ldr	r3, [pc, #100]	; (801b138 <__s2b+0x8c>)
 801b0d4:	4819      	ldr	r0, [pc, #100]	; (801b13c <__s2b+0x90>)
 801b0d6:	21ce      	movs	r1, #206	; 0xce
 801b0d8:	f000 fe9c 	bl	801be14 <__assert_func>
 801b0dc:	0052      	lsls	r2, r2, #1
 801b0de:	3101      	adds	r1, #1
 801b0e0:	e7f0      	b.n	801b0c4 <__s2b+0x18>
 801b0e2:	9b08      	ldr	r3, [sp, #32]
 801b0e4:	6143      	str	r3, [r0, #20]
 801b0e6:	2d09      	cmp	r5, #9
 801b0e8:	f04f 0301 	mov.w	r3, #1
 801b0ec:	6103      	str	r3, [r0, #16]
 801b0ee:	dd16      	ble.n	801b11e <__s2b+0x72>
 801b0f0:	f104 0909 	add.w	r9, r4, #9
 801b0f4:	46c8      	mov	r8, r9
 801b0f6:	442c      	add	r4, r5
 801b0f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b0fc:	4601      	mov	r1, r0
 801b0fe:	3b30      	subs	r3, #48	; 0x30
 801b100:	220a      	movs	r2, #10
 801b102:	4630      	mov	r0, r6
 801b104:	f7ff ff8c 	bl	801b020 <__multadd>
 801b108:	45a0      	cmp	r8, r4
 801b10a:	d1f5      	bne.n	801b0f8 <__s2b+0x4c>
 801b10c:	f1a5 0408 	sub.w	r4, r5, #8
 801b110:	444c      	add	r4, r9
 801b112:	1b2d      	subs	r5, r5, r4
 801b114:	1963      	adds	r3, r4, r5
 801b116:	42bb      	cmp	r3, r7
 801b118:	db04      	blt.n	801b124 <__s2b+0x78>
 801b11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b11e:	340a      	adds	r4, #10
 801b120:	2509      	movs	r5, #9
 801b122:	e7f6      	b.n	801b112 <__s2b+0x66>
 801b124:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b128:	4601      	mov	r1, r0
 801b12a:	3b30      	subs	r3, #48	; 0x30
 801b12c:	220a      	movs	r2, #10
 801b12e:	4630      	mov	r0, r6
 801b130:	f7ff ff76 	bl	801b020 <__multadd>
 801b134:	e7ee      	b.n	801b114 <__s2b+0x68>
 801b136:	bf00      	nop
 801b138:	0801d038 	.word	0x0801d038
 801b13c:	0801d0c4 	.word	0x0801d0c4

0801b140 <__hi0bits>:
 801b140:	0c03      	lsrs	r3, r0, #16
 801b142:	041b      	lsls	r3, r3, #16
 801b144:	b9d3      	cbnz	r3, 801b17c <__hi0bits+0x3c>
 801b146:	0400      	lsls	r0, r0, #16
 801b148:	2310      	movs	r3, #16
 801b14a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b14e:	bf04      	itt	eq
 801b150:	0200      	lsleq	r0, r0, #8
 801b152:	3308      	addeq	r3, #8
 801b154:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b158:	bf04      	itt	eq
 801b15a:	0100      	lsleq	r0, r0, #4
 801b15c:	3304      	addeq	r3, #4
 801b15e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b162:	bf04      	itt	eq
 801b164:	0080      	lsleq	r0, r0, #2
 801b166:	3302      	addeq	r3, #2
 801b168:	2800      	cmp	r0, #0
 801b16a:	db05      	blt.n	801b178 <__hi0bits+0x38>
 801b16c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b170:	f103 0301 	add.w	r3, r3, #1
 801b174:	bf08      	it	eq
 801b176:	2320      	moveq	r3, #32
 801b178:	4618      	mov	r0, r3
 801b17a:	4770      	bx	lr
 801b17c:	2300      	movs	r3, #0
 801b17e:	e7e4      	b.n	801b14a <__hi0bits+0xa>

0801b180 <__lo0bits>:
 801b180:	6803      	ldr	r3, [r0, #0]
 801b182:	f013 0207 	ands.w	r2, r3, #7
 801b186:	4601      	mov	r1, r0
 801b188:	d00b      	beq.n	801b1a2 <__lo0bits+0x22>
 801b18a:	07da      	lsls	r2, r3, #31
 801b18c:	d423      	bmi.n	801b1d6 <__lo0bits+0x56>
 801b18e:	0798      	lsls	r0, r3, #30
 801b190:	bf49      	itett	mi
 801b192:	085b      	lsrmi	r3, r3, #1
 801b194:	089b      	lsrpl	r3, r3, #2
 801b196:	2001      	movmi	r0, #1
 801b198:	600b      	strmi	r3, [r1, #0]
 801b19a:	bf5c      	itt	pl
 801b19c:	600b      	strpl	r3, [r1, #0]
 801b19e:	2002      	movpl	r0, #2
 801b1a0:	4770      	bx	lr
 801b1a2:	b298      	uxth	r0, r3
 801b1a4:	b9a8      	cbnz	r0, 801b1d2 <__lo0bits+0x52>
 801b1a6:	0c1b      	lsrs	r3, r3, #16
 801b1a8:	2010      	movs	r0, #16
 801b1aa:	b2da      	uxtb	r2, r3
 801b1ac:	b90a      	cbnz	r2, 801b1b2 <__lo0bits+0x32>
 801b1ae:	3008      	adds	r0, #8
 801b1b0:	0a1b      	lsrs	r3, r3, #8
 801b1b2:	071a      	lsls	r2, r3, #28
 801b1b4:	bf04      	itt	eq
 801b1b6:	091b      	lsreq	r3, r3, #4
 801b1b8:	3004      	addeq	r0, #4
 801b1ba:	079a      	lsls	r2, r3, #30
 801b1bc:	bf04      	itt	eq
 801b1be:	089b      	lsreq	r3, r3, #2
 801b1c0:	3002      	addeq	r0, #2
 801b1c2:	07da      	lsls	r2, r3, #31
 801b1c4:	d403      	bmi.n	801b1ce <__lo0bits+0x4e>
 801b1c6:	085b      	lsrs	r3, r3, #1
 801b1c8:	f100 0001 	add.w	r0, r0, #1
 801b1cc:	d005      	beq.n	801b1da <__lo0bits+0x5a>
 801b1ce:	600b      	str	r3, [r1, #0]
 801b1d0:	4770      	bx	lr
 801b1d2:	4610      	mov	r0, r2
 801b1d4:	e7e9      	b.n	801b1aa <__lo0bits+0x2a>
 801b1d6:	2000      	movs	r0, #0
 801b1d8:	4770      	bx	lr
 801b1da:	2020      	movs	r0, #32
 801b1dc:	4770      	bx	lr
	...

0801b1e0 <__i2b>:
 801b1e0:	b510      	push	{r4, lr}
 801b1e2:	460c      	mov	r4, r1
 801b1e4:	2101      	movs	r1, #1
 801b1e6:	f7ff feb9 	bl	801af5c <_Balloc>
 801b1ea:	4602      	mov	r2, r0
 801b1ec:	b928      	cbnz	r0, 801b1fa <__i2b+0x1a>
 801b1ee:	4b05      	ldr	r3, [pc, #20]	; (801b204 <__i2b+0x24>)
 801b1f0:	4805      	ldr	r0, [pc, #20]	; (801b208 <__i2b+0x28>)
 801b1f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b1f6:	f000 fe0d 	bl	801be14 <__assert_func>
 801b1fa:	2301      	movs	r3, #1
 801b1fc:	6144      	str	r4, [r0, #20]
 801b1fe:	6103      	str	r3, [r0, #16]
 801b200:	bd10      	pop	{r4, pc}
 801b202:	bf00      	nop
 801b204:	0801d038 	.word	0x0801d038
 801b208:	0801d0c4 	.word	0x0801d0c4

0801b20c <__multiply>:
 801b20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b210:	4691      	mov	r9, r2
 801b212:	690a      	ldr	r2, [r1, #16]
 801b214:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b218:	429a      	cmp	r2, r3
 801b21a:	bfb8      	it	lt
 801b21c:	460b      	movlt	r3, r1
 801b21e:	460c      	mov	r4, r1
 801b220:	bfbc      	itt	lt
 801b222:	464c      	movlt	r4, r9
 801b224:	4699      	movlt	r9, r3
 801b226:	6927      	ldr	r7, [r4, #16]
 801b228:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b22c:	68a3      	ldr	r3, [r4, #8]
 801b22e:	6861      	ldr	r1, [r4, #4]
 801b230:	eb07 060a 	add.w	r6, r7, sl
 801b234:	42b3      	cmp	r3, r6
 801b236:	b085      	sub	sp, #20
 801b238:	bfb8      	it	lt
 801b23a:	3101      	addlt	r1, #1
 801b23c:	f7ff fe8e 	bl	801af5c <_Balloc>
 801b240:	b930      	cbnz	r0, 801b250 <__multiply+0x44>
 801b242:	4602      	mov	r2, r0
 801b244:	4b44      	ldr	r3, [pc, #272]	; (801b358 <__multiply+0x14c>)
 801b246:	4845      	ldr	r0, [pc, #276]	; (801b35c <__multiply+0x150>)
 801b248:	f240 115d 	movw	r1, #349	; 0x15d
 801b24c:	f000 fde2 	bl	801be14 <__assert_func>
 801b250:	f100 0514 	add.w	r5, r0, #20
 801b254:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b258:	462b      	mov	r3, r5
 801b25a:	2200      	movs	r2, #0
 801b25c:	4543      	cmp	r3, r8
 801b25e:	d321      	bcc.n	801b2a4 <__multiply+0x98>
 801b260:	f104 0314 	add.w	r3, r4, #20
 801b264:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b268:	f109 0314 	add.w	r3, r9, #20
 801b26c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b270:	9202      	str	r2, [sp, #8]
 801b272:	1b3a      	subs	r2, r7, r4
 801b274:	3a15      	subs	r2, #21
 801b276:	f022 0203 	bic.w	r2, r2, #3
 801b27a:	3204      	adds	r2, #4
 801b27c:	f104 0115 	add.w	r1, r4, #21
 801b280:	428f      	cmp	r7, r1
 801b282:	bf38      	it	cc
 801b284:	2204      	movcc	r2, #4
 801b286:	9201      	str	r2, [sp, #4]
 801b288:	9a02      	ldr	r2, [sp, #8]
 801b28a:	9303      	str	r3, [sp, #12]
 801b28c:	429a      	cmp	r2, r3
 801b28e:	d80c      	bhi.n	801b2aa <__multiply+0x9e>
 801b290:	2e00      	cmp	r6, #0
 801b292:	dd03      	ble.n	801b29c <__multiply+0x90>
 801b294:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d05a      	beq.n	801b352 <__multiply+0x146>
 801b29c:	6106      	str	r6, [r0, #16]
 801b29e:	b005      	add	sp, #20
 801b2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2a4:	f843 2b04 	str.w	r2, [r3], #4
 801b2a8:	e7d8      	b.n	801b25c <__multiply+0x50>
 801b2aa:	f8b3 a000 	ldrh.w	sl, [r3]
 801b2ae:	f1ba 0f00 	cmp.w	sl, #0
 801b2b2:	d024      	beq.n	801b2fe <__multiply+0xf2>
 801b2b4:	f104 0e14 	add.w	lr, r4, #20
 801b2b8:	46a9      	mov	r9, r5
 801b2ba:	f04f 0c00 	mov.w	ip, #0
 801b2be:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b2c2:	f8d9 1000 	ldr.w	r1, [r9]
 801b2c6:	fa1f fb82 	uxth.w	fp, r2
 801b2ca:	b289      	uxth	r1, r1
 801b2cc:	fb0a 110b 	mla	r1, sl, fp, r1
 801b2d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b2d4:	f8d9 2000 	ldr.w	r2, [r9]
 801b2d8:	4461      	add	r1, ip
 801b2da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b2de:	fb0a c20b 	mla	r2, sl, fp, ip
 801b2e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b2e6:	b289      	uxth	r1, r1
 801b2e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b2ec:	4577      	cmp	r7, lr
 801b2ee:	f849 1b04 	str.w	r1, [r9], #4
 801b2f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b2f6:	d8e2      	bhi.n	801b2be <__multiply+0xb2>
 801b2f8:	9a01      	ldr	r2, [sp, #4]
 801b2fa:	f845 c002 	str.w	ip, [r5, r2]
 801b2fe:	9a03      	ldr	r2, [sp, #12]
 801b300:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b304:	3304      	adds	r3, #4
 801b306:	f1b9 0f00 	cmp.w	r9, #0
 801b30a:	d020      	beq.n	801b34e <__multiply+0x142>
 801b30c:	6829      	ldr	r1, [r5, #0]
 801b30e:	f104 0c14 	add.w	ip, r4, #20
 801b312:	46ae      	mov	lr, r5
 801b314:	f04f 0a00 	mov.w	sl, #0
 801b318:	f8bc b000 	ldrh.w	fp, [ip]
 801b31c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b320:	fb09 220b 	mla	r2, r9, fp, r2
 801b324:	4492      	add	sl, r2
 801b326:	b289      	uxth	r1, r1
 801b328:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801b32c:	f84e 1b04 	str.w	r1, [lr], #4
 801b330:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b334:	f8be 1000 	ldrh.w	r1, [lr]
 801b338:	0c12      	lsrs	r2, r2, #16
 801b33a:	fb09 1102 	mla	r1, r9, r2, r1
 801b33e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801b342:	4567      	cmp	r7, ip
 801b344:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b348:	d8e6      	bhi.n	801b318 <__multiply+0x10c>
 801b34a:	9a01      	ldr	r2, [sp, #4]
 801b34c:	50a9      	str	r1, [r5, r2]
 801b34e:	3504      	adds	r5, #4
 801b350:	e79a      	b.n	801b288 <__multiply+0x7c>
 801b352:	3e01      	subs	r6, #1
 801b354:	e79c      	b.n	801b290 <__multiply+0x84>
 801b356:	bf00      	nop
 801b358:	0801d038 	.word	0x0801d038
 801b35c:	0801d0c4 	.word	0x0801d0c4

0801b360 <__pow5mult>:
 801b360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b364:	4615      	mov	r5, r2
 801b366:	f012 0203 	ands.w	r2, r2, #3
 801b36a:	4606      	mov	r6, r0
 801b36c:	460f      	mov	r7, r1
 801b36e:	d007      	beq.n	801b380 <__pow5mult+0x20>
 801b370:	4c25      	ldr	r4, [pc, #148]	; (801b408 <__pow5mult+0xa8>)
 801b372:	3a01      	subs	r2, #1
 801b374:	2300      	movs	r3, #0
 801b376:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b37a:	f7ff fe51 	bl	801b020 <__multadd>
 801b37e:	4607      	mov	r7, r0
 801b380:	10ad      	asrs	r5, r5, #2
 801b382:	d03d      	beq.n	801b400 <__pow5mult+0xa0>
 801b384:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b386:	b97c      	cbnz	r4, 801b3a8 <__pow5mult+0x48>
 801b388:	2010      	movs	r0, #16
 801b38a:	f7ff fdcd 	bl	801af28 <malloc>
 801b38e:	4602      	mov	r2, r0
 801b390:	6270      	str	r0, [r6, #36]	; 0x24
 801b392:	b928      	cbnz	r0, 801b3a0 <__pow5mult+0x40>
 801b394:	4b1d      	ldr	r3, [pc, #116]	; (801b40c <__pow5mult+0xac>)
 801b396:	481e      	ldr	r0, [pc, #120]	; (801b410 <__pow5mult+0xb0>)
 801b398:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b39c:	f000 fd3a 	bl	801be14 <__assert_func>
 801b3a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b3a4:	6004      	str	r4, [r0, #0]
 801b3a6:	60c4      	str	r4, [r0, #12]
 801b3a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b3ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b3b0:	b94c      	cbnz	r4, 801b3c6 <__pow5mult+0x66>
 801b3b2:	f240 2171 	movw	r1, #625	; 0x271
 801b3b6:	4630      	mov	r0, r6
 801b3b8:	f7ff ff12 	bl	801b1e0 <__i2b>
 801b3bc:	2300      	movs	r3, #0
 801b3be:	f8c8 0008 	str.w	r0, [r8, #8]
 801b3c2:	4604      	mov	r4, r0
 801b3c4:	6003      	str	r3, [r0, #0]
 801b3c6:	f04f 0900 	mov.w	r9, #0
 801b3ca:	07eb      	lsls	r3, r5, #31
 801b3cc:	d50a      	bpl.n	801b3e4 <__pow5mult+0x84>
 801b3ce:	4639      	mov	r1, r7
 801b3d0:	4622      	mov	r2, r4
 801b3d2:	4630      	mov	r0, r6
 801b3d4:	f7ff ff1a 	bl	801b20c <__multiply>
 801b3d8:	4639      	mov	r1, r7
 801b3da:	4680      	mov	r8, r0
 801b3dc:	4630      	mov	r0, r6
 801b3de:	f7ff fdfd 	bl	801afdc <_Bfree>
 801b3e2:	4647      	mov	r7, r8
 801b3e4:	106d      	asrs	r5, r5, #1
 801b3e6:	d00b      	beq.n	801b400 <__pow5mult+0xa0>
 801b3e8:	6820      	ldr	r0, [r4, #0]
 801b3ea:	b938      	cbnz	r0, 801b3fc <__pow5mult+0x9c>
 801b3ec:	4622      	mov	r2, r4
 801b3ee:	4621      	mov	r1, r4
 801b3f0:	4630      	mov	r0, r6
 801b3f2:	f7ff ff0b 	bl	801b20c <__multiply>
 801b3f6:	6020      	str	r0, [r4, #0]
 801b3f8:	f8c0 9000 	str.w	r9, [r0]
 801b3fc:	4604      	mov	r4, r0
 801b3fe:	e7e4      	b.n	801b3ca <__pow5mult+0x6a>
 801b400:	4638      	mov	r0, r7
 801b402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b406:	bf00      	nop
 801b408:	0801d210 	.word	0x0801d210
 801b40c:	0801cfc6 	.word	0x0801cfc6
 801b410:	0801d0c4 	.word	0x0801d0c4

0801b414 <__lshift>:
 801b414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b418:	460c      	mov	r4, r1
 801b41a:	6849      	ldr	r1, [r1, #4]
 801b41c:	6923      	ldr	r3, [r4, #16]
 801b41e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b422:	68a3      	ldr	r3, [r4, #8]
 801b424:	4607      	mov	r7, r0
 801b426:	4691      	mov	r9, r2
 801b428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b42c:	f108 0601 	add.w	r6, r8, #1
 801b430:	42b3      	cmp	r3, r6
 801b432:	db0b      	blt.n	801b44c <__lshift+0x38>
 801b434:	4638      	mov	r0, r7
 801b436:	f7ff fd91 	bl	801af5c <_Balloc>
 801b43a:	4605      	mov	r5, r0
 801b43c:	b948      	cbnz	r0, 801b452 <__lshift+0x3e>
 801b43e:	4602      	mov	r2, r0
 801b440:	4b2a      	ldr	r3, [pc, #168]	; (801b4ec <__lshift+0xd8>)
 801b442:	482b      	ldr	r0, [pc, #172]	; (801b4f0 <__lshift+0xdc>)
 801b444:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b448:	f000 fce4 	bl	801be14 <__assert_func>
 801b44c:	3101      	adds	r1, #1
 801b44e:	005b      	lsls	r3, r3, #1
 801b450:	e7ee      	b.n	801b430 <__lshift+0x1c>
 801b452:	2300      	movs	r3, #0
 801b454:	f100 0114 	add.w	r1, r0, #20
 801b458:	f100 0210 	add.w	r2, r0, #16
 801b45c:	4618      	mov	r0, r3
 801b45e:	4553      	cmp	r3, sl
 801b460:	db37      	blt.n	801b4d2 <__lshift+0xbe>
 801b462:	6920      	ldr	r0, [r4, #16]
 801b464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b468:	f104 0314 	add.w	r3, r4, #20
 801b46c:	f019 091f 	ands.w	r9, r9, #31
 801b470:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b474:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b478:	d02f      	beq.n	801b4da <__lshift+0xc6>
 801b47a:	f1c9 0e20 	rsb	lr, r9, #32
 801b47e:	468a      	mov	sl, r1
 801b480:	f04f 0c00 	mov.w	ip, #0
 801b484:	681a      	ldr	r2, [r3, #0]
 801b486:	fa02 f209 	lsl.w	r2, r2, r9
 801b48a:	ea42 020c 	orr.w	r2, r2, ip
 801b48e:	f84a 2b04 	str.w	r2, [sl], #4
 801b492:	f853 2b04 	ldr.w	r2, [r3], #4
 801b496:	4298      	cmp	r0, r3
 801b498:	fa22 fc0e 	lsr.w	ip, r2, lr
 801b49c:	d8f2      	bhi.n	801b484 <__lshift+0x70>
 801b49e:	1b03      	subs	r3, r0, r4
 801b4a0:	3b15      	subs	r3, #21
 801b4a2:	f023 0303 	bic.w	r3, r3, #3
 801b4a6:	3304      	adds	r3, #4
 801b4a8:	f104 0215 	add.w	r2, r4, #21
 801b4ac:	4290      	cmp	r0, r2
 801b4ae:	bf38      	it	cc
 801b4b0:	2304      	movcc	r3, #4
 801b4b2:	f841 c003 	str.w	ip, [r1, r3]
 801b4b6:	f1bc 0f00 	cmp.w	ip, #0
 801b4ba:	d001      	beq.n	801b4c0 <__lshift+0xac>
 801b4bc:	f108 0602 	add.w	r6, r8, #2
 801b4c0:	3e01      	subs	r6, #1
 801b4c2:	4638      	mov	r0, r7
 801b4c4:	612e      	str	r6, [r5, #16]
 801b4c6:	4621      	mov	r1, r4
 801b4c8:	f7ff fd88 	bl	801afdc <_Bfree>
 801b4cc:	4628      	mov	r0, r5
 801b4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4d2:	f842 0f04 	str.w	r0, [r2, #4]!
 801b4d6:	3301      	adds	r3, #1
 801b4d8:	e7c1      	b.n	801b45e <__lshift+0x4a>
 801b4da:	3904      	subs	r1, #4
 801b4dc:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4e0:	f841 2f04 	str.w	r2, [r1, #4]!
 801b4e4:	4298      	cmp	r0, r3
 801b4e6:	d8f9      	bhi.n	801b4dc <__lshift+0xc8>
 801b4e8:	e7ea      	b.n	801b4c0 <__lshift+0xac>
 801b4ea:	bf00      	nop
 801b4ec:	0801d038 	.word	0x0801d038
 801b4f0:	0801d0c4 	.word	0x0801d0c4

0801b4f4 <__mcmp>:
 801b4f4:	b530      	push	{r4, r5, lr}
 801b4f6:	6902      	ldr	r2, [r0, #16]
 801b4f8:	690c      	ldr	r4, [r1, #16]
 801b4fa:	1b12      	subs	r2, r2, r4
 801b4fc:	d10e      	bne.n	801b51c <__mcmp+0x28>
 801b4fe:	f100 0314 	add.w	r3, r0, #20
 801b502:	3114      	adds	r1, #20
 801b504:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b508:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b50c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b510:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b514:	42a5      	cmp	r5, r4
 801b516:	d003      	beq.n	801b520 <__mcmp+0x2c>
 801b518:	d305      	bcc.n	801b526 <__mcmp+0x32>
 801b51a:	2201      	movs	r2, #1
 801b51c:	4610      	mov	r0, r2
 801b51e:	bd30      	pop	{r4, r5, pc}
 801b520:	4283      	cmp	r3, r0
 801b522:	d3f3      	bcc.n	801b50c <__mcmp+0x18>
 801b524:	e7fa      	b.n	801b51c <__mcmp+0x28>
 801b526:	f04f 32ff 	mov.w	r2, #4294967295
 801b52a:	e7f7      	b.n	801b51c <__mcmp+0x28>

0801b52c <__mdiff>:
 801b52c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b530:	460c      	mov	r4, r1
 801b532:	4606      	mov	r6, r0
 801b534:	4611      	mov	r1, r2
 801b536:	4620      	mov	r0, r4
 801b538:	4690      	mov	r8, r2
 801b53a:	f7ff ffdb 	bl	801b4f4 <__mcmp>
 801b53e:	1e05      	subs	r5, r0, #0
 801b540:	d110      	bne.n	801b564 <__mdiff+0x38>
 801b542:	4629      	mov	r1, r5
 801b544:	4630      	mov	r0, r6
 801b546:	f7ff fd09 	bl	801af5c <_Balloc>
 801b54a:	b930      	cbnz	r0, 801b55a <__mdiff+0x2e>
 801b54c:	4b3a      	ldr	r3, [pc, #232]	; (801b638 <__mdiff+0x10c>)
 801b54e:	4602      	mov	r2, r0
 801b550:	f240 2132 	movw	r1, #562	; 0x232
 801b554:	4839      	ldr	r0, [pc, #228]	; (801b63c <__mdiff+0x110>)
 801b556:	f000 fc5d 	bl	801be14 <__assert_func>
 801b55a:	2301      	movs	r3, #1
 801b55c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b564:	bfa4      	itt	ge
 801b566:	4643      	movge	r3, r8
 801b568:	46a0      	movge	r8, r4
 801b56a:	4630      	mov	r0, r6
 801b56c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b570:	bfa6      	itte	ge
 801b572:	461c      	movge	r4, r3
 801b574:	2500      	movge	r5, #0
 801b576:	2501      	movlt	r5, #1
 801b578:	f7ff fcf0 	bl	801af5c <_Balloc>
 801b57c:	b920      	cbnz	r0, 801b588 <__mdiff+0x5c>
 801b57e:	4b2e      	ldr	r3, [pc, #184]	; (801b638 <__mdiff+0x10c>)
 801b580:	4602      	mov	r2, r0
 801b582:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b586:	e7e5      	b.n	801b554 <__mdiff+0x28>
 801b588:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b58c:	6926      	ldr	r6, [r4, #16]
 801b58e:	60c5      	str	r5, [r0, #12]
 801b590:	f104 0914 	add.w	r9, r4, #20
 801b594:	f108 0514 	add.w	r5, r8, #20
 801b598:	f100 0e14 	add.w	lr, r0, #20
 801b59c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b5a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b5a4:	f108 0210 	add.w	r2, r8, #16
 801b5a8:	46f2      	mov	sl, lr
 801b5aa:	2100      	movs	r1, #0
 801b5ac:	f859 3b04 	ldr.w	r3, [r9], #4
 801b5b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b5b4:	fa1f f883 	uxth.w	r8, r3
 801b5b8:	fa11 f18b 	uxtah	r1, r1, fp
 801b5bc:	0c1b      	lsrs	r3, r3, #16
 801b5be:	eba1 0808 	sub.w	r8, r1, r8
 801b5c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b5c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b5ca:	fa1f f888 	uxth.w	r8, r8
 801b5ce:	1419      	asrs	r1, r3, #16
 801b5d0:	454e      	cmp	r6, r9
 801b5d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b5d6:	f84a 3b04 	str.w	r3, [sl], #4
 801b5da:	d8e7      	bhi.n	801b5ac <__mdiff+0x80>
 801b5dc:	1b33      	subs	r3, r6, r4
 801b5de:	3b15      	subs	r3, #21
 801b5e0:	f023 0303 	bic.w	r3, r3, #3
 801b5e4:	3304      	adds	r3, #4
 801b5e6:	3415      	adds	r4, #21
 801b5e8:	42a6      	cmp	r6, r4
 801b5ea:	bf38      	it	cc
 801b5ec:	2304      	movcc	r3, #4
 801b5ee:	441d      	add	r5, r3
 801b5f0:	4473      	add	r3, lr
 801b5f2:	469e      	mov	lr, r3
 801b5f4:	462e      	mov	r6, r5
 801b5f6:	4566      	cmp	r6, ip
 801b5f8:	d30e      	bcc.n	801b618 <__mdiff+0xec>
 801b5fa:	f10c 0203 	add.w	r2, ip, #3
 801b5fe:	1b52      	subs	r2, r2, r5
 801b600:	f022 0203 	bic.w	r2, r2, #3
 801b604:	3d03      	subs	r5, #3
 801b606:	45ac      	cmp	ip, r5
 801b608:	bf38      	it	cc
 801b60a:	2200      	movcc	r2, #0
 801b60c:	441a      	add	r2, r3
 801b60e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801b612:	b17b      	cbz	r3, 801b634 <__mdiff+0x108>
 801b614:	6107      	str	r7, [r0, #16]
 801b616:	e7a3      	b.n	801b560 <__mdiff+0x34>
 801b618:	f856 8b04 	ldr.w	r8, [r6], #4
 801b61c:	fa11 f288 	uxtah	r2, r1, r8
 801b620:	1414      	asrs	r4, r2, #16
 801b622:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b626:	b292      	uxth	r2, r2
 801b628:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b62c:	f84e 2b04 	str.w	r2, [lr], #4
 801b630:	1421      	asrs	r1, r4, #16
 801b632:	e7e0      	b.n	801b5f6 <__mdiff+0xca>
 801b634:	3f01      	subs	r7, #1
 801b636:	e7ea      	b.n	801b60e <__mdiff+0xe2>
 801b638:	0801d038 	.word	0x0801d038
 801b63c:	0801d0c4 	.word	0x0801d0c4

0801b640 <__ulp>:
 801b640:	b082      	sub	sp, #8
 801b642:	ed8d 0b00 	vstr	d0, [sp]
 801b646:	9b01      	ldr	r3, [sp, #4]
 801b648:	4912      	ldr	r1, [pc, #72]	; (801b694 <__ulp+0x54>)
 801b64a:	4019      	ands	r1, r3
 801b64c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801b650:	2900      	cmp	r1, #0
 801b652:	dd05      	ble.n	801b660 <__ulp+0x20>
 801b654:	2200      	movs	r2, #0
 801b656:	460b      	mov	r3, r1
 801b658:	ec43 2b10 	vmov	d0, r2, r3
 801b65c:	b002      	add	sp, #8
 801b65e:	4770      	bx	lr
 801b660:	4249      	negs	r1, r1
 801b662:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801b666:	ea4f 5021 	mov.w	r0, r1, asr #20
 801b66a:	f04f 0200 	mov.w	r2, #0
 801b66e:	f04f 0300 	mov.w	r3, #0
 801b672:	da04      	bge.n	801b67e <__ulp+0x3e>
 801b674:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801b678:	fa41 f300 	asr.w	r3, r1, r0
 801b67c:	e7ec      	b.n	801b658 <__ulp+0x18>
 801b67e:	f1a0 0114 	sub.w	r1, r0, #20
 801b682:	291e      	cmp	r1, #30
 801b684:	bfda      	itte	le
 801b686:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801b68a:	fa20 f101 	lsrle.w	r1, r0, r1
 801b68e:	2101      	movgt	r1, #1
 801b690:	460a      	mov	r2, r1
 801b692:	e7e1      	b.n	801b658 <__ulp+0x18>
 801b694:	7ff00000 	.word	0x7ff00000

0801b698 <__b2d>:
 801b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b69a:	6905      	ldr	r5, [r0, #16]
 801b69c:	f100 0714 	add.w	r7, r0, #20
 801b6a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801b6a4:	1f2e      	subs	r6, r5, #4
 801b6a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801b6aa:	4620      	mov	r0, r4
 801b6ac:	f7ff fd48 	bl	801b140 <__hi0bits>
 801b6b0:	f1c0 0320 	rsb	r3, r0, #32
 801b6b4:	280a      	cmp	r0, #10
 801b6b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801b734 <__b2d+0x9c>
 801b6ba:	600b      	str	r3, [r1, #0]
 801b6bc:	dc14      	bgt.n	801b6e8 <__b2d+0x50>
 801b6be:	f1c0 0e0b 	rsb	lr, r0, #11
 801b6c2:	fa24 f10e 	lsr.w	r1, r4, lr
 801b6c6:	42b7      	cmp	r7, r6
 801b6c8:	ea41 030c 	orr.w	r3, r1, ip
 801b6cc:	bf34      	ite	cc
 801b6ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b6d2:	2100      	movcs	r1, #0
 801b6d4:	3015      	adds	r0, #21
 801b6d6:	fa04 f000 	lsl.w	r0, r4, r0
 801b6da:	fa21 f10e 	lsr.w	r1, r1, lr
 801b6de:	ea40 0201 	orr.w	r2, r0, r1
 801b6e2:	ec43 2b10 	vmov	d0, r2, r3
 801b6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6e8:	42b7      	cmp	r7, r6
 801b6ea:	bf3a      	itte	cc
 801b6ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b6f0:	f1a5 0608 	subcc.w	r6, r5, #8
 801b6f4:	2100      	movcs	r1, #0
 801b6f6:	380b      	subs	r0, #11
 801b6f8:	d017      	beq.n	801b72a <__b2d+0x92>
 801b6fa:	f1c0 0c20 	rsb	ip, r0, #32
 801b6fe:	fa04 f500 	lsl.w	r5, r4, r0
 801b702:	42be      	cmp	r6, r7
 801b704:	fa21 f40c 	lsr.w	r4, r1, ip
 801b708:	ea45 0504 	orr.w	r5, r5, r4
 801b70c:	bf8c      	ite	hi
 801b70e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801b712:	2400      	movls	r4, #0
 801b714:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801b718:	fa01 f000 	lsl.w	r0, r1, r0
 801b71c:	fa24 f40c 	lsr.w	r4, r4, ip
 801b720:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b724:	ea40 0204 	orr.w	r2, r0, r4
 801b728:	e7db      	b.n	801b6e2 <__b2d+0x4a>
 801b72a:	ea44 030c 	orr.w	r3, r4, ip
 801b72e:	460a      	mov	r2, r1
 801b730:	e7d7      	b.n	801b6e2 <__b2d+0x4a>
 801b732:	bf00      	nop
 801b734:	3ff00000 	.word	0x3ff00000

0801b738 <__d2b>:
 801b738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b73c:	4689      	mov	r9, r1
 801b73e:	2101      	movs	r1, #1
 801b740:	ec57 6b10 	vmov	r6, r7, d0
 801b744:	4690      	mov	r8, r2
 801b746:	f7ff fc09 	bl	801af5c <_Balloc>
 801b74a:	4604      	mov	r4, r0
 801b74c:	b930      	cbnz	r0, 801b75c <__d2b+0x24>
 801b74e:	4602      	mov	r2, r0
 801b750:	4b25      	ldr	r3, [pc, #148]	; (801b7e8 <__d2b+0xb0>)
 801b752:	4826      	ldr	r0, [pc, #152]	; (801b7ec <__d2b+0xb4>)
 801b754:	f240 310a 	movw	r1, #778	; 0x30a
 801b758:	f000 fb5c 	bl	801be14 <__assert_func>
 801b75c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801b760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b764:	bb35      	cbnz	r5, 801b7b4 <__d2b+0x7c>
 801b766:	2e00      	cmp	r6, #0
 801b768:	9301      	str	r3, [sp, #4]
 801b76a:	d028      	beq.n	801b7be <__d2b+0x86>
 801b76c:	4668      	mov	r0, sp
 801b76e:	9600      	str	r6, [sp, #0]
 801b770:	f7ff fd06 	bl	801b180 <__lo0bits>
 801b774:	9900      	ldr	r1, [sp, #0]
 801b776:	b300      	cbz	r0, 801b7ba <__d2b+0x82>
 801b778:	9a01      	ldr	r2, [sp, #4]
 801b77a:	f1c0 0320 	rsb	r3, r0, #32
 801b77e:	fa02 f303 	lsl.w	r3, r2, r3
 801b782:	430b      	orrs	r3, r1
 801b784:	40c2      	lsrs	r2, r0
 801b786:	6163      	str	r3, [r4, #20]
 801b788:	9201      	str	r2, [sp, #4]
 801b78a:	9b01      	ldr	r3, [sp, #4]
 801b78c:	61a3      	str	r3, [r4, #24]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	bf14      	ite	ne
 801b792:	2202      	movne	r2, #2
 801b794:	2201      	moveq	r2, #1
 801b796:	6122      	str	r2, [r4, #16]
 801b798:	b1d5      	cbz	r5, 801b7d0 <__d2b+0x98>
 801b79a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b79e:	4405      	add	r5, r0
 801b7a0:	f8c9 5000 	str.w	r5, [r9]
 801b7a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b7a8:	f8c8 0000 	str.w	r0, [r8]
 801b7ac:	4620      	mov	r0, r4
 801b7ae:	b003      	add	sp, #12
 801b7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b7b8:	e7d5      	b.n	801b766 <__d2b+0x2e>
 801b7ba:	6161      	str	r1, [r4, #20]
 801b7bc:	e7e5      	b.n	801b78a <__d2b+0x52>
 801b7be:	a801      	add	r0, sp, #4
 801b7c0:	f7ff fcde 	bl	801b180 <__lo0bits>
 801b7c4:	9b01      	ldr	r3, [sp, #4]
 801b7c6:	6163      	str	r3, [r4, #20]
 801b7c8:	2201      	movs	r2, #1
 801b7ca:	6122      	str	r2, [r4, #16]
 801b7cc:	3020      	adds	r0, #32
 801b7ce:	e7e3      	b.n	801b798 <__d2b+0x60>
 801b7d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b7d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b7d8:	f8c9 0000 	str.w	r0, [r9]
 801b7dc:	6918      	ldr	r0, [r3, #16]
 801b7de:	f7ff fcaf 	bl	801b140 <__hi0bits>
 801b7e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b7e6:	e7df      	b.n	801b7a8 <__d2b+0x70>
 801b7e8:	0801d038 	.word	0x0801d038
 801b7ec:	0801d0c4 	.word	0x0801d0c4

0801b7f0 <__ratio>:
 801b7f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7f4:	4688      	mov	r8, r1
 801b7f6:	4669      	mov	r1, sp
 801b7f8:	4681      	mov	r9, r0
 801b7fa:	f7ff ff4d 	bl	801b698 <__b2d>
 801b7fe:	a901      	add	r1, sp, #4
 801b800:	4640      	mov	r0, r8
 801b802:	ec55 4b10 	vmov	r4, r5, d0
 801b806:	ee10 aa10 	vmov	sl, s0
 801b80a:	f7ff ff45 	bl	801b698 <__b2d>
 801b80e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b812:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801b816:	1a59      	subs	r1, r3, r1
 801b818:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b81c:	1ad3      	subs	r3, r2, r3
 801b81e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801b822:	ec57 6b10 	vmov	r6, r7, d0
 801b826:	2b00      	cmp	r3, #0
 801b828:	bfd6      	itet	le
 801b82a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b82e:	462a      	movgt	r2, r5
 801b830:	463a      	movle	r2, r7
 801b832:	46ab      	mov	fp, r5
 801b834:	bfd6      	itet	le
 801b836:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801b83a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801b83e:	ee00 3a90 	vmovle	s1, r3
 801b842:	ec4b ab17 	vmov	d7, sl, fp
 801b846:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801b84a:	b003      	add	sp, #12
 801b84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b850 <__copybits>:
 801b850:	3901      	subs	r1, #1
 801b852:	b570      	push	{r4, r5, r6, lr}
 801b854:	1149      	asrs	r1, r1, #5
 801b856:	6914      	ldr	r4, [r2, #16]
 801b858:	3101      	adds	r1, #1
 801b85a:	f102 0314 	add.w	r3, r2, #20
 801b85e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b862:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b866:	1f05      	subs	r5, r0, #4
 801b868:	42a3      	cmp	r3, r4
 801b86a:	d30c      	bcc.n	801b886 <__copybits+0x36>
 801b86c:	1aa3      	subs	r3, r4, r2
 801b86e:	3b11      	subs	r3, #17
 801b870:	f023 0303 	bic.w	r3, r3, #3
 801b874:	3211      	adds	r2, #17
 801b876:	42a2      	cmp	r2, r4
 801b878:	bf88      	it	hi
 801b87a:	2300      	movhi	r3, #0
 801b87c:	4418      	add	r0, r3
 801b87e:	2300      	movs	r3, #0
 801b880:	4288      	cmp	r0, r1
 801b882:	d305      	bcc.n	801b890 <__copybits+0x40>
 801b884:	bd70      	pop	{r4, r5, r6, pc}
 801b886:	f853 6b04 	ldr.w	r6, [r3], #4
 801b88a:	f845 6f04 	str.w	r6, [r5, #4]!
 801b88e:	e7eb      	b.n	801b868 <__copybits+0x18>
 801b890:	f840 3b04 	str.w	r3, [r0], #4
 801b894:	e7f4      	b.n	801b880 <__copybits+0x30>

0801b896 <__any_on>:
 801b896:	f100 0214 	add.w	r2, r0, #20
 801b89a:	6900      	ldr	r0, [r0, #16]
 801b89c:	114b      	asrs	r3, r1, #5
 801b89e:	4298      	cmp	r0, r3
 801b8a0:	b510      	push	{r4, lr}
 801b8a2:	db11      	blt.n	801b8c8 <__any_on+0x32>
 801b8a4:	dd0a      	ble.n	801b8bc <__any_on+0x26>
 801b8a6:	f011 011f 	ands.w	r1, r1, #31
 801b8aa:	d007      	beq.n	801b8bc <__any_on+0x26>
 801b8ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b8b0:	fa24 f001 	lsr.w	r0, r4, r1
 801b8b4:	fa00 f101 	lsl.w	r1, r0, r1
 801b8b8:	428c      	cmp	r4, r1
 801b8ba:	d10b      	bne.n	801b8d4 <__any_on+0x3e>
 801b8bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b8c0:	4293      	cmp	r3, r2
 801b8c2:	d803      	bhi.n	801b8cc <__any_on+0x36>
 801b8c4:	2000      	movs	r0, #0
 801b8c6:	bd10      	pop	{r4, pc}
 801b8c8:	4603      	mov	r3, r0
 801b8ca:	e7f7      	b.n	801b8bc <__any_on+0x26>
 801b8cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b8d0:	2900      	cmp	r1, #0
 801b8d2:	d0f5      	beq.n	801b8c0 <__any_on+0x2a>
 801b8d4:	2001      	movs	r0, #1
 801b8d6:	e7f6      	b.n	801b8c6 <__any_on+0x30>

0801b8d8 <_calloc_r>:
 801b8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b8da:	fba1 2402 	umull	r2, r4, r1, r2
 801b8de:	b94c      	cbnz	r4, 801b8f4 <_calloc_r+0x1c>
 801b8e0:	4611      	mov	r1, r2
 801b8e2:	9201      	str	r2, [sp, #4]
 801b8e4:	f000 f87a 	bl	801b9dc <_malloc_r>
 801b8e8:	9a01      	ldr	r2, [sp, #4]
 801b8ea:	4605      	mov	r5, r0
 801b8ec:	b930      	cbnz	r0, 801b8fc <_calloc_r+0x24>
 801b8ee:	4628      	mov	r0, r5
 801b8f0:	b003      	add	sp, #12
 801b8f2:	bd30      	pop	{r4, r5, pc}
 801b8f4:	220c      	movs	r2, #12
 801b8f6:	6002      	str	r2, [r0, #0]
 801b8f8:	2500      	movs	r5, #0
 801b8fa:	e7f8      	b.n	801b8ee <_calloc_r+0x16>
 801b8fc:	4621      	mov	r1, r4
 801b8fe:	f7fc fc59 	bl	80181b4 <memset>
 801b902:	e7f4      	b.n	801b8ee <_calloc_r+0x16>

0801b904 <_free_r>:
 801b904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b906:	2900      	cmp	r1, #0
 801b908:	d044      	beq.n	801b994 <_free_r+0x90>
 801b90a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b90e:	9001      	str	r0, [sp, #4]
 801b910:	2b00      	cmp	r3, #0
 801b912:	f1a1 0404 	sub.w	r4, r1, #4
 801b916:	bfb8      	it	lt
 801b918:	18e4      	addlt	r4, r4, r3
 801b91a:	f000 fc7f 	bl	801c21c <__malloc_lock>
 801b91e:	4a1e      	ldr	r2, [pc, #120]	; (801b998 <_free_r+0x94>)
 801b920:	9801      	ldr	r0, [sp, #4]
 801b922:	6813      	ldr	r3, [r2, #0]
 801b924:	b933      	cbnz	r3, 801b934 <_free_r+0x30>
 801b926:	6063      	str	r3, [r4, #4]
 801b928:	6014      	str	r4, [r2, #0]
 801b92a:	b003      	add	sp, #12
 801b92c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b930:	f000 bc7a 	b.w	801c228 <__malloc_unlock>
 801b934:	42a3      	cmp	r3, r4
 801b936:	d908      	bls.n	801b94a <_free_r+0x46>
 801b938:	6825      	ldr	r5, [r4, #0]
 801b93a:	1961      	adds	r1, r4, r5
 801b93c:	428b      	cmp	r3, r1
 801b93e:	bf01      	itttt	eq
 801b940:	6819      	ldreq	r1, [r3, #0]
 801b942:	685b      	ldreq	r3, [r3, #4]
 801b944:	1949      	addeq	r1, r1, r5
 801b946:	6021      	streq	r1, [r4, #0]
 801b948:	e7ed      	b.n	801b926 <_free_r+0x22>
 801b94a:	461a      	mov	r2, r3
 801b94c:	685b      	ldr	r3, [r3, #4]
 801b94e:	b10b      	cbz	r3, 801b954 <_free_r+0x50>
 801b950:	42a3      	cmp	r3, r4
 801b952:	d9fa      	bls.n	801b94a <_free_r+0x46>
 801b954:	6811      	ldr	r1, [r2, #0]
 801b956:	1855      	adds	r5, r2, r1
 801b958:	42a5      	cmp	r5, r4
 801b95a:	d10b      	bne.n	801b974 <_free_r+0x70>
 801b95c:	6824      	ldr	r4, [r4, #0]
 801b95e:	4421      	add	r1, r4
 801b960:	1854      	adds	r4, r2, r1
 801b962:	42a3      	cmp	r3, r4
 801b964:	6011      	str	r1, [r2, #0]
 801b966:	d1e0      	bne.n	801b92a <_free_r+0x26>
 801b968:	681c      	ldr	r4, [r3, #0]
 801b96a:	685b      	ldr	r3, [r3, #4]
 801b96c:	6053      	str	r3, [r2, #4]
 801b96e:	4421      	add	r1, r4
 801b970:	6011      	str	r1, [r2, #0]
 801b972:	e7da      	b.n	801b92a <_free_r+0x26>
 801b974:	d902      	bls.n	801b97c <_free_r+0x78>
 801b976:	230c      	movs	r3, #12
 801b978:	6003      	str	r3, [r0, #0]
 801b97a:	e7d6      	b.n	801b92a <_free_r+0x26>
 801b97c:	6825      	ldr	r5, [r4, #0]
 801b97e:	1961      	adds	r1, r4, r5
 801b980:	428b      	cmp	r3, r1
 801b982:	bf04      	itt	eq
 801b984:	6819      	ldreq	r1, [r3, #0]
 801b986:	685b      	ldreq	r3, [r3, #4]
 801b988:	6063      	str	r3, [r4, #4]
 801b98a:	bf04      	itt	eq
 801b98c:	1949      	addeq	r1, r1, r5
 801b98e:	6021      	streq	r1, [r4, #0]
 801b990:	6054      	str	r4, [r2, #4]
 801b992:	e7ca      	b.n	801b92a <_free_r+0x26>
 801b994:	b003      	add	sp, #12
 801b996:	bd30      	pop	{r4, r5, pc}
 801b998:	24002b68 	.word	0x24002b68

0801b99c <sbrk_aligned>:
 801b99c:	b570      	push	{r4, r5, r6, lr}
 801b99e:	4e0e      	ldr	r6, [pc, #56]	; (801b9d8 <sbrk_aligned+0x3c>)
 801b9a0:	460c      	mov	r4, r1
 801b9a2:	6831      	ldr	r1, [r6, #0]
 801b9a4:	4605      	mov	r5, r0
 801b9a6:	b911      	cbnz	r1, 801b9ae <sbrk_aligned+0x12>
 801b9a8:	f000 fa02 	bl	801bdb0 <_sbrk_r>
 801b9ac:	6030      	str	r0, [r6, #0]
 801b9ae:	4621      	mov	r1, r4
 801b9b0:	4628      	mov	r0, r5
 801b9b2:	f000 f9fd 	bl	801bdb0 <_sbrk_r>
 801b9b6:	1c43      	adds	r3, r0, #1
 801b9b8:	d00a      	beq.n	801b9d0 <sbrk_aligned+0x34>
 801b9ba:	1cc4      	adds	r4, r0, #3
 801b9bc:	f024 0403 	bic.w	r4, r4, #3
 801b9c0:	42a0      	cmp	r0, r4
 801b9c2:	d007      	beq.n	801b9d4 <sbrk_aligned+0x38>
 801b9c4:	1a21      	subs	r1, r4, r0
 801b9c6:	4628      	mov	r0, r5
 801b9c8:	f000 f9f2 	bl	801bdb0 <_sbrk_r>
 801b9cc:	3001      	adds	r0, #1
 801b9ce:	d101      	bne.n	801b9d4 <sbrk_aligned+0x38>
 801b9d0:	f04f 34ff 	mov.w	r4, #4294967295
 801b9d4:	4620      	mov	r0, r4
 801b9d6:	bd70      	pop	{r4, r5, r6, pc}
 801b9d8:	24002b6c 	.word	0x24002b6c

0801b9dc <_malloc_r>:
 801b9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9e0:	1ccd      	adds	r5, r1, #3
 801b9e2:	f025 0503 	bic.w	r5, r5, #3
 801b9e6:	3508      	adds	r5, #8
 801b9e8:	2d0c      	cmp	r5, #12
 801b9ea:	bf38      	it	cc
 801b9ec:	250c      	movcc	r5, #12
 801b9ee:	2d00      	cmp	r5, #0
 801b9f0:	4607      	mov	r7, r0
 801b9f2:	db01      	blt.n	801b9f8 <_malloc_r+0x1c>
 801b9f4:	42a9      	cmp	r1, r5
 801b9f6:	d905      	bls.n	801ba04 <_malloc_r+0x28>
 801b9f8:	230c      	movs	r3, #12
 801b9fa:	603b      	str	r3, [r7, #0]
 801b9fc:	2600      	movs	r6, #0
 801b9fe:	4630      	mov	r0, r6
 801ba00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba04:	4e2e      	ldr	r6, [pc, #184]	; (801bac0 <_malloc_r+0xe4>)
 801ba06:	f000 fc09 	bl	801c21c <__malloc_lock>
 801ba0a:	6833      	ldr	r3, [r6, #0]
 801ba0c:	461c      	mov	r4, r3
 801ba0e:	bb34      	cbnz	r4, 801ba5e <_malloc_r+0x82>
 801ba10:	4629      	mov	r1, r5
 801ba12:	4638      	mov	r0, r7
 801ba14:	f7ff ffc2 	bl	801b99c <sbrk_aligned>
 801ba18:	1c43      	adds	r3, r0, #1
 801ba1a:	4604      	mov	r4, r0
 801ba1c:	d14d      	bne.n	801baba <_malloc_r+0xde>
 801ba1e:	6834      	ldr	r4, [r6, #0]
 801ba20:	4626      	mov	r6, r4
 801ba22:	2e00      	cmp	r6, #0
 801ba24:	d140      	bne.n	801baa8 <_malloc_r+0xcc>
 801ba26:	6823      	ldr	r3, [r4, #0]
 801ba28:	4631      	mov	r1, r6
 801ba2a:	4638      	mov	r0, r7
 801ba2c:	eb04 0803 	add.w	r8, r4, r3
 801ba30:	f000 f9be 	bl	801bdb0 <_sbrk_r>
 801ba34:	4580      	cmp	r8, r0
 801ba36:	d13a      	bne.n	801baae <_malloc_r+0xd2>
 801ba38:	6821      	ldr	r1, [r4, #0]
 801ba3a:	3503      	adds	r5, #3
 801ba3c:	1a6d      	subs	r5, r5, r1
 801ba3e:	f025 0503 	bic.w	r5, r5, #3
 801ba42:	3508      	adds	r5, #8
 801ba44:	2d0c      	cmp	r5, #12
 801ba46:	bf38      	it	cc
 801ba48:	250c      	movcc	r5, #12
 801ba4a:	4629      	mov	r1, r5
 801ba4c:	4638      	mov	r0, r7
 801ba4e:	f7ff ffa5 	bl	801b99c <sbrk_aligned>
 801ba52:	3001      	adds	r0, #1
 801ba54:	d02b      	beq.n	801baae <_malloc_r+0xd2>
 801ba56:	6823      	ldr	r3, [r4, #0]
 801ba58:	442b      	add	r3, r5
 801ba5a:	6023      	str	r3, [r4, #0]
 801ba5c:	e00e      	b.n	801ba7c <_malloc_r+0xa0>
 801ba5e:	6822      	ldr	r2, [r4, #0]
 801ba60:	1b52      	subs	r2, r2, r5
 801ba62:	d41e      	bmi.n	801baa2 <_malloc_r+0xc6>
 801ba64:	2a0b      	cmp	r2, #11
 801ba66:	d916      	bls.n	801ba96 <_malloc_r+0xba>
 801ba68:	1961      	adds	r1, r4, r5
 801ba6a:	42a3      	cmp	r3, r4
 801ba6c:	6025      	str	r5, [r4, #0]
 801ba6e:	bf18      	it	ne
 801ba70:	6059      	strne	r1, [r3, #4]
 801ba72:	6863      	ldr	r3, [r4, #4]
 801ba74:	bf08      	it	eq
 801ba76:	6031      	streq	r1, [r6, #0]
 801ba78:	5162      	str	r2, [r4, r5]
 801ba7a:	604b      	str	r3, [r1, #4]
 801ba7c:	4638      	mov	r0, r7
 801ba7e:	f104 060b 	add.w	r6, r4, #11
 801ba82:	f000 fbd1 	bl	801c228 <__malloc_unlock>
 801ba86:	f026 0607 	bic.w	r6, r6, #7
 801ba8a:	1d23      	adds	r3, r4, #4
 801ba8c:	1af2      	subs	r2, r6, r3
 801ba8e:	d0b6      	beq.n	801b9fe <_malloc_r+0x22>
 801ba90:	1b9b      	subs	r3, r3, r6
 801ba92:	50a3      	str	r3, [r4, r2]
 801ba94:	e7b3      	b.n	801b9fe <_malloc_r+0x22>
 801ba96:	6862      	ldr	r2, [r4, #4]
 801ba98:	42a3      	cmp	r3, r4
 801ba9a:	bf0c      	ite	eq
 801ba9c:	6032      	streq	r2, [r6, #0]
 801ba9e:	605a      	strne	r2, [r3, #4]
 801baa0:	e7ec      	b.n	801ba7c <_malloc_r+0xa0>
 801baa2:	4623      	mov	r3, r4
 801baa4:	6864      	ldr	r4, [r4, #4]
 801baa6:	e7b2      	b.n	801ba0e <_malloc_r+0x32>
 801baa8:	4634      	mov	r4, r6
 801baaa:	6876      	ldr	r6, [r6, #4]
 801baac:	e7b9      	b.n	801ba22 <_malloc_r+0x46>
 801baae:	230c      	movs	r3, #12
 801bab0:	603b      	str	r3, [r7, #0]
 801bab2:	4638      	mov	r0, r7
 801bab4:	f000 fbb8 	bl	801c228 <__malloc_unlock>
 801bab8:	e7a1      	b.n	801b9fe <_malloc_r+0x22>
 801baba:	6025      	str	r5, [r4, #0]
 801babc:	e7de      	b.n	801ba7c <_malloc_r+0xa0>
 801babe:	bf00      	nop
 801bac0:	24002b68 	.word	0x24002b68

0801bac4 <__ssputs_r>:
 801bac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bac8:	688e      	ldr	r6, [r1, #8]
 801baca:	429e      	cmp	r6, r3
 801bacc:	4682      	mov	sl, r0
 801bace:	460c      	mov	r4, r1
 801bad0:	4690      	mov	r8, r2
 801bad2:	461f      	mov	r7, r3
 801bad4:	d838      	bhi.n	801bb48 <__ssputs_r+0x84>
 801bad6:	898a      	ldrh	r2, [r1, #12]
 801bad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801badc:	d032      	beq.n	801bb44 <__ssputs_r+0x80>
 801bade:	6825      	ldr	r5, [r4, #0]
 801bae0:	6909      	ldr	r1, [r1, #16]
 801bae2:	eba5 0901 	sub.w	r9, r5, r1
 801bae6:	6965      	ldr	r5, [r4, #20]
 801bae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801baec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801baf0:	3301      	adds	r3, #1
 801baf2:	444b      	add	r3, r9
 801baf4:	106d      	asrs	r5, r5, #1
 801baf6:	429d      	cmp	r5, r3
 801baf8:	bf38      	it	cc
 801bafa:	461d      	movcc	r5, r3
 801bafc:	0553      	lsls	r3, r2, #21
 801bafe:	d531      	bpl.n	801bb64 <__ssputs_r+0xa0>
 801bb00:	4629      	mov	r1, r5
 801bb02:	f7ff ff6b 	bl	801b9dc <_malloc_r>
 801bb06:	4606      	mov	r6, r0
 801bb08:	b950      	cbnz	r0, 801bb20 <__ssputs_r+0x5c>
 801bb0a:	230c      	movs	r3, #12
 801bb0c:	f8ca 3000 	str.w	r3, [sl]
 801bb10:	89a3      	ldrh	r3, [r4, #12]
 801bb12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb16:	81a3      	strh	r3, [r4, #12]
 801bb18:	f04f 30ff 	mov.w	r0, #4294967295
 801bb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb20:	6921      	ldr	r1, [r4, #16]
 801bb22:	464a      	mov	r2, r9
 801bb24:	f7fc fb38 	bl	8018198 <memcpy>
 801bb28:	89a3      	ldrh	r3, [r4, #12]
 801bb2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bb2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb32:	81a3      	strh	r3, [r4, #12]
 801bb34:	6126      	str	r6, [r4, #16]
 801bb36:	6165      	str	r5, [r4, #20]
 801bb38:	444e      	add	r6, r9
 801bb3a:	eba5 0509 	sub.w	r5, r5, r9
 801bb3e:	6026      	str	r6, [r4, #0]
 801bb40:	60a5      	str	r5, [r4, #8]
 801bb42:	463e      	mov	r6, r7
 801bb44:	42be      	cmp	r6, r7
 801bb46:	d900      	bls.n	801bb4a <__ssputs_r+0x86>
 801bb48:	463e      	mov	r6, r7
 801bb4a:	6820      	ldr	r0, [r4, #0]
 801bb4c:	4632      	mov	r2, r6
 801bb4e:	4641      	mov	r1, r8
 801bb50:	f000 fb4a 	bl	801c1e8 <memmove>
 801bb54:	68a3      	ldr	r3, [r4, #8]
 801bb56:	1b9b      	subs	r3, r3, r6
 801bb58:	60a3      	str	r3, [r4, #8]
 801bb5a:	6823      	ldr	r3, [r4, #0]
 801bb5c:	4433      	add	r3, r6
 801bb5e:	6023      	str	r3, [r4, #0]
 801bb60:	2000      	movs	r0, #0
 801bb62:	e7db      	b.n	801bb1c <__ssputs_r+0x58>
 801bb64:	462a      	mov	r2, r5
 801bb66:	f000 fb65 	bl	801c234 <_realloc_r>
 801bb6a:	4606      	mov	r6, r0
 801bb6c:	2800      	cmp	r0, #0
 801bb6e:	d1e1      	bne.n	801bb34 <__ssputs_r+0x70>
 801bb70:	6921      	ldr	r1, [r4, #16]
 801bb72:	4650      	mov	r0, sl
 801bb74:	f7ff fec6 	bl	801b904 <_free_r>
 801bb78:	e7c7      	b.n	801bb0a <__ssputs_r+0x46>
	...

0801bb7c <_svfiprintf_r>:
 801bb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb80:	4698      	mov	r8, r3
 801bb82:	898b      	ldrh	r3, [r1, #12]
 801bb84:	061b      	lsls	r3, r3, #24
 801bb86:	b09d      	sub	sp, #116	; 0x74
 801bb88:	4607      	mov	r7, r0
 801bb8a:	460d      	mov	r5, r1
 801bb8c:	4614      	mov	r4, r2
 801bb8e:	d50e      	bpl.n	801bbae <_svfiprintf_r+0x32>
 801bb90:	690b      	ldr	r3, [r1, #16]
 801bb92:	b963      	cbnz	r3, 801bbae <_svfiprintf_r+0x32>
 801bb94:	2140      	movs	r1, #64	; 0x40
 801bb96:	f7ff ff21 	bl	801b9dc <_malloc_r>
 801bb9a:	6028      	str	r0, [r5, #0]
 801bb9c:	6128      	str	r0, [r5, #16]
 801bb9e:	b920      	cbnz	r0, 801bbaa <_svfiprintf_r+0x2e>
 801bba0:	230c      	movs	r3, #12
 801bba2:	603b      	str	r3, [r7, #0]
 801bba4:	f04f 30ff 	mov.w	r0, #4294967295
 801bba8:	e0d1      	b.n	801bd4e <_svfiprintf_r+0x1d2>
 801bbaa:	2340      	movs	r3, #64	; 0x40
 801bbac:	616b      	str	r3, [r5, #20]
 801bbae:	2300      	movs	r3, #0
 801bbb0:	9309      	str	r3, [sp, #36]	; 0x24
 801bbb2:	2320      	movs	r3, #32
 801bbb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bbb8:	f8cd 800c 	str.w	r8, [sp, #12]
 801bbbc:	2330      	movs	r3, #48	; 0x30
 801bbbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801bd68 <_svfiprintf_r+0x1ec>
 801bbc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bbc6:	f04f 0901 	mov.w	r9, #1
 801bbca:	4623      	mov	r3, r4
 801bbcc:	469a      	mov	sl, r3
 801bbce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bbd2:	b10a      	cbz	r2, 801bbd8 <_svfiprintf_r+0x5c>
 801bbd4:	2a25      	cmp	r2, #37	; 0x25
 801bbd6:	d1f9      	bne.n	801bbcc <_svfiprintf_r+0x50>
 801bbd8:	ebba 0b04 	subs.w	fp, sl, r4
 801bbdc:	d00b      	beq.n	801bbf6 <_svfiprintf_r+0x7a>
 801bbde:	465b      	mov	r3, fp
 801bbe0:	4622      	mov	r2, r4
 801bbe2:	4629      	mov	r1, r5
 801bbe4:	4638      	mov	r0, r7
 801bbe6:	f7ff ff6d 	bl	801bac4 <__ssputs_r>
 801bbea:	3001      	adds	r0, #1
 801bbec:	f000 80aa 	beq.w	801bd44 <_svfiprintf_r+0x1c8>
 801bbf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bbf2:	445a      	add	r2, fp
 801bbf4:	9209      	str	r2, [sp, #36]	; 0x24
 801bbf6:	f89a 3000 	ldrb.w	r3, [sl]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	f000 80a2 	beq.w	801bd44 <_svfiprintf_r+0x1c8>
 801bc00:	2300      	movs	r3, #0
 801bc02:	f04f 32ff 	mov.w	r2, #4294967295
 801bc06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bc0a:	f10a 0a01 	add.w	sl, sl, #1
 801bc0e:	9304      	str	r3, [sp, #16]
 801bc10:	9307      	str	r3, [sp, #28]
 801bc12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bc16:	931a      	str	r3, [sp, #104]	; 0x68
 801bc18:	4654      	mov	r4, sl
 801bc1a:	2205      	movs	r2, #5
 801bc1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc20:	4851      	ldr	r0, [pc, #324]	; (801bd68 <_svfiprintf_r+0x1ec>)
 801bc22:	f7e4 fb7d 	bl	8000320 <memchr>
 801bc26:	9a04      	ldr	r2, [sp, #16]
 801bc28:	b9d8      	cbnz	r0, 801bc62 <_svfiprintf_r+0xe6>
 801bc2a:	06d0      	lsls	r0, r2, #27
 801bc2c:	bf44      	itt	mi
 801bc2e:	2320      	movmi	r3, #32
 801bc30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc34:	0711      	lsls	r1, r2, #28
 801bc36:	bf44      	itt	mi
 801bc38:	232b      	movmi	r3, #43	; 0x2b
 801bc3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc3e:	f89a 3000 	ldrb.w	r3, [sl]
 801bc42:	2b2a      	cmp	r3, #42	; 0x2a
 801bc44:	d015      	beq.n	801bc72 <_svfiprintf_r+0xf6>
 801bc46:	9a07      	ldr	r2, [sp, #28]
 801bc48:	4654      	mov	r4, sl
 801bc4a:	2000      	movs	r0, #0
 801bc4c:	f04f 0c0a 	mov.w	ip, #10
 801bc50:	4621      	mov	r1, r4
 801bc52:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bc56:	3b30      	subs	r3, #48	; 0x30
 801bc58:	2b09      	cmp	r3, #9
 801bc5a:	d94e      	bls.n	801bcfa <_svfiprintf_r+0x17e>
 801bc5c:	b1b0      	cbz	r0, 801bc8c <_svfiprintf_r+0x110>
 801bc5e:	9207      	str	r2, [sp, #28]
 801bc60:	e014      	b.n	801bc8c <_svfiprintf_r+0x110>
 801bc62:	eba0 0308 	sub.w	r3, r0, r8
 801bc66:	fa09 f303 	lsl.w	r3, r9, r3
 801bc6a:	4313      	orrs	r3, r2
 801bc6c:	9304      	str	r3, [sp, #16]
 801bc6e:	46a2      	mov	sl, r4
 801bc70:	e7d2      	b.n	801bc18 <_svfiprintf_r+0x9c>
 801bc72:	9b03      	ldr	r3, [sp, #12]
 801bc74:	1d19      	adds	r1, r3, #4
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	9103      	str	r1, [sp, #12]
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	bfbb      	ittet	lt
 801bc7e:	425b      	neglt	r3, r3
 801bc80:	f042 0202 	orrlt.w	r2, r2, #2
 801bc84:	9307      	strge	r3, [sp, #28]
 801bc86:	9307      	strlt	r3, [sp, #28]
 801bc88:	bfb8      	it	lt
 801bc8a:	9204      	strlt	r2, [sp, #16]
 801bc8c:	7823      	ldrb	r3, [r4, #0]
 801bc8e:	2b2e      	cmp	r3, #46	; 0x2e
 801bc90:	d10c      	bne.n	801bcac <_svfiprintf_r+0x130>
 801bc92:	7863      	ldrb	r3, [r4, #1]
 801bc94:	2b2a      	cmp	r3, #42	; 0x2a
 801bc96:	d135      	bne.n	801bd04 <_svfiprintf_r+0x188>
 801bc98:	9b03      	ldr	r3, [sp, #12]
 801bc9a:	1d1a      	adds	r2, r3, #4
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	9203      	str	r2, [sp, #12]
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	bfb8      	it	lt
 801bca4:	f04f 33ff 	movlt.w	r3, #4294967295
 801bca8:	3402      	adds	r4, #2
 801bcaa:	9305      	str	r3, [sp, #20]
 801bcac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bd78 <_svfiprintf_r+0x1fc>
 801bcb0:	7821      	ldrb	r1, [r4, #0]
 801bcb2:	2203      	movs	r2, #3
 801bcb4:	4650      	mov	r0, sl
 801bcb6:	f7e4 fb33 	bl	8000320 <memchr>
 801bcba:	b140      	cbz	r0, 801bcce <_svfiprintf_r+0x152>
 801bcbc:	2340      	movs	r3, #64	; 0x40
 801bcbe:	eba0 000a 	sub.w	r0, r0, sl
 801bcc2:	fa03 f000 	lsl.w	r0, r3, r0
 801bcc6:	9b04      	ldr	r3, [sp, #16]
 801bcc8:	4303      	orrs	r3, r0
 801bcca:	3401      	adds	r4, #1
 801bccc:	9304      	str	r3, [sp, #16]
 801bcce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcd2:	4826      	ldr	r0, [pc, #152]	; (801bd6c <_svfiprintf_r+0x1f0>)
 801bcd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bcd8:	2206      	movs	r2, #6
 801bcda:	f7e4 fb21 	bl	8000320 <memchr>
 801bcde:	2800      	cmp	r0, #0
 801bce0:	d038      	beq.n	801bd54 <_svfiprintf_r+0x1d8>
 801bce2:	4b23      	ldr	r3, [pc, #140]	; (801bd70 <_svfiprintf_r+0x1f4>)
 801bce4:	bb1b      	cbnz	r3, 801bd2e <_svfiprintf_r+0x1b2>
 801bce6:	9b03      	ldr	r3, [sp, #12]
 801bce8:	3307      	adds	r3, #7
 801bcea:	f023 0307 	bic.w	r3, r3, #7
 801bcee:	3308      	adds	r3, #8
 801bcf0:	9303      	str	r3, [sp, #12]
 801bcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcf4:	4433      	add	r3, r6
 801bcf6:	9309      	str	r3, [sp, #36]	; 0x24
 801bcf8:	e767      	b.n	801bbca <_svfiprintf_r+0x4e>
 801bcfa:	fb0c 3202 	mla	r2, ip, r2, r3
 801bcfe:	460c      	mov	r4, r1
 801bd00:	2001      	movs	r0, #1
 801bd02:	e7a5      	b.n	801bc50 <_svfiprintf_r+0xd4>
 801bd04:	2300      	movs	r3, #0
 801bd06:	3401      	adds	r4, #1
 801bd08:	9305      	str	r3, [sp, #20]
 801bd0a:	4619      	mov	r1, r3
 801bd0c:	f04f 0c0a 	mov.w	ip, #10
 801bd10:	4620      	mov	r0, r4
 801bd12:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bd16:	3a30      	subs	r2, #48	; 0x30
 801bd18:	2a09      	cmp	r2, #9
 801bd1a:	d903      	bls.n	801bd24 <_svfiprintf_r+0x1a8>
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d0c5      	beq.n	801bcac <_svfiprintf_r+0x130>
 801bd20:	9105      	str	r1, [sp, #20]
 801bd22:	e7c3      	b.n	801bcac <_svfiprintf_r+0x130>
 801bd24:	fb0c 2101 	mla	r1, ip, r1, r2
 801bd28:	4604      	mov	r4, r0
 801bd2a:	2301      	movs	r3, #1
 801bd2c:	e7f0      	b.n	801bd10 <_svfiprintf_r+0x194>
 801bd2e:	ab03      	add	r3, sp, #12
 801bd30:	9300      	str	r3, [sp, #0]
 801bd32:	462a      	mov	r2, r5
 801bd34:	4b0f      	ldr	r3, [pc, #60]	; (801bd74 <_svfiprintf_r+0x1f8>)
 801bd36:	a904      	add	r1, sp, #16
 801bd38:	4638      	mov	r0, r7
 801bd3a:	f7fc fad5 	bl	80182e8 <_printf_float>
 801bd3e:	1c42      	adds	r2, r0, #1
 801bd40:	4606      	mov	r6, r0
 801bd42:	d1d6      	bne.n	801bcf2 <_svfiprintf_r+0x176>
 801bd44:	89ab      	ldrh	r3, [r5, #12]
 801bd46:	065b      	lsls	r3, r3, #25
 801bd48:	f53f af2c 	bmi.w	801bba4 <_svfiprintf_r+0x28>
 801bd4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd4e:	b01d      	add	sp, #116	; 0x74
 801bd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd54:	ab03      	add	r3, sp, #12
 801bd56:	9300      	str	r3, [sp, #0]
 801bd58:	462a      	mov	r2, r5
 801bd5a:	4b06      	ldr	r3, [pc, #24]	; (801bd74 <_svfiprintf_r+0x1f8>)
 801bd5c:	a904      	add	r1, sp, #16
 801bd5e:	4638      	mov	r0, r7
 801bd60:	f7fc fd4e 	bl	8018800 <_printf_i>
 801bd64:	e7eb      	b.n	801bd3e <_svfiprintf_r+0x1c2>
 801bd66:	bf00      	nop
 801bd68:	0801d21c 	.word	0x0801d21c
 801bd6c:	0801d226 	.word	0x0801d226
 801bd70:	080182e9 	.word	0x080182e9
 801bd74:	0801bac5 	.word	0x0801bac5
 801bd78:	0801d222 	.word	0x0801d222

0801bd7c <_read_r>:
 801bd7c:	b538      	push	{r3, r4, r5, lr}
 801bd7e:	4d07      	ldr	r5, [pc, #28]	; (801bd9c <_read_r+0x20>)
 801bd80:	4604      	mov	r4, r0
 801bd82:	4608      	mov	r0, r1
 801bd84:	4611      	mov	r1, r2
 801bd86:	2200      	movs	r2, #0
 801bd88:	602a      	str	r2, [r5, #0]
 801bd8a:	461a      	mov	r2, r3
 801bd8c:	f7e6 fe40 	bl	8002a10 <_read>
 801bd90:	1c43      	adds	r3, r0, #1
 801bd92:	d102      	bne.n	801bd9a <_read_r+0x1e>
 801bd94:	682b      	ldr	r3, [r5, #0]
 801bd96:	b103      	cbz	r3, 801bd9a <_read_r+0x1e>
 801bd98:	6023      	str	r3, [r4, #0]
 801bd9a:	bd38      	pop	{r3, r4, r5, pc}
 801bd9c:	24002b70 	.word	0x24002b70

0801bda0 <nan>:
 801bda0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801bda8 <nan+0x8>
 801bda4:	4770      	bx	lr
 801bda6:	bf00      	nop
 801bda8:	00000000 	.word	0x00000000
 801bdac:	7ff80000 	.word	0x7ff80000

0801bdb0 <_sbrk_r>:
 801bdb0:	b538      	push	{r3, r4, r5, lr}
 801bdb2:	4d06      	ldr	r5, [pc, #24]	; (801bdcc <_sbrk_r+0x1c>)
 801bdb4:	2300      	movs	r3, #0
 801bdb6:	4604      	mov	r4, r0
 801bdb8:	4608      	mov	r0, r1
 801bdba:	602b      	str	r3, [r5, #0]
 801bdbc:	f7e6 fe96 	bl	8002aec <_sbrk>
 801bdc0:	1c43      	adds	r3, r0, #1
 801bdc2:	d102      	bne.n	801bdca <_sbrk_r+0x1a>
 801bdc4:	682b      	ldr	r3, [r5, #0]
 801bdc6:	b103      	cbz	r3, 801bdca <_sbrk_r+0x1a>
 801bdc8:	6023      	str	r3, [r4, #0]
 801bdca:	bd38      	pop	{r3, r4, r5, pc}
 801bdcc:	24002b70 	.word	0x24002b70

0801bdd0 <strncmp>:
 801bdd0:	b510      	push	{r4, lr}
 801bdd2:	b17a      	cbz	r2, 801bdf4 <strncmp+0x24>
 801bdd4:	4603      	mov	r3, r0
 801bdd6:	3901      	subs	r1, #1
 801bdd8:	1884      	adds	r4, r0, r2
 801bdda:	f813 0b01 	ldrb.w	r0, [r3], #1
 801bdde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801bde2:	4290      	cmp	r0, r2
 801bde4:	d101      	bne.n	801bdea <strncmp+0x1a>
 801bde6:	42a3      	cmp	r3, r4
 801bde8:	d101      	bne.n	801bdee <strncmp+0x1e>
 801bdea:	1a80      	subs	r0, r0, r2
 801bdec:	bd10      	pop	{r4, pc}
 801bdee:	2800      	cmp	r0, #0
 801bdf0:	d1f3      	bne.n	801bdda <strncmp+0xa>
 801bdf2:	e7fa      	b.n	801bdea <strncmp+0x1a>
 801bdf4:	4610      	mov	r0, r2
 801bdf6:	e7f9      	b.n	801bdec <strncmp+0x1c>

0801bdf8 <__ascii_wctomb>:
 801bdf8:	b149      	cbz	r1, 801be0e <__ascii_wctomb+0x16>
 801bdfa:	2aff      	cmp	r2, #255	; 0xff
 801bdfc:	bf85      	ittet	hi
 801bdfe:	238a      	movhi	r3, #138	; 0x8a
 801be00:	6003      	strhi	r3, [r0, #0]
 801be02:	700a      	strbls	r2, [r1, #0]
 801be04:	f04f 30ff 	movhi.w	r0, #4294967295
 801be08:	bf98      	it	ls
 801be0a:	2001      	movls	r0, #1
 801be0c:	4770      	bx	lr
 801be0e:	4608      	mov	r0, r1
 801be10:	4770      	bx	lr
	...

0801be14 <__assert_func>:
 801be14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801be16:	4614      	mov	r4, r2
 801be18:	461a      	mov	r2, r3
 801be1a:	4b09      	ldr	r3, [pc, #36]	; (801be40 <__assert_func+0x2c>)
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	4605      	mov	r5, r0
 801be20:	68d8      	ldr	r0, [r3, #12]
 801be22:	b14c      	cbz	r4, 801be38 <__assert_func+0x24>
 801be24:	4b07      	ldr	r3, [pc, #28]	; (801be44 <__assert_func+0x30>)
 801be26:	9100      	str	r1, [sp, #0]
 801be28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801be2c:	4906      	ldr	r1, [pc, #24]	; (801be48 <__assert_func+0x34>)
 801be2e:	462b      	mov	r3, r5
 801be30:	f000 f9a6 	bl	801c180 <fiprintf>
 801be34:	f000 fc46 	bl	801c6c4 <abort>
 801be38:	4b04      	ldr	r3, [pc, #16]	; (801be4c <__assert_func+0x38>)
 801be3a:	461c      	mov	r4, r3
 801be3c:	e7f3      	b.n	801be26 <__assert_func+0x12>
 801be3e:	bf00      	nop
 801be40:	24000100 	.word	0x24000100
 801be44:	0801d22d 	.word	0x0801d22d
 801be48:	0801d23a 	.word	0x0801d23a
 801be4c:	0801d268 	.word	0x0801d268

0801be50 <__sflush_r>:
 801be50:	898a      	ldrh	r2, [r1, #12]
 801be52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be56:	4605      	mov	r5, r0
 801be58:	0710      	lsls	r0, r2, #28
 801be5a:	460c      	mov	r4, r1
 801be5c:	d458      	bmi.n	801bf10 <__sflush_r+0xc0>
 801be5e:	684b      	ldr	r3, [r1, #4]
 801be60:	2b00      	cmp	r3, #0
 801be62:	dc05      	bgt.n	801be70 <__sflush_r+0x20>
 801be64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801be66:	2b00      	cmp	r3, #0
 801be68:	dc02      	bgt.n	801be70 <__sflush_r+0x20>
 801be6a:	2000      	movs	r0, #0
 801be6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801be72:	2e00      	cmp	r6, #0
 801be74:	d0f9      	beq.n	801be6a <__sflush_r+0x1a>
 801be76:	2300      	movs	r3, #0
 801be78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801be7c:	682f      	ldr	r7, [r5, #0]
 801be7e:	602b      	str	r3, [r5, #0]
 801be80:	d032      	beq.n	801bee8 <__sflush_r+0x98>
 801be82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801be84:	89a3      	ldrh	r3, [r4, #12]
 801be86:	075a      	lsls	r2, r3, #29
 801be88:	d505      	bpl.n	801be96 <__sflush_r+0x46>
 801be8a:	6863      	ldr	r3, [r4, #4]
 801be8c:	1ac0      	subs	r0, r0, r3
 801be8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801be90:	b10b      	cbz	r3, 801be96 <__sflush_r+0x46>
 801be92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801be94:	1ac0      	subs	r0, r0, r3
 801be96:	2300      	movs	r3, #0
 801be98:	4602      	mov	r2, r0
 801be9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801be9c:	6a21      	ldr	r1, [r4, #32]
 801be9e:	4628      	mov	r0, r5
 801bea0:	47b0      	blx	r6
 801bea2:	1c43      	adds	r3, r0, #1
 801bea4:	89a3      	ldrh	r3, [r4, #12]
 801bea6:	d106      	bne.n	801beb6 <__sflush_r+0x66>
 801bea8:	6829      	ldr	r1, [r5, #0]
 801beaa:	291d      	cmp	r1, #29
 801beac:	d82c      	bhi.n	801bf08 <__sflush_r+0xb8>
 801beae:	4a2a      	ldr	r2, [pc, #168]	; (801bf58 <__sflush_r+0x108>)
 801beb0:	40ca      	lsrs	r2, r1
 801beb2:	07d6      	lsls	r6, r2, #31
 801beb4:	d528      	bpl.n	801bf08 <__sflush_r+0xb8>
 801beb6:	2200      	movs	r2, #0
 801beb8:	6062      	str	r2, [r4, #4]
 801beba:	04d9      	lsls	r1, r3, #19
 801bebc:	6922      	ldr	r2, [r4, #16]
 801bebe:	6022      	str	r2, [r4, #0]
 801bec0:	d504      	bpl.n	801becc <__sflush_r+0x7c>
 801bec2:	1c42      	adds	r2, r0, #1
 801bec4:	d101      	bne.n	801beca <__sflush_r+0x7a>
 801bec6:	682b      	ldr	r3, [r5, #0]
 801bec8:	b903      	cbnz	r3, 801becc <__sflush_r+0x7c>
 801beca:	6560      	str	r0, [r4, #84]	; 0x54
 801becc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bece:	602f      	str	r7, [r5, #0]
 801bed0:	2900      	cmp	r1, #0
 801bed2:	d0ca      	beq.n	801be6a <__sflush_r+0x1a>
 801bed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bed8:	4299      	cmp	r1, r3
 801beda:	d002      	beq.n	801bee2 <__sflush_r+0x92>
 801bedc:	4628      	mov	r0, r5
 801bede:	f7ff fd11 	bl	801b904 <_free_r>
 801bee2:	2000      	movs	r0, #0
 801bee4:	6360      	str	r0, [r4, #52]	; 0x34
 801bee6:	e7c1      	b.n	801be6c <__sflush_r+0x1c>
 801bee8:	6a21      	ldr	r1, [r4, #32]
 801beea:	2301      	movs	r3, #1
 801beec:	4628      	mov	r0, r5
 801beee:	47b0      	blx	r6
 801bef0:	1c41      	adds	r1, r0, #1
 801bef2:	d1c7      	bne.n	801be84 <__sflush_r+0x34>
 801bef4:	682b      	ldr	r3, [r5, #0]
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d0c4      	beq.n	801be84 <__sflush_r+0x34>
 801befa:	2b1d      	cmp	r3, #29
 801befc:	d001      	beq.n	801bf02 <__sflush_r+0xb2>
 801befe:	2b16      	cmp	r3, #22
 801bf00:	d101      	bne.n	801bf06 <__sflush_r+0xb6>
 801bf02:	602f      	str	r7, [r5, #0]
 801bf04:	e7b1      	b.n	801be6a <__sflush_r+0x1a>
 801bf06:	89a3      	ldrh	r3, [r4, #12]
 801bf08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf0c:	81a3      	strh	r3, [r4, #12]
 801bf0e:	e7ad      	b.n	801be6c <__sflush_r+0x1c>
 801bf10:	690f      	ldr	r7, [r1, #16]
 801bf12:	2f00      	cmp	r7, #0
 801bf14:	d0a9      	beq.n	801be6a <__sflush_r+0x1a>
 801bf16:	0793      	lsls	r3, r2, #30
 801bf18:	680e      	ldr	r6, [r1, #0]
 801bf1a:	bf08      	it	eq
 801bf1c:	694b      	ldreq	r3, [r1, #20]
 801bf1e:	600f      	str	r7, [r1, #0]
 801bf20:	bf18      	it	ne
 801bf22:	2300      	movne	r3, #0
 801bf24:	eba6 0807 	sub.w	r8, r6, r7
 801bf28:	608b      	str	r3, [r1, #8]
 801bf2a:	f1b8 0f00 	cmp.w	r8, #0
 801bf2e:	dd9c      	ble.n	801be6a <__sflush_r+0x1a>
 801bf30:	6a21      	ldr	r1, [r4, #32]
 801bf32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bf34:	4643      	mov	r3, r8
 801bf36:	463a      	mov	r2, r7
 801bf38:	4628      	mov	r0, r5
 801bf3a:	47b0      	blx	r6
 801bf3c:	2800      	cmp	r0, #0
 801bf3e:	dc06      	bgt.n	801bf4e <__sflush_r+0xfe>
 801bf40:	89a3      	ldrh	r3, [r4, #12]
 801bf42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf46:	81a3      	strh	r3, [r4, #12]
 801bf48:	f04f 30ff 	mov.w	r0, #4294967295
 801bf4c:	e78e      	b.n	801be6c <__sflush_r+0x1c>
 801bf4e:	4407      	add	r7, r0
 801bf50:	eba8 0800 	sub.w	r8, r8, r0
 801bf54:	e7e9      	b.n	801bf2a <__sflush_r+0xda>
 801bf56:	bf00      	nop
 801bf58:	20400001 	.word	0x20400001

0801bf5c <_fflush_r>:
 801bf5c:	b538      	push	{r3, r4, r5, lr}
 801bf5e:	690b      	ldr	r3, [r1, #16]
 801bf60:	4605      	mov	r5, r0
 801bf62:	460c      	mov	r4, r1
 801bf64:	b913      	cbnz	r3, 801bf6c <_fflush_r+0x10>
 801bf66:	2500      	movs	r5, #0
 801bf68:	4628      	mov	r0, r5
 801bf6a:	bd38      	pop	{r3, r4, r5, pc}
 801bf6c:	b118      	cbz	r0, 801bf76 <_fflush_r+0x1a>
 801bf6e:	6983      	ldr	r3, [r0, #24]
 801bf70:	b90b      	cbnz	r3, 801bf76 <_fflush_r+0x1a>
 801bf72:	f000 f887 	bl	801c084 <__sinit>
 801bf76:	4b14      	ldr	r3, [pc, #80]	; (801bfc8 <_fflush_r+0x6c>)
 801bf78:	429c      	cmp	r4, r3
 801bf7a:	d11b      	bne.n	801bfb4 <_fflush_r+0x58>
 801bf7c:	686c      	ldr	r4, [r5, #4]
 801bf7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d0ef      	beq.n	801bf66 <_fflush_r+0xa>
 801bf86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bf88:	07d0      	lsls	r0, r2, #31
 801bf8a:	d404      	bmi.n	801bf96 <_fflush_r+0x3a>
 801bf8c:	0599      	lsls	r1, r3, #22
 801bf8e:	d402      	bmi.n	801bf96 <_fflush_r+0x3a>
 801bf90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bf92:	f000 f927 	bl	801c1e4 <__retarget_lock_acquire_recursive>
 801bf96:	4628      	mov	r0, r5
 801bf98:	4621      	mov	r1, r4
 801bf9a:	f7ff ff59 	bl	801be50 <__sflush_r>
 801bf9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bfa0:	07da      	lsls	r2, r3, #31
 801bfa2:	4605      	mov	r5, r0
 801bfa4:	d4e0      	bmi.n	801bf68 <_fflush_r+0xc>
 801bfa6:	89a3      	ldrh	r3, [r4, #12]
 801bfa8:	059b      	lsls	r3, r3, #22
 801bfaa:	d4dd      	bmi.n	801bf68 <_fflush_r+0xc>
 801bfac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bfae:	f000 f91a 	bl	801c1e6 <__retarget_lock_release_recursive>
 801bfb2:	e7d9      	b.n	801bf68 <_fflush_r+0xc>
 801bfb4:	4b05      	ldr	r3, [pc, #20]	; (801bfcc <_fflush_r+0x70>)
 801bfb6:	429c      	cmp	r4, r3
 801bfb8:	d101      	bne.n	801bfbe <_fflush_r+0x62>
 801bfba:	68ac      	ldr	r4, [r5, #8]
 801bfbc:	e7df      	b.n	801bf7e <_fflush_r+0x22>
 801bfbe:	4b04      	ldr	r3, [pc, #16]	; (801bfd0 <_fflush_r+0x74>)
 801bfc0:	429c      	cmp	r4, r3
 801bfc2:	bf08      	it	eq
 801bfc4:	68ec      	ldreq	r4, [r5, #12]
 801bfc6:	e7da      	b.n	801bf7e <_fflush_r+0x22>
 801bfc8:	0801d28c 	.word	0x0801d28c
 801bfcc:	0801d2ac 	.word	0x0801d2ac
 801bfd0:	0801d26c 	.word	0x0801d26c

0801bfd4 <std>:
 801bfd4:	2300      	movs	r3, #0
 801bfd6:	b510      	push	{r4, lr}
 801bfd8:	4604      	mov	r4, r0
 801bfda:	e9c0 3300 	strd	r3, r3, [r0]
 801bfde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bfe2:	6083      	str	r3, [r0, #8]
 801bfe4:	8181      	strh	r1, [r0, #12]
 801bfe6:	6643      	str	r3, [r0, #100]	; 0x64
 801bfe8:	81c2      	strh	r2, [r0, #14]
 801bfea:	6183      	str	r3, [r0, #24]
 801bfec:	4619      	mov	r1, r3
 801bfee:	2208      	movs	r2, #8
 801bff0:	305c      	adds	r0, #92	; 0x5c
 801bff2:	f7fc f8df 	bl	80181b4 <memset>
 801bff6:	4b05      	ldr	r3, [pc, #20]	; (801c00c <std+0x38>)
 801bff8:	6263      	str	r3, [r4, #36]	; 0x24
 801bffa:	4b05      	ldr	r3, [pc, #20]	; (801c010 <std+0x3c>)
 801bffc:	62a3      	str	r3, [r4, #40]	; 0x28
 801bffe:	4b05      	ldr	r3, [pc, #20]	; (801c014 <std+0x40>)
 801c000:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c002:	4b05      	ldr	r3, [pc, #20]	; (801c018 <std+0x44>)
 801c004:	6224      	str	r4, [r4, #32]
 801c006:	6323      	str	r3, [r4, #48]	; 0x30
 801c008:	bd10      	pop	{r4, pc}
 801c00a:	bf00      	nop
 801c00c:	08018ea5 	.word	0x08018ea5
 801c010:	08018ec7 	.word	0x08018ec7
 801c014:	08018eff 	.word	0x08018eff
 801c018:	08018f23 	.word	0x08018f23

0801c01c <_cleanup_r>:
 801c01c:	4901      	ldr	r1, [pc, #4]	; (801c024 <_cleanup_r+0x8>)
 801c01e:	f000 b8c1 	b.w	801c1a4 <_fwalk_reent>
 801c022:	bf00      	nop
 801c024:	0801bf5d 	.word	0x0801bf5d

0801c028 <__sfmoreglue>:
 801c028:	b570      	push	{r4, r5, r6, lr}
 801c02a:	2268      	movs	r2, #104	; 0x68
 801c02c:	1e4d      	subs	r5, r1, #1
 801c02e:	4355      	muls	r5, r2
 801c030:	460e      	mov	r6, r1
 801c032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c036:	f7ff fcd1 	bl	801b9dc <_malloc_r>
 801c03a:	4604      	mov	r4, r0
 801c03c:	b140      	cbz	r0, 801c050 <__sfmoreglue+0x28>
 801c03e:	2100      	movs	r1, #0
 801c040:	e9c0 1600 	strd	r1, r6, [r0]
 801c044:	300c      	adds	r0, #12
 801c046:	60a0      	str	r0, [r4, #8]
 801c048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c04c:	f7fc f8b2 	bl	80181b4 <memset>
 801c050:	4620      	mov	r0, r4
 801c052:	bd70      	pop	{r4, r5, r6, pc}

0801c054 <__sfp_lock_acquire>:
 801c054:	4801      	ldr	r0, [pc, #4]	; (801c05c <__sfp_lock_acquire+0x8>)
 801c056:	f000 b8c5 	b.w	801c1e4 <__retarget_lock_acquire_recursive>
 801c05a:	bf00      	nop
 801c05c:	24002b75 	.word	0x24002b75

0801c060 <__sfp_lock_release>:
 801c060:	4801      	ldr	r0, [pc, #4]	; (801c068 <__sfp_lock_release+0x8>)
 801c062:	f000 b8c0 	b.w	801c1e6 <__retarget_lock_release_recursive>
 801c066:	bf00      	nop
 801c068:	24002b75 	.word	0x24002b75

0801c06c <__sinit_lock_acquire>:
 801c06c:	4801      	ldr	r0, [pc, #4]	; (801c074 <__sinit_lock_acquire+0x8>)
 801c06e:	f000 b8b9 	b.w	801c1e4 <__retarget_lock_acquire_recursive>
 801c072:	bf00      	nop
 801c074:	24002b76 	.word	0x24002b76

0801c078 <__sinit_lock_release>:
 801c078:	4801      	ldr	r0, [pc, #4]	; (801c080 <__sinit_lock_release+0x8>)
 801c07a:	f000 b8b4 	b.w	801c1e6 <__retarget_lock_release_recursive>
 801c07e:	bf00      	nop
 801c080:	24002b76 	.word	0x24002b76

0801c084 <__sinit>:
 801c084:	b510      	push	{r4, lr}
 801c086:	4604      	mov	r4, r0
 801c088:	f7ff fff0 	bl	801c06c <__sinit_lock_acquire>
 801c08c:	69a3      	ldr	r3, [r4, #24]
 801c08e:	b11b      	cbz	r3, 801c098 <__sinit+0x14>
 801c090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c094:	f7ff bff0 	b.w	801c078 <__sinit_lock_release>
 801c098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c09c:	6523      	str	r3, [r4, #80]	; 0x50
 801c09e:	4b13      	ldr	r3, [pc, #76]	; (801c0ec <__sinit+0x68>)
 801c0a0:	4a13      	ldr	r2, [pc, #76]	; (801c0f0 <__sinit+0x6c>)
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	62a2      	str	r2, [r4, #40]	; 0x28
 801c0a6:	42a3      	cmp	r3, r4
 801c0a8:	bf04      	itt	eq
 801c0aa:	2301      	moveq	r3, #1
 801c0ac:	61a3      	streq	r3, [r4, #24]
 801c0ae:	4620      	mov	r0, r4
 801c0b0:	f000 f820 	bl	801c0f4 <__sfp>
 801c0b4:	6060      	str	r0, [r4, #4]
 801c0b6:	4620      	mov	r0, r4
 801c0b8:	f000 f81c 	bl	801c0f4 <__sfp>
 801c0bc:	60a0      	str	r0, [r4, #8]
 801c0be:	4620      	mov	r0, r4
 801c0c0:	f000 f818 	bl	801c0f4 <__sfp>
 801c0c4:	2200      	movs	r2, #0
 801c0c6:	60e0      	str	r0, [r4, #12]
 801c0c8:	2104      	movs	r1, #4
 801c0ca:	6860      	ldr	r0, [r4, #4]
 801c0cc:	f7ff ff82 	bl	801bfd4 <std>
 801c0d0:	68a0      	ldr	r0, [r4, #8]
 801c0d2:	2201      	movs	r2, #1
 801c0d4:	2109      	movs	r1, #9
 801c0d6:	f7ff ff7d 	bl	801bfd4 <std>
 801c0da:	68e0      	ldr	r0, [r4, #12]
 801c0dc:	2202      	movs	r2, #2
 801c0de:	2112      	movs	r1, #18
 801c0e0:	f7ff ff78 	bl	801bfd4 <std>
 801c0e4:	2301      	movs	r3, #1
 801c0e6:	61a3      	str	r3, [r4, #24]
 801c0e8:	e7d2      	b.n	801c090 <__sinit+0xc>
 801c0ea:	bf00      	nop
 801c0ec:	0801ce24 	.word	0x0801ce24
 801c0f0:	0801c01d 	.word	0x0801c01d

0801c0f4 <__sfp>:
 801c0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0f6:	4607      	mov	r7, r0
 801c0f8:	f7ff ffac 	bl	801c054 <__sfp_lock_acquire>
 801c0fc:	4b1e      	ldr	r3, [pc, #120]	; (801c178 <__sfp+0x84>)
 801c0fe:	681e      	ldr	r6, [r3, #0]
 801c100:	69b3      	ldr	r3, [r6, #24]
 801c102:	b913      	cbnz	r3, 801c10a <__sfp+0x16>
 801c104:	4630      	mov	r0, r6
 801c106:	f7ff ffbd 	bl	801c084 <__sinit>
 801c10a:	3648      	adds	r6, #72	; 0x48
 801c10c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c110:	3b01      	subs	r3, #1
 801c112:	d503      	bpl.n	801c11c <__sfp+0x28>
 801c114:	6833      	ldr	r3, [r6, #0]
 801c116:	b30b      	cbz	r3, 801c15c <__sfp+0x68>
 801c118:	6836      	ldr	r6, [r6, #0]
 801c11a:	e7f7      	b.n	801c10c <__sfp+0x18>
 801c11c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c120:	b9d5      	cbnz	r5, 801c158 <__sfp+0x64>
 801c122:	4b16      	ldr	r3, [pc, #88]	; (801c17c <__sfp+0x88>)
 801c124:	60e3      	str	r3, [r4, #12]
 801c126:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c12a:	6665      	str	r5, [r4, #100]	; 0x64
 801c12c:	f000 f859 	bl	801c1e2 <__retarget_lock_init_recursive>
 801c130:	f7ff ff96 	bl	801c060 <__sfp_lock_release>
 801c134:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c138:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c13c:	6025      	str	r5, [r4, #0]
 801c13e:	61a5      	str	r5, [r4, #24]
 801c140:	2208      	movs	r2, #8
 801c142:	4629      	mov	r1, r5
 801c144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c148:	f7fc f834 	bl	80181b4 <memset>
 801c14c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c154:	4620      	mov	r0, r4
 801c156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c158:	3468      	adds	r4, #104	; 0x68
 801c15a:	e7d9      	b.n	801c110 <__sfp+0x1c>
 801c15c:	2104      	movs	r1, #4
 801c15e:	4638      	mov	r0, r7
 801c160:	f7ff ff62 	bl	801c028 <__sfmoreglue>
 801c164:	4604      	mov	r4, r0
 801c166:	6030      	str	r0, [r6, #0]
 801c168:	2800      	cmp	r0, #0
 801c16a:	d1d5      	bne.n	801c118 <__sfp+0x24>
 801c16c:	f7ff ff78 	bl	801c060 <__sfp_lock_release>
 801c170:	230c      	movs	r3, #12
 801c172:	603b      	str	r3, [r7, #0]
 801c174:	e7ee      	b.n	801c154 <__sfp+0x60>
 801c176:	bf00      	nop
 801c178:	0801ce24 	.word	0x0801ce24
 801c17c:	ffff0001 	.word	0xffff0001

0801c180 <fiprintf>:
 801c180:	b40e      	push	{r1, r2, r3}
 801c182:	b503      	push	{r0, r1, lr}
 801c184:	4601      	mov	r1, r0
 801c186:	ab03      	add	r3, sp, #12
 801c188:	4805      	ldr	r0, [pc, #20]	; (801c1a0 <fiprintf+0x20>)
 801c18a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c18e:	6800      	ldr	r0, [r0, #0]
 801c190:	9301      	str	r3, [sp, #4]
 801c192:	f000 f8a7 	bl	801c2e4 <_vfiprintf_r>
 801c196:	b002      	add	sp, #8
 801c198:	f85d eb04 	ldr.w	lr, [sp], #4
 801c19c:	b003      	add	sp, #12
 801c19e:	4770      	bx	lr
 801c1a0:	24000100 	.word	0x24000100

0801c1a4 <_fwalk_reent>:
 801c1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1a8:	4606      	mov	r6, r0
 801c1aa:	4688      	mov	r8, r1
 801c1ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c1b0:	2700      	movs	r7, #0
 801c1b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c1b6:	f1b9 0901 	subs.w	r9, r9, #1
 801c1ba:	d505      	bpl.n	801c1c8 <_fwalk_reent+0x24>
 801c1bc:	6824      	ldr	r4, [r4, #0]
 801c1be:	2c00      	cmp	r4, #0
 801c1c0:	d1f7      	bne.n	801c1b2 <_fwalk_reent+0xe>
 801c1c2:	4638      	mov	r0, r7
 801c1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c1c8:	89ab      	ldrh	r3, [r5, #12]
 801c1ca:	2b01      	cmp	r3, #1
 801c1cc:	d907      	bls.n	801c1de <_fwalk_reent+0x3a>
 801c1ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c1d2:	3301      	adds	r3, #1
 801c1d4:	d003      	beq.n	801c1de <_fwalk_reent+0x3a>
 801c1d6:	4629      	mov	r1, r5
 801c1d8:	4630      	mov	r0, r6
 801c1da:	47c0      	blx	r8
 801c1dc:	4307      	orrs	r7, r0
 801c1de:	3568      	adds	r5, #104	; 0x68
 801c1e0:	e7e9      	b.n	801c1b6 <_fwalk_reent+0x12>

0801c1e2 <__retarget_lock_init_recursive>:
 801c1e2:	4770      	bx	lr

0801c1e4 <__retarget_lock_acquire_recursive>:
 801c1e4:	4770      	bx	lr

0801c1e6 <__retarget_lock_release_recursive>:
 801c1e6:	4770      	bx	lr

0801c1e8 <memmove>:
 801c1e8:	4288      	cmp	r0, r1
 801c1ea:	b510      	push	{r4, lr}
 801c1ec:	eb01 0402 	add.w	r4, r1, r2
 801c1f0:	d902      	bls.n	801c1f8 <memmove+0x10>
 801c1f2:	4284      	cmp	r4, r0
 801c1f4:	4623      	mov	r3, r4
 801c1f6:	d807      	bhi.n	801c208 <memmove+0x20>
 801c1f8:	1e43      	subs	r3, r0, #1
 801c1fa:	42a1      	cmp	r1, r4
 801c1fc:	d008      	beq.n	801c210 <memmove+0x28>
 801c1fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c202:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c206:	e7f8      	b.n	801c1fa <memmove+0x12>
 801c208:	4402      	add	r2, r0
 801c20a:	4601      	mov	r1, r0
 801c20c:	428a      	cmp	r2, r1
 801c20e:	d100      	bne.n	801c212 <memmove+0x2a>
 801c210:	bd10      	pop	{r4, pc}
 801c212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c21a:	e7f7      	b.n	801c20c <memmove+0x24>

0801c21c <__malloc_lock>:
 801c21c:	4801      	ldr	r0, [pc, #4]	; (801c224 <__malloc_lock+0x8>)
 801c21e:	f7ff bfe1 	b.w	801c1e4 <__retarget_lock_acquire_recursive>
 801c222:	bf00      	nop
 801c224:	24002b74 	.word	0x24002b74

0801c228 <__malloc_unlock>:
 801c228:	4801      	ldr	r0, [pc, #4]	; (801c230 <__malloc_unlock+0x8>)
 801c22a:	f7ff bfdc 	b.w	801c1e6 <__retarget_lock_release_recursive>
 801c22e:	bf00      	nop
 801c230:	24002b74 	.word	0x24002b74

0801c234 <_realloc_r>:
 801c234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c238:	4680      	mov	r8, r0
 801c23a:	4614      	mov	r4, r2
 801c23c:	460e      	mov	r6, r1
 801c23e:	b921      	cbnz	r1, 801c24a <_realloc_r+0x16>
 801c240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c244:	4611      	mov	r1, r2
 801c246:	f7ff bbc9 	b.w	801b9dc <_malloc_r>
 801c24a:	b92a      	cbnz	r2, 801c258 <_realloc_r+0x24>
 801c24c:	f7ff fb5a 	bl	801b904 <_free_r>
 801c250:	4625      	mov	r5, r4
 801c252:	4628      	mov	r0, r5
 801c254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c258:	f000 faa0 	bl	801c79c <_malloc_usable_size_r>
 801c25c:	4284      	cmp	r4, r0
 801c25e:	4607      	mov	r7, r0
 801c260:	d802      	bhi.n	801c268 <_realloc_r+0x34>
 801c262:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c266:	d812      	bhi.n	801c28e <_realloc_r+0x5a>
 801c268:	4621      	mov	r1, r4
 801c26a:	4640      	mov	r0, r8
 801c26c:	f7ff fbb6 	bl	801b9dc <_malloc_r>
 801c270:	4605      	mov	r5, r0
 801c272:	2800      	cmp	r0, #0
 801c274:	d0ed      	beq.n	801c252 <_realloc_r+0x1e>
 801c276:	42bc      	cmp	r4, r7
 801c278:	4622      	mov	r2, r4
 801c27a:	4631      	mov	r1, r6
 801c27c:	bf28      	it	cs
 801c27e:	463a      	movcs	r2, r7
 801c280:	f7fb ff8a 	bl	8018198 <memcpy>
 801c284:	4631      	mov	r1, r6
 801c286:	4640      	mov	r0, r8
 801c288:	f7ff fb3c 	bl	801b904 <_free_r>
 801c28c:	e7e1      	b.n	801c252 <_realloc_r+0x1e>
 801c28e:	4635      	mov	r5, r6
 801c290:	e7df      	b.n	801c252 <_realloc_r+0x1e>

0801c292 <__sfputc_r>:
 801c292:	6893      	ldr	r3, [r2, #8]
 801c294:	3b01      	subs	r3, #1
 801c296:	2b00      	cmp	r3, #0
 801c298:	b410      	push	{r4}
 801c29a:	6093      	str	r3, [r2, #8]
 801c29c:	da08      	bge.n	801c2b0 <__sfputc_r+0x1e>
 801c29e:	6994      	ldr	r4, [r2, #24]
 801c2a0:	42a3      	cmp	r3, r4
 801c2a2:	db01      	blt.n	801c2a8 <__sfputc_r+0x16>
 801c2a4:	290a      	cmp	r1, #10
 801c2a6:	d103      	bne.n	801c2b0 <__sfputc_r+0x1e>
 801c2a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2ac:	f000 b94a 	b.w	801c544 <__swbuf_r>
 801c2b0:	6813      	ldr	r3, [r2, #0]
 801c2b2:	1c58      	adds	r0, r3, #1
 801c2b4:	6010      	str	r0, [r2, #0]
 801c2b6:	7019      	strb	r1, [r3, #0]
 801c2b8:	4608      	mov	r0, r1
 801c2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2be:	4770      	bx	lr

0801c2c0 <__sfputs_r>:
 801c2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2c2:	4606      	mov	r6, r0
 801c2c4:	460f      	mov	r7, r1
 801c2c6:	4614      	mov	r4, r2
 801c2c8:	18d5      	adds	r5, r2, r3
 801c2ca:	42ac      	cmp	r4, r5
 801c2cc:	d101      	bne.n	801c2d2 <__sfputs_r+0x12>
 801c2ce:	2000      	movs	r0, #0
 801c2d0:	e007      	b.n	801c2e2 <__sfputs_r+0x22>
 801c2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2d6:	463a      	mov	r2, r7
 801c2d8:	4630      	mov	r0, r6
 801c2da:	f7ff ffda 	bl	801c292 <__sfputc_r>
 801c2de:	1c43      	adds	r3, r0, #1
 801c2e0:	d1f3      	bne.n	801c2ca <__sfputs_r+0xa>
 801c2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c2e4 <_vfiprintf_r>:
 801c2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2e8:	460d      	mov	r5, r1
 801c2ea:	b09d      	sub	sp, #116	; 0x74
 801c2ec:	4614      	mov	r4, r2
 801c2ee:	4698      	mov	r8, r3
 801c2f0:	4606      	mov	r6, r0
 801c2f2:	b118      	cbz	r0, 801c2fc <_vfiprintf_r+0x18>
 801c2f4:	6983      	ldr	r3, [r0, #24]
 801c2f6:	b90b      	cbnz	r3, 801c2fc <_vfiprintf_r+0x18>
 801c2f8:	f7ff fec4 	bl	801c084 <__sinit>
 801c2fc:	4b89      	ldr	r3, [pc, #548]	; (801c524 <_vfiprintf_r+0x240>)
 801c2fe:	429d      	cmp	r5, r3
 801c300:	d11b      	bne.n	801c33a <_vfiprintf_r+0x56>
 801c302:	6875      	ldr	r5, [r6, #4]
 801c304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c306:	07d9      	lsls	r1, r3, #31
 801c308:	d405      	bmi.n	801c316 <_vfiprintf_r+0x32>
 801c30a:	89ab      	ldrh	r3, [r5, #12]
 801c30c:	059a      	lsls	r2, r3, #22
 801c30e:	d402      	bmi.n	801c316 <_vfiprintf_r+0x32>
 801c310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c312:	f7ff ff67 	bl	801c1e4 <__retarget_lock_acquire_recursive>
 801c316:	89ab      	ldrh	r3, [r5, #12]
 801c318:	071b      	lsls	r3, r3, #28
 801c31a:	d501      	bpl.n	801c320 <_vfiprintf_r+0x3c>
 801c31c:	692b      	ldr	r3, [r5, #16]
 801c31e:	b9eb      	cbnz	r3, 801c35c <_vfiprintf_r+0x78>
 801c320:	4629      	mov	r1, r5
 801c322:	4630      	mov	r0, r6
 801c324:	f000 f960 	bl	801c5e8 <__swsetup_r>
 801c328:	b1c0      	cbz	r0, 801c35c <_vfiprintf_r+0x78>
 801c32a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c32c:	07dc      	lsls	r4, r3, #31
 801c32e:	d50e      	bpl.n	801c34e <_vfiprintf_r+0x6a>
 801c330:	f04f 30ff 	mov.w	r0, #4294967295
 801c334:	b01d      	add	sp, #116	; 0x74
 801c336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c33a:	4b7b      	ldr	r3, [pc, #492]	; (801c528 <_vfiprintf_r+0x244>)
 801c33c:	429d      	cmp	r5, r3
 801c33e:	d101      	bne.n	801c344 <_vfiprintf_r+0x60>
 801c340:	68b5      	ldr	r5, [r6, #8]
 801c342:	e7df      	b.n	801c304 <_vfiprintf_r+0x20>
 801c344:	4b79      	ldr	r3, [pc, #484]	; (801c52c <_vfiprintf_r+0x248>)
 801c346:	429d      	cmp	r5, r3
 801c348:	bf08      	it	eq
 801c34a:	68f5      	ldreq	r5, [r6, #12]
 801c34c:	e7da      	b.n	801c304 <_vfiprintf_r+0x20>
 801c34e:	89ab      	ldrh	r3, [r5, #12]
 801c350:	0598      	lsls	r0, r3, #22
 801c352:	d4ed      	bmi.n	801c330 <_vfiprintf_r+0x4c>
 801c354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c356:	f7ff ff46 	bl	801c1e6 <__retarget_lock_release_recursive>
 801c35a:	e7e9      	b.n	801c330 <_vfiprintf_r+0x4c>
 801c35c:	2300      	movs	r3, #0
 801c35e:	9309      	str	r3, [sp, #36]	; 0x24
 801c360:	2320      	movs	r3, #32
 801c362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c366:	f8cd 800c 	str.w	r8, [sp, #12]
 801c36a:	2330      	movs	r3, #48	; 0x30
 801c36c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c530 <_vfiprintf_r+0x24c>
 801c370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c374:	f04f 0901 	mov.w	r9, #1
 801c378:	4623      	mov	r3, r4
 801c37a:	469a      	mov	sl, r3
 801c37c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c380:	b10a      	cbz	r2, 801c386 <_vfiprintf_r+0xa2>
 801c382:	2a25      	cmp	r2, #37	; 0x25
 801c384:	d1f9      	bne.n	801c37a <_vfiprintf_r+0x96>
 801c386:	ebba 0b04 	subs.w	fp, sl, r4
 801c38a:	d00b      	beq.n	801c3a4 <_vfiprintf_r+0xc0>
 801c38c:	465b      	mov	r3, fp
 801c38e:	4622      	mov	r2, r4
 801c390:	4629      	mov	r1, r5
 801c392:	4630      	mov	r0, r6
 801c394:	f7ff ff94 	bl	801c2c0 <__sfputs_r>
 801c398:	3001      	adds	r0, #1
 801c39a:	f000 80aa 	beq.w	801c4f2 <_vfiprintf_r+0x20e>
 801c39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3a0:	445a      	add	r2, fp
 801c3a2:	9209      	str	r2, [sp, #36]	; 0x24
 801c3a4:	f89a 3000 	ldrb.w	r3, [sl]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	f000 80a2 	beq.w	801c4f2 <_vfiprintf_r+0x20e>
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	f04f 32ff 	mov.w	r2, #4294967295
 801c3b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c3b8:	f10a 0a01 	add.w	sl, sl, #1
 801c3bc:	9304      	str	r3, [sp, #16]
 801c3be:	9307      	str	r3, [sp, #28]
 801c3c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c3c4:	931a      	str	r3, [sp, #104]	; 0x68
 801c3c6:	4654      	mov	r4, sl
 801c3c8:	2205      	movs	r2, #5
 801c3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3ce:	4858      	ldr	r0, [pc, #352]	; (801c530 <_vfiprintf_r+0x24c>)
 801c3d0:	f7e3 ffa6 	bl	8000320 <memchr>
 801c3d4:	9a04      	ldr	r2, [sp, #16]
 801c3d6:	b9d8      	cbnz	r0, 801c410 <_vfiprintf_r+0x12c>
 801c3d8:	06d1      	lsls	r1, r2, #27
 801c3da:	bf44      	itt	mi
 801c3dc:	2320      	movmi	r3, #32
 801c3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c3e2:	0713      	lsls	r3, r2, #28
 801c3e4:	bf44      	itt	mi
 801c3e6:	232b      	movmi	r3, #43	; 0x2b
 801c3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c3ec:	f89a 3000 	ldrb.w	r3, [sl]
 801c3f0:	2b2a      	cmp	r3, #42	; 0x2a
 801c3f2:	d015      	beq.n	801c420 <_vfiprintf_r+0x13c>
 801c3f4:	9a07      	ldr	r2, [sp, #28]
 801c3f6:	4654      	mov	r4, sl
 801c3f8:	2000      	movs	r0, #0
 801c3fa:	f04f 0c0a 	mov.w	ip, #10
 801c3fe:	4621      	mov	r1, r4
 801c400:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c404:	3b30      	subs	r3, #48	; 0x30
 801c406:	2b09      	cmp	r3, #9
 801c408:	d94e      	bls.n	801c4a8 <_vfiprintf_r+0x1c4>
 801c40a:	b1b0      	cbz	r0, 801c43a <_vfiprintf_r+0x156>
 801c40c:	9207      	str	r2, [sp, #28]
 801c40e:	e014      	b.n	801c43a <_vfiprintf_r+0x156>
 801c410:	eba0 0308 	sub.w	r3, r0, r8
 801c414:	fa09 f303 	lsl.w	r3, r9, r3
 801c418:	4313      	orrs	r3, r2
 801c41a:	9304      	str	r3, [sp, #16]
 801c41c:	46a2      	mov	sl, r4
 801c41e:	e7d2      	b.n	801c3c6 <_vfiprintf_r+0xe2>
 801c420:	9b03      	ldr	r3, [sp, #12]
 801c422:	1d19      	adds	r1, r3, #4
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	9103      	str	r1, [sp, #12]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	bfbb      	ittet	lt
 801c42c:	425b      	neglt	r3, r3
 801c42e:	f042 0202 	orrlt.w	r2, r2, #2
 801c432:	9307      	strge	r3, [sp, #28]
 801c434:	9307      	strlt	r3, [sp, #28]
 801c436:	bfb8      	it	lt
 801c438:	9204      	strlt	r2, [sp, #16]
 801c43a:	7823      	ldrb	r3, [r4, #0]
 801c43c:	2b2e      	cmp	r3, #46	; 0x2e
 801c43e:	d10c      	bne.n	801c45a <_vfiprintf_r+0x176>
 801c440:	7863      	ldrb	r3, [r4, #1]
 801c442:	2b2a      	cmp	r3, #42	; 0x2a
 801c444:	d135      	bne.n	801c4b2 <_vfiprintf_r+0x1ce>
 801c446:	9b03      	ldr	r3, [sp, #12]
 801c448:	1d1a      	adds	r2, r3, #4
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	9203      	str	r2, [sp, #12]
 801c44e:	2b00      	cmp	r3, #0
 801c450:	bfb8      	it	lt
 801c452:	f04f 33ff 	movlt.w	r3, #4294967295
 801c456:	3402      	adds	r4, #2
 801c458:	9305      	str	r3, [sp, #20]
 801c45a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c540 <_vfiprintf_r+0x25c>
 801c45e:	7821      	ldrb	r1, [r4, #0]
 801c460:	2203      	movs	r2, #3
 801c462:	4650      	mov	r0, sl
 801c464:	f7e3 ff5c 	bl	8000320 <memchr>
 801c468:	b140      	cbz	r0, 801c47c <_vfiprintf_r+0x198>
 801c46a:	2340      	movs	r3, #64	; 0x40
 801c46c:	eba0 000a 	sub.w	r0, r0, sl
 801c470:	fa03 f000 	lsl.w	r0, r3, r0
 801c474:	9b04      	ldr	r3, [sp, #16]
 801c476:	4303      	orrs	r3, r0
 801c478:	3401      	adds	r4, #1
 801c47a:	9304      	str	r3, [sp, #16]
 801c47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c480:	482c      	ldr	r0, [pc, #176]	; (801c534 <_vfiprintf_r+0x250>)
 801c482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c486:	2206      	movs	r2, #6
 801c488:	f7e3 ff4a 	bl	8000320 <memchr>
 801c48c:	2800      	cmp	r0, #0
 801c48e:	d03f      	beq.n	801c510 <_vfiprintf_r+0x22c>
 801c490:	4b29      	ldr	r3, [pc, #164]	; (801c538 <_vfiprintf_r+0x254>)
 801c492:	bb1b      	cbnz	r3, 801c4dc <_vfiprintf_r+0x1f8>
 801c494:	9b03      	ldr	r3, [sp, #12]
 801c496:	3307      	adds	r3, #7
 801c498:	f023 0307 	bic.w	r3, r3, #7
 801c49c:	3308      	adds	r3, #8
 801c49e:	9303      	str	r3, [sp, #12]
 801c4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4a2:	443b      	add	r3, r7
 801c4a4:	9309      	str	r3, [sp, #36]	; 0x24
 801c4a6:	e767      	b.n	801c378 <_vfiprintf_r+0x94>
 801c4a8:	fb0c 3202 	mla	r2, ip, r2, r3
 801c4ac:	460c      	mov	r4, r1
 801c4ae:	2001      	movs	r0, #1
 801c4b0:	e7a5      	b.n	801c3fe <_vfiprintf_r+0x11a>
 801c4b2:	2300      	movs	r3, #0
 801c4b4:	3401      	adds	r4, #1
 801c4b6:	9305      	str	r3, [sp, #20]
 801c4b8:	4619      	mov	r1, r3
 801c4ba:	f04f 0c0a 	mov.w	ip, #10
 801c4be:	4620      	mov	r0, r4
 801c4c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c4c4:	3a30      	subs	r2, #48	; 0x30
 801c4c6:	2a09      	cmp	r2, #9
 801c4c8:	d903      	bls.n	801c4d2 <_vfiprintf_r+0x1ee>
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d0c5      	beq.n	801c45a <_vfiprintf_r+0x176>
 801c4ce:	9105      	str	r1, [sp, #20]
 801c4d0:	e7c3      	b.n	801c45a <_vfiprintf_r+0x176>
 801c4d2:	fb0c 2101 	mla	r1, ip, r1, r2
 801c4d6:	4604      	mov	r4, r0
 801c4d8:	2301      	movs	r3, #1
 801c4da:	e7f0      	b.n	801c4be <_vfiprintf_r+0x1da>
 801c4dc:	ab03      	add	r3, sp, #12
 801c4de:	9300      	str	r3, [sp, #0]
 801c4e0:	462a      	mov	r2, r5
 801c4e2:	4b16      	ldr	r3, [pc, #88]	; (801c53c <_vfiprintf_r+0x258>)
 801c4e4:	a904      	add	r1, sp, #16
 801c4e6:	4630      	mov	r0, r6
 801c4e8:	f7fb fefe 	bl	80182e8 <_printf_float>
 801c4ec:	4607      	mov	r7, r0
 801c4ee:	1c78      	adds	r0, r7, #1
 801c4f0:	d1d6      	bne.n	801c4a0 <_vfiprintf_r+0x1bc>
 801c4f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c4f4:	07d9      	lsls	r1, r3, #31
 801c4f6:	d405      	bmi.n	801c504 <_vfiprintf_r+0x220>
 801c4f8:	89ab      	ldrh	r3, [r5, #12]
 801c4fa:	059a      	lsls	r2, r3, #22
 801c4fc:	d402      	bmi.n	801c504 <_vfiprintf_r+0x220>
 801c4fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c500:	f7ff fe71 	bl	801c1e6 <__retarget_lock_release_recursive>
 801c504:	89ab      	ldrh	r3, [r5, #12]
 801c506:	065b      	lsls	r3, r3, #25
 801c508:	f53f af12 	bmi.w	801c330 <_vfiprintf_r+0x4c>
 801c50c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c50e:	e711      	b.n	801c334 <_vfiprintf_r+0x50>
 801c510:	ab03      	add	r3, sp, #12
 801c512:	9300      	str	r3, [sp, #0]
 801c514:	462a      	mov	r2, r5
 801c516:	4b09      	ldr	r3, [pc, #36]	; (801c53c <_vfiprintf_r+0x258>)
 801c518:	a904      	add	r1, sp, #16
 801c51a:	4630      	mov	r0, r6
 801c51c:	f7fc f970 	bl	8018800 <_printf_i>
 801c520:	e7e4      	b.n	801c4ec <_vfiprintf_r+0x208>
 801c522:	bf00      	nop
 801c524:	0801d28c 	.word	0x0801d28c
 801c528:	0801d2ac 	.word	0x0801d2ac
 801c52c:	0801d26c 	.word	0x0801d26c
 801c530:	0801d21c 	.word	0x0801d21c
 801c534:	0801d226 	.word	0x0801d226
 801c538:	080182e9 	.word	0x080182e9
 801c53c:	0801c2c1 	.word	0x0801c2c1
 801c540:	0801d222 	.word	0x0801d222

0801c544 <__swbuf_r>:
 801c544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c546:	460e      	mov	r6, r1
 801c548:	4614      	mov	r4, r2
 801c54a:	4605      	mov	r5, r0
 801c54c:	b118      	cbz	r0, 801c556 <__swbuf_r+0x12>
 801c54e:	6983      	ldr	r3, [r0, #24]
 801c550:	b90b      	cbnz	r3, 801c556 <__swbuf_r+0x12>
 801c552:	f7ff fd97 	bl	801c084 <__sinit>
 801c556:	4b21      	ldr	r3, [pc, #132]	; (801c5dc <__swbuf_r+0x98>)
 801c558:	429c      	cmp	r4, r3
 801c55a:	d12b      	bne.n	801c5b4 <__swbuf_r+0x70>
 801c55c:	686c      	ldr	r4, [r5, #4]
 801c55e:	69a3      	ldr	r3, [r4, #24]
 801c560:	60a3      	str	r3, [r4, #8]
 801c562:	89a3      	ldrh	r3, [r4, #12]
 801c564:	071a      	lsls	r2, r3, #28
 801c566:	d52f      	bpl.n	801c5c8 <__swbuf_r+0x84>
 801c568:	6923      	ldr	r3, [r4, #16]
 801c56a:	b36b      	cbz	r3, 801c5c8 <__swbuf_r+0x84>
 801c56c:	6923      	ldr	r3, [r4, #16]
 801c56e:	6820      	ldr	r0, [r4, #0]
 801c570:	1ac0      	subs	r0, r0, r3
 801c572:	6963      	ldr	r3, [r4, #20]
 801c574:	b2f6      	uxtb	r6, r6
 801c576:	4283      	cmp	r3, r0
 801c578:	4637      	mov	r7, r6
 801c57a:	dc04      	bgt.n	801c586 <__swbuf_r+0x42>
 801c57c:	4621      	mov	r1, r4
 801c57e:	4628      	mov	r0, r5
 801c580:	f7ff fcec 	bl	801bf5c <_fflush_r>
 801c584:	bb30      	cbnz	r0, 801c5d4 <__swbuf_r+0x90>
 801c586:	68a3      	ldr	r3, [r4, #8]
 801c588:	3b01      	subs	r3, #1
 801c58a:	60a3      	str	r3, [r4, #8]
 801c58c:	6823      	ldr	r3, [r4, #0]
 801c58e:	1c5a      	adds	r2, r3, #1
 801c590:	6022      	str	r2, [r4, #0]
 801c592:	701e      	strb	r6, [r3, #0]
 801c594:	6963      	ldr	r3, [r4, #20]
 801c596:	3001      	adds	r0, #1
 801c598:	4283      	cmp	r3, r0
 801c59a:	d004      	beq.n	801c5a6 <__swbuf_r+0x62>
 801c59c:	89a3      	ldrh	r3, [r4, #12]
 801c59e:	07db      	lsls	r3, r3, #31
 801c5a0:	d506      	bpl.n	801c5b0 <__swbuf_r+0x6c>
 801c5a2:	2e0a      	cmp	r6, #10
 801c5a4:	d104      	bne.n	801c5b0 <__swbuf_r+0x6c>
 801c5a6:	4621      	mov	r1, r4
 801c5a8:	4628      	mov	r0, r5
 801c5aa:	f7ff fcd7 	bl	801bf5c <_fflush_r>
 801c5ae:	b988      	cbnz	r0, 801c5d4 <__swbuf_r+0x90>
 801c5b0:	4638      	mov	r0, r7
 801c5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5b4:	4b0a      	ldr	r3, [pc, #40]	; (801c5e0 <__swbuf_r+0x9c>)
 801c5b6:	429c      	cmp	r4, r3
 801c5b8:	d101      	bne.n	801c5be <__swbuf_r+0x7a>
 801c5ba:	68ac      	ldr	r4, [r5, #8]
 801c5bc:	e7cf      	b.n	801c55e <__swbuf_r+0x1a>
 801c5be:	4b09      	ldr	r3, [pc, #36]	; (801c5e4 <__swbuf_r+0xa0>)
 801c5c0:	429c      	cmp	r4, r3
 801c5c2:	bf08      	it	eq
 801c5c4:	68ec      	ldreq	r4, [r5, #12]
 801c5c6:	e7ca      	b.n	801c55e <__swbuf_r+0x1a>
 801c5c8:	4621      	mov	r1, r4
 801c5ca:	4628      	mov	r0, r5
 801c5cc:	f000 f80c 	bl	801c5e8 <__swsetup_r>
 801c5d0:	2800      	cmp	r0, #0
 801c5d2:	d0cb      	beq.n	801c56c <__swbuf_r+0x28>
 801c5d4:	f04f 37ff 	mov.w	r7, #4294967295
 801c5d8:	e7ea      	b.n	801c5b0 <__swbuf_r+0x6c>
 801c5da:	bf00      	nop
 801c5dc:	0801d28c 	.word	0x0801d28c
 801c5e0:	0801d2ac 	.word	0x0801d2ac
 801c5e4:	0801d26c 	.word	0x0801d26c

0801c5e8 <__swsetup_r>:
 801c5e8:	4b32      	ldr	r3, [pc, #200]	; (801c6b4 <__swsetup_r+0xcc>)
 801c5ea:	b570      	push	{r4, r5, r6, lr}
 801c5ec:	681d      	ldr	r5, [r3, #0]
 801c5ee:	4606      	mov	r6, r0
 801c5f0:	460c      	mov	r4, r1
 801c5f2:	b125      	cbz	r5, 801c5fe <__swsetup_r+0x16>
 801c5f4:	69ab      	ldr	r3, [r5, #24]
 801c5f6:	b913      	cbnz	r3, 801c5fe <__swsetup_r+0x16>
 801c5f8:	4628      	mov	r0, r5
 801c5fa:	f7ff fd43 	bl	801c084 <__sinit>
 801c5fe:	4b2e      	ldr	r3, [pc, #184]	; (801c6b8 <__swsetup_r+0xd0>)
 801c600:	429c      	cmp	r4, r3
 801c602:	d10f      	bne.n	801c624 <__swsetup_r+0x3c>
 801c604:	686c      	ldr	r4, [r5, #4]
 801c606:	89a3      	ldrh	r3, [r4, #12]
 801c608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c60c:	0719      	lsls	r1, r3, #28
 801c60e:	d42c      	bmi.n	801c66a <__swsetup_r+0x82>
 801c610:	06dd      	lsls	r5, r3, #27
 801c612:	d411      	bmi.n	801c638 <__swsetup_r+0x50>
 801c614:	2309      	movs	r3, #9
 801c616:	6033      	str	r3, [r6, #0]
 801c618:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c61c:	81a3      	strh	r3, [r4, #12]
 801c61e:	f04f 30ff 	mov.w	r0, #4294967295
 801c622:	e03e      	b.n	801c6a2 <__swsetup_r+0xba>
 801c624:	4b25      	ldr	r3, [pc, #148]	; (801c6bc <__swsetup_r+0xd4>)
 801c626:	429c      	cmp	r4, r3
 801c628:	d101      	bne.n	801c62e <__swsetup_r+0x46>
 801c62a:	68ac      	ldr	r4, [r5, #8]
 801c62c:	e7eb      	b.n	801c606 <__swsetup_r+0x1e>
 801c62e:	4b24      	ldr	r3, [pc, #144]	; (801c6c0 <__swsetup_r+0xd8>)
 801c630:	429c      	cmp	r4, r3
 801c632:	bf08      	it	eq
 801c634:	68ec      	ldreq	r4, [r5, #12]
 801c636:	e7e6      	b.n	801c606 <__swsetup_r+0x1e>
 801c638:	0758      	lsls	r0, r3, #29
 801c63a:	d512      	bpl.n	801c662 <__swsetup_r+0x7a>
 801c63c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c63e:	b141      	cbz	r1, 801c652 <__swsetup_r+0x6a>
 801c640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c644:	4299      	cmp	r1, r3
 801c646:	d002      	beq.n	801c64e <__swsetup_r+0x66>
 801c648:	4630      	mov	r0, r6
 801c64a:	f7ff f95b 	bl	801b904 <_free_r>
 801c64e:	2300      	movs	r3, #0
 801c650:	6363      	str	r3, [r4, #52]	; 0x34
 801c652:	89a3      	ldrh	r3, [r4, #12]
 801c654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c658:	81a3      	strh	r3, [r4, #12]
 801c65a:	2300      	movs	r3, #0
 801c65c:	6063      	str	r3, [r4, #4]
 801c65e:	6923      	ldr	r3, [r4, #16]
 801c660:	6023      	str	r3, [r4, #0]
 801c662:	89a3      	ldrh	r3, [r4, #12]
 801c664:	f043 0308 	orr.w	r3, r3, #8
 801c668:	81a3      	strh	r3, [r4, #12]
 801c66a:	6923      	ldr	r3, [r4, #16]
 801c66c:	b94b      	cbnz	r3, 801c682 <__swsetup_r+0x9a>
 801c66e:	89a3      	ldrh	r3, [r4, #12]
 801c670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c678:	d003      	beq.n	801c682 <__swsetup_r+0x9a>
 801c67a:	4621      	mov	r1, r4
 801c67c:	4630      	mov	r0, r6
 801c67e:	f000 f84d 	bl	801c71c <__smakebuf_r>
 801c682:	89a0      	ldrh	r0, [r4, #12]
 801c684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c688:	f010 0301 	ands.w	r3, r0, #1
 801c68c:	d00a      	beq.n	801c6a4 <__swsetup_r+0xbc>
 801c68e:	2300      	movs	r3, #0
 801c690:	60a3      	str	r3, [r4, #8]
 801c692:	6963      	ldr	r3, [r4, #20]
 801c694:	425b      	negs	r3, r3
 801c696:	61a3      	str	r3, [r4, #24]
 801c698:	6923      	ldr	r3, [r4, #16]
 801c69a:	b943      	cbnz	r3, 801c6ae <__swsetup_r+0xc6>
 801c69c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c6a0:	d1ba      	bne.n	801c618 <__swsetup_r+0x30>
 801c6a2:	bd70      	pop	{r4, r5, r6, pc}
 801c6a4:	0781      	lsls	r1, r0, #30
 801c6a6:	bf58      	it	pl
 801c6a8:	6963      	ldrpl	r3, [r4, #20]
 801c6aa:	60a3      	str	r3, [r4, #8]
 801c6ac:	e7f4      	b.n	801c698 <__swsetup_r+0xb0>
 801c6ae:	2000      	movs	r0, #0
 801c6b0:	e7f7      	b.n	801c6a2 <__swsetup_r+0xba>
 801c6b2:	bf00      	nop
 801c6b4:	24000100 	.word	0x24000100
 801c6b8:	0801d28c 	.word	0x0801d28c
 801c6bc:	0801d2ac 	.word	0x0801d2ac
 801c6c0:	0801d26c 	.word	0x0801d26c

0801c6c4 <abort>:
 801c6c4:	b508      	push	{r3, lr}
 801c6c6:	2006      	movs	r0, #6
 801c6c8:	f000 f898 	bl	801c7fc <raise>
 801c6cc:	2001      	movs	r0, #1
 801c6ce:	f7e6 f995 	bl	80029fc <_exit>

0801c6d2 <__swhatbuf_r>:
 801c6d2:	b570      	push	{r4, r5, r6, lr}
 801c6d4:	460e      	mov	r6, r1
 801c6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6da:	2900      	cmp	r1, #0
 801c6dc:	b096      	sub	sp, #88	; 0x58
 801c6de:	4614      	mov	r4, r2
 801c6e0:	461d      	mov	r5, r3
 801c6e2:	da08      	bge.n	801c6f6 <__swhatbuf_r+0x24>
 801c6e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c6e8:	2200      	movs	r2, #0
 801c6ea:	602a      	str	r2, [r5, #0]
 801c6ec:	061a      	lsls	r2, r3, #24
 801c6ee:	d410      	bmi.n	801c712 <__swhatbuf_r+0x40>
 801c6f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c6f4:	e00e      	b.n	801c714 <__swhatbuf_r+0x42>
 801c6f6:	466a      	mov	r2, sp
 801c6f8:	f000 f89c 	bl	801c834 <_fstat_r>
 801c6fc:	2800      	cmp	r0, #0
 801c6fe:	dbf1      	blt.n	801c6e4 <__swhatbuf_r+0x12>
 801c700:	9a01      	ldr	r2, [sp, #4]
 801c702:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c706:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c70a:	425a      	negs	r2, r3
 801c70c:	415a      	adcs	r2, r3
 801c70e:	602a      	str	r2, [r5, #0]
 801c710:	e7ee      	b.n	801c6f0 <__swhatbuf_r+0x1e>
 801c712:	2340      	movs	r3, #64	; 0x40
 801c714:	2000      	movs	r0, #0
 801c716:	6023      	str	r3, [r4, #0]
 801c718:	b016      	add	sp, #88	; 0x58
 801c71a:	bd70      	pop	{r4, r5, r6, pc}

0801c71c <__smakebuf_r>:
 801c71c:	898b      	ldrh	r3, [r1, #12]
 801c71e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c720:	079d      	lsls	r5, r3, #30
 801c722:	4606      	mov	r6, r0
 801c724:	460c      	mov	r4, r1
 801c726:	d507      	bpl.n	801c738 <__smakebuf_r+0x1c>
 801c728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c72c:	6023      	str	r3, [r4, #0]
 801c72e:	6123      	str	r3, [r4, #16]
 801c730:	2301      	movs	r3, #1
 801c732:	6163      	str	r3, [r4, #20]
 801c734:	b002      	add	sp, #8
 801c736:	bd70      	pop	{r4, r5, r6, pc}
 801c738:	ab01      	add	r3, sp, #4
 801c73a:	466a      	mov	r2, sp
 801c73c:	f7ff ffc9 	bl	801c6d2 <__swhatbuf_r>
 801c740:	9900      	ldr	r1, [sp, #0]
 801c742:	4605      	mov	r5, r0
 801c744:	4630      	mov	r0, r6
 801c746:	f7ff f949 	bl	801b9dc <_malloc_r>
 801c74a:	b948      	cbnz	r0, 801c760 <__smakebuf_r+0x44>
 801c74c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c750:	059a      	lsls	r2, r3, #22
 801c752:	d4ef      	bmi.n	801c734 <__smakebuf_r+0x18>
 801c754:	f023 0303 	bic.w	r3, r3, #3
 801c758:	f043 0302 	orr.w	r3, r3, #2
 801c75c:	81a3      	strh	r3, [r4, #12]
 801c75e:	e7e3      	b.n	801c728 <__smakebuf_r+0xc>
 801c760:	4b0d      	ldr	r3, [pc, #52]	; (801c798 <__smakebuf_r+0x7c>)
 801c762:	62b3      	str	r3, [r6, #40]	; 0x28
 801c764:	89a3      	ldrh	r3, [r4, #12]
 801c766:	6020      	str	r0, [r4, #0]
 801c768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c76c:	81a3      	strh	r3, [r4, #12]
 801c76e:	9b00      	ldr	r3, [sp, #0]
 801c770:	6163      	str	r3, [r4, #20]
 801c772:	9b01      	ldr	r3, [sp, #4]
 801c774:	6120      	str	r0, [r4, #16]
 801c776:	b15b      	cbz	r3, 801c790 <__smakebuf_r+0x74>
 801c778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c77c:	4630      	mov	r0, r6
 801c77e:	f000 f86b 	bl	801c858 <_isatty_r>
 801c782:	b128      	cbz	r0, 801c790 <__smakebuf_r+0x74>
 801c784:	89a3      	ldrh	r3, [r4, #12]
 801c786:	f023 0303 	bic.w	r3, r3, #3
 801c78a:	f043 0301 	orr.w	r3, r3, #1
 801c78e:	81a3      	strh	r3, [r4, #12]
 801c790:	89a0      	ldrh	r0, [r4, #12]
 801c792:	4305      	orrs	r5, r0
 801c794:	81a5      	strh	r5, [r4, #12]
 801c796:	e7cd      	b.n	801c734 <__smakebuf_r+0x18>
 801c798:	0801c01d 	.word	0x0801c01d

0801c79c <_malloc_usable_size_r>:
 801c79c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c7a0:	1f18      	subs	r0, r3, #4
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	bfbc      	itt	lt
 801c7a6:	580b      	ldrlt	r3, [r1, r0]
 801c7a8:	18c0      	addlt	r0, r0, r3
 801c7aa:	4770      	bx	lr

0801c7ac <_raise_r>:
 801c7ac:	291f      	cmp	r1, #31
 801c7ae:	b538      	push	{r3, r4, r5, lr}
 801c7b0:	4604      	mov	r4, r0
 801c7b2:	460d      	mov	r5, r1
 801c7b4:	d904      	bls.n	801c7c0 <_raise_r+0x14>
 801c7b6:	2316      	movs	r3, #22
 801c7b8:	6003      	str	r3, [r0, #0]
 801c7ba:	f04f 30ff 	mov.w	r0, #4294967295
 801c7be:	bd38      	pop	{r3, r4, r5, pc}
 801c7c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c7c2:	b112      	cbz	r2, 801c7ca <_raise_r+0x1e>
 801c7c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c7c8:	b94b      	cbnz	r3, 801c7de <_raise_r+0x32>
 801c7ca:	4620      	mov	r0, r4
 801c7cc:	f000 f830 	bl	801c830 <_getpid_r>
 801c7d0:	462a      	mov	r2, r5
 801c7d2:	4601      	mov	r1, r0
 801c7d4:	4620      	mov	r0, r4
 801c7d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c7da:	f000 b817 	b.w	801c80c <_kill_r>
 801c7de:	2b01      	cmp	r3, #1
 801c7e0:	d00a      	beq.n	801c7f8 <_raise_r+0x4c>
 801c7e2:	1c59      	adds	r1, r3, #1
 801c7e4:	d103      	bne.n	801c7ee <_raise_r+0x42>
 801c7e6:	2316      	movs	r3, #22
 801c7e8:	6003      	str	r3, [r0, #0]
 801c7ea:	2001      	movs	r0, #1
 801c7ec:	e7e7      	b.n	801c7be <_raise_r+0x12>
 801c7ee:	2400      	movs	r4, #0
 801c7f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c7f4:	4628      	mov	r0, r5
 801c7f6:	4798      	blx	r3
 801c7f8:	2000      	movs	r0, #0
 801c7fa:	e7e0      	b.n	801c7be <_raise_r+0x12>

0801c7fc <raise>:
 801c7fc:	4b02      	ldr	r3, [pc, #8]	; (801c808 <raise+0xc>)
 801c7fe:	4601      	mov	r1, r0
 801c800:	6818      	ldr	r0, [r3, #0]
 801c802:	f7ff bfd3 	b.w	801c7ac <_raise_r>
 801c806:	bf00      	nop
 801c808:	24000100 	.word	0x24000100

0801c80c <_kill_r>:
 801c80c:	b538      	push	{r3, r4, r5, lr}
 801c80e:	4d07      	ldr	r5, [pc, #28]	; (801c82c <_kill_r+0x20>)
 801c810:	2300      	movs	r3, #0
 801c812:	4604      	mov	r4, r0
 801c814:	4608      	mov	r0, r1
 801c816:	4611      	mov	r1, r2
 801c818:	602b      	str	r3, [r5, #0]
 801c81a:	f7e6 f8df 	bl	80029dc <_kill>
 801c81e:	1c43      	adds	r3, r0, #1
 801c820:	d102      	bne.n	801c828 <_kill_r+0x1c>
 801c822:	682b      	ldr	r3, [r5, #0]
 801c824:	b103      	cbz	r3, 801c828 <_kill_r+0x1c>
 801c826:	6023      	str	r3, [r4, #0]
 801c828:	bd38      	pop	{r3, r4, r5, pc}
 801c82a:	bf00      	nop
 801c82c:	24002b70 	.word	0x24002b70

0801c830 <_getpid_r>:
 801c830:	f7e6 b8cc 	b.w	80029cc <_getpid>

0801c834 <_fstat_r>:
 801c834:	b538      	push	{r3, r4, r5, lr}
 801c836:	4d07      	ldr	r5, [pc, #28]	; (801c854 <_fstat_r+0x20>)
 801c838:	2300      	movs	r3, #0
 801c83a:	4604      	mov	r4, r0
 801c83c:	4608      	mov	r0, r1
 801c83e:	4611      	mov	r1, r2
 801c840:	602b      	str	r3, [r5, #0]
 801c842:	f7e6 f92a 	bl	8002a9a <_fstat>
 801c846:	1c43      	adds	r3, r0, #1
 801c848:	d102      	bne.n	801c850 <_fstat_r+0x1c>
 801c84a:	682b      	ldr	r3, [r5, #0]
 801c84c:	b103      	cbz	r3, 801c850 <_fstat_r+0x1c>
 801c84e:	6023      	str	r3, [r4, #0]
 801c850:	bd38      	pop	{r3, r4, r5, pc}
 801c852:	bf00      	nop
 801c854:	24002b70 	.word	0x24002b70

0801c858 <_isatty_r>:
 801c858:	b538      	push	{r3, r4, r5, lr}
 801c85a:	4d06      	ldr	r5, [pc, #24]	; (801c874 <_isatty_r+0x1c>)
 801c85c:	2300      	movs	r3, #0
 801c85e:	4604      	mov	r4, r0
 801c860:	4608      	mov	r0, r1
 801c862:	602b      	str	r3, [r5, #0]
 801c864:	f7e6 f929 	bl	8002aba <_isatty>
 801c868:	1c43      	adds	r3, r0, #1
 801c86a:	d102      	bne.n	801c872 <_isatty_r+0x1a>
 801c86c:	682b      	ldr	r3, [r5, #0]
 801c86e:	b103      	cbz	r3, 801c872 <_isatty_r+0x1a>
 801c870:	6023      	str	r3, [r4, #0]
 801c872:	bd38      	pop	{r3, r4, r5, pc}
 801c874:	24002b70 	.word	0x24002b70

0801c878 <_init>:
 801c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c87a:	bf00      	nop
 801c87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c87e:	bc08      	pop	{r3}
 801c880:	469e      	mov	lr, r3
 801c882:	4770      	bx	lr

0801c884 <_fini>:
 801c884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c886:	bf00      	nop
 801c888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c88a:	bc08      	pop	{r3}
 801c88c:	469e      	mov	lr, r3
 801c88e:	4770      	bx	lr
