
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b9c4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  0801bc94  0801bc94  0002bc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c560  0801c560  0002c560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c568  0801c568  0002c568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c56c  0801c56c  0002c56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  0801c570  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003364  24000150  0801c6c0  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  240034b4  0801c6c0  000334b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037669  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006402  00000000  00000000  0006782a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002d08  00000000  00000000  0006dc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002303  00000000  00000000  00070938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000aac1  00000000  00000000  00072c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ea42  00000000  00000000  0007d6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017e320  00000000  00000000  000bc13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000cca0  00000000  00000000  0023a460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00247100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801bc7c 	.word	0x0801bc7c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	0801bc7c 	.word	0x0801bc7c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 80006e8:	ed97 7a00 	vldr	s14, [r7]
 80006ec:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800075c <setServo+0x80>
 80006f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006f4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000760 <setServo+0x84>
 80006f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006fc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000764 <setServo+0x88>
 8000700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000708:	ee17 3a90 	vmov	r3, s15
 800070c:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3b01      	subs	r3, #1
 8000712:	2b03      	cmp	r3, #3
 8000714:	d81a      	bhi.n	800074c <setServo+0x70>
 8000716:	a201      	add	r2, pc, #4	; (adr r2, 800071c <setServo+0x40>)
 8000718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071c:	0800072d 	.word	0x0800072d
 8000720:	08000735 	.word	0x08000735
 8000724:	0800073d 	.word	0x0800073d
 8000728:	08000745 	.word	0x08000745
	case 1:
		TIM4->CCR4 = timerVal;
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <setServo+0x8c>)
 800072e:	89fb      	ldrh	r3, [r7, #14]
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000732:	e00c      	b.n	800074e <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000734:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <setServo+0x8c>)
 8000736:	89fb      	ldrh	r3, [r7, #14]
 8000738:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800073a:	e008      	b.n	800074e <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 800073c:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <setServo+0x8c>)
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000742:	e004      	b.n	800074e <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8000744:	4a08      	ldr	r2, [pc, #32]	; (8000768 <setServo+0x8c>)
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 800074a:	e000      	b.n	800074e <setServo+0x72>

	default:
		break;
 800074c:	bf00      	nop
	}
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	42c80000 	.word	0x42c80000
 8000760:	457a0000 	.word	0x457a0000
 8000764:	453b8000 	.word	0x453b8000
 8000768:	40000800 	.word	0x40000800

0800076c <setLEDs>:

void setLEDs(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b08e      	sub	sp, #56	; 0x38
 8000770:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000772:	2300      	movs	r3, #0
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
 8000776:	e181      	b.n	8000a7c <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000778:	4aa1      	ldr	r2, [pc, #644]	; (8000a00 <setLEDs+0x294>)
 800077a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800077c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000780:	2b03      	cmp	r3, #3
 8000782:	f200 8177 	bhi.w	8000a74 <setLEDs+0x308>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <setLEDs+0x20>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	0800079d 	.word	0x0800079d
 8000790:	0800084d 	.word	0x0800084d
 8000794:	080008fd 	.word	0x080008fd
 8000798:	080009ad 	.word	0x080009ad
		case 0:
			for (int j = 0; j < 3; j++) {
 800079c:	2300      	movs	r3, #0
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
 80007a0:	e042      	b.n	8000828 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a6:	e039      	b.n	800081c <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80007a8:	4996      	ldr	r1, [pc, #600]	; (8000a04 <setLEDs+0x298>)
 80007aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007b4:	4413      	add	r3, r2
 80007b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007be:	fa41 f202 	asr.w	r2, r1, r2
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d013      	beq.n	80007f0 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80007c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ca:	00da      	lsls	r2, r3, #3
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	18d1      	adds	r1, r2, r3
 80007d0:	4a8b      	ldr	r2, [pc, #556]	; (8000a00 <setLEDs+0x294>)
 80007d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	4413      	add	r3, r2
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	4413      	add	r3, r2
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	440b      	add	r3, r1
								+ 8] = 60;
 80007e4:	3308      	adds	r3, #8
 80007e6:	4a88      	ldr	r2, [pc, #544]	; (8000a08 <setLEDs+0x29c>)
 80007e8:	213c      	movs	r1, #60	; 0x3c
 80007ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80007ee:	e012      	b.n	8000816 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80007f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007f2:	00da      	lsls	r2, r3, #3
 80007f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f6:	18d1      	adds	r1, r2, r3
 80007f8:	4a81      	ldr	r2, [pc, #516]	; (8000a00 <setLEDs+0x294>)
 80007fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	4413      	add	r3, r2
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
								+ 8] = 30;
 800080c:	3308      	adds	r3, #8
 800080e:	4a7e      	ldr	r2, [pc, #504]	; (8000a08 <setLEDs+0x29c>)
 8000810:	211e      	movs	r1, #30
 8000812:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000818:	3301      	adds	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081e:	2b07      	cmp	r3, #7
 8000820:	ddc2      	ble.n	80007a8 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000824:	3301      	adds	r3, #1
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
 8000828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082a:	2b02      	cmp	r3, #2
 800082c:	ddb9      	ble.n	80007a2 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
 8000832:	e007      	b.n	8000844 <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000834:	4a74      	ldr	r2, [pc, #464]	; (8000a08 <setLEDs+0x29c>)
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	2100      	movs	r1, #0
 800083a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 800083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000840:	3301      	adds	r3, #1
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000846:	2bb1      	cmp	r3, #177	; 0xb1
 8000848:	ddf4      	ble.n	8000834 <setLEDs+0xc8>
			}
			break;
 800084a:	e114      	b.n	8000a76 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
 8000850:	e042      	b.n	80008d8 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
 8000856:	e039      	b.n	80008cc <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000858:	496a      	ldr	r1, [pc, #424]	; (8000a04 <setLEDs+0x298>)
 800085a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000864:	4413      	add	r3, r2
 8000866:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800086a:	2180      	movs	r1, #128	; 0x80
 800086c:	6a3a      	ldr	r2, [r7, #32]
 800086e:	fa41 f202 	asr.w	r2, r1, r2
 8000872:	4013      	ands	r3, r2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d013      	beq.n	80008a0 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	00da      	lsls	r2, r3, #3
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	18d1      	adds	r1, r2, r3
 8000880:	4a5f      	ldr	r2, [pc, #380]	; (8000a00 <setLEDs+0x294>)
 8000882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	4413      	add	r3, r2
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	4613      	mov	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4413      	add	r3, r2
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	440b      	add	r3, r1
								+ 8] = 60;
 8000894:	3308      	adds	r3, #8
 8000896:	4a5d      	ldr	r2, [pc, #372]	; (8000a0c <setLEDs+0x2a0>)
 8000898:	213c      	movs	r1, #60	; 0x3c
 800089a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800089e:	e012      	b.n	80008c6 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	00da      	lsls	r2, r3, #3
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	18d1      	adds	r1, r2, r3
 80008a8:	4a55      	ldr	r2, [pc, #340]	; (8000a00 <setLEDs+0x294>)
 80008aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	4413      	add	r3, r2
 80008b0:	685a      	ldr	r2, [r3, #4]
 80008b2:	4613      	mov	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	440b      	add	r3, r1
								+ 8] = 30;
 80008bc:	3308      	adds	r3, #8
 80008be:	4a53      	ldr	r2, [pc, #332]	; (8000a0c <setLEDs+0x2a0>)
 80008c0:	211e      	movs	r1, #30
 80008c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80008c6:	6a3b      	ldr	r3, [r7, #32]
 80008c8:	3301      	adds	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
 80008cc:	6a3b      	ldr	r3, [r7, #32]
 80008ce:	2b07      	cmp	r3, #7
 80008d0:	ddc2      	ble.n	8000858 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	3301      	adds	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
 80008d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008da:	2b02      	cmp	r3, #2
 80008dc:	ddb9      	ble.n	8000852 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	61fb      	str	r3, [r7, #28]
 80008e2:	e007      	b.n	80008f4 <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 80008e4:	4a49      	ldr	r2, [pc, #292]	; (8000a0c <setLEDs+0x2a0>)
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	2100      	movs	r1, #0
 80008ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	2bb1      	cmp	r3, #177	; 0xb1
 80008f8:	ddf4      	ble.n	80008e4 <setLEDs+0x178>
			}
			break;
 80008fa:	e0bc      	b.n	8000a76 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	e042      	b.n	8000988 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	e039      	b.n	800097c <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000908:	493e      	ldr	r1, [pc, #248]	; (8000a04 <setLEDs+0x298>)
 800090a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4413      	add	r3, r2
 8000916:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	fa41 f202 	asr.w	r2, r1, r2
 8000922:	4013      	ands	r3, r2
 8000924:	2b00      	cmp	r3, #0
 8000926:	d013      	beq.n	8000950 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	00da      	lsls	r2, r3, #3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	18d1      	adds	r1, r2, r3
 8000930:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <setLEDs+0x294>)
 8000932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	4413      	add	r3, r2
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	440b      	add	r3, r1
								+ 8] = 60;
 8000944:	3308      	adds	r3, #8
 8000946:	4a32      	ldr	r2, [pc, #200]	; (8000a10 <setLEDs+0x2a4>)
 8000948:	213c      	movs	r1, #60	; 0x3c
 800094a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800094e:	e012      	b.n	8000976 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	00da      	lsls	r2, r3, #3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	18d1      	adds	r1, r2, r3
 8000958:	4a29      	ldr	r2, [pc, #164]	; (8000a00 <setLEDs+0x294>)
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	4413      	add	r3, r2
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	440b      	add	r3, r1
								+ 8] = 30;
 800096c:	3308      	adds	r3, #8
 800096e:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <setLEDs+0x2a4>)
 8000970:	211e      	movs	r1, #30
 8000972:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	2b07      	cmp	r3, #7
 8000980:	ddc2      	ble.n	8000908 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	3301      	adds	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	2b02      	cmp	r3, #2
 800098c:	ddb9      	ble.n	8000902 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 800098e:	2338      	movs	r3, #56	; 0x38
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	e007      	b.n	80009a4 <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000994:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <setLEDs+0x2a4>)
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	2100      	movs	r1, #0
 800099a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	3301      	adds	r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	2b69      	cmp	r3, #105	; 0x69
 80009a8:	ddf4      	ble.n	8000994 <setLEDs+0x228>
			}
			break;
 80009aa:	e064      	b.n	8000a76 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	e04e      	b.n	8000a50 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	e045      	b.n	8000a44 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009b8:	4912      	ldr	r1, [pc, #72]	; (8000a04 <setLEDs+0x298>)
 80009ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4413      	add	r3, r2
 80009c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	fa41 f202 	asr.w	r2, r1, r2
 80009d2:	4013      	ands	r3, r2
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01f      	beq.n	8000a18 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	00da      	lsls	r2, r3, #3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	18d1      	adds	r1, r2, r3
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <setLEDs+0x294>)
 80009e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	685a      	ldr	r2, [r3, #4]
 80009ea:	4613      	mov	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	4413      	add	r3, r2
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	440b      	add	r3, r1
								+ 8] = 60;
 80009f4:	3308      	adds	r3, #8
 80009f6:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <setLEDs+0x2a8>)
 80009f8:	213c      	movs	r1, #60	; 0x3c
 80009fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009fe:	e01e      	b.n	8000a3e <setLEDs+0x2d2>
 8000a00:	0801bf0c 	.word	0x0801bf0c
 8000a04:	24000a4c 	.word	0x24000a4c
 8000a08:	2400016c 	.word	0x2400016c
 8000a0c:	24000434 	.word	0x24000434
 8000a10:	240006fc 	.word	0x240006fc
 8000a14:	240008a4 	.word	0x240008a4
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	00da      	lsls	r2, r3, #3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	18d1      	adds	r1, r2, r3
 8000a20:	4a26      	ldr	r2, [pc, #152]	; (8000abc <setLEDs+0x350>)
 8000a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	4413      	add	r3, r2
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
								+ 8] = 30;
 8000a34:	3308      	adds	r3, #8
 8000a36:	4a22      	ldr	r2, [pc, #136]	; (8000ac0 <setLEDs+0x354>)
 8000a38:	211e      	movs	r1, #30
 8000a3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	ddb6      	ble.n	80009b8 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	ddad      	ble.n	80009b2 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000a56:	2338      	movs	r3, #56	; 0x38
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	e007      	b.n	8000a6c <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000a5c:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <setLEDs+0x354>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2100      	movs	r1, #0
 8000a62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b69      	cmp	r3, #105	; 0x69
 8000a70:	ddf4      	ble.n	8000a5c <setLEDs+0x2f0>
			}
			break;
 8000a72:	e000      	b.n	8000a76 <setLEDs+0x30a>
		default:
			break;
 8000a74:	bf00      	nop
			i++) {
 8000a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a78:	3301      	adds	r3, #1
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7e:	2b0d      	cmp	r3, #13
 8000a80:	f77f ae7a 	ble.w	8000778 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000a84:	23b2      	movs	r3, #178	; 0xb2
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <setLEDs+0x358>)
 8000a88:	210c      	movs	r1, #12
 8000a8a:	480f      	ldr	r0, [pc, #60]	; (8000ac8 <setLEDs+0x35c>)
 8000a8c:	f00f fbc6 	bl	801021c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000a90:	23b2      	movs	r3, #178	; 0xb2
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <setLEDs+0x360>)
 8000a94:	2108      	movs	r1, #8
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <setLEDs+0x364>)
 8000a98:	f00f fbc0 	bl	801021c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000a9c:	236a      	movs	r3, #106	; 0x6a
 8000a9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <setLEDs+0x368>)
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <setLEDs+0x36c>)
 8000aa4:	f00f fbba 	bl	801021c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000aa8:	236a      	movs	r3, #106	; 0x6a
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <setLEDs+0x354>)
 8000aac:	2100      	movs	r1, #0
 8000aae:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <setLEDs+0x36c>)
 8000ab0:	f00f fbb4 	bl	801021c <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000ab4:	bf00      	nop
 8000ab6:	3738      	adds	r7, #56	; 0x38
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	0801bf0c 	.word	0x0801bf0c
 8000ac0:	240008a4 	.word	0x240008a4
 8000ac4:	2400016c 	.word	0x2400016c
 8000ac8:	240010b0 	.word	0x240010b0
 8000acc:	24000434 	.word	0x24000434
 8000ad0:	24000fcc 	.word	0x24000fcc
 8000ad4:	240006fc 	.word	0x240006fc
 8000ad8:	24001018 	.word	0x24001018

08000adc <LoRA_Read_Register>:
	} else {
		return normalized - LENGTH * 2 / 3;
	}
}

uint8_t LoRA_Read_Register(uint8_t addr) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <LoRA_Read_Register+0x48>)
 8000aee:	f007 ffb9 	bl	8008a64 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000af2:	1df9      	adds	r1, r7, #7
 8000af4:	2364      	movs	r3, #100	; 0x64
 8000af6:	2201      	movs	r2, #1
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <LoRA_Read_Register+0x4c>)
 8000afa:	f00e fd4f 	bl	800f59c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000afe:	f107 010f 	add.w	r1, r7, #15
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2201      	movs	r2, #1
 8000b06:	4808      	ldr	r0, [pc, #32]	; (8000b28 <LoRA_Read_Register+0x4c>)
 8000b08:	f00e ff44 	bl	800f994 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <LoRA_Read_Register+0x48>)
 8000b14:	f007 ffa6 	bl	8008a64 <HAL_GPIO_WritePin>

	return reg_value;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	58020000 	.word	0x58020000
 8000b28:	24000f44 	.word	0x24000f44

08000b2c <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	71bb      	strb	r3, [r7, #6]
	addr |= (1 << 7);
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4c:	480c      	ldr	r0, [pc, #48]	; (8000b80 <LoRA_Write_Register+0x54>)
 8000b4e:	f007 ff89 	bl	8008a64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000b52:	1df9      	adds	r1, r7, #7
 8000b54:	2364      	movs	r3, #100	; 0x64
 8000b56:	2201      	movs	r2, #1
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <LoRA_Write_Register+0x58>)
 8000b5a:	f00e fd1f 	bl	800f59c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000b5e:	1db9      	adds	r1, r7, #6
 8000b60:	2364      	movs	r3, #100	; 0x64
 8000b62:	2201      	movs	r2, #1
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <LoRA_Write_Register+0x58>)
 8000b66:	f00e fd19 	bl	800f59c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <LoRA_Write_Register+0x54>)
 8000b72:	f007 ff77 	bl	8008a64 <HAL_GPIO_WritePin>

}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	58020000 	.word	0x58020000
 8000b84:	24000f44 	.word	0x24000f44

08000b88 <LoRA_sleep>:

void LoRA_sleep(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff ffcc 	bl	8000b2c <LoRA_Write_Register>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency) {
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	17c8      	asrs	r0, r1, #31
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	1355      	asrs	r5, r2, #13
 8000baa:	04d4      	lsls	r4, r2, #19
 8000bac:	4a18      	ldr	r2, [pc, #96]	; (8000c10 <LoRA_set_frequency+0x78>)
 8000bae:	f04f 0300 	mov.w	r3, #0
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	4629      	mov	r1, r5
 8000bb6:	f7ff fc13 	bl	80003e0 <__aeabi_uldivmod>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t) (frf >> 16));
 8000bc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bc6:	f04f 0200 	mov.w	r2, #0
 8000bca:	f04f 0300 	mov.w	r3, #0
 8000bce:	0c02      	lsrs	r2, r0, #16
 8000bd0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bd4:	0c0b      	lsrs	r3, r1, #16
 8000bd6:	b2d3      	uxtb	r3, r2
 8000bd8:	4619      	mov	r1, r3
 8000bda:	2006      	movs	r0, #6
 8000bdc:	f7ff ffa6 	bl	8000b2c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t) (frf >> 8));
 8000be0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	0a02      	lsrs	r2, r0, #8
 8000bee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000bf2:	0a0b      	lsrs	r3, r1, #8
 8000bf4:	b2d3      	uxtb	r3, r2
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	2007      	movs	r0, #7
 8000bfa:	f7ff ff97 	bl	8000b2c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t) (frf >> 0));
 8000bfe:	7a3b      	ldrb	r3, [r7, #8]
 8000c00:	4619      	mov	r1, r3
 8000c02:	2008      	movs	r0, #8
 8000c04:	f7ff ff92 	bl	8000b2c <LoRA_Write_Register>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c10:	01e84800 	.word	0x01e84800

08000c14 <LoRA_idle>:

void LoRA_idle() {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000c18:	2181      	movs	r1, #129	; 0x81
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff ff86 	bl	8000b2c <LoRA_Write_Register>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 8000c2e:	231b      	movs	r3, #27
 8000c30:	73fb      	strb	r3, [r7, #15]

	if (mA <= 120) {
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b78      	cmp	r3, #120	; 0x78
 8000c36:	d809      	bhi.n	8000c4c <LoRA_setOCP+0x28>
		ocpTrim = (mA - 45) / 5;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	3b2d      	subs	r3, #45	; 0x2d
 8000c3c:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <LoRA_setOCP+0x60>)
 8000c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c42:	1052      	asrs	r2, r2, #1
 8000c44:	17db      	asrs	r3, r3, #31
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e00b      	b.n	8000c64 <LoRA_setOCP+0x40>
	} else if (mA <= 240) {
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2bf0      	cmp	r3, #240	; 0xf0
 8000c50:	d808      	bhi.n	8000c64 <LoRA_setOCP+0x40>
		ocpTrim = (mA + 30) / 10;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	331e      	adds	r3, #30
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <LoRA_setOCP+0x60>)
 8000c58:	fb82 1203 	smull	r1, r2, r2, r3
 8000c5c:	1092      	asrs	r2, r2, #2
 8000c5e:	17db      	asrs	r3, r3, #31
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	73fb      	strb	r3, [r7, #15]
	}

	LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	f003 031f 	and.w	r3, r3, #31
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f043 0320 	orr.w	r3, r3, #32
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4619      	mov	r1, r3
 8000c74:	200b      	movs	r0, #11
 8000c76:	f7ff ff59 	bl	8000b2c <LoRA_Write_Register>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	66666667 	.word	0x66666667

08000c88 <LoRA_setTxPower>:

void LoRA_setTxPower(int level) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	// PA BOOST
	if (level > 17) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b11      	cmp	r3, #17
 8000c94:	dd0f      	ble.n	8000cb6 <LoRA_setTxPower+0x2e>
		if (level > 20) {
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b14      	cmp	r3, #20
 8000c9a:	dd01      	ble.n	8000ca0 <LoRA_setTxPower+0x18>
			level = 20;
 8000c9c:	2314      	movs	r3, #20
 8000c9e:	607b      	str	r3, [r7, #4]
		}

		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b03      	subs	r3, #3
 8000ca4:	607b      	str	r3, [r7, #4]

		// High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
		LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ca6:	2187      	movs	r1, #135	; 0x87
 8000ca8:	204d      	movs	r0, #77	; 0x4d
 8000caa:	f7ff ff3f 	bl	8000b2c <LoRA_Write_Register>
		LoRA_setOCP(140);
 8000cae:	208c      	movs	r0, #140	; 0x8c
 8000cb0:	f7ff ffb8 	bl	8000c24 <LoRA_setOCP>
 8000cb4:	e00b      	b.n	8000cce <LoRA_setTxPower+0x46>
	} else {
		if (level < 2) {
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	dc01      	bgt.n	8000cc0 <LoRA_setTxPower+0x38>
			level = 2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	607b      	str	r3, [r7, #4]
		}
		//Default value PA_HF/LF or +17dBm
		LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000cc0:	2184      	movs	r1, #132	; 0x84
 8000cc2:	204d      	movs	r0, #77	; 0x4d
 8000cc4:	f7ff ff32 	bl	8000b2c <LoRA_Write_Register>
		LoRA_setOCP(100);
 8000cc8:	2064      	movs	r0, #100	; 0x64
 8000cca:	f7ff ffab 	bl	8000c24 <LoRA_setOCP>
	}

	LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2009      	movs	r0, #9
 8000ce4:	f7ff ff22 	bl	8000b2c <LoRA_Write_Register>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode() {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
			LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000cf4:	201d      	movs	r0, #29
 8000cf6:	f7ff fef1 	bl	8000adc <LoRA_Read_Register>
 8000cfa:	4603      	mov	r3, r0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	201d      	movs	r0, #29
 8000d06:	f7ff ff11 	bl	8000b2c <LoRA_Write_Register>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <LoRA_begin>:

void LoRA_begin(long frequency) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4818      	ldr	r0, [pc, #96]	; (8000d80 <LoRA_begin+0x70>)
 8000d1e:	f007 fea1 	bl	8008a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d28:	4816      	ldr	r0, [pc, #88]	; (8000d84 <LoRA_begin+0x74>)
 8000d2a:	f007 fe9b 	bl	8008a64 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000d2e:	2042      	movs	r0, #66	; 0x42
 8000d30:	f7ff fed4 	bl	8000adc <LoRA_Read_Register>
 8000d34:	4603      	mov	r3, r0
 8000d36:	73fb      	strb	r3, [r7, #15]

	LoRA_sleep();
 8000d38:	f7ff ff26 	bl	8000b88 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000d3c:	4812      	ldr	r0, [pc, #72]	; (8000d88 <LoRA_begin+0x78>)
 8000d3e:	f7ff ff2b 	bl	8000b98 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000d42:	2100      	movs	r1, #0
 8000d44:	200f      	movs	r0, #15
 8000d46:	f7ff fef1 	bl	8000b2c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	200e      	movs	r0, #14
 8000d4e:	f7ff feed 	bl	8000b2c <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000d52:	200c      	movs	r0, #12
 8000d54:	f7ff fec2 	bl	8000adc <LoRA_Read_Register>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f043 0303 	orr.w	r3, r3, #3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	4619      	mov	r1, r3
 8000d62:	200c      	movs	r0, #12
 8000d64:	f7ff fee2 	bl	8000b2c <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000d68:	2104      	movs	r1, #4
 8000d6a:	2026      	movs	r0, #38	; 0x26
 8000d6c:	f7ff fede 	bl	8000b2c <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000d70:	2011      	movs	r0, #17
 8000d72:	f7ff ff89 	bl	8000c88 <LoRA_setTxPower>

}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58020c00 	.word	0x58020c00
 8000d84:	58020000 	.word	0x58020000
 8000d88:	33bca100 	.word	0x33bca100

08000d8c <LoRA_beginPacket>:

void LoRA_beginPacket() {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000d90:	f7ff ffae 	bl	8000cf0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000d94:	2100      	movs	r1, #0
 8000d96:	200d      	movs	r0, #13
 8000d98:	f7ff fec8 	bl	8000b2c <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2022      	movs	r0, #34	; 0x22
 8000da0:	f7ff fec4 	bl	8000b2c <LoRA_Write_Register>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <LoRA_endPacket>:

void LoRA_endPacket() {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000dae:	2183      	movs	r1, #131	; 0x83
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff febb 	bl	8000b2c <LoRA_Write_Register>

	while ((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 8000db6:	bf00      	nop
 8000db8:	2012      	movs	r0, #18
 8000dba:	f7ff fe8f 	bl	8000adc <LoRA_Read_Register>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f7      	beq.n	8000db8 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000dc8:	2108      	movs	r1, #8
 8000dca:	2012      	movs	r0, #18
 8000dcc:	f7ff feae 	bl	8000b2c <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000dd0:	2012      	movs	r0, #18
 8000dd2:	f7ff fe83 	bl	8000adc <LoRA_Read_Register>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 8000dda:	f7ff ff89 	bl	8000cf0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	2012      	movs	r0, #18
 8000de6:	f7ff fea1 	bl	8000b2c <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00f      	beq.n	8000e14 <LoRA_endPacket+0x6c>
			&& (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0320 	and.w	r3, r3, #32
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10a      	bne.n	8000e14 <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR,
 8000dfe:	2010      	movs	r0, #16
 8000e00:	f7ff fe6c 	bl	8000adc <LoRA_Read_Register>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4619      	mov	r1, r3
 8000e08:	200d      	movs	r0, #13
 8000e0a:	f7ff fe8f 	bl	8000b2c <LoRA_Write_Register>
				LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
		LoRA_idle();
 8000e0e:	f7ff ff01 	bl	8000c14 <LoRA_idle>
			!= (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 8000e12:	e00d      	b.n	8000e30 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE)
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff fe61 	bl	8000adc <LoRA_Read_Register>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b86      	cmp	r3, #134	; 0x86
 8000e1e:	d007      	beq.n	8000e30 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000e20:	2100      	movs	r1, #0
 8000e22:	200d      	movs	r0, #13
 8000e24:	f7ff fe82 	bl	8000b2c <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8000e28:	2186      	movs	r1, #134	; 0x86
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f7ff fe7e 	bl	8000b2c <LoRA_Write_Register>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <LoRA_parsePacket>:

int LoRA_parsePacket() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000e42:	2012      	movs	r0, #18
 8000e44:	f7ff fe4a 	bl	8000adc <LoRA_Read_Register>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8000e4c:	f7ff ff50 	bl	8000cf0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4619      	mov	r1, r3
 8000e56:	2012      	movs	r0, #18
 8000e58:	f7ff fe68 	bl	8000b2c <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d014      	beq.n	8000e90 <LoRA_parsePacket+0x58>
			&& (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	f003 0320 	and.w	r3, r3, #32
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10f      	bne.n	8000e90 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8000e70:	2013      	movs	r0, #19
 8000e72:	f7ff fe33 	bl	8000adc <LoRA_Read_Register>
 8000e76:	4603      	mov	r3, r0
 8000e78:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR,
 8000e7a:	2010      	movs	r0, #16
 8000e7c:	f7ff fe2e 	bl	8000adc <LoRA_Read_Register>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4619      	mov	r1, r3
 8000e84:	200d      	movs	r0, #13
 8000e86:	f7ff fe51 	bl	8000b2c <LoRA_Write_Register>
				LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
		LoRA_idle();
 8000e8a:	f7ff fec3 	bl	8000c14 <LoRA_idle>
 8000e8e:	e00d      	b.n	8000eac <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE)
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff fe23 	bl	8000adc <LoRA_Read_Register>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b86      	cmp	r3, #134	; 0x86
 8000e9a:	d007      	beq.n	8000eac <LoRA_parsePacket+0x74>
			!= (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	200d      	movs	r0, #13
 8000ea0:	f7ff fe44 	bl	8000b2c <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8000ea4:	2186      	movs	r1, #134	; 0x86
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff fe40 	bl	8000b2c <LoRA_Write_Register>
	}
	return packetLenght;
 8000eac:	687b      	ldr	r3, [r7, #4]

}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <LoRA_sendPacket>:

void LoRA_sendPacket(char *data) {
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	LoRA_beginPacket();
 8000ebe:	f7ff ff65 	bl	8000d8c <LoRA_beginPacket>
	for (int i = 0; i < strlen(data); i++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	e00a      	b.n	8000ede <LoRA_sendPacket+0x28>
		LoRA_Write_Register(REG_FIFO, data[i]);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff fe2a 	bl	8000b2c <LoRA_Write_Register>
	for (int i = 0; i < strlen(data); i++) {
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3301      	adds	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fa20 	bl	8000324 <strlen>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8ed      	bhi.n	8000ec8 <LoRA_sendPacket+0x12>
	}
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff fa19 	bl	8000324 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2022      	movs	r0, #34	; 0x22
 8000efa:	f7ff fe17 	bl	8000b2c <LoRA_Write_Register>
	LoRA_endPacket();
 8000efe:	f7ff ff53 	bl	8000da8 <LoRA_endPacket>
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <disarm>:
int mount_SD() {
	int status = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
	return status;
}

int disarm(char *state) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2102      	movs	r1, #2
 8000f18:	482d      	ldr	r0, [pc, #180]	; (8000fd0 <disarm+0xc4>)
 8000f1a:	f007 fda3 	bl	8008a64 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2102      	movs	r1, #2
 8000f22:	482c      	ldr	r0, [pc, #176]	; (8000fd4 <disarm+0xc8>)
 8000f24:	f007 fd9e 	bl	8008a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2e:	482a      	ldr	r0, [pc, #168]	; (8000fd8 <disarm+0xcc>)
 8000f30:	f007 fd98 	bl	8008a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3a:	4827      	ldr	r0, [pc, #156]	; (8000fd8 <disarm+0xcc>)
 8000f3c:	f007 fd92 	bl	8008a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f46:	4824      	ldr	r0, [pc, #144]	; (8000fd8 <disarm+0xcc>)
 8000f48:	f007 fd8c 	bl	8008a64 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2102      	movs	r1, #2
 8000f50:	4822      	ldr	r0, [pc, #136]	; (8000fdc <disarm+0xd0>)
 8000f52:	f007 fd87 	bl	8008a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5c:	4820      	ldr	r0, [pc, #128]	; (8000fe0 <disarm+0xd4>)
 8000f5e:	f007 fd81 	bl	8008a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <disarm+0xd4>)
 8000f6a:	f007 fd7b 	bl	8008a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f74:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <disarm+0xd4>)
 8000f76:	f007 fd75 	bl	8008a64 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4819      	ldr	r0, [pc, #100]	; (8000fe4 <disarm+0xd8>)
 8000f7e:	f00f f831 	bl	800ffe4 <HAL_TIM_PWM_Start>
	setServo(1, 0);
 8000f82:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8000fe8 <disarm+0xdc>
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff fba8 	bl	80006dc <setServo>

	LED_Color_Data[7][0] = 255;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <disarm+0xe0>)
 8000f8e:	22ff      	movs	r2, #255	; 0xff
 8000f90:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <disarm+0xe0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <disarm+0xe0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <disarm+0xe0>)
 8000fa0:	22ff      	movs	r2, #255	; 0xff
 8000fa2:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <disarm+0xe0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <disarm+0xe0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
	setLEDs();
 8000fb0:	f7ff fbdc 	bl	800076c <setLEDs>

	strcpy(state, "DISARMED");
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <disarm+0xe4>)
 8000fb8:	461a      	mov	r2, r3
 8000fba:	460b      	mov	r3, r1
 8000fbc:	cb03      	ldmia	r3!, {r0, r1}
 8000fbe:	6010      	str	r0, [r2, #0]
 8000fc0:	6051      	str	r1, [r2, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	7213      	strb	r3, [r2, #8]
	return 0;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	58020000 	.word	0x58020000
 8000fd4:	58020400 	.word	0x58020400
 8000fd8:	58021400 	.word	0x58021400
 8000fdc:	58021800 	.word	0x58021800
 8000fe0:	58021000 	.word	0x58021000
 8000fe4:	24001064 	.word	0x24001064
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	24000a4c 	.word	0x24000a4c
 8000ff0:	0801bc94 	.word	0x0801bc94

08000ff4 <arm>:

int arm(char *state) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2102      	movs	r1, #2
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <arm+0x50>)
 8001002:	f007 fd2f 	bl	8008a64 <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001006:	210c      	movs	r1, #12
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <arm+0x54>)
 800100a:	f00e ffeb 	bl	800ffe4 <HAL_TIM_PWM_Start>
	setServo(1, 100);
 800100e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800104c <arm+0x58>
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff fb62 	bl	80006dc <setServo>

	strcpy(state, "ARMED");
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <arm+0x5c>)
 800101c:	6810      	ldr	r0, [r2, #0]
 800101e:	6018      	str	r0, [r3, #0]
 8001020:	8892      	ldrh	r2, [r2, #4]
 8001022:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <arm+0x60>)
 8001026:	2200      	movs	r2, #0
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 255;
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <arm+0x60>)
 800102c:	22ff      	movs	r2, #255	; 0xff
 800102e:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <arm+0x60>)
 8001032:	2200      	movs	r2, #0
 8001034:	65da      	str	r2, [r3, #92]	; 0x5c
	setLEDs();
 8001036:	f7ff fb99 	bl	800076c <setLEDs>
	return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	58020000 	.word	0x58020000
 8001048:	24001064 	.word	0x24001064
 800104c:	42c80000 	.word	0x42c80000
 8001050:	0801bca0 	.word	0x0801bca0
 8001054:	24000a4c 	.word	0x24000a4c

08001058 <recv_packet>:

int recv_packet(char *LoRA_data, int max_length) {
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	int packet_length = LoRA_parsePacket();
 8001062:	f7ff fee9 	bl	8000e38 <LoRA_parsePacket>
 8001066:	60b8      	str	r0, [r7, #8]
	if (max_length - 1 < packet_length) //-1 for the null terminator
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	429a      	cmp	r2, r3
 800106e:	dc01      	bgt.n	8001074 <recv_packet+0x1c>
			{
		return 0;
 8001070:	2300      	movs	r3, #0
 8001072:	e01c      	b.n	80010ae <recv_packet+0x56>
	}
	if (packet_length) {
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d018      	beq.n	80010ac <recv_packet+0x54>
		for (int i = 0; i < packet_length; i++) {
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e00a      	b.n	8001096 <recv_packet+0x3e>
			LoRA_data[i] = LoRA_Read_Register(0x00);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	18d4      	adds	r4, r2, r3
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fd28 	bl	8000adc <LoRA_Read_Register>
 800108c:	4603      	mov	r3, r0
 800108e:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < packet_length; i++) {
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	429a      	cmp	r2, r3
 800109c:	dbf0      	blt.n	8001080 <recv_packet+0x28>
		}
		LoRA_data[packet_length] = '\0';
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
		return packet_length;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	e000      	b.n	80010ae <recv_packet+0x56>
	} else {
		return 0;
 80010ac:	2300      	movs	r3, #0
	}
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}

080010b6 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 80010b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	466b      	mov	r3, sp
 80010c2:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff f92d 	bl	8000324 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 80010d2:	8a79      	ldrh	r1, [r7, #18]
 80010d4:	460b      	mov	r3, r1
 80010d6:	3b01      	subs	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	b28b      	uxth	r3, r1
 80010dc:	2200      	movs	r2, #0
 80010de:	4698      	mov	r8, r3
 80010e0:	4691      	mov	r9, r2
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010f6:	b28b      	uxth	r3, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	461c      	mov	r4, r3
 80010fc:	4615      	mov	r5, r2
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	00eb      	lsls	r3, r5, #3
 8001108:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800110c:	00e2      	lsls	r2, r4, #3
 800110e:	460b      	mov	r3, r1
 8001110:	3307      	adds	r3, #7
 8001112:	08db      	lsrs	r3, r3, #3
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	ebad 0d03 	sub.w	sp, sp, r3
 800111a:	466b      	mov	r3, sp
 800111c:	3300      	adds	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 8001120:	f002 fd96 	bl	8003c50 <HAL_GetTick>
 8001124:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fec5 	bl	8000eb6 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 800112c:	8a7b      	ldrh	r3, [r7, #18]
 800112e:	4619      	mov	r1, r3
 8001130:	68b8      	ldr	r0, [r7, #8]
 8001132:	f7ff ff91 	bl	8001058 <recv_packet>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d009      	beq.n	8001150 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	68b8      	ldr	r0, [r7, #8]
 8001140:	f7ff f8e6 	bl	8000310 <strcmp>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d011      	beq.n	800116e <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff feb3 	bl	8000eb6 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 8001150:	f002 fd7e 	bl	8003c50 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800115e:	d9e5      	bls.n	800112c <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff fea8 	bl	8000eb6 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8001166:	f002 fd73 	bl	8003c50 <HAL_GetTick>
 800116a:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 800116c:	e7de      	b.n	800112c <reliable_send_packet+0x76>
				break;
 800116e:	bf00      	nop
 8001170:	46b5      	mov	sp, r6
		}
	}
}
 8001172:	bf00      	nop
 8001174:	371c      	adds	r7, #28
 8001176:	46bd      	mov	sp, r7
 8001178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800117c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117e:	f5ad 5d20 	sub.w	sp, sp, #10240	; 0x2800
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001186:	f002 fcdd 	bl	8003b44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800118a:	f000 fd2d 	bl	8001be8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800118e:	f000 fda3 	bl	8001cd8 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001192:	f001 fb4f 	bl	8002834 <MX_GPIO_Init>
	MX_DMA_Init();
 8001196:	f001 faed 	bl	8002774 <MX_DMA_Init>
	MX_SPI3_Init();
 800119a:	f001 f823 	bl	80021e4 <MX_SPI3_Init>
	MX_FDCAN3_Init();
 800119e:	f000 feb3 	bl	8001f08 <MX_FDCAN3_Init>
	MX_USART6_UART_Init();
 80011a2:	f001 fa9b 	bl	80026dc <MX_USART6_UART_Init>
	MX_ADC1_Init();
 80011a6:	f000 fdc9 	bl	8001d3c <MX_ADC1_Init>
	MX_TIM4_Init();
 80011aa:	f001 f92d 	bl	8002408 <MX_TIM4_Init>
	MX_ADC3_Init();
 80011ae:	f000 fe3d 	bl	8001e2c <MX_ADC3_Init>
	MX_SPI2_Init();
 80011b2:	f000 ffc1 	bl	8002138 <MX_SPI2_Init>
	MX_I2C2_Init();
 80011b6:	f000 ff0b 	bl	8001fd0 <MX_I2C2_Init>
	MX_TIM2_Init();
 80011ba:	f001 f869 	bl	8002290 <MX_TIM2_Init>
	MX_TIM5_Init();
 80011be:	f001 f99f 	bl	8002500 <MX_TIM5_Init>
	MX_TIM3_Init();
 80011c2:	f001 f8bd 	bl	8002340 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 80011c6:	f018 fedf 	bl	8019f88 <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 80011ca:	f000 ff5f 	bl	800208c <MX_SPI1_Init>
	MX_UART4_Init();
 80011ce:	f001 fa39 	bl	8002644 <MX_UART4_Init>
	MX_FATFS_Init();
 80011d2:	f013 fcf9 	bl	8014bc8 <MX_FATFS_Init>
	MX_SDMMC2_SD_Init();
 80011d6:	f000 ff3b 	bl	8002050 <MX_SDMMC2_SD_Init>
	MX_TIM13_Init();
 80011da:	f001 f9eb 	bl	80025b4 <MX_TIM13_Init>
	MX_TIM14_Init();
 80011de:	f001 fa0d 	bl	80025fc <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 80011e2:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fe90 	bl	8000f0c <disarm>

	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	FR_Status = f_mount(&FatFs, SDPath, 1);
 80011ec:	4ba7      	ldr	r3, [pc, #668]	; (800148c <main+0x310>)
 80011ee:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80011f2:	f103 0310 	add.w	r3, r3, #16
 80011f6:	443b      	add	r3, r7
 80011f8:	2201      	movs	r2, #1
 80011fa:	49a5      	ldr	r1, [pc, #660]	; (8001490 <main+0x314>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f018 f8b7 	bl	8019370 <f_mount>
 8001202:	4603      	mov	r3, r0
 8001204:	f642 0203 	movw	r2, #10243	; 0x2803
 8001208:	443a      	add	r2, r7
 800120a:	7013      	strb	r3, [r2, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800120c:	210c      	movs	r1, #12
 800120e:	48a1      	ldr	r0, [pc, #644]	; (8001494 <main+0x318>)
 8001210:	f00e fee8 	bl	800ffe4 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001214:	2201      	movs	r2, #1
 8001216:	2104      	movs	r1, #4
 8001218:	489f      	ldr	r0, [pc, #636]	; (8001498 <main+0x31c>)
 800121a:	f007 fc23 	bl	8008a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	2108      	movs	r1, #8
 8001222:	489d      	ldr	r0, [pc, #628]	; (8001498 <main+0x31c>)
 8001224:	f007 fc1e 	bl	8008a64 <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 8001228:	4b9c      	ldr	r3, [pc, #624]	; (800149c <main+0x320>)
 800122a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800122e:	f103 0310 	add.w	r3, r3, #16
 8001232:	443b      	add	r3, r7
 8001234:	2204      	movs	r2, #4
 8001236:	499a      	ldr	r1, [pc, #616]	; (80014a0 <main+0x324>)
 8001238:	4618      	mov	r0, r3
 800123a:	f018 f8df 	bl	80193fc <f_open>
 800123e:	4603      	mov	r3, r0
 8001240:	f642 0203 	movw	r2, #10243	; 0x2803
 8001244:	443a      	add	r2, r7
 8001246:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 8001248:	4b94      	ldr	r3, [pc, #592]	; (800149c <main+0x320>)
 800124a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800124e:	f103 0310 	add.w	r3, r3, #16
 8001252:	443b      	add	r3, r7
 8001254:	4618      	mov	r0, r3
 8001256:	f018 fcaf 	bl	8019bb8 <f_close>

	LoRA_begin(868000000);
 800125a:	4892      	ldr	r0, [pc, #584]	; (80014a4 <main+0x328>)
 800125c:	f7ff fd58 	bl	8000d10 <LoRA_begin>
		}
		HAL_Delay(1000);
		LoRA_sendPacket("SENDIT");
	}*/

	int connected = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	f242 72fc 	movw	r2, #10236	; 0x27fc
 8001266:	443a      	add	r2, r7
 8001268:	6013      	str	r3, [r2, #0]
	long last_packet = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8001270:	443a      	add	r2, r7
 8001272:	6013      	str	r3, [r2, #0]
	int ARMED = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	f242 72f4 	movw	r2, #10228	; 0x27f4
 800127a:	443a      	add	r2, r7
 800127c:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	//char buffered_debug_data[MAX_PACKET_LENGTH];
	char state[MAX_PACKET_LENGTH] = "DISARMED";
 800127e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001282:	f5a3 74da 	sub.w	r4, r3, #436	; 0x1b4
 8001286:	4a88      	ldr	r2, [pc, #544]	; (80014a8 <main+0x32c>)
 8001288:	4623      	mov	r3, r4
 800128a:	6810      	ldr	r0, [r2, #0]
 800128c:	6851      	ldr	r1, [r2, #4]
 800128e:	c303      	stmia	r3!, {r0, r1}
 8001290:	7a12      	ldrb	r2, [r2, #8]
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	f104 0309 	add.w	r3, r4, #9
 8001298:	22f1      	movs	r2, #241	; 0xf1
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f019 fbd5 	bl	801aa4c <memset>
	char command[MAX_PACKET_LENGTH];
	char recieved_packet[MAX_PACKET_LENGTH];
	char previous_packet[MAX_PACKET_LENGTH];
	char response_packet[MAX_PACKET_LENGTH];
	char packets_streamed[MAX_PACKET_LENGTH];
	int max_packet_count = 0;
 80012a2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80012a6:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
	int have_recieved_anything = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f642 020c 	movw	r2, #10252	; 0x280c
 80012b4:	443a      	add	r2, r7
 80012b6:	6013      	str	r3, [r2, #0]
	int packetId;
	char communication_state[MAX_PACKET_LENGTH] = "RECEIVING RELIABLE";
 80012b8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80012bc:	f5a3 66f4 	sub.w	r6, r3, #1952	; 0x7a0
 80012c0:	4b7a      	ldr	r3, [pc, #488]	; (80014ac <main+0x330>)
 80012c2:	4634      	mov	r4, r6
 80012c4:	461d      	mov	r5, r3
 80012c6:	6828      	ldr	r0, [r5, #0]
 80012c8:	6869      	ldr	r1, [r5, #4]
 80012ca:	68aa      	ldr	r2, [r5, #8]
 80012cc:	68eb      	ldr	r3, [r5, #12]
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	8a2b      	ldrh	r3, [r5, #16]
 80012d2:	7caa      	ldrb	r2, [r5, #18]
 80012d4:	8023      	strh	r3, [r4, #0]
 80012d6:	4613      	mov	r3, r2
 80012d8:	70a3      	strb	r3, [r4, #2]
 80012da:	f106 0313 	add.w	r3, r6, #19
 80012de:	22e7      	movs	r2, #231	; 0xe7
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f019 fbb2 	bl	801aa4c <memset>

	uint32_t previousTime = HAL_GetTick();
 80012e8:	f002 fcb2 	bl	8003c50 <HAL_GetTick>
 80012ec:	f642 0308 	movw	r3, #10248	; 0x2808
 80012f0:	443b      	add	r3, r7
 80012f2:	6018      	str	r0, [r3, #0]

	while (1) {


		if (strcmp(communication_state, "RECEIVING RELIABLE") == 0) {
 80012f4:	4b6e      	ldr	r3, [pc, #440]	; (80014b0 <main+0x334>)
 80012f6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80012fa:	f103 0310 	add.w	r3, r3, #16
 80012fe:	443b      	add	r3, r7
 8001300:	496a      	ldr	r1, [pc, #424]	; (80014ac <main+0x330>)
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f804 	bl	8000310 <strcmp>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 812e 	bne.w	800156c <main+0x3f0>

			sprintf(response_packet, "prev: %d, current: %d\n", previousTime, HAL_GetTick());
 8001310:	f002 fc9e 	bl	8003c50 <HAL_GetTick>
 8001314:	4603      	mov	r3, r0
 8001316:	4867      	ldr	r0, [pc, #412]	; (80014b4 <main+0x338>)
 8001318:	f642 0210 	movw	r2, #10256	; 0x2810
 800131c:	4402      	add	r2, r0
 800131e:	19d0      	adds	r0, r2, r7
 8001320:	f642 0208 	movw	r2, #10248	; 0x2808
 8001324:	443a      	add	r2, r7
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	4963      	ldr	r1, [pc, #396]	; (80014b8 <main+0x33c>)
 800132a:	f019 fb41 	bl	801a9b0 <siprintf>
			CDC_Transmit_HS(response_packet, strlen(response_packet));
 800132e:	4b61      	ldr	r3, [pc, #388]	; (80014b4 <main+0x338>)
 8001330:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001334:	f103 0310 	add.w	r3, r3, #16
 8001338:	443b      	add	r3, r7
 800133a:	4618      	mov	r0, r3
 800133c:	f7fe fff2 	bl	8000324 <strlen>
 8001340:	4602      	mov	r2, r0
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <main+0x338>)
 8001344:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001348:	f103 0310 	add.w	r3, r3, #16
 800134c:	443b      	add	r3, r7
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f018 fed9 	bl	801a108 <CDC_Transmit_HS>
			//CDC_Transmit_HS("hi4\n", strlen("hi4\n"));
			if (recv_packet(recieved_packet, MAX_PACKET_LENGTH)) {
 8001356:	4b59      	ldr	r3, [pc, #356]	; (80014bc <main+0x340>)
 8001358:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800135c:	f103 0310 	add.w	r3, r3, #16
 8001360:	443b      	add	r3, r7
 8001362:	21fa      	movs	r1, #250	; 0xfa
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fe77 	bl	8001058 <recv_packet>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80b5 	beq.w	80014dc <main+0x360>
				have_recieved_anything = 1;
 8001372:	2301      	movs	r3, #1
 8001374:	f642 020c 	movw	r2, #10252	; 0x280c
 8001378:	443a      	add	r2, r7
 800137a:	6013      	str	r3, [r2, #0]
				//CDC_Transmit_HS("hi3", strlen("hi3"));
				previousTime = HAL_GetTick();
 800137c:	f002 fc68 	bl	8003c50 <HAL_GetTick>
 8001380:	f642 0308 	movw	r3, #10248	; 0x2808
 8001384:	443b      	add	r3, r7
 8001386:	6018      	str	r0, [r3, #0]
				if (strcmp(recieved_packet, "$") == 0) {
 8001388:	4b4c      	ldr	r3, [pc, #304]	; (80014bc <main+0x340>)
 800138a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800138e:	f103 0310 	add.w	r3, r3, #16
 8001392:	443b      	add	r3, r7
 8001394:	494a      	ldr	r1, [pc, #296]	; (80014c0 <main+0x344>)
 8001396:	4618      	mov	r0, r3
 8001398:	f7fe ffba 	bl	8000310 <strcmp>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10d      	bne.n	80013be <main+0x242>
					//CDC_Transmit_HS("hi2", strlen("hi2"));
					strcpy(communication_state, "SENDING RELIABLE");
 80013a2:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <main+0x334>)
 80013a4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80013a8:	f103 0310 	add.w	r3, r3, #16
 80013ac:	443b      	add	r3, r7
 80013ae:	4a45      	ldr	r2, [pc, #276]	; (80014c4 <main+0x348>)
 80013b0:	461c      	mov	r4, r3
 80013b2:	4615      	mov	r5, r2
 80013b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	7023      	strb	r3, [r4, #0]
 80013bc:	e79a      	b.n	80012f4 <main+0x178>
				} else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1) {
 80013be:	4a42      	ldr	r2, [pc, #264]	; (80014c8 <main+0x34c>)
 80013c0:	f642 0310 	movw	r3, #10256	; 0x2810
 80013c4:	4413      	add	r3, r2
 80013c6:	19da      	adds	r2, r3, r7
 80013c8:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <main+0x340>)
 80013ca:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80013ce:	f103 0310 	add.w	r3, r3, #16
 80013d2:	443b      	add	r3, r7
 80013d4:	493d      	ldr	r1, [pc, #244]	; (80014cc <main+0x350>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f019 fb0a 	bl	801a9f0 <siscanf>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d10f      	bne.n	8001402 <main+0x286>
					strcpy(communication_state,"SENDING STREAM");
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <main+0x334>)
 80013e4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80013e8:	f103 0310 	add.w	r3, r3, #16
 80013ec:	443b      	add	r3, r7
 80013ee:	4a38      	ldr	r2, [pc, #224]	; (80014d0 <main+0x354>)
 80013f0:	461c      	mov	r4, r3
 80013f2:	4613      	mov	r3, r2
 80013f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f6:	c407      	stmia	r4!, {r0, r1, r2}
 80013f8:	8023      	strh	r3, [r4, #0]
 80013fa:	3402      	adds	r4, #2
 80013fc:	0c1b      	lsrs	r3, r3, #16
 80013fe:	7023      	strb	r3, [r4, #0]
 8001400:	e778      	b.n	80012f4 <main+0x178>
				} else if (strcmp(recieved_packet, previous_packet) == 0) {
 8001402:	4a34      	ldr	r2, [pc, #208]	; (80014d4 <main+0x358>)
 8001404:	f642 0310 	movw	r3, #10256	; 0x2810
 8001408:	4413      	add	r3, r2
 800140a:	19da      	adds	r2, r3, r7
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <main+0x340>)
 800140e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001412:	f103 0310 	add.w	r3, r3, #16
 8001416:	443b      	add	r3, r7
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe ff78 	bl	8000310 <strcmp>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d109      	bne.n	800143a <main+0x2be>
					//send acknowledge again
					LoRA_sendPacket(recieved_packet);
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <main+0x340>)
 8001428:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800142c:	f103 0310 	add.w	r3, r3, #16
 8001430:	443b      	add	r3, r7
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fd3f 	bl	8000eb6 <LoRA_sendPacket>
 8001438:	e75c      	b.n	80012f4 <main+0x178>
				} else {
					//CDC_Transmit_HS("hi1", strlen("hi1"));
					strcpy(previous_packet, recieved_packet);
 800143a:	4a20      	ldr	r2, [pc, #128]	; (80014bc <main+0x340>)
 800143c:	f642 0310 	movw	r3, #10256	; 0x2810
 8001440:	4413      	add	r3, r2
 8001442:	19da      	adds	r2, r3, r7
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <main+0x358>)
 8001446:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800144a:	f103 0310 	add.w	r3, r3, #16
 800144e:	443b      	add	r3, r7
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f019 fb2e 	bl	801aab4 <strcpy>
					LoRA_sendPacket(recieved_packet);
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <main+0x340>)
 800145a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800145e:	f103 0310 	add.w	r3, r3, #16
 8001462:	443b      	add	r3, r7
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fd26 	bl	8000eb6 <LoRA_sendPacket>
					strcpy(command, recieved_packet);
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <main+0x340>)
 800146c:	f642 0310 	movw	r3, #10256	; 0x2810
 8001470:	4413      	add	r3, r2
 8001472:	19da      	adds	r2, r3, r7
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <main+0x35c>)
 8001476:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800147a:	f103 0310 	add.w	r3, r3, #16
 800147e:	443b      	add	r3, r7
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f019 fb16 	bl	801aab4 <strcpy>
 8001488:	e734      	b.n	80012f4 <main+0x178>
 800148a:	bf00      	nop
 800148c:	ffffef78 	.word	0xffffef78
 8001490:	24001520 	.word	0x24001520
 8001494:	24001064 	.word	0x24001064
 8001498:	58021800 	.word	0x58021800
 800149c:	ffffdf48 	.word	0xffffdf48
 80014a0:	0801bca8 	.word	0x0801bca8
 80014a4:	33bca100 	.word	0x33bca100
 80014a8:	0801bc94 	.word	0x0801bc94
 80014ac:	0801bcb8 	.word	0x0801bcb8
 80014b0:	ffffd860 	.word	0xffffd860
 80014b4:	ffffda5c 	.word	0xffffda5c
 80014b8:	0801bccc 	.word	0x0801bccc
 80014bc:	ffffdc54 	.word	0xffffdc54
 80014c0:	0801bce4 	.word	0x0801bce4
 80014c4:	0801bce8 	.word	0x0801bce8
 80014c8:	ffffd95c 	.word	0xffffd95c
 80014cc:	0801bcfc 	.word	0x0801bcfc
 80014d0:	0801bd04 	.word	0x0801bd04
 80014d4:	ffffdb58 	.word	0xffffdb58
 80014d8:	ffffdd50 	.word	0xffffdd50
					//CDC_Transmit_HS(command, strlen(command));
				}
			} else if ((!have_recieved_anything && HAL_GetTick() - previousTime > 1000) ||
 80014dc:	f642 030c 	movw	r3, #10252	; 0x280c
 80014e0:	443b      	add	r3, r7
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10a      	bne.n	80014fe <main+0x382>
 80014e8:	f002 fbb2 	bl	8003c50 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f642 0308 	movw	r3, #10248	; 0x2808
 80014f2:	443b      	add	r3, r7
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fc:	d813      	bhi.n	8001526 <main+0x3aa>
 80014fe:	f642 030c 	movw	r3, #10252	; 0x280c
 8001502:	443b      	add	r3, r7
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f43f aef4 	beq.w	80012f4 <main+0x178>
					(have_recieved_anything && HAL_GetTick() - previousTime > 5000)) {
 800150c:	f002 fba0 	bl	8003c50 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	f642 0308 	movw	r3, #10248	; 0x2808
 8001516:	443b      	add	r3, r7
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001520:	4293      	cmp	r3, r2
 8001522:	f67f aee7 	bls.w	80012f4 <main+0x178>
				//CDC_Transmit_HS("hi5", strlen("hi5"));
				CDC_Transmit_HS("reset\n", strlen("reset\n"));
 8001526:	2106      	movs	r1, #6
 8001528:	48ae      	ldr	r0, [pc, #696]	; (80017e4 <main+0x668>)
 800152a:	f018 fded 	bl	801a108 <CDC_Transmit_HS>
				previousTime = HAL_GetTick();
 800152e:	f002 fb8f 	bl	8003c50 <HAL_GetTick>
 8001532:	f642 0308 	movw	r3, #10248	; 0x2808
 8001536:	443b      	add	r3, r7
 8001538:	6018      	str	r0, [r3, #0]
				//give up MASTER
				sprintf(response_packet, "$ %s", state);
 800153a:	4aab      	ldr	r2, [pc, #684]	; (80017e8 <main+0x66c>)
 800153c:	f642 0310 	movw	r3, #10256	; 0x2810
 8001540:	4413      	add	r3, r2
 8001542:	19da      	adds	r2, r3, r7
 8001544:	4ba9      	ldr	r3, [pc, #676]	; (80017ec <main+0x670>)
 8001546:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800154a:	f103 0310 	add.w	r3, r3, #16
 800154e:	443b      	add	r3, r7
 8001550:	49a7      	ldr	r1, [pc, #668]	; (80017f0 <main+0x674>)
 8001552:	4618      	mov	r0, r3
 8001554:	f019 fa2c 	bl	801a9b0 <siprintf>
				LoRA_sendPacket(response_packet);
 8001558:	4ba4      	ldr	r3, [pc, #656]	; (80017ec <main+0x670>)
 800155a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800155e:	f103 0310 	add.w	r3, r3, #16
 8001562:	443b      	add	r3, r7
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fca6 	bl	8000eb6 <LoRA_sendPacket>
 800156a:	e6c3      	b.n	80012f4 <main+0x178>
			}
		} else if (strcmp(communication_state, "RECEIVING STREAM") == 0){
 800156c:	4ba1      	ldr	r3, [pc, #644]	; (80017f4 <main+0x678>)
 800156e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001572:	f103 0310 	add.w	r3, r3, #16
 8001576:	443b      	add	r3, r7
 8001578:	499f      	ldr	r1, [pc, #636]	; (80017f8 <main+0x67c>)
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe fec8 	bl	8000310 <strcmp>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d172      	bne.n	800166c <main+0x4f0>
			if(recv_packet(recieved_packet, MAX_PACKET_LENGTH))
 8001586:	4b9d      	ldr	r3, [pc, #628]	; (80017fc <main+0x680>)
 8001588:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800158c:	f103 0310 	add.w	r3, r3, #16
 8001590:	443b      	add	r3, r7
 8001592:	21fa      	movs	r1, #250	; 0xfa
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fd5f 	bl	8001058 <recv_packet>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d03a      	beq.n	8001616 <main+0x49a>
			{
				previousTime = HAL_GetTick();
 80015a0:	f002 fb56 	bl	8003c50 <HAL_GetTick>
 80015a4:	f642 0308 	movw	r3, #10248	; 0x2808
 80015a8:	443b      	add	r3, r7
 80015aa:	6018      	str	r0, [r3, #0]
				if(sscanf(recieved_packet, "$ %s", state) == 1)
 80015ac:	4a8e      	ldr	r2, [pc, #568]	; (80017e8 <main+0x66c>)
 80015ae:	f642 0310 	movw	r3, #10256	; 0x2810
 80015b2:	4413      	add	r3, r2
 80015b4:	19da      	adds	r2, r3, r7
 80015b6:	4b91      	ldr	r3, [pc, #580]	; (80017fc <main+0x680>)
 80015b8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80015bc:	f103 0310 	add.w	r3, r3, #16
 80015c0:	443b      	add	r3, r7
 80015c2:	498b      	ldr	r1, [pc, #556]	; (80017f0 <main+0x674>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f019 fa13 	bl	801a9f0 <siscanf>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d10d      	bne.n	80015ec <main+0x470>
				{
					strcpy(communication_state,"SENDING RELIABLE");
 80015d0:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <main+0x678>)
 80015d2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80015d6:	f103 0310 	add.w	r3, r3, #16
 80015da:	443b      	add	r3, r7
 80015dc:	4a88      	ldr	r2, [pc, #544]	; (8001800 <main+0x684>)
 80015de:	461c      	mov	r4, r3
 80015e0:	4615      	mov	r5, r2
 80015e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	7023      	strb	r3, [r4, #0]
 80015ea:	e683      	b.n	80012f4 <main+0x178>
				}
				else
				{
					CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80015ec:	4b83      	ldr	r3, [pc, #524]	; (80017fc <main+0x680>)
 80015ee:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80015f2:	f103 0310 	add.w	r3, r3, #16
 80015f6:	443b      	add	r3, r7
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fe93 	bl	8000324 <strlen>
 80015fe:	4602      	mov	r2, r0
 8001600:	4b7e      	ldr	r3, [pc, #504]	; (80017fc <main+0x680>)
 8001602:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001606:	f103 0310 	add.w	r3, r3, #16
 800160a:	443b      	add	r3, r7
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f018 fd7a 	bl	801a108 <CDC_Transmit_HS>
 8001614:	e66e      	b.n	80012f4 <main+0x178>
				}
			}
			else if(HAL_GetTick()-previousTime > 1000)
 8001616:	f002 fb1b 	bl	8003c50 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	f642 0308 	movw	r3, #10248	; 0x2808
 8001620:	443b      	add	r3, r7
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800162a:	f67f ae63 	bls.w	80012f4 <main+0x178>
			{
			  previousTime = HAL_GetTick();
 800162e:	f002 fb0f 	bl	8003c50 <HAL_GetTick>
 8001632:	f642 0308 	movw	r3, #10248	; 0x2808
 8001636:	443b      	add	r3, r7
 8001638:	6018      	str	r0, [r3, #0]
			  //give up SENDING
			  sprintf(response_packet, "! %d", packets_streamed);
 800163a:	4a72      	ldr	r2, [pc, #456]	; (8001804 <main+0x688>)
 800163c:	f642 0310 	movw	r3, #10256	; 0x2810
 8001640:	4413      	add	r3, r2
 8001642:	19da      	adds	r2, r3, r7
 8001644:	4b69      	ldr	r3, [pc, #420]	; (80017ec <main+0x670>)
 8001646:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800164a:	f103 0310 	add.w	r3, r3, #16
 800164e:	443b      	add	r3, r7
 8001650:	496d      	ldr	r1, [pc, #436]	; (8001808 <main+0x68c>)
 8001652:	4618      	mov	r0, r3
 8001654:	f019 f9ac 	bl	801a9b0 <siprintf>
			  LoRA_sendPacket(response_packet);
 8001658:	4b64      	ldr	r3, [pc, #400]	; (80017ec <main+0x670>)
 800165a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800165e:	f103 0310 	add.w	r3, r3, #16
 8001662:	443b      	add	r3, r7
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc26 	bl	8000eb6 <LoRA_sendPacket>
 800166a:	e643      	b.n	80012f4 <main+0x178>
			}
		} else if(strcmp(communication_state,"SENDING STREAM") == 0) {
 800166c:	4b61      	ldr	r3, [pc, #388]	; (80017f4 <main+0x678>)
 800166e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001672:	f103 0310 	add.w	r3, r3, #16
 8001676:	443b      	add	r3, r7
 8001678:	4964      	ldr	r1, [pc, #400]	; (800180c <main+0x690>)
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fe48 	bl	8000310 <strcmp>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 80d6 	bne.w	8001834 <main+0x6b8>
			if(max_packet_count == 0)
 8001688:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800168c:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d12e      	bne.n	80016f4 <main+0x578>
			{
				strcpy(communication_state,"RECEIVING RELIABLE");
 8001696:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <main+0x678>)
 8001698:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800169c:	f103 0310 	add.w	r3, r3, #16
 80016a0:	443b      	add	r3, r7
 80016a2:	4a5b      	ldr	r2, [pc, #364]	; (8001810 <main+0x694>)
 80016a4:	461c      	mov	r4, r3
 80016a6:	4615      	mov	r5, r2
 80016a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	8022      	strh	r2, [r4, #0]
 80016b2:	3402      	adds	r4, #2
 80016b4:	0c1b      	lsrs	r3, r3, #16
 80016b6:	7023      	strb	r3, [r4, #0]
				have_recieved_anything = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f642 020c 	movw	r2, #10252	; 0x280c
 80016be:	443a      	add	r2, r7
 80016c0:	6013      	str	r3, [r2, #0]
				sprintf(response_packet, "$ %s", state);
 80016c2:	4a49      	ldr	r2, [pc, #292]	; (80017e8 <main+0x66c>)
 80016c4:	f642 0310 	movw	r3, #10256	; 0x2810
 80016c8:	4413      	add	r3, r2
 80016ca:	19da      	adds	r2, r3, r7
 80016cc:	4b47      	ldr	r3, [pc, #284]	; (80017ec <main+0x670>)
 80016ce:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016d2:	f103 0310 	add.w	r3, r3, #16
 80016d6:	443b      	add	r3, r7
 80016d8:	4945      	ldr	r1, [pc, #276]	; (80017f0 <main+0x674>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f019 f968 	bl	801a9b0 <siprintf>
				LoRA_sendPacket(response_packet);
 80016e0:	4b42      	ldr	r3, [pc, #264]	; (80017ec <main+0x670>)
 80016e2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016e6:	f103 0310 	add.w	r3, r3, #16
 80016ea:	443b      	add	r3, r7
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fbe2 	bl	8000eb6 <LoRA_sendPacket>
 80016f2:	e5ff      	b.n	80012f4 <main+0x178>
			}
			else
			{
				//send whatever
				if (strcmp(state, "ARMED") == 0) {
 80016f4:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <main+0x66c>)
 80016f6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80016fa:	f103 0310 	add.w	r3, r3, #16
 80016fe:	443b      	add	r3, r7
 8001700:	4944      	ldr	r1, [pc, #272]	; (8001814 <main+0x698>)
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fe04 	bl	8000310 <strcmp>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d15e      	bne.n	80017cc <main+0x650>
					if (strcmp(command, "FIRE") == 0) {
 800170e:	4b42      	ldr	r3, [pc, #264]	; (8001818 <main+0x69c>)
 8001710:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001714:	f103 0310 	add.w	r3, r3, #16
 8001718:	443b      	add	r3, r7
 800171a:	4940      	ldr	r1, [pc, #256]	; (800181c <main+0x6a0>)
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fdf7 	bl	8000310 <strcmp>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d151      	bne.n	80017cc <main+0x650>
						HAL_ADC_Start(&hadc1); // start the adc
 8001728:	483d      	ldr	r0, [pc, #244]	; (8001820 <main+0x6a4>)
 800172a:	f002 ffcb 	bl	80046c4 <HAL_ADC_Start>
						HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 800172e:	2164      	movs	r1, #100	; 0x64
 8001730:	483b      	ldr	r0, [pc, #236]	; (8001820 <main+0x6a4>)
 8001732:	f003 f8c5 	bl	80048c0 <HAL_ADC_PollForConversion>
						char debug_data[100];
						uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001736:	483a      	ldr	r0, [pc, #232]	; (8001820 <main+0x6a4>)
 8001738:	f003 f9b6 	bl	8004aa8 <HAL_ADC_GetValue>
 800173c:	4603      	mov	r3, r0
 800173e:	f242 72f2 	movw	r2, #10226	; 0x27f2
 8001742:	443a      	add	r2, r7
 8001744:	8013      	strh	r3, [r2, #0]
						sprintf(debug_data, "%d, %d\n", HAL_GetTick(), adc_val);
 8001746:	f002 fa83 	bl	8003c50 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	f242 73f2 	movw	r3, #10226	; 0x27f2
 8001750:	443b      	add	r3, r7
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	4833      	ldr	r0, [pc, #204]	; (8001824 <main+0x6a8>)
 8001756:	f642 0110 	movw	r1, #10256	; 0x2810
 800175a:	4401      	add	r1, r0
 800175c:	19c8      	adds	r0, r1, r7
 800175e:	4932      	ldr	r1, [pc, #200]	; (8001828 <main+0x6ac>)
 8001760:	f019 f926 	bl	801a9b0 <siprintf>
						FR_Status = f_open(&Fil, "MyTextFile.txt",
 8001764:	4b31      	ldr	r3, [pc, #196]	; (800182c <main+0x6b0>)
 8001766:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800176a:	f103 0310 	add.w	r3, r3, #16
 800176e:	443b      	add	r3, r7
 8001770:	2232      	movs	r2, #50	; 0x32
 8001772:	492f      	ldr	r1, [pc, #188]	; (8001830 <main+0x6b4>)
 8001774:	4618      	mov	r0, r3
 8001776:	f017 fe41 	bl	80193fc <f_open>
 800177a:	4603      	mov	r3, r0
 800177c:	f642 0203 	movw	r2, #10243	; 0x2803
 8001780:	443a      	add	r2, r7
 8001782:	7013      	strb	r3, [r2, #0]
								FA_OPEN_APPEND | FA_WRITE);
						f_puts(debug_data, &Fil);
 8001784:	4a29      	ldr	r2, [pc, #164]	; (800182c <main+0x6b0>)
 8001786:	f642 0310 	movw	r3, #10256	; 0x2810
 800178a:	4413      	add	r3, r2
 800178c:	19da      	adds	r2, r3, r7
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <main+0x6a8>)
 8001790:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001794:	f103 0310 	add.w	r3, r3, #16
 8001798:	443b      	add	r3, r7
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f018 faac 	bl	8019cfa <f_puts>
						f_close(&Fil);
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <main+0x6b0>)
 80017a4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017a8:	f103 0310 	add.w	r3, r3, #16
 80017ac:	443b      	add	r3, r7
 80017ae:	4618      	mov	r0, r3
 80017b0:	f018 fa02 	bl	8019bb8 <f_close>
						HAL_ADC_Stop(&hadc1); // stop adc
 80017b4:	481a      	ldr	r0, [pc, #104]	; (8001820 <main+0x6a4>)
 80017b6:	f003 f84f 	bl	8004858 <HAL_ADC_Stop>
						LoRA_sendPacket(debug_data);
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <main+0x6a8>)
 80017bc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80017c0:	f103 0310 	add.w	r3, r3, #16
 80017c4:	443b      	add	r3, r7
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fb75 	bl	8000eb6 <LoRA_sendPacket>
					}
				}
				max_packet_count--;
 80017cc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80017d0:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80017dc:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e587      	b.n	80012f4 <main+0x178>
 80017e4:	0801bd14 	.word	0x0801bd14
 80017e8:	ffffde4c 	.word	0xffffde4c
 80017ec:	ffffda5c 	.word	0xffffda5c
 80017f0:	0801bd1c 	.word	0x0801bd1c
 80017f4:	ffffd860 	.word	0xffffd860
 80017f8:	0801bd24 	.word	0x0801bd24
 80017fc:	ffffdc54 	.word	0xffffdc54
 8001800:	0801bce8 	.word	0x0801bce8
 8001804:	ffffd960 	.word	0xffffd960
 8001808:	0801bcfc 	.word	0x0801bcfc
 800180c:	0801bd04 	.word	0x0801bd04
 8001810:	0801bcb8 	.word	0x0801bcb8
 8001814:	0801bca0 	.word	0x0801bca0
 8001818:	ffffdd50 	.word	0xffffdd50
 800181c:	0801bd38 	.word	0x0801bd38
 8001820:	24000af4 	.word	0x24000af4
 8001824:	ffffd7f4 	.word	0xffffd7f4
 8001828:	0801bd40 	.word	0x0801bd40
 800182c:	ffffdf48 	.word	0xffffdf48
 8001830:	0801bca8 	.word	0x0801bca8
			}
			
		}
		else if (strcmp(communication_state, "SENDING RELIABLE") == 0) {
 8001834:	4baa      	ldr	r3, [pc, #680]	; (8001ae0 <main+0x964>)
 8001836:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800183a:	f103 0310 	add.w	r3, r3, #16
 800183e:	443b      	add	r3, r7
 8001840:	49a8      	ldr	r1, [pc, #672]	; (8001ae4 <main+0x968>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fd64 	bl	8000310 <strcmp>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	f47f ad52 	bne.w	80012f4 <main+0x178>
			if (strcmp(state, "DISARMED") == 0) {
 8001850:	4ba5      	ldr	r3, [pc, #660]	; (8001ae8 <main+0x96c>)
 8001852:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001856:	f103 0310 	add.w	r3, r3, #16
 800185a:	443b      	add	r3, r7
 800185c:	49a3      	ldr	r1, [pc, #652]	; (8001aec <main+0x970>)
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fd56 	bl	8000310 <strcmp>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 80eb 	bne.w	8001a42 <main+0x8c6>
				if (strcmp(command, "ARM") == 0) {
 800186c:	4ba0      	ldr	r3, [pc, #640]	; (8001af0 <main+0x974>)
 800186e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001872:	f103 0310 	add.w	r3, r3, #16
 8001876:	443b      	add	r3, r7
 8001878:	499e      	ldr	r1, [pc, #632]	; (8001af4 <main+0x978>)
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fd48 	bl	8000310 <strcmp>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d117      	bne.n	80018b6 <main+0x73a>
					CDC_Transmit_HS("HELLO 2", strlen("HELLO 2"));
 8001886:	2107      	movs	r1, #7
 8001888:	489b      	ldr	r0, [pc, #620]	; (8001af8 <main+0x97c>)
 800188a:	f018 fc3d 	bl	801a108 <CDC_Transmit_HS>
					if (!arm(state)) {
 800188e:	4b96      	ldr	r3, [pc, #600]	; (8001ae8 <main+0x96c>)
 8001890:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001894:	f103 0310 	add.w	r3, r3, #16
 8001898:	443b      	add	r3, r7
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fbaa 	bl	8000ff4 <arm>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <main+0x732>
						reliable_send_packet("ARM SUCCESS");
 80018a6:	4895      	ldr	r0, [pc, #596]	; (8001afc <main+0x980>)
 80018a8:	f7ff fc05 	bl	80010b6 <reliable_send_packet>
 80018ac:	e159      	b.n	8001b62 <main+0x9e6>
					} else {
						reliable_send_packet("ARM UNSUCCESSFUL");
 80018ae:	4894      	ldr	r0, [pc, #592]	; (8001b00 <main+0x984>)
 80018b0:	f7ff fc01 	bl	80010b6 <reliable_send_packet>
 80018b4:	e155      	b.n	8001b62 <main+0x9e6>
					}
				} else if (strcmp(command, "DISARM") == 0) {
 80018b6:	4b8e      	ldr	r3, [pc, #568]	; (8001af0 <main+0x974>)
 80018b8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018bc:	f103 0310 	add.w	r3, r3, #16
 80018c0:	443b      	add	r3, r7
 80018c2:	4990      	ldr	r1, [pc, #576]	; (8001b04 <main+0x988>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fd23 	bl	8000310 <strcmp>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <main+0x75c>
					reliable_send_packet("ALREADY DISARMED");
 80018d0:	488d      	ldr	r0, [pc, #564]	; (8001b08 <main+0x98c>)
 80018d2:	f7ff fbf0 	bl	80010b6 <reliable_send_packet>
 80018d6:	e144      	b.n	8001b62 <main+0x9e6>
				} else if (strcmp(command, "CONT") == 0) {
 80018d8:	4b85      	ldr	r3, [pc, #532]	; (8001af0 <main+0x974>)
 80018da:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80018de:	f103 0310 	add.w	r3, r3, #16
 80018e2:	443b      	add	r3, r7
 80018e4:	4989      	ldr	r1, [pc, #548]	; (8001b0c <main+0x990>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fd12 	bl	8000310 <strcmp>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 8137 	bne.w	8001b62 <main+0x9e6>
					uint8_t CONTS[8];
					CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 80018f4:	2104      	movs	r1, #4
 80018f6:	4886      	ldr	r0, [pc, #536]	; (8001b10 <main+0x994>)
 80018f8:	f007 f89c 	bl	8008a34 <HAL_GPIO_ReadPin>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001904:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001908:	701a      	strb	r2, [r3, #0]
					CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 800190a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800190e:	4881      	ldr	r0, [pc, #516]	; (8001b14 <main+0x998>)
 8001910:	f007 f890 	bl	8008a34 <HAL_GPIO_ReadPin>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800191c:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001920:	705a      	strb	r2, [r3, #1]
					CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001922:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001926:	487b      	ldr	r0, [pc, #492]	; (8001b14 <main+0x998>)
 8001928:	f007 f884 	bl	8008a34 <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001934:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001938:	709a      	strb	r2, [r3, #2]
					CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 800193a:	2101      	movs	r1, #1
 800193c:	4876      	ldr	r0, [pc, #472]	; (8001b18 <main+0x99c>)
 800193e:	f007 f879 	bl	8008a34 <HAL_GPIO_ReadPin>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800194a:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 800194e:	70da      	strb	r2, [r3, #3]
					CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	4872      	ldr	r0, [pc, #456]	; (8001b1c <main+0x9a0>)
 8001954:	f007 f86e 	bl	8008a34 <HAL_GPIO_ReadPin>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001960:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001964:	711a      	strb	r2, [r3, #4]
					CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8001966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196a:	486c      	ldr	r0, [pc, #432]	; (8001b1c <main+0x9a0>)
 800196c:	f007 f862 	bl	8008a34 <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001978:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 800197c:	715a      	strb	r2, [r3, #5]
					CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 800197e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001982:	4866      	ldr	r0, [pc, #408]	; (8001b1c <main+0x9a0>)
 8001984:	f007 f856 	bl	8008a34 <HAL_GPIO_ReadPin>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8001990:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 8001994:	719a      	strb	r2, [r3, #6]
					CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8001996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800199a:	4860      	ldr	r0, [pc, #384]	; (8001b1c <main+0x9a0>)
 800199c:	f007 f84a 	bl	8008a34 <HAL_GPIO_ReadPin>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80019a8:	f5a3 63f5 	sub.w	r3, r3, #1960	; 0x7a8
 80019ac:	71da      	strb	r2, [r3, #7]

					char message[100];
					for (int i = 0; i < 8; i++) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	f642 0204 	movw	r2, #10244	; 0x2804
 80019b4:	443a      	add	r2, r7
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e03c      	b.n	8001a34 <main+0x8b8>
						if (CONTS[i]) {
 80019ba:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80019be:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 80019c2:	f642 0304 	movw	r3, #10244	; 0x2804
 80019c6:	443b      	add	r3, r7
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00f      	beq.n	80019f2 <main+0x876>
							sprintf(message, "PYRO %d DOESN'T HAVE CONTINUITY",
 80019d2:	f642 0304 	movw	r3, #10244	; 0x2804
 80019d6:	443b      	add	r3, r7
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <main+0x9a4>)
 80019de:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80019e2:	f103 0310 	add.w	r3, r3, #16
 80019e6:	443b      	add	r3, r7
 80019e8:	494e      	ldr	r1, [pc, #312]	; (8001b24 <main+0x9a8>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f018 ffe0 	bl	801a9b0 <siprintf>
 80019f0:	e00e      	b.n	8001a10 <main+0x894>
									i + 1);
						} else {
							sprintf(message, "PYRO %d HAS CONTINUITY", i + 1);
 80019f2:	f642 0304 	movw	r3, #10244	; 0x2804
 80019f6:	443b      	add	r3, r7
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <main+0x9a4>)
 80019fe:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a02:	f103 0310 	add.w	r3, r3, #16
 8001a06:	443b      	add	r3, r7
 8001a08:	4947      	ldr	r1, [pc, #284]	; (8001b28 <main+0x9ac>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f018 ffd0 	bl	801a9b0 <siprintf>
						}

						reliable_send_packet(message);
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <main+0x9a4>)
 8001a12:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a16:	f103 0310 	add.w	r3, r3, #16
 8001a1a:	443b      	add	r3, r7
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fb4a 	bl	80010b6 <reliable_send_packet>
					for (int i = 0; i < 8; i++) {
 8001a22:	f642 0304 	movw	r3, #10244	; 0x2804
 8001a26:	443b      	add	r3, r7
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f642 0204 	movw	r2, #10244	; 0x2804
 8001a30:	443a      	add	r2, r7
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	f642 0304 	movw	r3, #10244	; 0x2804
 8001a38:	443b      	add	r3, r7
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b07      	cmp	r3, #7
 8001a3e:	ddbc      	ble.n	80019ba <main+0x83e>
 8001a40:	e08f      	b.n	8001b62 <main+0x9e6>
					}
				}
			} else if (strcmp(state, "ARMED") == 0) {
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <main+0x96c>)
 8001a44:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a48:	f103 0310 	add.w	r3, r3, #16
 8001a4c:	443b      	add	r3, r7
 8001a4e:	4937      	ldr	r1, [pc, #220]	; (8001b2c <main+0x9b0>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fc5d 	bl	8000310 <strcmp>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d173      	bne.n	8001b44 <main+0x9c8>
				if (strcmp(command, "DISARM") == 0) {
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <main+0x974>)
 8001a5e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a62:	f103 0310 	add.w	r3, r3, #16
 8001a66:	443b      	add	r3, r7
 8001a68:	4926      	ldr	r1, [pc, #152]	; (8001b04 <main+0x988>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fc50 	bl	8000310 <strcmp>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d113      	bne.n	8001a9e <main+0x922>
					if (!disarm(state)) {
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <main+0x96c>)
 8001a78:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a7c:	f103 0310 	add.w	r3, r3, #16
 8001a80:	443b      	add	r3, r7
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fa42 	bl	8000f0c <disarm>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d103      	bne.n	8001a96 <main+0x91a>
						reliable_send_packet("DISARM SUCCESS");
 8001a8e:	4828      	ldr	r0, [pc, #160]	; (8001b30 <main+0x9b4>)
 8001a90:	f7ff fb11 	bl	80010b6 <reliable_send_packet>
 8001a94:	e01e      	b.n	8001ad4 <main+0x958>
					} else {
						reliable_send_packet("DISARM UNSUCCESS");
 8001a96:	4827      	ldr	r0, [pc, #156]	; (8001b34 <main+0x9b8>)
 8001a98:	f7ff fb0d 	bl	80010b6 <reliable_send_packet>
 8001a9c:	e01a      	b.n	8001ad4 <main+0x958>
					}
				} else if (strcmp(command, "ARM") == 0) {
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <main+0x974>)
 8001aa0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001aa4:	f103 0310 	add.w	r3, r3, #16
 8001aa8:	443b      	add	r3, r7
 8001aaa:	4912      	ldr	r1, [pc, #72]	; (8001af4 <main+0x978>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fc2f 	bl	8000310 <strcmp>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d103      	bne.n	8001ac0 <main+0x944>
					reliable_send_packet("ALREADY ARMED");
 8001ab8:	481f      	ldr	r0, [pc, #124]	; (8001b38 <main+0x9bc>)
 8001aba:	f7ff fafc 	bl	80010b6 <reliable_send_packet>
 8001abe:	e009      	b.n	8001ad4 <main+0x958>
				} else if (strcmp(command, "FIRE") == 0) {
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <main+0x974>)
 8001ac2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ac6:	f103 0310 	add.w	r3, r3, #16
 8001aca:	443b      	add	r3, r7
 8001acc:	491b      	ldr	r1, [pc, #108]	; (8001b3c <main+0x9c0>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fc1e 	bl	8000310 <strcmp>
					//strcpy(state, "STATIC_FIRE_LOGGING");
				}
				CDC_Transmit_HS("\nIamhere\n", strlen("\nIamhere\n"));
 8001ad4:	2109      	movs	r1, #9
 8001ad6:	481a      	ldr	r0, [pc, #104]	; (8001b40 <main+0x9c4>)
 8001ad8:	f018 fb16 	bl	801a108 <CDC_Transmit_HS>
 8001adc:	e041      	b.n	8001b62 <main+0x9e6>
 8001ade:	bf00      	nop
 8001ae0:	ffffd860 	.word	0xffffd860
 8001ae4:	0801bce8 	.word	0x0801bce8
 8001ae8:	ffffde4c 	.word	0xffffde4c
 8001aec:	0801bc94 	.word	0x0801bc94
 8001af0:	ffffdd50 	.word	0xffffdd50
 8001af4:	0801bd48 	.word	0x0801bd48
 8001af8:	0801bd4c 	.word	0x0801bd4c
 8001afc:	0801bd54 	.word	0x0801bd54
 8001b00:	0801bd60 	.word	0x0801bd60
 8001b04:	0801bd74 	.word	0x0801bd74
 8001b08:	0801bd7c 	.word	0x0801bd7c
 8001b0c:	0801bd90 	.word	0x0801bd90
 8001b10:	58020400 	.word	0x58020400
 8001b14:	58021400 	.word	0x58021400
 8001b18:	58021800 	.word	0x58021800
 8001b1c:	58021000 	.word	0x58021000
 8001b20:	ffffd7f4 	.word	0xffffd7f4
 8001b24:	0801bd98 	.word	0x0801bd98
 8001b28:	0801bdb8 	.word	0x0801bdb8
 8001b2c:	0801bca0 	.word	0x0801bca0
 8001b30:	0801bdd0 	.word	0x0801bdd0
 8001b34:	0801bde0 	.word	0x0801bde0
 8001b38:	0801bdf4 	.word	0x0801bdf4
 8001b3c:	0801bd38 	.word	0x0801bd38
 8001b40:	0801be04 	.word	0x0801be04
			} else {
				LoRA_sendPacket("state wrong!");
 8001b44:	4821      	ldr	r0, [pc, #132]	; (8001bcc <main+0xa50>)
 8001b46:	f7ff f9b6 	bl	8000eb6 <LoRA_sendPacket>
				HAL_Delay(100);
 8001b4a:	2064      	movs	r0, #100	; 0x64
 8001b4c:	f002 f88c 	bl	8003c68 <HAL_Delay>
				LoRA_sendPacket(state);
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <main+0xa54>)
 8001b52:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b56:	f103 0310 	add.w	r3, r3, #16
 8001b5a:	443b      	add	r3, r7
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff f9aa 	bl	8000eb6 <LoRA_sendPacket>
			}
			//HAL_Delay(100);
			sprintf(response_packet, "$ %s", state);
 8001b62:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <main+0xa54>)
 8001b64:	f642 0310 	movw	r3, #10256	; 0x2810
 8001b68:	4413      	add	r3, r2
 8001b6a:	19da      	adds	r2, r3, r7
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <main+0xa58>)
 8001b6e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b72:	f103 0310 	add.w	r3, r3, #16
 8001b76:	443b      	add	r3, r7
 8001b78:	4917      	ldr	r1, [pc, #92]	; (8001bd8 <main+0xa5c>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f018 ff18 	bl	801a9b0 <siprintf>
			LoRA_sendPacket(response_packet);
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <main+0xa58>)
 8001b82:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001b86:	f103 0310 	add.w	r3, r3, #16
 8001b8a:	443b      	add	r3, r7
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff f992 	bl	8000eb6 <LoRA_sendPacket>
			CDC_Transmit_HS("\nIamhere2\n", strlen("\nIamhere2\n"));
 8001b92:	210a      	movs	r1, #10
 8001b94:	4811      	ldr	r0, [pc, #68]	; (8001bdc <main+0xa60>)
 8001b96:	f018 fab7 	bl	801a108 <CDC_Transmit_HS>
			strcpy(communication_state, "RECEIVING RELIABLE");
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <main+0xa64>)
 8001b9c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ba0:	f103 0310 	add.w	r3, r3, #16
 8001ba4:	443b      	add	r3, r7
 8001ba6:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <main+0xa68>)
 8001ba8:	461c      	mov	r4, r3
 8001baa:	4615      	mov	r5, r2
 8001bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb0:	682b      	ldr	r3, [r5, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	8022      	strh	r2, [r4, #0]
 8001bb6:	3402      	adds	r4, #2
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	7023      	strb	r3, [r4, #0]
			have_recieved_anything = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f642 020c 	movw	r2, #10252	; 0x280c
 8001bc2:	443a      	add	r2, r7
 8001bc4:	6013      	str	r3, [r2, #0]
		if (strcmp(communication_state, "RECEIVING RELIABLE") == 0) {
 8001bc6:	f7ff bb95 	b.w	80012f4 <main+0x178>
 8001bca:	bf00      	nop
 8001bcc:	0801be10 	.word	0x0801be10
 8001bd0:	ffffde4c 	.word	0xffffde4c
 8001bd4:	ffffda5c 	.word	0xffffda5c
 8001bd8:	0801bd1c 	.word	0x0801bd1c
 8001bdc:	0801be20 	.word	0x0801be20
 8001be0:	ffffd860 	.word	0xffffd860
 8001be4:	0801bcb8 	.word	0x0801bcb8

08001be8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b09c      	sub	sp, #112	; 0x70
 8001bec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf2:	224c      	movs	r2, #76	; 0x4c
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f018 ff28 	bl	801aa4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2220      	movs	r2, #32
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f018 ff22 	bl	801aa4c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f008 fb3f 	bl	800a28c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <SystemClock_Config+0xec>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c1a:	4a2e      	ldr	r2, [pc, #184]	; (8001cd4 <SystemClock_Config+0xec>)
 8001c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c20:	6193      	str	r3, [r2, #24]
 8001c22:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <SystemClock_Config+0xec>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001c2e:	bf00      	nop
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <SystemClock_Config+0xec>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c3c:	d1f8      	bne.n	8001c30 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8001c3e:	2322      	movs	r3, #34	; 0x22
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c42:	2301      	movs	r3, #1
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8001c46:	2340      	movs	r3, #64	; 0x40
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c52:	2300      	movs	r3, #0
 8001c54:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001c56:	2304      	movs	r3, #4
 8001c58:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8001c5a:	230c      	movs	r3, #12
 8001c5c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c62:	2303      	movs	r3, #3
 8001c64:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001c66:	2302      	movs	r3, #2
 8001c68:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f008 fb50 	bl	800a320 <HAL_RCC_OscConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <SystemClock_Config+0xa2>
		Error_Handler();
 8001c86:	f000 ff39 	bl	8002afc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c8a:	233f      	movs	r3, #63	; 0x3f
 8001c8c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c96:	2308      	movs	r3, #8
 8001c98:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c9a:	2340      	movs	r3, #64	; 0x40
 8001c9c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c9e:	2340      	movs	r3, #64	; 0x40
 8001ca0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ca8:	2340      	movs	r3, #64	; 0x40
 8001caa:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f008 ff0f 	bl	800aad4 <HAL_RCC_ClockConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0xd8>
		Error_Handler();
 8001cbc:	f000 ff1e 	bl	8002afc <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001cc0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f009 f8ba 	bl	800ae40 <HAL_RCC_MCOConfig>
}
 8001ccc:	bf00      	nop
 8001cce:	3770      	adds	r7, #112	; 0x70
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	58024800 	.word	0x58024800

08001cd8 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b0ae      	sub	sp, #184	; 0xb8
 8001cdc:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001cde:	463b      	mov	r3, r7
 8001ce0:	22b8      	movs	r2, #184	; 0xb8
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f018 feb1 	bl	801aa4c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 8001cea:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001cfa:	230c      	movs	r3, #12
 8001cfc:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001d22:	463b      	mov	r3, r7
 8001d24:	4618      	mov	r0, r3
 8001d26:	f009 facb 	bl	800b2c0 <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <PeriphCommonClock_Config+0x5c>
		Error_Handler();
 8001d30:	f000 fee4 	bl	8002afc <Error_Handler>
	}
}
 8001d34:	bf00      	nop
 8001d36:	37b8      	adds	r7, #184	; 0xb8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2224      	movs	r2, #36	; 0x24
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f018 fe79 	bl	801aa4c <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001d5a:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001d5c:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <MX_ADC1_Init+0xe8>)
 8001d5e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001d60:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001d62:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001d66:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001d76:	2204      	movs	r2, #4
 8001d78:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001dba:	4819      	ldr	r0, [pc, #100]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001dbc:	f002 fa7a 	bl	80042b4 <HAL_ADC_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_ADC1_Init+0x8e>
		Error_Handler();
 8001dc6:	f000 fe99 	bl	8002afc <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4812      	ldr	r0, [pc, #72]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001dd6:	f003 fe5b 	bl	8005a90 <HAL_ADCEx_MultiModeConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_ADC1_Init+0xa8>
		Error_Handler();
 8001de0:	f000 fe8c 	bl	8002afc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <MX_ADC1_Init+0xec>)
 8001de6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001de8:	2306      	movs	r3, #6
 8001dea:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001dec:	2303      	movs	r3, #3
 8001dee:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001df0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001df4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001df6:	2304      	movs	r3, #4
 8001df8:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001e04:	463b      	mov	r3, r7
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_ADC1_Init+0xe4>)
 8001e0a:	f002 fe5b 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0xdc>
		Error_Handler();
 8001e14:	f000 fe72 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3730      	adds	r7, #48	; 0x30
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	24000af4 	.word	0x24000af4
 8001e24:	40022000 	.word	0x40022000
 8001e28:	3ac04000 	.word	0x3ac04000

08001e2c <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	2224      	movs	r2, #36	; 0x24
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f018 fe07 	bl	801aa4c <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e40:	4a2f      	ldr	r2, [pc, #188]	; (8001f00 <MX_ADC3_Init+0xd4>)
 8001e42:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001e44:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e46:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001e4a:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e4e:	2208      	movs	r2, #8
 8001e50:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e58:	4b28      	ldr	r3, [pc, #160]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e5e:	4b27      	ldr	r3, [pc, #156]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e60:	2204      	movs	r2, #4
 8001e62:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8001e6a:	4b24      	ldr	r3, [pc, #144]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8001e70:	4b22      	ldr	r3, [pc, #136]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e76:	4b21      	ldr	r3, [pc, #132]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = ENABLE;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001eb2:	4812      	ldr	r0, [pc, #72]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001eb4:	f002 f9fe 	bl	80042b4 <HAL_ADC_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_ADC3_Init+0x96>
		Error_Handler();
 8001ebe:	f000 fe1d 	bl	8002afc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <MX_ADC3_Init+0xd8>)
 8001ec4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ece:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001ed2:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_ADC3_Init+0xd0>)
 8001ee6:	f002 fded 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_ADC3_Init+0xc8>
		Error_Handler();
 8001ef0:	f000 fe04 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	24000b64 	.word	0x24000b64
 8001f00:	58026000 	.word	0x58026000
 8001f04:	04300002 	.word	0x04300002

08001f08 <MX_FDCAN3_Init>:
/**
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN3_Init 0 */

	/* USER CODE BEGIN FDCAN3_Init 1 */

	/* USER CODE END FDCAN3_Init 1 */
	hfdcan3.Instance = FDCAN3;
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f0e:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <MX_FDCAN3_Init+0xc4>)
 8001f10:	601a      	str	r2, [r3, #0]
	hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f12:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
	hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
	hfdcan3.Init.AutoRetransmission = DISABLE;
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	741a      	strb	r2, [r3, #16]
	hfdcan3.Init.TransmitPause = DISABLE;
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	745a      	strb	r2, [r3, #17]
	hfdcan3.Init.ProtocolException = DISABLE;
 8001f2a:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	749a      	strb	r2, [r3, #18]
	hfdcan3.Init.NominalPrescaler = 16;
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f32:	2210      	movs	r2, #16
 8001f34:	615a      	str	r2, [r3, #20]
	hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	619a      	str	r2, [r3, #24]
	hfdcan3.Init.NominalTimeSeg1 = 2;
 8001f3c:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f3e:	2202      	movs	r2, #2
 8001f40:	61da      	str	r2, [r3, #28]
	hfdcan3.Init.NominalTimeSeg2 = 2;
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f44:	2202      	movs	r2, #2
 8001f46:	621a      	str	r2, [r3, #32]
	hfdcan3.Init.DataPrescaler = 1;
 8001f48:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan3.Init.DataSyncJumpWidth = 1;
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan3.Init.DataTimeSeg1 = 1;
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan3.Init.DataTimeSeg2 = 1;
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan3.Init.MessageRAMOffset = 0;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan3.Init.StdFiltersNbr = 0;
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan3.Init.ExtFiltersNbr = 0;
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f86:	2204      	movs	r2, #4
 8001f88:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan3.Init.RxBuffersNbr = 0;
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f92:	2204      	movs	r2, #4
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan3.Init.TxEventsNbr = 0;
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan3.Init.TxBuffersNbr = 0;
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK) {
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <MX_FDCAN3_Init+0xc0>)
 8001fb6:	f006 f831 	bl	800801c <HAL_FDCAN_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_FDCAN3_Init+0xbc>
		Error_Handler();
 8001fc0:	f000 fd9c 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN3_Init 2 */

	/* USER CODE END FDCAN3_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	24000cc4 	.word	0x24000cc4
 8001fcc:	4000d400 	.word	0x4000d400

08001fd0 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <MX_I2C2_Init+0x74>)
 8001fd6:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <MX_I2C2_Init+0x78>)
 8001fd8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_I2C2_Init+0x74>)
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	; (800204c <MX_I2C2_Init+0x7c>)
 8001fde:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <MX_I2C2_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <MX_I2C2_Init+0x74>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <MX_I2C2_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <MX_I2C2_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <MX_I2C2_Init+0x74>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_I2C2_Init+0x74>)
 8002000:	2200      	movs	r2, #0
 8002002:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_I2C2_Init+0x74>)
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800200a:	480e      	ldr	r0, [pc, #56]	; (8002044 <MX_I2C2_Init+0x74>)
 800200c:	f006 fd44 	bl	8008a98 <HAL_I2C_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_I2C2_Init+0x4a>
		Error_Handler();
 8002016:	f000 fd71 	bl	8002afc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 800201a:	2100      	movs	r1, #0
 800201c:	4809      	ldr	r0, [pc, #36]	; (8002044 <MX_I2C2_Init+0x74>)
 800201e:	f006 fde5 	bl	8008bec <HAL_I2CEx_ConfigAnalogFilter>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002028:	f000 fd68 	bl	8002afc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 800202c:	2100      	movs	r1, #0
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_I2C2_Init+0x74>)
 8002030:	f006 fe27 	bl	8008c82 <HAL_I2CEx_ConfigDigitalFilter>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_I2C2_Init+0x6e>
		Error_Handler();
 800203a:	f000 fd5f 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	24000d64 	.word	0x24000d64
 8002048:	40005800 	.word	0x40005800
 800204c:	20303e5d 	.word	0x20303e5d

08002050 <MX_SDMMC2_SD_Init>:
/**
 * @brief SDMMC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC2_SD_Init(void) {
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC2_Init 0 */

	/* USER CODE BEGIN SDMMC2_Init 1 */

	/* USER CODE END SDMMC2_Init 1 */
	hsd2.Instance = SDMMC2;
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <MX_SDMMC2_SD_Init+0x34>)
 8002056:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <MX_SDMMC2_SD_Init+0x38>)
 8002058:	601a      	str	r2, [r3, #0]
	hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <MX_SDMMC2_SD_Init+0x34>)
 800205c:	2200      	movs	r2, #0
 800205e:	605a      	str	r2, [r3, #4]
	hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <MX_SDMMC2_SD_Init+0x34>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
	hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <MX_SDMMC2_SD_Init+0x34>)
 8002068:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800206c:	60da      	str	r2, [r3, #12]
	hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <MX_SDMMC2_SD_Init+0x34>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
	hsd2.Init.ClockDiv = 8;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <MX_SDMMC2_SD_Init+0x34>)
 8002076:	2208      	movs	r2, #8
 8002078:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC2_Init 2 */

	/* USER CODE END SDMMC2_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	24000db8 	.word	0x24000db8
 8002088:	48022400 	.word	0x48022400

0800208c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <MX_SPI1_Init+0xa4>)
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <MX_SPI1_Init+0xa8>)
 8002094:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002096:	4b26      	ldr	r3, [pc, #152]	; (8002130 <MX_SPI1_Init+0xa4>)
 8002098:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800209c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020a6:	2207      	movs	r2, #7
 80020a8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80020b6:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020bc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020c0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80020c4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d2:	4b17      	ldr	r3, [pc, #92]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80020d8:	4b15      	ldr	r3, [pc, #84]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <MX_SPI1_Init+0xa4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <MX_SPI1_Init+0xa4>)
 8002100:	2200      	movs	r2, #0
 8002102:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <MX_SPI1_Init+0xa4>)
 8002106:	2200      	movs	r2, #0
 8002108:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <MX_SPI1_Init+0xa4>)
 800210c:	2200      	movs	r2, #0
 800210e:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <MX_SPI1_Init+0xa4>)
 8002112:	2200      	movs	r2, #0
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_SPI1_Init+0xa4>)
 8002118:	2200      	movs	r2, #0
 800211a:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <MX_SPI1_Init+0xa4>)
 800211e:	f00d f919 	bl	800f354 <HAL_SPI_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_SPI1_Init+0xa0>
		Error_Handler();
 8002128:	f000 fce8 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	24000e34 	.word	0x24000e34
 8002134:	40013000 	.word	0x40013000

08002138 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <MX_SPI2_Init+0xa4>)
 800213e:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <MX_SPI2_Init+0xa8>)
 8002140:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <MX_SPI2_Init+0xa4>)
 8002144:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002148:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800214a:	4b24      	ldr	r3, [pc, #144]	; (80021dc <MX_SPI2_Init+0xa4>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002150:	4b22      	ldr	r3, [pc, #136]	; (80021dc <MX_SPI2_Init+0xa4>)
 8002152:	2207      	movs	r2, #7
 8002154:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <MX_SPI2_Init+0xa4>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <MX_SPI2_Init+0xa4>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <MX_SPI2_Init+0xa4>)
 8002164:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002168:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <MX_SPI2_Init+0xa4>)
 800216c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002170:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <MX_SPI2_Init+0xa4>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <MX_SPI2_Init+0xa4>)
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <MX_SPI2_Init+0xa4>)
 8002180:	2200      	movs	r2, #0
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <MX_SPI2_Init+0xa4>)
 8002186:	2200      	movs	r2, #0
 8002188:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <MX_SPI2_Init+0xa4>)
 800218c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002190:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <MX_SPI2_Init+0xa4>)
 8002194:	2200      	movs	r2, #0
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <MX_SPI2_Init+0xa4>)
 800219a:	2200      	movs	r2, #0
 800219c:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_SPI2_Init+0xa4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <MX_SPI2_Init+0xa4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <MX_SPI2_Init+0xa4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <MX_SPI2_Init+0xa4>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <MX_SPI2_Init+0xa4>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <MX_SPI2_Init+0xa4>)
 80021be:	2200      	movs	r2, #0
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_SPI2_Init+0xa4>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80021c8:	4804      	ldr	r0, [pc, #16]	; (80021dc <MX_SPI2_Init+0xa4>)
 80021ca:	f00d f8c3 	bl	800f354 <HAL_SPI_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_SPI2_Init+0xa0>
		Error_Handler();
 80021d4:	f000 fc92 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	24000ebc 	.word	0x24000ebc
 80021e0:	40003800 	.word	0x40003800

080021e4 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80021e8:	4b27      	ldr	r3, [pc, #156]	; (8002288 <MX_SPI3_Init+0xa4>)
 80021ea:	4a28      	ldr	r2, [pc, #160]	; (800228c <MX_SPI3_Init+0xa8>)
 80021ec:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80021ee:	4b26      	ldr	r3, [pc, #152]	; (8002288 <MX_SPI3_Init+0xa4>)
 80021f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80021f4:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021f6:	4b24      	ldr	r3, [pc, #144]	; (8002288 <MX_SPI3_Init+0xa4>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80021fc:	4b22      	ldr	r3, [pc, #136]	; (8002288 <MX_SPI3_Init+0xa4>)
 80021fe:	2207      	movs	r2, #7
 8002200:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <MX_SPI3_Init+0xa4>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002210:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002214:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002216:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002218:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800221c:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_SPI3_Init+0xa4>)
 800222c:	2200      	movs	r2, #0
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002232:	2200      	movs	r2, #0
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002238:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800223c:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002240:	2200      	movs	r2, #0
 8002242:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002246:	2200      	movs	r2, #0
 8002248:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern =
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_SPI3_Init+0xa4>)
 800224c:	2200      	movs	r2, #0
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.RxCRCInitializationPattern =
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002258:	2200      	movs	r2, #0
 800225a:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <MX_SPI3_Init+0xa4>)
 800225e:	2200      	movs	r2, #0
 8002260:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002264:	2200      	movs	r2, #0
 8002266:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <MX_SPI3_Init+0xa4>)
 800226a:	2200      	movs	r2, #0
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002270:	2200      	movs	r2, #0
 8002272:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002274:	4804      	ldr	r0, [pc, #16]	; (8002288 <MX_SPI3_Init+0xa4>)
 8002276:	f00d f86d 	bl	800f354 <HAL_SPI_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_SPI3_Init+0xa0>
		Error_Handler();
 8002280:	f000 fc3c 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	24000f44 	.word	0x24000f44
 800228c:	40003c00 	.word	0x40003c00

08002290 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80022a2:	463b      	mov	r3, r7
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
 80022b0:	615a      	str	r2, [r3, #20]
 80022b2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <MX_TIM2_Init+0xac>)
 80022b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ba:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <MX_TIM2_Init+0xac>)
 80022be:	2200      	movs	r2, #0
 80022c0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <MX_TIM2_Init+0xac>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 90;
 80022c8:	4b1c      	ldr	r3, [pc, #112]	; (800233c <MX_TIM2_Init+0xac>)
 80022ca:	225a      	movs	r2, #90	; 0x5a
 80022cc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <MX_TIM2_Init+0xac>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <MX_TIM2_Init+0xac>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80022da:	4818      	ldr	r0, [pc, #96]	; (800233c <MX_TIM2_Init+0xac>)
 80022dc:	f00d fe2a 	bl	800ff34 <HAL_TIM_PWM_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM2_Init+0x5a>
		Error_Handler();
 80022e6:	f000 fc09 	bl	8002afc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	4619      	mov	r1, r3
 80022f8:	4810      	ldr	r0, [pc, #64]	; (800233c <MX_TIM2_Init+0xac>)
 80022fa:	f00f f8b1 	bl	8011460 <HAL_TIMEx_MasterConfigSynchronization>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8002304:	f000 fbfa 	bl	8002afc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002308:	2360      	movs	r3, #96	; 0x60
 800230a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8002318:	463b      	mov	r3, r7
 800231a:	2208      	movs	r2, #8
 800231c:	4619      	mov	r1, r3
 800231e:	4807      	ldr	r0, [pc, #28]	; (800233c <MX_TIM2_Init+0xac>)
 8002320:	f00e fad0 	bl	80108c4 <HAL_TIM_PWM_ConfigChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800232a:	f000 fbe7 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800232e:	4803      	ldr	r0, [pc, #12]	; (800233c <MX_TIM2_Init+0xac>)
 8002330:	f001 f91a 	bl	8003568 <HAL_TIM_MspPostInit>

}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	24000fcc 	.word	0x24000fcc

08002340 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002352:	463b      	mov	r3, r7
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
 8002360:	615a      	str	r2, [r3, #20]
 8002362:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002364:	4b26      	ldr	r3, [pc, #152]	; (8002400 <MX_TIM3_Init+0xc0>)
 8002366:	4a27      	ldr	r2, [pc, #156]	; (8002404 <MX_TIM3_Init+0xc4>)
 8002368:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800236a:	4b25      	ldr	r3, [pc, #148]	; (8002400 <MX_TIM3_Init+0xc0>)
 800236c:	2200      	movs	r2, #0
 800236e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <MX_TIM3_Init+0xc0>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 90;
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <MX_TIM3_Init+0xc0>)
 8002378:	225a      	movs	r2, #90	; 0x5a
 800237a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237c:	4b20      	ldr	r3, [pc, #128]	; (8002400 <MX_TIM3_Init+0xc0>)
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002382:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <MX_TIM3_Init+0xc0>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002388:	481d      	ldr	r0, [pc, #116]	; (8002400 <MX_TIM3_Init+0xc0>)
 800238a:	f00d fdd3 	bl	800ff34 <HAL_TIM_PWM_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM3_Init+0x58>
		Error_Handler();
 8002394:	f000 fbb2 	bl	8002afc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	4619      	mov	r1, r3
 80023a6:	4816      	ldr	r0, [pc, #88]	; (8002400 <MX_TIM3_Init+0xc0>)
 80023a8:	f00f f85a 	bl	8011460 <HAL_TIMEx_MasterConfigSynchronization>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80023b2:	f000 fba3 	bl	8002afc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023b6:	2360      	movs	r3, #96	; 0x60
 80023b8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80023c6:	463b      	mov	r3, r7
 80023c8:	2200      	movs	r2, #0
 80023ca:	4619      	mov	r1, r3
 80023cc:	480c      	ldr	r0, [pc, #48]	; (8002400 <MX_TIM3_Init+0xc0>)
 80023ce:	f00e fa79 	bl	80108c4 <HAL_TIM_PWM_ConfigChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80023d8:	f000 fb90 	bl	8002afc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80023dc:	463b      	mov	r3, r7
 80023de:	2204      	movs	r2, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4807      	ldr	r0, [pc, #28]	; (8002400 <MX_TIM3_Init+0xc0>)
 80023e4:	f00e fa6e 	bl	80108c4 <HAL_TIM_PWM_ConfigChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80023ee:	f000 fb85 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80023f2:	4803      	ldr	r0, [pc, #12]	; (8002400 <MX_TIM3_Init+0xc0>)
 80023f4:	f001 f8b8 	bl	8003568 <HAL_TIM_MspPostInit>

}
 80023f8:	bf00      	nop
 80023fa:	3728      	adds	r7, #40	; 0x28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	24001018 	.word	0x24001018
 8002404:	40000400 	.word	0x40000400

08002408 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800240e:	f107 031c 	add.w	r3, r7, #28
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800241a:	463b      	mov	r3, r7
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
 8002428:	615a      	str	r2, [r3, #20]
 800242a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800242c:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <MX_TIM4_Init+0xf0>)
 800242e:	4a33      	ldr	r2, [pc, #204]	; (80024fc <MX_TIM4_Init+0xf4>)
 8002430:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 29;
 8002432:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <MX_TIM4_Init+0xf0>)
 8002434:	221d      	movs	r2, #29
 8002436:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002438:	4b2f      	ldr	r3, [pc, #188]	; (80024f8 <MX_TIM4_Init+0xf0>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 800243e:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <MX_TIM4_Init+0xf0>)
 8002440:	f242 720f 	movw	r2, #9999	; 0x270f
 8002444:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <MX_TIM4_Init+0xf0>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244c:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <MX_TIM4_Init+0xf0>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8002452:	4829      	ldr	r0, [pc, #164]	; (80024f8 <MX_TIM4_Init+0xf0>)
 8002454:	f00d fd6e 	bl	800ff34 <HAL_TIM_PWM_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM4_Init+0x5a>
		Error_Handler();
 800245e:	f000 fb4d 	bl	8002afc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800246a:	f107 031c 	add.w	r3, r7, #28
 800246e:	4619      	mov	r1, r3
 8002470:	4821      	ldr	r0, [pc, #132]	; (80024f8 <MX_TIM4_Init+0xf0>)
 8002472:	f00e fff5 	bl	8011460 <HAL_TIMEx_MasterConfigSynchronization>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 800247c:	f000 fb3e 	bl	8002afc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002480:	2360      	movs	r3, #96	; 0x60
 8002482:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8002490:	463b      	mov	r3, r7
 8002492:	2200      	movs	r2, #0
 8002494:	4619      	mov	r1, r3
 8002496:	4818      	ldr	r0, [pc, #96]	; (80024f8 <MX_TIM4_Init+0xf0>)
 8002498:	f00e fa14 	bl	80108c4 <HAL_TIM_PWM_ConfigChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80024a2:	f000 fb2b 	bl	8002afc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80024a6:	463b      	mov	r3, r7
 80024a8:	2204      	movs	r2, #4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4812      	ldr	r0, [pc, #72]	; (80024f8 <MX_TIM4_Init+0xf0>)
 80024ae:	f00e fa09 	bl	80108c4 <HAL_TIM_PWM_ConfigChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80024b8:	f000 fb20 	bl	8002afc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 80024bc:	463b      	mov	r3, r7
 80024be:	2208      	movs	r2, #8
 80024c0:	4619      	mov	r1, r3
 80024c2:	480d      	ldr	r0, [pc, #52]	; (80024f8 <MX_TIM4_Init+0xf0>)
 80024c4:	f00e f9fe 	bl	80108c4 <HAL_TIM_PWM_ConfigChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM4_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80024ce:	f000 fb15 	bl	8002afc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 80024d2:	463b      	mov	r3, r7
 80024d4:	220c      	movs	r2, #12
 80024d6:	4619      	mov	r1, r3
 80024d8:	4807      	ldr	r0, [pc, #28]	; (80024f8 <MX_TIM4_Init+0xf0>)
 80024da:	f00e f9f3 	bl	80108c4 <HAL_TIM_PWM_ConfigChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 80024e4:	f000 fb0a 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80024e8:	4803      	ldr	r0, [pc, #12]	; (80024f8 <MX_TIM4_Init+0xf0>)
 80024ea:	f001 f83d 	bl	8003568 <HAL_TIM_MspPostInit>

}
 80024ee:	bf00      	nop
 80024f0:	3728      	adds	r7, #40	; 0x28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	24001064 	.word	0x24001064
 80024fc:	40000800 	.word	0x40000800

08002500 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002512:	463b      	mov	r3, r7
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
 8002520:	615a      	str	r2, [r3, #20]
 8002522:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002524:	4b21      	ldr	r3, [pc, #132]	; (80025ac <MX_TIM5_Init+0xac>)
 8002526:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <MX_TIM5_Init+0xb0>)
 8002528:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800252a:	4b20      	ldr	r3, [pc, #128]	; (80025ac <MX_TIM5_Init+0xac>)
 800252c:	2200      	movs	r2, #0
 800252e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002530:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <MX_TIM5_Init+0xac>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 90;
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <MX_TIM5_Init+0xac>)
 8002538:	225a      	movs	r2, #90	; 0x5a
 800253a:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <MX_TIM5_Init+0xac>)
 800253e:	2200      	movs	r2, #0
 8002540:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <MX_TIM5_Init+0xac>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8002548:	4818      	ldr	r0, [pc, #96]	; (80025ac <MX_TIM5_Init+0xac>)
 800254a:	f00d fcf3 	bl	800ff34 <HAL_TIM_PWM_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM5_Init+0x58>
		Error_Handler();
 8002554:	f000 fad2 	bl	8002afc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	4619      	mov	r1, r3
 8002566:	4811      	ldr	r0, [pc, #68]	; (80025ac <MX_TIM5_Init+0xac>)
 8002568:	f00e ff7a 	bl	8011460 <HAL_TIMEx_MasterConfigSynchronization>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM5_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8002572:	f000 fac3 	bl	8002afc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002576:	2360      	movs	r3, #96	; 0x60
 8002578:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 8002586:	463b      	mov	r3, r7
 8002588:	220c      	movs	r2, #12
 800258a:	4619      	mov	r1, r3
 800258c:	4807      	ldr	r0, [pc, #28]	; (80025ac <MX_TIM5_Init+0xac>)
 800258e:	f00e f999 	bl	80108c4 <HAL_TIM_PWM_ConfigChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM5_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8002598:	f000 fab0 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <MX_TIM5_Init+0xac>)
 800259e:	f000 ffe3 	bl	8003568 <HAL_TIM_MspPostInit>

}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	240010b0 	.word	0x240010b0
 80025b0:	40000c00 	.word	0x40000c00

080025b4 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_TIM13_Init+0x40>)
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <MX_TIM13_Init+0x44>)
 80025bc:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 99;
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <MX_TIM13_Init+0x40>)
 80025c0:	2263      	movs	r2, #99	; 0x63
 80025c2:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <MX_TIM13_Init+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 65535;
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <MX_TIM13_Init+0x40>)
 80025cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d0:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_TIM13_Init+0x40>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_TIM13_Init+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_TIM13_Init+0x40>)
 80025e0:	f00d fc51 	bl	800fe86 <HAL_TIM_Base_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM13_Init+0x3a>
		Error_Handler();
 80025ea:	f000 fa87 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	240010fc 	.word	0x240010fc
 80025f8:	40001c00 	.word	0x40001c00

080025fc <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8002600:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_TIM14_Init+0x40>)
 8002602:	4a0f      	ldr	r2, [pc, #60]	; (8002640 <MX_TIM14_Init+0x44>)
 8002604:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 99;
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <MX_TIM14_Init+0x40>)
 8002608:	2263      	movs	r2, #99	; 0x63
 800260a:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <MX_TIM14_Init+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 65535;
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <MX_TIM14_Init+0x40>)
 8002614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002618:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <MX_TIM14_Init+0x40>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_TIM14_Init+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <MX_TIM14_Init+0x40>)
 8002628:	f00d fc2d 	bl	800fe86 <HAL_TIM_Base_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM14_Init+0x3a>
		Error_Handler();
 8002632:	f000 fa63 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	24001148 	.word	0x24001148
 8002640:	40002000 	.word	0x40002000

08002644 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <MX_UART4_Init+0x90>)
 800264a:	4a23      	ldr	r2, [pc, #140]	; (80026d8 <MX_UART4_Init+0x94>)
 800264c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <MX_UART4_Init+0x90>)
 8002650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002654:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002656:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <MX_UART4_Init+0x90>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <MX_UART4_Init+0x90>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002662:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <MX_UART4_Init+0x90>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <MX_UART4_Init+0x90>)
 800266a:	220c      	movs	r2, #12
 800266c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266e:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <MX_UART4_Init+0x90>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002674:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <MX_UART4_Init+0x90>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <MX_UART4_Init+0x90>)
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <MX_UART4_Init+0x90>)
 8002682:	2200      	movs	r2, #0
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <MX_UART4_Init+0x90>)
 8002688:	2200      	movs	r2, #0
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 800268c:	4811      	ldr	r0, [pc, #68]	; (80026d4 <MX_UART4_Init+0x90>)
 800268e:	f00e ffa1 	bl	80115d4 <HAL_UART_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_UART4_Init+0x58>
		Error_Handler();
 8002698:	f000 fa30 	bl	8002afc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 800269c:	2100      	movs	r1, #0
 800269e:	480d      	ldr	r0, [pc, #52]	; (80026d4 <MX_UART4_Init+0x90>)
 80026a0:	f010 f8a7 	bl	80127f2 <HAL_UARTEx_SetTxFifoThreshold>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80026aa:	f000 fa27 	bl	8002afc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80026ae:	2100      	movs	r1, #0
 80026b0:	4808      	ldr	r0, [pc, #32]	; (80026d4 <MX_UART4_Init+0x90>)
 80026b2:	f010 f8dc 	bl	801286e <HAL_UARTEx_SetRxFifoThreshold>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80026bc:	f000 fa1e 	bl	8002afc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 80026c0:	4804      	ldr	r0, [pc, #16]	; (80026d4 <MX_UART4_Init+0x90>)
 80026c2:	f010 f85d 	bl	8012780 <HAL_UARTEx_DisableFifoMode>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_UART4_Init+0x8c>
		Error_Handler();
 80026cc:	f000 fa16 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	240013ec 	.word	0x240013ec
 80026d8:	40004c00 	.word	0x40004c00

080026dc <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <MX_USART6_UART_Init+0x90>)
 80026e2:	4a23      	ldr	r2, [pc, #140]	; (8002770 <MX_USART6_UART_Init+0x94>)
 80026e4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80026e6:	4b21      	ldr	r3, [pc, #132]	; (800276c <MX_USART6_UART_Init+0x90>)
 80026e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ec:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <MX_USART6_UART_Init+0x90>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <MX_USART6_UART_Init+0x90>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <MX_USART6_UART_Init+0x90>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002700:	4b1a      	ldr	r3, [pc, #104]	; (800276c <MX_USART6_UART_Init+0x90>)
 8002702:	220c      	movs	r2, #12
 8002704:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <MX_USART6_UART_Init+0x90>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800270c:	4b17      	ldr	r3, [pc, #92]	; (800276c <MX_USART6_UART_Init+0x90>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <MX_USART6_UART_Init+0x90>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <MX_USART6_UART_Init+0x90>)
 800271a:	2200      	movs	r2, #0
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <MX_USART6_UART_Init+0x90>)
 8002720:	2200      	movs	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002724:	4811      	ldr	r0, [pc, #68]	; (800276c <MX_USART6_UART_Init+0x90>)
 8002726:	f00e ff55 	bl	80115d4 <HAL_UART_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_USART6_UART_Init+0x58>
		Error_Handler();
 8002730:	f000 f9e4 	bl	8002afc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 8002734:	2100      	movs	r1, #0
 8002736:	480d      	ldr	r0, [pc, #52]	; (800276c <MX_USART6_UART_Init+0x90>)
 8002738:	f010 f85b 	bl	80127f2 <HAL_UARTEx_SetTxFifoThreshold>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_USART6_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8002742:	f000 f9db 	bl	8002afc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 8002746:	2100      	movs	r1, #0
 8002748:	4808      	ldr	r0, [pc, #32]	; (800276c <MX_USART6_UART_Init+0x90>)
 800274a:	f010 f890 	bl	801286e <HAL_UARTEx_SetRxFifoThreshold>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_USART6_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002754:	f000 f9d2 	bl	8002afc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 8002758:	4804      	ldr	r0, [pc, #16]	; (800276c <MX_USART6_UART_Init+0x90>)
 800275a:	f010 f811 	bl	8012780 <HAL_UARTEx_DisableFifoMode>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_USART6_UART_Init+0x8c>
		Error_Handler();
 8002764:	f000 f9ca 	bl	8002afc <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}
 800276c:	24001480 	.word	0x24001480
 8002770:	40011400 	.word	0x40011400

08002774 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800277a:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <MX_DMA_Init+0xbc>)
 800277c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002780:	4a2b      	ldr	r2, [pc, #172]	; (8002830 <MX_DMA_Init+0xbc>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800278a:	4b29      	ldr	r3, [pc, #164]	; (8002830 <MX_DMA_Init+0xbc>)
 800278c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002798:	4b25      	ldr	r3, [pc, #148]	; (8002830 <MX_DMA_Init+0xbc>)
 800279a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800279e:	4a24      	ldr	r2, [pc, #144]	; (8002830 <MX_DMA_Init+0xbc>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027a8:	4b21      	ldr	r3, [pc, #132]	; (8002830 <MX_DMA_Init+0xbc>)
 80027aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	200b      	movs	r0, #11
 80027bc:	f003 fb25 	bl	8005e0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027c0:	200b      	movs	r0, #11
 80027c2:	f003 fb3c 	bl	8005e3e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	200c      	movs	r0, #12
 80027cc:	f003 fb1d 	bl	8005e0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027d0:	200c      	movs	r0, #12
 80027d2:	f003 fb34 	bl	8005e3e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	200d      	movs	r0, #13
 80027dc:	f003 fb15 	bl	8005e0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80027e0:	200d      	movs	r0, #13
 80027e2:	f003 fb2c 	bl	8005e3e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	200e      	movs	r0, #14
 80027ec:	f003 fb0d 	bl	8005e0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80027f0:	200e      	movs	r0, #14
 80027f2:	f003 fb24 	bl	8005e3e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	200f      	movs	r0, #15
 80027fc:	f003 fb05 	bl	8005e0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002800:	200f      	movs	r0, #15
 8002802:	f003 fb1c 	bl	8005e3e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	2010      	movs	r0, #16
 800280c:	f003 fafd 	bl	8005e0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002810:	2010      	movs	r0, #16
 8002812:	f003 fb14 	bl	8005e3e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2100      	movs	r1, #0
 800281a:	2046      	movs	r0, #70	; 0x46
 800281c:	f003 faf5 	bl	8005e0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002820:	2046      	movs	r0, #70	; 0x46
 8002822:	f003 fb0c 	bl	8005e3e <HAL_NVIC_EnableIRQ>

}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	58024400 	.word	0x58024400

08002834 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	; 0x30
 8002838:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	60da      	str	r2, [r3, #12]
 8002848:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800284a:	4ba4      	ldr	r3, [pc, #656]	; (8002adc <MX_GPIO_Init+0x2a8>)
 800284c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002850:	4aa2      	ldr	r2, [pc, #648]	; (8002adc <MX_GPIO_Init+0x2a8>)
 8002852:	f043 0310 	orr.w	r3, r3, #16
 8002856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285a:	4ba0      	ldr	r3, [pc, #640]	; (8002adc <MX_GPIO_Init+0x2a8>)
 800285c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002868:	4b9c      	ldr	r3, [pc, #624]	; (8002adc <MX_GPIO_Init+0x2a8>)
 800286a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286e:	4a9b      	ldr	r2, [pc, #620]	; (8002adc <MX_GPIO_Init+0x2a8>)
 8002870:	f043 0320 	orr.w	r3, r3, #32
 8002874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002878:	4b98      	ldr	r3, [pc, #608]	; (8002adc <MX_GPIO_Init+0x2a8>)
 800287a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002886:	4b95      	ldr	r3, [pc, #596]	; (8002adc <MX_GPIO_Init+0x2a8>)
 8002888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288c:	4a93      	ldr	r2, [pc, #588]	; (8002adc <MX_GPIO_Init+0x2a8>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002896:	4b91      	ldr	r3, [pc, #580]	; (8002adc <MX_GPIO_Init+0x2a8>)
 8002898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80028a4:	4b8d      	ldr	r3, [pc, #564]	; (8002adc <MX_GPIO_Init+0x2a8>)
 80028a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028aa:	4a8c      	ldr	r2, [pc, #560]	; (8002adc <MX_GPIO_Init+0x2a8>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028b4:	4b89      	ldr	r3, [pc, #548]	; (8002adc <MX_GPIO_Init+0x2a8>)
 80028b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80028c2:	4b86      	ldr	r3, [pc, #536]	; (8002adc <MX_GPIO_Init+0x2a8>)
 80028c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c8:	4a84      	ldr	r2, [pc, #528]	; (8002adc <MX_GPIO_Init+0x2a8>)
 80028ca:	f043 0302 	orr.w	r3, r3, #2
 80028ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028d2:	4b82      	ldr	r3, [pc, #520]	; (8002adc <MX_GPIO_Init+0x2a8>)
 80028d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80028e0:	4b7e      	ldr	r3, [pc, #504]	; (8002adc <MX_GPIO_Init+0x2a8>)
 80028e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e6:	4a7d      	ldr	r2, [pc, #500]	; (8002adc <MX_GPIO_Init+0x2a8>)
 80028e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028f0:	4b7a      	ldr	r3, [pc, #488]	; (8002adc <MX_GPIO_Init+0x2a8>)
 80028f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80028fe:	4b77      	ldr	r3, [pc, #476]	; (8002adc <MX_GPIO_Init+0x2a8>)
 8002900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002904:	4a75      	ldr	r2, [pc, #468]	; (8002adc <MX_GPIO_Init+0x2a8>)
 8002906:	f043 0308 	orr.w	r3, r3, #8
 800290a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800290e:	4b73      	ldr	r3, [pc, #460]	; (8002adc <MX_GPIO_Init+0x2a8>)
 8002910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin,
 800291c:	2200      	movs	r2, #0
 800291e:	f241 5104 	movw	r1, #5380	; 0x1504
 8002922:	486f      	ldr	r0, [pc, #444]	; (8002ae0 <MX_GPIO_Init+0x2ac>)
 8002924:	f006 f89e 	bl	8008a64 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARM1_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8002928:	2200      	movs	r2, #0
 800292a:	f248 0102 	movw	r1, #32770	; 0x8002
 800292e:	486d      	ldr	r0, [pc, #436]	; (8002ae4 <MX_GPIO_Init+0x2b0>)
 8002930:	f006 f898 	bl	8008a64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002934:	2200      	movs	r2, #0
 8002936:	2130      	movs	r1, #48	; 0x30
 8002938:	486b      	ldr	r0, [pc, #428]	; (8002ae8 <MX_GPIO_Init+0x2b4>)
 800293a:	f006 f893 	bl	8008a64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 800293e:	2200      	movs	r2, #0
 8002940:	2102      	movs	r1, #2
 8002942:	486a      	ldr	r0, [pc, #424]	; (8002aec <MX_GPIO_Init+0x2b8>)
 8002944:	f006 f88e 	bl	8008a64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, PYRO2_Pin | PYRO3_Pin | PYRO4_Pin, GPIO_PIN_RESET);
 8002948:	2200      	movs	r2, #0
 800294a:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800294e:	4868      	ldr	r0, [pc, #416]	; (8002af0 <MX_GPIO_Init+0x2bc>)
 8002950:	f006 f888 	bl	8008a64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3,
 8002954:	2200      	movs	r2, #0
 8002956:	210e      	movs	r1, #14
 8002958:	4866      	ldr	r0, [pc, #408]	; (8002af4 <MX_GPIO_Init+0x2c0>)
 800295a:	f006 f883 	bl	8008a64 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0,
 800295e:	2200      	movs	r2, #0
 8002960:	f240 3101 	movw	r1, #769	; 0x301
 8002964:	4864      	ldr	r0, [pc, #400]	; (8002af8 <MX_GPIO_Init+0x2c4>)
 8002966:	f006 f87d 	bl	8008a64 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin;
 800296a:	f241 5304 	movw	r3, #5380	; 0x1504
 800296e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002970:	2301      	movs	r3, #1
 8002972:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4619      	mov	r1, r3
 8002982:	4857      	ldr	r0, [pc, #348]	; (8002ae0 <MX_GPIO_Init+0x2ac>)
 8002984:	f005 feae 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARM1_Pin PA15 */
	GPIO_InitStruct.Pin = ARM1_Pin | GPIO_PIN_15;
 8002988:	f248 0302 	movw	r3, #32770	; 0x8002
 800298c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298e:	2301      	movs	r3, #1
 8002990:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2300      	movs	r3, #0
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	4850      	ldr	r0, [pc, #320]	; (8002ae4 <MX_GPIO_Init+0x2b0>)
 80029a2:	f005 fe9f 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80029a6:	2330      	movs	r3, #48	; 0x30
 80029a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029aa:	2301      	movs	r3, #1
 80029ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b6:	f107 031c 	add.w	r3, r7, #28
 80029ba:	4619      	mov	r1, r3
 80029bc:	484a      	ldr	r0, [pc, #296]	; (8002ae8 <MX_GPIO_Init+0x2b4>)
 80029be:	f005 fe91 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PYRO1_Pin */
	GPIO_InitStruct.Pin = PYRO1_Pin;
 80029c2:	2302      	movs	r3, #2
 80029c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c6:	2301      	movs	r3, #1
 80029c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f107 031c 	add.w	r3, r7, #28
 80029d6:	4619      	mov	r1, r3
 80029d8:	4844      	ldr	r0, [pc, #272]	; (8002aec <MX_GPIO_Init+0x2b8>)
 80029da:	f005 fe83 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT1_Pin */
	GPIO_InitStruct.Pin = CONT1_Pin;
 80029de:	2304      	movs	r3, #4
 80029e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e6:	2301      	movs	r3, #1
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 031c 	add.w	r3, r7, #28
 80029ee:	4619      	mov	r1, r3
 80029f0:	483e      	ldr	r0, [pc, #248]	; (8002aec <MX_GPIO_Init+0x2b8>)
 80029f2:	f005 fe77 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
	GPIO_InitStruct.Pin = PYRO2_Pin | PYRO3_Pin | PYRO4_Pin;
 80029f6:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80029fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fc:	2301      	movs	r3, #1
 80029fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4838      	ldr	r0, [pc, #224]	; (8002af0 <MX_GPIO_Init+0x2bc>)
 8002a10:	f005 fe68 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT2_Pin CONT3_Pin */
	GPIO_InitStruct.Pin = CONT2_Pin | CONT3_Pin;
 8002a14:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002a18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	4619      	mov	r1, r3
 8002a28:	4831      	ldr	r0, [pc, #196]	; (8002af0 <MX_GPIO_Init+0x2bc>)
 8002a2a:	f005 fe5b 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT4_Pin */
	GPIO_InitStruct.Pin = CONT4_Pin;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	4619      	mov	r1, r3
 8002a40:	482c      	ldr	r0, [pc, #176]	; (8002af4 <MX_GPIO_Init+0x2c0>)
 8002a42:	f005 fe4f 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
	GPIO_InitStruct.Pin = PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3;
 8002a46:	230e      	movs	r3, #14
 8002a48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a56:	f107 031c 	add.w	r3, r7, #28
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4825      	ldr	r0, [pc, #148]	; (8002af4 <MX_GPIO_Init+0x2c0>)
 8002a5e:	f005 fe41 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
	GPIO_InitStruct.Pin = CONT5_Pin | CONT6_Pin | CONT7_Pin | CONT8_Pin;
 8002a62:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002a66:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	4619      	mov	r1, r3
 8002a76:	481a      	ldr	r0, [pc, #104]	; (8002ae0 <MX_GPIO_Init+0x2ac>)
 8002a78:	f005 fe34 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD0 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0;
 8002a7c:	f240 3301 	movw	r3, #769	; 0x301
 8002a80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a82:	2301      	movs	r3, #1
 8002a84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a8e:	f107 031c 	add.w	r3, r7, #28
 8002a92:	4619      	mov	r1, r3
 8002a94:	4818      	ldr	r0, [pc, #96]	; (8002af8 <MX_GPIO_Init+0x2c4>)
 8002a96:	f005 fe25 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Servo_ARM_CHECK_Pin */
	GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002a9a:	2310      	movs	r3, #16
 8002a9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002aa6:	f107 031c 	add.w	r3, r7, #28
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4811      	ldr	r0, [pc, #68]	; (8002af4 <MX_GPIO_Init+0x2c0>)
 8002aae:	f005 fe19 	bl	80086e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_GPIO_Init+0x2b0>)
 8002ad0:	f005 fe08 	bl	80086e4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002ad4:	bf00      	nop
 8002ad6:	3730      	adds	r7, #48	; 0x30
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	58021000 	.word	0x58021000
 8002ae4:	58020000 	.word	0x58020000
 8002ae8:	58020800 	.word	0x58020800
 8002aec:	58020400 	.word	0x58020400
 8002af0:	58021400 	.word	0x58021400
 8002af4:	58021800 	.word	0x58021800
 8002af8:	58020c00 	.word	0x58020c00

08002afc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b00:	b672      	cpsid	i
}
 8002b02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b04:	e7fe      	b.n	8002b04 <Error_Handler+0x8>
	...

08002b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_MspInit+0x30>)
 8002b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b14:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <HAL_MspInit+0x30>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_MspInit+0x30>)
 8002b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	58024400 	.word	0x58024400

08002b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a5d      	ldr	r2, [pc, #372]	; (8002cd0 <HAL_ADC_MspInit+0x194>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d159      	bne.n	8002c12 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b64:	4a5b      	ldr	r2, [pc, #364]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002b66:	f043 0320 	orr.w	r3, r3, #32
 8002b6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b6e:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7c:	4b55      	ldr	r3, [pc, #340]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b82:	4a54      	ldr	r2, [pc, #336]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b8c:	4b51      	ldr	r3, [pc, #324]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	4619      	mov	r1, r3
 8002bac:	484a      	ldr	r0, [pc, #296]	; (8002cd8 <HAL_ADC_MspInit+0x19c>)
 8002bae:	f005 fd99 	bl	80086e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002bb2:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002bb4:	4a4a      	ldr	r2, [pc, #296]	; (8002ce0 <HAL_ADC_MspInit+0x1a4>)
 8002bb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002bb8:	4b48      	ldr	r3, [pc, #288]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002bba:	2209      	movs	r2, #9
 8002bbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bbe:	4b47      	ldr	r3, [pc, #284]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bc4:	4b45      	ldr	r3, [pc, #276]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002bca:	4b44      	ldr	r3, [pc, #272]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bd2:	4b42      	ldr	r3, [pc, #264]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002be0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002be2:	4b3e      	ldr	r3, [pc, #248]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002be8:	4b3c      	ldr	r3, [pc, #240]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bee:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bf4:	4839      	ldr	r0, [pc, #228]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002bf6:	f003 f93d 	bl	8005e74 <HAL_DMA_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002c00:	f7ff ff7c 	bl	8002afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a35      	ldr	r2, [pc, #212]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002c08:	659a      	str	r2, [r3, #88]	; 0x58
 8002c0a:	4a34      	ldr	r2, [pc, #208]	; (8002cdc <HAL_ADC_MspInit+0x1a0>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002c10:	e059      	b.n	8002cc6 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a33      	ldr	r2, [pc, #204]	; (8002ce4 <HAL_ADC_MspInit+0x1a8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d154      	bne.n	8002cc6 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c22:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c2c:	4b29      	ldr	r3, [pc, #164]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c40:	4a24      	ldr	r2, [pc, #144]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_ADC_MspInit+0x198>)
 8002c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002c58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002c5c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002c60:	f001 f826 	bl	8003cb0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002c64:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <HAL_ADC_MspInit+0x1b0>)
 8002c68:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002c6c:	2273      	movs	r2, #115	; 0x73
 8002c6e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c82:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002c86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c8a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c92:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c9a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ca2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002caa:	480f      	ldr	r0, [pc, #60]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002cac:	f003 f8e2 	bl	8005e74 <HAL_DMA_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002cb6:	f7ff ff21 	bl	8002afc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc0:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_ADC_MspInit+0x1ac>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002cc6:	bf00      	nop
 8002cc8:	3730      	adds	r7, #48	; 0x30
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	58020000 	.word	0x58020000
 8002cdc:	24000bd4 	.word	0x24000bd4
 8002ce0:	40020088 	.word	0x40020088
 8002ce4:	58026000 	.word	0x58026000
 8002ce8:	24000c4c 	.word	0x24000c4c
 8002cec:	400204b8 	.word	0x400204b8

08002cf0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b0b8      	sub	sp, #224	; 0xe0
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	22b8      	movs	r2, #184	; 0xb8
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f017 fe9b 	bl	801aa4c <memset>
  if(hfdcan->Instance==FDCAN3)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <HAL_FDCAN_MspInit+0xc4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d145      	bne.n	8002dac <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002d2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d30:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d32:	f107 0310 	add.w	r3, r7, #16
 8002d36:	4618      	mov	r0, r3
 8002d38:	f008 fac2 	bl	800b2c0 <HAL_RCCEx_PeriphCLKConfig>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002d42:	f7ff fedb 	bl	8002afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002d46:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HAL_FDCAN_MspInit+0xc8>)
 8002d48:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d4c:	4a1a      	ldr	r2, [pc, #104]	; (8002db8 <HAL_FDCAN_MspInit+0xc8>)
 8002d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d52:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002d56:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <HAL_FDCAN_MspInit+0xc8>)
 8002d58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d64:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_FDCAN_MspInit+0xc8>)
 8002d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6a:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <HAL_FDCAN_MspInit+0xc8>)
 8002d6c:	f043 0320 	orr.w	r3, r3, #32
 8002d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d74:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HAL_FDCAN_MspInit+0xc8>)
 8002d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d82:	23c0      	movs	r3, #192	; 0xc0
 8002d84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002da0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002da4:	4619      	mov	r1, r3
 8002da6:	4805      	ldr	r0, [pc, #20]	; (8002dbc <HAL_FDCAN_MspInit+0xcc>)
 8002da8:	f005 fc9c 	bl	80086e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002dac:	bf00      	nop
 8002dae:	37e0      	adds	r7, #224	; 0xe0
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	4000d400 	.word	0x4000d400
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	58021400 	.word	0x58021400

08002dc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b0b8      	sub	sp, #224	; 0xe0
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dd8:	f107 0310 	add.w	r3, r7, #16
 8002ddc:	22b8      	movs	r2, #184	; 0xb8
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f017 fe33 	bl	801aa4c <memset>
  if(hi2c->Instance==I2C2)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <HAL_I2C_MspInit+0xd4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d14d      	bne.n	8002e8c <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002df0:	f04f 0208 	mov.w	r2, #8
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e02:	f107 0310 	add.w	r3, r7, #16
 8002e06:	4618      	mov	r0, r3
 8002e08:	f008 fa5a 	bl	800b2c0 <HAL_RCCEx_PeriphCLKConfig>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002e12:	f7ff fe73 	bl	8002afc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e16:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_I2C_MspInit+0xd8>)
 8002e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1c:	4a1e      	ldr	r2, [pc, #120]	; (8002e98 <HAL_I2C_MspInit+0xd8>)
 8002e1e:	f043 0320 	orr.w	r3, r3, #32
 8002e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <HAL_I2C_MspInit+0xd8>)
 8002e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e3a:	2312      	movs	r3, #18
 8002e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e56:	4619      	mov	r1, r3
 8002e58:	4810      	ldr	r0, [pc, #64]	; (8002e9c <HAL_I2C_MspInit+0xdc>)
 8002e5a:	f005 fc43 	bl	80086e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <HAL_I2C_MspInit+0xd8>)
 8002e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e64:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <HAL_I2C_MspInit+0xd8>)
 8002e66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_I2C_MspInit+0xd8>)
 8002e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2101      	movs	r1, #1
 8002e80:	2021      	movs	r0, #33	; 0x21
 8002e82:	f002 ffc2 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002e86:	2021      	movs	r0, #33	; 0x21
 8002e88:	f002 ffd9 	bl	8005e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e8c:	bf00      	nop
 8002e8e:	37e0      	adds	r7, #224	; 0xe0
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40005800 	.word	0x40005800
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	58021400 	.word	0x58021400

08002ea0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b0ba      	sub	sp, #232	; 0xe8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002eb8:	f107 0318 	add.w	r3, r7, #24
 8002ebc:	22b8      	movs	r2, #184	; 0xb8
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f017 fdc3 	bl	801aa4c <memset>
  if(hsd->Instance==SDMMC2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a5d      	ldr	r2, [pc, #372]	; (8003040 <HAL_SD_MspInit+0x1a0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	f040 80b3 	bne.w	8003038 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002ed2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ee2:	f107 0318 	add.w	r3, r7, #24
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f008 f9ea 	bl	800b2c0 <HAL_RCCEx_PeriphCLKConfig>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002ef2:	f7ff fe03 	bl	8002afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002ef6:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_SD_MspInit+0x1a4>)
 8002ef8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002efc:	4a51      	ldr	r2, [pc, #324]	; (8003044 <HAL_SD_MspInit+0x1a4>)
 8002efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f02:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002f06:	4b4f      	ldr	r3, [pc, #316]	; (8003044 <HAL_SD_MspInit+0x1a4>)
 8002f08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f14:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <HAL_SD_MspInit+0x1a4>)
 8002f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f1a:	4a4a      	ldr	r2, [pc, #296]	; (8003044 <HAL_SD_MspInit+0x1a4>)
 8002f1c:	f043 0308 	orr.w	r3, r3, #8
 8002f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f24:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_SD_MspInit+0x1a4>)
 8002f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f32:	4b44      	ldr	r3, [pc, #272]	; (8003044 <HAL_SD_MspInit+0x1a4>)
 8002f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f38:	4a42      	ldr	r2, [pc, #264]	; (8003044 <HAL_SD_MspInit+0x1a4>)
 8002f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f42:	4b40      	ldr	r3, [pc, #256]	; (8003044 <HAL_SD_MspInit+0x1a4>)
 8002f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f50:	2340      	movs	r3, #64	; 0x40
 8002f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f62:	2303      	movs	r3, #3
 8002f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002f68:	230b      	movs	r3, #11
 8002f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f6e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f72:	4619      	mov	r1, r3
 8002f74:	4834      	ldr	r0, [pc, #208]	; (8003048 <HAL_SD_MspInit+0x1a8>)
 8002f76:	f005 fbb5 	bl	80086e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2302      	movs	r3, #2
 8002f82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002f92:	230b      	movs	r3, #11
 8002f94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	482a      	ldr	r0, [pc, #168]	; (8003048 <HAL_SD_MspInit+0x1a8>)
 8002fa0:	f005 fba0 	bl	80086e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002fbe:	230b      	movs	r3, #11
 8002fc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4820      	ldr	r0, [pc, #128]	; (800304c <HAL_SD_MspInit+0x1ac>)
 8002fcc:	f005 fb8a 	bl	80086e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002fea:	230b      	movs	r3, #11
 8002fec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ff0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4815      	ldr	r0, [pc, #84]	; (800304c <HAL_SD_MspInit+0x1ac>)
 8002ff8:	f005 fb74 	bl	80086e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ffc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003010:	2303      	movs	r3, #3
 8003012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8003016:	230a      	movs	r3, #10
 8003018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800301c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003020:	4619      	mov	r1, r3
 8003022:	480a      	ldr	r0, [pc, #40]	; (800304c <HAL_SD_MspInit+0x1ac>)
 8003024:	f005 fb5e 	bl	80086e4 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	2100      	movs	r1, #0
 800302c:	207c      	movs	r0, #124	; 0x7c
 800302e:	f002 feec 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8003032:	207c      	movs	r0, #124	; 0x7c
 8003034:	f002 ff03 	bl	8005e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8003038:	bf00      	nop
 800303a:	37e8      	adds	r7, #232	; 0xe8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	48022400 	.word	0x48022400
 8003044:	58024400 	.word	0x58024400
 8003048:	58020c00 	.word	0x58020c00
 800304c:	58021800 	.word	0x58021800

08003050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a4f      	ldr	r2, [pc, #316]	; (80031ac <HAL_SPI_MspInit+0x15c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d12e      	bne.n	80030d0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003072:	4b4f      	ldr	r3, [pc, #316]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 8003074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003078:	4a4d      	ldr	r2, [pc, #308]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 800307a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800307e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003082:	4b4b      	ldr	r3, [pc, #300]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 8003084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003090:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 8003092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003096:	4a46      	ldr	r2, [pc, #280]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 80030a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80030ae:	23e0      	movs	r3, #224	; 0xe0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2302      	movs	r3, #2
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2300      	movs	r3, #0
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030be:	2305      	movs	r3, #5
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c6:	4619      	mov	r1, r3
 80030c8:	483a      	ldr	r0, [pc, #232]	; (80031b4 <HAL_SPI_MspInit+0x164>)
 80030ca:	f005 fb0b 	bl	80086e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80030ce:	e068      	b.n	80031a2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a38      	ldr	r2, [pc, #224]	; (80031b8 <HAL_SPI_MspInit+0x168>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d12f      	bne.n	800313a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030da:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 80030dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030e0:	4a33      	ldr	r2, [pc, #204]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 80030e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 80030ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f8:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 80030fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fe:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 800310a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003116:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003124:	2300      	movs	r3, #0
 8003126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003128:	2305      	movs	r3, #5
 800312a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003130:	4619      	mov	r1, r3
 8003132:	4822      	ldr	r0, [pc, #136]	; (80031bc <HAL_SPI_MspInit+0x16c>)
 8003134:	f005 fad6 	bl	80086e4 <HAL_GPIO_Init>
}
 8003138:	e033      	b.n	80031a2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a20      	ldr	r2, [pc, #128]	; (80031c0 <HAL_SPI_MspInit+0x170>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d12e      	bne.n	80031a2 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 8003146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800314a:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 800314c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003150:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003154:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 8003156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800315a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 8003164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003168:	4a11      	ldr	r2, [pc, #68]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003172:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <HAL_SPI_MspInit+0x160>)
 8003174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003180:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	2300      	movs	r3, #0
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003192:	2306      	movs	r3, #6
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800319a:	4619      	mov	r1, r3
 800319c:	4809      	ldr	r0, [pc, #36]	; (80031c4 <HAL_SPI_MspInit+0x174>)
 800319e:	f005 faa1 	bl	80086e4 <HAL_GPIO_Init>
}
 80031a2:	bf00      	nop
 80031a4:	3738      	adds	r7, #56	; 0x38
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40013000 	.word	0x40013000
 80031b0:	58024400 	.word	0x58024400
 80031b4:	58020000 	.word	0x58020000
 80031b8:	40003800 	.word	0x40003800
 80031bc:	58020400 	.word	0x58020400
 80031c0:	40003c00 	.word	0x40003c00
 80031c4:	58020800 	.word	0x58020800

080031c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	; 0x30
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 031c 	add.w	r3, r7, #28
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e8:	d15d      	bne.n	80032a6 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ea:	4b8e      	ldr	r3, [pc, #568]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 80031ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031f0:	4a8c      	ldr	r2, [pc, #560]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031fa:	4b8a      	ldr	r3, [pc, #552]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 80031fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003208:	4b86      	ldr	r3, [pc, #536]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 800320a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800320e:	4a85      	ldr	r2, [pc, #532]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003218:	4b82      	ldr	r3, [pc, #520]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 800321a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003226:	2301      	movs	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322a:	2302      	movs	r3, #2
 800322c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	2300      	movs	r3, #0
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003236:	2301      	movs	r3, #1
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323a:	f107 031c 	add.w	r3, r7, #28
 800323e:	4619      	mov	r1, r3
 8003240:	4879      	ldr	r0, [pc, #484]	; (8003428 <HAL_TIM_PWM_MspInit+0x260>)
 8003242:	f005 fa4f 	bl	80086e4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003246:	4b79      	ldr	r3, [pc, #484]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 8003248:	4a79      	ldr	r2, [pc, #484]	; (8003430 <HAL_TIM_PWM_MspInit+0x268>)
 800324a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800324c:	4b77      	ldr	r3, [pc, #476]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 800324e:	2214      	movs	r2, #20
 8003250:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003252:	4b76      	ldr	r3, [pc, #472]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 8003254:	2240      	movs	r2, #64	; 0x40
 8003256:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003258:	4b74      	ldr	r3, [pc, #464]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800325e:	4b73      	ldr	r3, [pc, #460]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 8003260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003264:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003266:	4b71      	ldr	r3, [pc, #452]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 8003268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800326c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800326e:	4b6f      	ldr	r3, [pc, #444]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 8003270:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003274:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003276:	4b6d      	ldr	r3, [pc, #436]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 8003278:	2200      	movs	r2, #0
 800327a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800327c:	4b6b      	ldr	r3, [pc, #428]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 800327e:	2200      	movs	r2, #0
 8003280:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003282:	4b6a      	ldr	r3, [pc, #424]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 8003284:	2200      	movs	r2, #0
 8003286:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003288:	4868      	ldr	r0, [pc, #416]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 800328a:	f002 fdf3 	bl	8005e74 <HAL_DMA_Init>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003294:	f7ff fc32 	bl	8002afc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a64      	ldr	r2, [pc, #400]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
 800329e:	4a63      	ldr	r2, [pc, #396]	; (800342c <HAL_TIM_PWM_MspInit+0x264>)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80032a4:	e119      	b.n	80034da <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a62      	ldr	r2, [pc, #392]	; (8003434 <HAL_TIM_PWM_MspInit+0x26c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d16d      	bne.n	800338c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032b0:	4b5c      	ldr	r3, [pc, #368]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 80032b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032b6:	4a5b      	ldr	r2, [pc, #364]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032c0:	4b58      	ldr	r3, [pc, #352]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 80032c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 80032ce:	4b5a      	ldr	r3, [pc, #360]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 80032d0:	4a5a      	ldr	r2, [pc, #360]	; (800343c <HAL_TIM_PWM_MspInit+0x274>)
 80032d2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80032d4:	4b58      	ldr	r3, [pc, #352]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 80032d6:	2218      	movs	r2, #24
 80032d8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032da:	4b57      	ldr	r3, [pc, #348]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 80032dc:	2240      	movs	r2, #64	; 0x40
 80032de:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e0:	4b55      	ldr	r3, [pc, #340]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80032e6:	4b54      	ldr	r3, [pc, #336]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 80032e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ec:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032ee:	4b52      	ldr	r3, [pc, #328]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 80032f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032f4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032f6:	4b50      	ldr	r3, [pc, #320]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 80032f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032fc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80032fe:	4b4e      	ldr	r3, [pc, #312]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 8003300:	2200      	movs	r2, #0
 8003302:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003304:	4b4c      	ldr	r3, [pc, #304]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 8003306:	2200      	movs	r2, #0
 8003308:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800330a:	4b4b      	ldr	r3, [pc, #300]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 800330c:	2200      	movs	r2, #0
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003310:	4849      	ldr	r0, [pc, #292]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 8003312:	f002 fdaf 	bl	8005e74 <HAL_DMA_Init>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 800331c:	f7ff fbee 	bl	8002afc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a45      	ldr	r2, [pc, #276]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 8003324:	629a      	str	r2, [r3, #40]	; 0x28
 8003326:	4a44      	ldr	r2, [pc, #272]	; (8003438 <HAL_TIM_PWM_MspInit+0x270>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 800332c:	4b44      	ldr	r3, [pc, #272]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 800332e:	4a45      	ldr	r2, [pc, #276]	; (8003444 <HAL_TIM_PWM_MspInit+0x27c>)
 8003330:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003332:	4b43      	ldr	r3, [pc, #268]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 8003334:	2217      	movs	r2, #23
 8003336:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003338:	4b41      	ldr	r3, [pc, #260]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 800333a:	2240      	movs	r2, #64	; 0x40
 800333c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800333e:	4b40      	ldr	r3, [pc, #256]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 8003340:	2200      	movs	r2, #0
 8003342:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003344:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 8003346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800334a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800334c:	4b3c      	ldr	r3, [pc, #240]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 800334e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003352:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003354:	4b3a      	ldr	r3, [pc, #232]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 8003356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800335a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800335c:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 8003364:	2200      	movs	r2, #0
 8003366:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003368:	4b35      	ldr	r3, [pc, #212]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 800336a:	2200      	movs	r2, #0
 800336c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800336e:	4834      	ldr	r0, [pc, #208]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 8003370:	f002 fd80 	bl	8005e74 <HAL_DMA_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800337a:	f7ff fbbf 	bl	8002afc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a2f      	ldr	r2, [pc, #188]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 8003382:	625a      	str	r2, [r3, #36]	; 0x24
 8003384:	4a2e      	ldr	r2, [pc, #184]	; (8003440 <HAL_TIM_PWM_MspInit+0x278>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6393      	str	r3, [r2, #56]	; 0x38
}
 800338a:	e0a6      	b.n	80034da <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <HAL_TIM_PWM_MspInit+0x280>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d15e      	bne.n	8003454 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003396:	4b23      	ldr	r3, [pc, #140]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 8003398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800339c:	4a21      	ldr	r2, [pc, #132]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033a6:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <HAL_TIM_PWM_MspInit+0x25c>)
 80033a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 80033b4:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 80033b6:	4a26      	ldr	r2, [pc, #152]	; (8003450 <HAL_TIM_PWM_MspInit+0x288>)
 80033b8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 80033bc:	221f      	movs	r2, #31
 80033be:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033c0:	4b22      	ldr	r3, [pc, #136]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 80033c2:	2240      	movs	r2, #64	; 0x40
 80033c4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80033c6:	4b21      	ldr	r3, [pc, #132]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80033cc:	4b1f      	ldr	r3, [pc, #124]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 80033ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 80033d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033da:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033dc:	4b1b      	ldr	r3, [pc, #108]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 80033de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033e2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80033ea:	4b18      	ldr	r3, [pc, #96]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033f0:	4b16      	ldr	r3, [pc, #88]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80033f6:	4815      	ldr	r0, [pc, #84]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 80033f8:	f002 fd3c 	bl	8005e74 <HAL_DMA_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003402:	f7ff fb7b 	bl	8002afc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a10      	ldr	r2, [pc, #64]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
 800340c:	4a0f      	ldr	r2, [pc, #60]	; (800344c <HAL_TIM_PWM_MspInit+0x284>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003412:	2200      	movs	r2, #0
 8003414:	2100      	movs	r1, #0
 8003416:	201e      	movs	r0, #30
 8003418:	f002 fcf7 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800341c:	201e      	movs	r0, #30
 800341e:	f002 fd0e 	bl	8005e3e <HAL_NVIC_EnableIRQ>
}
 8003422:	e05a      	b.n	80034da <HAL_TIM_PWM_MspInit+0x312>
 8003424:	58024400 	.word	0x58024400
 8003428:	58020000 	.word	0x58020000
 800342c:	24001194 	.word	0x24001194
 8003430:	40020028 	.word	0x40020028
 8003434:	40000400 	.word	0x40000400
 8003438:	2400120c 	.word	0x2400120c
 800343c:	40020058 	.word	0x40020058
 8003440:	24001284 	.word	0x24001284
 8003444:	40020070 	.word	0x40020070
 8003448:	40000800 	.word	0x40000800
 800344c:	240012fc 	.word	0x240012fc
 8003450:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <HAL_TIM_PWM_MspInit+0x31c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d13d      	bne.n	80034da <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_TIM_PWM_MspInit+0x320>)
 8003460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003464:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <HAL_TIM_PWM_MspInit+0x320>)
 8003466:	f043 0308 	orr.w	r3, r3, #8
 800346a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_TIM_PWM_MspInit+0x320>)
 8003470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 800347c:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 800347e:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <HAL_TIM_PWM_MspInit+0x328>)
 8003480:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003482:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 8003484:	223a      	movs	r2, #58	; 0x3a
 8003486:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003488:	4b18      	ldr	r3, [pc, #96]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 800348a:	2240      	movs	r2, #64	; 0x40
 800348c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 8003490:	2200      	movs	r2, #0
 8003492:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003494:	4b15      	ldr	r3, [pc, #84]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 8003496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800349a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 800349e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034a2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034a4:	4b11      	ldr	r3, [pc, #68]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 80034a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034aa:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80034be:	480b      	ldr	r0, [pc, #44]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 80034c0:	f002 fcd8 	bl	8005e74 <HAL_DMA_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80034ca:	f7ff fb17 	bl	8002afc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a06      	ldr	r2, [pc, #24]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
 80034d4:	4a05      	ldr	r2, [pc, #20]	; (80034ec <HAL_TIM_PWM_MspInit+0x324>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80034da:	bf00      	nop
 80034dc:	3730      	adds	r7, #48	; 0x30
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40000c00 	.word	0x40000c00
 80034e8:	58024400 	.word	0x58024400
 80034ec:	24001374 	.word	0x24001374
 80034f0:	40020040 	.word	0x40020040

080034f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a16      	ldr	r2, [pc, #88]	; (800355c <HAL_TIM_Base_MspInit+0x68>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10f      	bne.n	8003526 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003506:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_TIM_Base_MspInit+0x6c>)
 8003508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <HAL_TIM_Base_MspInit+0x6c>)
 800350e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003512:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_TIM_Base_MspInit+0x6c>)
 8003518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800351c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003524:	e013      	b.n	800354e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a0e      	ldr	r2, [pc, #56]	; (8003564 <HAL_TIM_Base_MspInit+0x70>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d10e      	bne.n	800354e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_TIM_Base_MspInit+0x6c>)
 8003532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <HAL_TIM_Base_MspInit+0x6c>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <HAL_TIM_Base_MspInit+0x6c>)
 8003542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40001c00 	.word	0x40001c00
 8003560:	58024400 	.word	0x58024400
 8003564:	40002000 	.word	0x40002000

08003568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08c      	sub	sp, #48	; 0x30
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 031c 	add.w	r3, r7, #28
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003588:	d120      	bne.n	80035cc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358a:	4b52      	ldr	r3, [pc, #328]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 800358c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003590:	4a50      	ldr	r2, [pc, #320]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 8003592:	f043 0302 	orr.w	r3, r3, #2
 8003596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800359a:	4b4e      	ldr	r3, [pc, #312]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 800359c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035b2:	2302      	movs	r3, #2
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035ba:	2301      	movs	r3, #1
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035be:	f107 031c 	add.w	r3, r7, #28
 80035c2:	4619      	mov	r1, r3
 80035c4:	4844      	ldr	r0, [pc, #272]	; (80036d8 <HAL_TIM_MspPostInit+0x170>)
 80035c6:	f005 f88d 	bl	80086e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80035ca:	e07f      	b.n	80036cc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a42      	ldr	r2, [pc, #264]	; (80036dc <HAL_TIM_MspPostInit+0x174>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d11f      	bne.n	8003616 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d6:	4b3f      	ldr	r3, [pc, #252]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 80035d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035dc:	4a3d      	ldr	r2, [pc, #244]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 80035de:	f043 0302 	orr.w	r3, r3, #2
 80035e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 80035e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80035f4:	2330      	movs	r3, #48	; 0x30
 80035f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035fc:	2302      	movs	r3, #2
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003600:	2300      	movs	r3, #0
 8003602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003604:	2302      	movs	r3, #2
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003608:	f107 031c 	add.w	r3, r7, #28
 800360c:	4619      	mov	r1, r3
 800360e:	4832      	ldr	r0, [pc, #200]	; (80036d8 <HAL_TIM_MspPostInit+0x170>)
 8003610:	f005 f868 	bl	80086e4 <HAL_GPIO_Init>
}
 8003614:	e05a      	b.n	80036cc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a31      	ldr	r2, [pc, #196]	; (80036e0 <HAL_TIM_MspPostInit+0x178>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d131      	bne.n	8003684 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003620:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 8003622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003626:	4a2b      	ldr	r2, [pc, #172]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 8003628:	f043 0308 	orr.w	r3, r3, #8
 800362c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 8003632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800363e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003644:	2302      	movs	r3, #2
 8003646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364c:	2300      	movs	r3, #0
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003650:	2302      	movs	r3, #2
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003654:	f107 031c 	add.w	r3, r7, #28
 8003658:	4619      	mov	r1, r3
 800365a:	4822      	ldr	r0, [pc, #136]	; (80036e4 <HAL_TIM_MspPostInit+0x17c>)
 800365c:	f005 f842 	bl	80086e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003666:	2302      	movs	r3, #2
 8003668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800366a:	2302      	movs	r3, #2
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	2300      	movs	r3, #0
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003672:	2302      	movs	r3, #2
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003676:	f107 031c 	add.w	r3, r7, #28
 800367a:	4619      	mov	r1, r3
 800367c:	4819      	ldr	r0, [pc, #100]	; (80036e4 <HAL_TIM_MspPostInit+0x17c>)
 800367e:	f005 f831 	bl	80086e4 <HAL_GPIO_Init>
}
 8003682:	e023      	b.n	80036cc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <HAL_TIM_MspPostInit+0x180>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d11e      	bne.n	80036cc <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 8003690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003694:	4a0f      	ldr	r2, [pc, #60]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <HAL_TIM_MspPostInit+0x16c>)
 80036a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80036ac:	2308      	movs	r3, #8
 80036ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036b4:	2302      	movs	r3, #2
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	2300      	movs	r3, #0
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036bc:	2302      	movs	r3, #2
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c0:	f107 031c 	add.w	r3, r7, #28
 80036c4:	4619      	mov	r1, r3
 80036c6:	4809      	ldr	r0, [pc, #36]	; (80036ec <HAL_TIM_MspPostInit+0x184>)
 80036c8:	f005 f80c 	bl	80086e4 <HAL_GPIO_Init>
}
 80036cc:	bf00      	nop
 80036ce:	3730      	adds	r7, #48	; 0x30
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	58024400 	.word	0x58024400
 80036d8:	58020400 	.word	0x58020400
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	58020c00 	.word	0x58020c00
 80036e8:	40000c00 	.word	0x40000c00
 80036ec:	58020000 	.word	0x58020000

080036f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b0ba      	sub	sp, #232	; 0xe8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003708:	f107 0318 	add.w	r3, r7, #24
 800370c:	22b8      	movs	r2, #184	; 0xb8
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f017 f99b 	bl	801aa4c <memset>
  if(huart->Instance==UART4)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4d      	ldr	r2, [pc, #308]	; (8003850 <HAL_UART_MspInit+0x160>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d147      	bne.n	80037b0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003720:	f04f 0202 	mov.w	r2, #2
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800372c:	2300      	movs	r3, #0
 800372e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003732:	f107 0318 	add.w	r3, r7, #24
 8003736:	4618      	mov	r0, r3
 8003738:	f007 fdc2 	bl	800b2c0 <HAL_RCCEx_PeriphCLKConfig>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003742:	f7ff f9db 	bl	8002afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003746:	4b43      	ldr	r3, [pc, #268]	; (8003854 <HAL_UART_MspInit+0x164>)
 8003748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800374c:	4a41      	ldr	r2, [pc, #260]	; (8003854 <HAL_UART_MspInit+0x164>)
 800374e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003752:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003756:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <HAL_UART_MspInit+0x164>)
 8003758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800375c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003764:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_UART_MspInit+0x164>)
 8003766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800376a:	4a3a      	ldr	r2, [pc, #232]	; (8003854 <HAL_UART_MspInit+0x164>)
 800376c:	f043 0302 	orr.w	r3, r3, #2
 8003770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003774:	4b37      	ldr	r3, [pc, #220]	; (8003854 <HAL_UART_MspInit+0x164>)
 8003776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003782:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378a:	2302      	movs	r3, #2
 800378c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003796:	2300      	movs	r3, #0
 8003798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800379c:	2308      	movs	r3, #8
 800379e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037a6:	4619      	mov	r1, r3
 80037a8:	482b      	ldr	r0, [pc, #172]	; (8003858 <HAL_UART_MspInit+0x168>)
 80037aa:	f004 ff9b 	bl	80086e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80037ae:	e04a      	b.n	8003846 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a29      	ldr	r2, [pc, #164]	; (800385c <HAL_UART_MspInit+0x16c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d145      	bne.n	8003846 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80037ba:	f04f 0201 	mov.w	r2, #1
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037cc:	f107 0318 	add.w	r3, r7, #24
 80037d0:	4618      	mov	r0, r3
 80037d2:	f007 fd75 	bl	800b2c0 <HAL_RCCEx_PeriphCLKConfig>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80037dc:	f7ff f98e 	bl	8002afc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <HAL_UART_MspInit+0x164>)
 80037e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037e6:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_UART_MspInit+0x164>)
 80037e8:	f043 0320 	orr.w	r3, r3, #32
 80037ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80037f0:	4b18      	ldr	r3, [pc, #96]	; (8003854 <HAL_UART_MspInit+0x164>)
 80037f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <HAL_UART_MspInit+0x164>)
 8003800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <HAL_UART_MspInit+0x164>)
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_UART_MspInit+0x164>)
 8003810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800381c:	23c0      	movs	r3, #192	; 0xc0
 800381e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382e:	2300      	movs	r3, #0
 8003830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003834:	2307      	movs	r3, #7
 8003836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800383a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800383e:	4619      	mov	r1, r3
 8003840:	4807      	ldr	r0, [pc, #28]	; (8003860 <HAL_UART_MspInit+0x170>)
 8003842:	f004 ff4f 	bl	80086e4 <HAL_GPIO_Init>
}
 8003846:	bf00      	nop
 8003848:	37e8      	adds	r7, #232	; 0xe8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40004c00 	.word	0x40004c00
 8003854:	58024400 	.word	0x58024400
 8003858:	58020400 	.word	0x58020400
 800385c:	40011400 	.word	0x40011400
 8003860:	58020800 	.word	0x58020800

08003864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <NMI_Handler+0x4>

0800386a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800386e:	e7fe      	b.n	800386e <HardFault_Handler+0x4>

08003870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <MemManage_Handler+0x4>

08003876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800387a:	e7fe      	b.n	800387a <BusFault_Handler+0x4>

0800387c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003880:	e7fe      	b.n	8003880 <UsageFault_Handler+0x4>

08003882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038b0:	f000 f9ba 	bl	8003c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038b4:	bf00      	nop
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80038bc:	4802      	ldr	r0, [pc, #8]	; (80038c8 <DMA1_Stream0_IRQHandler+0x10>)
 80038be:	f003 f89b 	bl	80069f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	240012fc 	.word	0x240012fc

080038cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80038d0:	4802      	ldr	r0, [pc, #8]	; (80038dc <DMA1_Stream1_IRQHandler+0x10>)
 80038d2:	f003 f891 	bl	80069f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	24001194 	.word	0x24001194

080038e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80038e4:	4802      	ldr	r0, [pc, #8]	; (80038f0 <DMA1_Stream2_IRQHandler+0x10>)
 80038e6:	f003 f887 	bl	80069f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	24001374 	.word	0x24001374

080038f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80038f8:	4802      	ldr	r0, [pc, #8]	; (8003904 <DMA1_Stream3_IRQHandler+0x10>)
 80038fa:	f003 f87d 	bl	80069f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	2400120c 	.word	0x2400120c

08003908 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <DMA1_Stream4_IRQHandler+0x10>)
 800390e:	f003 f873 	bl	80069f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	24001284 	.word	0x24001284

0800391c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003920:	4802      	ldr	r0, [pc, #8]	; (800392c <DMA1_Stream5_IRQHandler+0x10>)
 8003922:	f003 f869 	bl	80069f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	24000bd4 	.word	0x24000bd4

08003930 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003934:	4802      	ldr	r0, [pc, #8]	; (8003940 <TIM4_IRQHandler+0x10>)
 8003936:	f00c fea5 	bl	8010684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	24001064 	.word	0x24001064

08003944 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <I2C2_EV_IRQHandler+0x10>)
 800394a:	f005 f935 	bl	8008bb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	24000d64 	.word	0x24000d64

08003958 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <DMA2_Stream7_IRQHandler+0x10>)
 800395e:	f003 f84b 	bl	80069f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	24000c4c 	.word	0x24000c4c

0800396c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <OTG_HS_IRQHandler+0x10>)
 8003972:	f005 fb2b 	bl	8008fcc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	24002c40 	.word	0x24002c40

08003980 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <SDMMC2_IRQHandler+0x10>)
 8003986:	f00a faf1 	bl	800df6c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	24000db8 	.word	0x24000db8

08003994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800399c:	4a14      	ldr	r2, [pc, #80]	; (80039f0 <_sbrk+0x5c>)
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <_sbrk+0x60>)
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <_sbrk+0x64>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <_sbrk+0x64>)
 80039b2:	4a12      	ldr	r2, [pc, #72]	; (80039fc <_sbrk+0x68>)
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <_sbrk+0x64>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d207      	bcs.n	80039d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039c4:	f017 f84a 	bl	801aa5c <__errno>
 80039c8:	4603      	mov	r3, r0
 80039ca:	220c      	movs	r2, #12
 80039cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
 80039d2:	e009      	b.n	80039e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <_sbrk+0x64>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <_sbrk+0x64>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <_sbrk+0x64>)
 80039e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039e6:	68fb      	ldr	r3, [r7, #12]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	24050000 	.word	0x24050000
 80039f4:	00000800 	.word	0x00000800
 80039f8:	24001514 	.word	0x24001514
 80039fc:	240034b8 	.word	0x240034b8

08003a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a04:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <SystemInit+0xd0>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <SystemInit+0xd0>)
 8003a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003a14:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <SystemInit+0xd4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	2b06      	cmp	r3, #6
 8003a1e:	d807      	bhi.n	8003a30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003a20:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <SystemInit+0xd4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f023 030f 	bic.w	r3, r3, #15
 8003a28:	4a2a      	ldr	r2, [pc, #168]	; (8003ad4 <SystemInit+0xd4>)
 8003a2a:	f043 0307 	orr.w	r3, r3, #7
 8003a2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003a30:	4b29      	ldr	r3, [pc, #164]	; (8003ad8 <SystemInit+0xd8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a28      	ldr	r2, [pc, #160]	; (8003ad8 <SystemInit+0xd8>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a3c:	4b26      	ldr	r3, [pc, #152]	; (8003ad8 <SystemInit+0xd8>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003a42:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <SystemInit+0xd8>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4924      	ldr	r1, [pc, #144]	; (8003ad8 <SystemInit+0xd8>)
 8003a48:	4b24      	ldr	r3, [pc, #144]	; (8003adc <SystemInit+0xdc>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003a4e:	4b21      	ldr	r3, [pc, #132]	; (8003ad4 <SystemInit+0xd4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <SystemInit+0xd4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 030f 	bic.w	r3, r3, #15
 8003a62:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <SystemInit+0xd4>)
 8003a64:	f043 0307 	orr.w	r3, r3, #7
 8003a68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <SystemInit+0xd8>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <SystemInit+0xd8>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003a76:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <SystemInit+0xd8>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003a7c:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <SystemInit+0xd8>)
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <SystemInit+0xe0>)
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <SystemInit+0xd8>)
 8003a84:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <SystemInit+0xe4>)
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003a88:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <SystemInit+0xd8>)
 8003a8a:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <SystemInit+0xe8>)
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <SystemInit+0xd8>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003a94:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <SystemInit+0xd8>)
 8003a96:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <SystemInit+0xe8>)
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <SystemInit+0xd8>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <SystemInit+0xd8>)
 8003aa2:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <SystemInit+0xe8>)
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <SystemInit+0xd8>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <SystemInit+0xd8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <SystemInit+0xd8>)
 8003ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <SystemInit+0xd8>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <SystemInit+0xec>)
 8003ac0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003ac4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003ac6:	bf00      	nop
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000ed00 	.word	0xe000ed00
 8003ad4:	52002000 	.word	0x52002000
 8003ad8:	58024400 	.word	0x58024400
 8003adc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ae0:	02020200 	.word	0x02020200
 8003ae4:	01ff0000 	.word	0x01ff0000
 8003ae8:	01010280 	.word	0x01010280
 8003aec:	52004000 	.word	0x52004000

08003af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003af4:	f7ff ff84 	bl	8003a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003af8:	480c      	ldr	r0, [pc, #48]	; (8003b2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003afa:	490d      	ldr	r1, [pc, #52]	; (8003b30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003afc:	4a0d      	ldr	r2, [pc, #52]	; (8003b34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b00:	e002      	b.n	8003b08 <LoopCopyDataInit>

08003b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b06:	3304      	adds	r3, #4

08003b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b0c:	d3f9      	bcc.n	8003b02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b10:	4c0a      	ldr	r4, [pc, #40]	; (8003b3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b14:	e001      	b.n	8003b1a <LoopFillZerobss>

08003b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b18:	3204      	adds	r2, #4

08003b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b1c:	d3fb      	bcc.n	8003b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b1e:	f016 ffa3 	bl	801aa68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b22:	f7fd fb2b 	bl	800117c <main>
  bx  lr
 8003b26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b28:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003b2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003b30:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 8003b34:	0801c570 	.word	0x0801c570
  ldr r2, =_sbss
 8003b38:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 8003b3c:	240034b4 	.word	0x240034b4

08003b40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b40:	e7fe      	b.n	8003b40 <ADC3_IRQHandler>
	...

08003b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b4a:	2003      	movs	r0, #3
 8003b4c:	f002 f952 	bl	8005df4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b50:	f007 f9e0 	bl	800af14 <HAL_RCC_GetSysClockFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <HAL_Init+0x68>)
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	4913      	ldr	r1, [pc, #76]	; (8003bb0 <HAL_Init+0x6c>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <HAL_Init+0x68>)
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	4a0e      	ldr	r2, [pc, #56]	; (8003bb0 <HAL_Init+0x6c>)
 8003b78:	5cd3      	ldrb	r3, [r2, r3]
 8003b7a:	f003 031f 	and.w	r3, r3, #31
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
 8003b84:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <HAL_Init+0x70>)
 8003b86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b88:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <HAL_Init+0x74>)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b8e:	200f      	movs	r0, #15
 8003b90:	f000 f814 	bl	8003bbc <HAL_InitTick>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e002      	b.n	8003ba4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b9e:	f7fe ffb3 	bl	8002b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	58024400 	.word	0x58024400
 8003bb0:	0801bf7c 	.word	0x0801bf7c
 8003bb4:	24000004 	.word	0x24000004
 8003bb8:	24000000 	.word	0x24000000

08003bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003bc4:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <HAL_InitTick+0x60>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e021      	b.n	8003c14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <HAL_InitTick+0x64>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_InitTick+0x60>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	4618      	mov	r0, r3
 8003be8:	f002 f937 	bl	8005e5a <HAL_SYSTICK_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e00e      	b.n	8003c14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0f      	cmp	r3, #15
 8003bfa:	d80a      	bhi.n	8003c12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	f002 f901 	bl	8005e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c08:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <HAL_InitTick+0x68>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e000      	b.n	8003c14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	2400000c 	.word	0x2400000c
 8003c20:	24000000 	.word	0x24000000
 8003c24:	24000008 	.word	0x24000008

08003c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_IncTick+0x20>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_IncTick+0x24>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4413      	add	r3, r2
 8003c38:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <HAL_IncTick+0x24>)
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	2400000c 	.word	0x2400000c
 8003c4c:	24001518 	.word	0x24001518

08003c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return uwTick;
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <HAL_GetTick+0x14>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	24001518 	.word	0x24001518

08003c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c70:	f7ff ffee 	bl	8003c50 <HAL_GetTick>
 8003c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c80:	d005      	beq.n	8003c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c82:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_Delay+0x44>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c8e:	bf00      	nop
 8003c90:	f7ff ffde 	bl	8003c50 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d8f7      	bhi.n	8003c90 <HAL_Delay+0x28>
  {
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	2400000c 	.word	0x2400000c

08003cb0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	4904      	ldr	r1, [pc, #16]	; (8003cd8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	58000400 	.word	0x58000400

08003cdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	609a      	str	r2, [r3, #8]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3360      	adds	r3, #96	; 0x60
 8003d56:	461a      	mov	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a10      	ldr	r2, [pc, #64]	; (8003da4 <LL_ADC_SetOffset+0x60>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10b      	bne.n	8003d80 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003d7e:	e00b      	b.n	8003d98 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	431a      	orrs	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	601a      	str	r2, [r3, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	58026000 	.word	0x58026000

08003da8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3360      	adds	r3, #96	; 0x60
 8003db6:	461a      	mov	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	fa01 f303 	lsl.w	r3, r1, r3
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	611a      	str	r2, [r3, #16]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00e      	beq.n	8003e3a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3360      	adds	r3, #96	; 0x60
 8003e20:	461a      	mov	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	601a      	str	r2, [r3, #0]
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	58026000 	.word	0x58026000

08003e4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <LL_ADC_SetOffsetSaturation+0x40>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10e      	bne.n	8003e7e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3360      	adds	r3, #96	; 0x60
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	58026000 	.word	0x58026000

08003e90 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <LL_ADC_SetOffsetSign+0x40>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10e      	bne.n	8003ec2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3360      	adds	r3, #96	; 0x60
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	58026000 	.word	0x58026000

08003ed4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3360      	adds	r3, #96	; 0x60
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a0c      	ldr	r2, [pc, #48]	; (8003f24 <LL_ADC_SetOffsetState+0x50>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d108      	bne.n	8003f08 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003f06:	e007      	b.n	8003f18 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	601a      	str	r2, [r3, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	58026000 	.word	0x58026000

08003f28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b087      	sub	sp, #28
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3330      	adds	r3, #48	; 0x30
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	0a1b      	lsrs	r3, r3, #8
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	4413      	add	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	211f      	movs	r1, #31
 8003f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	401a      	ands	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0e9b      	lsrs	r3, r3, #26
 8003f86:	f003 011f 	and.w	r1, r3, #31
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	fa01 f303 	lsl.w	r3, r1, r3
 8003f94:	431a      	orrs	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b087      	sub	sp, #28
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	0e5b      	lsrs	r3, r3, #25
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	4413      	add	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	0d1b      	lsrs	r3, r3, #20
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	2107      	movs	r1, #7
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	401a      	ands	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	0d1b      	lsrs	r3, r3, #20
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	431a      	orrs	r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <LL_ADC_SetChannelSingleDiff+0x78>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d115      	bne.n	800403c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800401c:	43db      	mvns	r3, r3
 800401e:	401a      	ands	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f003 0318 	and.w	r3, r3, #24
 8004026:	4914      	ldr	r1, [pc, #80]	; (8004078 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004028:	40d9      	lsrs	r1, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	400b      	ands	r3, r1
 800402e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004032:	431a      	orrs	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800403a:	e014      	b.n	8004066 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004048:	43db      	mvns	r3, r3
 800404a:	401a      	ands	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f003 0318 	and.w	r3, r3, #24
 8004052:	4909      	ldr	r1, [pc, #36]	; (8004078 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004054:	40d9      	lsrs	r1, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	400b      	ands	r3, r1
 800405a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800405e:	431a      	orrs	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	58026000 	.word	0x58026000
 8004078:	000fffff 	.word	0x000fffff

0800407c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 031f 	and.w	r3, r3, #31
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6093      	str	r3, [r2, #8]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	5fffffc0 	.word	0x5fffffc0

080040d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ec:	d101      	bne.n	80040f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <LL_ADC_EnableInternalRegulator+0x24>)
 800410e:	4013      	ands	r3, r2
 8004110:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	6fffffc0 	.word	0x6fffffc0

08004128 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800413c:	d101      	bne.n	8004142 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <LL_ADC_Enable+0x24>)
 800415e:	4013      	ands	r3, r2
 8004160:	f043 0201 	orr.w	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	7fffffc0 	.word	0x7fffffc0

08004178 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <LL_ADC_Disable+0x24>)
 8004186:	4013      	ands	r3, r2
 8004188:	f043 0202 	orr.w	r2, r3, #2
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	7fffffc0 	.word	0x7fffffc0

080041a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <LL_ADC_IsEnabled+0x18>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <LL_ADC_IsEnabled+0x1a>
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d101      	bne.n	80041de <LL_ADC_IsDisableOngoing+0x18>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <LL_ADC_IsDisableOngoing+0x1a>
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <LL_ADC_REG_StartConversion+0x24>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	f043 0204 	orr.w	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	7fffffc0 	.word	0x7fffffc0

08004214 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <LL_ADC_REG_StopConversion+0x24>)
 8004222:	4013      	ands	r3, r2
 8004224:	f043 0210 	orr.w	r2, r3, #16
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	7fffffc0 	.word	0x7fffffc0

0800423c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d101      	bne.n	8004254 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	4b05      	ldr	r3, [pc, #20]	; (8004288 <LL_ADC_INJ_StopConversion+0x24>)
 8004272:	4013      	ands	r3, r2
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	7fffffc0 	.word	0x7fffffc0

0800428c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b08      	cmp	r3, #8
 800429e:	d101      	bne.n	80042a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b089      	sub	sp, #36	; 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e1ee      	b.n	80046ac <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fe fc2d 	bl	8002b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff feef 	bl	80040d8 <LL_ADC_IsDeepPowerDownEnabled>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fed5 	bl	80040b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff ff0a 	bl	8004128 <LL_ADC_IsInternalRegulatorEnabled>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d114      	bne.n	8004344 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff feee 	bl	8004100 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004324:	4b8e      	ldr	r3, [pc, #568]	; (8004560 <HAL_ADC_Init+0x2ac>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	4a8e      	ldr	r2, [pc, #568]	; (8004564 <HAL_ADC_Init+0x2b0>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	099b      	lsrs	r3, r3, #6
 8004332:	3301      	adds	r3, #1
 8004334:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004336:	e002      	b.n	800433e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	3b01      	subs	r3, #1
 800433c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f9      	bne.n	8004338 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff feed 	bl	8004128 <LL_ADC_IsInternalRegulatorEnabled>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004358:	f043 0210 	orr.w	r2, r3, #16
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004364:	f043 0201 	orr.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ff61 	bl	800423c <LL_ADC_REG_IsConversionOngoing>
 800437a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	f040 8188 	bne.w	800469a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 8184 	bne.w	800469a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004396:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800439a:	f043 0202 	orr.w	r2, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fefa 	bl	80041a0 <LL_ADC_IsEnabled>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d136      	bne.n	8004420 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6c      	ldr	r2, [pc, #432]	; (8004568 <HAL_ADC_Init+0x2b4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_ADC_Init+0x112>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6a      	ldr	r2, [pc, #424]	; (800456c <HAL_ADC_Init+0x2b8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10e      	bne.n	80043e4 <HAL_ADC_Init+0x130>
 80043c6:	4868      	ldr	r0, [pc, #416]	; (8004568 <HAL_ADC_Init+0x2b4>)
 80043c8:	f7ff feea 	bl	80041a0 <LL_ADC_IsEnabled>
 80043cc:	4604      	mov	r4, r0
 80043ce:	4867      	ldr	r0, [pc, #412]	; (800456c <HAL_ADC_Init+0x2b8>)
 80043d0:	f7ff fee6 	bl	80041a0 <LL_ADC_IsEnabled>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4323      	orrs	r3, r4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e008      	b.n	80043f6 <HAL_ADC_Init+0x142>
 80043e4:	4862      	ldr	r0, [pc, #392]	; (8004570 <HAL_ADC_Init+0x2bc>)
 80043e6:	f7ff fedb 	bl	80041a0 <LL_ADC_IsEnabled>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d012      	beq.n	8004420 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a5a      	ldr	r2, [pc, #360]	; (8004568 <HAL_ADC_Init+0x2b4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_ADC_Init+0x15a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a58      	ldr	r2, [pc, #352]	; (800456c <HAL_ADC_Init+0x2b8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d101      	bne.n	8004412 <HAL_ADC_Init+0x15e>
 800440e:	4a59      	ldr	r2, [pc, #356]	; (8004574 <HAL_ADC_Init+0x2c0>)
 8004410:	e000      	b.n	8004414 <HAL_ADC_Init+0x160>
 8004412:	4a59      	ldr	r2, [pc, #356]	; (8004578 <HAL_ADC_Init+0x2c4>)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f7ff fc5e 	bl	8003cdc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a52      	ldr	r2, [pc, #328]	; (8004570 <HAL_ADC_Init+0x2bc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d129      	bne.n	800447e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	7e5b      	ldrb	r3, [r3, #25]
 800442e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004434:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800443a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d013      	beq.n	800446c <HAL_ADC_Init+0x1b8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b0c      	cmp	r3, #12
 800444a:	d00d      	beq.n	8004468 <HAL_ADC_Init+0x1b4>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b1c      	cmp	r3, #28
 8004452:	d007      	beq.n	8004464 <HAL_ADC_Init+0x1b0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b18      	cmp	r3, #24
 800445a:	d101      	bne.n	8004460 <HAL_ADC_Init+0x1ac>
 800445c:	2318      	movs	r3, #24
 800445e:	e006      	b.n	800446e <HAL_ADC_Init+0x1ba>
 8004460:	2300      	movs	r3, #0
 8004462:	e004      	b.n	800446e <HAL_ADC_Init+0x1ba>
 8004464:	2310      	movs	r3, #16
 8004466:	e002      	b.n	800446e <HAL_ADC_Init+0x1ba>
 8004468:	2308      	movs	r3, #8
 800446a:	e000      	b.n	800446e <HAL_ADC_Init+0x1ba>
 800446c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800446e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004476:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	e00e      	b.n	800449c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7e5b      	ldrb	r3, [r3, #25]
 8004482:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004488:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800448e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004496:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d106      	bne.n	80044b4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	3b01      	subs	r3, #1
 80044ac:	045b      	lsls	r3, r3, #17
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a26      	ldr	r2, [pc, #152]	; (8004570 <HAL_ADC_Init+0x2bc>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d115      	bne.n	8004506 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	4b26      	ldr	r3, [pc, #152]	; (800457c <HAL_ADC_Init+0x2c8>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	69b9      	ldr	r1, [r7, #24]
 80044ea:	430b      	orrs	r3, r1
 80044ec:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	611a      	str	r2, [r3, #16]
 8004504:	e009      	b.n	800451a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <HAL_ADC_Init+0x2cc>)
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	69b9      	ldr	r1, [r7, #24]
 8004516:	430b      	orrs	r3, r1
 8004518:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff fe8c 	bl	800423c <LL_ADC_REG_IsConversionOngoing>
 8004524:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff feae 	bl	800428c <LL_ADC_INJ_IsConversionOngoing>
 8004530:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f040 808e 	bne.w	8004656 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f040 808a 	bne.w	8004656 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <HAL_ADC_Init+0x2bc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d11b      	bne.n	8004584 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	7e1b      	ldrb	r3, [r3, #24]
 8004550:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004558:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e018      	b.n	8004592 <HAL_ADC_Init+0x2de>
 8004560:	24000000 	.word	0x24000000
 8004564:	053e2d63 	.word	0x053e2d63
 8004568:	40022000 	.word	0x40022000
 800456c:	40022100 	.word	0x40022100
 8004570:	58026000 	.word	0x58026000
 8004574:	40022300 	.word	0x40022300
 8004578:	58026300 	.word	0x58026300
 800457c:	fff04007 	.word	0xfff04007
 8004580:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	7e1b      	ldrb	r3, [r3, #24]
 8004588:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	4b46      	ldr	r3, [pc, #280]	; (80046b4 <HAL_ADC_Init+0x400>)
 800459a:	4013      	ands	r3, r2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	69b9      	ldr	r1, [r7, #24]
 80045a2:	430b      	orrs	r3, r1
 80045a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d137      	bne.n	8004620 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a3f      	ldr	r2, [pc, #252]	; (80046b8 <HAL_ADC_Init+0x404>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d116      	bne.n	80045ee <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	4b3d      	ldr	r3, [pc, #244]	; (80046bc <HAL_ADC_Init+0x408>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045d2:	4311      	orrs	r1, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045d8:	4311      	orrs	r1, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80045de:	430a      	orrs	r2, r1
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	611a      	str	r2, [r3, #16]
 80045ec:	e020      	b.n	8004630 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	4b32      	ldr	r3, [pc, #200]	; (80046c0 <HAL_ADC_Init+0x40c>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045fc:	3a01      	subs	r2, #1
 80045fe:	0411      	lsls	r1, r2, #16
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800460a:	4311      	orrs	r1, r2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004610:	430a      	orrs	r2, r1
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	611a      	str	r2, [r3, #16]
 800461e:	e007      	b.n	8004630 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <HAL_ADC_Init+0x404>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d002      	beq.n	8004656 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 f909 	bl	8005868 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d10c      	bne.n	8004678 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	f023 010f 	bic.w	r1, r3, #15
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	1e5a      	subs	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
 8004676:	e007      	b.n	8004688 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 020f 	bic.w	r2, r2, #15
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468c:	f023 0303 	bic.w	r3, r3, #3
 8004690:	f043 0201 	orr.w	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	661a      	str	r2, [r3, #96]	; 0x60
 8004698:	e007      	b.n	80046aa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469e:	f043 0210 	orr.w	r2, r3, #16
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3724      	adds	r7, #36	; 0x24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd90      	pop	{r4, r7, pc}
 80046b4:	ffffbffc 	.word	0xffffbffc
 80046b8:	58026000 	.word	0x58026000
 80046bc:	fc00f81f 	.word	0xfc00f81f
 80046c0:	fc00f81e 	.word	0xfc00f81e

080046c4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a5c      	ldr	r2, [pc, #368]	; (8004844 <HAL_ADC_Start+0x180>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d004      	beq.n	80046e0 <HAL_ADC_Start+0x1c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a5b      	ldr	r2, [pc, #364]	; (8004848 <HAL_ADC_Start+0x184>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d101      	bne.n	80046e4 <HAL_ADC_Start+0x20>
 80046e0:	4b5a      	ldr	r3, [pc, #360]	; (800484c <HAL_ADC_Start+0x188>)
 80046e2:	e000      	b.n	80046e6 <HAL_ADC_Start+0x22>
 80046e4:	4b5a      	ldr	r3, [pc, #360]	; (8004850 <HAL_ADC_Start+0x18c>)
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fcc8 	bl	800407c <LL_ADC_GetMultimode>
 80046ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fda2 	bl	800423c <LL_ADC_REG_IsConversionOngoing>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f040 809a 	bne.w	8004834 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_ADC_Start+0x4a>
 800470a:	2302      	movs	r3, #2
 800470c:	e095      	b.n	800483a <HAL_ADC_Start+0x176>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 ffbc 	bl	8005694 <ADC_Enable>
 800471c:	4603      	mov	r3, r0
 800471e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 8081 	bne.w	800482a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800472c:	4b49      	ldr	r3, [pc, #292]	; (8004854 <HAL_ADC_Start+0x190>)
 800472e:	4013      	ands	r3, r2
 8004730:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a42      	ldr	r2, [pc, #264]	; (8004848 <HAL_ADC_Start+0x184>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d002      	beq.n	8004748 <HAL_ADC_Start+0x84>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	e000      	b.n	800474a <HAL_ADC_Start+0x86>
 8004748:	4b3e      	ldr	r3, [pc, #248]	; (8004844 <HAL_ADC_Start+0x180>)
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	4293      	cmp	r3, r2
 8004750:	d002      	beq.n	8004758 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d105      	bne.n	8004764 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800476c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004770:	d106      	bne.n	8004780 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004776:	f023 0206 	bic.w	r2, r3, #6
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	665a      	str	r2, [r3, #100]	; 0x64
 800477e:	e002      	b.n	8004786 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	221c      	movs	r2, #28
 800478c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a2b      	ldr	r2, [pc, #172]	; (8004848 <HAL_ADC_Start+0x184>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d002      	beq.n	80047a6 <HAL_ADC_Start+0xe2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	e000      	b.n	80047a8 <HAL_ADC_Start+0xe4>
 80047a6:	4b27      	ldr	r3, [pc, #156]	; (8004844 <HAL_ADC_Start+0x180>)
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d008      	beq.n	80047c2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b05      	cmp	r3, #5
 80047ba:	d002      	beq.n	80047c2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b09      	cmp	r3, #9
 80047c0:	d114      	bne.n	80047ec <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff fd01 	bl	80041ec <LL_ADC_REG_StartConversion>
 80047ea:	e025      	b.n	8004838 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a12      	ldr	r2, [pc, #72]	; (8004848 <HAL_ADC_Start+0x184>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d002      	beq.n	8004808 <HAL_ADC_Start+0x144>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	e000      	b.n	800480a <HAL_ADC_Start+0x146>
 8004808:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <HAL_ADC_Start+0x180>)
 800480a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00f      	beq.n	8004838 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004820:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	661a      	str	r2, [r3, #96]	; 0x60
 8004828:	e006      	b.n	8004838 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004832:	e001      	b.n	8004838 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004834:	2302      	movs	r3, #2
 8004836:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004838:	7dfb      	ldrb	r3, [r7, #23]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40022000 	.word	0x40022000
 8004848:	40022100 	.word	0x40022100
 800484c:	40022300 	.word	0x40022300
 8004850:	58026300 	.word	0x58026300
 8004854:	fffff0fe 	.word	0xfffff0fe

08004858 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_ADC_Stop+0x16>
 800486a:	2302      	movs	r3, #2
 800486c:	e021      	b.n	80048b2 <HAL_ADC_Stop+0x5a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004876:	2103      	movs	r1, #3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fe4f 	bl	800551c <ADC_ConversionStop>
 800487e:	4603      	mov	r3, r0
 8004880:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10f      	bne.n	80048a8 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 ff8d 	bl	80057a8 <ADC_Disable>
 800488e:	4603      	mov	r3, r0
 8004890:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800489c:	4b07      	ldr	r3, [pc, #28]	; (80048bc <HAL_ADC_Stop+0x64>)
 800489e:	4013      	ands	r3, r2
 80048a0:	f043 0201 	orr.w	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	ffffeefe 	.word	0xffffeefe

080048c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a72      	ldr	r2, [pc, #456]	; (8004a98 <HAL_ADC_PollForConversion+0x1d8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_ADC_PollForConversion+0x1e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a70      	ldr	r2, [pc, #448]	; (8004a9c <HAL_ADC_PollForConversion+0x1dc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <HAL_ADC_PollForConversion+0x22>
 80048de:	4b70      	ldr	r3, [pc, #448]	; (8004aa0 <HAL_ADC_PollForConversion+0x1e0>)
 80048e0:	e000      	b.n	80048e4 <HAL_ADC_PollForConversion+0x24>
 80048e2:	4b70      	ldr	r3, [pc, #448]	; (8004aa4 <HAL_ADC_PollForConversion+0x1e4>)
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fbc9 	bl	800407c <LL_ADC_GetMultimode>
 80048ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d102      	bne.n	80048fa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80048f4:	2308      	movs	r3, #8
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e037      	b.n	800496a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b05      	cmp	r3, #5
 8004904:	d002      	beq.n	800490c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b09      	cmp	r3, #9
 800490a:	d111      	bne.n	8004930 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e0b1      	b.n	8004a8e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800492a:	2304      	movs	r3, #4
 800492c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800492e:	e01c      	b.n	800496a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a58      	ldr	r2, [pc, #352]	; (8004a98 <HAL_ADC_PollForConversion+0x1d8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_ADC_PollForConversion+0x84>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a57      	ldr	r2, [pc, #348]	; (8004a9c <HAL_ADC_PollForConversion+0x1dc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d101      	bne.n	8004948 <HAL_ADC_PollForConversion+0x88>
 8004944:	4b56      	ldr	r3, [pc, #344]	; (8004aa0 <HAL_ADC_PollForConversion+0x1e0>)
 8004946:	e000      	b.n	800494a <HAL_ADC_PollForConversion+0x8a>
 8004948:	4b56      	ldr	r3, [pc, #344]	; (8004aa4 <HAL_ADC_PollForConversion+0x1e4>)
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fba4 	bl	8004098 <LL_ADC_GetMultiDMATransfer>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495a:	f043 0220 	orr.w	r2, r3, #32
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e093      	b.n	8004a8e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004966:	2304      	movs	r3, #4
 8004968:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800496a:	f7ff f971 	bl	8003c50 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004970:	e021      	b.n	80049b6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d01d      	beq.n	80049b6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800497a:	f7ff f969 	bl	8003c50 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d302      	bcc.n	8004990 <HAL_ADC_PollForConversion+0xd0>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d112      	bne.n	80049b6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a2:	f043 0204 	orr.w	r2, r3, #4
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e06b      	b.n	8004a8e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	4013      	ands	r3, r2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0d6      	beq.n	8004972 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff faa7 	bl	8003f28 <LL_ADC_REG_IsTriggerSourceSWStart>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01c      	beq.n	8004a1a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	7e5b      	ldrb	r3, [r3, #25]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d118      	bne.n	8004a1a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d111      	bne.n	8004a1a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d105      	bne.n	8004a1a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a12:	f043 0201 	orr.w	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <HAL_ADC_PollForConversion+0x1dc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d002      	beq.n	8004a2a <HAL_ADC_PollForConversion+0x16a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	e000      	b.n	8004a2c <HAL_ADC_PollForConversion+0x16c>
 8004a2a:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <HAL_ADC_PollForConversion+0x1d8>)
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d008      	beq.n	8004a46 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b05      	cmp	r3, #5
 8004a3e:	d002      	beq.n	8004a46 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b09      	cmp	r3, #9
 8004a44:	d104      	bne.n	8004a50 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	e00c      	b.n	8004a6a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a11      	ldr	r2, [pc, #68]	; (8004a9c <HAL_ADC_PollForConversion+0x1dc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d002      	beq.n	8004a60 <HAL_ADC_PollForConversion+0x1a0>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	e000      	b.n	8004a62 <HAL_ADC_PollForConversion+0x1a2>
 8004a60:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <HAL_ADC_PollForConversion+0x1d8>)
 8004a62:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d104      	bne.n	8004a7a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2208      	movs	r2, #8
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e008      	b.n	8004a8c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d103      	bne.n	8004a8c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	220c      	movs	r2, #12
 8004a8a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40022000 	.word	0x40022000
 8004a9c:	40022100 	.word	0x40022100
 8004aa0:	40022300 	.word	0x40022300
 8004aa4:	58026300 	.word	0x58026300

08004aa8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b0b9      	sub	sp, #228	; 0xe4
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ade:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4aa9      	ldr	r2, [pc, #676]	; (8004d8c <HAL_ADC_ConfigChannel+0x2c8>)
 8004ae6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d102      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x34>
 8004af2:	2302      	movs	r3, #2
 8004af4:	f000 bcfa 	b.w	80054ec <HAL_ADC_ConfigChannel+0xa28>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fb99 	bl	800423c <LL_ADC_REG_IsConversionOngoing>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 84de 	bne.w	80054ce <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a9e      	ldr	r2, [pc, #632]	; (8004d90 <HAL_ADC_ConfigChannel+0x2cc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d033      	beq.n	8004b84 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d108      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x76>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	0e9b      	lsrs	r3, r3, #26
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	2201      	movs	r2, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	e01d      	b.n	8004b76 <HAL_ADC_ConfigChannel+0xb2>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b46:	fa93 f3a3 	rbit	r3, r3
 8004b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004b5e:	2320      	movs	r3, #32
 8004b60:	e004      	b.n	8004b6c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004b62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b66:	fab3 f383 	clz	r3, r3
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2201      	movs	r2, #1
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	69d1      	ldr	r1, [r2, #28]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	430b      	orrs	r3, r1
 8004b82:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	f7ff f9dc 	bl	8003f4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff fb4e 	bl	800423c <LL_ADC_REG_IsConversionOngoing>
 8004ba0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fb6f 	bl	800428c <LL_ADC_INJ_IsConversionOngoing>
 8004bae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f040 8270 	bne.w	800509c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 826b 	bne.w	800509c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6819      	ldr	r1, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f7ff f9e7 	bl	8003fa6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a6c      	ldr	r2, [pc, #432]	; (8004d90 <HAL_ADC_ConfigChannel+0x2cc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10d      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	08db      	lsrs	r3, r3, #3
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bfc:	e032      	b.n	8004c64 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bfe:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <HAL_ADC_ConfigChannel+0x2d0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c0a:	d10b      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x160>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	695a      	ldr	r2, [r3, #20]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	e01d      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x19c>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x186>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	089b      	lsrs	r3, r3, #2
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	e00a      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x19c>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	089b      	lsrs	r3, r3, #2
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d048      	beq.n	8004cfe <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6818      	ldr	r0, [r3, #0]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	6919      	ldr	r1, [r3, #16]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c7c:	f7ff f862 	bl	8003d44 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a42      	ldr	r2, [pc, #264]	; (8004d90 <HAL_ADC_ConfigChannel+0x2cc>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d119      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6919      	ldr	r1, [r3, #16]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f7ff f8fa 	bl	8003e90 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	6919      	ldr	r1, [r3, #16]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d102      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x1f0>
 8004cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb2:	e000      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0x1f2>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f7ff f8c8 	bl	8003e4c <LL_ADC_SetOffsetSaturation>
 8004cbc:	e1ee      	b.n	800509c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6919      	ldr	r1, [r3, #16]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d102      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x212>
 8004cd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cd4:	e000      	b.n	8004cd8 <HAL_ADC_ConfigChannel+0x214>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f7ff f895 	bl	8003e08 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6919      	ldr	r1, [r3, #16]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	7e1b      	ldrb	r3, [r3, #24]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d102      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0x230>
 8004cee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cf2:	e000      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x232>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f7ff f86c 	bl	8003dd4 <LL_ADC_SetDataRightShift>
 8004cfc:	e1ce      	b.n	800509c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a23      	ldr	r2, [pc, #140]	; (8004d90 <HAL_ADC_ConfigChannel+0x2cc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	f040 8181 	bne.w	800500c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff f849 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x272>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff f83e 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	0e9b      	lsrs	r3, r3, #26
 8004d30:	f003 021f 	and.w	r2, r3, #31
 8004d34:	e01e      	b.n	8004d74 <HAL_ADC_ConfigChannel+0x2b0>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff f833 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d4c:	fa93 f3a3 	rbit	r3, r3
 8004d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004d54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004d5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004d64:	2320      	movs	r3, #32
 8004d66:	e004      	b.n	8004d72 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004d68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d6c:	fab3 f383 	clz	r3, r3
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10b      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x2d4>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	0e9b      	lsrs	r3, r3, #26
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	e01e      	b.n	8004dca <HAL_ADC_ConfigChannel+0x306>
 8004d8c:	47ff0000 	.word	0x47ff0000
 8004d90:	58026000 	.word	0x58026000
 8004d94:	5c001000 	.word	0x5c001000
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004da4:	fa93 f3a3 	rbit	r3, r3
 8004da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004db4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	e004      	b.n	8004dca <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004dc4:	fab3 f383 	clz	r3, r3
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d106      	bne.n	8004ddc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff f87c 	bl	8003ed4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2101      	movs	r1, #1
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe ffe0 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <HAL_ADC_ConfigChannel+0x344>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fe ffd5 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	0e9b      	lsrs	r3, r3, #26
 8004e02:	f003 021f 	and.w	r2, r3, #31
 8004e06:	e01e      	b.n	8004e46 <HAL_ADC_ConfigChannel+0x382>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe ffca 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e1e:	fa93 f3a3 	rbit	r3, r3
 8004e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004e26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004e36:	2320      	movs	r3, #32
 8004e38:	e004      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004e3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e3e:	fab3 f383 	clz	r3, r3
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d105      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x39a>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	0e9b      	lsrs	r3, r3, #26
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	e018      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x3cc>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e6a:	fa93 f3a3 	rbit	r3, r3
 8004e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004e82:	2320      	movs	r3, #32
 8004e84:	e004      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e8a:	fab3 f383 	clz	r3, r3
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d106      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff f819 	bl	8003ed4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe ff7d 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <HAL_ADC_ConfigChannel+0x40a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe ff72 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	0e9b      	lsrs	r3, r3, #26
 8004ec8:	f003 021f 	and.w	r2, r3, #31
 8004ecc:	e01e      	b.n	8004f0c <HAL_ADC_ConfigChannel+0x448>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2102      	movs	r1, #2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fe ff67 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004eda:	4603      	mov	r3, r0
 8004edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ee4:	fa93 f3a3 	rbit	r3, r3
 8004ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ef0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004efc:	2320      	movs	r3, #32
 8004efe:	e004      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f04:	fab3 f383 	clz	r3, r3
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d105      	bne.n	8004f24 <HAL_ADC_ConfigChannel+0x460>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	0e9b      	lsrs	r3, r3, #26
 8004f1e:	f003 031f 	and.w	r3, r3, #31
 8004f22:	e014      	b.n	8004f4e <HAL_ADC_ConfigChannel+0x48a>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f2c:	fa93 f3a3 	rbit	r3, r3
 8004f30:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004f40:	2320      	movs	r3, #32
 8004f42:	e004      	b.n	8004f4e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f48:	fab3 f383 	clz	r3, r3
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d106      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	2102      	movs	r1, #2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fe ffba 	bl	8003ed4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2103      	movs	r1, #3
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe ff1e 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x4c8>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2103      	movs	r1, #3
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe ff13 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004f82:	4603      	mov	r3, r0
 8004f84:	0e9b      	lsrs	r3, r3, #26
 8004f86:	f003 021f 	and.w	r2, r3, #31
 8004f8a:	e017      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x4f8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2103      	movs	r1, #3
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe ff08 	bl	8003da8 <LL_ADC_GetOffsetChannel>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f9e:	fa93 f3a3 	rbit	r3, r3
 8004fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004fae:	2320      	movs	r3, #32
 8004fb0:	e003      	b.n	8004fba <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb4:	fab3 f383 	clz	r3, r3
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x510>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	0e9b      	lsrs	r3, r3, #26
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	e011      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x534>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fdc:	fa93 f3a3 	rbit	r3, r3
 8004fe0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fe4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004fe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004fec:	2320      	movs	r3, #32
 8004fee:	e003      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ff2:	fab3 f383 	clz	r3, r3
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d14f      	bne.n	800509c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2200      	movs	r2, #0
 8005002:	2103      	movs	r1, #3
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe ff65 	bl	8003ed4 <LL_ADC_SetOffsetState>
 800500a:	e047      	b.n	800509c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005012:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	069b      	lsls	r3, r3, #26
 800501c:	429a      	cmp	r2, r3
 800501e:	d107      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800502e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005036:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	069b      	lsls	r3, r3, #26
 8005040:	429a      	cmp	r2, r3
 8005042:	d107      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005052:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800505a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	069b      	lsls	r3, r3, #26
 8005064:	429a      	cmp	r2, r3
 8005066:	d107      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005076:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800507e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	069b      	lsls	r3, r3, #26
 8005088:	429a      	cmp	r2, r3
 800508a:	d107      	bne.n	800509c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800509a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff f87d 	bl	80041a0 <LL_ADC_IsEnabled>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f040 8219 	bne.w	80054e0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6819      	ldr	r1, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f7fe ff9e 	bl	8003ffc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4aa1      	ldr	r2, [pc, #644]	; (800534c <HAL_ADC_ConfigChannel+0x888>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	f040 812e 	bne.w	8005328 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10b      	bne.n	80050f4 <HAL_ADC_ConfigChannel+0x630>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	0e9b      	lsrs	r3, r3, #26
 80050e2:	3301      	adds	r3, #1
 80050e4:	f003 031f 	and.w	r3, r3, #31
 80050e8:	2b09      	cmp	r3, #9
 80050ea:	bf94      	ite	ls
 80050ec:	2301      	movls	r3, #1
 80050ee:	2300      	movhi	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	e019      	b.n	8005128 <HAL_ADC_ConfigChannel+0x664>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050fc:	fa93 f3a3 	rbit	r3, r3
 8005100:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005104:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800510c:	2320      	movs	r3, #32
 800510e:	e003      	b.n	8005118 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005112:	fab3 f383 	clz	r3, r3
 8005116:	b2db      	uxtb	r3, r3
 8005118:	3301      	adds	r3, #1
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2b09      	cmp	r3, #9
 8005120:	bf94      	ite	ls
 8005122:	2301      	movls	r3, #1
 8005124:	2300      	movhi	r3, #0
 8005126:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005128:	2b00      	cmp	r3, #0
 800512a:	d079      	beq.n	8005220 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005134:	2b00      	cmp	r3, #0
 8005136:	d107      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x684>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	0e9b      	lsrs	r3, r3, #26
 800513e:	3301      	adds	r3, #1
 8005140:	069b      	lsls	r3, r3, #26
 8005142:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005146:	e015      	b.n	8005174 <HAL_ADC_ConfigChannel+0x6b0>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005150:	fa93 f3a3 	rbit	r3, r3
 8005154:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005158:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800515a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005160:	2320      	movs	r3, #32
 8005162:	e003      	b.n	800516c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005166:	fab3 f383 	clz	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	3301      	adds	r3, #1
 800516e:	069b      	lsls	r3, r3, #26
 8005170:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x6d0>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	0e9b      	lsrs	r3, r3, #26
 8005186:	3301      	adds	r3, #1
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	2101      	movs	r1, #1
 800518e:	fa01 f303 	lsl.w	r3, r1, r3
 8005192:	e017      	b.n	80051c4 <HAL_ADC_ConfigChannel+0x700>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519c:	fa93 f3a3 	rbit	r3, r3
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80051a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80051a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80051ac:	2320      	movs	r3, #32
 80051ae:	e003      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80051b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b2:	fab3 f383 	clz	r3, r3
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	3301      	adds	r3, #1
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	2101      	movs	r1, #1
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	ea42 0103 	orr.w	r1, r2, r3
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <HAL_ADC_ConfigChannel+0x726>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	0e9b      	lsrs	r3, r3, #26
 80051da:	3301      	adds	r3, #1
 80051dc:	f003 021f 	and.w	r2, r3, #31
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	051b      	lsls	r3, r3, #20
 80051e8:	e018      	b.n	800521c <HAL_ADC_ConfigChannel+0x758>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f2:	fa93 f3a3 	rbit	r3, r3
 80051f6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005202:	2320      	movs	r3, #32
 8005204:	e003      	b.n	800520e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	fab3 f383 	clz	r3, r3
 800520c:	b2db      	uxtb	r3, r3
 800520e:	3301      	adds	r3, #1
 8005210:	f003 021f 	and.w	r2, r3, #31
 8005214:	4613      	mov	r3, r2
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	4413      	add	r3, r2
 800521a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800521c:	430b      	orrs	r3, r1
 800521e:	e07e      	b.n	800531e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005228:	2b00      	cmp	r3, #0
 800522a:	d107      	bne.n	800523c <HAL_ADC_ConfigChannel+0x778>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	0e9b      	lsrs	r3, r3, #26
 8005232:	3301      	adds	r3, #1
 8005234:	069b      	lsls	r3, r3, #26
 8005236:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800523a:	e015      	b.n	8005268 <HAL_ADC_ConfigChannel+0x7a4>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	fa93 f3a3 	rbit	r3, r3
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005254:	2320      	movs	r3, #32
 8005256:	e003      	b.n	8005260 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	3301      	adds	r3, #1
 8005262:	069b      	lsls	r3, r3, #26
 8005264:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005270:	2b00      	cmp	r3, #0
 8005272:	d109      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x7c4>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	0e9b      	lsrs	r3, r3, #26
 800527a:	3301      	adds	r3, #1
 800527c:	f003 031f 	and.w	r3, r3, #31
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	e017      	b.n	80052b8 <HAL_ADC_ConfigChannel+0x7f4>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	fa93 f3a3 	rbit	r3, r3
 8005294:	61bb      	str	r3, [r7, #24]
  return result;
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80052a0:	2320      	movs	r3, #32
 80052a2:	e003      	b.n	80052ac <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	fab3 f383 	clz	r3, r3
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	3301      	adds	r3, #1
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	2101      	movs	r1, #1
 80052b4:	fa01 f303 	lsl.w	r3, r1, r3
 80052b8:	ea42 0103 	orr.w	r1, r2, r3
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10d      	bne.n	80052e4 <HAL_ADC_ConfigChannel+0x820>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	0e9b      	lsrs	r3, r3, #26
 80052ce:	3301      	adds	r3, #1
 80052d0:	f003 021f 	and.w	r2, r3, #31
 80052d4:	4613      	mov	r3, r2
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	4413      	add	r3, r2
 80052da:	3b1e      	subs	r3, #30
 80052dc:	051b      	lsls	r3, r3, #20
 80052de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052e2:	e01b      	b.n	800531c <HAL_ADC_ConfigChannel+0x858>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	fa93 f3a3 	rbit	r3, r3
 80052f0:	60fb      	str	r3, [r7, #12]
  return result;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80052fc:	2320      	movs	r3, #32
 80052fe:	e003      	b.n	8005308 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	fab3 f383 	clz	r3, r3
 8005306:	b2db      	uxtb	r3, r3
 8005308:	3301      	adds	r3, #1
 800530a:	f003 021f 	and.w	r2, r3, #31
 800530e:	4613      	mov	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4413      	add	r3, r2
 8005314:	3b1e      	subs	r3, #30
 8005316:	051b      	lsls	r3, r3, #20
 8005318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800531c:	430b      	orrs	r3, r1
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	6892      	ldr	r2, [r2, #8]
 8005322:	4619      	mov	r1, r3
 8005324:	f7fe fe3f 	bl	8003fa6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f280 80d7 	bge.w	80054e0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a06      	ldr	r2, [pc, #24]	; (8005350 <HAL_ADC_ConfigChannel+0x88c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_ADC_ConfigChannel+0x882>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a04      	ldr	r2, [pc, #16]	; (8005354 <HAL_ADC_ConfigChannel+0x890>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d10a      	bne.n	800535c <HAL_ADC_ConfigChannel+0x898>
 8005346:	4b04      	ldr	r3, [pc, #16]	; (8005358 <HAL_ADC_ConfigChannel+0x894>)
 8005348:	e009      	b.n	800535e <HAL_ADC_ConfigChannel+0x89a>
 800534a:	bf00      	nop
 800534c:	47ff0000 	.word	0x47ff0000
 8005350:	40022000 	.word	0x40022000
 8005354:	40022100 	.word	0x40022100
 8005358:	40022300 	.word	0x40022300
 800535c:	4b65      	ldr	r3, [pc, #404]	; (80054f4 <HAL_ADC_ConfigChannel+0xa30>)
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe fce2 	bl	8003d28 <LL_ADC_GetCommonPathInternalCh>
 8005364:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a62      	ldr	r2, [pc, #392]	; (80054f8 <HAL_ADC_ConfigChannel+0xa34>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d004      	beq.n	800537c <HAL_ADC_ConfigChannel+0x8b8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a61      	ldr	r2, [pc, #388]	; (80054fc <HAL_ADC_ConfigChannel+0xa38>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d10e      	bne.n	800539a <HAL_ADC_ConfigChannel+0x8d6>
 800537c:	485e      	ldr	r0, [pc, #376]	; (80054f8 <HAL_ADC_ConfigChannel+0xa34>)
 800537e:	f7fe ff0f 	bl	80041a0 <LL_ADC_IsEnabled>
 8005382:	4604      	mov	r4, r0
 8005384:	485d      	ldr	r0, [pc, #372]	; (80054fc <HAL_ADC_ConfigChannel+0xa38>)
 8005386:	f7fe ff0b 	bl	80041a0 <LL_ADC_IsEnabled>
 800538a:	4603      	mov	r3, r0
 800538c:	4323      	orrs	r3, r4
 800538e:	2b00      	cmp	r3, #0
 8005390:	bf0c      	ite	eq
 8005392:	2301      	moveq	r3, #1
 8005394:	2300      	movne	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	e008      	b.n	80053ac <HAL_ADC_ConfigChannel+0x8e8>
 800539a:	4859      	ldr	r0, [pc, #356]	; (8005500 <HAL_ADC_ConfigChannel+0xa3c>)
 800539c:	f7fe ff00 	bl	80041a0 <LL_ADC_IsEnabled>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf0c      	ite	eq
 80053a6:	2301      	moveq	r3, #1
 80053a8:	2300      	movne	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8084 	beq.w	80054ba <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a53      	ldr	r2, [pc, #332]	; (8005504 <HAL_ADC_ConfigChannel+0xa40>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d132      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x95e>
 80053bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d12c      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a4c      	ldr	r2, [pc, #304]	; (8005500 <HAL_ADC_ConfigChannel+0xa3c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	f040 8086 	bne.w	80054e0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a47      	ldr	r2, [pc, #284]	; (80054f8 <HAL_ADC_ConfigChannel+0xa34>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_ADC_ConfigChannel+0x924>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a46      	ldr	r2, [pc, #280]	; (80054fc <HAL_ADC_ConfigChannel+0xa38>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d101      	bne.n	80053ec <HAL_ADC_ConfigChannel+0x928>
 80053e8:	4a47      	ldr	r2, [pc, #284]	; (8005508 <HAL_ADC_ConfigChannel+0xa44>)
 80053ea:	e000      	b.n	80053ee <HAL_ADC_ConfigChannel+0x92a>
 80053ec:	4a41      	ldr	r2, [pc, #260]	; (80054f4 <HAL_ADC_ConfigChannel+0xa30>)
 80053ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053f6:	4619      	mov	r1, r3
 80053f8:	4610      	mov	r0, r2
 80053fa:	f7fe fc82 	bl	8003d02 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053fe:	4b43      	ldr	r3, [pc, #268]	; (800550c <HAL_ADC_ConfigChannel+0xa48>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	099b      	lsrs	r3, r3, #6
 8005404:	4a42      	ldr	r2, [pc, #264]	; (8005510 <HAL_ADC_ConfigChannel+0xa4c>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	099b      	lsrs	r3, r3, #6
 800540c:	3301      	adds	r3, #1
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005412:	e002      	b.n	800541a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	3b01      	subs	r3, #1
 8005418:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1f9      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005420:	e05e      	b.n	80054e0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a3b      	ldr	r2, [pc, #236]	; (8005514 <HAL_ADC_ConfigChannel+0xa50>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d120      	bne.n	800546e <HAL_ADC_ConfigChannel+0x9aa>
 800542c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d11a      	bne.n	800546e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a30      	ldr	r2, [pc, #192]	; (8005500 <HAL_ADC_ConfigChannel+0xa3c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d14e      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2c      	ldr	r2, [pc, #176]	; (80054f8 <HAL_ADC_ConfigChannel+0xa34>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_ADC_ConfigChannel+0x992>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2a      	ldr	r2, [pc, #168]	; (80054fc <HAL_ADC_ConfigChannel+0xa38>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d101      	bne.n	800545a <HAL_ADC_ConfigChannel+0x996>
 8005456:	4a2c      	ldr	r2, [pc, #176]	; (8005508 <HAL_ADC_ConfigChannel+0xa44>)
 8005458:	e000      	b.n	800545c <HAL_ADC_ConfigChannel+0x998>
 800545a:	4a26      	ldr	r2, [pc, #152]	; (80054f4 <HAL_ADC_ConfigChannel+0xa30>)
 800545c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f7fe fc4b 	bl	8003d02 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800546c:	e038      	b.n	80054e0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a29      	ldr	r2, [pc, #164]	; (8005518 <HAL_ADC_ConfigChannel+0xa54>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d133      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0xa1c>
 8005478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800547c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d12d      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <HAL_ADC_ConfigChannel+0xa3c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d128      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <HAL_ADC_ConfigChannel+0xa34>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d004      	beq.n	80054a2 <HAL_ADC_ConfigChannel+0x9de>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a17      	ldr	r2, [pc, #92]	; (80054fc <HAL_ADC_ConfigChannel+0xa38>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d101      	bne.n	80054a6 <HAL_ADC_ConfigChannel+0x9e2>
 80054a2:	4a19      	ldr	r2, [pc, #100]	; (8005508 <HAL_ADC_ConfigChannel+0xa44>)
 80054a4:	e000      	b.n	80054a8 <HAL_ADC_ConfigChannel+0x9e4>
 80054a6:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <HAL_ADC_ConfigChannel+0xa30>)
 80054a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f7fe fc25 	bl	8003d02 <LL_ADC_SetCommonPathInternalCh>
 80054b8:	e012      	b.n	80054e0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80054cc:	e008      	b.n	80054e0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d2:	f043 0220 	orr.w	r2, r3, #32
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80054e8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	37e4      	adds	r7, #228	; 0xe4
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd90      	pop	{r4, r7, pc}
 80054f4:	58026300 	.word	0x58026300
 80054f8:	40022000 	.word	0x40022000
 80054fc:	40022100 	.word	0x40022100
 8005500:	58026000 	.word	0x58026000
 8005504:	c7520000 	.word	0xc7520000
 8005508:	40022300 	.word	0x40022300
 800550c:	24000000 	.word	0x24000000
 8005510:	053e2d63 	.word	0x053e2d63
 8005514:	c3210000 	.word	0xc3210000
 8005518:	cb840000 	.word	0xcb840000

0800551c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe fe82 	bl	800423c <LL_ADC_REG_IsConversionOngoing>
 8005538:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fea4 	bl	800428c <LL_ADC_INJ_IsConversionOngoing>
 8005544:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d103      	bne.n	8005554 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 8098 	beq.w	8005684 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d02a      	beq.n	80055b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	7e5b      	ldrb	r3, [r3, #25]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d126      	bne.n	80055b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	7e1b      	ldrb	r3, [r3, #24]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d122      	bne.n	80055b8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005572:	2301      	movs	r3, #1
 8005574:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005576:	e014      	b.n	80055a2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	4a45      	ldr	r2, [pc, #276]	; (8005690 <ADC_ConversionStop+0x174>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d90d      	bls.n	800559c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	f043 0210 	orr.w	r2, r3, #16
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005590:	f043 0201 	orr.w	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e074      	b.n	8005686 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	3301      	adds	r3, #1
 80055a0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	d1e3      	bne.n	8005578 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2240      	movs	r2, #64	; 0x40
 80055b6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d014      	beq.n	80055e8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe fe3a 	bl	800423c <LL_ADC_REG_IsConversionOngoing>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fdf7 	bl	80041c6 <LL_ADC_IsDisableOngoing>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d104      	bne.n	80055e8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fe16 	bl	8004214 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d014      	beq.n	8005618 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe fe4a 	bl	800428c <LL_ADC_INJ_IsConversionOngoing>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe fddf 	bl	80041c6 <LL_ADC_IsDisableOngoing>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f7fe fe26 	bl	8004264 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d005      	beq.n	800562a <ADC_ConversionStop+0x10e>
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d105      	bne.n	8005630 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005624:	230c      	movs	r3, #12
 8005626:	617b      	str	r3, [r7, #20]
        break;
 8005628:	e005      	b.n	8005636 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800562a:	2308      	movs	r3, #8
 800562c:	617b      	str	r3, [r7, #20]
        break;
 800562e:	e002      	b.n	8005636 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005630:	2304      	movs	r3, #4
 8005632:	617b      	str	r3, [r7, #20]
        break;
 8005634:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005636:	f7fe fb0b 	bl	8003c50 <HAL_GetTick>
 800563a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800563c:	e01b      	b.n	8005676 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800563e:	f7fe fb07 	bl	8003c50 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b05      	cmp	r3, #5
 800564a:	d914      	bls.n	8005676 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00d      	beq.n	8005676 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	f043 0210 	orr.w	r2, r3, #16
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800566a:	f043 0201 	orr.w	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e007      	b.n	8005686 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1dc      	bne.n	800563e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	000cdbff 	.word	0x000cdbff

08005694 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fe fd7d 	bl	80041a0 <LL_ADC_IsEnabled>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d16e      	bne.n	800578a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	4b38      	ldr	r3, [pc, #224]	; (8005794 <ADC_Enable+0x100>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056be:	f043 0210 	orr.w	r2, r3, #16
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ca:	f043 0201 	orr.w	r2, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e05a      	b.n	800578c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fd38 	bl	8004150 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056e0:	f7fe fab6 	bl	8003c50 <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <ADC_Enable+0x104>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d004      	beq.n	80056fa <ADC_Enable+0x66>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a29      	ldr	r2, [pc, #164]	; (800579c <ADC_Enable+0x108>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d101      	bne.n	80056fe <ADC_Enable+0x6a>
 80056fa:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <ADC_Enable+0x10c>)
 80056fc:	e000      	b.n	8005700 <ADC_Enable+0x6c>
 80056fe:	4b29      	ldr	r3, [pc, #164]	; (80057a4 <ADC_Enable+0x110>)
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe fcbb 	bl	800407c <LL_ADC_GetMultimode>
 8005706:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a23      	ldr	r2, [pc, #140]	; (800579c <ADC_Enable+0x108>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d002      	beq.n	8005718 <ADC_Enable+0x84>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	e000      	b.n	800571a <ADC_Enable+0x86>
 8005718:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <ADC_Enable+0x104>)
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	4293      	cmp	r3, r2
 8005720:	d02c      	beq.n	800577c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d130      	bne.n	800578a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005728:	e028      	b.n	800577c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f7fe fd36 	bl	80041a0 <LL_ADC_IsEnabled>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d104      	bne.n	8005744 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fd06 	bl	8004150 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005744:	f7fe fa84 	bl	8003c50 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d914      	bls.n	800577c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b01      	cmp	r3, #1
 800575e:	d00d      	beq.n	800577c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005764:	f043 0210 	orr.w	r2, r3, #16
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005770:	f043 0201 	orr.w	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e007      	b.n	800578c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	d1cf      	bne.n	800572a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	8000003f 	.word	0x8000003f
 8005798:	40022000 	.word	0x40022000
 800579c:	40022100 	.word	0x40022100
 80057a0:	40022300 	.word	0x40022300
 80057a4:	58026300 	.word	0x58026300

080057a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe fd06 	bl	80041c6 <LL_ADC_IsDisableOngoing>
 80057ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fe fced 	bl	80041a0 <LL_ADC_IsEnabled>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d047      	beq.n	800585c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d144      	bne.n	800585c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 030d 	and.w	r3, r3, #13
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d10c      	bne.n	80057fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fcc7 	bl	8004178 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2203      	movs	r2, #3
 80057f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057f2:	f7fe fa2d 	bl	8003c50 <HAL_GetTick>
 80057f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057f8:	e029      	b.n	800584e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057fe:	f043 0210 	orr.w	r2, r3, #16
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800580a:	f043 0201 	orr.w	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e023      	b.n	800585e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005816:	f7fe fa1b 	bl	8003c50 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d914      	bls.n	800584e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00d      	beq.n	800584e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	f043 0210 	orr.w	r2, r3, #16
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005842:	f043 0201 	orr.w	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e007      	b.n	800585e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1dc      	bne.n	8005816 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a6c      	ldr	r2, [pc, #432]	; (8005a28 <ADC_ConfigureBoostMode+0x1c0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <ADC_ConfigureBoostMode+0x1c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a6b      	ldr	r2, [pc, #428]	; (8005a2c <ADC_ConfigureBoostMode+0x1c4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d109      	bne.n	8005898 <ADC_ConfigureBoostMode+0x30>
 8005884:	4b6a      	ldr	r3, [pc, #424]	; (8005a30 <ADC_ConfigureBoostMode+0x1c8>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf14      	ite	ne
 8005890:	2301      	movne	r3, #1
 8005892:	2300      	moveq	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	e008      	b.n	80058aa <ADC_ConfigureBoostMode+0x42>
 8005898:	4b66      	ldr	r3, [pc, #408]	; (8005a34 <ADC_ConfigureBoostMode+0x1cc>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	bf14      	ite	ne
 80058a4:	2301      	movne	r3, #1
 80058a6:	2300      	moveq	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01c      	beq.n	80058e8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80058ae:	f005 fcab 	bl	800b208 <HAL_RCC_GetHCLKFreq>
 80058b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058bc:	d010      	beq.n	80058e0 <ADC_ConfigureBoostMode+0x78>
 80058be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058c2:	d873      	bhi.n	80059ac <ADC_ConfigureBoostMode+0x144>
 80058c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c8:	d002      	beq.n	80058d0 <ADC_ConfigureBoostMode+0x68>
 80058ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ce:	d16d      	bne.n	80059ac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058dc:	60fb      	str	r3, [r7, #12]
        break;
 80058de:	e068      	b.n	80059b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	089b      	lsrs	r3, r3, #2
 80058e4:	60fb      	str	r3, [r7, #12]
        break;
 80058e6:	e064      	b.n	80059b2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80058e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80058ec:	f04f 0100 	mov.w	r1, #0
 80058f0:	f006 fe86 	bl	800c600 <HAL_RCCEx_GetPeriphCLKFreq>
 80058f4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80058fe:	d051      	beq.n	80059a4 <ADC_ConfigureBoostMode+0x13c>
 8005900:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005904:	d854      	bhi.n	80059b0 <ADC_ConfigureBoostMode+0x148>
 8005906:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800590a:	d047      	beq.n	800599c <ADC_ConfigureBoostMode+0x134>
 800590c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005910:	d84e      	bhi.n	80059b0 <ADC_ConfigureBoostMode+0x148>
 8005912:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005916:	d03d      	beq.n	8005994 <ADC_ConfigureBoostMode+0x12c>
 8005918:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800591c:	d848      	bhi.n	80059b0 <ADC_ConfigureBoostMode+0x148>
 800591e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005922:	d033      	beq.n	800598c <ADC_ConfigureBoostMode+0x124>
 8005924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005928:	d842      	bhi.n	80059b0 <ADC_ConfigureBoostMode+0x148>
 800592a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800592e:	d029      	beq.n	8005984 <ADC_ConfigureBoostMode+0x11c>
 8005930:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005934:	d83c      	bhi.n	80059b0 <ADC_ConfigureBoostMode+0x148>
 8005936:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800593a:	d01a      	beq.n	8005972 <ADC_ConfigureBoostMode+0x10a>
 800593c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005940:	d836      	bhi.n	80059b0 <ADC_ConfigureBoostMode+0x148>
 8005942:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005946:	d014      	beq.n	8005972 <ADC_ConfigureBoostMode+0x10a>
 8005948:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800594c:	d830      	bhi.n	80059b0 <ADC_ConfigureBoostMode+0x148>
 800594e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005952:	d00e      	beq.n	8005972 <ADC_ConfigureBoostMode+0x10a>
 8005954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005958:	d82a      	bhi.n	80059b0 <ADC_ConfigureBoostMode+0x148>
 800595a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800595e:	d008      	beq.n	8005972 <ADC_ConfigureBoostMode+0x10a>
 8005960:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005964:	d824      	bhi.n	80059b0 <ADC_ConfigureBoostMode+0x148>
 8005966:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800596a:	d002      	beq.n	8005972 <ADC_ConfigureBoostMode+0x10a>
 800596c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005970:	d11e      	bne.n	80059b0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	0c9b      	lsrs	r3, r3, #18
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005980:	60fb      	str	r3, [r7, #12]
        break;
 8005982:	e016      	b.n	80059b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	60fb      	str	r3, [r7, #12]
        break;
 800598a:	e012      	b.n	80059b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	60fb      	str	r3, [r7, #12]
        break;
 8005992:	e00e      	b.n	80059b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	099b      	lsrs	r3, r3, #6
 8005998:	60fb      	str	r3, [r7, #12]
        break;
 800599a:	e00a      	b.n	80059b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	09db      	lsrs	r3, r3, #7
 80059a0:	60fb      	str	r3, [r7, #12]
        break;
 80059a2:	e006      	b.n	80059b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	60fb      	str	r3, [r7, #12]
        break;
 80059aa:	e002      	b.n	80059b2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80059ac:	bf00      	nop
 80059ae:	e000      	b.n	80059b2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80059b0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	085b      	lsrs	r3, r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <ADC_ConfigureBoostMode+0x1d0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d808      	bhi.n	80059d2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80059d0:	e025      	b.n	8005a1e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a19      	ldr	r2, [pc, #100]	; (8005a3c <ADC_ConfigureBoostMode+0x1d4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d80a      	bhi.n	80059f0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ec:	609a      	str	r2, [r3, #8]
}
 80059ee:	e016      	b.n	8005a1e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <ADC_ConfigureBoostMode+0x1d8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d80a      	bhi.n	8005a0e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	e007      	b.n	8005a1e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005a1c:	609a      	str	r2, [r3, #8]
}
 8005a1e:	bf00      	nop
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40022000 	.word	0x40022000
 8005a2c:	40022100 	.word	0x40022100
 8005a30:	40022300 	.word	0x40022300
 8005a34:	58026300 	.word	0x58026300
 8005a38:	005f5e10 	.word	0x005f5e10
 8005a3c:	00bebc20 	.word	0x00bebc20
 8005a40:	017d7840 	.word	0x017d7840

08005a44 <LL_ADC_IsEnabled>:
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <LL_ADC_IsEnabled+0x18>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <LL_ADC_IsEnabled+0x1a>
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <LL_ADC_REG_IsConversionOngoing>:
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d101      	bne.n	8005a82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b0a3      	sub	sp, #140	; 0x8c
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e0c1      	b.n	8005c32 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a5e      	ldr	r2, [pc, #376]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d102      	bne.n	8005ace <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ac8:	4b5d      	ldr	r3, [pc, #372]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e001      	b.n	8005ad2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10b      	bne.n	8005af0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0a0      	b.n	8005c32 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff ffb9 	bl	8005a6a <LL_ADC_REG_IsConversionOngoing>
 8005af8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff ffb2 	bl	8005a6a <LL_ADC_REG_IsConversionOngoing>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f040 8081 	bne.w	8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d17c      	bne.n	8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a48      	ldr	r2, [pc, #288]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a46      	ldr	r2, [pc, #280]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d101      	bne.n	8005b2e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005b2a:	4b46      	ldr	r3, [pc, #280]	; (8005c44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005b2c:	e000      	b.n	8005b30 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005b2e:	4b46      	ldr	r3, [pc, #280]	; (8005c48 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005b30:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d039      	beq.n	8005bae <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005b3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a3a      	ldr	r2, [pc, #232]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a39      	ldr	r2, [pc, #228]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d10e      	bne.n	8005b7e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005b60:	4836      	ldr	r0, [pc, #216]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b62:	f7ff ff6f 	bl	8005a44 <LL_ADC_IsEnabled>
 8005b66:	4604      	mov	r4, r0
 8005b68:	4835      	ldr	r0, [pc, #212]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b6a:	f7ff ff6b 	bl	8005a44 <LL_ADC_IsEnabled>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4323      	orrs	r3, r4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	e008      	b.n	8005b90 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005b7e:	4833      	ldr	r0, [pc, #204]	; (8005c4c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005b80:	f7ff ff60 	bl	8005a44 <LL_ADC_IsEnabled>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bf0c      	ite	eq
 8005b8a:	2301      	moveq	r3, #1
 8005b8c:	2300      	movne	r3, #0
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d047      	beq.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005b94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	4b2d      	ldr	r3, [pc, #180]	; (8005c50 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	6811      	ldr	r1, [r2, #0]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	6892      	ldr	r2, [r2, #8]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005baa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bac:	e03a      	b.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bb8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1f      	ldr	r2, [pc, #124]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d10e      	bne.n	8005bec <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005bce:	481b      	ldr	r0, [pc, #108]	; (8005c3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005bd0:	f7ff ff38 	bl	8005a44 <LL_ADC_IsEnabled>
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	481a      	ldr	r0, [pc, #104]	; (8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005bd8:	f7ff ff34 	bl	8005a44 <LL_ADC_IsEnabled>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	4323      	orrs	r3, r4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	bf0c      	ite	eq
 8005be4:	2301      	moveq	r3, #1
 8005be6:	2300      	movne	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	e008      	b.n	8005bfe <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005bec:	4817      	ldr	r0, [pc, #92]	; (8005c4c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005bee:	f7ff ff29 	bl	8005a44 <LL_ADC_IsEnabled>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bf0c      	ite	eq
 8005bf8:	2301      	moveq	r3, #1
 8005bfa:	2300      	movne	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d010      	beq.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005c0c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c0e:	e009      	b.n	8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c14:	f043 0220 	orr.w	r2, r3, #32
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005c22:	e000      	b.n	8005c26 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005c2e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	378c      	adds	r7, #140	; 0x8c
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd90      	pop	{r4, r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40022000 	.word	0x40022000
 8005c40:	40022100 	.word	0x40022100
 8005c44:	40022300 	.word	0x40022300
 8005c48:	58026300 	.word	0x58026300
 8005c4c:	58026000 	.word	0x58026000
 8005c50:	fffff0e0 	.word	0xfffff0e0

08005c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <__NVIC_SetPriorityGrouping+0x40>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c70:	4013      	ands	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <__NVIC_SetPriorityGrouping+0x44>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c82:	4a04      	ldr	r2, [pc, #16]	; (8005c94 <__NVIC_SetPriorityGrouping+0x40>)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	60d3      	str	r3, [r2, #12]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	e000ed00 	.word	0xe000ed00
 8005c98:	05fa0000 	.word	0x05fa0000

08005c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	0a1b      	lsrs	r3, r3, #8
 8005ca6:	f003 0307 	and.w	r3, r3, #7
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	e000ed00 	.word	0xe000ed00

08005cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	db0b      	blt.n	8005ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	f003 021f 	and.w	r2, r3, #31
 8005cd0:	4907      	ldr	r1, [pc, #28]	; (8005cf0 <__NVIC_EnableIRQ+0x38>)
 8005cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	2001      	movs	r0, #1
 8005cda:	fa00 f202 	lsl.w	r2, r0, r2
 8005cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	e000e100 	.word	0xe000e100

08005cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	6039      	str	r1, [r7, #0]
 8005cfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	db0a      	blt.n	8005d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	490c      	ldr	r1, [pc, #48]	; (8005d40 <__NVIC_SetPriority+0x4c>)
 8005d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d12:	0112      	lsls	r2, r2, #4
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	440b      	add	r3, r1
 8005d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d1c:	e00a      	b.n	8005d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	4908      	ldr	r1, [pc, #32]	; (8005d44 <__NVIC_SetPriority+0x50>)
 8005d24:	88fb      	ldrh	r3, [r7, #6]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	3b04      	subs	r3, #4
 8005d2c:	0112      	lsls	r2, r2, #4
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	440b      	add	r3, r1
 8005d32:	761a      	strb	r2, [r3, #24]
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	e000e100 	.word	0xe000e100
 8005d44:	e000ed00 	.word	0xe000ed00

08005d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b089      	sub	sp, #36	; 0x24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f1c3 0307 	rsb	r3, r3, #7
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	bf28      	it	cs
 8005d66:	2304      	movcs	r3, #4
 8005d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d902      	bls.n	8005d78 <NVIC_EncodePriority+0x30>
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	3b03      	subs	r3, #3
 8005d76:	e000      	b.n	8005d7a <NVIC_EncodePriority+0x32>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43da      	mvns	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d90:	f04f 31ff 	mov.w	r1, #4294967295
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9a:	43d9      	mvns	r1, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da0:	4313      	orrs	r3, r2
         );
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3724      	adds	r7, #36	; 0x24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dc0:	d301      	bcc.n	8005dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e00f      	b.n	8005de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dc6:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <SysTick_Config+0x40>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dce:	210f      	movs	r1, #15
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	f7ff ff8e 	bl	8005cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <SysTick_Config+0x40>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <SysTick_Config+0x40>)
 8005de0:	2207      	movs	r2, #7
 8005de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	e000e010 	.word	0xe000e010

08005df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff ff29 	bl	8005c54 <__NVIC_SetPriorityGrouping>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b086      	sub	sp, #24
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	4603      	mov	r3, r0
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	607a      	str	r2, [r7, #4]
 8005e16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e18:	f7ff ff40 	bl	8005c9c <__NVIC_GetPriorityGrouping>
 8005e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	6978      	ldr	r0, [r7, #20]
 8005e24:	f7ff ff90 	bl	8005d48 <NVIC_EncodePriority>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff ff5f 	bl	8005cf4 <__NVIC_SetPriority>
}
 8005e36:	bf00      	nop
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	4603      	mov	r3, r0
 8005e46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff ff33 	bl	8005cb8 <__NVIC_EnableIRQ>
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff ffa4 	bl	8005db0 <SysTick_Config>
 8005e68:	4603      	mov	r3, r0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005e7c:	f7fd fee8 	bl	8003c50 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e312      	b.n	80064b2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a66      	ldr	r2, [pc, #408]	; (800602c <HAL_DMA_Init+0x1b8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d04a      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a65      	ldr	r2, [pc, #404]	; (8006030 <HAL_DMA_Init+0x1bc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d045      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a63      	ldr	r2, [pc, #396]	; (8006034 <HAL_DMA_Init+0x1c0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d040      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a62      	ldr	r2, [pc, #392]	; (8006038 <HAL_DMA_Init+0x1c4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d03b      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a60      	ldr	r2, [pc, #384]	; (800603c <HAL_DMA_Init+0x1c8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d036      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a5f      	ldr	r2, [pc, #380]	; (8006040 <HAL_DMA_Init+0x1cc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d031      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a5d      	ldr	r2, [pc, #372]	; (8006044 <HAL_DMA_Init+0x1d0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d02c      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a5c      	ldr	r2, [pc, #368]	; (8006048 <HAL_DMA_Init+0x1d4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d027      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a5a      	ldr	r2, [pc, #360]	; (800604c <HAL_DMA_Init+0x1d8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d022      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a59      	ldr	r2, [pc, #356]	; (8006050 <HAL_DMA_Init+0x1dc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d01d      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a57      	ldr	r2, [pc, #348]	; (8006054 <HAL_DMA_Init+0x1e0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d018      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a56      	ldr	r2, [pc, #344]	; (8006058 <HAL_DMA_Init+0x1e4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a54      	ldr	r2, [pc, #336]	; (800605c <HAL_DMA_Init+0x1e8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00e      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a53      	ldr	r2, [pc, #332]	; (8006060 <HAL_DMA_Init+0x1ec>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a51      	ldr	r2, [pc, #324]	; (8006064 <HAL_DMA_Init+0x1f0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <HAL_DMA_Init+0xb8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a50      	ldr	r2, [pc, #320]	; (8006068 <HAL_DMA_Init+0x1f4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d101      	bne.n	8005f30 <HAL_DMA_Init+0xbc>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <HAL_DMA_Init+0xbe>
 8005f30:	2300      	movs	r3, #0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 813c 	beq.w	80061b0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a37      	ldr	r2, [pc, #220]	; (800602c <HAL_DMA_Init+0x1b8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d04a      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a36      	ldr	r2, [pc, #216]	; (8006030 <HAL_DMA_Init+0x1bc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d045      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a34      	ldr	r2, [pc, #208]	; (8006034 <HAL_DMA_Init+0x1c0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d040      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a33      	ldr	r2, [pc, #204]	; (8006038 <HAL_DMA_Init+0x1c4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d03b      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a31      	ldr	r2, [pc, #196]	; (800603c <HAL_DMA_Init+0x1c8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d036      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a30      	ldr	r2, [pc, #192]	; (8006040 <HAL_DMA_Init+0x1cc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d031      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a2e      	ldr	r2, [pc, #184]	; (8006044 <HAL_DMA_Init+0x1d0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d02c      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a2d      	ldr	r2, [pc, #180]	; (8006048 <HAL_DMA_Init+0x1d4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d027      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a2b      	ldr	r2, [pc, #172]	; (800604c <HAL_DMA_Init+0x1d8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d022      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a2a      	ldr	r2, [pc, #168]	; (8006050 <HAL_DMA_Init+0x1dc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d01d      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a28      	ldr	r2, [pc, #160]	; (8006054 <HAL_DMA_Init+0x1e0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d018      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a27      	ldr	r2, [pc, #156]	; (8006058 <HAL_DMA_Init+0x1e4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d013      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a25      	ldr	r2, [pc, #148]	; (800605c <HAL_DMA_Init+0x1e8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00e      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a24      	ldr	r2, [pc, #144]	; (8006060 <HAL_DMA_Init+0x1ec>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <HAL_DMA_Init+0x1f0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_DMA_Init+0x174>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a21      	ldr	r2, [pc, #132]	; (8006068 <HAL_DMA_Init+0x1f4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d108      	bne.n	8005ffa <HAL_DMA_Init+0x186>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	e007      	b.n	800600a <HAL_DMA_Init+0x196>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0201 	bic.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800600a:	e02f      	b.n	800606c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800600c:	f7fd fe20 	bl	8003c50 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b05      	cmp	r3, #5
 8006018:	d928      	bls.n	800606c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2203      	movs	r2, #3
 8006024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e242      	b.n	80064b2 <HAL_DMA_Init+0x63e>
 800602c:	40020010 	.word	0x40020010
 8006030:	40020028 	.word	0x40020028
 8006034:	40020040 	.word	0x40020040
 8006038:	40020058 	.word	0x40020058
 800603c:	40020070 	.word	0x40020070
 8006040:	40020088 	.word	0x40020088
 8006044:	400200a0 	.word	0x400200a0
 8006048:	400200b8 	.word	0x400200b8
 800604c:	40020410 	.word	0x40020410
 8006050:	40020428 	.word	0x40020428
 8006054:	40020440 	.word	0x40020440
 8006058:	40020458 	.word	0x40020458
 800605c:	40020470 	.word	0x40020470
 8006060:	40020488 	.word	0x40020488
 8006064:	400204a0 	.word	0x400204a0
 8006068:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1c8      	bne.n	800600c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4b83      	ldr	r3, [pc, #524]	; (8006294 <HAL_DMA_Init+0x420>)
 8006086:	4013      	ands	r3, r2
 8006088:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006092:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800609e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d107      	bne.n	80060d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	4313      	orrs	r3, r2
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b28      	cmp	r3, #40	; 0x28
 80060d6:	d903      	bls.n	80060e0 <HAL_DMA_Init+0x26c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b2e      	cmp	r3, #46	; 0x2e
 80060de:	d91f      	bls.n	8006120 <HAL_DMA_Init+0x2ac>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b3e      	cmp	r3, #62	; 0x3e
 80060e6:	d903      	bls.n	80060f0 <HAL_DMA_Init+0x27c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2b42      	cmp	r3, #66	; 0x42
 80060ee:	d917      	bls.n	8006120 <HAL_DMA_Init+0x2ac>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b46      	cmp	r3, #70	; 0x46
 80060f6:	d903      	bls.n	8006100 <HAL_DMA_Init+0x28c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	2b48      	cmp	r3, #72	; 0x48
 80060fe:	d90f      	bls.n	8006120 <HAL_DMA_Init+0x2ac>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b4e      	cmp	r3, #78	; 0x4e
 8006106:	d903      	bls.n	8006110 <HAL_DMA_Init+0x29c>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b52      	cmp	r3, #82	; 0x52
 800610e:	d907      	bls.n	8006120 <HAL_DMA_Init+0x2ac>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b73      	cmp	r3, #115	; 0x73
 8006116:	d905      	bls.n	8006124 <HAL_DMA_Init+0x2b0>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2b77      	cmp	r3, #119	; 0x77
 800611e:	d801      	bhi.n	8006124 <HAL_DMA_Init+0x2b0>
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <HAL_DMA_Init+0x2b2>
 8006124:	2300      	movs	r3, #0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006130:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f023 0307 	bic.w	r3, r3, #7
 8006148:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	2b04      	cmp	r3, #4
 800615a:	d117      	bne.n	800618c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00e      	beq.n	800618c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 fdca 	bl	8007d08 <DMA_CheckFifoParam>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2240      	movs	r2, #64	; 0x40
 800617e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e192      	b.n	80064b2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f001 fd05 	bl	8007ba4 <DMA_CalcBaseAndBitshift>
 800619a:	4603      	mov	r3, r0
 800619c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	223f      	movs	r2, #63	; 0x3f
 80061a8:	409a      	lsls	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	609a      	str	r2, [r3, #8]
 80061ae:	e0c8      	b.n	8006342 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a38      	ldr	r2, [pc, #224]	; (8006298 <HAL_DMA_Init+0x424>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d022      	beq.n	8006200 <HAL_DMA_Init+0x38c>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a37      	ldr	r2, [pc, #220]	; (800629c <HAL_DMA_Init+0x428>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d01d      	beq.n	8006200 <HAL_DMA_Init+0x38c>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a35      	ldr	r2, [pc, #212]	; (80062a0 <HAL_DMA_Init+0x42c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d018      	beq.n	8006200 <HAL_DMA_Init+0x38c>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a34      	ldr	r2, [pc, #208]	; (80062a4 <HAL_DMA_Init+0x430>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d013      	beq.n	8006200 <HAL_DMA_Init+0x38c>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a32      	ldr	r2, [pc, #200]	; (80062a8 <HAL_DMA_Init+0x434>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00e      	beq.n	8006200 <HAL_DMA_Init+0x38c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a31      	ldr	r2, [pc, #196]	; (80062ac <HAL_DMA_Init+0x438>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d009      	beq.n	8006200 <HAL_DMA_Init+0x38c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a2f      	ldr	r2, [pc, #188]	; (80062b0 <HAL_DMA_Init+0x43c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d004      	beq.n	8006200 <HAL_DMA_Init+0x38c>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a2e      	ldr	r2, [pc, #184]	; (80062b4 <HAL_DMA_Init+0x440>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d101      	bne.n	8006204 <HAL_DMA_Init+0x390>
 8006200:	2301      	movs	r3, #1
 8006202:	e000      	b.n	8006206 <HAL_DMA_Init+0x392>
 8006204:	2300      	movs	r3, #0
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8092 	beq.w	8006330 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a21      	ldr	r2, [pc, #132]	; (8006298 <HAL_DMA_Init+0x424>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d021      	beq.n	800625a <HAL_DMA_Init+0x3e6>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a20      	ldr	r2, [pc, #128]	; (800629c <HAL_DMA_Init+0x428>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d01c      	beq.n	800625a <HAL_DMA_Init+0x3e6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1e      	ldr	r2, [pc, #120]	; (80062a0 <HAL_DMA_Init+0x42c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d017      	beq.n	800625a <HAL_DMA_Init+0x3e6>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <HAL_DMA_Init+0x430>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d012      	beq.n	800625a <HAL_DMA_Init+0x3e6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <HAL_DMA_Init+0x434>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00d      	beq.n	800625a <HAL_DMA_Init+0x3e6>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1a      	ldr	r2, [pc, #104]	; (80062ac <HAL_DMA_Init+0x438>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d008      	beq.n	800625a <HAL_DMA_Init+0x3e6>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <HAL_DMA_Init+0x43c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <HAL_DMA_Init+0x3e6>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a17      	ldr	r2, [pc, #92]	; (80062b4 <HAL_DMA_Init+0x440>)
 8006258:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4b10      	ldr	r3, [pc, #64]	; (80062b8 <HAL_DMA_Init+0x444>)
 8006276:	4013      	ands	r3, r2
 8006278:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d01c      	beq.n	80062bc <HAL_DMA_Init+0x448>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b80      	cmp	r3, #128	; 0x80
 8006288:	d102      	bne.n	8006290 <HAL_DMA_Init+0x41c>
 800628a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800628e:	e016      	b.n	80062be <HAL_DMA_Init+0x44a>
 8006290:	2300      	movs	r3, #0
 8006292:	e014      	b.n	80062be <HAL_DMA_Init+0x44a>
 8006294:	fe10803f 	.word	0xfe10803f
 8006298:	58025408 	.word	0x58025408
 800629c:	5802541c 	.word	0x5802541c
 80062a0:	58025430 	.word	0x58025430
 80062a4:	58025444 	.word	0x58025444
 80062a8:	58025458 	.word	0x58025458
 80062ac:	5802546c 	.word	0x5802546c
 80062b0:	58025480 	.word	0x58025480
 80062b4:	58025494 	.word	0x58025494
 80062b8:	fffe000f 	.word	0xfffe000f
 80062bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	68d2      	ldr	r2, [r2, #12]
 80062c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80062c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80062cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80062d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80062dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80062e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80062ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	4b6e      	ldr	r3, [pc, #440]	; (80064bc <HAL_DMA_Init+0x648>)
 8006304:	4413      	add	r3, r2
 8006306:	4a6e      	ldr	r2, [pc, #440]	; (80064c0 <HAL_DMA_Init+0x64c>)
 8006308:	fba2 2303 	umull	r2, r3, r2, r3
 800630c:	091b      	lsrs	r3, r3, #4
 800630e:	009a      	lsls	r2, r3, #2
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 fc45 	bl	8007ba4 <DMA_CalcBaseAndBitshift>
 800631a:	4603      	mov	r3, r0
 800631c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	2201      	movs	r2, #1
 8006328:	409a      	lsls	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	605a      	str	r2, [r3, #4]
 800632e:	e008      	b.n	8006342 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2240      	movs	r2, #64	; 0x40
 8006334:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2203      	movs	r2, #3
 800633a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e0b7      	b.n	80064b2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a5f      	ldr	r2, [pc, #380]	; (80064c4 <HAL_DMA_Init+0x650>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d072      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a5d      	ldr	r2, [pc, #372]	; (80064c8 <HAL_DMA_Init+0x654>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d06d      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a5c      	ldr	r2, [pc, #368]	; (80064cc <HAL_DMA_Init+0x658>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d068      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a5a      	ldr	r2, [pc, #360]	; (80064d0 <HAL_DMA_Init+0x65c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d063      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a59      	ldr	r2, [pc, #356]	; (80064d4 <HAL_DMA_Init+0x660>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d05e      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a57      	ldr	r2, [pc, #348]	; (80064d8 <HAL_DMA_Init+0x664>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d059      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a56      	ldr	r2, [pc, #344]	; (80064dc <HAL_DMA_Init+0x668>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d054      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a54      	ldr	r2, [pc, #336]	; (80064e0 <HAL_DMA_Init+0x66c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d04f      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a53      	ldr	r2, [pc, #332]	; (80064e4 <HAL_DMA_Init+0x670>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d04a      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a51      	ldr	r2, [pc, #324]	; (80064e8 <HAL_DMA_Init+0x674>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d045      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a50      	ldr	r2, [pc, #320]	; (80064ec <HAL_DMA_Init+0x678>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d040      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a4e      	ldr	r2, [pc, #312]	; (80064f0 <HAL_DMA_Init+0x67c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d03b      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a4d      	ldr	r2, [pc, #308]	; (80064f4 <HAL_DMA_Init+0x680>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d036      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a4b      	ldr	r2, [pc, #300]	; (80064f8 <HAL_DMA_Init+0x684>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d031      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a4a      	ldr	r2, [pc, #296]	; (80064fc <HAL_DMA_Init+0x688>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d02c      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a48      	ldr	r2, [pc, #288]	; (8006500 <HAL_DMA_Init+0x68c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d027      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a47      	ldr	r2, [pc, #284]	; (8006504 <HAL_DMA_Init+0x690>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d022      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a45      	ldr	r2, [pc, #276]	; (8006508 <HAL_DMA_Init+0x694>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01d      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a44      	ldr	r2, [pc, #272]	; (800650c <HAL_DMA_Init+0x698>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d018      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a42      	ldr	r2, [pc, #264]	; (8006510 <HAL_DMA_Init+0x69c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a41      	ldr	r2, [pc, #260]	; (8006514 <HAL_DMA_Init+0x6a0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00e      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a3f      	ldr	r2, [pc, #252]	; (8006518 <HAL_DMA_Init+0x6a4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d009      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a3e      	ldr	r2, [pc, #248]	; (800651c <HAL_DMA_Init+0x6a8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d004      	beq.n	8006432 <HAL_DMA_Init+0x5be>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a3c      	ldr	r2, [pc, #240]	; (8006520 <HAL_DMA_Init+0x6ac>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d101      	bne.n	8006436 <HAL_DMA_Init+0x5c2>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <HAL_DMA_Init+0x5c4>
 8006436:	2300      	movs	r3, #0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d032      	beq.n	80064a2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fcdf 	bl	8007e00 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b80      	cmp	r3, #128	; 0x80
 8006448:	d102      	bne.n	8006450 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006464:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d010      	beq.n	8006490 <HAL_DMA_Init+0x61c>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b08      	cmp	r3, #8
 8006474:	d80c      	bhi.n	8006490 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 fd5c 	bl	8007f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	e008      	b.n	80064a2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	a7fdabf8 	.word	0xa7fdabf8
 80064c0:	cccccccd 	.word	0xcccccccd
 80064c4:	40020010 	.word	0x40020010
 80064c8:	40020028 	.word	0x40020028
 80064cc:	40020040 	.word	0x40020040
 80064d0:	40020058 	.word	0x40020058
 80064d4:	40020070 	.word	0x40020070
 80064d8:	40020088 	.word	0x40020088
 80064dc:	400200a0 	.word	0x400200a0
 80064e0:	400200b8 	.word	0x400200b8
 80064e4:	40020410 	.word	0x40020410
 80064e8:	40020428 	.word	0x40020428
 80064ec:	40020440 	.word	0x40020440
 80064f0:	40020458 	.word	0x40020458
 80064f4:	40020470 	.word	0x40020470
 80064f8:	40020488 	.word	0x40020488
 80064fc:	400204a0 	.word	0x400204a0
 8006500:	400204b8 	.word	0x400204b8
 8006504:	58025408 	.word	0x58025408
 8006508:	5802541c 	.word	0x5802541c
 800650c:	58025430 	.word	0x58025430
 8006510:	58025444 	.word	0x58025444
 8006514:	58025458 	.word	0x58025458
 8006518:	5802546c 	.word	0x5802546c
 800651c:	58025480 	.word	0x58025480
 8006520:	58025494 	.word	0x58025494

08006524 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e226      	b.n	800698e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_DMA_Start_IT+0x2a>
 800654a:	2302      	movs	r3, #2
 800654c:	e21f      	b.n	800698e <HAL_DMA_Start_IT+0x46a>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	f040 820a 	bne.w	8006978 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a68      	ldr	r2, [pc, #416]	; (8006718 <HAL_DMA_Start_IT+0x1f4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d04a      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a66      	ldr	r2, [pc, #408]	; (800671c <HAL_DMA_Start_IT+0x1f8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d045      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a65      	ldr	r2, [pc, #404]	; (8006720 <HAL_DMA_Start_IT+0x1fc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d040      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a63      	ldr	r2, [pc, #396]	; (8006724 <HAL_DMA_Start_IT+0x200>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d03b      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a62      	ldr	r2, [pc, #392]	; (8006728 <HAL_DMA_Start_IT+0x204>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d036      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a60      	ldr	r2, [pc, #384]	; (800672c <HAL_DMA_Start_IT+0x208>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d031      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a5f      	ldr	r2, [pc, #380]	; (8006730 <HAL_DMA_Start_IT+0x20c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d02c      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a5d      	ldr	r2, [pc, #372]	; (8006734 <HAL_DMA_Start_IT+0x210>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d027      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a5c      	ldr	r2, [pc, #368]	; (8006738 <HAL_DMA_Start_IT+0x214>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d022      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a5a      	ldr	r2, [pc, #360]	; (800673c <HAL_DMA_Start_IT+0x218>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d01d      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a59      	ldr	r2, [pc, #356]	; (8006740 <HAL_DMA_Start_IT+0x21c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d018      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a57      	ldr	r2, [pc, #348]	; (8006744 <HAL_DMA_Start_IT+0x220>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d013      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a56      	ldr	r2, [pc, #344]	; (8006748 <HAL_DMA_Start_IT+0x224>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00e      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a54      	ldr	r2, [pc, #336]	; (800674c <HAL_DMA_Start_IT+0x228>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d009      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a53      	ldr	r2, [pc, #332]	; (8006750 <HAL_DMA_Start_IT+0x22c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d004      	beq.n	8006612 <HAL_DMA_Start_IT+0xee>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a51      	ldr	r2, [pc, #324]	; (8006754 <HAL_DMA_Start_IT+0x230>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d108      	bne.n	8006624 <HAL_DMA_Start_IT+0x100>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0201 	bic.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e007      	b.n	8006634 <HAL_DMA_Start_IT+0x110>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0201 	bic.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f001 f906 	bl	800784c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a34      	ldr	r2, [pc, #208]	; (8006718 <HAL_DMA_Start_IT+0x1f4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d04a      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a33      	ldr	r2, [pc, #204]	; (800671c <HAL_DMA_Start_IT+0x1f8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d045      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a31      	ldr	r2, [pc, #196]	; (8006720 <HAL_DMA_Start_IT+0x1fc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d040      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a30      	ldr	r2, [pc, #192]	; (8006724 <HAL_DMA_Start_IT+0x200>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d03b      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a2e      	ldr	r2, [pc, #184]	; (8006728 <HAL_DMA_Start_IT+0x204>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d036      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a2d      	ldr	r2, [pc, #180]	; (800672c <HAL_DMA_Start_IT+0x208>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d031      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a2b      	ldr	r2, [pc, #172]	; (8006730 <HAL_DMA_Start_IT+0x20c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d02c      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a2a      	ldr	r2, [pc, #168]	; (8006734 <HAL_DMA_Start_IT+0x210>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d027      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a28      	ldr	r2, [pc, #160]	; (8006738 <HAL_DMA_Start_IT+0x214>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d022      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a27      	ldr	r2, [pc, #156]	; (800673c <HAL_DMA_Start_IT+0x218>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d01d      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a25      	ldr	r2, [pc, #148]	; (8006740 <HAL_DMA_Start_IT+0x21c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d018      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a24      	ldr	r2, [pc, #144]	; (8006744 <HAL_DMA_Start_IT+0x220>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a22      	ldr	r2, [pc, #136]	; (8006748 <HAL_DMA_Start_IT+0x224>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00e      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a21      	ldr	r2, [pc, #132]	; (800674c <HAL_DMA_Start_IT+0x228>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d009      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <HAL_DMA_Start_IT+0x22c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_DMA_Start_IT+0x1bc>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <HAL_DMA_Start_IT+0x230>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d101      	bne.n	80066e4 <HAL_DMA_Start_IT+0x1c0>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <HAL_DMA_Start_IT+0x1c2>
 80066e4:	2300      	movs	r3, #0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d036      	beq.n	8006758 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f023 021e 	bic.w	r2, r3, #30
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0216 	orr.w	r2, r2, #22
 80066fc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d03e      	beq.n	8006784 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 0208 	orr.w	r2, r2, #8
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	e035      	b.n	8006784 <HAL_DMA_Start_IT+0x260>
 8006718:	40020010 	.word	0x40020010
 800671c:	40020028 	.word	0x40020028
 8006720:	40020040 	.word	0x40020040
 8006724:	40020058 	.word	0x40020058
 8006728:	40020070 	.word	0x40020070
 800672c:	40020088 	.word	0x40020088
 8006730:	400200a0 	.word	0x400200a0
 8006734:	400200b8 	.word	0x400200b8
 8006738:	40020410 	.word	0x40020410
 800673c:	40020428 	.word	0x40020428
 8006740:	40020440 	.word	0x40020440
 8006744:	40020458 	.word	0x40020458
 8006748:	40020470 	.word	0x40020470
 800674c:	40020488 	.word	0x40020488
 8006750:	400204a0 	.word	0x400204a0
 8006754:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f023 020e 	bic.w	r2, r3, #14
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 020a 	orr.w	r2, r2, #10
 800676a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d007      	beq.n	8006784 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0204 	orr.w	r2, r2, #4
 8006782:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a83      	ldr	r2, [pc, #524]	; (8006998 <HAL_DMA_Start_IT+0x474>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d072      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a82      	ldr	r2, [pc, #520]	; (800699c <HAL_DMA_Start_IT+0x478>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d06d      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a80      	ldr	r2, [pc, #512]	; (80069a0 <HAL_DMA_Start_IT+0x47c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d068      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a7f      	ldr	r2, [pc, #508]	; (80069a4 <HAL_DMA_Start_IT+0x480>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d063      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a7d      	ldr	r2, [pc, #500]	; (80069a8 <HAL_DMA_Start_IT+0x484>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d05e      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a7c      	ldr	r2, [pc, #496]	; (80069ac <HAL_DMA_Start_IT+0x488>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d059      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a7a      	ldr	r2, [pc, #488]	; (80069b0 <HAL_DMA_Start_IT+0x48c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d054      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a79      	ldr	r2, [pc, #484]	; (80069b4 <HAL_DMA_Start_IT+0x490>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d04f      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a77      	ldr	r2, [pc, #476]	; (80069b8 <HAL_DMA_Start_IT+0x494>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d04a      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a76      	ldr	r2, [pc, #472]	; (80069bc <HAL_DMA_Start_IT+0x498>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d045      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a74      	ldr	r2, [pc, #464]	; (80069c0 <HAL_DMA_Start_IT+0x49c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d040      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a73      	ldr	r2, [pc, #460]	; (80069c4 <HAL_DMA_Start_IT+0x4a0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d03b      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a71      	ldr	r2, [pc, #452]	; (80069c8 <HAL_DMA_Start_IT+0x4a4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d036      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a70      	ldr	r2, [pc, #448]	; (80069cc <HAL_DMA_Start_IT+0x4a8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d031      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a6e      	ldr	r2, [pc, #440]	; (80069d0 <HAL_DMA_Start_IT+0x4ac>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d02c      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a6d      	ldr	r2, [pc, #436]	; (80069d4 <HAL_DMA_Start_IT+0x4b0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d027      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a6b      	ldr	r2, [pc, #428]	; (80069d8 <HAL_DMA_Start_IT+0x4b4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d022      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a6a      	ldr	r2, [pc, #424]	; (80069dc <HAL_DMA_Start_IT+0x4b8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d01d      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a68      	ldr	r2, [pc, #416]	; (80069e0 <HAL_DMA_Start_IT+0x4bc>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d018      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a67      	ldr	r2, [pc, #412]	; (80069e4 <HAL_DMA_Start_IT+0x4c0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d013      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a65      	ldr	r2, [pc, #404]	; (80069e8 <HAL_DMA_Start_IT+0x4c4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00e      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a64      	ldr	r2, [pc, #400]	; (80069ec <HAL_DMA_Start_IT+0x4c8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d009      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a62      	ldr	r2, [pc, #392]	; (80069f0 <HAL_DMA_Start_IT+0x4cc>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <HAL_DMA_Start_IT+0x350>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a61      	ldr	r2, [pc, #388]	; (80069f4 <HAL_DMA_Start_IT+0x4d0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d101      	bne.n	8006878 <HAL_DMA_Start_IT+0x354>
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <HAL_DMA_Start_IT+0x356>
 8006878:	2300      	movs	r3, #0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d01a      	beq.n	80068b4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d007      	beq.n	800689c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800689a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d007      	beq.n	80068b4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068b2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a37      	ldr	r2, [pc, #220]	; (8006998 <HAL_DMA_Start_IT+0x474>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d04a      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a36      	ldr	r2, [pc, #216]	; (800699c <HAL_DMA_Start_IT+0x478>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d045      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a34      	ldr	r2, [pc, #208]	; (80069a0 <HAL_DMA_Start_IT+0x47c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d040      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a33      	ldr	r2, [pc, #204]	; (80069a4 <HAL_DMA_Start_IT+0x480>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d03b      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a31      	ldr	r2, [pc, #196]	; (80069a8 <HAL_DMA_Start_IT+0x484>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d036      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a30      	ldr	r2, [pc, #192]	; (80069ac <HAL_DMA_Start_IT+0x488>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d031      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a2e      	ldr	r2, [pc, #184]	; (80069b0 <HAL_DMA_Start_IT+0x48c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d02c      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a2d      	ldr	r2, [pc, #180]	; (80069b4 <HAL_DMA_Start_IT+0x490>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d027      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a2b      	ldr	r2, [pc, #172]	; (80069b8 <HAL_DMA_Start_IT+0x494>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d022      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <HAL_DMA_Start_IT+0x498>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d01d      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a28      	ldr	r2, [pc, #160]	; (80069c0 <HAL_DMA_Start_IT+0x49c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d018      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a27      	ldr	r2, [pc, #156]	; (80069c4 <HAL_DMA_Start_IT+0x4a0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d013      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <HAL_DMA_Start_IT+0x4a4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00e      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a24      	ldr	r2, [pc, #144]	; (80069cc <HAL_DMA_Start_IT+0x4a8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d009      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a22      	ldr	r2, [pc, #136]	; (80069d0 <HAL_DMA_Start_IT+0x4ac>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d004      	beq.n	8006954 <HAL_DMA_Start_IT+0x430>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a21      	ldr	r2, [pc, #132]	; (80069d4 <HAL_DMA_Start_IT+0x4b0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d108      	bne.n	8006966 <HAL_DMA_Start_IT+0x442>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	e012      	b.n	800698c <HAL_DMA_Start_IT+0x468>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f042 0201 	orr.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	e009      	b.n	800698c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800697e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800698c:	7dfb      	ldrb	r3, [r7, #23]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	40020010 	.word	0x40020010
 800699c:	40020028 	.word	0x40020028
 80069a0:	40020040 	.word	0x40020040
 80069a4:	40020058 	.word	0x40020058
 80069a8:	40020070 	.word	0x40020070
 80069ac:	40020088 	.word	0x40020088
 80069b0:	400200a0 	.word	0x400200a0
 80069b4:	400200b8 	.word	0x400200b8
 80069b8:	40020410 	.word	0x40020410
 80069bc:	40020428 	.word	0x40020428
 80069c0:	40020440 	.word	0x40020440
 80069c4:	40020458 	.word	0x40020458
 80069c8:	40020470 	.word	0x40020470
 80069cc:	40020488 	.word	0x40020488
 80069d0:	400204a0 	.word	0x400204a0
 80069d4:	400204b8 	.word	0x400204b8
 80069d8:	58025408 	.word	0x58025408
 80069dc:	5802541c 	.word	0x5802541c
 80069e0:	58025430 	.word	0x58025430
 80069e4:	58025444 	.word	0x58025444
 80069e8:	58025458 	.word	0x58025458
 80069ec:	5802546c 	.word	0x5802546c
 80069f0:	58025480 	.word	0x58025480
 80069f4:	58025494 	.word	0x58025494

080069f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08a      	sub	sp, #40	; 0x28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a04:	4b67      	ldr	r3, [pc, #412]	; (8006ba4 <HAL_DMA_IRQHandler+0x1ac>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a67      	ldr	r2, [pc, #412]	; (8006ba8 <HAL_DMA_IRQHandler+0x1b0>)
 8006a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0e:	0a9b      	lsrs	r3, r3, #10
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a16:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a5f      	ldr	r2, [pc, #380]	; (8006bac <HAL_DMA_IRQHandler+0x1b4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d04a      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a5d      	ldr	r2, [pc, #372]	; (8006bb0 <HAL_DMA_IRQHandler+0x1b8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d045      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a5c      	ldr	r2, [pc, #368]	; (8006bb4 <HAL_DMA_IRQHandler+0x1bc>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d040      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a5a      	ldr	r2, [pc, #360]	; (8006bb8 <HAL_DMA_IRQHandler+0x1c0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d03b      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a59      	ldr	r2, [pc, #356]	; (8006bbc <HAL_DMA_IRQHandler+0x1c4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d036      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a57      	ldr	r2, [pc, #348]	; (8006bc0 <HAL_DMA_IRQHandler+0x1c8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d031      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a56      	ldr	r2, [pc, #344]	; (8006bc4 <HAL_DMA_IRQHandler+0x1cc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d02c      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a54      	ldr	r2, [pc, #336]	; (8006bc8 <HAL_DMA_IRQHandler+0x1d0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d027      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a53      	ldr	r2, [pc, #332]	; (8006bcc <HAL_DMA_IRQHandler+0x1d4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d022      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a51      	ldr	r2, [pc, #324]	; (8006bd0 <HAL_DMA_IRQHandler+0x1d8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d01d      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a50      	ldr	r2, [pc, #320]	; (8006bd4 <HAL_DMA_IRQHandler+0x1dc>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d018      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a4e      	ldr	r2, [pc, #312]	; (8006bd8 <HAL_DMA_IRQHandler+0x1e0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d013      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a4d      	ldr	r2, [pc, #308]	; (8006bdc <HAL_DMA_IRQHandler+0x1e4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00e      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a4b      	ldr	r2, [pc, #300]	; (8006be0 <HAL_DMA_IRQHandler+0x1e8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d009      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a4a      	ldr	r2, [pc, #296]	; (8006be4 <HAL_DMA_IRQHandler+0x1ec>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d004      	beq.n	8006aca <HAL_DMA_IRQHandler+0xd2>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a48      	ldr	r2, [pc, #288]	; (8006be8 <HAL_DMA_IRQHandler+0x1f0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d101      	bne.n	8006ace <HAL_DMA_IRQHandler+0xd6>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <HAL_DMA_IRQHandler+0xd8>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 842b 	beq.w	800732c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	2208      	movs	r2, #8
 8006ae0:	409a      	lsls	r2, r3
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 80a2 	beq.w	8006c30 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a2e      	ldr	r2, [pc, #184]	; (8006bac <HAL_DMA_IRQHandler+0x1b4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d04a      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a2d      	ldr	r2, [pc, #180]	; (8006bb0 <HAL_DMA_IRQHandler+0x1b8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d045      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a2b      	ldr	r2, [pc, #172]	; (8006bb4 <HAL_DMA_IRQHandler+0x1bc>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d040      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a2a      	ldr	r2, [pc, #168]	; (8006bb8 <HAL_DMA_IRQHandler+0x1c0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d03b      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a28      	ldr	r2, [pc, #160]	; (8006bbc <HAL_DMA_IRQHandler+0x1c4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d036      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a27      	ldr	r2, [pc, #156]	; (8006bc0 <HAL_DMA_IRQHandler+0x1c8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d031      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a25      	ldr	r2, [pc, #148]	; (8006bc4 <HAL_DMA_IRQHandler+0x1cc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d02c      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a24      	ldr	r2, [pc, #144]	; (8006bc8 <HAL_DMA_IRQHandler+0x1d0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d027      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a22      	ldr	r2, [pc, #136]	; (8006bcc <HAL_DMA_IRQHandler+0x1d4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d022      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a21      	ldr	r2, [pc, #132]	; (8006bd0 <HAL_DMA_IRQHandler+0x1d8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d01d      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a1f      	ldr	r2, [pc, #124]	; (8006bd4 <HAL_DMA_IRQHandler+0x1dc>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d018      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a1e      	ldr	r2, [pc, #120]	; (8006bd8 <HAL_DMA_IRQHandler+0x1e0>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d013      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1c      	ldr	r2, [pc, #112]	; (8006bdc <HAL_DMA_IRQHandler+0x1e4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00e      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1b      	ldr	r2, [pc, #108]	; (8006be0 <HAL_DMA_IRQHandler+0x1e8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d009      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <HAL_DMA_IRQHandler+0x1ec>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d004      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x194>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <HAL_DMA_IRQHandler+0x1f0>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d12f      	bne.n	8006bec <HAL_DMA_IRQHandler+0x1f4>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	bf14      	ite	ne
 8006b9a:	2301      	movne	r3, #1
 8006b9c:	2300      	moveq	r3, #0
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	e02e      	b.n	8006c00 <HAL_DMA_IRQHandler+0x208>
 8006ba2:	bf00      	nop
 8006ba4:	24000000 	.word	0x24000000
 8006ba8:	1b4e81b5 	.word	0x1b4e81b5
 8006bac:	40020010 	.word	0x40020010
 8006bb0:	40020028 	.word	0x40020028
 8006bb4:	40020040 	.word	0x40020040
 8006bb8:	40020058 	.word	0x40020058
 8006bbc:	40020070 	.word	0x40020070
 8006bc0:	40020088 	.word	0x40020088
 8006bc4:	400200a0 	.word	0x400200a0
 8006bc8:	400200b8 	.word	0x400200b8
 8006bcc:	40020410 	.word	0x40020410
 8006bd0:	40020428 	.word	0x40020428
 8006bd4:	40020440 	.word	0x40020440
 8006bd8:	40020458 	.word	0x40020458
 8006bdc:	40020470 	.word	0x40020470
 8006be0:	40020488 	.word	0x40020488
 8006be4:	400204a0 	.word	0x400204a0
 8006be8:	400204b8 	.word	0x400204b8
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bf14      	ite	ne
 8006bfa:	2301      	movne	r3, #1
 8006bfc:	2300      	moveq	r3, #0
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d015      	beq.n	8006c30 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0204 	bic.w	r2, r2, #4
 8006c12:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	409a      	lsls	r2, r3
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c28:	f043 0201 	orr.w	r2, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d06e      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a69      	ldr	r2, [pc, #420]	; (8006df0 <HAL_DMA_IRQHandler+0x3f8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d04a      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a67      	ldr	r2, [pc, #412]	; (8006df4 <HAL_DMA_IRQHandler+0x3fc>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d045      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a66      	ldr	r2, [pc, #408]	; (8006df8 <HAL_DMA_IRQHandler+0x400>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d040      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a64      	ldr	r2, [pc, #400]	; (8006dfc <HAL_DMA_IRQHandler+0x404>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d03b      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a63      	ldr	r2, [pc, #396]	; (8006e00 <HAL_DMA_IRQHandler+0x408>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d036      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a61      	ldr	r2, [pc, #388]	; (8006e04 <HAL_DMA_IRQHandler+0x40c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d031      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a60      	ldr	r2, [pc, #384]	; (8006e08 <HAL_DMA_IRQHandler+0x410>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d02c      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a5e      	ldr	r2, [pc, #376]	; (8006e0c <HAL_DMA_IRQHandler+0x414>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d027      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a5d      	ldr	r2, [pc, #372]	; (8006e10 <HAL_DMA_IRQHandler+0x418>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d022      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a5b      	ldr	r2, [pc, #364]	; (8006e14 <HAL_DMA_IRQHandler+0x41c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d01d      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a5a      	ldr	r2, [pc, #360]	; (8006e18 <HAL_DMA_IRQHandler+0x420>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d018      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a58      	ldr	r2, [pc, #352]	; (8006e1c <HAL_DMA_IRQHandler+0x424>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d013      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a57      	ldr	r2, [pc, #348]	; (8006e20 <HAL_DMA_IRQHandler+0x428>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00e      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a55      	ldr	r2, [pc, #340]	; (8006e24 <HAL_DMA_IRQHandler+0x42c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d009      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a54      	ldr	r2, [pc, #336]	; (8006e28 <HAL_DMA_IRQHandler+0x430>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d004      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2ee>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a52      	ldr	r2, [pc, #328]	; (8006e2c <HAL_DMA_IRQHandler+0x434>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d10a      	bne.n	8006cfc <HAL_DMA_IRQHandler+0x304>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	bf14      	ite	ne
 8006cf4:	2301      	movne	r3, #1
 8006cf6:	2300      	moveq	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	e003      	b.n	8006d04 <HAL_DMA_IRQHandler+0x30c>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2300      	movs	r3, #0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00d      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0c:	f003 031f 	and.w	r3, r3, #31
 8006d10:	2201      	movs	r2, #1
 8006d12:	409a      	lsls	r2, r3
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1c:	f043 0202 	orr.w	r2, r3, #2
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 808f 	beq.w	8006e58 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a2c      	ldr	r2, [pc, #176]	; (8006df0 <HAL_DMA_IRQHandler+0x3f8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d04a      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a2a      	ldr	r2, [pc, #168]	; (8006df4 <HAL_DMA_IRQHandler+0x3fc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d045      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a29      	ldr	r2, [pc, #164]	; (8006df8 <HAL_DMA_IRQHandler+0x400>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d040      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a27      	ldr	r2, [pc, #156]	; (8006dfc <HAL_DMA_IRQHandler+0x404>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d03b      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a26      	ldr	r2, [pc, #152]	; (8006e00 <HAL_DMA_IRQHandler+0x408>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d036      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a24      	ldr	r2, [pc, #144]	; (8006e04 <HAL_DMA_IRQHandler+0x40c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d031      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a23      	ldr	r2, [pc, #140]	; (8006e08 <HAL_DMA_IRQHandler+0x410>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d02c      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a21      	ldr	r2, [pc, #132]	; (8006e0c <HAL_DMA_IRQHandler+0x414>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d027      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a20      	ldr	r2, [pc, #128]	; (8006e10 <HAL_DMA_IRQHandler+0x418>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d022      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a1e      	ldr	r2, [pc, #120]	; (8006e14 <HAL_DMA_IRQHandler+0x41c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d01d      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a1d      	ldr	r2, [pc, #116]	; (8006e18 <HAL_DMA_IRQHandler+0x420>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d018      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <HAL_DMA_IRQHandler+0x424>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1a      	ldr	r2, [pc, #104]	; (8006e20 <HAL_DMA_IRQHandler+0x428>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00e      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a18      	ldr	r2, [pc, #96]	; (8006e24 <HAL_DMA_IRQHandler+0x42c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d009      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a17      	ldr	r2, [pc, #92]	; (8006e28 <HAL_DMA_IRQHandler+0x430>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <HAL_DMA_IRQHandler+0x3e2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a15      	ldr	r2, [pc, #84]	; (8006e2c <HAL_DMA_IRQHandler+0x434>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d12a      	bne.n	8006e30 <HAL_DMA_IRQHandler+0x438>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf14      	ite	ne
 8006de8:	2301      	movne	r3, #1
 8006dea:	2300      	moveq	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	e023      	b.n	8006e38 <HAL_DMA_IRQHandler+0x440>
 8006df0:	40020010 	.word	0x40020010
 8006df4:	40020028 	.word	0x40020028
 8006df8:	40020040 	.word	0x40020040
 8006dfc:	40020058 	.word	0x40020058
 8006e00:	40020070 	.word	0x40020070
 8006e04:	40020088 	.word	0x40020088
 8006e08:	400200a0 	.word	0x400200a0
 8006e0c:	400200b8 	.word	0x400200b8
 8006e10:	40020410 	.word	0x40020410
 8006e14:	40020428 	.word	0x40020428
 8006e18:	40020440 	.word	0x40020440
 8006e1c:	40020458 	.word	0x40020458
 8006e20:	40020470 	.word	0x40020470
 8006e24:	40020488 	.word	0x40020488
 8006e28:	400204a0 	.word	0x400204a0
 8006e2c:	400204b8 	.word	0x400204b8
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2300      	movs	r3, #0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00d      	beq.n	8006e58 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	2204      	movs	r2, #4
 8006e46:	409a      	lsls	r2, r3
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	f043 0204 	orr.w	r2, r3, #4
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	2210      	movs	r2, #16
 8006e62:	409a      	lsls	r2, r3
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80a6 	beq.w	8006fba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a85      	ldr	r2, [pc, #532]	; (8007088 <HAL_DMA_IRQHandler+0x690>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d04a      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a83      	ldr	r2, [pc, #524]	; (800708c <HAL_DMA_IRQHandler+0x694>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d045      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a82      	ldr	r2, [pc, #520]	; (8007090 <HAL_DMA_IRQHandler+0x698>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d040      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a80      	ldr	r2, [pc, #512]	; (8007094 <HAL_DMA_IRQHandler+0x69c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d03b      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a7f      	ldr	r2, [pc, #508]	; (8007098 <HAL_DMA_IRQHandler+0x6a0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d036      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a7d      	ldr	r2, [pc, #500]	; (800709c <HAL_DMA_IRQHandler+0x6a4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d031      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a7c      	ldr	r2, [pc, #496]	; (80070a0 <HAL_DMA_IRQHandler+0x6a8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d02c      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a7a      	ldr	r2, [pc, #488]	; (80070a4 <HAL_DMA_IRQHandler+0x6ac>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d027      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a79      	ldr	r2, [pc, #484]	; (80070a8 <HAL_DMA_IRQHandler+0x6b0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d022      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a77      	ldr	r2, [pc, #476]	; (80070ac <HAL_DMA_IRQHandler+0x6b4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d01d      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a76      	ldr	r2, [pc, #472]	; (80070b0 <HAL_DMA_IRQHandler+0x6b8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d018      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a74      	ldr	r2, [pc, #464]	; (80070b4 <HAL_DMA_IRQHandler+0x6bc>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d013      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a73      	ldr	r2, [pc, #460]	; (80070b8 <HAL_DMA_IRQHandler+0x6c0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d00e      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a71      	ldr	r2, [pc, #452]	; (80070bc <HAL_DMA_IRQHandler+0x6c4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d009      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a70      	ldr	r2, [pc, #448]	; (80070c0 <HAL_DMA_IRQHandler+0x6c8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d004      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x516>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a6e      	ldr	r2, [pc, #440]	; (80070c4 <HAL_DMA_IRQHandler+0x6cc>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d10a      	bne.n	8006f24 <HAL_DMA_IRQHandler+0x52c>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bf14      	ite	ne
 8006f1c:	2301      	movne	r3, #1
 8006f1e:	2300      	moveq	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	e009      	b.n	8006f38 <HAL_DMA_IRQHandler+0x540>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0304 	and.w	r3, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bf14      	ite	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	2300      	moveq	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d03e      	beq.n	8006fba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	2210      	movs	r2, #16
 8006f46:	409a      	lsls	r2, r3
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d018      	beq.n	8006f8c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d108      	bne.n	8006f7a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d024      	beq.n	8006fba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
 8006f78:	e01f      	b.n	8006fba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d01b      	beq.n	8006fba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
 8006f8a:	e016      	b.n	8006fba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d107      	bne.n	8006faa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0208 	bic.w	r2, r2, #8
 8006fa8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	409a      	lsls	r2, r3
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8110 	beq.w	80071f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a2c      	ldr	r2, [pc, #176]	; (8007088 <HAL_DMA_IRQHandler+0x690>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d04a      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a2b      	ldr	r2, [pc, #172]	; (800708c <HAL_DMA_IRQHandler+0x694>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d045      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a29      	ldr	r2, [pc, #164]	; (8007090 <HAL_DMA_IRQHandler+0x698>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d040      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a28      	ldr	r2, [pc, #160]	; (8007094 <HAL_DMA_IRQHandler+0x69c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d03b      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a26      	ldr	r2, [pc, #152]	; (8007098 <HAL_DMA_IRQHandler+0x6a0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d036      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a25      	ldr	r2, [pc, #148]	; (800709c <HAL_DMA_IRQHandler+0x6a4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d031      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a23      	ldr	r2, [pc, #140]	; (80070a0 <HAL_DMA_IRQHandler+0x6a8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d02c      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a22      	ldr	r2, [pc, #136]	; (80070a4 <HAL_DMA_IRQHandler+0x6ac>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d027      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a20      	ldr	r2, [pc, #128]	; (80070a8 <HAL_DMA_IRQHandler+0x6b0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d022      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1f      	ldr	r2, [pc, #124]	; (80070ac <HAL_DMA_IRQHandler+0x6b4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d01d      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1d      	ldr	r2, [pc, #116]	; (80070b0 <HAL_DMA_IRQHandler+0x6b8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d018      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a1c      	ldr	r2, [pc, #112]	; (80070b4 <HAL_DMA_IRQHandler+0x6bc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d013      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1a      	ldr	r2, [pc, #104]	; (80070b8 <HAL_DMA_IRQHandler+0x6c0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00e      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a19      	ldr	r2, [pc, #100]	; (80070bc <HAL_DMA_IRQHandler+0x6c4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d009      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a17      	ldr	r2, [pc, #92]	; (80070c0 <HAL_DMA_IRQHandler+0x6c8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d004      	beq.n	8007070 <HAL_DMA_IRQHandler+0x678>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a16      	ldr	r2, [pc, #88]	; (80070c4 <HAL_DMA_IRQHandler+0x6cc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d12b      	bne.n	80070c8 <HAL_DMA_IRQHandler+0x6d0>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0310 	and.w	r3, r3, #16
 800707a:	2b00      	cmp	r3, #0
 800707c:	bf14      	ite	ne
 800707e:	2301      	movne	r3, #1
 8007080:	2300      	moveq	r3, #0
 8007082:	b2db      	uxtb	r3, r3
 8007084:	e02a      	b.n	80070dc <HAL_DMA_IRQHandler+0x6e4>
 8007086:	bf00      	nop
 8007088:	40020010 	.word	0x40020010
 800708c:	40020028 	.word	0x40020028
 8007090:	40020040 	.word	0x40020040
 8007094:	40020058 	.word	0x40020058
 8007098:	40020070 	.word	0x40020070
 800709c:	40020088 	.word	0x40020088
 80070a0:	400200a0 	.word	0x400200a0
 80070a4:	400200b8 	.word	0x400200b8
 80070a8:	40020410 	.word	0x40020410
 80070ac:	40020428 	.word	0x40020428
 80070b0:	40020440 	.word	0x40020440
 80070b4:	40020458 	.word	0x40020458
 80070b8:	40020470 	.word	0x40020470
 80070bc:	40020488 	.word	0x40020488
 80070c0:	400204a0 	.word	0x400204a0
 80070c4:	400204b8 	.word	0x400204b8
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bf14      	ite	ne
 80070d6:	2301      	movne	r3, #1
 80070d8:	2300      	moveq	r3, #0
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8087 	beq.w	80071f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e6:	f003 031f 	and.w	r3, r3, #31
 80070ea:	2220      	movs	r2, #32
 80070ec:	409a      	lsls	r2, r3
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d139      	bne.n	8007172 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0216 	bic.w	r2, r2, #22
 800710c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695a      	ldr	r2, [r3, #20]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800711c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	2b00      	cmp	r3, #0
 8007124:	d103      	bne.n	800712e <HAL_DMA_IRQHandler+0x736>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712a:	2b00      	cmp	r3, #0
 800712c:	d007      	beq.n	800713e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0208 	bic.w	r2, r2, #8
 800713c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	223f      	movs	r2, #63	; 0x3f
 8007148:	409a      	lsls	r2, r3
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 834a 	beq.w	80077fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	4798      	blx	r3
          }
          return;
 8007170:	e344      	b.n	80077fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d018      	beq.n	80071b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d108      	bne.n	80071a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	2b00      	cmp	r3, #0
 8007194:	d02c      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4798      	blx	r3
 800719e:	e027      	b.n	80071f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d023      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	4798      	blx	r3
 80071b0:	e01e      	b.n	80071f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10f      	bne.n	80071e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0210 	bic.w	r2, r2, #16
 80071ce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 8306 	beq.w	8007806 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 8088 	beq.w	8007318 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2204      	movs	r2, #4
 800720c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a7a      	ldr	r2, [pc, #488]	; (8007400 <HAL_DMA_IRQHandler+0xa08>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d04a      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a79      	ldr	r2, [pc, #484]	; (8007404 <HAL_DMA_IRQHandler+0xa0c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d045      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a77      	ldr	r2, [pc, #476]	; (8007408 <HAL_DMA_IRQHandler+0xa10>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d040      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a76      	ldr	r2, [pc, #472]	; (800740c <HAL_DMA_IRQHandler+0xa14>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d03b      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a74      	ldr	r2, [pc, #464]	; (8007410 <HAL_DMA_IRQHandler+0xa18>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d036      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a73      	ldr	r2, [pc, #460]	; (8007414 <HAL_DMA_IRQHandler+0xa1c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d031      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a71      	ldr	r2, [pc, #452]	; (8007418 <HAL_DMA_IRQHandler+0xa20>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d02c      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a70      	ldr	r2, [pc, #448]	; (800741c <HAL_DMA_IRQHandler+0xa24>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d027      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a6e      	ldr	r2, [pc, #440]	; (8007420 <HAL_DMA_IRQHandler+0xa28>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d022      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a6d      	ldr	r2, [pc, #436]	; (8007424 <HAL_DMA_IRQHandler+0xa2c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d01d      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a6b      	ldr	r2, [pc, #428]	; (8007428 <HAL_DMA_IRQHandler+0xa30>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d018      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a6a      	ldr	r2, [pc, #424]	; (800742c <HAL_DMA_IRQHandler+0xa34>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d013      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a68      	ldr	r2, [pc, #416]	; (8007430 <HAL_DMA_IRQHandler+0xa38>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00e      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a67      	ldr	r2, [pc, #412]	; (8007434 <HAL_DMA_IRQHandler+0xa3c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d009      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a65      	ldr	r2, [pc, #404]	; (8007438 <HAL_DMA_IRQHandler+0xa40>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d004      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x8b8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a64      	ldr	r2, [pc, #400]	; (800743c <HAL_DMA_IRQHandler+0xa44>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d108      	bne.n	80072c2 <HAL_DMA_IRQHandler+0x8ca>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0201 	bic.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	e007      	b.n	80072d2 <HAL_DMA_IRQHandler+0x8da>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0201 	bic.w	r2, r2, #1
 80072d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3301      	adds	r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072da:	429a      	cmp	r2, r3
 80072dc:	d307      	bcc.n	80072ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1f2      	bne.n	80072d2 <HAL_DMA_IRQHandler+0x8da>
 80072ec:	e000      	b.n	80072f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80072ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d004      	beq.n	8007308 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2203      	movs	r2, #3
 8007302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007306:	e003      	b.n	8007310 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8272 	beq.w	8007806 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
 800732a:	e26c      	b.n	8007806 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a43      	ldr	r2, [pc, #268]	; (8007440 <HAL_DMA_IRQHandler+0xa48>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d022      	beq.n	800737c <HAL_DMA_IRQHandler+0x984>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a42      	ldr	r2, [pc, #264]	; (8007444 <HAL_DMA_IRQHandler+0xa4c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d01d      	beq.n	800737c <HAL_DMA_IRQHandler+0x984>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a40      	ldr	r2, [pc, #256]	; (8007448 <HAL_DMA_IRQHandler+0xa50>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d018      	beq.n	800737c <HAL_DMA_IRQHandler+0x984>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a3f      	ldr	r2, [pc, #252]	; (800744c <HAL_DMA_IRQHandler+0xa54>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d013      	beq.n	800737c <HAL_DMA_IRQHandler+0x984>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a3d      	ldr	r2, [pc, #244]	; (8007450 <HAL_DMA_IRQHandler+0xa58>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00e      	beq.n	800737c <HAL_DMA_IRQHandler+0x984>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a3c      	ldr	r2, [pc, #240]	; (8007454 <HAL_DMA_IRQHandler+0xa5c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d009      	beq.n	800737c <HAL_DMA_IRQHandler+0x984>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a3a      	ldr	r2, [pc, #232]	; (8007458 <HAL_DMA_IRQHandler+0xa60>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <HAL_DMA_IRQHandler+0x984>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a39      	ldr	r2, [pc, #228]	; (800745c <HAL_DMA_IRQHandler+0xa64>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d101      	bne.n	8007380 <HAL_DMA_IRQHandler+0x988>
 800737c:	2301      	movs	r3, #1
 800737e:	e000      	b.n	8007382 <HAL_DMA_IRQHandler+0x98a>
 8007380:	2300      	movs	r3, #0
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 823f 	beq.w	8007806 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007394:	f003 031f 	and.w	r3, r3, #31
 8007398:	2204      	movs	r2, #4
 800739a:	409a      	lsls	r2, r3
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	4013      	ands	r3, r2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80cd 	beq.w	8007540 <HAL_DMA_IRQHandler+0xb48>
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80c7 	beq.w	8007540 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b6:	f003 031f 	and.w	r3, r3, #31
 80073ba:	2204      	movs	r2, #4
 80073bc:	409a      	lsls	r2, r3
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d049      	beq.n	8007460 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 8210 	beq.w	8007800 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073e8:	e20a      	b.n	8007800 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 8206 	beq.w	8007800 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073fc:	e200      	b.n	8007800 <HAL_DMA_IRQHandler+0xe08>
 80073fe:	bf00      	nop
 8007400:	40020010 	.word	0x40020010
 8007404:	40020028 	.word	0x40020028
 8007408:	40020040 	.word	0x40020040
 800740c:	40020058 	.word	0x40020058
 8007410:	40020070 	.word	0x40020070
 8007414:	40020088 	.word	0x40020088
 8007418:	400200a0 	.word	0x400200a0
 800741c:	400200b8 	.word	0x400200b8
 8007420:	40020410 	.word	0x40020410
 8007424:	40020428 	.word	0x40020428
 8007428:	40020440 	.word	0x40020440
 800742c:	40020458 	.word	0x40020458
 8007430:	40020470 	.word	0x40020470
 8007434:	40020488 	.word	0x40020488
 8007438:	400204a0 	.word	0x400204a0
 800743c:	400204b8 	.word	0x400204b8
 8007440:	58025408 	.word	0x58025408
 8007444:	5802541c 	.word	0x5802541c
 8007448:	58025430 	.word	0x58025430
 800744c:	58025444 	.word	0x58025444
 8007450:	58025458 	.word	0x58025458
 8007454:	5802546c 	.word	0x5802546c
 8007458:	58025480 	.word	0x58025480
 800745c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d160      	bne.n	800752c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a7f      	ldr	r2, [pc, #508]	; (800766c <HAL_DMA_IRQHandler+0xc74>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d04a      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a7d      	ldr	r2, [pc, #500]	; (8007670 <HAL_DMA_IRQHandler+0xc78>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d045      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a7c      	ldr	r2, [pc, #496]	; (8007674 <HAL_DMA_IRQHandler+0xc7c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d040      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a7a      	ldr	r2, [pc, #488]	; (8007678 <HAL_DMA_IRQHandler+0xc80>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d03b      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a79      	ldr	r2, [pc, #484]	; (800767c <HAL_DMA_IRQHandler+0xc84>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d036      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a77      	ldr	r2, [pc, #476]	; (8007680 <HAL_DMA_IRQHandler+0xc88>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d031      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a76      	ldr	r2, [pc, #472]	; (8007684 <HAL_DMA_IRQHandler+0xc8c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d02c      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a74      	ldr	r2, [pc, #464]	; (8007688 <HAL_DMA_IRQHandler+0xc90>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d027      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a73      	ldr	r2, [pc, #460]	; (800768c <HAL_DMA_IRQHandler+0xc94>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d022      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a71      	ldr	r2, [pc, #452]	; (8007690 <HAL_DMA_IRQHandler+0xc98>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01d      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a70      	ldr	r2, [pc, #448]	; (8007694 <HAL_DMA_IRQHandler+0xc9c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d018      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a6e      	ldr	r2, [pc, #440]	; (8007698 <HAL_DMA_IRQHandler+0xca0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d013      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a6d      	ldr	r2, [pc, #436]	; (800769c <HAL_DMA_IRQHandler+0xca4>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00e      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a6b      	ldr	r2, [pc, #428]	; (80076a0 <HAL_DMA_IRQHandler+0xca8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d009      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a6a      	ldr	r2, [pc, #424]	; (80076a4 <HAL_DMA_IRQHandler+0xcac>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d004      	beq.n	800750a <HAL_DMA_IRQHandler+0xb12>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a68      	ldr	r2, [pc, #416]	; (80076a8 <HAL_DMA_IRQHandler+0xcb0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d108      	bne.n	800751c <HAL_DMA_IRQHandler+0xb24>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0208 	bic.w	r2, r2, #8
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e007      	b.n	800752c <HAL_DMA_IRQHandler+0xb34>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0204 	bic.w	r2, r2, #4
 800752a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 8165 	beq.w	8007800 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800753e:	e15f      	b.n	8007800 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007544:	f003 031f 	and.w	r3, r3, #31
 8007548:	2202      	movs	r2, #2
 800754a:	409a      	lsls	r2, r3
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	4013      	ands	r3, r2
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 80c5 	beq.w	80076e0 <HAL_DMA_IRQHandler+0xce8>
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 80bf 	beq.w	80076e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007566:	f003 031f 	and.w	r3, r3, #31
 800756a:	2202      	movs	r2, #2
 800756c:	409a      	lsls	r2, r3
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d018      	beq.n	80075ae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d109      	bne.n	800759a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 813a 	beq.w	8007804 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007598:	e134      	b.n	8007804 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 8130 	beq.w	8007804 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075ac:	e12a      	b.n	8007804 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f040 8089 	bne.w	80076cc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a2b      	ldr	r2, [pc, #172]	; (800766c <HAL_DMA_IRQHandler+0xc74>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d04a      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a29      	ldr	r2, [pc, #164]	; (8007670 <HAL_DMA_IRQHandler+0xc78>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d045      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a28      	ldr	r2, [pc, #160]	; (8007674 <HAL_DMA_IRQHandler+0xc7c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d040      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a26      	ldr	r2, [pc, #152]	; (8007678 <HAL_DMA_IRQHandler+0xc80>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d03b      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a25      	ldr	r2, [pc, #148]	; (800767c <HAL_DMA_IRQHandler+0xc84>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d036      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a23      	ldr	r2, [pc, #140]	; (8007680 <HAL_DMA_IRQHandler+0xc88>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d031      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a22      	ldr	r2, [pc, #136]	; (8007684 <HAL_DMA_IRQHandler+0xc8c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d02c      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a20      	ldr	r2, [pc, #128]	; (8007688 <HAL_DMA_IRQHandler+0xc90>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d027      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a1f      	ldr	r2, [pc, #124]	; (800768c <HAL_DMA_IRQHandler+0xc94>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d022      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a1d      	ldr	r2, [pc, #116]	; (8007690 <HAL_DMA_IRQHandler+0xc98>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d01d      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a1c      	ldr	r2, [pc, #112]	; (8007694 <HAL_DMA_IRQHandler+0xc9c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d018      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a1a      	ldr	r2, [pc, #104]	; (8007698 <HAL_DMA_IRQHandler+0xca0>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a19      	ldr	r2, [pc, #100]	; (800769c <HAL_DMA_IRQHandler+0xca4>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00e      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a17      	ldr	r2, [pc, #92]	; (80076a0 <HAL_DMA_IRQHandler+0xca8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d009      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a16      	ldr	r2, [pc, #88]	; (80076a4 <HAL_DMA_IRQHandler+0xcac>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <HAL_DMA_IRQHandler+0xc62>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a14      	ldr	r2, [pc, #80]	; (80076a8 <HAL_DMA_IRQHandler+0xcb0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d128      	bne.n	80076ac <HAL_DMA_IRQHandler+0xcb4>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0214 	bic.w	r2, r2, #20
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	e027      	b.n	80076bc <HAL_DMA_IRQHandler+0xcc4>
 800766c:	40020010 	.word	0x40020010
 8007670:	40020028 	.word	0x40020028
 8007674:	40020040 	.word	0x40020040
 8007678:	40020058 	.word	0x40020058
 800767c:	40020070 	.word	0x40020070
 8007680:	40020088 	.word	0x40020088
 8007684:	400200a0 	.word	0x400200a0
 8007688:	400200b8 	.word	0x400200b8
 800768c:	40020410 	.word	0x40020410
 8007690:	40020428 	.word	0x40020428
 8007694:	40020440 	.word	0x40020440
 8007698:	40020458 	.word	0x40020458
 800769c:	40020470 	.word	0x40020470
 80076a0:	40020488 	.word	0x40020488
 80076a4:	400204a0 	.word	0x400204a0
 80076a8:	400204b8 	.word	0x400204b8
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 020a 	bic.w	r2, r2, #10
 80076ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8097 	beq.w	8007804 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076de:	e091      	b.n	8007804 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e4:	f003 031f 	and.w	r3, r3, #31
 80076e8:	2208      	movs	r2, #8
 80076ea:	409a      	lsls	r2, r3
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	4013      	ands	r3, r2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 8088 	beq.w	8007806 <HAL_DMA_IRQHandler+0xe0e>
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 8082 	beq.w	8007806 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a41      	ldr	r2, [pc, #260]	; (800780c <HAL_DMA_IRQHandler+0xe14>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d04a      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a3f      	ldr	r2, [pc, #252]	; (8007810 <HAL_DMA_IRQHandler+0xe18>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d045      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a3e      	ldr	r2, [pc, #248]	; (8007814 <HAL_DMA_IRQHandler+0xe1c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d040      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a3c      	ldr	r2, [pc, #240]	; (8007818 <HAL_DMA_IRQHandler+0xe20>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d03b      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a3b      	ldr	r2, [pc, #236]	; (800781c <HAL_DMA_IRQHandler+0xe24>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d036      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a39      	ldr	r2, [pc, #228]	; (8007820 <HAL_DMA_IRQHandler+0xe28>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d031      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a38      	ldr	r2, [pc, #224]	; (8007824 <HAL_DMA_IRQHandler+0xe2c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d02c      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a36      	ldr	r2, [pc, #216]	; (8007828 <HAL_DMA_IRQHandler+0xe30>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d027      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a35      	ldr	r2, [pc, #212]	; (800782c <HAL_DMA_IRQHandler+0xe34>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d022      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a33      	ldr	r2, [pc, #204]	; (8007830 <HAL_DMA_IRQHandler+0xe38>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d01d      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a32      	ldr	r2, [pc, #200]	; (8007834 <HAL_DMA_IRQHandler+0xe3c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d018      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a30      	ldr	r2, [pc, #192]	; (8007838 <HAL_DMA_IRQHandler+0xe40>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a2f      	ldr	r2, [pc, #188]	; (800783c <HAL_DMA_IRQHandler+0xe44>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00e      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a2d      	ldr	r2, [pc, #180]	; (8007840 <HAL_DMA_IRQHandler+0xe48>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d009      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a2c      	ldr	r2, [pc, #176]	; (8007844 <HAL_DMA_IRQHandler+0xe4c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d004      	beq.n	80077a2 <HAL_DMA_IRQHandler+0xdaa>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a2a      	ldr	r2, [pc, #168]	; (8007848 <HAL_DMA_IRQHandler+0xe50>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d108      	bne.n	80077b4 <HAL_DMA_IRQHandler+0xdbc>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 021c 	bic.w	r2, r2, #28
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	e007      	b.n	80077c4 <HAL_DMA_IRQHandler+0xdcc>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 020e 	bic.w	r2, r2, #14
 80077c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	2201      	movs	r2, #1
 80077ce:	409a      	lsls	r2, r3
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d009      	beq.n	8007806 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
 80077fa:	e004      	b.n	8007806 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80077fc:	bf00      	nop
 80077fe:	e002      	b.n	8007806 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007800:	bf00      	nop
 8007802:	e000      	b.n	8007806 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007804:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007806:	3728      	adds	r7, #40	; 0x28
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	40020010 	.word	0x40020010
 8007810:	40020028 	.word	0x40020028
 8007814:	40020040 	.word	0x40020040
 8007818:	40020058 	.word	0x40020058
 800781c:	40020070 	.word	0x40020070
 8007820:	40020088 	.word	0x40020088
 8007824:	400200a0 	.word	0x400200a0
 8007828:	400200b8 	.word	0x400200b8
 800782c:	40020410 	.word	0x40020410
 8007830:	40020428 	.word	0x40020428
 8007834:	40020440 	.word	0x40020440
 8007838:	40020458 	.word	0x40020458
 800783c:	40020470 	.word	0x40020470
 8007840:	40020488 	.word	0x40020488
 8007844:	400204a0 	.word	0x400204a0
 8007848:	400204b8 	.word	0x400204b8

0800784c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007864:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a7f      	ldr	r2, [pc, #508]	; (8007a68 <DMA_SetConfig+0x21c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d072      	beq.n	8007956 <DMA_SetConfig+0x10a>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a7d      	ldr	r2, [pc, #500]	; (8007a6c <DMA_SetConfig+0x220>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d06d      	beq.n	8007956 <DMA_SetConfig+0x10a>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a7c      	ldr	r2, [pc, #496]	; (8007a70 <DMA_SetConfig+0x224>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d068      	beq.n	8007956 <DMA_SetConfig+0x10a>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a7a      	ldr	r2, [pc, #488]	; (8007a74 <DMA_SetConfig+0x228>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d063      	beq.n	8007956 <DMA_SetConfig+0x10a>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a79      	ldr	r2, [pc, #484]	; (8007a78 <DMA_SetConfig+0x22c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d05e      	beq.n	8007956 <DMA_SetConfig+0x10a>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a77      	ldr	r2, [pc, #476]	; (8007a7c <DMA_SetConfig+0x230>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d059      	beq.n	8007956 <DMA_SetConfig+0x10a>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a76      	ldr	r2, [pc, #472]	; (8007a80 <DMA_SetConfig+0x234>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d054      	beq.n	8007956 <DMA_SetConfig+0x10a>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a74      	ldr	r2, [pc, #464]	; (8007a84 <DMA_SetConfig+0x238>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d04f      	beq.n	8007956 <DMA_SetConfig+0x10a>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a73      	ldr	r2, [pc, #460]	; (8007a88 <DMA_SetConfig+0x23c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d04a      	beq.n	8007956 <DMA_SetConfig+0x10a>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a71      	ldr	r2, [pc, #452]	; (8007a8c <DMA_SetConfig+0x240>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d045      	beq.n	8007956 <DMA_SetConfig+0x10a>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a70      	ldr	r2, [pc, #448]	; (8007a90 <DMA_SetConfig+0x244>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d040      	beq.n	8007956 <DMA_SetConfig+0x10a>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a6e      	ldr	r2, [pc, #440]	; (8007a94 <DMA_SetConfig+0x248>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d03b      	beq.n	8007956 <DMA_SetConfig+0x10a>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a6d      	ldr	r2, [pc, #436]	; (8007a98 <DMA_SetConfig+0x24c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d036      	beq.n	8007956 <DMA_SetConfig+0x10a>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a6b      	ldr	r2, [pc, #428]	; (8007a9c <DMA_SetConfig+0x250>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d031      	beq.n	8007956 <DMA_SetConfig+0x10a>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a6a      	ldr	r2, [pc, #424]	; (8007aa0 <DMA_SetConfig+0x254>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d02c      	beq.n	8007956 <DMA_SetConfig+0x10a>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a68      	ldr	r2, [pc, #416]	; (8007aa4 <DMA_SetConfig+0x258>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d027      	beq.n	8007956 <DMA_SetConfig+0x10a>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a67      	ldr	r2, [pc, #412]	; (8007aa8 <DMA_SetConfig+0x25c>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d022      	beq.n	8007956 <DMA_SetConfig+0x10a>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a65      	ldr	r2, [pc, #404]	; (8007aac <DMA_SetConfig+0x260>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d01d      	beq.n	8007956 <DMA_SetConfig+0x10a>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a64      	ldr	r2, [pc, #400]	; (8007ab0 <DMA_SetConfig+0x264>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d018      	beq.n	8007956 <DMA_SetConfig+0x10a>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a62      	ldr	r2, [pc, #392]	; (8007ab4 <DMA_SetConfig+0x268>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d013      	beq.n	8007956 <DMA_SetConfig+0x10a>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a61      	ldr	r2, [pc, #388]	; (8007ab8 <DMA_SetConfig+0x26c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00e      	beq.n	8007956 <DMA_SetConfig+0x10a>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a5f      	ldr	r2, [pc, #380]	; (8007abc <DMA_SetConfig+0x270>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d009      	beq.n	8007956 <DMA_SetConfig+0x10a>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a5e      	ldr	r2, [pc, #376]	; (8007ac0 <DMA_SetConfig+0x274>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d004      	beq.n	8007956 <DMA_SetConfig+0x10a>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a5c      	ldr	r2, [pc, #368]	; (8007ac4 <DMA_SetConfig+0x278>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d101      	bne.n	800795a <DMA_SetConfig+0x10e>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <DMA_SetConfig+0x110>
 800795a:	2300      	movs	r3, #0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00d      	beq.n	800797c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007968:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d004      	beq.n	800797c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800797a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a39      	ldr	r2, [pc, #228]	; (8007a68 <DMA_SetConfig+0x21c>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d04a      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a38      	ldr	r2, [pc, #224]	; (8007a6c <DMA_SetConfig+0x220>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d045      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a36      	ldr	r2, [pc, #216]	; (8007a70 <DMA_SetConfig+0x224>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d040      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a35      	ldr	r2, [pc, #212]	; (8007a74 <DMA_SetConfig+0x228>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d03b      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a33      	ldr	r2, [pc, #204]	; (8007a78 <DMA_SetConfig+0x22c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d036      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a32      	ldr	r2, [pc, #200]	; (8007a7c <DMA_SetConfig+0x230>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d031      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a30      	ldr	r2, [pc, #192]	; (8007a80 <DMA_SetConfig+0x234>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d02c      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a2f      	ldr	r2, [pc, #188]	; (8007a84 <DMA_SetConfig+0x238>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d027      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a2d      	ldr	r2, [pc, #180]	; (8007a88 <DMA_SetConfig+0x23c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d022      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a2c      	ldr	r2, [pc, #176]	; (8007a8c <DMA_SetConfig+0x240>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d01d      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a2a      	ldr	r2, [pc, #168]	; (8007a90 <DMA_SetConfig+0x244>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d018      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a29      	ldr	r2, [pc, #164]	; (8007a94 <DMA_SetConfig+0x248>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d013      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a27      	ldr	r2, [pc, #156]	; (8007a98 <DMA_SetConfig+0x24c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00e      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a26      	ldr	r2, [pc, #152]	; (8007a9c <DMA_SetConfig+0x250>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d009      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a24      	ldr	r2, [pc, #144]	; (8007aa0 <DMA_SetConfig+0x254>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d004      	beq.n	8007a1c <DMA_SetConfig+0x1d0>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a23      	ldr	r2, [pc, #140]	; (8007aa4 <DMA_SetConfig+0x258>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d101      	bne.n	8007a20 <DMA_SetConfig+0x1d4>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e000      	b.n	8007a22 <DMA_SetConfig+0x1d6>
 8007a20:	2300      	movs	r3, #0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d059      	beq.n	8007ada <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	223f      	movs	r2, #63	; 0x3f
 8007a30:	409a      	lsls	r2, r3
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a44:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b40      	cmp	r3, #64	; 0x40
 8007a54:	d138      	bne.n	8007ac8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a66:	e086      	b.n	8007b76 <DMA_SetConfig+0x32a>
 8007a68:	40020010 	.word	0x40020010
 8007a6c:	40020028 	.word	0x40020028
 8007a70:	40020040 	.word	0x40020040
 8007a74:	40020058 	.word	0x40020058
 8007a78:	40020070 	.word	0x40020070
 8007a7c:	40020088 	.word	0x40020088
 8007a80:	400200a0 	.word	0x400200a0
 8007a84:	400200b8 	.word	0x400200b8
 8007a88:	40020410 	.word	0x40020410
 8007a8c:	40020428 	.word	0x40020428
 8007a90:	40020440 	.word	0x40020440
 8007a94:	40020458 	.word	0x40020458
 8007a98:	40020470 	.word	0x40020470
 8007a9c:	40020488 	.word	0x40020488
 8007aa0:	400204a0 	.word	0x400204a0
 8007aa4:	400204b8 	.word	0x400204b8
 8007aa8:	58025408 	.word	0x58025408
 8007aac:	5802541c 	.word	0x5802541c
 8007ab0:	58025430 	.word	0x58025430
 8007ab4:	58025444 	.word	0x58025444
 8007ab8:	58025458 	.word	0x58025458
 8007abc:	5802546c 	.word	0x5802546c
 8007ac0:	58025480 	.word	0x58025480
 8007ac4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	60da      	str	r2, [r3, #12]
}
 8007ad8:	e04d      	b.n	8007b76 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a29      	ldr	r2, [pc, #164]	; (8007b84 <DMA_SetConfig+0x338>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d022      	beq.n	8007b2a <DMA_SetConfig+0x2de>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a27      	ldr	r2, [pc, #156]	; (8007b88 <DMA_SetConfig+0x33c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01d      	beq.n	8007b2a <DMA_SetConfig+0x2de>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <DMA_SetConfig+0x340>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <DMA_SetConfig+0x2de>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a24      	ldr	r2, [pc, #144]	; (8007b90 <DMA_SetConfig+0x344>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <DMA_SetConfig+0x2de>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a23      	ldr	r2, [pc, #140]	; (8007b94 <DMA_SetConfig+0x348>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <DMA_SetConfig+0x2de>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <DMA_SetConfig+0x34c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <DMA_SetConfig+0x2de>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a20      	ldr	r2, [pc, #128]	; (8007b9c <DMA_SetConfig+0x350>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <DMA_SetConfig+0x2de>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1e      	ldr	r2, [pc, #120]	; (8007ba0 <DMA_SetConfig+0x354>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d101      	bne.n	8007b2e <DMA_SetConfig+0x2e2>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <DMA_SetConfig+0x2e4>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d020      	beq.n	8007b76 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	409a      	lsls	r2, r3
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b40      	cmp	r3, #64	; 0x40
 8007b52:	d108      	bne.n	8007b66 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	60da      	str	r2, [r3, #12]
}
 8007b64:	e007      	b.n	8007b76 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	60da      	str	r2, [r3, #12]
}
 8007b76:	bf00      	nop
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	58025408 	.word	0x58025408
 8007b88:	5802541c 	.word	0x5802541c
 8007b8c:	58025430 	.word	0x58025430
 8007b90:	58025444 	.word	0x58025444
 8007b94:	58025458 	.word	0x58025458
 8007b98:	5802546c 	.word	0x5802546c
 8007b9c:	58025480 	.word	0x58025480
 8007ba0:	58025494 	.word	0x58025494

08007ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a42      	ldr	r2, [pc, #264]	; (8007cbc <DMA_CalcBaseAndBitshift+0x118>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d04a      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a41      	ldr	r2, [pc, #260]	; (8007cc0 <DMA_CalcBaseAndBitshift+0x11c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d045      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a3f      	ldr	r2, [pc, #252]	; (8007cc4 <DMA_CalcBaseAndBitshift+0x120>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d040      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a3e      	ldr	r2, [pc, #248]	; (8007cc8 <DMA_CalcBaseAndBitshift+0x124>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d03b      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a3c      	ldr	r2, [pc, #240]	; (8007ccc <DMA_CalcBaseAndBitshift+0x128>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d036      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a3b      	ldr	r2, [pc, #236]	; (8007cd0 <DMA_CalcBaseAndBitshift+0x12c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d031      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a39      	ldr	r2, [pc, #228]	; (8007cd4 <DMA_CalcBaseAndBitshift+0x130>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d02c      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a38      	ldr	r2, [pc, #224]	; (8007cd8 <DMA_CalcBaseAndBitshift+0x134>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d027      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a36      	ldr	r2, [pc, #216]	; (8007cdc <DMA_CalcBaseAndBitshift+0x138>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d022      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a35      	ldr	r2, [pc, #212]	; (8007ce0 <DMA_CalcBaseAndBitshift+0x13c>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d01d      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a33      	ldr	r2, [pc, #204]	; (8007ce4 <DMA_CalcBaseAndBitshift+0x140>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d018      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a32      	ldr	r2, [pc, #200]	; (8007ce8 <DMA_CalcBaseAndBitshift+0x144>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d013      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a30      	ldr	r2, [pc, #192]	; (8007cec <DMA_CalcBaseAndBitshift+0x148>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00e      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a2f      	ldr	r2, [pc, #188]	; (8007cf0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d009      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a2d      	ldr	r2, [pc, #180]	; (8007cf4 <DMA_CalcBaseAndBitshift+0x150>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d004      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xa8>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a2c      	ldr	r2, [pc, #176]	; (8007cf8 <DMA_CalcBaseAndBitshift+0x154>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d101      	bne.n	8007c50 <DMA_CalcBaseAndBitshift+0xac>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e000      	b.n	8007c52 <DMA_CalcBaseAndBitshift+0xae>
 8007c50:	2300      	movs	r3, #0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d024      	beq.n	8007ca0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	3b10      	subs	r3, #16
 8007c5e:	4a27      	ldr	r2, [pc, #156]	; (8007cfc <DMA_CalcBaseAndBitshift+0x158>)
 8007c60:	fba2 2303 	umull	r2, r3, r2, r3
 8007c64:	091b      	lsrs	r3, r3, #4
 8007c66:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f003 0307 	and.w	r3, r3, #7
 8007c6e:	4a24      	ldr	r2, [pc, #144]	; (8007d00 <DMA_CalcBaseAndBitshift+0x15c>)
 8007c70:	5cd3      	ldrb	r3, [r2, r3]
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d908      	bls.n	8007c90 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	4b1f      	ldr	r3, [pc, #124]	; (8007d04 <DMA_CalcBaseAndBitshift+0x160>)
 8007c86:	4013      	ands	r3, r2
 8007c88:	1d1a      	adds	r2, r3, #4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	659a      	str	r2, [r3, #88]	; 0x58
 8007c8e:	e00d      	b.n	8007cac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	4b1b      	ldr	r3, [pc, #108]	; (8007d04 <DMA_CalcBaseAndBitshift+0x160>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c9e:	e005      	b.n	8007cac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	40020010 	.word	0x40020010
 8007cc0:	40020028 	.word	0x40020028
 8007cc4:	40020040 	.word	0x40020040
 8007cc8:	40020058 	.word	0x40020058
 8007ccc:	40020070 	.word	0x40020070
 8007cd0:	40020088 	.word	0x40020088
 8007cd4:	400200a0 	.word	0x400200a0
 8007cd8:	400200b8 	.word	0x400200b8
 8007cdc:	40020410 	.word	0x40020410
 8007ce0:	40020428 	.word	0x40020428
 8007ce4:	40020440 	.word	0x40020440
 8007ce8:	40020458 	.word	0x40020458
 8007cec:	40020470 	.word	0x40020470
 8007cf0:	40020488 	.word	0x40020488
 8007cf4:	400204a0 	.word	0x400204a0
 8007cf8:	400204b8 	.word	0x400204b8
 8007cfc:	aaaaaaab 	.word	0xaaaaaaab
 8007d00:	0801bf8c 	.word	0x0801bf8c
 8007d04:	fffffc00 	.word	0xfffffc00

08007d08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d120      	bne.n	8007d5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d858      	bhi.n	8007dd6 <DMA_CheckFifoParam+0xce>
 8007d24:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <DMA_CheckFifoParam+0x24>)
 8007d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2a:	bf00      	nop
 8007d2c:	08007d3d 	.word	0x08007d3d
 8007d30:	08007d4f 	.word	0x08007d4f
 8007d34:	08007d3d 	.word	0x08007d3d
 8007d38:	08007dd7 	.word	0x08007dd7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d048      	beq.n	8007dda <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d4c:	e045      	b.n	8007dda <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d56:	d142      	bne.n	8007dde <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d5c:	e03f      	b.n	8007dde <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d66:	d123      	bne.n	8007db0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d838      	bhi.n	8007de2 <DMA_CheckFifoParam+0xda>
 8007d70:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <DMA_CheckFifoParam+0x70>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007d89 	.word	0x08007d89
 8007d7c:	08007d8f 	.word	0x08007d8f
 8007d80:	08007d89 	.word	0x08007d89
 8007d84:	08007da1 	.word	0x08007da1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	73fb      	strb	r3, [r7, #15]
        break;
 8007d8c:	e030      	b.n	8007df0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d025      	beq.n	8007de6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d9e:	e022      	b.n	8007de6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007da8:	d11f      	bne.n	8007dea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007dae:	e01c      	b.n	8007dea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d902      	bls.n	8007dbe <DMA_CheckFifoParam+0xb6>
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d003      	beq.n	8007dc4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007dbc:	e018      	b.n	8007df0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	73fb      	strb	r3, [r7, #15]
        break;
 8007dc2:	e015      	b.n	8007df0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00e      	beq.n	8007dee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd4:	e00b      	b.n	8007dee <DMA_CheckFifoParam+0xe6>
        break;
 8007dd6:	bf00      	nop
 8007dd8:	e00a      	b.n	8007df0 <DMA_CheckFifoParam+0xe8>
        break;
 8007dda:	bf00      	nop
 8007ddc:	e008      	b.n	8007df0 <DMA_CheckFifoParam+0xe8>
        break;
 8007dde:	bf00      	nop
 8007de0:	e006      	b.n	8007df0 <DMA_CheckFifoParam+0xe8>
        break;
 8007de2:	bf00      	nop
 8007de4:	e004      	b.n	8007df0 <DMA_CheckFifoParam+0xe8>
        break;
 8007de6:	bf00      	nop
 8007de8:	e002      	b.n	8007df0 <DMA_CheckFifoParam+0xe8>
        break;
 8007dea:	bf00      	nop
 8007dec:	e000      	b.n	8007df0 <DMA_CheckFifoParam+0xe8>
    break;
 8007dee:	bf00      	nop
    }
  }

  return status;
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop

08007e00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a38      	ldr	r2, [pc, #224]	; (8007ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d022      	beq.n	8007e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a36      	ldr	r2, [pc, #216]	; (8007ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d01d      	beq.n	8007e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a35      	ldr	r2, [pc, #212]	; (8007efc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d018      	beq.n	8007e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a33      	ldr	r2, [pc, #204]	; (8007f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a32      	ldr	r2, [pc, #200]	; (8007f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00e      	beq.n	8007e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a30      	ldr	r2, [pc, #192]	; (8007f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d009      	beq.n	8007e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a2f      	ldr	r2, [pc, #188]	; (8007f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a2d      	ldr	r2, [pc, #180]	; (8007f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d101      	bne.n	8007e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e000      	b.n	8007e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007e62:	2300      	movs	r3, #0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01a      	beq.n	8007e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	3b08      	subs	r3, #8
 8007e70:	4a28      	ldr	r2, [pc, #160]	; (8007f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007e72:	fba2 2303 	umull	r2, r3, r2, r3
 8007e76:	091b      	lsrs	r3, r3, #4
 8007e78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4b26      	ldr	r3, [pc, #152]	; (8007f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	461a      	mov	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a24      	ldr	r2, [pc, #144]	; (8007f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007e8c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	2201      	movs	r2, #1
 8007e96:	409a      	lsls	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007e9c:	e024      	b.n	8007ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	3b10      	subs	r3, #16
 8007ea6:	4a1e      	ldr	r2, [pc, #120]	; (8007f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eac:	091b      	lsrs	r3, r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4a1c      	ldr	r2, [pc, #112]	; (8007f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d806      	bhi.n	8007ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4a1b      	ldr	r2, [pc, #108]	; (8007f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d902      	bls.n	8007ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4b18      	ldr	r3, [pc, #96]	; (8007f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	461a      	mov	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a16      	ldr	r2, [pc, #88]	; (8007f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ed8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f003 031f 	and.w	r3, r3, #31
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	409a      	lsls	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ee8:	bf00      	nop
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	58025408 	.word	0x58025408
 8007ef8:	5802541c 	.word	0x5802541c
 8007efc:	58025430 	.word	0x58025430
 8007f00:	58025444 	.word	0x58025444
 8007f04:	58025458 	.word	0x58025458
 8007f08:	5802546c 	.word	0x5802546c
 8007f0c:	58025480 	.word	0x58025480
 8007f10:	58025494 	.word	0x58025494
 8007f14:	cccccccd 	.word	0xcccccccd
 8007f18:	16009600 	.word	0x16009600
 8007f1c:	58025880 	.word	0x58025880
 8007f20:	aaaaaaab 	.word	0xaaaaaaab
 8007f24:	400204b8 	.word	0x400204b8
 8007f28:	4002040f 	.word	0x4002040f
 8007f2c:	10008200 	.word	0x10008200
 8007f30:	40020880 	.word	0x40020880

08007f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d04a      	beq.n	8007fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d847      	bhi.n	8007fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a25      	ldr	r2, [pc, #148]	; (8007fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d022      	beq.n	8007fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a24      	ldr	r2, [pc, #144]	; (8007ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d01d      	beq.n	8007fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a22      	ldr	r2, [pc, #136]	; (8007ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d018      	beq.n	8007fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a21      	ldr	r2, [pc, #132]	; (8007ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d013      	beq.n	8007fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00e      	beq.n	8007fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1e      	ldr	r2, [pc, #120]	; (8008000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d009      	beq.n	8007fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1c      	ldr	r2, [pc, #112]	; (8008004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d004      	beq.n	8007fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1b      	ldr	r2, [pc, #108]	; (8008008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d101      	bne.n	8007fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4b17      	ldr	r3, [pc, #92]	; (800800c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a15      	ldr	r2, [pc, #84]	; (8008010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007fbc:	671a      	str	r2, [r3, #112]	; 0x70
 8007fbe:	e009      	b.n	8007fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4b14      	ldr	r3, [pc, #80]	; (8008014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	461a      	mov	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a11      	ldr	r2, [pc, #68]	; (8008018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007fd2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	2201      	movs	r2, #1
 8007fda:	409a      	lsls	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007fe0:	bf00      	nop
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	58025408 	.word	0x58025408
 8007ff0:	5802541c 	.word	0x5802541c
 8007ff4:	58025430 	.word	0x58025430
 8007ff8:	58025444 	.word	0x58025444
 8007ffc:	58025458 	.word	0x58025458
 8008000:	5802546c 	.word	0x5802546c
 8008004:	58025480 	.word	0x58025480
 8008008:	58025494 	.word	0x58025494
 800800c:	1600963f 	.word	0x1600963f
 8008010:	58025940 	.word	0x58025940
 8008014:	1000823f 	.word	0x1000823f
 8008018:	40020940 	.word	0x40020940

0800801c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b098      	sub	sp, #96	; 0x60
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008024:	4a84      	ldr	r2, [pc, #528]	; (8008238 <HAL_FDCAN_Init+0x21c>)
 8008026:	f107 030c 	add.w	r3, r7, #12
 800802a:	4611      	mov	r1, r2
 800802c:	224c      	movs	r2, #76	; 0x4c
 800802e:	4618      	mov	r0, r3
 8008030:	f012 fd48 	bl	801aac4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e1c6      	b.n	80083cc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a7e      	ldr	r2, [pc, #504]	; (800823c <HAL_FDCAN_Init+0x220>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d106      	bne.n	8008056 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008050:	461a      	mov	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fa fe40 	bl	8002cf0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f022 0210 	bic.w	r2, r2, #16
 800807e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008080:	f7fb fde6 	bl	8003c50 <HAL_GetTick>
 8008084:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008086:	e014      	b.n	80080b2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008088:	f7fb fde2 	bl	8003c50 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b0a      	cmp	r3, #10
 8008094:	d90d      	bls.n	80080b2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800809c:	f043 0201 	orr.w	r2, r3, #1
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2203      	movs	r2, #3
 80080aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e18c      	b.n	80083cc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	f003 0308 	and.w	r3, r3, #8
 80080bc:	2b08      	cmp	r3, #8
 80080be:	d0e3      	beq.n	8008088 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0201 	orr.w	r2, r2, #1
 80080ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080d0:	f7fb fdbe 	bl	8003c50 <HAL_GetTick>
 80080d4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80080d6:	e014      	b.n	8008102 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80080d8:	f7fb fdba 	bl	8003c50 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b0a      	cmp	r3, #10
 80080e4:	d90d      	bls.n	8008102 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080ec:	f043 0201 	orr.w	r2, r3, #1
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2203      	movs	r2, #3
 80080fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e164      	b.n	80083cc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0e3      	beq.n	80080d8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699a      	ldr	r2, [r3, #24]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0202 	orr.w	r2, r2, #2
 800811e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	7c1b      	ldrb	r3, [r3, #16]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d108      	bne.n	800813a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699a      	ldr	r2, [r3, #24]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008136:	619a      	str	r2, [r3, #24]
 8008138:	e007      	b.n	800814a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	699a      	ldr	r2, [r3, #24]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008148:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	7c5b      	ldrb	r3, [r3, #17]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d108      	bne.n	8008164 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	699a      	ldr	r2, [r3, #24]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008160:	619a      	str	r2, [r3, #24]
 8008162:	e007      	b.n	8008174 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699a      	ldr	r2, [r3, #24]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008172:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	7c9b      	ldrb	r3, [r3, #18]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d108      	bne.n	800818e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800818a:	619a      	str	r2, [r3, #24]
 800818c:	e007      	b.n	800819e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	699a      	ldr	r2, [r3, #24]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800819c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	430a      	orrs	r2, r1
 80081b2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699a      	ldr	r2, [r3, #24]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80081c2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0210 	bic.w	r2, r2, #16
 80081d2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d108      	bne.n	80081ee <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0204 	orr.w	r2, r2, #4
 80081ea:	619a      	str	r2, [r3, #24]
 80081ec:	e030      	b.n	8008250 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d02c      	beq.n	8008250 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d020      	beq.n	8008240 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699a      	ldr	r2, [r3, #24]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800820c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f042 0210 	orr.w	r2, r2, #16
 800821c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	2b03      	cmp	r3, #3
 8008224:	d114      	bne.n	8008250 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699a      	ldr	r2, [r3, #24]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f042 0220 	orr.w	r2, r2, #32
 8008234:	619a      	str	r2, [r3, #24]
 8008236:	e00b      	b.n	8008250 <HAL_FDCAN_Init+0x234>
 8008238:	0801be30 	.word	0x0801be30
 800823c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f042 0220 	orr.w	r2, r2, #32
 800824e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	3b01      	subs	r3, #1
 8008256:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	3b01      	subs	r3, #1
 800825e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008260:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008268:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	3b01      	subs	r3, #1
 8008272:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008278:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800827a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008284:	d115      	bne.n	80082b2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	3b01      	subs	r3, #1
 8008292:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008294:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829a:	3b01      	subs	r3, #1
 800829c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800829e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	3b01      	subs	r3, #1
 80082a8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80082ae:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80082b0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d8:	4413      	add	r3, r2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d011      	beq.n	8008302 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80082e6:	f023 0107 	bic.w	r1, r3, #7
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	3360      	adds	r3, #96	; 0x60
 80082f2:	443b      	add	r3, r7
 80082f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	2b00      	cmp	r3, #0
 8008308:	d011      	beq.n	800832e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008312:	f023 0107 	bic.w	r1, r3, #7
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	3360      	adds	r3, #96	; 0x60
 800831e:	443b      	add	r3, r7
 8008320:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008332:	2b00      	cmp	r3, #0
 8008334:	d012      	beq.n	800835c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800833e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	3360      	adds	r3, #96	; 0x60
 800834a:	443b      	add	r3, r7
 800834c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008350:	011a      	lsls	r2, r3, #4
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008360:	2b00      	cmp	r3, #0
 8008362:	d012      	beq.n	800838a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800836c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	3360      	adds	r3, #96	; 0x60
 8008378:	443b      	add	r3, r7
 800837a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800837e:	021a      	lsls	r2, r3, #8
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a11      	ldr	r2, [pc, #68]	; (80083d4 <HAL_FDCAN_Init+0x3b8>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d107      	bne.n	80083a4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	689a      	ldr	r2, [r3, #8]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f022 0203 	bic.w	r2, r2, #3
 80083a2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f80b 	bl	80083d8 <FDCAN_CalcultateRamBlockAddresses>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80083c8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3760      	adds	r7, #96	; 0x60
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	4000a000 	.word	0x4000a000

080083d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80083ee:	4ba7      	ldr	r3, [pc, #668]	; (800868c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	0091      	lsls	r1, r2, #2
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	6812      	ldr	r2, [r2, #0]
 80083fa:	430b      	orrs	r3, r1
 80083fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008408:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	041a      	lsls	r2, r3, #16
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	4413      	add	r3, r2
 8008424:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800842e:	4b97      	ldr	r3, [pc, #604]	; (800868c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008430:	4013      	ands	r3, r2
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	0091      	lsls	r1, r2, #2
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6812      	ldr	r2, [r2, #0]
 800843a:	430b      	orrs	r3, r1
 800843c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008448:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008450:	041a      	lsls	r2, r3, #16
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	4413      	add	r3, r2
 8008466:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008470:	4b86      	ldr	r3, [pc, #536]	; (800868c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008472:	4013      	ands	r3, r2
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	0091      	lsls	r1, r2, #2
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	6812      	ldr	r2, [r2, #0]
 800847c:	430b      	orrs	r3, r1
 800847e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800848a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	041a      	lsls	r2, r3, #16
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80084a6:	fb02 f303 	mul.w	r3, r2, r3
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	4413      	add	r3, r2
 80084ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80084b8:	4b74      	ldr	r3, [pc, #464]	; (800868c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80084ba:	4013      	ands	r3, r2
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	0091      	lsls	r1, r2, #2
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6812      	ldr	r2, [r2, #0]
 80084c4:	430b      	orrs	r3, r1
 80084c6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084d2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084da:	041a      	lsls	r2, r3, #16
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80084ee:	fb02 f303 	mul.w	r3, r2, r3
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	4413      	add	r3, r2
 80084f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008500:	4b62      	ldr	r3, [pc, #392]	; (800868c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008502:	4013      	ands	r3, r2
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	0091      	lsls	r1, r2, #2
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6812      	ldr	r2, [r2, #0]
 800850c:	430b      	orrs	r3, r1
 800850e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800851a:	fb02 f303 	mul.w	r3, r2, r3
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	4413      	add	r3, r2
 8008522:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800852c:	4b57      	ldr	r3, [pc, #348]	; (800868c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800852e:	4013      	ands	r3, r2
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	0091      	lsls	r1, r2, #2
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6812      	ldr	r2, [r2, #0]
 8008538:	430b      	orrs	r3, r1
 800853a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008546:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854e:	041a      	lsls	r2, r3, #16
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800855e:	005b      	lsls	r3, r3, #1
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	4413      	add	r3, r2
 8008564:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800856e:	4b47      	ldr	r3, [pc, #284]	; (800868c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008570:	4013      	ands	r3, r2
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	0091      	lsls	r1, r2, #2
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	430b      	orrs	r3, r1
 800857c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008588:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008590:	041a      	lsls	r2, r3, #16
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80085a4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ac:	061a      	lsls	r2, r3, #24
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085bc:	4b34      	ldr	r3, [pc, #208]	; (8008690 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80085be:	4413      	add	r3, r2
 80085c0:	009a      	lsls	r2, r3, #2
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	441a      	add	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	441a      	add	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	6879      	ldr	r1, [r7, #4]
 80085f0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80085f2:	fb01 f303 	mul.w	r3, r1, r3
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	441a      	add	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800860a:	fb01 f303 	mul.w	r3, r1, r3
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	441a      	add	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8008622:	fb01 f303 	mul.w	r3, r1, r3
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	441a      	add	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	441a      	add	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008652:	fb01 f303 	mul.w	r3, r1, r3
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	441a      	add	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800866e:	fb01 f303 	mul.w	r3, r1, r3
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	441a      	add	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008682:	4a04      	ldr	r2, [pc, #16]	; (8008694 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d915      	bls.n	80086b4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008688:	e006      	b.n	8008698 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800868a:	bf00      	nop
 800868c:	ffff0003 	.word	0xffff0003
 8008690:	10002b00 	.word	0x10002b00
 8008694:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800869e:	f043 0220 	orr.w	r2, r3, #32
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2203      	movs	r2, #3
 80086ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e010      	b.n	80086d6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b8:	60fb      	str	r3, [r7, #12]
 80086ba:	e005      	b.n	80086c8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3304      	adds	r3, #4
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d3f3      	bcc.n	80086bc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop

080086e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b089      	sub	sp, #36	; 0x24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80086f2:	4b86      	ldr	r3, [pc, #536]	; (800890c <HAL_GPIO_Init+0x228>)
 80086f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086f6:	e18c      	b.n	8008a12 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	2101      	movs	r1, #1
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	fa01 f303 	lsl.w	r3, r1, r3
 8008704:	4013      	ands	r3, r2
 8008706:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 817e 	beq.w	8008a0c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f003 0303 	and.w	r3, r3, #3
 8008718:	2b01      	cmp	r3, #1
 800871a:	d005      	beq.n	8008728 <HAL_GPIO_Init+0x44>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f003 0303 	and.w	r3, r3, #3
 8008724:	2b02      	cmp	r3, #2
 8008726:	d130      	bne.n	800878a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	2203      	movs	r2, #3
 8008734:	fa02 f303 	lsl.w	r3, r2, r3
 8008738:	43db      	mvns	r3, r3
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	4013      	ands	r3, r2
 800873e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	005b      	lsls	r3, r3, #1
 8008748:	fa02 f303 	lsl.w	r3, r2, r3
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	4313      	orrs	r3, r2
 8008750:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800875e:	2201      	movs	r2, #1
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	fa02 f303 	lsl.w	r3, r2, r3
 8008766:	43db      	mvns	r3, r3
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	4013      	ands	r3, r2
 800876c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	091b      	lsrs	r3, r3, #4
 8008774:	f003 0201 	and.w	r2, r3, #1
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	fa02 f303 	lsl.w	r3, r2, r3
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	4313      	orrs	r3, r2
 8008782:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f003 0303 	and.w	r3, r3, #3
 8008792:	2b03      	cmp	r3, #3
 8008794:	d017      	beq.n	80087c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	2203      	movs	r2, #3
 80087a2:	fa02 f303 	lsl.w	r3, r2, r3
 80087a6:	43db      	mvns	r3, r3
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	4013      	ands	r3, r2
 80087ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	4313      	orrs	r3, r2
 80087be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d123      	bne.n	800881a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	08da      	lsrs	r2, r3, #3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3208      	adds	r2, #8
 80087da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	220f      	movs	r2, #15
 80087ea:	fa02 f303 	lsl.w	r3, r2, r3
 80087ee:	43db      	mvns	r3, r3
 80087f0:	69ba      	ldr	r2, [r7, #24]
 80087f2:	4013      	ands	r3, r2
 80087f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	691a      	ldr	r2, [r3, #16]
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	f003 0307 	and.w	r3, r3, #7
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	fa02 f303 	lsl.w	r3, r2, r3
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	4313      	orrs	r3, r2
 800880a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	08da      	lsrs	r2, r3, #3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	3208      	adds	r2, #8
 8008814:	69b9      	ldr	r1, [r7, #24]
 8008816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	2203      	movs	r2, #3
 8008826:	fa02 f303 	lsl.w	r3, r2, r3
 800882a:	43db      	mvns	r3, r3
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	4013      	ands	r3, r2
 8008830:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f003 0203 	and.w	r2, r3, #3
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	fa02 f303 	lsl.w	r3, r2, r3
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	4313      	orrs	r3, r2
 8008846:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 80d8 	beq.w	8008a0c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800885c:	4b2c      	ldr	r3, [pc, #176]	; (8008910 <HAL_GPIO_Init+0x22c>)
 800885e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008862:	4a2b      	ldr	r2, [pc, #172]	; (8008910 <HAL_GPIO_Init+0x22c>)
 8008864:	f043 0302 	orr.w	r3, r3, #2
 8008868:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800886c:	4b28      	ldr	r3, [pc, #160]	; (8008910 <HAL_GPIO_Init+0x22c>)
 800886e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800887a:	4a26      	ldr	r2, [pc, #152]	; (8008914 <HAL_GPIO_Init+0x230>)
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	089b      	lsrs	r3, r3, #2
 8008880:	3302      	adds	r3, #2
 8008882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	f003 0303 	and.w	r3, r3, #3
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	220f      	movs	r2, #15
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	43db      	mvns	r3, r3
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	4013      	ands	r3, r2
 800889c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a1d      	ldr	r2, [pc, #116]	; (8008918 <HAL_GPIO_Init+0x234>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d04a      	beq.n	800893c <HAL_GPIO_Init+0x258>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a1c      	ldr	r2, [pc, #112]	; (800891c <HAL_GPIO_Init+0x238>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d02b      	beq.n	8008906 <HAL_GPIO_Init+0x222>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a1b      	ldr	r2, [pc, #108]	; (8008920 <HAL_GPIO_Init+0x23c>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d025      	beq.n	8008902 <HAL_GPIO_Init+0x21e>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a1a      	ldr	r2, [pc, #104]	; (8008924 <HAL_GPIO_Init+0x240>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d01f      	beq.n	80088fe <HAL_GPIO_Init+0x21a>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a19      	ldr	r2, [pc, #100]	; (8008928 <HAL_GPIO_Init+0x244>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d019      	beq.n	80088fa <HAL_GPIO_Init+0x216>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a18      	ldr	r2, [pc, #96]	; (800892c <HAL_GPIO_Init+0x248>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d013      	beq.n	80088f6 <HAL_GPIO_Init+0x212>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a17      	ldr	r2, [pc, #92]	; (8008930 <HAL_GPIO_Init+0x24c>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00d      	beq.n	80088f2 <HAL_GPIO_Init+0x20e>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a16      	ldr	r2, [pc, #88]	; (8008934 <HAL_GPIO_Init+0x250>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d007      	beq.n	80088ee <HAL_GPIO_Init+0x20a>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a15      	ldr	r2, [pc, #84]	; (8008938 <HAL_GPIO_Init+0x254>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d101      	bne.n	80088ea <HAL_GPIO_Init+0x206>
 80088e6:	2309      	movs	r3, #9
 80088e8:	e029      	b.n	800893e <HAL_GPIO_Init+0x25a>
 80088ea:	230a      	movs	r3, #10
 80088ec:	e027      	b.n	800893e <HAL_GPIO_Init+0x25a>
 80088ee:	2307      	movs	r3, #7
 80088f0:	e025      	b.n	800893e <HAL_GPIO_Init+0x25a>
 80088f2:	2306      	movs	r3, #6
 80088f4:	e023      	b.n	800893e <HAL_GPIO_Init+0x25a>
 80088f6:	2305      	movs	r3, #5
 80088f8:	e021      	b.n	800893e <HAL_GPIO_Init+0x25a>
 80088fa:	2304      	movs	r3, #4
 80088fc:	e01f      	b.n	800893e <HAL_GPIO_Init+0x25a>
 80088fe:	2303      	movs	r3, #3
 8008900:	e01d      	b.n	800893e <HAL_GPIO_Init+0x25a>
 8008902:	2302      	movs	r3, #2
 8008904:	e01b      	b.n	800893e <HAL_GPIO_Init+0x25a>
 8008906:	2301      	movs	r3, #1
 8008908:	e019      	b.n	800893e <HAL_GPIO_Init+0x25a>
 800890a:	bf00      	nop
 800890c:	58000080 	.word	0x58000080
 8008910:	58024400 	.word	0x58024400
 8008914:	58000400 	.word	0x58000400
 8008918:	58020000 	.word	0x58020000
 800891c:	58020400 	.word	0x58020400
 8008920:	58020800 	.word	0x58020800
 8008924:	58020c00 	.word	0x58020c00
 8008928:	58021000 	.word	0x58021000
 800892c:	58021400 	.word	0x58021400
 8008930:	58021800 	.word	0x58021800
 8008934:	58021c00 	.word	0x58021c00
 8008938:	58022400 	.word	0x58022400
 800893c:	2300      	movs	r3, #0
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	f002 0203 	and.w	r2, r2, #3
 8008944:	0092      	lsls	r2, r2, #2
 8008946:	4093      	lsls	r3, r2
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	4313      	orrs	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800894e:	4938      	ldr	r1, [pc, #224]	; (8008a30 <HAL_GPIO_Init+0x34c>)
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	089b      	lsrs	r3, r3, #2
 8008954:	3302      	adds	r3, #2
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800895c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	43db      	mvns	r3, r3
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	4013      	ands	r3, r2
 800896c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	4313      	orrs	r3, r2
 8008980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008982:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800898a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	43db      	mvns	r3, r3
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	4013      	ands	r3, r2
 800899a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80089b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	43db      	mvns	r3, r3
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	4013      	ands	r3, r2
 80089c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	4313      	orrs	r3, r2
 80089da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	43db      	mvns	r3, r3
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	4013      	ands	r3, r2
 80089f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80089fe:	69ba      	ldr	r2, [r7, #24]
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f47f ae6b 	bne.w	80086f8 <HAL_GPIO_Init+0x14>
  }
}
 8008a22:	bf00      	nop
 8008a24:	bf00      	nop
 8008a26:	3724      	adds	r7, #36	; 0x24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	58000400 	.word	0x58000400

08008a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691a      	ldr	r2, [r3, #16]
 8008a44:	887b      	ldrh	r3, [r7, #2]
 8008a46:	4013      	ands	r3, r2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]
 8008a50:	e001      	b.n	8008a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	807b      	strh	r3, [r7, #2]
 8008a70:	4613      	mov	r3, r2
 8008a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a74:	787b      	ldrb	r3, [r7, #1]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a7a:	887a      	ldrh	r2, [r7, #2]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008a80:	e003      	b.n	8008a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008a82:	887b      	ldrh	r3, [r7, #2]
 8008a84:	041a      	lsls	r2, r3, #16
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	619a      	str	r2, [r3, #24]
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
	...

08008a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e07f      	b.n	8008baa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d106      	bne.n	8008ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7fa f97e 	bl	8002dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2224      	movs	r2, #36	; 0x24
 8008ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 0201 	bic.w	r2, r2, #1
 8008ada:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ae8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008af8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d107      	bne.n	8008b12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689a      	ldr	r2, [r3, #8]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b0e:	609a      	str	r2, [r3, #8]
 8008b10:	e006      	b.n	8008b20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008b1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d104      	bne.n	8008b32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6859      	ldr	r1, [r3, #4]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	4b1d      	ldr	r3, [pc, #116]	; (8008bb4 <HAL_I2C_Init+0x11c>)
 8008b3e:	430b      	orrs	r3, r1
 8008b40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	691a      	ldr	r2, [r3, #16]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	69d9      	ldr	r1, [r3, #28]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a1a      	ldr	r2, [r3, #32]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0201 	orr.w	r2, r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2220      	movs	r2, #32
 8008b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	02008000 	.word	0x02008000

08008bb8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d005      	beq.n	8008be4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	68f9      	ldr	r1, [r7, #12]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	4798      	blx	r3
  }
}
 8008be4:	bf00      	nop
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b20      	cmp	r3, #32
 8008c00:	d138      	bne.n	8008c74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d101      	bne.n	8008c10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	e032      	b.n	8008c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2224      	movs	r2, #36	; 0x24
 8008c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0201 	bic.w	r2, r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6819      	ldr	r1, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0201 	orr.w	r2, r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2220      	movs	r2, #32
 8008c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	e000      	b.n	8008c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c74:	2302      	movs	r3, #2
  }
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	d139      	bne.n	8008d0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d101      	bne.n	8008ca6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	e033      	b.n	8008d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2224      	movs	r2, #36	; 0x24
 8008cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 0201 	bic.w	r2, r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008cd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0201 	orr.w	r2, r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	e000      	b.n	8008d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d0c:	2302      	movs	r3, #2
  }
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d1c:	b08f      	sub	sp, #60	; 0x3c
 8008d1e:	af0a      	add	r7, sp, #40	; 0x28
 8008d20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e116      	b.n	8008f5a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d106      	bne.n	8008d4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f011 fb26 	bl	801a398 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2203      	movs	r2, #3
 8008d50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f00a fcf7 	bl	801375e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	603b      	str	r3, [r7, #0]
 8008d76:	687e      	ldr	r6, [r7, #4]
 8008d78:	466d      	mov	r5, sp
 8008d7a:	f106 0410 	add.w	r4, r6, #16
 8008d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d8e:	1d33      	adds	r3, r6, #4
 8008d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d92:	6838      	ldr	r0, [r7, #0]
 8008d94:	f00a fbc2 	bl	801351c <USB_CoreInit>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d005      	beq.n	8008daa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2202      	movs	r2, #2
 8008da2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e0d7      	b.n	8008f5a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f00a fce5 	bl	8013780 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
 8008dba:	e04a      	b.n	8008e52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008dbc:	7bfa      	ldrb	r2, [r7, #15]
 8008dbe:	6879      	ldr	r1, [r7, #4]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	440b      	add	r3, r1
 8008dca:	333d      	adds	r3, #61	; 0x3d
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008dd0:	7bfa      	ldrb	r2, [r7, #15]
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	440b      	add	r3, r1
 8008dde:	333c      	adds	r3, #60	; 0x3c
 8008de0:	7bfa      	ldrb	r2, [r7, #15]
 8008de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008de4:	7bfa      	ldrb	r2, [r7, #15]
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	b298      	uxth	r0, r3
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	4613      	mov	r3, r2
 8008dee:	00db      	lsls	r3, r3, #3
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	3356      	adds	r3, #86	; 0x56
 8008df8:	4602      	mov	r2, r0
 8008dfa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008dfc:	7bfa      	ldrb	r2, [r7, #15]
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	4613      	mov	r3, r2
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	440b      	add	r3, r1
 8008e0a:	3340      	adds	r3, #64	; 0x40
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008e10:	7bfa      	ldrb	r2, [r7, #15]
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	3344      	adds	r3, #68	; 0x44
 8008e20:	2200      	movs	r2, #0
 8008e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008e24:	7bfa      	ldrb	r2, [r7, #15]
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	3348      	adds	r3, #72	; 0x48
 8008e34:	2200      	movs	r2, #0
 8008e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008e38:	7bfa      	ldrb	r2, [r7, #15]
 8008e3a:	6879      	ldr	r1, [r7, #4]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	440b      	add	r3, r1
 8008e46:	334c      	adds	r3, #76	; 0x4c
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	73fb      	strb	r3, [r7, #15]
 8008e52:	7bfa      	ldrb	r2, [r7, #15]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d3af      	bcc.n	8008dbc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73fb      	strb	r3, [r7, #15]
 8008e60:	e044      	b.n	8008eec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008e62:	7bfa      	ldrb	r2, [r7, #15]
 8008e64:	6879      	ldr	r1, [r7, #4]
 8008e66:	4613      	mov	r3, r2
 8008e68:	00db      	lsls	r3, r3, #3
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	440b      	add	r3, r1
 8008e70:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008e78:	7bfa      	ldrb	r2, [r7, #15]
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	440b      	add	r3, r1
 8008e86:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008e8a:	7bfa      	ldrb	r2, [r7, #15]
 8008e8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008e8e:	7bfa      	ldrb	r2, [r7, #15]
 8008e90:	6879      	ldr	r1, [r7, #4]
 8008e92:	4613      	mov	r3, r2
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	440b      	add	r3, r1
 8008e9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008ea4:	7bfa      	ldrb	r2, [r7, #15]
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	4413      	add	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	440b      	add	r3, r1
 8008eb2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008eba:	7bfa      	ldrb	r2, [r7, #15]
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	440b      	add	r3, r1
 8008ec8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008ecc:	2200      	movs	r2, #0
 8008ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008ed0:	7bfa      	ldrb	r2, [r7, #15]
 8008ed2:	6879      	ldr	r1, [r7, #4]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	00db      	lsls	r3, r3, #3
 8008ed8:	4413      	add	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	440b      	add	r3, r1
 8008ede:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	73fb      	strb	r3, [r7, #15]
 8008eec:	7bfa      	ldrb	r2, [r7, #15]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d3b5      	bcc.n	8008e62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	603b      	str	r3, [r7, #0]
 8008efc:	687e      	ldr	r6, [r7, #4]
 8008efe:	466d      	mov	r5, sp
 8008f00:	f106 0410 	add.w	r4, r6, #16
 8008f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008f10:	e885 0003 	stmia.w	r5, {r0, r1}
 8008f14:	1d33      	adds	r3, r6, #4
 8008f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f18:	6838      	ldr	r0, [r7, #0]
 8008f1a:	f00a fc7d 	bl	8013818 <USB_DevInit>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d005      	beq.n	8008f30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e014      	b.n	8008f5a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d102      	bne.n	8008f4e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 f96f 	bl	800a22c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f00b fcbf 	bl	80148d6 <USB_DevDisconnect>

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d101      	bne.n	8008f7e <HAL_PCD_Start+0x1c>
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e022      	b.n	8008fc4 <HAL_PCD_Start+0x62>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d109      	bne.n	8008fa6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d105      	bne.n	8008fa6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f00a fbc6 	bl	801373c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f00b fc6d 	bl	8014894 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008fcc:	b590      	push	{r4, r7, lr}
 8008fce:	b08d      	sub	sp, #52	; 0x34
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f00b fd2b 	bl	8014a3e <USB_GetMode>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f040 84b7 	bne.w	800995e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f00b fc8f 	bl	8014918 <USB_ReadInterrupts>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 84ad 	beq.w	800995c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	0a1b      	lsrs	r3, r3, #8
 800900c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4618      	mov	r0, r3
 800901c:	f00b fc7c 	bl	8014918 <USB_ReadInterrupts>
 8009020:	4603      	mov	r3, r0
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b02      	cmp	r3, #2
 8009028:	d107      	bne.n	800903a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	695a      	ldr	r2, [r3, #20]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f002 0202 	and.w	r2, r2, #2
 8009038:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f00b fc6a 	bl	8014918 <USB_ReadInterrupts>
 8009044:	4603      	mov	r3, r0
 8009046:	f003 0310 	and.w	r3, r3, #16
 800904a:	2b10      	cmp	r3, #16
 800904c:	d161      	bne.n	8009112 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	699a      	ldr	r2, [r3, #24]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0210 	bic.w	r2, r2, #16
 800905c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	f003 020f 	and.w	r2, r3, #15
 800906a:	4613      	mov	r3, r2
 800906c:	00db      	lsls	r3, r3, #3
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	4413      	add	r3, r2
 800907a:	3304      	adds	r3, #4
 800907c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	0c5b      	lsrs	r3, r3, #17
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	2b02      	cmp	r3, #2
 8009088:	d124      	bne.n	80090d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009090:	4013      	ands	r3, r2
 8009092:	2b00      	cmp	r3, #0
 8009094:	d035      	beq.n	8009102 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	091b      	lsrs	r3, r3, #4
 800909e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80090a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	461a      	mov	r2, r3
 80090a8:	6a38      	ldr	r0, [r7, #32]
 80090aa:	f00b faa1 	bl	80145f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	68da      	ldr	r2, [r3, #12]
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	091b      	lsrs	r3, r3, #4
 80090b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090ba:	441a      	add	r2, r3
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	695a      	ldr	r2, [r3, #20]
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	091b      	lsrs	r3, r3, #4
 80090c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090cc:	441a      	add	r2, r3
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	615a      	str	r2, [r3, #20]
 80090d2:	e016      	b.n	8009102 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	0c5b      	lsrs	r3, r3, #17
 80090d8:	f003 030f 	and.w	r3, r3, #15
 80090dc:	2b06      	cmp	r3, #6
 80090de:	d110      	bne.n	8009102 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80090e6:	2208      	movs	r2, #8
 80090e8:	4619      	mov	r1, r3
 80090ea:	6a38      	ldr	r0, [r7, #32]
 80090ec:	f00b fa80 	bl	80145f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	695a      	ldr	r2, [r3, #20]
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	091b      	lsrs	r3, r3, #4
 80090f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090fc:	441a      	add	r2, r3
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	699a      	ldr	r2, [r3, #24]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f042 0210 	orr.w	r2, r2, #16
 8009110:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4618      	mov	r0, r3
 8009118:	f00b fbfe 	bl	8014918 <USB_ReadInterrupts>
 800911c:	4603      	mov	r3, r0
 800911e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009122:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009126:	f040 80a7 	bne.w	8009278 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4618      	mov	r0, r3
 8009134:	f00b fc03 	bl	801493e <USB_ReadDevAllOutEpInterrupt>
 8009138:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800913a:	e099      	b.n	8009270 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 808e 	beq.w	8009264 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	4611      	mov	r1, r2
 8009152:	4618      	mov	r0, r3
 8009154:	f00b fc27 	bl	80149a6 <USB_ReadDevOutEPInterrupt>
 8009158:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00c      	beq.n	800917e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009170:	461a      	mov	r2, r3
 8009172:	2301      	movs	r3, #1
 8009174:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fed1 	bl	8009f20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	f003 0308 	and.w	r3, r3, #8
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00c      	beq.n	80091a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009194:	461a      	mov	r2, r3
 8009196:	2308      	movs	r3, #8
 8009198:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800919a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 ffa7 	bl	800a0f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f003 0310 	and.w	r3, r3, #16
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d008      	beq.n	80091be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b8:	461a      	mov	r2, r3
 80091ba:	2310      	movs	r3, #16
 80091bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f003 0302 	and.w	r3, r3, #2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d030      	beq.n	800922a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d0:	2b80      	cmp	r3, #128	; 0x80
 80091d2:	d109      	bne.n	80091e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80091e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80091e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ea:	4613      	mov	r3, r2
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	4413      	add	r3, r2
 80091fa:	3304      	adds	r3, #4
 80091fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	78db      	ldrb	r3, [r3, #3]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d108      	bne.n	8009218 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2200      	movs	r2, #0
 800920a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	b2db      	uxtb	r3, r3
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f011 f9b8 	bl	801a588 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009224:	461a      	mov	r2, r3
 8009226:	2302      	movs	r3, #2
 8009228:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f003 0320 	and.w	r3, r3, #32
 8009230:	2b00      	cmp	r3, #0
 8009232:	d008      	beq.n	8009246 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009240:	461a      	mov	r2, r3
 8009242:	2320      	movs	r3, #32
 8009244:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d009      	beq.n	8009264 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925c:	461a      	mov	r2, r3
 800925e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009262:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	3301      	adds	r3, #1
 8009268:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	085b      	lsrs	r3, r3, #1
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009272:	2b00      	cmp	r3, #0
 8009274:	f47f af62 	bne.w	800913c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4618      	mov	r0, r3
 800927e:	f00b fb4b 	bl	8014918 <USB_ReadInterrupts>
 8009282:	4603      	mov	r3, r0
 8009284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009288:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800928c:	f040 80db 	bne.w	8009446 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4618      	mov	r0, r3
 8009296:	f00b fb6c 	bl	8014972 <USB_ReadDevAllInEpInterrupt>
 800929a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800929c:	2300      	movs	r3, #0
 800929e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80092a0:	e0cd      	b.n	800943e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 80c2 	beq.w	8009432 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b4:	b2d2      	uxtb	r2, r2
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f00b fb92 	bl	80149e2 <USB_ReadDevInEPInterrupt>
 80092be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d057      	beq.n	800937a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	f003 030f 	and.w	r3, r3, #15
 80092d0:	2201      	movs	r2, #1
 80092d2:	fa02 f303 	lsl.w	r3, r2, r3
 80092d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	43db      	mvns	r3, r3
 80092e4:	69f9      	ldr	r1, [r7, #28]
 80092e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092ea:	4013      	ands	r3, r2
 80092ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092fa:	461a      	mov	r2, r3
 80092fc:	2301      	movs	r3, #1
 80092fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d132      	bne.n	800936e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009308:	6879      	ldr	r1, [r7, #4]
 800930a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800930c:	4613      	mov	r3, r2
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	3348      	adds	r3, #72	; 0x48
 8009318:	6819      	ldr	r1, [r3, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931e:	4613      	mov	r3, r2
 8009320:	00db      	lsls	r3, r3, #3
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4403      	add	r3, r0
 8009328:	3344      	adds	r3, #68	; 0x44
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4419      	add	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009332:	4613      	mov	r3, r2
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4403      	add	r3, r0
 800933c:	3348      	adds	r3, #72	; 0x48
 800933e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	2b00      	cmp	r3, #0
 8009344:	d113      	bne.n	800936e <HAL_PCD_IRQHandler+0x3a2>
 8009346:	6879      	ldr	r1, [r7, #4]
 8009348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800934a:	4613      	mov	r3, r2
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	4413      	add	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	440b      	add	r3, r1
 8009354:	334c      	adds	r3, #76	; 0x4c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d108      	bne.n	800936e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6818      	ldr	r0, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009366:	461a      	mov	r2, r3
 8009368:	2101      	movs	r1, #1
 800936a:	f00b fb9b 	bl	8014aa4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	b2db      	uxtb	r3, r3
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f011 f882 	bl	801a47e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f003 0308 	and.w	r3, r3, #8
 8009380:	2b00      	cmp	r3, #0
 8009382:	d008      	beq.n	8009396 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009390:	461a      	mov	r2, r3
 8009392:	2308      	movs	r3, #8
 8009394:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	2b00      	cmp	r3, #0
 800939e:	d008      	beq.n	80093b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ac:	461a      	mov	r2, r3
 80093ae:	2310      	movs	r3, #16
 80093b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d008      	beq.n	80093ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c8:	461a      	mov	r2, r3
 80093ca:	2340      	movs	r3, #64	; 0x40
 80093cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d023      	beq.n	8009420 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80093d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093da:	6a38      	ldr	r0, [r7, #32]
 80093dc:	f00a fb7a 	bl	8013ad4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80093e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e2:	4613      	mov	r3, r2
 80093e4:	00db      	lsls	r3, r3, #3
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	3338      	adds	r3, #56	; 0x38
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	4413      	add	r3, r2
 80093f0:	3304      	adds	r3, #4
 80093f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	78db      	ldrb	r3, [r3, #3]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d108      	bne.n	800940e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2200      	movs	r2, #0
 8009400:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	b2db      	uxtb	r3, r3
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f011 f8cf 	bl	801a5ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941a:	461a      	mov	r2, r3
 800941c:	2302      	movs	r3, #2
 800941e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800942a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fcea 	bl	8009e06 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	3301      	adds	r3, #1
 8009436:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	085b      	lsrs	r3, r3, #1
 800943c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	2b00      	cmp	r3, #0
 8009442:	f47f af2e 	bne.w	80092a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f00b fa64 	bl	8014918 <USB_ReadInterrupts>
 8009450:	4603      	mov	r3, r0
 8009452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800945a:	d122      	bne.n	80094a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	69fa      	ldr	r2, [r7, #28]
 8009466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800946a:	f023 0301 	bic.w	r3, r3, #1
 800946e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009476:	2b01      	cmp	r3, #1
 8009478:	d108      	bne.n	800948c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009482:	2100      	movs	r1, #0
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fef5 	bl	800a274 <HAL_PCDEx_LPM_Callback>
 800948a:	e002      	b.n	8009492 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f011 f86d 	bl	801a56c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	695a      	ldr	r2, [r3, #20]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80094a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f00b fa36 	bl	8014918 <USB_ReadInterrupts>
 80094ac:	4603      	mov	r3, r0
 80094ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094b6:	d112      	bne.n	80094de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d102      	bne.n	80094ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f011 f829 	bl	801a520 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	695a      	ldr	r2, [r3, #20]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80094dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f00b fa18 	bl	8014918 <USB_ReadInterrupts>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094f2:	d121      	bne.n	8009538 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	695a      	ldr	r2, [r3, #20]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009502:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800950a:	2b00      	cmp	r3, #0
 800950c:	d111      	bne.n	8009532 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800951c:	089b      	lsrs	r3, r3, #2
 800951e:	f003 020f 	and.w	r2, r3, #15
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009528:	2101      	movs	r1, #1
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fea2 	bl	800a274 <HAL_PCDEx_LPM_Callback>
 8009530:	e002      	b.n	8009538 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f010 fff4 	bl	801a520 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4618      	mov	r0, r3
 800953e:	f00b f9eb 	bl	8014918 <USB_ReadInterrupts>
 8009542:	4603      	mov	r3, r0
 8009544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800954c:	f040 80b7 	bne.w	80096be <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	69fa      	ldr	r2, [r7, #28]
 800955a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800955e:	f023 0301 	bic.w	r3, r3, #1
 8009562:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2110      	movs	r1, #16
 800956a:	4618      	mov	r0, r3
 800956c:	f00a fab2 	bl	8013ad4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009570:	2300      	movs	r3, #0
 8009572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009574:	e046      	b.n	8009604 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009582:	461a      	mov	r2, r3
 8009584:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009588:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	4413      	add	r3, r2
 8009592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800959a:	0151      	lsls	r1, r2, #5
 800959c:	69fa      	ldr	r2, [r7, #28]
 800959e:	440a      	add	r2, r1
 80095a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80095aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ac:	015a      	lsls	r2, r3, #5
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	4413      	add	r3, r2
 80095b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b6:	461a      	mov	r2, r3
 80095b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ce:	0151      	lsls	r1, r2, #5
 80095d0:	69fa      	ldr	r2, [r7, #28]
 80095d2:	440a      	add	r2, r1
 80095d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e0:	015a      	lsls	r2, r3, #5
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	4413      	add	r3, r2
 80095e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ee:	0151      	lsls	r1, r2, #5
 80095f0:	69fa      	ldr	r2, [r7, #28]
 80095f2:	440a      	add	r2, r1
 80095f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009600:	3301      	adds	r3, #1
 8009602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800960a:	429a      	cmp	r2, r3
 800960c:	d3b3      	bcc.n	8009576 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	69fa      	ldr	r2, [r7, #28]
 8009618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800961c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009620:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009626:	2b00      	cmp	r3, #0
 8009628:	d016      	beq.n	8009658 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009634:	69fa      	ldr	r2, [r7, #28]
 8009636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800963a:	f043 030b 	orr.w	r3, r3, #11
 800963e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964a:	69fa      	ldr	r2, [r7, #28]
 800964c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009650:	f043 030b 	orr.w	r3, r3, #11
 8009654:	6453      	str	r3, [r2, #68]	; 0x44
 8009656:	e015      	b.n	8009684 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800965e:	695a      	ldr	r2, [r3, #20]
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009666:	4619      	mov	r1, r3
 8009668:	f242 032b 	movw	r3, #8235	; 0x202b
 800966c:	4313      	orrs	r3, r2
 800966e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800967e:	f043 030b 	orr.w	r3, r3, #11
 8009682:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	69fa      	ldr	r2, [r7, #28]
 800968e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009692:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009696:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6818      	ldr	r0, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80096a8:	461a      	mov	r2, r3
 80096aa:	f00b f9fb 	bl	8014aa4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	695a      	ldr	r2, [r3, #20]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80096bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f00b f928 	bl	8014918 <USB_ReadInterrupts>
 80096c8:	4603      	mov	r3, r0
 80096ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d2:	d124      	bne.n	800971e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4618      	mov	r0, r3
 80096da:	f00b f9bf 	bl	8014a5c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f00a fa73 	bl	8013bce <USB_GetDevSpeed>
 80096e8:	4603      	mov	r3, r0
 80096ea:	461a      	mov	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681c      	ldr	r4, [r3, #0]
 80096f4:	f001 fd88 	bl	800b208 <HAL_RCC_GetHCLKFreq>
 80096f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	461a      	mov	r2, r3
 8009702:	4620      	mov	r0, r4
 8009704:	f009 ff78 	bl	80135f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f010 fee0 	bl	801a4ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	695a      	ldr	r2, [r3, #20]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800971c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4618      	mov	r0, r3
 8009724:	f00b f8f8 	bl	8014918 <USB_ReadInterrupts>
 8009728:	4603      	mov	r3, r0
 800972a:	f003 0308 	and.w	r3, r3, #8
 800972e:	2b08      	cmp	r3, #8
 8009730:	d10a      	bne.n	8009748 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f010 febd 	bl	801a4b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	695a      	ldr	r2, [r3, #20]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f002 0208 	and.w	r2, r2, #8
 8009746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4618      	mov	r0, r3
 800974e:	f00b f8e3 	bl	8014918 <USB_ReadInterrupts>
 8009752:	4603      	mov	r3, r0
 8009754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009758:	2b80      	cmp	r3, #128	; 0x80
 800975a:	d122      	bne.n	80097a2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009768:	2301      	movs	r3, #1
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
 800976c:	e014      	b.n	8009798 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009772:	4613      	mov	r3, r2
 8009774:	00db      	lsls	r3, r3, #3
 8009776:	4413      	add	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	440b      	add	r3, r1
 800977c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d105      	bne.n	8009792 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	b2db      	uxtb	r3, r3
 800978a:	4619      	mov	r1, r3
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fb09 	bl	8009da4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009794:	3301      	adds	r3, #1
 8009796:	627b      	str	r3, [r7, #36]	; 0x24
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800979e:	429a      	cmp	r2, r3
 80097a0:	d3e5      	bcc.n	800976e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f00b f8b6 	bl	8014918 <USB_ReadInterrupts>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097b6:	d13b      	bne.n	8009830 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80097b8:	2301      	movs	r3, #1
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24
 80097bc:	e02b      	b.n	8009816 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d2:	4613      	mov	r3, r2
 80097d4:	00db      	lsls	r3, r3, #3
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	440b      	add	r3, r1
 80097dc:	3340      	adds	r3, #64	; 0x40
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d115      	bne.n	8009810 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80097e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	da12      	bge.n	8009810 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ee:	4613      	mov	r3, r2
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	440b      	add	r3, r1
 80097f8:	333f      	adds	r3, #63	; 0x3f
 80097fa:	2201      	movs	r2, #1
 80097fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	b2db      	uxtb	r3, r3
 8009802:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009806:	b2db      	uxtb	r3, r3
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 faca 	bl	8009da4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	3301      	adds	r3, #1
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981c:	429a      	cmp	r2, r3
 800981e:	d3ce      	bcc.n	80097be <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	695a      	ldr	r2, [r3, #20]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800982e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4618      	mov	r0, r3
 8009836:	f00b f86f 	bl	8014918 <USB_ReadInterrupts>
 800983a:	4603      	mov	r3, r0
 800983c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009844:	d155      	bne.n	80098f2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009846:	2301      	movs	r3, #1
 8009848:	627b      	str	r3, [r7, #36]	; 0x24
 800984a:	e045      	b.n	80098d8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800985c:	6879      	ldr	r1, [r7, #4]
 800985e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009860:	4613      	mov	r3, r2
 8009862:	00db      	lsls	r3, r3, #3
 8009864:	4413      	add	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	440b      	add	r3, r1
 800986a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d12e      	bne.n	80098d2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009874:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009876:	2b00      	cmp	r3, #0
 8009878:	da2b      	bge.n	80098d2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009886:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800988a:	429a      	cmp	r2, r3
 800988c:	d121      	bne.n	80098d2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009892:	4613      	mov	r3, r2
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80098a0:	2201      	movs	r2, #1
 80098a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80098a4:	6a3b      	ldr	r3, [r7, #32]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10a      	bne.n	80098d2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	69fa      	ldr	r2, [r7, #28]
 80098c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098ce:	6053      	str	r3, [r2, #4]
            break;
 80098d0:	e007      	b.n	80098e2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	3301      	adds	r3, #1
 80098d6:	627b      	str	r3, [r7, #36]	; 0x24
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098de:	429a      	cmp	r2, r3
 80098e0:	d3b4      	bcc.n	800984c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	695a      	ldr	r2, [r3, #20]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80098f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f00b f80e 	bl	8014918 <USB_ReadInterrupts>
 80098fc:	4603      	mov	r3, r0
 80098fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009906:	d10a      	bne.n	800991e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f010 fe61 	bl	801a5d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	695a      	ldr	r2, [r3, #20]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800991c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4618      	mov	r0, r3
 8009924:	f00a fff8 	bl	8014918 <USB_ReadInterrupts>
 8009928:	4603      	mov	r3, r0
 800992a:	f003 0304 	and.w	r3, r3, #4
 800992e:	2b04      	cmp	r3, #4
 8009930:	d115      	bne.n	800995e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	f003 0304 	and.w	r3, r3, #4
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f010 fe51 	bl	801a5ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6859      	ldr	r1, [r3, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	69ba      	ldr	r2, [r7, #24]
 8009956:	430a      	orrs	r2, r1
 8009958:	605a      	str	r2, [r3, #4]
 800995a:	e000      	b.n	800995e <HAL_PCD_IRQHandler+0x992>
      return;
 800995c:	bf00      	nop
    }
  }
}
 800995e:	3734      	adds	r7, #52	; 0x34
 8009960:	46bd      	mov	sp, r7
 8009962:	bd90      	pop	{r4, r7, pc}

08009964 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009976:	2b01      	cmp	r3, #1
 8009978:	d101      	bne.n	800997e <HAL_PCD_SetAddress+0x1a>
 800997a:	2302      	movs	r3, #2
 800997c:	e013      	b.n	80099a6 <HAL_PCD_SetAddress+0x42>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	78fa      	ldrb	r2, [r7, #3]
 800998a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	78fa      	ldrb	r2, [r7, #3]
 8009994:	4611      	mov	r1, r2
 8009996:	4618      	mov	r0, r3
 8009998:	f00a ff56 	bl	8014848 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	4608      	mov	r0, r1
 80099b8:	4611      	mov	r1, r2
 80099ba:	461a      	mov	r2, r3
 80099bc:	4603      	mov	r3, r0
 80099be:	70fb      	strb	r3, [r7, #3]
 80099c0:	460b      	mov	r3, r1
 80099c2:	803b      	strh	r3, [r7, #0]
 80099c4:	4613      	mov	r3, r2
 80099c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80099cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	da0f      	bge.n	80099f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80099d4:	78fb      	ldrb	r3, [r7, #3]
 80099d6:	f003 020f 	and.w	r2, r3, #15
 80099da:	4613      	mov	r3, r2
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	4413      	add	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	3338      	adds	r3, #56	; 0x38
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	4413      	add	r3, r2
 80099e8:	3304      	adds	r3, #4
 80099ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2201      	movs	r2, #1
 80099f0:	705a      	strb	r2, [r3, #1]
 80099f2:	e00f      	b.n	8009a14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	f003 020f 	and.w	r2, r3, #15
 80099fa:	4613      	mov	r3, r2
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	4413      	add	r3, r2
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	f003 030f 	and.w	r3, r3, #15
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009a20:	883a      	ldrh	r2, [r7, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	78ba      	ldrb	r2, [r7, #2]
 8009a2a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	785b      	ldrb	r3, [r3, #1]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009a3e:	78bb      	ldrb	r3, [r7, #2]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d102      	bne.n	8009a4a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d101      	bne.n	8009a58 <HAL_PCD_EP_Open+0xaa>
 8009a54:	2302      	movs	r3, #2
 8009a56:	e00e      	b.n	8009a76 <HAL_PCD_EP_Open+0xc8>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68f9      	ldr	r1, [r7, #12]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f00a f8d6 	bl	8013c18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009a74:	7afb      	ldrb	r3, [r7, #11]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	460b      	mov	r3, r1
 8009a88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	da0f      	bge.n	8009ab2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a92:	78fb      	ldrb	r3, [r7, #3]
 8009a94:	f003 020f 	and.w	r2, r3, #15
 8009a98:	4613      	mov	r3, r2
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	3338      	adds	r3, #56	; 0x38
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2201      	movs	r2, #1
 8009aae:	705a      	strb	r2, [r3, #1]
 8009ab0:	e00f      	b.n	8009ad2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ab2:	78fb      	ldrb	r3, [r7, #3]
 8009ab4:	f003 020f 	and.w	r2, r3, #15
 8009ab8:	4613      	mov	r3, r2
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3304      	adds	r3, #4
 8009aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ad2:	78fb      	ldrb	r3, [r7, #3]
 8009ad4:	f003 030f 	and.w	r3, r3, #15
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d101      	bne.n	8009aec <HAL_PCD_EP_Close+0x6e>
 8009ae8:	2302      	movs	r3, #2
 8009aea:	e00e      	b.n	8009b0a <HAL_PCD_EP_Close+0x8c>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68f9      	ldr	r1, [r7, #12]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f00a f914 	bl	8013d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b22:	7afb      	ldrb	r3, [r7, #11]
 8009b24:	f003 020f 	and.w	r2, r3, #15
 8009b28:	4613      	mov	r3, r2
 8009b2a:	00db      	lsls	r3, r3, #3
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	4413      	add	r3, r2
 8009b38:	3304      	adds	r3, #4
 8009b3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	2200      	movs	r2, #0
 8009b52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b54:	7afb      	ldrb	r3, [r7, #11]
 8009b56:	f003 030f 	and.w	r3, r3, #15
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d102      	bne.n	8009b6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	461a      	mov	r2, r3
 8009b7a:	6979      	ldr	r1, [r7, #20]
 8009b7c:	f00a f9b0 	bl	8013ee0 <USB_EPStartXfer>

  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b083      	sub	sp, #12
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	460b      	mov	r3, r1
 8009b94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009b96:	78fb      	ldrb	r3, [r7, #3]
 8009b98:	f003 020f 	and.w	r2, r3, #15
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009bac:	681b      	ldr	r3, [r3, #0]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b086      	sub	sp, #24
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	60f8      	str	r0, [r7, #12]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009bca:	7afb      	ldrb	r3, [r7, #11]
 8009bcc:	f003 020f 	and.w	r2, r3, #15
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	00db      	lsls	r3, r3, #3
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	3338      	adds	r3, #56	; 0x38
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	4413      	add	r3, r2
 8009bde:	3304      	adds	r3, #4
 8009be0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009bfa:	7afb      	ldrb	r3, [r7, #11]
 8009bfc:	f003 030f 	and.w	r3, r3, #15
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d102      	bne.n	8009c14 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6818      	ldr	r0, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	461a      	mov	r2, r3
 8009c20:	6979      	ldr	r1, [r7, #20]
 8009c22:	f00a f95d 	bl	8013ee0 <USB_EPStartXfer>

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009c3c:	78fb      	ldrb	r3, [r7, #3]
 8009c3e:	f003 020f 	and.w	r2, r3, #15
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d901      	bls.n	8009c4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e050      	b.n	8009cf0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	da0f      	bge.n	8009c76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c56:	78fb      	ldrb	r3, [r7, #3]
 8009c58:	f003 020f 	and.w	r2, r3, #15
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	4413      	add	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	3338      	adds	r3, #56	; 0x38
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	4413      	add	r3, r2
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2201      	movs	r2, #1
 8009c72:	705a      	strb	r2, [r3, #1]
 8009c74:	e00d      	b.n	8009c92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009c76:	78fa      	ldrb	r2, [r7, #3]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	00db      	lsls	r3, r3, #3
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	4413      	add	r3, r2
 8009c88:	3304      	adds	r3, #4
 8009c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	f003 030f 	and.w	r3, r3, #15
 8009c9e:	b2da      	uxtb	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d101      	bne.n	8009cb2 <HAL_PCD_EP_SetStall+0x82>
 8009cae:	2302      	movs	r3, #2
 8009cb0:	e01e      	b.n	8009cf0 <HAL_PCD_EP_SetStall+0xc0>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68f9      	ldr	r1, [r7, #12]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f00a fced 	bl	80146a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009cc6:	78fb      	ldrb	r3, [r7, #3]
 8009cc8:	f003 030f 	and.w	r3, r3, #15
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	b2d9      	uxtb	r1, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f00a fedf 	bl	8014aa4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	f003 020f 	and.w	r2, r3, #15
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d901      	bls.n	8009d16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e042      	b.n	8009d9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	da0f      	bge.n	8009d3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d1e:	78fb      	ldrb	r3, [r7, #3]
 8009d20:	f003 020f 	and.w	r2, r3, #15
 8009d24:	4613      	mov	r3, r2
 8009d26:	00db      	lsls	r3, r3, #3
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	3338      	adds	r3, #56	; 0x38
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	4413      	add	r3, r2
 8009d32:	3304      	adds	r3, #4
 8009d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	705a      	strb	r2, [r3, #1]
 8009d3c:	e00f      	b.n	8009d5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	f003 020f 	and.w	r2, r3, #15
 8009d44:	4613      	mov	r3, r2
 8009d46:	00db      	lsls	r3, r3, #3
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	4413      	add	r3, r2
 8009d54:	3304      	adds	r3, #4
 8009d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	f003 030f 	and.w	r3, r3, #15
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d101      	bne.n	8009d7e <HAL_PCD_EP_ClrStall+0x86>
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	e00e      	b.n	8009d9c <HAL_PCD_EP_ClrStall+0xa4>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68f9      	ldr	r1, [r7, #12]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f00a fcf5 	bl	801477c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	da0c      	bge.n	8009dd2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009db8:	78fb      	ldrb	r3, [r7, #3]
 8009dba:	f003 020f 	and.w	r2, r3, #15
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	00db      	lsls	r3, r3, #3
 8009dc2:	4413      	add	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	3338      	adds	r3, #56	; 0x38
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	4413      	add	r3, r2
 8009dcc:	3304      	adds	r3, #4
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	e00c      	b.n	8009dec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009dd2:	78fb      	ldrb	r3, [r7, #3]
 8009dd4:	f003 020f 	and.w	r2, r3, #15
 8009dd8:	4613      	mov	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	4413      	add	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	4413      	add	r3, r2
 8009de8:	3304      	adds	r3, #4
 8009dea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68f9      	ldr	r1, [r7, #12]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f00a fb14 	bl	8014420 <USB_EPStopXfer>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009dfc:	7afb      	ldrb	r3, [r7, #11]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b08a      	sub	sp, #40	; 0x28
 8009e0a:	af02      	add	r7, sp, #8
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	00db      	lsls	r3, r3, #3
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	3338      	adds	r3, #56	; 0x38
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	4413      	add	r3, r2
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	695a      	ldr	r2, [r3, #20]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d901      	bls.n	8009e3e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e06c      	b.n	8009f18 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	691a      	ldr	r2, [r3, #16]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	69fa      	ldr	r2, [r7, #28]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d902      	bls.n	8009e5a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	3303      	adds	r3, #3
 8009e5e:	089b      	lsrs	r3, r3, #2
 8009e60:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009e62:	e02b      	b.n	8009ebc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	691a      	ldr	r2, [r3, #16]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	69fa      	ldr	r2, [r7, #28]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d902      	bls.n	8009e80 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	3303      	adds	r3, #3
 8009e84:	089b      	lsrs	r3, r3, #2
 8009e86:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	68d9      	ldr	r1, [r3, #12]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	6978      	ldr	r0, [r7, #20]
 8009ea0:	f00a fb68 	bl	8014574 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	68da      	ldr	r2, [r3, #12]
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	441a      	add	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	695a      	ldr	r2, [r3, #20]
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	441a      	add	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d809      	bhi.n	8009ee6 <PCD_WriteEmptyTxFifo+0xe0>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	695a      	ldr	r2, [r3, #20]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d203      	bcs.n	8009ee6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1be      	bne.n	8009e64 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	691a      	ldr	r2, [r3, #16]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d811      	bhi.n	8009f16 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	f003 030f 	and.w	r3, r3, #15
 8009ef8:	2201      	movs	r2, #1
 8009efa:	fa02 f303 	lsl.w	r3, r2, r3
 8009efe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	43db      	mvns	r3, r3
 8009f0c:	6939      	ldr	r1, [r7, #16]
 8009f0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f12:	4013      	ands	r3, r2
 8009f14:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	333c      	adds	r3, #60	; 0x3c
 8009f38:	3304      	adds	r3, #4
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	015a      	lsls	r2, r3, #5
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	4413      	add	r3, r2
 8009f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d17b      	bne.n	800a04e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	f003 0308 	and.w	r3, r3, #8
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d015      	beq.n	8009f8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	4a61      	ldr	r2, [pc, #388]	; (800a0e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	f240 80b9 	bls.w	800a0dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 80b3 	beq.w	800a0dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	015a      	lsls	r2, r3, #5
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f82:	461a      	mov	r2, r3
 8009f84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f88:	6093      	str	r3, [r2, #8]
 8009f8a:	e0a7      	b.n	800a0dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d009      	beq.n	8009faa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	2320      	movs	r3, #32
 8009fa6:	6093      	str	r3, [r2, #8]
 8009fa8:	e098      	b.n	800a0dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f040 8093 	bne.w	800a0dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	4a4b      	ldr	r2, [pc, #300]	; (800a0e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d90f      	bls.n	8009fde <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00a      	beq.n	8009fde <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	015a      	lsls	r2, r3, #5
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fda:	6093      	str	r3, [r2, #8]
 8009fdc:	e07e      	b.n	800a0dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	4413      	add	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	4413      	add	r3, r2
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6a1a      	ldr	r2, [r3, #32]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	0159      	lsls	r1, r3, #5
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	440b      	add	r3, r1
 800a000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a00a:	1ad2      	subs	r2, r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d114      	bne.n	800a040 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d109      	bne.n	800a032 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a028:	461a      	mov	r2, r3
 800a02a:	2101      	movs	r1, #1
 800a02c:	f00a fd3a 	bl	8014aa4 <USB_EP0_OutStart>
 800a030:	e006      	b.n	800a040 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	441a      	add	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	b2db      	uxtb	r3, r3
 800a044:	4619      	mov	r1, r3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f010 f9fe 	bl	801a448 <HAL_PCD_DataOutStageCallback>
 800a04c:	e046      	b.n	800a0dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	4a26      	ldr	r2, [pc, #152]	; (800a0ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d124      	bne.n	800a0a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00a      	beq.n	800a076 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a06c:	461a      	mov	r2, r3
 800a06e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a072:	6093      	str	r3, [r2, #8]
 800a074:	e032      	b.n	800a0dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f003 0320 	and.w	r3, r3, #32
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d008      	beq.n	800a092 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	4413      	add	r3, r2
 800a088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08c:	461a      	mov	r2, r3
 800a08e:	2320      	movs	r3, #32
 800a090:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	b2db      	uxtb	r3, r3
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f010 f9d5 	bl	801a448 <HAL_PCD_DataOutStageCallback>
 800a09e:	e01d      	b.n	800a0dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d114      	bne.n	800a0d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	683a      	ldr	r2, [r7, #0]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	00db      	lsls	r3, r3, #3
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d108      	bne.n	800a0d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	f00a fcea 	bl	8014aa4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f010 f9b6 	bl	801a448 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3720      	adds	r7, #32
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	4f54300a 	.word	0x4f54300a
 800a0ec:	4f54310a 	.word	0x4f54310a

0800a0f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	333c      	adds	r3, #60	; 0x3c
 800a108:	3304      	adds	r3, #4
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	4a15      	ldr	r2, [pc, #84]	; (800a178 <PCD_EP_OutSetupPacket_int+0x88>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d90e      	bls.n	800a144 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d009      	beq.n	800a144 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13c:	461a      	mov	r2, r3
 800a13e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a142:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f010 f96d 	bl	801a424 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	4a0a      	ldr	r2, [pc, #40]	; (800a178 <PCD_EP_OutSetupPacket_int+0x88>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d90c      	bls.n	800a16c <PCD_EP_OutSetupPacket_int+0x7c>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d108      	bne.n	800a16c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6818      	ldr	r0, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a164:	461a      	mov	r2, r3
 800a166:	2101      	movs	r1, #1
 800a168:	f00a fc9c 	bl	8014aa4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	4f54300a 	.word	0x4f54300a

0800a17c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	70fb      	strb	r3, [r7, #3]
 800a188:	4613      	mov	r3, r2
 800a18a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a194:	78fb      	ldrb	r3, [r7, #3]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d107      	bne.n	800a1aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a19a:	883b      	ldrh	r3, [r7, #0]
 800a19c:	0419      	lsls	r1, r3, #16
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	430a      	orrs	r2, r1
 800a1a6:	629a      	str	r2, [r3, #40]	; 0x28
 800a1a8:	e028      	b.n	800a1fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b0:	0c1b      	lsrs	r3, r3, #16
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73fb      	strb	r3, [r7, #15]
 800a1bc:	e00d      	b.n	800a1da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	3340      	adds	r3, #64	; 0x40
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	0c1b      	lsrs	r3, r3, #16
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	73fb      	strb	r3, [r7, #15]
 800a1da:	7bfa      	ldrb	r2, [r7, #15]
 800a1dc:	78fb      	ldrb	r3, [r7, #3]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d3ec      	bcc.n	800a1be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a1e4:	883b      	ldrh	r3, [r7, #0]
 800a1e6:	0418      	lsls	r0, r3, #16
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6819      	ldr	r1, [r3, #0]
 800a1ec:	78fb      	ldrb	r3, [r7, #3]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	4302      	orrs	r2, r0
 800a1f4:	3340      	adds	r3, #64	; 0x40
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	440b      	add	r3, r1
 800a1fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	460b      	mov	r3, r1
 800a214:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	887a      	ldrh	r2, [r7, #2]
 800a21c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a25a:	4b05      	ldr	r3, [pc, #20]	; (800a270 <HAL_PCDEx_ActivateLPM+0x44>)
 800a25c:	4313      	orrs	r3, r2
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	10000003 	.word	0x10000003

0800a274 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a294:	4b19      	ldr	r3, [pc, #100]	; (800a2fc <HAL_PWREx_ConfigSupply+0x70>)
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	d00a      	beq.n	800a2b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a2a0:	4b16      	ldr	r3, [pc, #88]	; (800a2fc <HAL_PWREx_ConfigSupply+0x70>)
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f003 0307 	and.w	r3, r3, #7
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d001      	beq.n	800a2b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e01f      	b.n	800a2f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	e01d      	b.n	800a2f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a2b6:	4b11      	ldr	r3, [pc, #68]	; (800a2fc <HAL_PWREx_ConfigSupply+0x70>)
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f023 0207 	bic.w	r2, r3, #7
 800a2be:	490f      	ldr	r1, [pc, #60]	; (800a2fc <HAL_PWREx_ConfigSupply+0x70>)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a2c6:	f7f9 fcc3 	bl	8003c50 <HAL_GetTick>
 800a2ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a2cc:	e009      	b.n	800a2e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a2ce:	f7f9 fcbf 	bl	8003c50 <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2dc:	d901      	bls.n	800a2e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e007      	b.n	800a2f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a2e2:	4b06      	ldr	r3, [pc, #24]	; (800a2fc <HAL_PWREx_ConfigSupply+0x70>)
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ee:	d1ee      	bne.n	800a2ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	58024800 	.word	0x58024800

0800a300 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a300:	b480      	push	{r7}
 800a302:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a304:	4b05      	ldr	r3, [pc, #20]	; (800a31c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	4a04      	ldr	r2, [pc, #16]	; (800a31c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a30a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a30e:	60d3      	str	r3, [r2, #12]
}
 800a310:	bf00      	nop
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	58024800 	.word	0x58024800

0800a320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08c      	sub	sp, #48	; 0x30
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e3c8      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 8087 	beq.w	800a44e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a340:	4b88      	ldr	r3, [pc, #544]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a348:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a34a:	4b86      	ldr	r3, [pc, #536]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	2b10      	cmp	r3, #16
 800a354:	d007      	beq.n	800a366 <HAL_RCC_OscConfig+0x46>
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	2b18      	cmp	r3, #24
 800a35a:	d110      	bne.n	800a37e <HAL_RCC_OscConfig+0x5e>
 800a35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35e:	f003 0303 	and.w	r3, r3, #3
 800a362:	2b02      	cmp	r3, #2
 800a364:	d10b      	bne.n	800a37e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a366:	4b7f      	ldr	r3, [pc, #508]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d06c      	beq.n	800a44c <HAL_RCC_OscConfig+0x12c>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d168      	bne.n	800a44c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e3a2      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a386:	d106      	bne.n	800a396 <HAL_RCC_OscConfig+0x76>
 800a388:	4b76      	ldr	r3, [pc, #472]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a75      	ldr	r2, [pc, #468]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a38e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a392:	6013      	str	r3, [r2, #0]
 800a394:	e02e      	b.n	800a3f4 <HAL_RCC_OscConfig+0xd4>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10c      	bne.n	800a3b8 <HAL_RCC_OscConfig+0x98>
 800a39e:	4b71      	ldr	r3, [pc, #452]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a70      	ldr	r2, [pc, #448]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3a8:	6013      	str	r3, [r2, #0]
 800a3aa:	4b6e      	ldr	r3, [pc, #440]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a6d      	ldr	r2, [pc, #436]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	e01d      	b.n	800a3f4 <HAL_RCC_OscConfig+0xd4>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3c0:	d10c      	bne.n	800a3dc <HAL_RCC_OscConfig+0xbc>
 800a3c2:	4b68      	ldr	r3, [pc, #416]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a67      	ldr	r2, [pc, #412]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3cc:	6013      	str	r3, [r2, #0]
 800a3ce:	4b65      	ldr	r3, [pc, #404]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a64      	ldr	r2, [pc, #400]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	e00b      	b.n	800a3f4 <HAL_RCC_OscConfig+0xd4>
 800a3dc:	4b61      	ldr	r3, [pc, #388]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a60      	ldr	r2, [pc, #384]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	4b5e      	ldr	r3, [pc, #376]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a5d      	ldr	r2, [pc, #372]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a3ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d013      	beq.n	800a424 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3fc:	f7f9 fc28 	bl	8003c50 <HAL_GetTick>
 800a400:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a402:	e008      	b.n	800a416 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a404:	f7f9 fc24 	bl	8003c50 <HAL_GetTick>
 800a408:	4602      	mov	r2, r0
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	2b64      	cmp	r3, #100	; 0x64
 800a410:	d901      	bls.n	800a416 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a412:	2303      	movs	r3, #3
 800a414:	e356      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a416:	4b53      	ldr	r3, [pc, #332]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0f0      	beq.n	800a404 <HAL_RCC_OscConfig+0xe4>
 800a422:	e014      	b.n	800a44e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a424:	f7f9 fc14 	bl	8003c50 <HAL_GetTick>
 800a428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a42a:	e008      	b.n	800a43e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a42c:	f7f9 fc10 	bl	8003c50 <HAL_GetTick>
 800a430:	4602      	mov	r2, r0
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	2b64      	cmp	r3, #100	; 0x64
 800a438:	d901      	bls.n	800a43e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e342      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a43e:	4b49      	ldr	r3, [pc, #292]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1f0      	bne.n	800a42c <HAL_RCC_OscConfig+0x10c>
 800a44a:	e000      	b.n	800a44e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a44c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0302 	and.w	r3, r3, #2
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 808c 	beq.w	800a574 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a45c:	4b41      	ldr	r3, [pc, #260]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a464:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a466:	4b3f      	ldr	r3, [pc, #252]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d007      	beq.n	800a482 <HAL_RCC_OscConfig+0x162>
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	2b18      	cmp	r3, #24
 800a476:	d137      	bne.n	800a4e8 <HAL_RCC_OscConfig+0x1c8>
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	f003 0303 	and.w	r3, r3, #3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d132      	bne.n	800a4e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a482:	4b38      	ldr	r3, [pc, #224]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 0304 	and.w	r3, r3, #4
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d005      	beq.n	800a49a <HAL_RCC_OscConfig+0x17a>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e314      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a49a:	4b32      	ldr	r3, [pc, #200]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f023 0219 	bic.w	r2, r3, #25
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	492f      	ldr	r1, [pc, #188]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ac:	f7f9 fbd0 	bl	8003c50 <HAL_GetTick>
 800a4b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4b2:	e008      	b.n	800a4c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4b4:	f7f9 fbcc 	bl	8003c50 <HAL_GetTick>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d901      	bls.n	800a4c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e2fe      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4c6:	4b27      	ldr	r3, [pc, #156]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0304 	and.w	r3, r3, #4
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d0f0      	beq.n	800a4b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4d2:	4b24      	ldr	r3, [pc, #144]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	061b      	lsls	r3, r3, #24
 800a4e0:	4920      	ldr	r1, [pc, #128]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a4e6:	e045      	b.n	800a574 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d026      	beq.n	800a53e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a4f0:	4b1c      	ldr	r3, [pc, #112]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f023 0219 	bic.w	r2, r3, #25
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	4919      	ldr	r1, [pc, #100]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a502:	f7f9 fba5 	bl	8003c50 <HAL_GetTick>
 800a506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a508:	e008      	b.n	800a51c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a50a:	f7f9 fba1 	bl	8003c50 <HAL_GetTick>
 800a50e:	4602      	mov	r2, r0
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	2b02      	cmp	r3, #2
 800a516:	d901      	bls.n	800a51c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e2d3      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a51c:	4b11      	ldr	r3, [pc, #68]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 0304 	and.w	r3, r3, #4
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0f0      	beq.n	800a50a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a528:	4b0e      	ldr	r3, [pc, #56]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	061b      	lsls	r3, r3, #24
 800a536:	490b      	ldr	r1, [pc, #44]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a538:	4313      	orrs	r3, r2
 800a53a:	604b      	str	r3, [r1, #4]
 800a53c:	e01a      	b.n	800a574 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a53e:	4b09      	ldr	r3, [pc, #36]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a08      	ldr	r2, [pc, #32]	; (800a564 <HAL_RCC_OscConfig+0x244>)
 800a544:	f023 0301 	bic.w	r3, r3, #1
 800a548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a54a:	f7f9 fb81 	bl	8003c50 <HAL_GetTick>
 800a54e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a550:	e00a      	b.n	800a568 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a552:	f7f9 fb7d 	bl	8003c50 <HAL_GetTick>
 800a556:	4602      	mov	r2, r0
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d903      	bls.n	800a568 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a560:	2303      	movs	r3, #3
 800a562:	e2af      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
 800a564:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a568:	4b96      	ldr	r3, [pc, #600]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 0304 	and.w	r3, r3, #4
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1ee      	bne.n	800a552 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0310 	and.w	r3, r3, #16
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d06a      	beq.n	800a656 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a580:	4b90      	ldr	r3, [pc, #576]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a588:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a58a:	4b8e      	ldr	r3, [pc, #568]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	2b08      	cmp	r3, #8
 800a594:	d007      	beq.n	800a5a6 <HAL_RCC_OscConfig+0x286>
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	2b18      	cmp	r3, #24
 800a59a:	d11b      	bne.n	800a5d4 <HAL_RCC_OscConfig+0x2b4>
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	f003 0303 	and.w	r3, r3, #3
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d116      	bne.n	800a5d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5a6:	4b87      	ldr	r3, [pc, #540]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d005      	beq.n	800a5be <HAL_RCC_OscConfig+0x29e>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	69db      	ldr	r3, [r3, #28]
 800a5b6:	2b80      	cmp	r3, #128	; 0x80
 800a5b8:	d001      	beq.n	800a5be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e282      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5be:	4b81      	ldr	r3, [pc, #516]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	061b      	lsls	r3, r3, #24
 800a5cc:	497d      	ldr	r1, [pc, #500]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5d2:	e040      	b.n	800a656 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d023      	beq.n	800a624 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a5dc:	4b79      	ldr	r3, [pc, #484]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a78      	ldr	r2, [pc, #480]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a5e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5e8:	f7f9 fb32 	bl	8003c50 <HAL_GetTick>
 800a5ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a5ee:	e008      	b.n	800a602 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a5f0:	f7f9 fb2e 	bl	8003c50 <HAL_GetTick>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d901      	bls.n	800a602 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e260      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a602:	4b70      	ldr	r3, [pc, #448]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d0f0      	beq.n	800a5f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a60e:	4b6d      	ldr	r3, [pc, #436]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a1b      	ldr	r3, [r3, #32]
 800a61a:	061b      	lsls	r3, r3, #24
 800a61c:	4969      	ldr	r1, [pc, #420]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a61e:	4313      	orrs	r3, r2
 800a620:	60cb      	str	r3, [r1, #12]
 800a622:	e018      	b.n	800a656 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a624:	4b67      	ldr	r3, [pc, #412]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a66      	ldr	r2, [pc, #408]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a62a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a62e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a630:	f7f9 fb0e 	bl	8003c50 <HAL_GetTick>
 800a634:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a636:	e008      	b.n	800a64a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a638:	f7f9 fb0a 	bl	8003c50 <HAL_GetTick>
 800a63c:	4602      	mov	r2, r0
 800a63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	2b02      	cmp	r3, #2
 800a644:	d901      	bls.n	800a64a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e23c      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a64a:	4b5e      	ldr	r3, [pc, #376]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1f0      	bne.n	800a638 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 0308 	and.w	r3, r3, #8
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d036      	beq.n	800a6d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d019      	beq.n	800a69e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a66a:	4b56      	ldr	r3, [pc, #344]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a66e:	4a55      	ldr	r2, [pc, #340]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a670:	f043 0301 	orr.w	r3, r3, #1
 800a674:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a676:	f7f9 faeb 	bl	8003c50 <HAL_GetTick>
 800a67a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a67c:	e008      	b.n	800a690 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a67e:	f7f9 fae7 	bl	8003c50 <HAL_GetTick>
 800a682:	4602      	mov	r2, r0
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d901      	bls.n	800a690 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e219      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a690:	4b4c      	ldr	r3, [pc, #304]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a694:	f003 0302 	and.w	r3, r3, #2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d0f0      	beq.n	800a67e <HAL_RCC_OscConfig+0x35e>
 800a69c:	e018      	b.n	800a6d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a69e:	4b49      	ldr	r3, [pc, #292]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a6a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6a2:	4a48      	ldr	r2, [pc, #288]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a6a4:	f023 0301 	bic.w	r3, r3, #1
 800a6a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6aa:	f7f9 fad1 	bl	8003c50 <HAL_GetTick>
 800a6ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a6b0:	e008      	b.n	800a6c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6b2:	f7f9 facd 	bl	8003c50 <HAL_GetTick>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d901      	bls.n	800a6c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e1ff      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a6c4:	4b3f      	ldr	r3, [pc, #252]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a6c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6c8:	f003 0302 	and.w	r3, r3, #2
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1f0      	bne.n	800a6b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0320 	and.w	r3, r3, #32
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d036      	beq.n	800a74a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d019      	beq.n	800a718 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a6e4:	4b37      	ldr	r3, [pc, #220]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a36      	ldr	r2, [pc, #216]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a6ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a6f0:	f7f9 faae 	bl	8003c50 <HAL_GetTick>
 800a6f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a6f6:	e008      	b.n	800a70a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a6f8:	f7f9 faaa 	bl	8003c50 <HAL_GetTick>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	2b02      	cmp	r3, #2
 800a704:	d901      	bls.n	800a70a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e1dc      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a70a:	4b2e      	ldr	r3, [pc, #184]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0f0      	beq.n	800a6f8 <HAL_RCC_OscConfig+0x3d8>
 800a716:	e018      	b.n	800a74a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a718:	4b2a      	ldr	r3, [pc, #168]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a29      	ldr	r2, [pc, #164]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a71e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a722:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a724:	f7f9 fa94 	bl	8003c50 <HAL_GetTick>
 800a728:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a72a:	e008      	b.n	800a73e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a72c:	f7f9 fa90 	bl	8003c50 <HAL_GetTick>
 800a730:	4602      	mov	r2, r0
 800a732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	2b02      	cmp	r3, #2
 800a738:	d901      	bls.n	800a73e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e1c2      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a73e:	4b21      	ldr	r3, [pc, #132]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1f0      	bne.n	800a72c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0304 	and.w	r3, r3, #4
 800a752:	2b00      	cmp	r3, #0
 800a754:	f000 8086 	beq.w	800a864 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a758:	4b1b      	ldr	r3, [pc, #108]	; (800a7c8 <HAL_RCC_OscConfig+0x4a8>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a1a      	ldr	r2, [pc, #104]	; (800a7c8 <HAL_RCC_OscConfig+0x4a8>)
 800a75e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a762:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a764:	f7f9 fa74 	bl	8003c50 <HAL_GetTick>
 800a768:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a76a:	e008      	b.n	800a77e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a76c:	f7f9 fa70 	bl	8003c50 <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	2b64      	cmp	r3, #100	; 0x64
 800a778:	d901      	bls.n	800a77e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e1a2      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a77e:	4b12      	ldr	r3, [pc, #72]	; (800a7c8 <HAL_RCC_OscConfig+0x4a8>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a786:	2b00      	cmp	r3, #0
 800a788:	d0f0      	beq.n	800a76c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d106      	bne.n	800a7a0 <HAL_RCC_OscConfig+0x480>
 800a792:	4b0c      	ldr	r3, [pc, #48]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a796:	4a0b      	ldr	r2, [pc, #44]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a798:	f043 0301 	orr.w	r3, r3, #1
 800a79c:	6713      	str	r3, [r2, #112]	; 0x70
 800a79e:	e032      	b.n	800a806 <HAL_RCC_OscConfig+0x4e6>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d111      	bne.n	800a7cc <HAL_RCC_OscConfig+0x4ac>
 800a7a8:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a7aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ac:	4a05      	ldr	r2, [pc, #20]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a7ae:	f023 0301 	bic.w	r3, r3, #1
 800a7b2:	6713      	str	r3, [r2, #112]	; 0x70
 800a7b4:	4b03      	ldr	r3, [pc, #12]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b8:	4a02      	ldr	r2, [pc, #8]	; (800a7c4 <HAL_RCC_OscConfig+0x4a4>)
 800a7ba:	f023 0304 	bic.w	r3, r3, #4
 800a7be:	6713      	str	r3, [r2, #112]	; 0x70
 800a7c0:	e021      	b.n	800a806 <HAL_RCC_OscConfig+0x4e6>
 800a7c2:	bf00      	nop
 800a7c4:	58024400 	.word	0x58024400
 800a7c8:	58024800 	.word	0x58024800
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	2b05      	cmp	r3, #5
 800a7d2:	d10c      	bne.n	800a7ee <HAL_RCC_OscConfig+0x4ce>
 800a7d4:	4b83      	ldr	r3, [pc, #524]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d8:	4a82      	ldr	r2, [pc, #520]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a7da:	f043 0304 	orr.w	r3, r3, #4
 800a7de:	6713      	str	r3, [r2, #112]	; 0x70
 800a7e0:	4b80      	ldr	r3, [pc, #512]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a7e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7e4:	4a7f      	ldr	r2, [pc, #508]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a7e6:	f043 0301 	orr.w	r3, r3, #1
 800a7ea:	6713      	str	r3, [r2, #112]	; 0x70
 800a7ec:	e00b      	b.n	800a806 <HAL_RCC_OscConfig+0x4e6>
 800a7ee:	4b7d      	ldr	r3, [pc, #500]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f2:	4a7c      	ldr	r2, [pc, #496]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a7f4:	f023 0301 	bic.w	r3, r3, #1
 800a7f8:	6713      	str	r3, [r2, #112]	; 0x70
 800a7fa:	4b7a      	ldr	r3, [pc, #488]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fe:	4a79      	ldr	r2, [pc, #484]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a800:	f023 0304 	bic.w	r3, r3, #4
 800a804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d015      	beq.n	800a83a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a80e:	f7f9 fa1f 	bl	8003c50 <HAL_GetTick>
 800a812:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a814:	e00a      	b.n	800a82c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a816:	f7f9 fa1b 	bl	8003c50 <HAL_GetTick>
 800a81a:	4602      	mov	r2, r0
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	f241 3288 	movw	r2, #5000	; 0x1388
 800a824:	4293      	cmp	r3, r2
 800a826:	d901      	bls.n	800a82c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e14b      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a82c:	4b6d      	ldr	r3, [pc, #436]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a830:	f003 0302 	and.w	r3, r3, #2
 800a834:	2b00      	cmp	r3, #0
 800a836:	d0ee      	beq.n	800a816 <HAL_RCC_OscConfig+0x4f6>
 800a838:	e014      	b.n	800a864 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a83a:	f7f9 fa09 	bl	8003c50 <HAL_GetTick>
 800a83e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a840:	e00a      	b.n	800a858 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a842:	f7f9 fa05 	bl	8003c50 <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a850:	4293      	cmp	r3, r2
 800a852:	d901      	bls.n	800a858 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e135      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a858:	4b62      	ldr	r3, [pc, #392]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a85c:	f003 0302 	and.w	r3, r3, #2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1ee      	bne.n	800a842 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 812a 	beq.w	800aac2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a86e:	4b5d      	ldr	r3, [pc, #372]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a876:	2b18      	cmp	r3, #24
 800a878:	f000 80ba 	beq.w	800a9f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a880:	2b02      	cmp	r3, #2
 800a882:	f040 8095 	bne.w	800a9b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a886:	4b57      	ldr	r3, [pc, #348]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a56      	ldr	r2, [pc, #344]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a88c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a892:	f7f9 f9dd 	bl	8003c50 <HAL_GetTick>
 800a896:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a898:	e008      	b.n	800a8ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a89a:	f7f9 f9d9 	bl	8003c50 <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d901      	bls.n	800a8ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e10b      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8ac:	4b4d      	ldr	r3, [pc, #308]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1f0      	bne.n	800a89a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a8b8:	4b4a      	ldr	r3, [pc, #296]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a8ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8bc:	4b4a      	ldr	r3, [pc, #296]	; (800a9e8 <HAL_RCC_OscConfig+0x6c8>)
 800a8be:	4013      	ands	r3, r2
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a8c8:	0112      	lsls	r2, r2, #4
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	4945      	ldr	r1, [pc, #276]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	628b      	str	r3, [r1, #40]	; 0x28
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	025b      	lsls	r3, r3, #9
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	431a      	orrs	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	041b      	lsls	r3, r3, #16
 800a8f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8f4:	431a      	orrs	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	061b      	lsls	r3, r3, #24
 800a8fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a902:	4938      	ldr	r1, [pc, #224]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a904:	4313      	orrs	r3, r2
 800a906:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a908:	4b36      	ldr	r3, [pc, #216]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90c:	4a35      	ldr	r2, [pc, #212]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a90e:	f023 0301 	bic.w	r3, r3, #1
 800a912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a914:	4b33      	ldr	r3, [pc, #204]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a918:	4b34      	ldr	r3, [pc, #208]	; (800a9ec <HAL_RCC_OscConfig+0x6cc>)
 800a91a:	4013      	ands	r3, r2
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a920:	00d2      	lsls	r2, r2, #3
 800a922:	4930      	ldr	r1, [pc, #192]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a924:	4313      	orrs	r3, r2
 800a926:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a928:	4b2e      	ldr	r3, [pc, #184]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	f023 020c 	bic.w	r2, r3, #12
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a934:	492b      	ldr	r1, [pc, #172]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a936:	4313      	orrs	r3, r2
 800a938:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a93a:	4b2a      	ldr	r3, [pc, #168]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93e:	f023 0202 	bic.w	r2, r3, #2
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a946:	4927      	ldr	r1, [pc, #156]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a948:	4313      	orrs	r3, r2
 800a94a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a94c:	4b25      	ldr	r3, [pc, #148]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	4a24      	ldr	r2, [pc, #144]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a958:	4b22      	ldr	r3, [pc, #136]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95c:	4a21      	ldr	r2, [pc, #132]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a95e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a964:	4b1f      	ldr	r3, [pc, #124]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	4a1e      	ldr	r2, [pc, #120]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a96a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a96e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a970:	4b1c      	ldr	r3, [pc, #112]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a974:	4a1b      	ldr	r2, [pc, #108]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a976:	f043 0301 	orr.w	r3, r3, #1
 800a97a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a97c:	4b19      	ldr	r3, [pc, #100]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a18      	ldr	r2, [pc, #96]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a988:	f7f9 f962 	bl	8003c50 <HAL_GetTick>
 800a98c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a98e:	e008      	b.n	800a9a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a990:	f7f9 f95e 	bl	8003c50 <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d901      	bls.n	800a9a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e090      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9a2:	4b10      	ldr	r3, [pc, #64]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0f0      	beq.n	800a990 <HAL_RCC_OscConfig+0x670>
 800a9ae:	e088      	b.n	800aac2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9b0:	4b0c      	ldr	r3, [pc, #48]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a0b      	ldr	r2, [pc, #44]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a9b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9bc:	f7f9 f948 	bl	8003c50 <HAL_GetTick>
 800a9c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a9c2:	e008      	b.n	800a9d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9c4:	f7f9 f944 	bl	8003c50 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d901      	bls.n	800a9d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e076      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a9d6:	4b03      	ldr	r3, [pc, #12]	; (800a9e4 <HAL_RCC_OscConfig+0x6c4>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1f0      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x6a4>
 800a9e2:	e06e      	b.n	800aac2 <HAL_RCC_OscConfig+0x7a2>
 800a9e4:	58024400 	.word	0x58024400
 800a9e8:	fffffc0c 	.word	0xfffffc0c
 800a9ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a9f0:	4b36      	ldr	r3, [pc, #216]	; (800aacc <HAL_RCC_OscConfig+0x7ac>)
 800a9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a9f6:	4b35      	ldr	r3, [pc, #212]	; (800aacc <HAL_RCC_OscConfig+0x7ac>)
 800a9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d031      	beq.n	800aa68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	f003 0203 	and.w	r2, r3, #3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d12a      	bne.n	800aa68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	091b      	lsrs	r3, r3, #4
 800aa16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d122      	bne.n	800aa68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d11a      	bne.n	800aa68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	0a5b      	lsrs	r3, r3, #9
 800aa36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d111      	bne.n	800aa68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	0c1b      	lsrs	r3, r3, #16
 800aa48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d108      	bne.n	800aa68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	0e1b      	lsrs	r3, r3, #24
 800aa5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d001      	beq.n	800aa6c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e02b      	b.n	800aac4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800aa6c:	4b17      	ldr	r3, [pc, #92]	; (800aacc <HAL_RCC_OscConfig+0x7ac>)
 800aa6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa70:	08db      	lsrs	r3, r3, #3
 800aa72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d01f      	beq.n	800aac2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800aa82:	4b12      	ldr	r3, [pc, #72]	; (800aacc <HAL_RCC_OscConfig+0x7ac>)
 800aa84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa86:	4a11      	ldr	r2, [pc, #68]	; (800aacc <HAL_RCC_OscConfig+0x7ac>)
 800aa88:	f023 0301 	bic.w	r3, r3, #1
 800aa8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aa8e:	f7f9 f8df 	bl	8003c50 <HAL_GetTick>
 800aa92:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800aa94:	bf00      	nop
 800aa96:	f7f9 f8db 	bl	8003c50 <HAL_GetTick>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d0f9      	beq.n	800aa96 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aaa2:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <HAL_RCC_OscConfig+0x7ac>)
 800aaa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaa6:	4b0a      	ldr	r3, [pc, #40]	; (800aad0 <HAL_RCC_OscConfig+0x7b0>)
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aaae:	00d2      	lsls	r2, r2, #3
 800aab0:	4906      	ldr	r1, [pc, #24]	; (800aacc <HAL_RCC_OscConfig+0x7ac>)
 800aab2:	4313      	orrs	r3, r2
 800aab4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800aab6:	4b05      	ldr	r3, [pc, #20]	; (800aacc <HAL_RCC_OscConfig+0x7ac>)
 800aab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaba:	4a04      	ldr	r2, [pc, #16]	; (800aacc <HAL_RCC_OscConfig+0x7ac>)
 800aabc:	f043 0301 	orr.w	r3, r3, #1
 800aac0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3730      	adds	r7, #48	; 0x30
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	58024400 	.word	0x58024400
 800aad0:	ffff0007 	.word	0xffff0007

0800aad4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d101      	bne.n	800aae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e19c      	b.n	800ae22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aae8:	4b8a      	ldr	r3, [pc, #552]	; (800ad14 <HAL_RCC_ClockConfig+0x240>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 030f 	and.w	r3, r3, #15
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d910      	bls.n	800ab18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaf6:	4b87      	ldr	r3, [pc, #540]	; (800ad14 <HAL_RCC_ClockConfig+0x240>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f023 020f 	bic.w	r2, r3, #15
 800aafe:	4985      	ldr	r1, [pc, #532]	; (800ad14 <HAL_RCC_ClockConfig+0x240>)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab06:	4b83      	ldr	r3, [pc, #524]	; (800ad14 <HAL_RCC_ClockConfig+0x240>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 030f 	and.w	r3, r3, #15
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d001      	beq.n	800ab18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	e184      	b.n	800ae22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0304 	and.w	r3, r3, #4
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d010      	beq.n	800ab46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	691a      	ldr	r2, [r3, #16]
 800ab28:	4b7b      	ldr	r3, [pc, #492]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d908      	bls.n	800ab46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab34:	4b78      	ldr	r3, [pc, #480]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	4975      	ldr	r1, [pc, #468]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 0308 	and.w	r3, r3, #8
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d010      	beq.n	800ab74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	695a      	ldr	r2, [r3, #20]
 800ab56:	4b70      	ldr	r3, [pc, #448]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ab58:	69db      	ldr	r3, [r3, #28]
 800ab5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d908      	bls.n	800ab74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab62:	4b6d      	ldr	r3, [pc, #436]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	496a      	ldr	r1, [pc, #424]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0310 	and.w	r3, r3, #16
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d010      	beq.n	800aba2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	699a      	ldr	r2, [r3, #24]
 800ab84:	4b64      	ldr	r3, [pc, #400]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ab86:	69db      	ldr	r3, [r3, #28]
 800ab88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d908      	bls.n	800aba2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab90:	4b61      	ldr	r3, [pc, #388]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	495e      	ldr	r1, [pc, #376]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 0320 	and.w	r3, r3, #32
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d010      	beq.n	800abd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	69da      	ldr	r2, [r3, #28]
 800abb2:	4b59      	ldr	r3, [pc, #356]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abba:	429a      	cmp	r2, r3
 800abbc:	d908      	bls.n	800abd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800abbe:	4b56      	ldr	r3, [pc, #344]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	4953      	ldr	r1, [pc, #332]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800abcc:	4313      	orrs	r3, r2
 800abce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0302 	and.w	r3, r3, #2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d010      	beq.n	800abfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68da      	ldr	r2, [r3, #12]
 800abe0:	4b4d      	ldr	r3, [pc, #308]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800abe2:	699b      	ldr	r3, [r3, #24]
 800abe4:	f003 030f 	and.w	r3, r3, #15
 800abe8:	429a      	cmp	r2, r3
 800abea:	d908      	bls.n	800abfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abec:	4b4a      	ldr	r3, [pc, #296]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	f023 020f 	bic.w	r2, r3, #15
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	4947      	ldr	r1, [pc, #284]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800abfa:	4313      	orrs	r3, r2
 800abfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d055      	beq.n	800acb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ac0a:	4b43      	ldr	r3, [pc, #268]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	4940      	ldr	r1, [pc, #256]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d107      	bne.n	800ac34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac24:	4b3c      	ldr	r3, [pc, #240]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d121      	bne.n	800ac74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	e0f6      	b.n	800ae22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d107      	bne.n	800ac4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac3c:	4b36      	ldr	r3, [pc, #216]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d115      	bne.n	800ac74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e0ea      	b.n	800ae22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d107      	bne.n	800ac64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac54:	4b30      	ldr	r3, [pc, #192]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d109      	bne.n	800ac74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e0de      	b.n	800ae22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac64:	4b2c      	ldr	r3, [pc, #176]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	e0d6      	b.n	800ae22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ac74:	4b28      	ldr	r3, [pc, #160]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	f023 0207 	bic.w	r2, r3, #7
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	4925      	ldr	r1, [pc, #148]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ac82:	4313      	orrs	r3, r2
 800ac84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac86:	f7f8 ffe3 	bl	8003c50 <HAL_GetTick>
 800ac8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac8c:	e00a      	b.n	800aca4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac8e:	f7f8 ffdf 	bl	8003c50 <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d901      	bls.n	800aca4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aca0:	2303      	movs	r3, #3
 800aca2:	e0be      	b.n	800ae22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aca4:	4b1c      	ldr	r3, [pc, #112]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	00db      	lsls	r3, r3, #3
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d1eb      	bne.n	800ac8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0302 	and.w	r3, r3, #2
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d010      	beq.n	800ace4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	4b14      	ldr	r3, [pc, #80]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800acc8:	699b      	ldr	r3, [r3, #24]
 800acca:	f003 030f 	and.w	r3, r3, #15
 800acce:	429a      	cmp	r2, r3
 800acd0:	d208      	bcs.n	800ace4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acd2:	4b11      	ldr	r3, [pc, #68]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	f023 020f 	bic.w	r2, r3, #15
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	490e      	ldr	r1, [pc, #56]	; (800ad18 <HAL_RCC_ClockConfig+0x244>)
 800ace0:	4313      	orrs	r3, r2
 800ace2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ace4:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <HAL_RCC_ClockConfig+0x240>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 030f 	and.w	r3, r3, #15
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d214      	bcs.n	800ad1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acf2:	4b08      	ldr	r3, [pc, #32]	; (800ad14 <HAL_RCC_ClockConfig+0x240>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f023 020f 	bic.w	r2, r3, #15
 800acfa:	4906      	ldr	r1, [pc, #24]	; (800ad14 <HAL_RCC_ClockConfig+0x240>)
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad02:	4b04      	ldr	r3, [pc, #16]	; (800ad14 <HAL_RCC_ClockConfig+0x240>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 030f 	and.w	r3, r3, #15
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d005      	beq.n	800ad1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e086      	b.n	800ae22 <HAL_RCC_ClockConfig+0x34e>
 800ad14:	52002000 	.word	0x52002000
 800ad18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0304 	and.w	r3, r3, #4
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d010      	beq.n	800ad4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	691a      	ldr	r2, [r3, #16]
 800ad2c:	4b3f      	ldr	r3, [pc, #252]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d208      	bcs.n	800ad4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ad38:	4b3c      	ldr	r3, [pc, #240]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	4939      	ldr	r1, [pc, #228]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0308 	and.w	r3, r3, #8
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d010      	beq.n	800ad78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	695a      	ldr	r2, [r3, #20]
 800ad5a:	4b34      	ldr	r3, [pc, #208]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800ad5c:	69db      	ldr	r3, [r3, #28]
 800ad5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d208      	bcs.n	800ad78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ad66:	4b31      	ldr	r3, [pc, #196]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800ad68:	69db      	ldr	r3, [r3, #28]
 800ad6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	695b      	ldr	r3, [r3, #20]
 800ad72:	492e      	ldr	r1, [pc, #184]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0310 	and.w	r3, r3, #16
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d010      	beq.n	800ada6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	699a      	ldr	r2, [r3, #24]
 800ad88:	4b28      	ldr	r3, [pc, #160]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d208      	bcs.n	800ada6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad94:	4b25      	ldr	r3, [pc, #148]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	4922      	ldr	r1, [pc, #136]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800ada2:	4313      	orrs	r3, r2
 800ada4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 0320 	and.w	r3, r3, #32
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d010      	beq.n	800add4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	69da      	ldr	r2, [r3, #28]
 800adb6:	4b1d      	ldr	r3, [pc, #116]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d208      	bcs.n	800add4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800adc2:	4b1a      	ldr	r3, [pc, #104]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	69db      	ldr	r3, [r3, #28]
 800adce:	4917      	ldr	r1, [pc, #92]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800add0:	4313      	orrs	r3, r2
 800add2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800add4:	f000 f89e 	bl	800af14 <HAL_RCC_GetSysClockFreq>
 800add8:	4602      	mov	r2, r0
 800adda:	4b14      	ldr	r3, [pc, #80]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	0a1b      	lsrs	r3, r3, #8
 800ade0:	f003 030f 	and.w	r3, r3, #15
 800ade4:	4912      	ldr	r1, [pc, #72]	; (800ae30 <HAL_RCC_ClockConfig+0x35c>)
 800ade6:	5ccb      	ldrb	r3, [r1, r3]
 800ade8:	f003 031f 	and.w	r3, r3, #31
 800adec:	fa22 f303 	lsr.w	r3, r2, r3
 800adf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800adf2:	4b0e      	ldr	r3, [pc, #56]	; (800ae2c <HAL_RCC_ClockConfig+0x358>)
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	f003 030f 	and.w	r3, r3, #15
 800adfa:	4a0d      	ldr	r2, [pc, #52]	; (800ae30 <HAL_RCC_ClockConfig+0x35c>)
 800adfc:	5cd3      	ldrb	r3, [r2, r3]
 800adfe:	f003 031f 	and.w	r3, r3, #31
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	fa22 f303 	lsr.w	r3, r2, r3
 800ae08:	4a0a      	ldr	r2, [pc, #40]	; (800ae34 <HAL_RCC_ClockConfig+0x360>)
 800ae0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae0c:	4a0a      	ldr	r2, [pc, #40]	; (800ae38 <HAL_RCC_ClockConfig+0x364>)
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ae12:	4b0a      	ldr	r3, [pc, #40]	; (800ae3c <HAL_RCC_ClockConfig+0x368>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7f8 fed0 	bl	8003bbc <HAL_InitTick>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	58024400 	.word	0x58024400
 800ae30:	0801bf7c 	.word	0x0801bf7c
 800ae34:	24000004 	.word	0x24000004
 800ae38:	24000000 	.word	0x24000000
 800ae3c:	24000008 	.word	0x24000008

0800ae40 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08c      	sub	sp, #48	; 0x30
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d12a      	bne.n	800aea8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800ae52:	4b2d      	ldr	r3, [pc, #180]	; (800af08 <HAL_RCC_MCOConfig+0xc8>)
 800ae54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae58:	4a2b      	ldr	r2, [pc, #172]	; (800af08 <HAL_RCC_MCOConfig+0xc8>)
 800ae5a:	f043 0301 	orr.w	r3, r3, #1
 800ae5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae62:	4b29      	ldr	r3, [pc, #164]	; (800af08 <HAL_RCC_MCOConfig+0xc8>)
 800ae64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	61bb      	str	r3, [r7, #24]
 800ae6e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800ae70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae76:	2302      	movs	r3, #2
 800ae78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ae82:	2300      	movs	r3, #0
 800ae84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ae86:	f107 031c 	add.w	r3, r7, #28
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	481f      	ldr	r0, [pc, #124]	; (800af0c <HAL_RCC_MCOConfig+0xcc>)
 800ae8e:	f7fd fc29 	bl	80086e4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800ae92:	4b1d      	ldr	r3, [pc, #116]	; (800af08 <HAL_RCC_MCOConfig+0xc8>)
 800ae94:	691b      	ldr	r3, [r3, #16]
 800ae96:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800ae9a:	68b9      	ldr	r1, [r7, #8]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	4919      	ldr	r1, [pc, #100]	; (800af08 <HAL_RCC_MCOConfig+0xc8>)
 800aea2:	4313      	orrs	r3, r2
 800aea4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800aea6:	e02a      	b.n	800aefe <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800aea8:	4b17      	ldr	r3, [pc, #92]	; (800af08 <HAL_RCC_MCOConfig+0xc8>)
 800aeaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aeae:	4a16      	ldr	r2, [pc, #88]	; (800af08 <HAL_RCC_MCOConfig+0xc8>)
 800aeb0:	f043 0304 	orr.w	r3, r3, #4
 800aeb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aeb8:	4b13      	ldr	r3, [pc, #76]	; (800af08 <HAL_RCC_MCOConfig+0xc8>)
 800aeba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aebe:	f003 0304 	and.w	r3, r3, #4
 800aec2:	617b      	str	r3, [r7, #20]
 800aec4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800aec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aeca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aecc:	2302      	movs	r3, #2
 800aece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aed0:	2303      	movs	r3, #3
 800aed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aed4:	2300      	movs	r3, #0
 800aed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800aed8:	2300      	movs	r3, #0
 800aeda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800aedc:	f107 031c 	add.w	r3, r7, #28
 800aee0:	4619      	mov	r1, r3
 800aee2:	480b      	ldr	r0, [pc, #44]	; (800af10 <HAL_RCC_MCOConfig+0xd0>)
 800aee4:	f7fd fbfe 	bl	80086e4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800aee8:	4b07      	ldr	r3, [pc, #28]	; (800af08 <HAL_RCC_MCOConfig+0xc8>)
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	01d9      	lsls	r1, r3, #7
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	430b      	orrs	r3, r1
 800aef8:	4903      	ldr	r1, [pc, #12]	; (800af08 <HAL_RCC_MCOConfig+0xc8>)
 800aefa:	4313      	orrs	r3, r2
 800aefc:	610b      	str	r3, [r1, #16]
}
 800aefe:	bf00      	nop
 800af00:	3730      	adds	r7, #48	; 0x30
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	58024400 	.word	0x58024400
 800af0c:	58020000 	.word	0x58020000
 800af10:	58020800 	.word	0x58020800

0800af14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af14:	b480      	push	{r7}
 800af16:	b089      	sub	sp, #36	; 0x24
 800af18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af1a:	4bb3      	ldr	r3, [pc, #716]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af22:	2b18      	cmp	r3, #24
 800af24:	f200 8155 	bhi.w	800b1d2 <HAL_RCC_GetSysClockFreq+0x2be>
 800af28:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <HAL_RCC_GetSysClockFreq+0x1c>)
 800af2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2e:	bf00      	nop
 800af30:	0800af95 	.word	0x0800af95
 800af34:	0800b1d3 	.word	0x0800b1d3
 800af38:	0800b1d3 	.word	0x0800b1d3
 800af3c:	0800b1d3 	.word	0x0800b1d3
 800af40:	0800b1d3 	.word	0x0800b1d3
 800af44:	0800b1d3 	.word	0x0800b1d3
 800af48:	0800b1d3 	.word	0x0800b1d3
 800af4c:	0800b1d3 	.word	0x0800b1d3
 800af50:	0800afbb 	.word	0x0800afbb
 800af54:	0800b1d3 	.word	0x0800b1d3
 800af58:	0800b1d3 	.word	0x0800b1d3
 800af5c:	0800b1d3 	.word	0x0800b1d3
 800af60:	0800b1d3 	.word	0x0800b1d3
 800af64:	0800b1d3 	.word	0x0800b1d3
 800af68:	0800b1d3 	.word	0x0800b1d3
 800af6c:	0800b1d3 	.word	0x0800b1d3
 800af70:	0800afc1 	.word	0x0800afc1
 800af74:	0800b1d3 	.word	0x0800b1d3
 800af78:	0800b1d3 	.word	0x0800b1d3
 800af7c:	0800b1d3 	.word	0x0800b1d3
 800af80:	0800b1d3 	.word	0x0800b1d3
 800af84:	0800b1d3 	.word	0x0800b1d3
 800af88:	0800b1d3 	.word	0x0800b1d3
 800af8c:	0800b1d3 	.word	0x0800b1d3
 800af90:	0800afc7 	.word	0x0800afc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af94:	4b94      	ldr	r3, [pc, #592]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 0320 	and.w	r3, r3, #32
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d009      	beq.n	800afb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afa0:	4b91      	ldr	r3, [pc, #580]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	08db      	lsrs	r3, r3, #3
 800afa6:	f003 0303 	and.w	r3, r3, #3
 800afaa:	4a90      	ldr	r2, [pc, #576]	; (800b1ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800afac:	fa22 f303 	lsr.w	r3, r2, r3
 800afb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800afb2:	e111      	b.n	800b1d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800afb4:	4b8d      	ldr	r3, [pc, #564]	; (800b1ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800afb6:	61bb      	str	r3, [r7, #24]
      break;
 800afb8:	e10e      	b.n	800b1d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800afba:	4b8d      	ldr	r3, [pc, #564]	; (800b1f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800afbc:	61bb      	str	r3, [r7, #24]
      break;
 800afbe:	e10b      	b.n	800b1d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800afc0:	4b8c      	ldr	r3, [pc, #560]	; (800b1f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800afc2:	61bb      	str	r3, [r7, #24]
      break;
 800afc4:	e108      	b.n	800b1d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afc6:	4b88      	ldr	r3, [pc, #544]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afca:	f003 0303 	and.w	r3, r3, #3
 800afce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800afd0:	4b85      	ldr	r3, [pc, #532]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd4:	091b      	lsrs	r3, r3, #4
 800afd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800afdc:	4b82      	ldr	r3, [pc, #520]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800afe6:	4b80      	ldr	r3, [pc, #512]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afea:	08db      	lsrs	r3, r3, #3
 800afec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	fb02 f303 	mul.w	r3, r2, r3
 800aff6:	ee07 3a90 	vmov	s15, r3
 800affa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800affe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 80e1 	beq.w	800b1cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	f000 8083 	beq.w	800b118 <HAL_RCC_GetSysClockFreq+0x204>
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2b02      	cmp	r3, #2
 800b016:	f200 80a1 	bhi.w	800b15c <HAL_RCC_GetSysClockFreq+0x248>
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <HAL_RCC_GetSysClockFreq+0x114>
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d056      	beq.n	800b0d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b026:	e099      	b.n	800b15c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b028:	4b6f      	ldr	r3, [pc, #444]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0320 	and.w	r3, r3, #32
 800b030:	2b00      	cmp	r3, #0
 800b032:	d02d      	beq.n	800b090 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b034:	4b6c      	ldr	r3, [pc, #432]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	08db      	lsrs	r3, r3, #3
 800b03a:	f003 0303 	and.w	r3, r3, #3
 800b03e:	4a6b      	ldr	r2, [pc, #428]	; (800b1ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b040:	fa22 f303 	lsr.w	r3, r2, r3
 800b044:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	ee07 3a90 	vmov	s15, r3
 800b04c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	ee07 3a90 	vmov	s15, r3
 800b056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b05e:	4b62      	ldr	r3, [pc, #392]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b072:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b1f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b07e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b08a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b08e:	e087      	b.n	800b1a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	ee07 3a90 	vmov	s15, r3
 800b096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b1fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800b09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0a2:	4b51      	ldr	r3, [pc, #324]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b1f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b0d2:	e065      	b.n	800b1a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	ee07 3a90 	vmov	s15, r3
 800b0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0de:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b200 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b0e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0e6:	4b40      	ldr	r3, [pc, #256]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b1f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b112:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b116:	e043      	b.n	800b1a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b122:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b204 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b12a:	4b2f      	ldr	r3, [pc, #188]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b13a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b13e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b1f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b14a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b14e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b152:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b156:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b15a:	e021      	b.n	800b1a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	ee07 3a90 	vmov	s15, r3
 800b162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b166:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b200 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b16a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b16e:	4b1e      	ldr	r3, [pc, #120]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b17e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b182:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b1f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b18e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b19e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b1a0:	4b11      	ldr	r3, [pc, #68]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a4:	0a5b      	lsrs	r3, r3, #9
 800b1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	ee07 3a90 	vmov	s15, r3
 800b1b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b1b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c4:	ee17 3a90 	vmov	r3, s15
 800b1c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b1ca:	e005      	b.n	800b1d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	61bb      	str	r3, [r7, #24]
      break;
 800b1d0:	e002      	b.n	800b1d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b1d2:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b1d4:	61bb      	str	r3, [r7, #24]
      break;
 800b1d6:	bf00      	nop
  }

  return sysclockfreq;
 800b1d8:	69bb      	ldr	r3, [r7, #24]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3724      	adds	r7, #36	; 0x24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	58024400 	.word	0x58024400
 800b1ec:	03d09000 	.word	0x03d09000
 800b1f0:	003d0900 	.word	0x003d0900
 800b1f4:	02faf080 	.word	0x02faf080
 800b1f8:	46000000 	.word	0x46000000
 800b1fc:	4c742400 	.word	0x4c742400
 800b200:	4a742400 	.word	0x4a742400
 800b204:	4c3ebc20 	.word	0x4c3ebc20

0800b208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b20e:	f7ff fe81 	bl	800af14 <HAL_RCC_GetSysClockFreq>
 800b212:	4602      	mov	r2, r0
 800b214:	4b10      	ldr	r3, [pc, #64]	; (800b258 <HAL_RCC_GetHCLKFreq+0x50>)
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	0a1b      	lsrs	r3, r3, #8
 800b21a:	f003 030f 	and.w	r3, r3, #15
 800b21e:	490f      	ldr	r1, [pc, #60]	; (800b25c <HAL_RCC_GetHCLKFreq+0x54>)
 800b220:	5ccb      	ldrb	r3, [r1, r3]
 800b222:	f003 031f 	and.w	r3, r3, #31
 800b226:	fa22 f303 	lsr.w	r3, r2, r3
 800b22a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b22c:	4b0a      	ldr	r3, [pc, #40]	; (800b258 <HAL_RCC_GetHCLKFreq+0x50>)
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	f003 030f 	and.w	r3, r3, #15
 800b234:	4a09      	ldr	r2, [pc, #36]	; (800b25c <HAL_RCC_GetHCLKFreq+0x54>)
 800b236:	5cd3      	ldrb	r3, [r2, r3]
 800b238:	f003 031f 	and.w	r3, r3, #31
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	fa22 f303 	lsr.w	r3, r2, r3
 800b242:	4a07      	ldr	r2, [pc, #28]	; (800b260 <HAL_RCC_GetHCLKFreq+0x58>)
 800b244:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b246:	4a07      	ldr	r2, [pc, #28]	; (800b264 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b24c:	4b04      	ldr	r3, [pc, #16]	; (800b260 <HAL_RCC_GetHCLKFreq+0x58>)
 800b24e:	681b      	ldr	r3, [r3, #0]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	58024400 	.word	0x58024400
 800b25c:	0801bf7c 	.word	0x0801bf7c
 800b260:	24000004 	.word	0x24000004
 800b264:	24000000 	.word	0x24000000

0800b268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b26c:	f7ff ffcc 	bl	800b208 <HAL_RCC_GetHCLKFreq>
 800b270:	4602      	mov	r2, r0
 800b272:	4b06      	ldr	r3, [pc, #24]	; (800b28c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b274:	69db      	ldr	r3, [r3, #28]
 800b276:	091b      	lsrs	r3, r3, #4
 800b278:	f003 0307 	and.w	r3, r3, #7
 800b27c:	4904      	ldr	r1, [pc, #16]	; (800b290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b27e:	5ccb      	ldrb	r3, [r1, r3]
 800b280:	f003 031f 	and.w	r3, r3, #31
 800b284:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b288:	4618      	mov	r0, r3
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	58024400 	.word	0x58024400
 800b290:	0801bf7c 	.word	0x0801bf7c

0800b294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b298:	f7ff ffb6 	bl	800b208 <HAL_RCC_GetHCLKFreq>
 800b29c:	4602      	mov	r2, r0
 800b29e:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2a0:	69db      	ldr	r3, [r3, #28]
 800b2a2:	0a1b      	lsrs	r3, r3, #8
 800b2a4:	f003 0307 	and.w	r3, r3, #7
 800b2a8:	4904      	ldr	r1, [pc, #16]	; (800b2bc <HAL_RCC_GetPCLK2Freq+0x28>)
 800b2aa:	5ccb      	ldrb	r3, [r1, r3]
 800b2ac:	f003 031f 	and.w	r3, r3, #31
 800b2b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	58024400 	.word	0x58024400
 800b2bc:	0801bf7c 	.word	0x0801bf7c

0800b2c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b2c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2c4:	b0c6      	sub	sp, #280	; 0x118
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b2e4:	2500      	movs	r5, #0
 800b2e6:	ea54 0305 	orrs.w	r3, r4, r5
 800b2ea:	d049      	beq.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2f6:	d02f      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b2f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2fc:	d828      	bhi.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b2fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b302:	d01a      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b308:	d822      	bhi.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d003      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b30e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b312:	d007      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b314:	e01c      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b316:	4bab      	ldr	r3, [pc, #684]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31a:	4aaa      	ldr	r2, [pc, #680]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b31c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b320:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b322:	e01a      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b328:	3308      	adds	r3, #8
 800b32a:	2102      	movs	r1, #2
 800b32c:	4618      	mov	r0, r3
 800b32e:	f002 fa49 	bl	800d7c4 <RCCEx_PLL2_Config>
 800b332:	4603      	mov	r3, r0
 800b334:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b338:	e00f      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33e:	3328      	adds	r3, #40	; 0x28
 800b340:	2102      	movs	r1, #2
 800b342:	4618      	mov	r0, r3
 800b344:	f002 faf0 	bl	800d928 <RCCEx_PLL3_Config>
 800b348:	4603      	mov	r3, r0
 800b34a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b34e:	e004      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b356:	e000      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b35a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10a      	bne.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b362:	4b98      	ldr	r3, [pc, #608]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b366:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b370:	4a94      	ldr	r2, [pc, #592]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b372:	430b      	orrs	r3, r1
 800b374:	6513      	str	r3, [r2, #80]	; 0x50
 800b376:	e003      	b.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b378:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b37c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b388:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b38c:	f04f 0900 	mov.w	r9, #0
 800b390:	ea58 0309 	orrs.w	r3, r8, r9
 800b394:	d047      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	d82a      	bhi.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b3a0:	a201      	add	r2, pc, #4	; (adr r2, 800b3a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a6:	bf00      	nop
 800b3a8:	0800b3bd 	.word	0x0800b3bd
 800b3ac:	0800b3cb 	.word	0x0800b3cb
 800b3b0:	0800b3e1 	.word	0x0800b3e1
 800b3b4:	0800b3ff 	.word	0x0800b3ff
 800b3b8:	0800b3ff 	.word	0x0800b3ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3bc:	4b81      	ldr	r3, [pc, #516]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	4a80      	ldr	r2, [pc, #512]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b3c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3c8:	e01a      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f002 f9f6 	bl	800d7c4 <RCCEx_PLL2_Config>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3de:	e00f      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e4:	3328      	adds	r3, #40	; 0x28
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f002 fa9d 	bl	800d928 <RCCEx_PLL3_Config>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3f4:	e004      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3fc:	e000      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b3fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b400:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10a      	bne.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b408:	4b6e      	ldr	r3, [pc, #440]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b40c:	f023 0107 	bic.w	r1, r3, #7
 800b410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b416:	4a6b      	ldr	r2, [pc, #428]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b418:	430b      	orrs	r3, r1
 800b41a:	6513      	str	r3, [r2, #80]	; 0x50
 800b41c:	e003      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b41e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b422:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b432:	f04f 0b00 	mov.w	fp, #0
 800b436:	ea5a 030b 	orrs.w	r3, sl, fp
 800b43a:	d05b      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b440:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b444:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b448:	d03b      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b44a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b44e:	d834      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b450:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b454:	d037      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b45a:	d82e      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b45c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b460:	d033      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b462:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b466:	d828      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b46c:	d01a      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b46e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b472:	d822      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b474:	2b00      	cmp	r3, #0
 800b476:	d003      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b478:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b47c:	d007      	beq.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b47e:	e01c      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b480:	4b50      	ldr	r3, [pc, #320]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b484:	4a4f      	ldr	r2, [pc, #316]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b48a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b48c:	e01e      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b492:	3308      	adds	r3, #8
 800b494:	2100      	movs	r1, #0
 800b496:	4618      	mov	r0, r3
 800b498:	f002 f994 	bl	800d7c4 <RCCEx_PLL2_Config>
 800b49c:	4603      	mov	r3, r0
 800b49e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b4a2:	e013      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a8:	3328      	adds	r3, #40	; 0x28
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f002 fa3b 	bl	800d928 <RCCEx_PLL3_Config>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b4b8:	e008      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4c0:	e004      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b4c2:	bf00      	nop
 800b4c4:	e002      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b4c6:	bf00      	nop
 800b4c8:	e000      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b4ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10b      	bne.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b4d4:	4b3b      	ldr	r3, [pc, #236]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b4e4:	4a37      	ldr	r2, [pc, #220]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4e6:	430b      	orrs	r3, r1
 800b4e8:	6593      	str	r3, [r2, #88]	; 0x58
 800b4ea:	e003      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b500:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b504:	2300      	movs	r3, #0
 800b506:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b50a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b50e:	460b      	mov	r3, r1
 800b510:	4313      	orrs	r3, r2
 800b512:	d05d      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b518:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b51c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b520:	d03b      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b522:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b526:	d834      	bhi.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b528:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b52c:	d037      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b52e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b532:	d82e      	bhi.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b534:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b538:	d033      	beq.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b53a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b53e:	d828      	bhi.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b544:	d01a      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b54a:	d822      	bhi.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b554:	d007      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b556:	e01c      	b.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b558:	4b1a      	ldr	r3, [pc, #104]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55c:	4a19      	ldr	r2, [pc, #100]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b55e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b564:	e01e      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56a:	3308      	adds	r3, #8
 800b56c:	2100      	movs	r1, #0
 800b56e:	4618      	mov	r0, r3
 800b570:	f002 f928 	bl	800d7c4 <RCCEx_PLL2_Config>
 800b574:	4603      	mov	r3, r0
 800b576:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b57a:	e013      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b580:	3328      	adds	r3, #40	; 0x28
 800b582:	2100      	movs	r1, #0
 800b584:	4618      	mov	r0, r3
 800b586:	f002 f9cf 	bl	800d928 <RCCEx_PLL3_Config>
 800b58a:	4603      	mov	r3, r0
 800b58c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b590:	e008      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b598:	e004      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b59a:	bf00      	nop
 800b59c:	e002      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b59e:	bf00      	nop
 800b5a0:	e000      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b5a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10d      	bne.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b5ac:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5b0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b5bc:	4a01      	ldr	r2, [pc, #4]	; (800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5be:	430b      	orrs	r3, r1
 800b5c0:	6593      	str	r3, [r2, #88]	; 0x58
 800b5c2:	e005      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b5c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b5dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b5e6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	d03a      	beq.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5f6:	2b30      	cmp	r3, #48	; 0x30
 800b5f8:	d01f      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b5fa:	2b30      	cmp	r3, #48	; 0x30
 800b5fc:	d819      	bhi.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b5fe:	2b20      	cmp	r3, #32
 800b600:	d00c      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b602:	2b20      	cmp	r3, #32
 800b604:	d815      	bhi.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b606:	2b00      	cmp	r3, #0
 800b608:	d019      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b60a:	2b10      	cmp	r3, #16
 800b60c:	d111      	bne.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b60e:	4baa      	ldr	r3, [pc, #680]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b612:	4aa9      	ldr	r2, [pc, #676]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b618:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b61a:	e011      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b620:	3308      	adds	r3, #8
 800b622:	2102      	movs	r1, #2
 800b624:	4618      	mov	r0, r3
 800b626:	f002 f8cd 	bl	800d7c4 <RCCEx_PLL2_Config>
 800b62a:	4603      	mov	r3, r0
 800b62c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b630:	e006      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b638:	e002      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b63a:	bf00      	nop
 800b63c:	e000      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b63e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b640:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10a      	bne.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b648:	4b9b      	ldr	r3, [pc, #620]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b64a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b64c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b656:	4a98      	ldr	r2, [pc, #608]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b658:	430b      	orrs	r3, r1
 800b65a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b65c:	e003      	b.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b65e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b662:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b676:	2300      	movs	r3, #0
 800b678:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b67c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b680:	460b      	mov	r3, r1
 800b682:	4313      	orrs	r3, r2
 800b684:	d051      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b68c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b690:	d035      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b696:	d82e      	bhi.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b698:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b69c:	d031      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b69e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6a2:	d828      	bhi.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b6a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6a8:	d01a      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b6aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6ae:	d822      	bhi.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d003      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b6b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6b8:	d007      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b6ba:	e01c      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6bc:	4b7e      	ldr	r3, [pc, #504]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c0:	4a7d      	ldr	r2, [pc, #500]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6c8:	e01c      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f002 f876 	bl	800d7c4 <RCCEx_PLL2_Config>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6de:	e011      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e4:	3328      	adds	r3, #40	; 0x28
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f002 f91d 	bl	800d928 <RCCEx_PLL3_Config>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6f4:	e006      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6fc:	e002      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b6fe:	bf00      	nop
 800b700:	e000      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b702:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b704:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10a      	bne.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b70c:	4b6a      	ldr	r3, [pc, #424]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b70e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b710:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b71a:	4a67      	ldr	r2, [pc, #412]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b71c:	430b      	orrs	r3, r1
 800b71e:	6513      	str	r3, [r2, #80]	; 0x50
 800b720:	e003      	b.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b722:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b726:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b736:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b73a:	2300      	movs	r3, #0
 800b73c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b740:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b744:	460b      	mov	r3, r1
 800b746:	4313      	orrs	r3, r2
 800b748:	d053      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b754:	d033      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b756:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b75a:	d82c      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b75c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b760:	d02f      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b766:	d826      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b768:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b76c:	d02b      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b76e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b772:	d820      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b778:	d012      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b77a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b77e:	d81a      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b780:	2b00      	cmp	r3, #0
 800b782:	d022      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b788:	d115      	bne.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78e:	3308      	adds	r3, #8
 800b790:	2101      	movs	r1, #1
 800b792:	4618      	mov	r0, r3
 800b794:	f002 f816 	bl	800d7c4 <RCCEx_PLL2_Config>
 800b798:	4603      	mov	r3, r0
 800b79a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b79e:	e015      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a4:	3328      	adds	r3, #40	; 0x28
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f002 f8bd 	bl	800d928 <RCCEx_PLL3_Config>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b7b4:	e00a      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7bc:	e006      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b7be:	bf00      	nop
 800b7c0:	e004      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b7c2:	bf00      	nop
 800b7c4:	e002      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b7c6:	bf00      	nop
 800b7c8:	e000      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b7ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10a      	bne.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b7d4:	4b38      	ldr	r3, [pc, #224]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7e2:	4a35      	ldr	r2, [pc, #212]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7e4:	430b      	orrs	r3, r1
 800b7e6:	6513      	str	r3, [r2, #80]	; 0x50
 800b7e8:	e003      	b.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b7fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b802:	2300      	movs	r3, #0
 800b804:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b808:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b80c:	460b      	mov	r3, r1
 800b80e:	4313      	orrs	r3, r2
 800b810:	d058      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b816:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b81a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b81e:	d033      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b824:	d82c      	bhi.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b82a:	d02f      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b82c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b830:	d826      	bhi.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b832:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b836:	d02b      	beq.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b838:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b83c:	d820      	bhi.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b83e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b842:	d012      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b848:	d81a      	bhi.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d022      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b84e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b852:	d115      	bne.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b858:	3308      	adds	r3, #8
 800b85a:	2101      	movs	r1, #1
 800b85c:	4618      	mov	r0, r3
 800b85e:	f001 ffb1 	bl	800d7c4 <RCCEx_PLL2_Config>
 800b862:	4603      	mov	r3, r0
 800b864:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b868:	e015      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86e:	3328      	adds	r3, #40	; 0x28
 800b870:	2101      	movs	r1, #1
 800b872:	4618      	mov	r0, r3
 800b874:	f002 f858 	bl	800d928 <RCCEx_PLL3_Config>
 800b878:	4603      	mov	r3, r0
 800b87a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b87e:	e00a      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b886:	e006      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b888:	bf00      	nop
 800b88a:	e004      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b88c:	bf00      	nop
 800b88e:	e002      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b890:	bf00      	nop
 800b892:	e000      	b.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b894:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b896:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10e      	bne.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b89e:	4b06      	ldr	r3, [pc, #24]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b8ae:	4a02      	ldr	r2, [pc, #8]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8b0:	430b      	orrs	r3, r1
 800b8b2:	6593      	str	r3, [r2, #88]	; 0x58
 800b8b4:	e006      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b8b6:	bf00      	nop
 800b8b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b8d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b8da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	d037      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8ee:	d00e      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b8f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8f4:	d816      	bhi.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d018      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b8fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8fe:	d111      	bne.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b900:	4bc4      	ldr	r3, [pc, #784]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b904:	4ac3      	ldr	r2, [pc, #780]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b90a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b90c:	e00f      	b.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b912:	3308      	adds	r3, #8
 800b914:	2101      	movs	r1, #1
 800b916:	4618      	mov	r0, r3
 800b918:	f001 ff54 	bl	800d7c4 <RCCEx_PLL2_Config>
 800b91c:	4603      	mov	r3, r0
 800b91e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b922:	e004      	b.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b92a:	e000      	b.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b92c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b92e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10a      	bne.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b936:	4bb7      	ldr	r3, [pc, #732]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b93a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b944:	4ab3      	ldr	r2, [pc, #716]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b946:	430b      	orrs	r3, r1
 800b948:	6513      	str	r3, [r2, #80]	; 0x50
 800b94a:	e003      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b94c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b950:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b964:	2300      	movs	r3, #0
 800b966:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b96a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b96e:	460b      	mov	r3, r1
 800b970:	4313      	orrs	r3, r2
 800b972:	d039      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	d81c      	bhi.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b97e:	a201      	add	r2, pc, #4	; (adr r2, 800b984 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b984:	0800b9c1 	.word	0x0800b9c1
 800b988:	0800b995 	.word	0x0800b995
 800b98c:	0800b9a3 	.word	0x0800b9a3
 800b990:	0800b9c1 	.word	0x0800b9c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b994:	4b9f      	ldr	r3, [pc, #636]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b998:	4a9e      	ldr	r2, [pc, #632]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b99a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b99e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b9a0:	e00f      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a6:	3308      	adds	r3, #8
 800b9a8:	2102      	movs	r1, #2
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 ff0a 	bl	800d7c4 <RCCEx_PLL2_Config>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b9b6:	e004      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9be:	e000      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b9c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10a      	bne.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b9ca:	4b92      	ldr	r3, [pc, #584]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ce:	f023 0103 	bic.w	r1, r3, #3
 800b9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9d8:	4a8e      	ldr	r2, [pc, #568]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9da:	430b      	orrs	r3, r1
 800b9dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9de:	e003      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b9f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4313      	orrs	r3, r2
 800ba06:	f000 8099 	beq.w	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba0a:	4b83      	ldr	r3, [pc, #524]	; (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a82      	ldr	r2, [pc, #520]	; (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba16:	f7f8 f91b 	bl	8003c50 <HAL_GetTick>
 800ba1a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba1e:	e00b      	b.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba20:	f7f8 f916 	bl	8003c50 <HAL_GetTick>
 800ba24:	4602      	mov	r2, r0
 800ba26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	2b64      	cmp	r3, #100	; 0x64
 800ba2e:	d903      	bls.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ba30:	2303      	movs	r3, #3
 800ba32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba36:	e005      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba38:	4b77      	ldr	r3, [pc, #476]	; (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d0ed      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ba44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d173      	bne.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ba4c:	4b71      	ldr	r3, [pc, #452]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba58:	4053      	eors	r3, r2
 800ba5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d015      	beq.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba62:	4b6c      	ldr	r3, [pc, #432]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba6e:	4b69      	ldr	r3, [pc, #420]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba72:	4a68      	ldr	r2, [pc, #416]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba78:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba7a:	4b66      	ldr	r3, [pc, #408]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba7e:	4a65      	ldr	r2, [pc, #404]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba84:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ba86:	4a63      	ldr	r2, [pc, #396]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ba8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba9a:	d118      	bne.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba9c:	f7f8 f8d8 	bl	8003c50 <HAL_GetTick>
 800baa0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800baa4:	e00d      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800baa6:	f7f8 f8d3 	bl	8003c50 <HAL_GetTick>
 800baaa:	4602      	mov	r2, r0
 800baac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bab0:	1ad2      	subs	r2, r2, r3
 800bab2:	f241 3388 	movw	r3, #5000	; 0x1388
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d903      	bls.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800baba:	2303      	movs	r3, #3
 800babc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800bac0:	e005      	b.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bac2:	4b54      	ldr	r3, [pc, #336]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bac6:	f003 0302 	and.w	r3, r3, #2
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d0eb      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bace:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d129      	bne.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bae6:	d10e      	bne.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bae8:	4b4a      	ldr	r3, [pc, #296]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800baf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800baf8:	091a      	lsrs	r2, r3, #4
 800bafa:	4b48      	ldr	r3, [pc, #288]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bafc:	4013      	ands	r3, r2
 800bafe:	4a45      	ldr	r2, [pc, #276]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb00:	430b      	orrs	r3, r1
 800bb02:	6113      	str	r3, [r2, #16]
 800bb04:	e005      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bb06:	4b43      	ldr	r3, [pc, #268]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	4a42      	ldr	r2, [pc, #264]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb10:	6113      	str	r3, [r2, #16]
 800bb12:	4b40      	ldr	r3, [pc, #256]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb14:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bb16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb22:	4a3c      	ldr	r2, [pc, #240]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb24:	430b      	orrs	r3, r1
 800bb26:	6713      	str	r3, [r2, #112]	; 0x70
 800bb28:	e008      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb2e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800bb32:	e003      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bb3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	f002 0301 	and.w	r3, r2, #1
 800bb48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bb52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bb56:	460b      	mov	r3, r1
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	f000 808f 	beq.w	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bb5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb64:	2b28      	cmp	r3, #40	; 0x28
 800bb66:	d871      	bhi.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bb68:	a201      	add	r2, pc, #4	; (adr r2, 800bb70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6e:	bf00      	nop
 800bb70:	0800bc55 	.word	0x0800bc55
 800bb74:	0800bc4d 	.word	0x0800bc4d
 800bb78:	0800bc4d 	.word	0x0800bc4d
 800bb7c:	0800bc4d 	.word	0x0800bc4d
 800bb80:	0800bc4d 	.word	0x0800bc4d
 800bb84:	0800bc4d 	.word	0x0800bc4d
 800bb88:	0800bc4d 	.word	0x0800bc4d
 800bb8c:	0800bc4d 	.word	0x0800bc4d
 800bb90:	0800bc21 	.word	0x0800bc21
 800bb94:	0800bc4d 	.word	0x0800bc4d
 800bb98:	0800bc4d 	.word	0x0800bc4d
 800bb9c:	0800bc4d 	.word	0x0800bc4d
 800bba0:	0800bc4d 	.word	0x0800bc4d
 800bba4:	0800bc4d 	.word	0x0800bc4d
 800bba8:	0800bc4d 	.word	0x0800bc4d
 800bbac:	0800bc4d 	.word	0x0800bc4d
 800bbb0:	0800bc37 	.word	0x0800bc37
 800bbb4:	0800bc4d 	.word	0x0800bc4d
 800bbb8:	0800bc4d 	.word	0x0800bc4d
 800bbbc:	0800bc4d 	.word	0x0800bc4d
 800bbc0:	0800bc4d 	.word	0x0800bc4d
 800bbc4:	0800bc4d 	.word	0x0800bc4d
 800bbc8:	0800bc4d 	.word	0x0800bc4d
 800bbcc:	0800bc4d 	.word	0x0800bc4d
 800bbd0:	0800bc55 	.word	0x0800bc55
 800bbd4:	0800bc4d 	.word	0x0800bc4d
 800bbd8:	0800bc4d 	.word	0x0800bc4d
 800bbdc:	0800bc4d 	.word	0x0800bc4d
 800bbe0:	0800bc4d 	.word	0x0800bc4d
 800bbe4:	0800bc4d 	.word	0x0800bc4d
 800bbe8:	0800bc4d 	.word	0x0800bc4d
 800bbec:	0800bc4d 	.word	0x0800bc4d
 800bbf0:	0800bc55 	.word	0x0800bc55
 800bbf4:	0800bc4d 	.word	0x0800bc4d
 800bbf8:	0800bc4d 	.word	0x0800bc4d
 800bbfc:	0800bc4d 	.word	0x0800bc4d
 800bc00:	0800bc4d 	.word	0x0800bc4d
 800bc04:	0800bc4d 	.word	0x0800bc4d
 800bc08:	0800bc4d 	.word	0x0800bc4d
 800bc0c:	0800bc4d 	.word	0x0800bc4d
 800bc10:	0800bc55 	.word	0x0800bc55
 800bc14:	58024400 	.word	0x58024400
 800bc18:	58024800 	.word	0x58024800
 800bc1c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc24:	3308      	adds	r3, #8
 800bc26:	2101      	movs	r1, #1
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f001 fdcb 	bl	800d7c4 <RCCEx_PLL2_Config>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc34:	e00f      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc3a:	3328      	adds	r3, #40	; 0x28
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f001 fe72 	bl	800d928 <RCCEx_PLL3_Config>
 800bc44:	4603      	mov	r3, r0
 800bc46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc4a:	e004      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc52:	e000      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bc54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10a      	bne.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bc5e:	4bbf      	ldr	r3, [pc, #764]	; (800bf5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc62:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bc66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc6c:	4abb      	ldr	r2, [pc, #748]	; (800bf5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bc6e:	430b      	orrs	r3, r1
 800bc70:	6553      	str	r3, [r2, #84]	; 0x54
 800bc72:	e003      	b.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bc7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	f002 0302 	and.w	r3, r2, #2
 800bc88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc92:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bc96:	460b      	mov	r3, r1
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	d041      	beq.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bca2:	2b05      	cmp	r3, #5
 800bca4:	d824      	bhi.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800bca6:	a201      	add	r2, pc, #4	; (adr r2, 800bcac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800bca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcac:	0800bcf9 	.word	0x0800bcf9
 800bcb0:	0800bcc5 	.word	0x0800bcc5
 800bcb4:	0800bcdb 	.word	0x0800bcdb
 800bcb8:	0800bcf9 	.word	0x0800bcf9
 800bcbc:	0800bcf9 	.word	0x0800bcf9
 800bcc0:	0800bcf9 	.word	0x0800bcf9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc8:	3308      	adds	r3, #8
 800bcca:	2101      	movs	r1, #1
 800bccc:	4618      	mov	r0, r3
 800bcce:	f001 fd79 	bl	800d7c4 <RCCEx_PLL2_Config>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bcd8:	e00f      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcde:	3328      	adds	r3, #40	; 0x28
 800bce0:	2101      	movs	r1, #1
 800bce2:	4618      	mov	r0, r3
 800bce4:	f001 fe20 	bl	800d928 <RCCEx_PLL3_Config>
 800bce8:	4603      	mov	r3, r0
 800bcea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bcee:	e004      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bcf6:	e000      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800bcf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcfa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10a      	bne.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bd02:	4b96      	ldr	r3, [pc, #600]	; (800bf5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bd04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd06:	f023 0107 	bic.w	r1, r3, #7
 800bd0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd10:	4a92      	ldr	r2, [pc, #584]	; (800bf5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bd12:	430b      	orrs	r3, r1
 800bd14:	6553      	str	r3, [r2, #84]	; 0x54
 800bd16:	e003      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f002 0304 	and.w	r3, r2, #4
 800bd2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd30:	2300      	movs	r3, #0
 800bd32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	d044      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bd40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd48:	2b05      	cmp	r3, #5
 800bd4a:	d825      	bhi.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800bd4c:	a201      	add	r2, pc, #4	; (adr r2, 800bd54 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800bd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd52:	bf00      	nop
 800bd54:	0800bda1 	.word	0x0800bda1
 800bd58:	0800bd6d 	.word	0x0800bd6d
 800bd5c:	0800bd83 	.word	0x0800bd83
 800bd60:	0800bda1 	.word	0x0800bda1
 800bd64:	0800bda1 	.word	0x0800bda1
 800bd68:	0800bda1 	.word	0x0800bda1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd70:	3308      	adds	r3, #8
 800bd72:	2101      	movs	r1, #1
 800bd74:	4618      	mov	r0, r3
 800bd76:	f001 fd25 	bl	800d7c4 <RCCEx_PLL2_Config>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd80:	e00f      	b.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd86:	3328      	adds	r3, #40	; 0x28
 800bd88:	2101      	movs	r1, #1
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f001 fdcc 	bl	800d928 <RCCEx_PLL3_Config>
 800bd90:	4603      	mov	r3, r0
 800bd92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd96:	e004      	b.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd9e:	e000      	b.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800bda0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bda2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d10b      	bne.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bdaa:	4b6c      	ldr	r3, [pc, #432]	; (800bf5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bdac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdae:	f023 0107 	bic.w	r1, r3, #7
 800bdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdba:	4a68      	ldr	r2, [pc, #416]	; (800bf5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bdbc:	430b      	orrs	r3, r1
 800bdbe:	6593      	str	r3, [r2, #88]	; 0x58
 800bdc0:	e003      	b.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdc6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bdca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f002 0320 	and.w	r3, r2, #32
 800bdd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bdda:	2300      	movs	r3, #0
 800bddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bde0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bde4:	460b      	mov	r3, r1
 800bde6:	4313      	orrs	r3, r2
 800bde8:	d055      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bdea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdf6:	d033      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800bdf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdfc:	d82c      	bhi.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bdfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be02:	d02f      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800be04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be08:	d826      	bhi.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800be0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be0e:	d02b      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800be10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be14:	d820      	bhi.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800be16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be1a:	d012      	beq.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800be1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be20:	d81a      	bhi.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800be22:	2b00      	cmp	r3, #0
 800be24:	d022      	beq.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800be26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be2a:	d115      	bne.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be30:	3308      	adds	r3, #8
 800be32:	2100      	movs	r1, #0
 800be34:	4618      	mov	r0, r3
 800be36:	f001 fcc5 	bl	800d7c4 <RCCEx_PLL2_Config>
 800be3a:	4603      	mov	r3, r0
 800be3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be40:	e015      	b.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be46:	3328      	adds	r3, #40	; 0x28
 800be48:	2102      	movs	r1, #2
 800be4a:	4618      	mov	r0, r3
 800be4c:	f001 fd6c 	bl	800d928 <RCCEx_PLL3_Config>
 800be50:	4603      	mov	r3, r0
 800be52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be56:	e00a      	b.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be5e:	e006      	b.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800be60:	bf00      	nop
 800be62:	e004      	b.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800be64:	bf00      	nop
 800be66:	e002      	b.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800be68:	bf00      	nop
 800be6a:	e000      	b.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800be6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be72:	2b00      	cmp	r3, #0
 800be74:	d10b      	bne.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be76:	4b39      	ldr	r3, [pc, #228]	; (800bf5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be7a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800be7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be86:	4a35      	ldr	r2, [pc, #212]	; (800bf5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be88:	430b      	orrs	r3, r1
 800be8a:	6553      	str	r3, [r2, #84]	; 0x54
 800be8c:	e003      	b.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800be96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bea2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bea6:	2300      	movs	r3, #0
 800bea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800beac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800beb0:	460b      	mov	r3, r1
 800beb2:	4313      	orrs	r3, r2
 800beb4:	d058      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800beb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bebe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bec2:	d033      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800bec4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bec8:	d82c      	bhi.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800beca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bece:	d02f      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bed4:	d826      	bhi.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bed6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800beda:	d02b      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800bedc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bee0:	d820      	bhi.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bee6:	d012      	beq.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800bee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beec:	d81a      	bhi.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d022      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bef6:	d115      	bne.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800befc:	3308      	adds	r3, #8
 800befe:	2100      	movs	r1, #0
 800bf00:	4618      	mov	r0, r3
 800bf02:	f001 fc5f 	bl	800d7c4 <RCCEx_PLL2_Config>
 800bf06:	4603      	mov	r3, r0
 800bf08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bf0c:	e015      	b.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf12:	3328      	adds	r3, #40	; 0x28
 800bf14:	2102      	movs	r1, #2
 800bf16:	4618      	mov	r0, r3
 800bf18:	f001 fd06 	bl	800d928 <RCCEx_PLL3_Config>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bf22:	e00a      	b.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf2a:	e006      	b.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bf2c:	bf00      	nop
 800bf2e:	e004      	b.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bf30:	bf00      	nop
 800bf32:	e002      	b.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bf34:	bf00      	nop
 800bf36:	e000      	b.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bf38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10e      	bne.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf42:	4b06      	ldr	r3, [pc, #24]	; (800bf5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf46:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bf4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf52:	4a02      	ldr	r2, [pc, #8]	; (800bf5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf54:	430b      	orrs	r3, r1
 800bf56:	6593      	str	r3, [r2, #88]	; 0x58
 800bf58:	e006      	b.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800bf5a:	bf00      	nop
 800bf5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bf74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf78:	2300      	movs	r3, #0
 800bf7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bf82:	460b      	mov	r3, r1
 800bf84:	4313      	orrs	r3, r2
 800bf86:	d055      	beq.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bf88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bf94:	d033      	beq.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800bf96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bf9a:	d82c      	bhi.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bf9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfa0:	d02f      	beq.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800bfa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfa6:	d826      	bhi.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bfa8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfac:	d02b      	beq.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800bfae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfb2:	d820      	bhi.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bfb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfb8:	d012      	beq.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800bfba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfbe:	d81a      	bhi.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d022      	beq.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800bfc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfc8:	d115      	bne.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfce:	3308      	adds	r3, #8
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f001 fbf6 	bl	800d7c4 <RCCEx_PLL2_Config>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bfde:	e015      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfe4:	3328      	adds	r3, #40	; 0x28
 800bfe6:	2102      	movs	r1, #2
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f001 fc9d 	bl	800d928 <RCCEx_PLL3_Config>
 800bfee:	4603      	mov	r3, r0
 800bff0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bff4:	e00a      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bffc:	e006      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bffe:	bf00      	nop
 800c000:	e004      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c002:	bf00      	nop
 800c004:	e002      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c006:	bf00      	nop
 800c008:	e000      	b.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c00a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c00c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10b      	bne.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c014:	4ba0      	ldr	r3, [pc, #640]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c018:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c024:	4a9c      	ldr	r2, [pc, #624]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c026:	430b      	orrs	r3, r1
 800c028:	6593      	str	r3, [r2, #88]	; 0x58
 800c02a:	e003      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c02c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c030:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	f002 0308 	and.w	r3, r2, #8
 800c040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c044:	2300      	movs	r3, #0
 800c046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c04a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c04e:	460b      	mov	r3, r1
 800c050:	4313      	orrs	r3, r2
 800c052:	d01e      	beq.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c05c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c060:	d10c      	bne.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c066:	3328      	adds	r3, #40	; 0x28
 800c068:	2102      	movs	r1, #2
 800c06a:	4618      	mov	r0, r3
 800c06c:	f001 fc5c 	bl	800d928 <RCCEx_PLL3_Config>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d002      	beq.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c07c:	4b86      	ldr	r3, [pc, #536]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c080:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c08c:	4a82      	ldr	r2, [pc, #520]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c08e:	430b      	orrs	r3, r1
 800c090:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	f002 0310 	and.w	r3, r2, #16
 800c09e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	d01e      	beq.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0be:	d10c      	bne.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0c4:	3328      	adds	r3, #40	; 0x28
 800c0c6:	2102      	movs	r1, #2
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f001 fc2d 	bl	800d928 <RCCEx_PLL3_Config>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d002      	beq.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c0da:	4b6f      	ldr	r3, [pc, #444]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c0dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0ea:	4a6b      	ldr	r2, [pc, #428]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c0ec:	430b      	orrs	r3, r1
 800c0ee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c0fc:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0fe:	2300      	movs	r3, #0
 800c100:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c102:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c106:	460b      	mov	r3, r1
 800c108:	4313      	orrs	r3, r2
 800c10a:	d03e      	beq.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c118:	d022      	beq.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c11a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c11e:	d81b      	bhi.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c120:	2b00      	cmp	r3, #0
 800c122:	d003      	beq.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c128:	d00b      	beq.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c12a:	e015      	b.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c130:	3308      	adds	r3, #8
 800c132:	2100      	movs	r1, #0
 800c134:	4618      	mov	r0, r3
 800c136:	f001 fb45 	bl	800d7c4 <RCCEx_PLL2_Config>
 800c13a:	4603      	mov	r3, r0
 800c13c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c140:	e00f      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c146:	3328      	adds	r3, #40	; 0x28
 800c148:	2102      	movs	r1, #2
 800c14a:	4618      	mov	r0, r3
 800c14c:	f001 fbec 	bl	800d928 <RCCEx_PLL3_Config>
 800c150:	4603      	mov	r3, r0
 800c152:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c156:	e004      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c15e:	e000      	b.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c160:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c162:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c166:	2b00      	cmp	r3, #0
 800c168:	d10b      	bne.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c16a:	4b4b      	ldr	r3, [pc, #300]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c16e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c17a:	4a47      	ldr	r2, [pc, #284]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c17c:	430b      	orrs	r3, r1
 800c17e:	6593      	str	r3, [r2, #88]	; 0x58
 800c180:	e003      	b.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c182:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c186:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c192:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c196:	673b      	str	r3, [r7, #112]	; 0x70
 800c198:	2300      	movs	r3, #0
 800c19a:	677b      	str	r3, [r7, #116]	; 0x74
 800c19c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	d03b      	beq.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1b2:	d01f      	beq.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c1b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1b8:	d818      	bhi.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c1ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1be:	d003      	beq.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c1c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1c4:	d007      	beq.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c1c6:	e011      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1c8:	4b33      	ldr	r3, [pc, #204]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1cc:	4a32      	ldr	r2, [pc, #200]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c1ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c1d4:	e00f      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1da:	3328      	adds	r3, #40	; 0x28
 800c1dc:	2101      	movs	r1, #1
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f001 fba2 	bl	800d928 <RCCEx_PLL3_Config>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c1ea:	e004      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c1f2:	e000      	b.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10b      	bne.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c1fe:	4b26      	ldr	r3, [pc, #152]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c202:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c20a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c20e:	4a22      	ldr	r2, [pc, #136]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c210:	430b      	orrs	r3, r1
 800c212:	6553      	str	r3, [r2, #84]	; 0x54
 800c214:	e003      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c216:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c21a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c22a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c22c:	2300      	movs	r3, #0
 800c22e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c230:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c234:	460b      	mov	r3, r1
 800c236:	4313      	orrs	r3, r2
 800c238:	d034      	beq.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c23e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c240:	2b00      	cmp	r3, #0
 800c242:	d003      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c248:	d007      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c24a:	e011      	b.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c24c:	4b12      	ldr	r3, [pc, #72]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c250:	4a11      	ldr	r2, [pc, #68]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c258:	e00e      	b.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c25e:	3308      	adds	r3, #8
 800c260:	2102      	movs	r1, #2
 800c262:	4618      	mov	r0, r3
 800c264:	f001 faae 	bl	800d7c4 <RCCEx_PLL2_Config>
 800c268:	4603      	mov	r3, r0
 800c26a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c26e:	e003      	b.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c276:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c278:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10d      	bne.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c280:	4b05      	ldr	r3, [pc, #20]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c284:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c28e:	4a02      	ldr	r2, [pc, #8]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c290:	430b      	orrs	r3, r1
 800c292:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c294:	e006      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c296:	bf00      	nop
 800c298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c29c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c2a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c2b0:	663b      	str	r3, [r7, #96]	; 0x60
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	667b      	str	r3, [r7, #100]	; 0x64
 800c2b6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	d00c      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2c4:	3328      	adds	r3, #40	; 0x28
 800c2c6:	2102      	movs	r1, #2
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f001 fb2d 	bl	800d928 <RCCEx_PLL3_Config>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c2e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2ec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	d036      	beq.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c300:	d018      	beq.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c306:	d811      	bhi.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c30c:	d014      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c30e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c312:	d80b      	bhi.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c314:	2b00      	cmp	r3, #0
 800c316:	d011      	beq.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c31c:	d106      	bne.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c31e:	4bb7      	ldr	r3, [pc, #732]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c322:	4ab6      	ldr	r2, [pc, #728]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c328:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c32a:	e008      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c332:	e004      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c334:	bf00      	nop
 800c336:	e002      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c338:	bf00      	nop
 800c33a:	e000      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c33e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10a      	bne.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c346:	4bad      	ldr	r3, [pc, #692]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c34a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c354:	4aa9      	ldr	r2, [pc, #676]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c356:	430b      	orrs	r3, r1
 800c358:	6553      	str	r3, [r2, #84]	; 0x54
 800c35a:	e003      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c35c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c360:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c370:	653b      	str	r3, [r7, #80]	; 0x50
 800c372:	2300      	movs	r3, #0
 800c374:	657b      	str	r3, [r7, #84]	; 0x54
 800c376:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c37a:	460b      	mov	r3, r1
 800c37c:	4313      	orrs	r3, r2
 800c37e:	d009      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c380:	4b9e      	ldr	r3, [pc, #632]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c384:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c38e:	4a9b      	ldr	r2, [pc, #620]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c390:	430b      	orrs	r3, r1
 800c392:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c3a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	d009      	beq.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c3b0:	4b92      	ldr	r3, [pc, #584]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3be:	4a8f      	ldr	r2, [pc, #572]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3c0:	430b      	orrs	r3, r1
 800c3c2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3cc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c3d0:	643b      	str	r3, [r7, #64]	; 0x40
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	647b      	str	r3, [r7, #68]	; 0x44
 800c3d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	d00e      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c3e0:	4b86      	ldr	r3, [pc, #536]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	4a85      	ldr	r2, [pc, #532]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c3ea:	6113      	str	r3, [r2, #16]
 800c3ec:	4b83      	ldr	r3, [pc, #524]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3ee:	6919      	ldr	r1, [r3, #16]
 800c3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c3f8:	4a80      	ldr	r2, [pc, #512]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3fa:	430b      	orrs	r3, r1
 800c3fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c40a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c40c:	2300      	movs	r3, #0
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c410:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c414:	460b      	mov	r3, r1
 800c416:	4313      	orrs	r3, r2
 800c418:	d009      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c41a:	4b78      	ldr	r3, [pc, #480]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c41c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c41e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c428:	4a74      	ldr	r2, [pc, #464]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c42a:	430b      	orrs	r3, r1
 800c42c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c43a:	633b      	str	r3, [r7, #48]	; 0x30
 800c43c:	2300      	movs	r3, #0
 800c43e:	637b      	str	r3, [r7, #52]	; 0x34
 800c440:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c444:	460b      	mov	r3, r1
 800c446:	4313      	orrs	r3, r2
 800c448:	d00a      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c44a:	4b6c      	ldr	r3, [pc, #432]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c44e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c45a:	4a68      	ldr	r2, [pc, #416]	; (800c5fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c45c:	430b      	orrs	r3, r1
 800c45e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	2100      	movs	r1, #0
 800c46a:	62b9      	str	r1, [r7, #40]	; 0x28
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c472:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c476:	460b      	mov	r3, r1
 800c478:	4313      	orrs	r3, r2
 800c47a:	d011      	beq.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c480:	3308      	adds	r3, #8
 800c482:	2100      	movs	r1, #0
 800c484:	4618      	mov	r0, r3
 800c486:	f001 f99d 	bl	800d7c4 <RCCEx_PLL2_Config>
 800c48a:	4603      	mov	r3, r0
 800c48c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c490:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c498:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c49c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	6239      	str	r1, [r7, #32]
 800c4ac:	f003 0302 	and.w	r3, r3, #2
 800c4b0:	627b      	str	r3, [r7, #36]	; 0x24
 800c4b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	d011      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	2101      	movs	r1, #1
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f001 f97d 	bl	800d7c4 <RCCEx_PLL2_Config>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c4d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d003      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	61b9      	str	r1, [r7, #24]
 800c4ec:	f003 0304 	and.w	r3, r3, #4
 800c4f0:	61fb      	str	r3, [r7, #28]
 800c4f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	d011      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c500:	3308      	adds	r3, #8
 800c502:	2102      	movs	r1, #2
 800c504:	4618      	mov	r0, r3
 800c506:	f001 f95d 	bl	800d7c4 <RCCEx_PLL2_Config>
 800c50a:	4603      	mov	r3, r0
 800c50c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c510:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c514:	2b00      	cmp	r3, #0
 800c516:	d003      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c518:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c51c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	2100      	movs	r1, #0
 800c52a:	6139      	str	r1, [r7, #16]
 800c52c:	f003 0308 	and.w	r3, r3, #8
 800c530:	617b      	str	r3, [r7, #20]
 800c532:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c536:	460b      	mov	r3, r1
 800c538:	4313      	orrs	r3, r2
 800c53a:	d011      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c540:	3328      	adds	r3, #40	; 0x28
 800c542:	2100      	movs	r1, #0
 800c544:	4618      	mov	r0, r3
 800c546:	f001 f9ef 	bl	800d928 <RCCEx_PLL3_Config>
 800c54a:	4603      	mov	r3, r0
 800c54c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800c550:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c554:	2b00      	cmp	r3, #0
 800c556:	d003      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c558:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c55c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	2100      	movs	r1, #0
 800c56a:	60b9      	str	r1, [r7, #8]
 800c56c:	f003 0310 	and.w	r3, r3, #16
 800c570:	60fb      	str	r3, [r7, #12]
 800c572:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c576:	460b      	mov	r3, r1
 800c578:	4313      	orrs	r3, r2
 800c57a:	d011      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c580:	3328      	adds	r3, #40	; 0x28
 800c582:	2101      	movs	r1, #1
 800c584:	4618      	mov	r0, r3
 800c586:	f001 f9cf 	bl	800d928 <RCCEx_PLL3_Config>
 800c58a:	4603      	mov	r3, r0
 800c58c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c590:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c598:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c59c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	6039      	str	r1, [r7, #0]
 800c5ac:	f003 0320 	and.w	r3, r3, #32
 800c5b0:	607b      	str	r3, [r7, #4]
 800c5b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	d011      	beq.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5c0:	3328      	adds	r3, #40	; 0x28
 800c5c2:	2102      	movs	r1, #2
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f001 f9af 	bl	800d928 <RCCEx_PLL3_Config>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c5d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d003      	beq.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800c5e0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d101      	bne.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e000      	b.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5fa:	bf00      	nop
 800c5fc:	58024400 	.word	0x58024400

0800c600 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b090      	sub	sp, #64	; 0x40
 800c604:	af00      	add	r7, sp, #0
 800c606:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c60a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c60e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c612:	430b      	orrs	r3, r1
 800c614:	f040 8094 	bne.w	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c618:	4b9b      	ldr	r3, [pc, #620]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c61a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c61c:	f003 0307 	and.w	r3, r3, #7
 800c620:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	2b04      	cmp	r3, #4
 800c626:	f200 8087 	bhi.w	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c62a:	a201      	add	r2, pc, #4	; (adr r2, 800c630 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c645 	.word	0x0800c645
 800c634:	0800c66d 	.word	0x0800c66d
 800c638:	0800c695 	.word	0x0800c695
 800c63c:	0800c731 	.word	0x0800c731
 800c640:	0800c6bd 	.word	0x0800c6bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c644:	4b90      	ldr	r3, [pc, #576]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c64c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c650:	d108      	bne.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c656:	4618      	mov	r0, r3
 800c658:	f000 ff62 	bl	800d520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c660:	f000 bc93 	b.w	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c664:	2300      	movs	r3, #0
 800c666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c668:	f000 bc8f 	b.w	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c66c:	4b86      	ldr	r3, [pc, #536]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c678:	d108      	bne.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c67a:	f107 0318 	add.w	r3, r7, #24
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 fca6 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c688:	f000 bc7f 	b.w	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c690:	f000 bc7b 	b.w	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c694:	4b7c      	ldr	r3, [pc, #496]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c69c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6a0:	d108      	bne.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6a2:	f107 030c 	add.w	r3, r7, #12
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 fde6 	bl	800d278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6b0:	f000 bc6b 	b.w	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b8:	f000 bc67 	b.w	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6bc:	4b72      	ldr	r3, [pc, #456]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6c6:	4b70      	ldr	r3, [pc, #448]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f003 0304 	and.w	r3, r3, #4
 800c6ce:	2b04      	cmp	r3, #4
 800c6d0:	d10c      	bne.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d109      	bne.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6d8:	4b6b      	ldr	r3, [pc, #428]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	08db      	lsrs	r3, r3, #3
 800c6de:	f003 0303 	and.w	r3, r3, #3
 800c6e2:	4a6a      	ldr	r2, [pc, #424]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c6e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ea:	e01f      	b.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6ec:	4b66      	ldr	r3, [pc, #408]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6f8:	d106      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c700:	d102      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c702:	4b63      	ldr	r3, [pc, #396]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c704:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c706:	e011      	b.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c708:	4b5f      	ldr	r3, [pc, #380]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c714:	d106      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c71c:	d102      	bne.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c71e:	4b5d      	ldr	r3, [pc, #372]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c720:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c722:	e003      	b.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c724:	2300      	movs	r3, #0
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c728:	f000 bc2f 	b.w	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c72c:	f000 bc2d 	b.w	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c730:	4b59      	ldr	r3, [pc, #356]	; (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c734:	f000 bc29 	b.w	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c738:	2300      	movs	r3, #0
 800c73a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c73c:	f000 bc25 	b.w	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c740:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c744:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c748:	430b      	orrs	r3, r1
 800c74a:	f040 80a7 	bne.w	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c74e:	4b4e      	ldr	r3, [pc, #312]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c752:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c756:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c75e:	d054      	beq.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c766:	f200 808b 	bhi.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c770:	f000 8083 	beq.w	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c77a:	f200 8081 	bhi.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c784:	d02f      	beq.n	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c78c:	d878      	bhi.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	2b00      	cmp	r3, #0
 800c792:	d004      	beq.n	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c79a:	d012      	beq.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c79c:	e070      	b.n	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c79e:	4b3a      	ldr	r3, [pc, #232]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7aa:	d107      	bne.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 feb5 	bl	800d520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7ba:	e3e6      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c0:	e3e3      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7c2:	4b31      	ldr	r3, [pc, #196]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7ce:	d107      	bne.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7d0:	f107 0318 	add.w	r3, r7, #24
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f000 fbfb 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7de:	e3d4      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e4:	e3d1      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7e6:	4b28      	ldr	r3, [pc, #160]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7f2:	d107      	bne.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7f4:	f107 030c 	add.w	r3, r7, #12
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f000 fd3d 	bl	800d278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c802:	e3c2      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c808:	e3bf      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c80a:	4b1f      	ldr	r3, [pc, #124]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c80c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c80e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c812:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c814:	4b1c      	ldr	r3, [pc, #112]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f003 0304 	and.w	r3, r3, #4
 800c81c:	2b04      	cmp	r3, #4
 800c81e:	d10c      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c822:	2b00      	cmp	r3, #0
 800c824:	d109      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c826:	4b18      	ldr	r3, [pc, #96]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	08db      	lsrs	r3, r3, #3
 800c82c:	f003 0303 	and.w	r3, r3, #3
 800c830:	4a16      	ldr	r2, [pc, #88]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c832:	fa22 f303 	lsr.w	r3, r2, r3
 800c836:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c838:	e01e      	b.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c83a:	4b13      	ldr	r3, [pc, #76]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c846:	d106      	bne.n	800c856 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c84e:	d102      	bne.n	800c856 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c850:	4b0f      	ldr	r3, [pc, #60]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c852:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c854:	e010      	b.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c856:	4b0c      	ldr	r3, [pc, #48]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c85e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c862:	d106      	bne.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c86a:	d102      	bne.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c86c:	4b09      	ldr	r3, [pc, #36]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c870:	e002      	b.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c872:	2300      	movs	r3, #0
 800c874:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c876:	e388      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c878:	e387      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c87a:	4b07      	ldr	r3, [pc, #28]	; (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c87e:	e384      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c884:	e381      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c886:	bf00      	nop
 800c888:	58024400 	.word	0x58024400
 800c88c:	03d09000 	.word	0x03d09000
 800c890:	003d0900 	.word	0x003d0900
 800c894:	02faf080 	.word	0x02faf080
 800c898:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c89c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8a0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c8a4:	430b      	orrs	r3, r1
 800c8a6:	f040 809c 	bne.w	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c8aa:	4b9e      	ldr	r3, [pc, #632]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c8b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8ba:	d054      	beq.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8c2:	f200 808b 	bhi.w	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8cc:	f000 8083 	beq.w	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8d6:	f200 8081 	bhi.w	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8e0:	d02f      	beq.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8e8:	d878      	bhi.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d004      	beq.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c8f6:	d012      	beq.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c8f8:	e070      	b.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8fa:	4b8a      	ldr	r3, [pc, #552]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c906:	d107      	bne.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c90c:	4618      	mov	r0, r3
 800c90e:	f000 fe07 	bl	800d520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c916:	e338      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c918:	2300      	movs	r3, #0
 800c91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c91c:	e335      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c91e:	4b81      	ldr	r3, [pc, #516]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c92a:	d107      	bne.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c92c:	f107 0318 	add.w	r3, r7, #24
 800c930:	4618      	mov	r0, r3
 800c932:	f000 fb4d 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c93a:	e326      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c940:	e323      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c942:	4b78      	ldr	r3, [pc, #480]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c94a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c94e:	d107      	bne.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c950:	f107 030c 	add.w	r3, r7, #12
 800c954:	4618      	mov	r0, r3
 800c956:	f000 fc8f 	bl	800d278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c95e:	e314      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c964:	e311      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c966:	4b6f      	ldr	r3, [pc, #444]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c96a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c96e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c970:	4b6c      	ldr	r3, [pc, #432]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f003 0304 	and.w	r3, r3, #4
 800c978:	2b04      	cmp	r3, #4
 800c97a:	d10c      	bne.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d109      	bne.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c982:	4b68      	ldr	r3, [pc, #416]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	08db      	lsrs	r3, r3, #3
 800c988:	f003 0303 	and.w	r3, r3, #3
 800c98c:	4a66      	ldr	r2, [pc, #408]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c98e:	fa22 f303 	lsr.w	r3, r2, r3
 800c992:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c994:	e01e      	b.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c996:	4b63      	ldr	r3, [pc, #396]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c99e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9a2:	d106      	bne.n	800c9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9aa:	d102      	bne.n	800c9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9ac:	4b5f      	ldr	r3, [pc, #380]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9b0:	e010      	b.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9b2:	4b5c      	ldr	r3, [pc, #368]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9be:	d106      	bne.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9c6:	d102      	bne.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9c8:	4b59      	ldr	r3, [pc, #356]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9cc:	e002      	b.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9d2:	e2da      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c9d4:	e2d9      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9d6:	4b57      	ldr	r3, [pc, #348]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9da:	e2d6      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e0:	e2d3      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c9e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9e6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c9ea:	430b      	orrs	r3, r1
 800c9ec:	f040 80a7 	bne.w	800cb3e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c9f0:	4b4c      	ldr	r3, [pc, #304]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c9f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca00:	d055      	beq.n	800caae <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca08:	f200 8096 	bhi.w	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca12:	f000 8084 	beq.w	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ca16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca1c:	f200 808c 	bhi.w	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca26:	d030      	beq.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ca28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca2e:	f200 8083 	bhi.w	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ca32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d004      	beq.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca3e:	d012      	beq.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ca40:	e07a      	b.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca42:	4b38      	ldr	r3, [pc, #224]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca4e:	d107      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca54:	4618      	mov	r0, r3
 800ca56:	f000 fd63 	bl	800d520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca5e:	e294      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca64:	e291      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca66:	4b2f      	ldr	r3, [pc, #188]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca72:	d107      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca74:	f107 0318 	add.w	r3, r7, #24
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 faa9 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca82:	e282      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca88:	e27f      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca8a:	4b26      	ldr	r3, [pc, #152]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca96:	d107      	bne.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca98:	f107 030c 	add.w	r3, r7, #12
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f000 fbeb 	bl	800d278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caa6:	e270      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800caa8:	2300      	movs	r3, #0
 800caaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caac:	e26d      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800caae:	4b1d      	ldr	r3, [pc, #116]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cab6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cab8:	4b1a      	ldr	r3, [pc, #104]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f003 0304 	and.w	r3, r3, #4
 800cac0:	2b04      	cmp	r3, #4
 800cac2:	d10c      	bne.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d109      	bne.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800caca:	4b16      	ldr	r3, [pc, #88]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	08db      	lsrs	r3, r3, #3
 800cad0:	f003 0303 	and.w	r3, r3, #3
 800cad4:	4a14      	ldr	r2, [pc, #80]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cad6:	fa22 f303 	lsr.w	r3, r2, r3
 800cada:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cadc:	e01e      	b.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cade:	4b11      	ldr	r3, [pc, #68]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caea:	d106      	bne.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800caec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caf2:	d102      	bne.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800caf4:	4b0d      	ldr	r3, [pc, #52]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800caf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caf8:	e010      	b.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cafa:	4b0a      	ldr	r3, [pc, #40]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb06:	d106      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800cb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb0e:	d102      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb10:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb14:	e002      	b.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb1a:	e236      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb1c:	e235      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb1e:	4b05      	ldr	r3, [pc, #20]	; (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cb20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb22:	e232      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb24:	58024400 	.word	0x58024400
 800cb28:	03d09000 	.word	0x03d09000
 800cb2c:	003d0900 	.word	0x003d0900
 800cb30:	02faf080 	.word	0x02faf080
 800cb34:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb3c:	e225      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cb3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb42:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cb46:	430b      	orrs	r3, r1
 800cb48:	f040 8085 	bne.w	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cb4c:	4b9c      	ldr	r3, [pc, #624]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cb4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb50:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cb54:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb5c:	d06b      	beq.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800cb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb64:	d874      	bhi.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb6c:	d056      	beq.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800cb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb74:	d86c      	bhi.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb7c:	d03b      	beq.n	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800cb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb84:	d864      	bhi.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb8c:	d021      	beq.n	800cbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb94:	d85c      	bhi.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d004      	beq.n	800cba6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cba2:	d004      	beq.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800cba4:	e054      	b.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cba6:	f7fe fb5f 	bl	800b268 <HAL_RCC_GetPCLK1Freq>
 800cbaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbac:	e1ed      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbae:	4b84      	ldr	r3, [pc, #528]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbba:	d107      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbbc:	f107 0318 	add.w	r3, r7, #24
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fa05 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbca:	e1de      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbd0:	e1db      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbd2:	4b7b      	ldr	r3, [pc, #492]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbde:	d107      	bne.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbe0:	f107 030c 	add.w	r3, r7, #12
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f000 fb47 	bl	800d278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbee:	e1cc      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf4:	e1c9      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cbf6:	4b72      	ldr	r3, [pc, #456]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f003 0304 	and.w	r3, r3, #4
 800cbfe:	2b04      	cmp	r3, #4
 800cc00:	d109      	bne.n	800cc16 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc02:	4b6f      	ldr	r3, [pc, #444]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	08db      	lsrs	r3, r3, #3
 800cc08:	f003 0303 	and.w	r3, r3, #3
 800cc0c:	4a6d      	ldr	r2, [pc, #436]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cc0e:	fa22 f303 	lsr.w	r3, r2, r3
 800cc12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc14:	e1b9      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc16:	2300      	movs	r3, #0
 800cc18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc1a:	e1b6      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc1c:	4b68      	ldr	r3, [pc, #416]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc28:	d102      	bne.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800cc2a:	4b67      	ldr	r3, [pc, #412]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc2e:	e1ac      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc34:	e1a9      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc36:	4b62      	ldr	r3, [pc, #392]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc42:	d102      	bne.n	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800cc44:	4b61      	ldr	r3, [pc, #388]	; (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc48:	e19f      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc4e:	e19c      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc54:	e199      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cc56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc5a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cc5e:	430b      	orrs	r3, r1
 800cc60:	d173      	bne.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cc62:	4b57      	ldr	r3, [pc, #348]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc6a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc72:	d02f      	beq.n	800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc7a:	d863      	bhi.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d004      	beq.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800cc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc88:	d012      	beq.n	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800cc8a:	e05b      	b.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc8c:	4b4c      	ldr	r3, [pc, #304]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc98:	d107      	bne.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc9a:	f107 0318 	add.w	r3, r7, #24
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f000 f996 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cca8:	e16f      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccae:	e16c      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccb0:	4b43      	ldr	r3, [pc, #268]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccbc:	d107      	bne.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccbe:	f107 030c 	add.w	r3, r7, #12
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 fad8 	bl	800d278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cccc:	e15d      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccd2:	e15a      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccd4:	4b3a      	ldr	r3, [pc, #232]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccdc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccde:	4b38      	ldr	r3, [pc, #224]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f003 0304 	and.w	r3, r3, #4
 800cce6:	2b04      	cmp	r3, #4
 800cce8:	d10c      	bne.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800ccea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d109      	bne.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccf0:	4b33      	ldr	r3, [pc, #204]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	08db      	lsrs	r3, r3, #3
 800ccf6:	f003 0303 	and.w	r3, r3, #3
 800ccfa:	4a32      	ldr	r2, [pc, #200]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ccfc:	fa22 f303 	lsr.w	r3, r2, r3
 800cd00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd02:	e01e      	b.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd04:	4b2e      	ldr	r3, [pc, #184]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd10:	d106      	bne.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800cd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd18:	d102      	bne.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd1a:	4b2b      	ldr	r3, [pc, #172]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd1e:	e010      	b.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd20:	4b27      	ldr	r3, [pc, #156]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd2c:	d106      	bne.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800cd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd34:	d102      	bne.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd36:	4b25      	ldr	r3, [pc, #148]	; (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cd38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd3a:	e002      	b.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd40:	e123      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd42:	e122      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd48:	e11f      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cd4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd4e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cd52:	430b      	orrs	r3, r1
 800cd54:	d13c      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cd56:	4b1a      	ldr	r3, [pc, #104]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd5e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d004      	beq.n	800cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800cd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd6c:	d012      	beq.n	800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800cd6e:	e023      	b.n	800cdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd70:	4b13      	ldr	r3, [pc, #76]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd7c:	d107      	bne.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 fbcc 	bl	800d520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd8c:	e0fd      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd92:	e0fa      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd94:	4b0a      	ldr	r3, [pc, #40]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cda0:	d107      	bne.n	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cda2:	f107 0318 	add.w	r3, r7, #24
 800cda6:	4618      	mov	r0, r3
 800cda8:	f000 f912 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cdac:	6a3b      	ldr	r3, [r7, #32]
 800cdae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdb0:	e0eb      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb6:	e0e8      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdbc:	e0e5      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cdbe:	bf00      	nop
 800cdc0:	58024400 	.word	0x58024400
 800cdc4:	03d09000 	.word	0x03d09000
 800cdc8:	003d0900 	.word	0x003d0900
 800cdcc:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cdd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdd4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cdd8:	430b      	orrs	r3, r1
 800cdda:	f040 8085 	bne.w	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cdde:	4b6d      	ldr	r3, [pc, #436]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cde0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cde6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdee:	d06b      	beq.n	800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdf6:	d874      	bhi.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdfe:	d056      	beq.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800ce00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce06:	d86c      	bhi.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ce08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce0e:	d03b      	beq.n	800ce88 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce16:	d864      	bhi.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ce18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce1e:	d021      	beq.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce26:	d85c      	bhi.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ce28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d004      	beq.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ce2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce34:	d004      	beq.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ce36:	e054      	b.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ce38:	f000 f8b4 	bl	800cfa4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce3c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce3e:	e0a4      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce40:	4b54      	ldr	r3, [pc, #336]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce4c:	d107      	bne.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce4e:	f107 0318 	add.w	r3, r7, #24
 800ce52:	4618      	mov	r0, r3
 800ce54:	f000 f8bc 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce5c:	e095      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce62:	e092      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce64:	4b4b      	ldr	r3, [pc, #300]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce70:	d107      	bne.n	800ce82 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce72:	f107 030c 	add.w	r3, r7, #12
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 f9fe 	bl	800d278 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce80:	e083      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce86:	e080      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce88:	4b42      	ldr	r3, [pc, #264]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f003 0304 	and.w	r3, r3, #4
 800ce90:	2b04      	cmp	r3, #4
 800ce92:	d109      	bne.n	800cea8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce94:	4b3f      	ldr	r3, [pc, #252]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	08db      	lsrs	r3, r3, #3
 800ce9a:	f003 0303 	and.w	r3, r3, #3
 800ce9e:	4a3e      	ldr	r2, [pc, #248]	; (800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800cea0:	fa22 f303 	lsr.w	r3, r2, r3
 800cea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cea6:	e070      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceac:	e06d      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ceae:	4b39      	ldr	r3, [pc, #228]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceba:	d102      	bne.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800cebc:	4b37      	ldr	r3, [pc, #220]	; (800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800cebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cec0:	e063      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec6:	e060      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cec8:	4b32      	ldr	r3, [pc, #200]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ced0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ced4:	d102      	bne.n	800cedc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800ced6:	4b32      	ldr	r3, [pc, #200]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ced8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceda:	e056      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cedc:	2300      	movs	r3, #0
 800cede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee0:	e053      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee6:	e050      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cef0:	430b      	orrs	r3, r1
 800cef2:	d148      	bne.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cef4:	4b27      	ldr	r3, [pc, #156]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cefc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf04:	d02a      	beq.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800cf06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf0c:	d838      	bhi.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800cf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d004      	beq.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800cf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf1a:	d00d      	beq.n	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800cf1c:	e030      	b.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf1e:	4b1d      	ldr	r3, [pc, #116]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf2a:	d102      	bne.n	800cf32 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800cf2c:	4b1c      	ldr	r3, [pc, #112]	; (800cfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf30:	e02b      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf32:	2300      	movs	r3, #0
 800cf34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf36:	e028      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf38:	4b16      	ldr	r3, [pc, #88]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf44:	d107      	bne.n	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 fae8 	bl	800d520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf54:	e019      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf5a:	e016      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf5c:	4b0d      	ldr	r3, [pc, #52]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf68:	d107      	bne.n	800cf7a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf6a:	f107 0318 	add.w	r3, r7, #24
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 f82e 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf78:	e007      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf7e:	e004      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cf80:	2300      	movs	r3, #0
 800cf82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf84:	e001      	b.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800cf86:	2300      	movs	r3, #0
 800cf88:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cf8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3740      	adds	r7, #64	; 0x40
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	58024400 	.word	0x58024400
 800cf98:	03d09000 	.word	0x03d09000
 800cf9c:	003d0900 	.word	0x003d0900
 800cfa0:	02faf080 	.word	0x02faf080

0800cfa4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cfa8:	f7fe f92e 	bl	800b208 <HAL_RCC_GetHCLKFreq>
 800cfac:	4602      	mov	r2, r0
 800cfae:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
 800cfb2:	091b      	lsrs	r3, r3, #4
 800cfb4:	f003 0307 	and.w	r3, r3, #7
 800cfb8:	4904      	ldr	r1, [pc, #16]	; (800cfcc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cfba:	5ccb      	ldrb	r3, [r1, r3]
 800cfbc:	f003 031f 	and.w	r3, r3, #31
 800cfc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	58024400 	.word	0x58024400
 800cfcc:	0801bf7c 	.word	0x0801bf7c

0800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b089      	sub	sp, #36	; 0x24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfd8:	4ba1      	ldr	r3, [pc, #644]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfdc:	f003 0303 	and.w	r3, r3, #3
 800cfe0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cfe2:	4b9f      	ldr	r3, [pc, #636]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe6:	0b1b      	lsrs	r3, r3, #12
 800cfe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cfee:	4b9c      	ldr	r3, [pc, #624]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff2:	091b      	lsrs	r3, r3, #4
 800cff4:	f003 0301 	and.w	r3, r3, #1
 800cff8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cffa:	4b99      	ldr	r3, [pc, #612]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffe:	08db      	lsrs	r3, r3, #3
 800d000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	fb02 f303 	mul.w	r3, r2, r3
 800d00a:	ee07 3a90 	vmov	s15, r3
 800d00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d012:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 8111 	beq.w	800d240 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	2b02      	cmp	r3, #2
 800d022:	f000 8083 	beq.w	800d12c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	f200 80a1 	bhi.w	800d170 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d003      	beq.n	800d03c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d056      	beq.n	800d0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d03a:	e099      	b.n	800d170 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d03c:	4b88      	ldr	r3, [pc, #544]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 0320 	and.w	r3, r3, #32
 800d044:	2b00      	cmp	r3, #0
 800d046:	d02d      	beq.n	800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d048:	4b85      	ldr	r3, [pc, #532]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	08db      	lsrs	r3, r3, #3
 800d04e:	f003 0303 	and.w	r3, r3, #3
 800d052:	4a84      	ldr	r2, [pc, #528]	; (800d264 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d054:	fa22 f303 	lsr.w	r3, r2, r3
 800d058:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	ee07 3a90 	vmov	s15, r3
 800d060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	ee07 3a90 	vmov	s15, r3
 800d06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d072:	4b7b      	ldr	r3, [pc, #492]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d07a:	ee07 3a90 	vmov	s15, r3
 800d07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d082:	ed97 6a03 	vldr	s12, [r7, #12]
 800d086:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d268 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d09e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0a2:	e087      	b.n	800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	ee07 3a90 	vmov	s15, r3
 800d0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0b6:	4b6a      	ldr	r3, [pc, #424]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0be:	ee07 3a90 	vmov	s15, r3
 800d0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d268 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0e6:	e065      	b.n	800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	ee07 3a90 	vmov	s15, r3
 800d0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0fa:	4b59      	ldr	r3, [pc, #356]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d102:	ee07 3a90 	vmov	s15, r3
 800d106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d10a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d10e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d268 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d12a:	e043      	b.n	800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	ee07 3a90 	vmov	s15, r3
 800d132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d136:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d13e:	4b48      	ldr	r3, [pc, #288]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d146:	ee07 3a90 	vmov	s15, r3
 800d14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d152:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d268 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d16a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d16e:	e021      	b.n	800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	ee07 3a90 	vmov	s15, r3
 800d176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d17a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d182:	4b37      	ldr	r3, [pc, #220]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d18a:	ee07 3a90 	vmov	s15, r3
 800d18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d192:	ed97 6a03 	vldr	s12, [r7, #12]
 800d196:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d268 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d1b4:	4b2a      	ldr	r3, [pc, #168]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b8:	0a5b      	lsrs	r3, r3, #9
 800d1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1be:	ee07 3a90 	vmov	s15, r3
 800d1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1da:	ee17 2a90 	vmov	r2, s15
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d1e2:	4b1f      	ldr	r3, [pc, #124]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e6:	0c1b      	lsrs	r3, r3, #16
 800d1e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ec:	ee07 3a90 	vmov	s15, r3
 800d1f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d208:	ee17 2a90 	vmov	r2, s15
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d210:	4b13      	ldr	r3, [pc, #76]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d214:	0e1b      	lsrs	r3, r3, #24
 800d216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d21a:	ee07 3a90 	vmov	s15, r3
 800d21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d22a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d22e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d236:	ee17 2a90 	vmov	r2, s15
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d23e:	e008      	b.n	800d252 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	609a      	str	r2, [r3, #8]
}
 800d252:	bf00      	nop
 800d254:	3724      	adds	r7, #36	; 0x24
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	58024400 	.word	0x58024400
 800d264:	03d09000 	.word	0x03d09000
 800d268:	46000000 	.word	0x46000000
 800d26c:	4c742400 	.word	0x4c742400
 800d270:	4a742400 	.word	0x4a742400
 800d274:	4c3ebc20 	.word	0x4c3ebc20

0800d278 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d278:	b480      	push	{r7}
 800d27a:	b089      	sub	sp, #36	; 0x24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d280:	4ba1      	ldr	r3, [pc, #644]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d284:	f003 0303 	and.w	r3, r3, #3
 800d288:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d28a:	4b9f      	ldr	r3, [pc, #636]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28e:	0d1b      	lsrs	r3, r3, #20
 800d290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d294:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d296:	4b9c      	ldr	r3, [pc, #624]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29a:	0a1b      	lsrs	r3, r3, #8
 800d29c:	f003 0301 	and.w	r3, r3, #1
 800d2a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d2a2:	4b99      	ldr	r3, [pc, #612]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2a6:	08db      	lsrs	r3, r3, #3
 800d2a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2ac:	693a      	ldr	r2, [r7, #16]
 800d2ae:	fb02 f303 	mul.w	r3, r2, r3
 800d2b2:	ee07 3a90 	vmov	s15, r3
 800d2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 8111 	beq.w	800d4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	f000 8083 	beq.w	800d3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	f200 80a1 	bhi.w	800d418 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d003      	beq.n	800d2e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d056      	beq.n	800d390 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d2e2:	e099      	b.n	800d418 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2e4:	4b88      	ldr	r3, [pc, #544]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f003 0320 	and.w	r3, r3, #32
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d02d      	beq.n	800d34c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2f0:	4b85      	ldr	r3, [pc, #532]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	08db      	lsrs	r3, r3, #3
 800d2f6:	f003 0303 	and.w	r3, r3, #3
 800d2fa:	4a84      	ldr	r2, [pc, #528]	; (800d50c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d2fc:	fa22 f303 	lsr.w	r3, r2, r3
 800d300:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	ee07 3a90 	vmov	s15, r3
 800d308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	ee07 3a90 	vmov	s15, r3
 800d312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d31a:	4b7b      	ldr	r3, [pc, #492]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d322:	ee07 3a90 	vmov	s15, r3
 800d326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d32a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d32e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d510 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d33a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d346:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d34a:	e087      	b.n	800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	ee07 3a90 	vmov	s15, r3
 800d352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d356:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d35e:	4b6a      	ldr	r3, [pc, #424]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d366:	ee07 3a90 	vmov	s15, r3
 800d36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d36e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d372:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d510 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d37e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d38a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d38e:	e065      	b.n	800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	ee07 3a90 	vmov	s15, r3
 800d396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d39a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d39e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3a2:	4b59      	ldr	r3, [pc, #356]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3aa:	ee07 3a90 	vmov	s15, r3
 800d3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d510 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3d2:	e043      	b.n	800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	ee07 3a90 	vmov	s15, r3
 800d3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3e6:	4b48      	ldr	r3, [pc, #288]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ee:	ee07 3a90 	vmov	s15, r3
 800d3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d510 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d416:	e021      	b.n	800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	ee07 3a90 	vmov	s15, r3
 800d41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d422:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d42a:	4b37      	ldr	r3, [pc, #220]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d432:	ee07 3a90 	vmov	s15, r3
 800d436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d43a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d43e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d510 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d44a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d45a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d45c:	4b2a      	ldr	r3, [pc, #168]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d460:	0a5b      	lsrs	r3, r3, #9
 800d462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d466:	ee07 3a90 	vmov	s15, r3
 800d46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d46e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d472:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d476:	edd7 6a07 	vldr	s13, [r7, #28]
 800d47a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d47e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d482:	ee17 2a90 	vmov	r2, s15
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d48a:	4b1f      	ldr	r3, [pc, #124]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48e:	0c1b      	lsrs	r3, r3, #16
 800d490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d494:	ee07 3a90 	vmov	s15, r3
 800d498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d49c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4b0:	ee17 2a90 	vmov	r2, s15
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d4b8:	4b13      	ldr	r3, [pc, #76]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4bc:	0e1b      	lsrs	r3, r3, #24
 800d4be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4c2:	ee07 3a90 	vmov	s15, r3
 800d4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4de:	ee17 2a90 	vmov	r2, s15
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d4e6:	e008      	b.n	800d4fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	609a      	str	r2, [r3, #8]
}
 800d4fa:	bf00      	nop
 800d4fc:	3724      	adds	r7, #36	; 0x24
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr
 800d506:	bf00      	nop
 800d508:	58024400 	.word	0x58024400
 800d50c:	03d09000 	.word	0x03d09000
 800d510:	46000000 	.word	0x46000000
 800d514:	4c742400 	.word	0x4c742400
 800d518:	4a742400 	.word	0x4a742400
 800d51c:	4c3ebc20 	.word	0x4c3ebc20

0800d520 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d520:	b480      	push	{r7}
 800d522:	b089      	sub	sp, #36	; 0x24
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d528:	4ba0      	ldr	r3, [pc, #640]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d52c:	f003 0303 	and.w	r3, r3, #3
 800d530:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d532:	4b9e      	ldr	r3, [pc, #632]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d536:	091b      	lsrs	r3, r3, #4
 800d538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d53c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d53e:	4b9b      	ldr	r3, [pc, #620]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d548:	4b98      	ldr	r3, [pc, #608]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d54c:	08db      	lsrs	r3, r3, #3
 800d54e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d552:	693a      	ldr	r2, [r7, #16]
 800d554:	fb02 f303 	mul.w	r3, r2, r3
 800d558:	ee07 3a90 	vmov	s15, r3
 800d55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d560:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	2b00      	cmp	r3, #0
 800d568:	f000 8111 	beq.w	800d78e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	2b02      	cmp	r3, #2
 800d570:	f000 8083 	beq.w	800d67a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	2b02      	cmp	r3, #2
 800d578:	f200 80a1 	bhi.w	800d6be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d003      	beq.n	800d58a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d056      	beq.n	800d636 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d588:	e099      	b.n	800d6be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d58a:	4b88      	ldr	r3, [pc, #544]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f003 0320 	and.w	r3, r3, #32
 800d592:	2b00      	cmp	r3, #0
 800d594:	d02d      	beq.n	800d5f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d596:	4b85      	ldr	r3, [pc, #532]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	08db      	lsrs	r3, r3, #3
 800d59c:	f003 0303 	and.w	r3, r3, #3
 800d5a0:	4a83      	ldr	r2, [pc, #524]	; (800d7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5a6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	ee07 3a90 	vmov	s15, r3
 800d5ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	ee07 3a90 	vmov	s15, r3
 800d5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5c0:	4b7a      	ldr	r3, [pc, #488]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5c8:	ee07 3a90 	vmov	s15, r3
 800d5cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d5f0:	e087      	b.n	800d702 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	ee07 3a90 	vmov	s15, r3
 800d5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d604:	4b69      	ldr	r3, [pc, #420]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d60c:	ee07 3a90 	vmov	s15, r3
 800d610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d614:	ed97 6a03 	vldr	s12, [r7, #12]
 800d618:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d61c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d62c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d634:	e065      	b.n	800d702 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	ee07 3a90 	vmov	s15, r3
 800d63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d640:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d7bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d648:	4b58      	ldr	r3, [pc, #352]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d650:	ee07 3a90 	vmov	s15, r3
 800d654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d658:	ed97 6a03 	vldr	s12, [r7, #12]
 800d65c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d66c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d670:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d674:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d678:	e043      	b.n	800d702 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	ee07 3a90 	vmov	s15, r3
 800d680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d684:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d68c:	4b47      	ldr	r3, [pc, #284]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d694:	ee07 3a90 	vmov	s15, r3
 800d698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d69c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6bc:	e021      	b.n	800d702 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	ee07 3a90 	vmov	s15, r3
 800d6c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6c8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d6cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6d0:	4b36      	ldr	r3, [pc, #216]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d8:	ee07 3a90 	vmov	s15, r3
 800d6dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d700:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d702:	4b2a      	ldr	r3, [pc, #168]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d706:	0a5b      	lsrs	r3, r3, #9
 800d708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d70c:	ee07 3a90 	vmov	s15, r3
 800d710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d71c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d728:	ee17 2a90 	vmov	r2, s15
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d730:	4b1e      	ldr	r3, [pc, #120]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d734:	0c1b      	lsrs	r3, r3, #16
 800d736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d73a:	ee07 3a90 	vmov	s15, r3
 800d73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d74a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d74e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d756:	ee17 2a90 	vmov	r2, s15
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d75e:	4b13      	ldr	r3, [pc, #76]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d762:	0e1b      	lsrs	r3, r3, #24
 800d764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d768:	ee07 3a90 	vmov	s15, r3
 800d76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d774:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d778:	edd7 6a07 	vldr	s13, [r7, #28]
 800d77c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d784:	ee17 2a90 	vmov	r2, s15
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d78c:	e008      	b.n	800d7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	609a      	str	r2, [r3, #8]
}
 800d7a0:	bf00      	nop
 800d7a2:	3724      	adds	r7, #36	; 0x24
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr
 800d7ac:	58024400 	.word	0x58024400
 800d7b0:	03d09000 	.word	0x03d09000
 800d7b4:	46000000 	.word	0x46000000
 800d7b8:	4c742400 	.word	0x4c742400
 800d7bc:	4a742400 	.word	0x4a742400
 800d7c0:	4c3ebc20 	.word	0x4c3ebc20

0800d7c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7d2:	4b53      	ldr	r3, [pc, #332]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7d6:	f003 0303 	and.w	r3, r3, #3
 800d7da:	2b03      	cmp	r3, #3
 800d7dc:	d101      	bne.n	800d7e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	e099      	b.n	800d916 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d7e2:	4b4f      	ldr	r3, [pc, #316]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4a4e      	ldr	r2, [pc, #312]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d7e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d7ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7ee:	f7f6 fa2f 	bl	8003c50 <HAL_GetTick>
 800d7f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d7f4:	e008      	b.n	800d808 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d7f6:	f7f6 fa2b 	bl	8003c50 <HAL_GetTick>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	2b02      	cmp	r3, #2
 800d802:	d901      	bls.n	800d808 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d804:	2303      	movs	r3, #3
 800d806:	e086      	b.n	800d916 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d808:	4b45      	ldr	r3, [pc, #276]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1f0      	bne.n	800d7f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d814:	4b42      	ldr	r3, [pc, #264]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d818:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	031b      	lsls	r3, r3, #12
 800d822:	493f      	ldr	r1, [pc, #252]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d824:	4313      	orrs	r3, r2
 800d826:	628b      	str	r3, [r1, #40]	; 0x28
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	3b01      	subs	r3, #1
 800d82e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	3b01      	subs	r3, #1
 800d838:	025b      	lsls	r3, r3, #9
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	431a      	orrs	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	3b01      	subs	r3, #1
 800d844:	041b      	lsls	r3, r3, #16
 800d846:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d84a:	431a      	orrs	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	3b01      	subs	r3, #1
 800d852:	061b      	lsls	r3, r3, #24
 800d854:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d858:	4931      	ldr	r1, [pc, #196]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d85a:	4313      	orrs	r3, r2
 800d85c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d85e:	4b30      	ldr	r3, [pc, #192]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d862:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	695b      	ldr	r3, [r3, #20]
 800d86a:	492d      	ldr	r1, [pc, #180]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d86c:	4313      	orrs	r3, r2
 800d86e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d870:	4b2b      	ldr	r3, [pc, #172]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d874:	f023 0220 	bic.w	r2, r3, #32
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	699b      	ldr	r3, [r3, #24]
 800d87c:	4928      	ldr	r1, [pc, #160]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d87e:	4313      	orrs	r3, r2
 800d880:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d882:	4b27      	ldr	r3, [pc, #156]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d886:	4a26      	ldr	r2, [pc, #152]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d888:	f023 0310 	bic.w	r3, r3, #16
 800d88c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d88e:	4b24      	ldr	r3, [pc, #144]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d892:	4b24      	ldr	r3, [pc, #144]	; (800d924 <RCCEx_PLL2_Config+0x160>)
 800d894:	4013      	ands	r3, r2
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	69d2      	ldr	r2, [r2, #28]
 800d89a:	00d2      	lsls	r2, r2, #3
 800d89c:	4920      	ldr	r1, [pc, #128]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d8a2:	4b1f      	ldr	r3, [pc, #124]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a6:	4a1e      	ldr	r2, [pc, #120]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d8a8:	f043 0310 	orr.w	r3, r3, #16
 800d8ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d106      	bne.n	800d8c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d8b4:	4b1a      	ldr	r3, [pc, #104]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b8:	4a19      	ldr	r2, [pc, #100]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d8ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8c0:	e00f      	b.n	800d8e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d106      	bne.n	800d8d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d8c8:	4b15      	ldr	r3, [pc, #84]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8cc:	4a14      	ldr	r2, [pc, #80]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d8ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8d4:	e005      	b.n	800d8e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d8d6:	4b12      	ldr	r3, [pc, #72]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8da:	4a11      	ldr	r2, [pc, #68]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d8dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d8e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d8e2:	4b0f      	ldr	r3, [pc, #60]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a0e      	ldr	r2, [pc, #56]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d8e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d8ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8ee:	f7f6 f9af 	bl	8003c50 <HAL_GetTick>
 800d8f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d8f4:	e008      	b.n	800d908 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d8f6:	f7f6 f9ab 	bl	8003c50 <HAL_GetTick>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	2b02      	cmp	r3, #2
 800d902:	d901      	bls.n	800d908 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d904:	2303      	movs	r3, #3
 800d906:	e006      	b.n	800d916 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d908:	4b05      	ldr	r3, [pc, #20]	; (800d920 <RCCEx_PLL2_Config+0x15c>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d910:	2b00      	cmp	r3, #0
 800d912:	d0f0      	beq.n	800d8f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d914:	7bfb      	ldrb	r3, [r7, #15]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	58024400 	.word	0x58024400
 800d924:	ffff0007 	.word	0xffff0007

0800d928 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d932:	2300      	movs	r3, #0
 800d934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d936:	4b53      	ldr	r3, [pc, #332]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d93a:	f003 0303 	and.w	r3, r3, #3
 800d93e:	2b03      	cmp	r3, #3
 800d940:	d101      	bne.n	800d946 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d942:	2301      	movs	r3, #1
 800d944:	e099      	b.n	800da7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d946:	4b4f      	ldr	r3, [pc, #316]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a4e      	ldr	r2, [pc, #312]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d94c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d952:	f7f6 f97d 	bl	8003c50 <HAL_GetTick>
 800d956:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d958:	e008      	b.n	800d96c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d95a:	f7f6 f979 	bl	8003c50 <HAL_GetTick>
 800d95e:	4602      	mov	r2, r0
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	1ad3      	subs	r3, r2, r3
 800d964:	2b02      	cmp	r3, #2
 800d966:	d901      	bls.n	800d96c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d968:	2303      	movs	r3, #3
 800d96a:	e086      	b.n	800da7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d96c:	4b45      	ldr	r3, [pc, #276]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1f0      	bne.n	800d95a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d978:	4b42      	ldr	r3, [pc, #264]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d97c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	051b      	lsls	r3, r3, #20
 800d986:	493f      	ldr	r1, [pc, #252]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d988:	4313      	orrs	r3, r2
 800d98a:	628b      	str	r3, [r1, #40]	; 0x28
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	3b01      	subs	r3, #1
 800d992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	025b      	lsls	r3, r3, #9
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	431a      	orrs	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	041b      	lsls	r3, r3, #16
 800d9aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9ae:	431a      	orrs	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	061b      	lsls	r3, r3, #24
 800d9b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9bc:	4931      	ldr	r1, [pc, #196]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d9c2:	4b30      	ldr	r3, [pc, #192]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	695b      	ldr	r3, [r3, #20]
 800d9ce:	492d      	ldr	r1, [pc, #180]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d9d4:	4b2b      	ldr	r3, [pc, #172]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	699b      	ldr	r3, [r3, #24]
 800d9e0:	4928      	ldr	r1, [pc, #160]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d9e6:	4b27      	ldr	r3, [pc, #156]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ea:	4a26      	ldr	r2, [pc, #152]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d9ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d9f2:	4b24      	ldr	r3, [pc, #144]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800d9f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9f6:	4b24      	ldr	r3, [pc, #144]	; (800da88 <RCCEx_PLL3_Config+0x160>)
 800d9f8:	4013      	ands	r3, r2
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	69d2      	ldr	r2, [r2, #28]
 800d9fe:	00d2      	lsls	r2, r2, #3
 800da00:	4920      	ldr	r1, [pc, #128]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da02:	4313      	orrs	r3, r2
 800da04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da06:	4b1f      	ldr	r3, [pc, #124]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0a:	4a1e      	ldr	r2, [pc, #120]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d106      	bne.n	800da26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da18:	4b1a      	ldr	r3, [pc, #104]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da1c:	4a19      	ldr	r2, [pc, #100]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da24:	e00f      	b.n	800da46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d106      	bne.n	800da3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da2c:	4b15      	ldr	r3, [pc, #84]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da30:	4a14      	ldr	r2, [pc, #80]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da36:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da38:	e005      	b.n	800da46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da3a:	4b12      	ldr	r3, [pc, #72]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3e:	4a11      	ldr	r2, [pc, #68]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da46:	4b0f      	ldr	r3, [pc, #60]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a0e      	ldr	r2, [pc, #56]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da52:	f7f6 f8fd 	bl	8003c50 <HAL_GetTick>
 800da56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da58:	e008      	b.n	800da6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da5a:	f7f6 f8f9 	bl	8003c50 <HAL_GetTick>
 800da5e:	4602      	mov	r2, r0
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	1ad3      	subs	r3, r2, r3
 800da64:	2b02      	cmp	r3, #2
 800da66:	d901      	bls.n	800da6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da68:	2303      	movs	r3, #3
 800da6a:	e006      	b.n	800da7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da6c:	4b05      	ldr	r3, [pc, #20]	; (800da84 <RCCEx_PLL3_Config+0x15c>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da74:	2b00      	cmp	r3, #0
 800da76:	d0f0      	beq.n	800da5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800da78:	7bfb      	ldrb	r3, [r7, #15]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	58024400 	.word	0x58024400
 800da88:	ffff0007 	.word	0xffff0007

0800da8c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08a      	sub	sp, #40	; 0x28
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	e075      	b.n	800db8a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d105      	bne.n	800dab6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f7f5 f9f5 	bl	8002ea0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2204      	movs	r2, #4
 800daba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f868 	bl	800db94 <HAL_SD_InitCard>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d001      	beq.n	800dace <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800daca:	2301      	movs	r3, #1
 800dacc:	e05d      	b.n	800db8a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800dace:	f107 0308 	add.w	r3, r7, #8
 800dad2:	4619      	mov	r1, r3
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f000 fdaf 	bl	800e638 <HAL_SD_GetCardStatus>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800dae0:	2301      	movs	r3, #1
 800dae2:	e052      	b.n	800db8a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800dae4:	7e3b      	ldrb	r3, [r7, #24]
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800daea:	7e7b      	ldrb	r3, [r7, #25]
 800daec:	b2db      	uxtb	r3, r3
 800daee:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d10a      	bne.n	800db0e <HAL_SD_Init+0x82>
 800daf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d102      	bne.n	800db04 <HAL_SD_Init+0x78>
 800dafe:	6a3b      	ldr	r3, [r7, #32]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d004      	beq.n	800db0e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db0a:	659a      	str	r2, [r3, #88]	; 0x58
 800db0c:	e00b      	b.n	800db26 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db12:	2b01      	cmp	r3, #1
 800db14:	d104      	bne.n	800db20 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db1c:	659a      	str	r2, [r3, #88]	; 0x58
 800db1e:	e002      	b.n	800db26 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	4619      	mov	r1, r3
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 fe6d 	bl	800e80c <HAL_SD_ConfigWideBusOperation>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d001      	beq.n	800db3c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800db38:	2301      	movs	r3, #1
 800db3a:	e026      	b.n	800db8a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800db3c:	f7f6 f888 	bl	8003c50 <HAL_GetTick>
 800db40:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800db42:	e011      	b.n	800db68 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800db44:	f7f6 f884 	bl	8003c50 <HAL_GetTick>
 800db48:	4602      	mov	r2, r0
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	1ad3      	subs	r3, r2, r3
 800db4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db52:	d109      	bne.n	800db68 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800db5a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800db64:	2303      	movs	r3, #3
 800db66:	e010      	b.n	800db8a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 ff61 	bl	800ea30 <HAL_SD_GetCardState>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b04      	cmp	r3, #4
 800db72:	d1e7      	bne.n	800db44 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2200      	movs	r2, #0
 800db7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2201      	movs	r2, #1
 800db84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3728      	adds	r7, #40	; 0x28
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
	...

0800db94 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800db94:	b590      	push	{r4, r7, lr}
 800db96:	b08d      	sub	sp, #52	; 0x34
 800db98:	af02      	add	r7, sp, #8
 800db9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800db9c:	2300      	movs	r3, #0
 800db9e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800dba0:	2300      	movs	r3, #0
 800dba2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800dba4:	2300      	movs	r3, #0
 800dba6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dbac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dbb0:	f04f 0100 	mov.w	r1, #0
 800dbb4:	f7fe fd24 	bl	800c600 <HAL_RCCEx_GetPeriphCLKFreq>
 800dbb8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d109      	bne.n	800dbd4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dbce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e070      	b.n	800dcb6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800dbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd6:	0a1b      	lsrs	r3, r3, #8
 800dbd8:	4a39      	ldr	r2, [pc, #228]	; (800dcc0 <HAL_SD_InitCard+0x12c>)
 800dbda:	fba2 2303 	umull	r2, r3, r2, r3
 800dbde:	091b      	lsrs	r3, r3, #4
 800dbe0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681c      	ldr	r4, [r3, #0]
 800dbe6:	466a      	mov	r2, sp
 800dbe8:	f107 0318 	add.w	r3, r7, #24
 800dbec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dbf0:	e882 0003 	stmia.w	r2, {r0, r1}
 800dbf4:	f107 030c 	add.w	r3, r7, #12
 800dbf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f004 fec4 	bl	8012988 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f004 ff07 	bl	8012a18 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d005      	beq.n	800dc1c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	005b      	lsls	r3, r3, #1
 800dc14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc16:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc1a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d007      	beq.n	800dc32 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800dc22:	4a28      	ldr	r2, [pc, #160]	; (800dcc4 <HAL_SD_InitCard+0x130>)
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7f6 f81b 	bl	8003c68 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 ffea 	bl	800ec0c <SD_PowerON>
 800dc38:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc3a:	6a3b      	ldr	r3, [r7, #32]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00b      	beq.n	800dc58 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2201      	movs	r2, #1
 800dc44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	431a      	orrs	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	e02e      	b.n	800dcb6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 ff09 	bl	800ea70 <SD_InitCard>
 800dc5e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00b      	beq.n	800dc7e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc72:	6a3b      	ldr	r3, [r7, #32]
 800dc74:	431a      	orrs	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e01b      	b.n	800dcb6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc86:	4618      	mov	r0, r3
 800dc88:	f004 ff5c 	bl	8012b44 <SDMMC_CmdBlockLength>
 800dc8c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc8e:	6a3b      	ldr	r3, [r7, #32]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00f      	beq.n	800dcb4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a0b      	ldr	r2, [pc, #44]	; (800dcc8 <HAL_SD_InitCard+0x134>)
 800dc9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dca0:	6a3b      	ldr	r3, [r7, #32]
 800dca2:	431a      	orrs	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e000      	b.n	800dcb6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	372c      	adds	r7, #44	; 0x2c
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd90      	pop	{r4, r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	014f8b59 	.word	0x014f8b59
 800dcc4:	00012110 	.word	0x00012110
 800dcc8:	1fe00fff 	.word	0x1fe00fff

0800dccc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b08c      	sub	sp, #48	; 0x30
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]
 800dcd8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d107      	bne.n	800dcf4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e08d      	b.n	800de10 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	f040 8086 	bne.w	800de0e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2200      	movs	r2, #0
 800dd06:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dd08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	441a      	add	r2, r3
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d907      	bls.n	800dd26 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	e074      	b.n	800de10 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2203      	movs	r2, #3
 800dd2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2200      	movs	r2, #0
 800dd34:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	68ba      	ldr	r2, [r7, #8]
 800dd3a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	025a      	lsls	r2, r3, #9
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d002      	beq.n	800dd52 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	025b      	lsls	r3, r3, #9
 800dd50:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dd52:	f04f 33ff 	mov.w	r3, #4294967295
 800dd56:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	025b      	lsls	r3, r3, #9
 800dd5c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800dd5e:	2390      	movs	r3, #144	; 0x90
 800dd60:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dd62:	2302      	movs	r3, #2
 800dd64:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dd66:	2300      	movs	r3, #0
 800dd68:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f107 0210 	add.w	r2, r7, #16
 800dd76:	4611      	mov	r1, r2
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f004 feb7 	bl	8012aec <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	68da      	ldr	r2, [r3, #12]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd8c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	68ba      	ldr	r2, [r7, #8]
 800dd94:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d90a      	bls.n	800ddba <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2282      	movs	r2, #130	; 0x82
 800dda8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f004 ff0d 	bl	8012bd0 <SDMMC_CmdReadMultiBlock>
 800ddb6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ddb8:	e009      	b.n	800ddce <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2281      	movs	r2, #129	; 0x81
 800ddbe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f004 fedf 	bl	8012b8a <SDMMC_CmdReadSingleBlock>
 800ddcc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800ddce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d012      	beq.n	800ddfa <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a0f      	ldr	r2, [pc, #60]	; (800de18 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800ddda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde2:	431a      	orrs	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e00a      	b.n	800de10 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800de08:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	e000      	b.n	800de10 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800de0e:	2302      	movs	r3, #2
  }
}
 800de10:	4618      	mov	r0, r3
 800de12:	3730      	adds	r7, #48	; 0x30
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	1fe00fff 	.word	0x1fe00fff

0800de1c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b08c      	sub	sp, #48	; 0x30
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
 800de28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d107      	bne.n	800de44 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800de40:	2301      	movs	r3, #1
 800de42:	e08d      	b.n	800df60 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	f040 8086 	bne.w	800df5e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2200      	movs	r2, #0
 800de56:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800de58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	441a      	add	r2, r3
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de62:	429a      	cmp	r2, r3
 800de64:	d907      	bls.n	800de76 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de6a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800de72:	2301      	movs	r3, #1
 800de74:	e074      	b.n	800df60 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2203      	movs	r2, #3
 800de7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2200      	movs	r2, #0
 800de84:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	025a      	lsls	r2, r3, #9
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d002      	beq.n	800dea2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800de9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9e:	025b      	lsls	r3, r3, #9
 800dea0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dea2:	f04f 33ff 	mov.w	r3, #4294967295
 800dea6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	025b      	lsls	r3, r3, #9
 800deac:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800deae:	2390      	movs	r3, #144	; 0x90
 800deb0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800deb2:	2300      	movs	r3, #0
 800deb4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800deb6:	2300      	movs	r3, #0
 800deb8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800deba:	2300      	movs	r3, #0
 800debc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f107 0210 	add.w	r2, r7, #16
 800dec6:	4611      	mov	r1, r2
 800dec8:	4618      	mov	r0, r3
 800deca:	f004 fe0f 	bl	8012aec <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	68da      	ldr	r2, [r3, #12]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dedc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	68ba      	ldr	r2, [r7, #8]
 800dee4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2201      	movs	r2, #1
 800deec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d90a      	bls.n	800df0a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	22a0      	movs	r2, #160	; 0xa0
 800def8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df00:	4618      	mov	r0, r3
 800df02:	f004 feab 	bl	8012c5c <SDMMC_CmdWriteMultiBlock>
 800df06:	62f8      	str	r0, [r7, #44]	; 0x2c
 800df08:	e009      	b.n	800df1e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2290      	movs	r2, #144	; 0x90
 800df0e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df16:	4618      	mov	r0, r3
 800df18:	f004 fe7d 	bl	8012c16 <SDMMC_CmdWriteSingleBlock>
 800df1c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800df1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df20:	2b00      	cmp	r3, #0
 800df22:	d012      	beq.n	800df4a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a0f      	ldr	r2, [pc, #60]	; (800df68 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800df2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df32:	431a      	orrs	r2, r3
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2201      	movs	r2, #1
 800df3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2200      	movs	r2, #0
 800df44:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800df46:	2301      	movs	r3, #1
 800df48:	e00a      	b.n	800df60 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800df58:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800df5a:	2300      	movs	r3, #0
 800df5c:	e000      	b.n	800df60 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800df5e:	2302      	movs	r3, #2
  }
}
 800df60:	4618      	mov	r0, r3
 800df62:	3730      	adds	r7, #48	; 0x30
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	1fe00fff 	.word	0x1fe00fff

0800df6c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df78:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df84:	2b00      	cmp	r3, #0
 800df86:	d008      	beq.n	800df9a <HAL_SD_IRQHandler+0x2e>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f003 0308 	and.w	r3, r3, #8
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d003      	beq.n	800df9a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f001 f926 	bl	800f1e4 <SD_Read_IT>
 800df98:	e19a      	b.n	800e2d0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 80ac 	beq.w	800e102 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfb2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	4b59      	ldr	r3, [pc, #356]	; (800e124 <HAL_SD_IRQHandler+0x1b8>)
 800dfc0:	400b      	ands	r3, r1
 800dfc2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dfd2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	68da      	ldr	r2, [r3, #12]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dfe2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f003 0308 	and.w	r3, r3, #8
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d038      	beq.n	800e060 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f003 0302 	and.w	r3, r3, #2
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d104      	bne.n	800e002 <HAL_SD_IRQHandler+0x96>
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f003 0320 	and.w	r3, r3, #32
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d011      	beq.n	800e026 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4618      	mov	r0, r3
 800e008:	f004 fe4c 	bl	8012ca4 <SDMMC_CmdStopTransfer>
 800e00c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d008      	beq.n	800e026 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	431a      	orrs	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 f95b 	bl	800e2dc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4a3f      	ldr	r2, [pc, #252]	; (800e128 <HAL_SD_IRQHandler+0x1bc>)
 800e02c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2201      	movs	r2, #1
 800e032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2200      	movs	r2, #0
 800e03a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	2b00      	cmp	r3, #0
 800e044:	d104      	bne.n	800e050 <HAL_SD_IRQHandler+0xe4>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f003 0302 	and.w	r3, r3, #2
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d003      	beq.n	800e058 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f006 fe55 	bl	8014d00 <HAL_SD_RxCpltCallback>
 800e056:	e13b      	b.n	800e2d0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f006 fe47 	bl	8014cec <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e05e:	e137      	b.n	800e2d0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e066:	2b00      	cmp	r3, #0
 800e068:	f000 8132 	beq.w	800e2d0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2200      	movs	r2, #0
 800e072:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2200      	movs	r2, #0
 800e07a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2200      	movs	r2, #0
 800e082:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f003 0302 	and.w	r3, r3, #2
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d104      	bne.n	800e098 <HAL_SD_IRQHandler+0x12c>
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f003 0320 	and.w	r3, r3, #32
 800e094:	2b00      	cmp	r3, #0
 800e096:	d011      	beq.n	800e0bc <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f004 fe01 	bl	8012ca4 <SDMMC_CmdStopTransfer>
 800e0a2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d008      	beq.n	800e0bc <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	431a      	orrs	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f910 	bl	800e2dc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f003 0310 	and.w	r3, r3, #16
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d104      	bne.n	800e0de <HAL_SD_IRQHandler+0x172>
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f003 0320 	and.w	r3, r3, #32
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d002      	beq.n	800e0e4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f006 fe04 	bl	8014cec <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f003 0301 	and.w	r3, r3, #1
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d105      	bne.n	800e0fa <HAL_SD_IRQHandler+0x18e>
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f003 0302 	and.w	r3, r3, #2
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f000 80eb 	beq.w	800e2d0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f006 fe00 	bl	8014d00 <HAL_SD_RxCpltCallback>
}
 800e100:	e0e6      	b.n	800e2d0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00d      	beq.n	800e12c <HAL_SD_IRQHandler+0x1c0>
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f003 0308 	and.w	r3, r3, #8
 800e116:	2b00      	cmp	r3, #0
 800e118:	d008      	beq.n	800e12c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f001 f8a8 	bl	800f270 <SD_Write_IT>
 800e120:	e0d6      	b.n	800e2d0 <HAL_SD_IRQHandler+0x364>
 800e122:	bf00      	nop
 800e124:	ffff3ec5 	.word	0xffff3ec5
 800e128:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e132:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e136:	2b00      	cmp	r3, #0
 800e138:	f000 809d 	beq.w	800e276 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e142:	f003 0302 	and.w	r3, r3, #2
 800e146:	2b00      	cmp	r3, #0
 800e148:	d005      	beq.n	800e156 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e14e:	f043 0202 	orr.w	r2, r3, #2
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e15c:	f003 0308 	and.w	r3, r3, #8
 800e160:	2b00      	cmp	r3, #0
 800e162:	d005      	beq.n	800e170 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e168:	f043 0208 	orr.w	r2, r3, #8
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e176:	f003 0320 	and.w	r3, r3, #32
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d005      	beq.n	800e18a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e182:	f043 0220 	orr.w	r2, r3, #32
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e190:	f003 0310 	and.w	r3, r3, #16
 800e194:	2b00      	cmp	r3, #0
 800e196:	d005      	beq.n	800e1a4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e19c:	f043 0210 	orr.w	r2, r3, #16
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a4b      	ldr	r2, [pc, #300]	; (800e2d8 <HAL_SD_IRQHandler+0x36c>)
 800e1aa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e1ba:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68da      	ldr	r2, [r3, #12]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1ca:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e1da:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	68da      	ldr	r2, [r3, #12]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e1ea:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f004 fd57 	bl	8012ca4 <SDMMC_CmdStopTransfer>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1fc:	431a      	orrs	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	68da      	ldr	r2, [r3, #12]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e210:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e21a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f003 0308 	and.w	r3, r3, #8
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00a      	beq.n	800e23c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2200      	movs	r2, #0
 800e232:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 f851 	bl	800e2dc <HAL_SD_ErrorCallback>
}
 800e23a:	e049      	b.n	800e2d0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e242:	2b00      	cmp	r3, #0
 800e244:	d044      	beq.n	800e2d0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d040      	beq.n	800e2d0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e25c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2200      	movs	r2, #0
 800e264:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 f834 	bl	800e2dc <HAL_SD_ErrorCallback>
}
 800e274:	e02c      	b.n	800e2d0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e27c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e280:	2b00      	cmp	r3, #0
 800e282:	d025      	beq.n	800e2d0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e28c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e294:	f003 0304 	and.w	r3, r3, #4
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d10c      	bne.n	800e2b6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f003 0320 	and.w	r3, r3, #32
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d003      	beq.n	800e2ae <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f001 f84a 	bl	800f340 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e2ac:	e010      	b.n	800e2d0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f001 f832 	bl	800f318 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e2b4:	e00c      	b.n	800e2d0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f003 0320 	and.w	r3, r3, #32
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d003      	beq.n	800e2c8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f001 f833 	bl	800f32c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e2c6:	e003      	b.n	800e2d0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f001 f81b 	bl	800f304 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e2ce:	e7ff      	b.n	800e2d0 <HAL_SD_IRQHandler+0x364>
 800e2d0:	bf00      	nop
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	18000f3a 	.word	0x18000f3a

0800e2dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b083      	sub	sp, #12
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e2e4:	bf00      	nop
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2fe:	0f9b      	lsrs	r3, r3, #30
 800e300:	b2da      	uxtb	r2, r3
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e30a:	0e9b      	lsrs	r3, r3, #26
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	f003 030f 	and.w	r3, r3, #15
 800e312:	b2da      	uxtb	r2, r3
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e31c:	0e1b      	lsrs	r3, r3, #24
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	f003 0303 	and.w	r3, r3, #3
 800e324:	b2da      	uxtb	r2, r3
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e32e:	0c1b      	lsrs	r3, r3, #16
 800e330:	b2da      	uxtb	r2, r3
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e33a:	0a1b      	lsrs	r3, r3, #8
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e346:	b2da      	uxtb	r2, r3
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e350:	0d1b      	lsrs	r3, r3, #20
 800e352:	b29a      	uxth	r2, r3
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e35c:	0c1b      	lsrs	r3, r3, #16
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	f003 030f 	and.w	r3, r3, #15
 800e364:	b2da      	uxtb	r2, r3
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e36e:	0bdb      	lsrs	r3, r3, #15
 800e370:	b2db      	uxtb	r3, r3
 800e372:	f003 0301 	and.w	r3, r3, #1
 800e376:	b2da      	uxtb	r2, r3
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e380:	0b9b      	lsrs	r3, r3, #14
 800e382:	b2db      	uxtb	r3, r3
 800e384:	f003 0301 	and.w	r3, r3, #1
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e392:	0b5b      	lsrs	r3, r3, #13
 800e394:	b2db      	uxtb	r3, r3
 800e396:	f003 0301 	and.w	r3, r3, #1
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3a4:	0b1b      	lsrs	r3, r3, #12
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	f003 0301 	and.w	r3, r3, #1
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d163      	bne.n	800e488 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3c4:	009a      	lsls	r2, r3, #2
 800e3c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e3d0:	0f92      	lsrs	r2, r2, #30
 800e3d2:	431a      	orrs	r2, r3
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3dc:	0edb      	lsrs	r3, r3, #27
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	f003 0307 	and.w	r3, r3, #7
 800e3e4:	b2da      	uxtb	r2, r3
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3ee:	0e1b      	lsrs	r3, r3, #24
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	f003 0307 	and.w	r3, r3, #7
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e400:	0d5b      	lsrs	r3, r3, #21
 800e402:	b2db      	uxtb	r3, r3
 800e404:	f003 0307 	and.w	r3, r3, #7
 800e408:	b2da      	uxtb	r2, r3
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e412:	0c9b      	lsrs	r3, r3, #18
 800e414:	b2db      	uxtb	r3, r3
 800e416:	f003 0307 	and.w	r3, r3, #7
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e424:	0bdb      	lsrs	r3, r3, #15
 800e426:	b2db      	uxtb	r3, r3
 800e428:	f003 0307 	and.w	r3, r3, #7
 800e42c:	b2da      	uxtb	r2, r3
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	691b      	ldr	r3, [r3, #16]
 800e436:	1c5a      	adds	r2, r3, #1
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	7e1b      	ldrb	r3, [r3, #24]
 800e440:	b2db      	uxtb	r3, r3
 800e442:	f003 0307 	and.w	r3, r3, #7
 800e446:	3302      	adds	r3, #2
 800e448:	2201      	movs	r2, #1
 800e44a:	fa02 f303 	lsl.w	r3, r2, r3
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e452:	fb03 f202 	mul.w	r2, r3, r2
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	7a1b      	ldrb	r3, [r3, #8]
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	f003 030f 	and.w	r3, r3, #15
 800e464:	2201      	movs	r2, #1
 800e466:	409a      	lsls	r2, r3
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e474:	0a52      	lsrs	r2, r2, #9
 800e476:	fb03 f202 	mul.w	r2, r3, r2
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e484:	655a      	str	r2, [r3, #84]	; 0x54
 800e486:	e031      	b.n	800e4ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d11d      	bne.n	800e4cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e494:	041b      	lsls	r3, r3, #16
 800e496:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e49e:	0c1b      	lsrs	r3, r3, #16
 800e4a0:	431a      	orrs	r2, r3
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	029a      	lsls	r2, r3, #10
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	655a      	str	r2, [r3, #84]	; 0x54
 800e4ca:	e00f      	b.n	800e4ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4a58      	ldr	r2, [pc, #352]	; (800e634 <HAL_SD_GetCardCSD+0x344>)
 800e4d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	e09d      	b.n	800e628 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4f0:	0b9b      	lsrs	r3, r3, #14
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	f003 0301 	and.w	r3, r3, #1
 800e4f8:	b2da      	uxtb	r2, r3
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e502:	09db      	lsrs	r3, r3, #7
 800e504:	b2db      	uxtb	r3, r3
 800e506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e514:	b2db      	uxtb	r3, r3
 800e516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e51a:	b2da      	uxtb	r2, r3
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e524:	0fdb      	lsrs	r3, r3, #31
 800e526:	b2da      	uxtb	r2, r3
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e530:	0f5b      	lsrs	r3, r3, #29
 800e532:	b2db      	uxtb	r3, r3
 800e534:	f003 0303 	and.w	r3, r3, #3
 800e538:	b2da      	uxtb	r2, r3
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e542:	0e9b      	lsrs	r3, r3, #26
 800e544:	b2db      	uxtb	r3, r3
 800e546:	f003 0307 	and.w	r3, r3, #7
 800e54a:	b2da      	uxtb	r2, r3
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e554:	0d9b      	lsrs	r3, r3, #22
 800e556:	b2db      	uxtb	r3, r3
 800e558:	f003 030f 	and.w	r3, r3, #15
 800e55c:	b2da      	uxtb	r2, r3
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e566:	0d5b      	lsrs	r3, r3, #21
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	f003 0301 	and.w	r3, r3, #1
 800e56e:	b2da      	uxtb	r2, r3
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e582:	0c1b      	lsrs	r3, r3, #16
 800e584:	b2db      	uxtb	r3, r3
 800e586:	f003 0301 	and.w	r3, r3, #1
 800e58a:	b2da      	uxtb	r2, r3
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e596:	0bdb      	lsrs	r3, r3, #15
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	f003 0301 	and.w	r3, r3, #1
 800e59e:	b2da      	uxtb	r2, r3
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5aa:	0b9b      	lsrs	r3, r3, #14
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	f003 0301 	and.w	r3, r3, #1
 800e5b2:	b2da      	uxtb	r2, r3
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5be:	0b5b      	lsrs	r3, r3, #13
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	f003 0301 	and.w	r3, r3, #1
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5d2:	0b1b      	lsrs	r3, r3, #12
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	f003 0301 	and.w	r3, r3, #1
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5e6:	0a9b      	lsrs	r3, r3, #10
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	f003 0303 	and.w	r3, r3, #3
 800e5ee:	b2da      	uxtb	r2, r3
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5fa:	0a1b      	lsrs	r3, r3, #8
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	f003 0303 	and.w	r3, r3, #3
 800e602:	b2da      	uxtb	r2, r3
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e60e:	085b      	lsrs	r3, r3, #1
 800e610:	b2db      	uxtb	r3, r3
 800e612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e616:	b2da      	uxtb	r2, r3
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	2201      	movs	r2, #1
 800e622:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e626:	2300      	movs	r3, #0
}
 800e628:	4618      	mov	r0, r3
 800e62a:	370c      	adds	r7, #12
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr
 800e634:	1fe00fff 	.word	0x1fe00fff

0800e638 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b094      	sub	sp, #80	; 0x50
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e642:	2300      	movs	r3, #0
 800e644:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	2b03      	cmp	r3, #3
 800e652:	d101      	bne.n	800e658 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e654:	2301      	movs	r3, #1
 800e656:	e0a7      	b.n	800e7a8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e658:	f107 0308 	add.w	r3, r7, #8
 800e65c:	4619      	mov	r1, r3
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f000 fb62 	bl	800ed28 <SD_SendSDStatus>
 800e664:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d011      	beq.n	800e690 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4a4f      	ldr	r2, [pc, #316]	; (800e7b0 <HAL_SD_GetCardStatus+0x178>)
 800e672:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e67a:	431a      	orrs	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2201      	movs	r2, #1
 800e684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e688:	2301      	movs	r3, #1
 800e68a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e68e:	e070      	b.n	800e772 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	099b      	lsrs	r3, r3, #6
 800e694:	b2db      	uxtb	r3, r3
 800e696:	f003 0303 	and.w	r3, r3, #3
 800e69a:	b2da      	uxtb	r2, r3
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	095b      	lsrs	r3, r3, #5
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	f003 0301 	and.w	r3, r3, #1
 800e6aa:	b2da      	uxtb	r2, r3
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	0a1b      	lsrs	r3, r3, #8
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	0e1b      	lsrs	r3, r3, #24
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	061a      	lsls	r2, r3, #24
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	021b      	lsls	r3, r3, #8
 800e6d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e6d6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	0a1b      	lsrs	r3, r3, #8
 800e6dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e6e0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	0e1b      	lsrs	r3, r3, #24
 800e6e6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	b2da      	uxtb	r2, r3
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	0a1b      	lsrs	r3, r3, #8
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	0d1b      	lsrs	r3, r3, #20
 800e702:	b2db      	uxtb	r3, r3
 800e704:	f003 030f 	and.w	r3, r3, #15
 800e708:	b2da      	uxtb	r2, r3
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	0c1b      	lsrs	r3, r3, #16
 800e712:	b29b      	uxth	r3, r3
 800e714:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e718:	b29a      	uxth	r2, r3
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	b29b      	uxth	r3, r3
 800e722:	4313      	orrs	r3, r2
 800e724:	b29a      	uxth	r2, r3
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	0a9b      	lsrs	r3, r3, #10
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e734:	b2da      	uxtb	r2, r3
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	0a1b      	lsrs	r3, r3, #8
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	f003 0303 	and.w	r3, r3, #3
 800e744:	b2da      	uxtb	r2, r3
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	091b      	lsrs	r3, r3, #4
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	f003 030f 	and.w	r3, r3, #15
 800e754:	b2da      	uxtb	r2, r3
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	f003 030f 	and.w	r3, r3, #15
 800e762:	b2da      	uxtb	r2, r3
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	0e1b      	lsrs	r3, r3, #24
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e77a:	4618      	mov	r0, r3
 800e77c:	f004 f9e2 	bl	8012b44 <SDMMC_CmdBlockLength>
 800e780:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00d      	beq.n	800e7a4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a08      	ldr	r2, [pc, #32]	; (800e7b0 <HAL_SD_GetCardStatus+0x178>)
 800e78e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e794:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2201      	movs	r2, #1
 800e79a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e7a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3750      	adds	r7, #80	; 0x50
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	1fe00fff 	.word	0x1fe00fff

0800e7b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e80c:	b590      	push	{r4, r7, lr}
 800e80e:	b08d      	sub	sp, #52	; 0x34
 800e810:	af02      	add	r7, sp, #8
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e816:	2300      	movs	r3, #0
 800e818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2203      	movs	r2, #3
 800e820:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e828:	2b03      	cmp	r3, #3
 800e82a:	d02e      	beq.n	800e88a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e832:	d106      	bne.n	800e842 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	635a      	str	r2, [r3, #52]	; 0x34
 800e840:	e029      	b.n	800e896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e848:	d10a      	bne.n	800e860 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 fb64 	bl	800ef18 <SD_WideBus_Enable>
 800e850:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	431a      	orrs	r2, r3
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	635a      	str	r2, [r3, #52]	; 0x34
 800e85e:	e01a      	b.n	800e896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10a      	bne.n	800e87c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f000 fba1 	bl	800efae <SD_WideBus_Disable>
 800e86c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e872:	6a3b      	ldr	r3, [r7, #32]
 800e874:	431a      	orrs	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	635a      	str	r2, [r3, #52]	; 0x34
 800e87a:	e00c      	b.n	800e896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e880:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	635a      	str	r2, [r3, #52]	; 0x34
 800e888:	e005      	b.n	800e896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d007      	beq.n	800e8ae <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a5f      	ldr	r2, [pc, #380]	; (800ea20 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e8a4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8ac:	e096      	b.n	800e9dc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e8ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e8b2:	f04f 0100 	mov.w	r1, #0
 800e8b6:	f7fd fea3 	bl	800c600 <HAL_RCCEx_GetPeriphCLKFreq>
 800e8ba:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	f000 8083 	beq.w	800e9ca <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	689b      	ldr	r3, [r3, #8]
 800e8ce:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	691b      	ldr	r3, [r3, #16]
 800e8d8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	695a      	ldr	r2, [r3, #20]
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	4950      	ldr	r1, [pc, #320]	; (800ea24 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e8e2:	fba1 1303 	umull	r1, r3, r1, r3
 800e8e6:	0e1b      	lsrs	r3, r3, #24
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d303      	bcc.n	800e8f4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	695b      	ldr	r3, [r3, #20]
 800e8f0:	61bb      	str	r3, [r7, #24]
 800e8f2:	e05a      	b.n	800e9aa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8fc:	d103      	bne.n	800e906 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	695b      	ldr	r3, [r3, #20]
 800e902:	61bb      	str	r3, [r7, #24]
 800e904:	e051      	b.n	800e9aa <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e90a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e90e:	d126      	bne.n	800e95e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	695b      	ldr	r3, [r3, #20]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10e      	bne.n	800e936 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	4a43      	ldr	r2, [pc, #268]	; (800ea28 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d906      	bls.n	800e92e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	4a40      	ldr	r2, [pc, #256]	; (800ea24 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e924:	fba2 2303 	umull	r2, r3, r2, r3
 800e928:	0e5b      	lsrs	r3, r3, #25
 800e92a:	61bb      	str	r3, [r7, #24]
 800e92c:	e03d      	b.n	800e9aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	695b      	ldr	r3, [r3, #20]
 800e932:	61bb      	str	r3, [r7, #24]
 800e934:	e039      	b.n	800e9aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	695b      	ldr	r3, [r3, #20]
 800e93a:	005b      	lsls	r3, r3, #1
 800e93c:	69fa      	ldr	r2, [r7, #28]
 800e93e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e942:	4a39      	ldr	r2, [pc, #228]	; (800ea28 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d906      	bls.n	800e956 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	4a36      	ldr	r2, [pc, #216]	; (800ea24 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e94c:	fba2 2303 	umull	r2, r3, r2, r3
 800e950:	0e5b      	lsrs	r3, r3, #25
 800e952:	61bb      	str	r3, [r7, #24]
 800e954:	e029      	b.n	800e9aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	695b      	ldr	r3, [r3, #20]
 800e95a:	61bb      	str	r3, [r7, #24]
 800e95c:	e025      	b.n	800e9aa <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	695b      	ldr	r3, [r3, #20]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d10e      	bne.n	800e984 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	4a30      	ldr	r2, [pc, #192]	; (800ea2c <HAL_SD_ConfigWideBusOperation+0x220>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d906      	bls.n	800e97c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	4a2c      	ldr	r2, [pc, #176]	; (800ea24 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e972:	fba2 2303 	umull	r2, r3, r2, r3
 800e976:	0e1b      	lsrs	r3, r3, #24
 800e978:	61bb      	str	r3, [r7, #24]
 800e97a:	e016      	b.n	800e9aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	695b      	ldr	r3, [r3, #20]
 800e980:	61bb      	str	r3, [r7, #24]
 800e982:	e012      	b.n	800e9aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	695b      	ldr	r3, [r3, #20]
 800e988:	005b      	lsls	r3, r3, #1
 800e98a:	69fa      	ldr	r2, [r7, #28]
 800e98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e990:	4a26      	ldr	r2, [pc, #152]	; (800ea2c <HAL_SD_ConfigWideBusOperation+0x220>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d906      	bls.n	800e9a4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	4a22      	ldr	r2, [pc, #136]	; (800ea24 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e99a:	fba2 2303 	umull	r2, r3, r2, r3
 800e99e:	0e1b      	lsrs	r3, r3, #24
 800e9a0:	61bb      	str	r3, [r7, #24]
 800e9a2:	e002      	b.n	800e9aa <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	695b      	ldr	r3, [r3, #20]
 800e9a8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681c      	ldr	r4, [r3, #0]
 800e9ae:	466a      	mov	r2, sp
 800e9b0:	f107 0314 	add.w	r3, r7, #20
 800e9b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e9b8:	e882 0003 	stmia.w	r2, {r0, r1}
 800e9bc:	f107 0308 	add.w	r3, r7, #8
 800e9c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f003 ffe0 	bl	8012988 <SDMMC_Init>
 800e9c8:	e008      	b.n	800e9dc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f004 f8ad 	bl	8012b44 <SDMMC_CmdBlockLength>
 800e9ea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00c      	beq.n	800ea0c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a0a      	ldr	r2, [pc, #40]	; (800ea20 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e9f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9fe:	6a3b      	ldr	r3, [r7, #32]
 800ea00:	431a      	orrs	r2, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ea06:	2301      	movs	r3, #1
 800ea08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2201      	movs	r2, #1
 800ea10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ea14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	372c      	adds	r7, #44	; 0x2c
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd90      	pop	{r4, r7, pc}
 800ea20:	1fe00fff 	.word	0x1fe00fff
 800ea24:	55e63b89 	.word	0x55e63b89
 800ea28:	02faf080 	.word	0x02faf080
 800ea2c:	017d7840 	.word	0x017d7840

0800ea30 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ea3c:	f107 030c 	add.w	r3, r7, #12
 800ea40:	4619      	mov	r1, r3
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 fa40 	bl	800eec8 <SD_SendStatus>
 800ea48:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d005      	beq.n	800ea5c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	431a      	orrs	r2, r3
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	0a5b      	lsrs	r3, r3, #9
 800ea60:	f003 030f 	and.w	r3, r3, #15
 800ea64:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ea66:	693b      	ldr	r3, [r7, #16]
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3718      	adds	r7, #24
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b090      	sub	sp, #64	; 0x40
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ea7c:	f7f5 f8e8 	bl	8003c50 <HAL_GetTick>
 800ea80:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4618      	mov	r0, r3
 800ea88:	f003 ffd7 	bl	8012a3a <SDMMC_GetPowerState>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d102      	bne.n	800ea98 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ea96:	e0b5      	b.n	800ec04 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea9c:	2b03      	cmp	r3, #3
 800ea9e:	d02e      	beq.n	800eafe <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f004 fa22 	bl	8012eee <SDMMC_CmdSendCID>
 800eaaa:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800eaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d001      	beq.n	800eab6 <SD_InitCard+0x46>
    {
      return errorstate;
 800eab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab4:	e0a6      	b.n	800ec04 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	2100      	movs	r1, #0
 800eabc:	4618      	mov	r0, r3
 800eabe:	f004 f802 	bl	8012ac6 <SDMMC_GetResponse>
 800eac2:	4602      	mov	r2, r0
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2104      	movs	r1, #4
 800eace:	4618      	mov	r0, r3
 800ead0:	f003 fff9 	bl	8012ac6 <SDMMC_GetResponse>
 800ead4:	4602      	mov	r2, r0
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2108      	movs	r1, #8
 800eae0:	4618      	mov	r0, r3
 800eae2:	f003 fff0 	bl	8012ac6 <SDMMC_GetResponse>
 800eae6:	4602      	mov	r2, r0
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	210c      	movs	r1, #12
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f003 ffe7 	bl	8012ac6 <SDMMC_GetResponse>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb02:	2b03      	cmp	r3, #3
 800eb04:	d01d      	beq.n	800eb42 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800eb06:	e019      	b.n	800eb3c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f107 020a 	add.w	r2, r7, #10
 800eb10:	4611      	mov	r1, r2
 800eb12:	4618      	mov	r0, r3
 800eb14:	f004 fa2a 	bl	8012f6c <SDMMC_CmdSetRelAdd>
 800eb18:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800eb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d001      	beq.n	800eb24 <SD_InitCard+0xb4>
      {
        return errorstate;
 800eb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb22:	e06f      	b.n	800ec04 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800eb24:	f7f5 f894 	bl	8003c50 <HAL_GetTick>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	f241 3287 	movw	r2, #4999	; 0x1387
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d902      	bls.n	800eb3c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800eb36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb3a:	e063      	b.n	800ec04 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800eb3c:	897b      	ldrh	r3, [r7, #10]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d0e2      	beq.n	800eb08 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb46:	2b03      	cmp	r3, #3
 800eb48:	d036      	beq.n	800ebb8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800eb4a:	897b      	ldrh	r3, [r7, #10]
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb5a:	041b      	lsls	r3, r3, #16
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	4610      	mov	r0, r2
 800eb60:	f004 f9e4 	bl	8012f2c <SDMMC_CmdSendCSD>
 800eb64:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d001      	beq.n	800eb70 <SD_InitCard+0x100>
    {
      return errorstate;
 800eb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6e:	e049      	b.n	800ec04 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	2100      	movs	r1, #0
 800eb76:	4618      	mov	r0, r3
 800eb78:	f003 ffa5 	bl	8012ac6 <SDMMC_GetResponse>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2104      	movs	r1, #4
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f003 ff9c 	bl	8012ac6 <SDMMC_GetResponse>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2108      	movs	r1, #8
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f003 ff93 	bl	8012ac6 <SDMMC_GetResponse>
 800eba0:	4602      	mov	r2, r0
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	210c      	movs	r1, #12
 800ebac:	4618      	mov	r0, r3
 800ebae:	f003 ff8a 	bl	8012ac6 <SDMMC_GetResponse>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2104      	movs	r1, #4
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f003 ff81 	bl	8012ac6 <SDMMC_GetResponse>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	0d1a      	lsrs	r2, r3, #20
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ebcc:	f107 030c 	add.w	r3, r7, #12
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7ff fb8c 	bl	800e2f0 <HAL_SD_GetCardCSD>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d002      	beq.n	800ebe4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ebde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ebe2:	e00f      	b.n	800ec04 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebec:	041b      	lsls	r3, r3, #16
 800ebee:	4619      	mov	r1, r3
 800ebf0:	4610      	mov	r0, r2
 800ebf2:	f004 f893 	bl	8012d1c <SDMMC_CmdSelDesel>
 800ebf6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d001      	beq.n	800ec02 <SD_InitCard+0x192>
  {
    return errorstate;
 800ebfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec00:	e000      	b.n	800ec04 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ec02:	2300      	movs	r3, #0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3740      	adds	r7, #64	; 0x40
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b086      	sub	sp, #24
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ec14:	2300      	movs	r3, #0
 800ec16:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f004 f89c 	bl	8012d62 <SDMMC_CmdGoIdleState>
 800ec2a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d001      	beq.n	800ec36 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	e072      	b.n	800ed1c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f004 f8af 	bl	8012d9e <SDMMC_CmdOperCond>
 800ec40:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec48:	d10d      	bne.n	800ec66 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4618      	mov	r0, r3
 800ec56:	f004 f884 	bl	8012d62 <SDMMC_CmdGoIdleState>
 800ec5a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d004      	beq.n	800ec6c <SD_PowerON+0x60>
    {
      return errorstate;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	e05a      	b.n	800ed1c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d137      	bne.n	800ece4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2100      	movs	r1, #0
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f004 f8af 	bl	8012dde <SDMMC_CmdAppCommand>
 800ec80:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d02d      	beq.n	800ece4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ec88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ec8c:	e046      	b.n	800ed1c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2100      	movs	r1, #0
 800ec94:	4618      	mov	r0, r3
 800ec96:	f004 f8a2 	bl	8012dde <SDMMC_CmdAppCommand>
 800ec9a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d001      	beq.n	800eca6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	e03a      	b.n	800ed1c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	491e      	ldr	r1, [pc, #120]	; (800ed24 <SD_PowerON+0x118>)
 800ecac:	4618      	mov	r0, r3
 800ecae:	f004 f8b9 	bl	8012e24 <SDMMC_CmdAppOperCommand>
 800ecb2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d002      	beq.n	800ecc0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ecba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ecbe:	e02d      	b.n	800ed1c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f003 fefd 	bl	8012ac6 <SDMMC_GetResponse>
 800eccc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	0fdb      	lsrs	r3, r3, #31
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d101      	bne.n	800ecda <SD_PowerON+0xce>
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	e000      	b.n	800ecdc <SD_PowerON+0xd0>
 800ecda:	2300      	movs	r3, #0
 800ecdc:	613b      	str	r3, [r7, #16]

    count++;
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	3301      	adds	r3, #1
 800ece2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d802      	bhi.n	800ecf4 <SD_PowerON+0xe8>
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d0cc      	beq.n	800ec8e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d902      	bls.n	800ed04 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ecfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ed02:	e00b      	b.n	800ed1c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d002      	beq.n	800ed1a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2201      	movs	r2, #1
 800ed18:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800ed1a:	2300      	movs	r3, #0
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3718      	adds	r7, #24
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	c1100000 	.word	0xc1100000

0800ed28 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b08c      	sub	sp, #48	; 0x30
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ed32:	f7f4 ff8d 	bl	8003c50 <HAL_GetTick>
 800ed36:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2100      	movs	r1, #0
 800ed42:	4618      	mov	r0, r3
 800ed44:	f003 febf 	bl	8012ac6 <SDMMC_GetResponse>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed52:	d102      	bne.n	800ed5a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ed54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed58:	e0b0      	b.n	800eebc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	2140      	movs	r1, #64	; 0x40
 800ed60:	4618      	mov	r0, r3
 800ed62:	f003 feef 	bl	8012b44 <SDMMC_CmdBlockLength>
 800ed66:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed68:	6a3b      	ldr	r3, [r7, #32]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d005      	beq.n	800ed7a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ed76:	6a3b      	ldr	r3, [r7, #32]
 800ed78:	e0a0      	b.n	800eebc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed82:	041b      	lsls	r3, r3, #16
 800ed84:	4619      	mov	r1, r3
 800ed86:	4610      	mov	r0, r2
 800ed88:	f004 f829 	bl	8012dde <SDMMC_CmdAppCommand>
 800ed8c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed8e:	6a3b      	ldr	r3, [r7, #32]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d005      	beq.n	800eda0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ed9c:	6a3b      	ldr	r3, [r7, #32]
 800ed9e:	e08d      	b.n	800eebc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eda0:	f04f 33ff 	mov.w	r3, #4294967295
 800eda4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800eda6:	2340      	movs	r3, #64	; 0x40
 800eda8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800edaa:	2360      	movs	r3, #96	; 0x60
 800edac:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800edae:	2302      	movs	r3, #2
 800edb0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800edb2:	2300      	movs	r3, #0
 800edb4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800edb6:	2301      	movs	r3, #1
 800edb8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f107 0208 	add.w	r2, r7, #8
 800edc2:	4611      	mov	r1, r2
 800edc4:	4618      	mov	r0, r3
 800edc6:	f003 fe91 	bl	8012aec <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4618      	mov	r0, r3
 800edd0:	f004 f911 	bl	8012ff6 <SDMMC_CmdStatusRegister>
 800edd4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800edd6:	6a3b      	ldr	r3, [r7, #32]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d02b      	beq.n	800ee34 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ede4:	6a3b      	ldr	r3, [r7, #32]
 800ede6:	e069      	b.n	800eebc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d013      	beq.n	800ee1e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800edf6:	2300      	movs	r3, #0
 800edf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edfa:	e00d      	b.n	800ee18 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4618      	mov	r0, r3
 800ee02:	f003 fdeb 	bl	80129dc <SDMMC_ReadFIFO>
 800ee06:	4602      	mov	r2, r0
 800ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0a:	601a      	str	r2, [r3, #0]
        pData++;
 800ee0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0e:	3304      	adds	r3, #4
 800ee10:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee14:	3301      	adds	r3, #1
 800ee16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1a:	2b07      	cmp	r3, #7
 800ee1c:	d9ee      	bls.n	800edfc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ee1e:	f7f4 ff17 	bl	8003c50 <HAL_GetTick>
 800ee22:	4602      	mov	r2, r0
 800ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee26:	1ad3      	subs	r3, r2, r3
 800ee28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee2c:	d102      	bne.n	800ee34 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ee2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee32:	e043      	b.n	800eebc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee3a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d0d2      	beq.n	800ede8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee48:	f003 0308 	and.w	r3, r3, #8
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d001      	beq.n	800ee54 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ee50:	2308      	movs	r3, #8
 800ee52:	e033      	b.n	800eebc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee5a:	f003 0302 	and.w	r3, r3, #2
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d001      	beq.n	800ee66 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ee62:	2302      	movs	r3, #2
 800ee64:	e02a      	b.n	800eebc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee6c:	f003 0320 	and.w	r3, r3, #32
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d017      	beq.n	800eea4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ee74:	2320      	movs	r3, #32
 800ee76:	e021      	b.n	800eebc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f003 fdad 	bl	80129dc <SDMMC_ReadFIFO>
 800ee82:	4602      	mov	r2, r0
 800ee84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee86:	601a      	str	r2, [r3, #0]
    pData++;
 800ee88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8a:	3304      	adds	r3, #4
 800ee8c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ee8e:	f7f4 fedf 	bl	8003c50 <HAL_GetTick>
 800ee92:	4602      	mov	r2, r0
 800ee94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee96:	1ad3      	subs	r3, r2, r3
 800ee98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee9c:	d102      	bne.n	800eea4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ee9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eea2:	e00b      	b.n	800eebc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d1e2      	bne.n	800ee78 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a03      	ldr	r2, [pc, #12]	; (800eec4 <SD_SendSDStatus+0x19c>)
 800eeb8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800eeba:	2300      	movs	r3, #0
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3730      	adds	r7, #48	; 0x30
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}
 800eec4:	18000f3a 	.word	0x18000f3a

0800eec8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d102      	bne.n	800eede <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800eed8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eedc:	e018      	b.n	800ef10 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eee6:	041b      	lsls	r3, r3, #16
 800eee8:	4619      	mov	r1, r3
 800eeea:	4610      	mov	r0, r2
 800eeec:	f004 f860 	bl	8012fb0 <SDMMC_CmdSendStatus>
 800eef0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d001      	beq.n	800eefc <SD_SendStatus+0x34>
  {
    return errorstate;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	e009      	b.n	800ef10 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2100      	movs	r1, #0
 800ef02:	4618      	mov	r0, r3
 800ef04:	f003 fddf 	bl	8012ac6 <SDMMC_GetResponse>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b086      	sub	sp, #24
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ef20:	2300      	movs	r3, #0
 800ef22:	60fb      	str	r3, [r7, #12]
 800ef24:	2300      	movs	r3, #0
 800ef26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f003 fdc9 	bl	8012ac6 <SDMMC_GetResponse>
 800ef34:	4603      	mov	r3, r0
 800ef36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef3e:	d102      	bne.n	800ef46 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ef40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef44:	e02f      	b.n	800efa6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ef46:	f107 030c 	add.w	r3, r7, #12
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 f879 	bl	800f044 <SD_FindSCR>
 800ef52:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d001      	beq.n	800ef5e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	e023      	b.n	800efa6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d01c      	beq.n	800efa2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef70:	041b      	lsls	r3, r3, #16
 800ef72:	4619      	mov	r1, r3
 800ef74:	4610      	mov	r0, r2
 800ef76:	f003 ff32 	bl	8012dde <SDMMC_CmdAppCommand>
 800ef7a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d001      	beq.n	800ef86 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	e00f      	b.n	800efa6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2102      	movs	r1, #2
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f003 ff69 	bl	8012e64 <SDMMC_CmdBusWidth>
 800ef92:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	e003      	b.n	800efa6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	e001      	b.n	800efa6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800efa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3718      	adds	r7, #24
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}

0800efae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800efae:	b580      	push	{r7, lr}
 800efb0:	b086      	sub	sp, #24
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800efb6:	2300      	movs	r3, #0
 800efb8:	60fb      	str	r3, [r7, #12]
 800efba:	2300      	movs	r3, #0
 800efbc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	2100      	movs	r1, #0
 800efc4:	4618      	mov	r0, r3
 800efc6:	f003 fd7e 	bl	8012ac6 <SDMMC_GetResponse>
 800efca:	4603      	mov	r3, r0
 800efcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800efd4:	d102      	bne.n	800efdc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800efd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800efda:	e02f      	b.n	800f03c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800efdc:	f107 030c 	add.w	r3, r7, #12
 800efe0:	4619      	mov	r1, r3
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 f82e 	bl	800f044 <SD_FindSCR>
 800efe8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d001      	beq.n	800eff4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	e023      	b.n	800f03c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800effa:	2b00      	cmp	r3, #0
 800effc:	d01c      	beq.n	800f038 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f006:	041b      	lsls	r3, r3, #16
 800f008:	4619      	mov	r1, r3
 800f00a:	4610      	mov	r0, r2
 800f00c:	f003 fee7 	bl	8012dde <SDMMC_CmdAppCommand>
 800f010:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d001      	beq.n	800f01c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	e00f      	b.n	800f03c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2100      	movs	r1, #0
 800f022:	4618      	mov	r0, r3
 800f024:	f003 ff1e 	bl	8012e64 <SDMMC_CmdBusWidth>
 800f028:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d001      	beq.n	800f034 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	e003      	b.n	800f03c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f034:	2300      	movs	r3, #0
 800f036:	e001      	b.n	800f03c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f038:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3718      	adds	r7, #24
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b08e      	sub	sp, #56	; 0x38
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f04e:	f7f4 fdff 	bl	8003c50 <HAL_GetTick>
 800f052:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f054:	2300      	movs	r3, #0
 800f056:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f058:	2300      	movs	r3, #0
 800f05a:	60bb      	str	r3, [r7, #8]
 800f05c:	2300      	movs	r3, #0
 800f05e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2108      	movs	r1, #8
 800f06a:	4618      	mov	r0, r3
 800f06c:	f003 fd6a 	bl	8012b44 <SDMMC_CmdBlockLength>
 800f070:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f074:	2b00      	cmp	r3, #0
 800f076:	d001      	beq.n	800f07c <SD_FindSCR+0x38>
  {
    return errorstate;
 800f078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07a:	e0ad      	b.n	800f1d8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681a      	ldr	r2, [r3, #0]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f084:	041b      	lsls	r3, r3, #16
 800f086:	4619      	mov	r1, r3
 800f088:	4610      	mov	r0, r2
 800f08a:	f003 fea8 	bl	8012dde <SDMMC_CmdAppCommand>
 800f08e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f092:	2b00      	cmp	r3, #0
 800f094:	d001      	beq.n	800f09a <SD_FindSCR+0x56>
  {
    return errorstate;
 800f096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f098:	e09e      	b.n	800f1d8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f09a:	f04f 33ff 	mov.w	r3, #4294967295
 800f09e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f0a0:	2308      	movs	r3, #8
 800f0a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f0a4:	2330      	movs	r3, #48	; 0x30
 800f0a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f0a8:	2302      	movs	r3, #2
 800f0aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f107 0210 	add.w	r2, r7, #16
 800f0bc:	4611      	mov	r1, r2
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f003 fd14 	bl	8012aec <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f003 feee 	bl	8012eaa <SDMMC_CmdSendSCR>
 800f0ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d027      	beq.n	800f126 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d8:	e07e      	b.n	800f1d8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d113      	bne.n	800f110 <SD_FindSCR+0xcc>
 800f0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d110      	bne.n	800f110 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f003 fc72 	bl	80129dc <SDMMC_ReadFIFO>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4618      	mov	r0, r3
 800f102:	f003 fc6b 	bl	80129dc <SDMMC_ReadFIFO>
 800f106:	4603      	mov	r3, r0
 800f108:	60fb      	str	r3, [r7, #12]
      index++;
 800f10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f10c:	3301      	adds	r3, #1
 800f10e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f110:	f7f4 fd9e 	bl	8003c50 <HAL_GetTick>
 800f114:	4602      	mov	r2, r0
 800f116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f11e:	d102      	bne.n	800f126 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f120:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f124:	e058      	b.n	800f1d8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f12c:	f240 532a 	movw	r3, #1322	; 0x52a
 800f130:	4013      	ands	r3, r2
 800f132:	2b00      	cmp	r3, #0
 800f134:	d0d1      	beq.n	800f0da <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f13c:	f003 0308 	and.w	r3, r3, #8
 800f140:	2b00      	cmp	r3, #0
 800f142:	d005      	beq.n	800f150 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2208      	movs	r2, #8
 800f14a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f14c:	2308      	movs	r3, #8
 800f14e:	e043      	b.n	800f1d8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f156:	f003 0302 	and.w	r3, r3, #2
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d005      	beq.n	800f16a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2202      	movs	r2, #2
 800f164:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f166:	2302      	movs	r3, #2
 800f168:	e036      	b.n	800f1d8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f170:	f003 0320 	and.w	r3, r3, #32
 800f174:	2b00      	cmp	r3, #0
 800f176:	d005      	beq.n	800f184 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	2220      	movs	r2, #32
 800f17e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f180:	2320      	movs	r3, #32
 800f182:	e029      	b.n	800f1d8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a15      	ldr	r2, [pc, #84]	; (800f1e0 <SD_FindSCR+0x19c>)
 800f18a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	061a      	lsls	r2, r3, #24
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	021b      	lsls	r3, r3, #8
 800f194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f198:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	0a1b      	lsrs	r3, r3, #8
 800f19e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f1a2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	0e1b      	lsrs	r3, r3, #24
 800f1a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ac:	601a      	str	r2, [r3, #0]
    scr++;
 800f1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b0:	3304      	adds	r3, #4
 800f1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	061a      	lsls	r2, r3, #24
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	021b      	lsls	r3, r3, #8
 800f1bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f1c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	0a1b      	lsrs	r3, r3, #8
 800f1c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f1ca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	0e1b      	lsrs	r3, r3, #24
 800f1d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3738      	adds	r7, #56	; 0x38
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	18000f3a 	.word	0x18000f3a

0800f1e4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b086      	sub	sp, #24
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1f6:	2b1f      	cmp	r3, #31
 800f1f8:	d936      	bls.n	800f268 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	617b      	str	r3, [r7, #20]
 800f1fe:	e027      	b.n	800f250 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4618      	mov	r0, r3
 800f206:	f003 fbe9 	bl	80129dc <SDMMC_ReadFIFO>
 800f20a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	3301      	adds	r3, #1
 800f218:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	0a1b      	lsrs	r3, r3, #8
 800f21e:	b2da      	uxtb	r2, r3
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	3301      	adds	r3, #1
 800f228:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	0c1b      	lsrs	r3, r3, #16
 800f22e:	b2da      	uxtb	r2, r3
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	3301      	adds	r3, #1
 800f238:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	0e1b      	lsrs	r3, r3, #24
 800f23e:	b2da      	uxtb	r2, r3
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	3301      	adds	r3, #1
 800f248:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	3301      	adds	r3, #1
 800f24e:	617b      	str	r3, [r7, #20]
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	2b07      	cmp	r3, #7
 800f254:	d9d4      	bls.n	800f200 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	693a      	ldr	r2, [r7, #16]
 800f25a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f260:	f1a3 0220 	sub.w	r2, r3, #32
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800f268:	bf00      	nop
 800f26a:	3718      	adds	r7, #24
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b086      	sub	sp, #24
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	69db      	ldr	r3, [r3, #28]
 800f27c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6a1b      	ldr	r3, [r3, #32]
 800f282:	2b1f      	cmp	r3, #31
 800f284:	d93a      	bls.n	800f2fc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800f286:	2300      	movs	r3, #0
 800f288:	617b      	str	r3, [r7, #20]
 800f28a:	e02b      	b.n	800f2e4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	3301      	adds	r3, #1
 800f296:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	021a      	lsls	r2, r3, #8
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	041a      	lsls	r2, r3, #16
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	3301      	adds	r3, #1
 800f2ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	061a      	lsls	r2, r3, #24
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f107 020c 	add.w	r2, r7, #12
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f003 fb8c 	bl	80129f6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	617b      	str	r3, [r7, #20]
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	2b07      	cmp	r3, #7
 800f2e8:	d9d0      	bls.n	800f28c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	693a      	ldr	r2, [r7, #16]
 800f2ee:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6a1b      	ldr	r3, [r3, #32]
 800f2f4:	f1a3 0220 	sub.w	r2, r3, #32
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	621a      	str	r2, [r3, #32]
  }
}
 800f2fc:	bf00      	nop
 800f2fe:	3718      	adds	r7, #24
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f30c:	bf00      	nop
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr

0800f318 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f320:	bf00      	nop
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f334:	bf00      	nop
 800f336:	370c      	adds	r7, #12
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f340:	b480      	push	{r7}
 800f342:	b083      	sub	sp, #12
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f348:	bf00      	nop
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d101      	bne.n	800f366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f362:	2301      	movs	r3, #1
 800f364:	e10f      	b.n	800f586 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a87      	ldr	r2, [pc, #540]	; (800f590 <HAL_SPI_Init+0x23c>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d00f      	beq.n	800f396 <HAL_SPI_Init+0x42>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4a86      	ldr	r2, [pc, #536]	; (800f594 <HAL_SPI_Init+0x240>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d00a      	beq.n	800f396 <HAL_SPI_Init+0x42>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a84      	ldr	r2, [pc, #528]	; (800f598 <HAL_SPI_Init+0x244>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d005      	beq.n	800f396 <HAL_SPI_Init+0x42>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	2b0f      	cmp	r3, #15
 800f390:	d901      	bls.n	800f396 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f392:	2301      	movs	r3, #1
 800f394:	e0f7      	b.n	800f586 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f000 fd5a 	bl	800fe50 <SPI_GetPacketSize>
 800f39c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4a7b      	ldr	r2, [pc, #492]	; (800f590 <HAL_SPI_Init+0x23c>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d00c      	beq.n	800f3c2 <HAL_SPI_Init+0x6e>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a79      	ldr	r2, [pc, #484]	; (800f594 <HAL_SPI_Init+0x240>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d007      	beq.n	800f3c2 <HAL_SPI_Init+0x6e>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4a78      	ldr	r2, [pc, #480]	; (800f598 <HAL_SPI_Init+0x244>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d002      	beq.n	800f3c2 <HAL_SPI_Init+0x6e>
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2b08      	cmp	r3, #8
 800f3c0:	d811      	bhi.n	800f3e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f3c6:	4a72      	ldr	r2, [pc, #456]	; (800f590 <HAL_SPI_Init+0x23c>)
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d009      	beq.n	800f3e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	4a70      	ldr	r2, [pc, #448]	; (800f594 <HAL_SPI_Init+0x240>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d004      	beq.n	800f3e0 <HAL_SPI_Init+0x8c>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4a6f      	ldr	r2, [pc, #444]	; (800f598 <HAL_SPI_Init+0x244>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d104      	bne.n	800f3ea <HAL_SPI_Init+0x96>
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2b10      	cmp	r3, #16
 800f3e4:	d901      	bls.n	800f3ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	e0cd      	b.n	800f586 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d106      	bne.n	800f404 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7f3 fe26 	bl	8003050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2202      	movs	r2, #2
 800f408:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f022 0201 	bic.w	r2, r2, #1
 800f41a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f426:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	699b      	ldr	r3, [r3, #24]
 800f42c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f430:	d119      	bne.n	800f466 <HAL_SPI_Init+0x112>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f43a:	d103      	bne.n	800f444 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f440:	2b00      	cmp	r3, #0
 800f442:	d008      	beq.n	800f456 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d10c      	bne.n	800f466 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f454:	d107      	bne.n	800f466 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f464:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00f      	beq.n	800f492 <HAL_SPI_Init+0x13e>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	2b06      	cmp	r3, #6
 800f478:	d90b      	bls.n	800f492 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	430a      	orrs	r2, r1
 800f48e:	601a      	str	r2, [r3, #0]
 800f490:	e007      	b.n	800f4a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	681a      	ldr	r2, [r3, #0]
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f4a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	69da      	ldr	r2, [r3, #28]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4aa:	431a      	orrs	r2, r3
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	431a      	orrs	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4b4:	ea42 0103 	orr.w	r1, r2, r3
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	68da      	ldr	r2, [r3, #12]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	430a      	orrs	r2, r1
 800f4c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4cc:	431a      	orrs	r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d2:	431a      	orrs	r2, r3
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	699b      	ldr	r3, [r3, #24]
 800f4d8:	431a      	orrs	r2, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	691b      	ldr	r3, [r3, #16]
 800f4de:	431a      	orrs	r2, r3
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	695b      	ldr	r3, [r3, #20]
 800f4e4:	431a      	orrs	r2, r3
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6a1b      	ldr	r3, [r3, #32]
 800f4ea:	431a      	orrs	r2, r3
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	431a      	orrs	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4f6:	431a      	orrs	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	689b      	ldr	r3, [r3, #8]
 800f4fc:	431a      	orrs	r2, r3
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f502:	ea42 0103 	orr.w	r1, r2, r3
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	430a      	orrs	r2, r1
 800f510:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d113      	bne.n	800f542 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f52c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	689b      	ldr	r3, [r3, #8]
 800f534:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f540:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f022 0201 	bic.w	r2, r2, #1
 800f550:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d00a      	beq.n	800f574 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	430a      	orrs	r2, r1
 800f572:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	40013000 	.word	0x40013000
 800f594:	40003800 	.word	0x40003800
 800f598:	40003c00 	.word	0x40003c00

0800f59c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b08a      	sub	sp, #40	; 0x28
 800f5a0:	af02      	add	r7, sp, #8
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	603b      	str	r3, [r7, #0]
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	3320      	adds	r3, #32
 800f5b2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d101      	bne.n	800f5c6 <HAL_SPI_Transmit+0x2a>
 800f5c2:	2302      	movs	r3, #2
 800f5c4:	e1e1      	b.n	800f98a <HAL_SPI_Transmit+0x3ee>
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f5ce:	f7f4 fb3f 	bl	8003c50 <HAL_GetTick>
 800f5d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d007      	beq.n	800f5f0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f5ec:	7efb      	ldrb	r3, [r7, #27]
 800f5ee:	e1cc      	b.n	800f98a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d002      	beq.n	800f5fc <HAL_SPI_Transmit+0x60>
 800f5f6:	88fb      	ldrh	r3, [r7, #6]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d107      	bne.n	800f60c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2200      	movs	r2, #0
 800f604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f608:	7efb      	ldrb	r3, [r7, #27]
 800f60a:	e1be      	b.n	800f98a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	2203      	movs	r2, #3
 800f610:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2200      	movs	r2, #0
 800f618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	68ba      	ldr	r2, [r7, #8]
 800f620:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	88fa      	ldrh	r2, [r7, #6]
 800f626:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	88fa      	ldrh	r2, [r7, #6]
 800f62e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2200      	movs	r2, #0
 800f636:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	2200      	movs	r2, #0
 800f644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2200      	movs	r2, #0
 800f64c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2200      	movs	r2, #0
 800f652:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f65c:	d108      	bne.n	800f670 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f66c:	601a      	str	r2, [r3, #0]
 800f66e:	e009      	b.n	800f684 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	68db      	ldr	r3, [r3, #12]
 800f676:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f682:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	685a      	ldr	r2, [r3, #4]
 800f68a:	4b96      	ldr	r3, [pc, #600]	; (800f8e4 <HAL_SPI_Transmit+0x348>)
 800f68c:	4013      	ands	r3, r2
 800f68e:	88f9      	ldrh	r1, [r7, #6]
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	6812      	ldr	r2, [r2, #0]
 800f694:	430b      	orrs	r3, r1
 800f696:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f042 0201 	orr.w	r2, r2, #1
 800f6a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f6b0:	d107      	bne.n	800f6c2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f6c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	2b0f      	cmp	r3, #15
 800f6c8:	d947      	bls.n	800f75a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f6ca:	e03f      	b.n	800f74c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	f003 0302 	and.w	r3, r3, #2
 800f6d6:	2b02      	cmp	r3, #2
 800f6d8:	d114      	bne.n	800f704 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	6812      	ldr	r2, [r2, #0]
 800f6e4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6ea:	1d1a      	adds	r2, r3, #4
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f702:	e023      	b.n	800f74c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f704:	f7f4 faa4 	bl	8003c50 <HAL_GetTick>
 800f708:	4602      	mov	r2, r0
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	1ad3      	subs	r3, r2, r3
 800f70e:	683a      	ldr	r2, [r7, #0]
 800f710:	429a      	cmp	r2, r3
 800f712:	d803      	bhi.n	800f71c <HAL_SPI_Transmit+0x180>
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f71a:	d102      	bne.n	800f722 <HAL_SPI_Transmit+0x186>
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d114      	bne.n	800f74c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f722:	68f8      	ldr	r0, [r7, #12]
 800f724:	f000 fac6 	bl	800fcb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2200      	movs	r2, #0
 800f72c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f736:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2201      	movs	r2, #1
 800f744:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f748:	2303      	movs	r3, #3
 800f74a:	e11e      	b.n	800f98a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f752:	b29b      	uxth	r3, r3
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1b9      	bne.n	800f6cc <HAL_SPI_Transmit+0x130>
 800f758:	e0f1      	b.n	800f93e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	2b07      	cmp	r3, #7
 800f760:	f240 80e6 	bls.w	800f930 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f764:	e05d      	b.n	800f822 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	695b      	ldr	r3, [r3, #20]
 800f76c:	f003 0302 	and.w	r3, r3, #2
 800f770:	2b02      	cmp	r3, #2
 800f772:	d132      	bne.n	800f7da <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d918      	bls.n	800f7b2 <HAL_SPI_Transmit+0x216>
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f784:	2b00      	cmp	r3, #0
 800f786:	d014      	beq.n	800f7b2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	6812      	ldr	r2, [r2, #0]
 800f792:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f798:	1d1a      	adds	r2, r3, #4
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	3b02      	subs	r3, #2
 800f7a8:	b29a      	uxth	r2, r3
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f7b0:	e037      	b.n	800f822 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7b6:	881a      	ldrh	r2, [r3, #0]
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7c0:	1c9a      	adds	r2, r3, #2
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	3b01      	subs	r3, #1
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f7d8:	e023      	b.n	800f822 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7da:	f7f4 fa39 	bl	8003c50 <HAL_GetTick>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	1ad3      	subs	r3, r2, r3
 800f7e4:	683a      	ldr	r2, [r7, #0]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d803      	bhi.n	800f7f2 <HAL_SPI_Transmit+0x256>
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f0:	d102      	bne.n	800f7f8 <HAL_SPI_Transmit+0x25c>
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d114      	bne.n	800f822 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f000 fa5b 	bl	800fcb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2200      	movs	r2, #0
 800f802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f80c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2201      	movs	r2, #1
 800f81a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f81e:	2303      	movs	r3, #3
 800f820:	e0b3      	b.n	800f98a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f828:	b29b      	uxth	r3, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d19b      	bne.n	800f766 <HAL_SPI_Transmit+0x1ca>
 800f82e:	e086      	b.n	800f93e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	695b      	ldr	r3, [r3, #20]
 800f836:	f003 0302 	and.w	r3, r3, #2
 800f83a:	2b02      	cmp	r3, #2
 800f83c:	d154      	bne.n	800f8e8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f844:	b29b      	uxth	r3, r3
 800f846:	2b03      	cmp	r3, #3
 800f848:	d918      	bls.n	800f87c <HAL_SPI_Transmit+0x2e0>
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f84e:	2b40      	cmp	r3, #64	; 0x40
 800f850:	d914      	bls.n	800f87c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	6812      	ldr	r2, [r2, #0]
 800f85c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f862:	1d1a      	adds	r2, r3, #4
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f86e:	b29b      	uxth	r3, r3
 800f870:	3b04      	subs	r3, #4
 800f872:	b29a      	uxth	r2, r3
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f87a:	e059      	b.n	800f930 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f882:	b29b      	uxth	r3, r3
 800f884:	2b01      	cmp	r3, #1
 800f886:	d917      	bls.n	800f8b8 <HAL_SPI_Transmit+0x31c>
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d013      	beq.n	800f8b8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f894:	881a      	ldrh	r2, [r3, #0]
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f89e:	1c9a      	adds	r2, r3, #2
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	3b02      	subs	r3, #2
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f8b6:	e03b      	b.n	800f930 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	3320      	adds	r3, #32
 800f8c2:	7812      	ldrb	r2, [r2, #0]
 800f8c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8ca:	1c5a      	adds	r2, r3, #1
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f8e2:	e025      	b.n	800f930 <HAL_SPI_Transmit+0x394>
 800f8e4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f8e8:	f7f4 f9b2 	bl	8003c50 <HAL_GetTick>
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	1ad3      	subs	r3, r2, r3
 800f8f2:	683a      	ldr	r2, [r7, #0]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d803      	bhi.n	800f900 <HAL_SPI_Transmit+0x364>
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8fe:	d102      	bne.n	800f906 <HAL_SPI_Transmit+0x36a>
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d114      	bne.n	800f930 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f906:	68f8      	ldr	r0, [r7, #12]
 800f908:	f000 f9d4 	bl	800fcb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2200      	movs	r2, #0
 800f910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f91a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2201      	movs	r2, #1
 800f928:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f92c:	2303      	movs	r3, #3
 800f92e:	e02c      	b.n	800f98a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f936:	b29b      	uxth	r3, r3
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f47f af79 	bne.w	800f830 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	2200      	movs	r2, #0
 800f946:	2108      	movs	r1, #8
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	f000 fa53 	bl	800fdf4 <SPI_WaitOnFlagUntilTimeout>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d007      	beq.n	800f964 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f95a:	f043 0220 	orr.w	r2, r3, #32
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f000 f9a5 	bl	800fcb4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	2200      	movs	r2, #0
 800f96e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2201      	movs	r2, #1
 800f976:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f980:	2b00      	cmp	r3, #0
 800f982:	d001      	beq.n	800f988 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f984:	2301      	movs	r3, #1
 800f986:	e000      	b.n	800f98a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f988:	7efb      	ldrb	r3, [r7, #27]
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3720      	adds	r7, #32
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop

0800f994 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b088      	sub	sp, #32
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	603b      	str	r3, [r7, #0]
 800f9a0:	4613      	mov	r3, r2
 800f9a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	3330      	adds	r3, #48	; 0x30
 800f9ae:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d101      	bne.n	800f9be <HAL_SPI_Receive+0x2a>
 800f9ba:	2302      	movs	r3, #2
 800f9bc:	e173      	b.n	800fca6 <HAL_SPI_Receive+0x312>
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f9c6:	f7f4 f943 	bl	8003c50 <HAL_GetTick>
 800f9ca:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d007      	beq.n	800f9e8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f9d8:	2302      	movs	r3, #2
 800f9da:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f9e4:	7ffb      	ldrb	r3, [r7, #31]
 800f9e6:	e15e      	b.n	800fca6 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d002      	beq.n	800f9f4 <HAL_SPI_Receive+0x60>
 800f9ee:	88fb      	ldrh	r3, [r7, #6]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d107      	bne.n	800fa04 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fa00:	7ffb      	ldrb	r3, [r7, #31]
 800fa02:	e150      	b.n	800fca6 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2204      	movs	r2, #4
 800fa08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	68ba      	ldr	r2, [r7, #8]
 800fa18:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	88fa      	ldrh	r2, [r7, #6]
 800fa1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	88fa      	ldrh	r2, [r7, #6]
 800fa26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2200      	movs	r2, #0
 800fa34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2200      	movs	r2, #0
 800fa44:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fa54:	d108      	bne.n	800fa68 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fa64:	601a      	str	r2, [r3, #0]
 800fa66:	e009      	b.n	800fa7c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	68db      	ldr	r3, [r3, #12]
 800fa6e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800fa7a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	685a      	ldr	r2, [r3, #4]
 800fa82:	4b8b      	ldr	r3, [pc, #556]	; (800fcb0 <HAL_SPI_Receive+0x31c>)
 800fa84:	4013      	ands	r3, r2
 800fa86:	88f9      	ldrh	r1, [r7, #6]
 800fa88:	68fa      	ldr	r2, [r7, #12]
 800fa8a:	6812      	ldr	r2, [r2, #0]
 800fa8c:	430b      	orrs	r3, r1
 800fa8e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f042 0201 	orr.w	r2, r2, #1
 800fa9e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800faa8:	d107      	bne.n	800faba <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fab8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	2b0f      	cmp	r3, #15
 800fac0:	d948      	bls.n	800fb54 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800fac2:	e040      	b.n	800fb46 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	695a      	ldr	r2, [r3, #20]
 800faca:	f248 0308 	movw	r3, #32776	; 0x8008
 800face:	4013      	ands	r3, r2
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d014      	beq.n	800fafe <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fadc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fade:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fae4:	1d1a      	adds	r2, r3, #4
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	3b01      	subs	r3, #1
 800faf4:	b29a      	uxth	r2, r3
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fafc:	e023      	b.n	800fb46 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fafe:	f7f4 f8a7 	bl	8003c50 <HAL_GetTick>
 800fb02:	4602      	mov	r2, r0
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	1ad3      	subs	r3, r2, r3
 800fb08:	683a      	ldr	r2, [r7, #0]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d803      	bhi.n	800fb16 <HAL_SPI_Receive+0x182>
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb14:	d102      	bne.n	800fb1c <HAL_SPI_Receive+0x188>
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d114      	bne.n	800fb46 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f000 f8c9 	bl	800fcb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2200      	movs	r2, #0
 800fb26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2201      	movs	r2, #1
 800fb3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fb42:	2303      	movs	r3, #3
 800fb44:	e0af      	b.n	800fca6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1b8      	bne.n	800fac4 <HAL_SPI_Receive+0x130>
 800fb52:	e095      	b.n	800fc80 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	2b07      	cmp	r3, #7
 800fb5a:	f240 808b 	bls.w	800fc74 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800fb5e:	e03f      	b.n	800fbe0 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	695b      	ldr	r3, [r3, #20]
 800fb66:	f003 0301 	and.w	r3, r3, #1
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d114      	bne.n	800fb98 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb72:	69ba      	ldr	r2, [r7, #24]
 800fb74:	8812      	ldrh	r2, [r2, #0]
 800fb76:	b292      	uxth	r2, r2
 800fb78:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb7e:	1c9a      	adds	r2, r3, #2
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	3b01      	subs	r3, #1
 800fb8e:	b29a      	uxth	r2, r3
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fb96:	e023      	b.n	800fbe0 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb98:	f7f4 f85a 	bl	8003c50 <HAL_GetTick>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	683a      	ldr	r2, [r7, #0]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d803      	bhi.n	800fbb0 <HAL_SPI_Receive+0x21c>
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbae:	d102      	bne.n	800fbb6 <HAL_SPI_Receive+0x222>
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d114      	bne.n	800fbe0 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fbb6:	68f8      	ldr	r0, [r7, #12]
 800fbb8:	f000 f87c 	bl	800fcb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fbdc:	2303      	movs	r3, #3
 800fbde:	e062      	b.n	800fca6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d1b9      	bne.n	800fb60 <HAL_SPI_Receive+0x1cc>
 800fbec:	e048      	b.n	800fc80 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	695b      	ldr	r3, [r3, #20]
 800fbf4:	f003 0301 	and.w	r3, r3, #1
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d117      	bne.n	800fc2c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc08:	7812      	ldrb	r2, [r2, #0]
 800fc0a:	b2d2      	uxtb	r2, r2
 800fc0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc12:	1c5a      	adds	r2, r3, #1
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	3b01      	subs	r3, #1
 800fc22:	b29a      	uxth	r2, r3
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fc2a:	e023      	b.n	800fc74 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc2c:	f7f4 f810 	bl	8003c50 <HAL_GetTick>
 800fc30:	4602      	mov	r2, r0
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	1ad3      	subs	r3, r2, r3
 800fc36:	683a      	ldr	r2, [r7, #0]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d803      	bhi.n	800fc44 <HAL_SPI_Receive+0x2b0>
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc42:	d102      	bne.n	800fc4a <HAL_SPI_Receive+0x2b6>
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d114      	bne.n	800fc74 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f000 f832 	bl	800fcb4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2200      	movs	r2, #0
 800fc54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fc70:	2303      	movs	r3, #3
 800fc72:	e018      	b.n	800fca6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d1b6      	bne.n	800fbee <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fc80:	68f8      	ldr	r0, [r7, #12]
 800fc82:	f000 f817 	bl	800fcb4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	2201      	movs	r2, #1
 800fc92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d001      	beq.n	800fca4 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800fca0:	2301      	movs	r3, #1
 800fca2:	e000      	b.n	800fca6 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800fca4:	7ffb      	ldrb	r3, [r7, #31]
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3720      	adds	r7, #32
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	ffff0000 	.word	0xffff0000

0800fcb4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b085      	sub	sp, #20
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	695b      	ldr	r3, [r3, #20]
 800fcc2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	699a      	ldr	r2, [r3, #24]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f042 0208 	orr.w	r2, r2, #8
 800fcd2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	699a      	ldr	r2, [r3, #24]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f042 0210 	orr.w	r2, r2, #16
 800fce2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f022 0201 	bic.w	r2, r2, #1
 800fcf2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	6919      	ldr	r1, [r3, #16]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681a      	ldr	r2, [r3, #0]
 800fcfe:	4b3c      	ldr	r3, [pc, #240]	; (800fdf0 <SPI_CloseTransfer+0x13c>)
 800fd00:	400b      	ands	r3, r1
 800fd02:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	689a      	ldr	r2, [r3, #8]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800fd12:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	2b04      	cmp	r3, #4
 800fd1e:	d014      	beq.n	800fd4a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f003 0320 	and.w	r3, r3, #32
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d00f      	beq.n	800fd4a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	699a      	ldr	r2, [r3, #24]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f042 0220 	orr.w	r2, r2, #32
 800fd48:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	2b03      	cmp	r3, #3
 800fd54:	d014      	beq.n	800fd80 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d00f      	beq.n	800fd80 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd66:	f043 0204 	orr.w	r2, r3, #4
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	699a      	ldr	r2, [r3, #24]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd7e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d00f      	beq.n	800fdaa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd90:	f043 0201 	orr.w	r2, r3, #1
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	699a      	ldr	r2, [r3, #24]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fda8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d00f      	beq.n	800fdd4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdba:	f043 0208 	orr.w	r2, r3, #8
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	699a      	ldr	r2, [r3, #24]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fdd2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2200      	movs	r2, #0
 800fde0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800fde4:	bf00      	nop
 800fde6:	3714      	adds	r7, #20
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	fffffc90 	.word	0xfffffc90

0800fdf4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	60f8      	str	r0, [r7, #12]
 800fdfc:	60b9      	str	r1, [r7, #8]
 800fdfe:	603b      	str	r3, [r7, #0]
 800fe00:	4613      	mov	r3, r2
 800fe02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fe04:	e010      	b.n	800fe28 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe06:	f7f3 ff23 	bl	8003c50 <HAL_GetTick>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	69bb      	ldr	r3, [r7, #24]
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	683a      	ldr	r2, [r7, #0]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d803      	bhi.n	800fe1e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe1c:	d102      	bne.n	800fe24 <SPI_WaitOnFlagUntilTimeout+0x30>
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d101      	bne.n	800fe28 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800fe24:	2303      	movs	r3, #3
 800fe26:	e00f      	b.n	800fe48 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	695a      	ldr	r2, [r3, #20]
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	4013      	ands	r3, r2
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	bf0c      	ite	eq
 800fe38:	2301      	moveq	r3, #1
 800fe3a:	2300      	movne	r3, #0
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	461a      	mov	r2, r3
 800fe40:	79fb      	ldrb	r3, [r7, #7]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d0df      	beq.n	800fe06 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800fe46:	2300      	movs	r3, #0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b085      	sub	sp, #20
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe5c:	095b      	lsrs	r3, r3, #5
 800fe5e:	3301      	adds	r3, #1
 800fe60:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	68db      	ldr	r3, [r3, #12]
 800fe66:	3301      	adds	r3, #1
 800fe68:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	3307      	adds	r3, #7
 800fe6e:	08db      	lsrs	r3, r3, #3
 800fe70:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	68fa      	ldr	r2, [r7, #12]
 800fe76:	fb02 f303 	mul.w	r3, r2, r3
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3714      	adds	r7, #20
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe84:	4770      	bx	lr

0800fe86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fe86:	b580      	push	{r7, lr}
 800fe88:	b082      	sub	sp, #8
 800fe8a:	af00      	add	r7, sp, #0
 800fe8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d101      	bne.n	800fe98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fe94:	2301      	movs	r3, #1
 800fe96:	e049      	b.n	800ff2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d106      	bne.n	800feb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f7f3 fb21 	bl	80034f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2202      	movs	r2, #2
 800feb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	3304      	adds	r3, #4
 800fec2:	4619      	mov	r1, r3
 800fec4:	4610      	mov	r0, r2
 800fec6:	f000 ff29 	bl	8010d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2201      	movs	r2, #1
 800fece:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2201      	movs	r2, #1
 800fed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2201      	movs	r2, #1
 800fede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2201      	movs	r2, #1
 800fee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2201      	movs	r2, #1
 800feee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2201      	movs	r2, #1
 800fef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2201      	movs	r2, #1
 800fefe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2201      	movs	r2, #1
 800ff06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2201      	movs	r2, #1
 800ff16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2201      	movs	r2, #1
 800ff26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ff2a:	2300      	movs	r3, #0
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3708      	adds	r7, #8
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d101      	bne.n	800ff46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ff42:	2301      	movs	r3, #1
 800ff44:	e049      	b.n	800ffda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d106      	bne.n	800ff60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7f3 f934 	bl	80031c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2202      	movs	r2, #2
 800ff64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	3304      	adds	r3, #4
 800ff70:	4619      	mov	r1, r3
 800ff72:	4610      	mov	r0, r2
 800ff74:	f000 fed2 	bl	8010d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2201      	movs	r2, #1
 800ff84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2201      	movs	r2, #1
 800ff94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ffd8:	2300      	movs	r3, #0
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3708      	adds	r7, #8
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
	...

0800ffe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b084      	sub	sp, #16
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d109      	bne.n	8010008 <HAL_TIM_PWM_Start+0x24>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	bf14      	ite	ne
 8010000:	2301      	movne	r3, #1
 8010002:	2300      	moveq	r3, #0
 8010004:	b2db      	uxtb	r3, r3
 8010006:	e03c      	b.n	8010082 <HAL_TIM_PWM_Start+0x9e>
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	2b04      	cmp	r3, #4
 801000c:	d109      	bne.n	8010022 <HAL_TIM_PWM_Start+0x3e>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010014:	b2db      	uxtb	r3, r3
 8010016:	2b01      	cmp	r3, #1
 8010018:	bf14      	ite	ne
 801001a:	2301      	movne	r3, #1
 801001c:	2300      	moveq	r3, #0
 801001e:	b2db      	uxtb	r3, r3
 8010020:	e02f      	b.n	8010082 <HAL_TIM_PWM_Start+0x9e>
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	2b08      	cmp	r3, #8
 8010026:	d109      	bne.n	801003c <HAL_TIM_PWM_Start+0x58>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801002e:	b2db      	uxtb	r3, r3
 8010030:	2b01      	cmp	r3, #1
 8010032:	bf14      	ite	ne
 8010034:	2301      	movne	r3, #1
 8010036:	2300      	moveq	r3, #0
 8010038:	b2db      	uxtb	r3, r3
 801003a:	e022      	b.n	8010082 <HAL_TIM_PWM_Start+0x9e>
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	2b0c      	cmp	r3, #12
 8010040:	d109      	bne.n	8010056 <HAL_TIM_PWM_Start+0x72>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010048:	b2db      	uxtb	r3, r3
 801004a:	2b01      	cmp	r3, #1
 801004c:	bf14      	ite	ne
 801004e:	2301      	movne	r3, #1
 8010050:	2300      	moveq	r3, #0
 8010052:	b2db      	uxtb	r3, r3
 8010054:	e015      	b.n	8010082 <HAL_TIM_PWM_Start+0x9e>
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	2b10      	cmp	r3, #16
 801005a:	d109      	bne.n	8010070 <HAL_TIM_PWM_Start+0x8c>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010062:	b2db      	uxtb	r3, r3
 8010064:	2b01      	cmp	r3, #1
 8010066:	bf14      	ite	ne
 8010068:	2301      	movne	r3, #1
 801006a:	2300      	moveq	r3, #0
 801006c:	b2db      	uxtb	r3, r3
 801006e:	e008      	b.n	8010082 <HAL_TIM_PWM_Start+0x9e>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010076:	b2db      	uxtb	r3, r3
 8010078:	2b01      	cmp	r3, #1
 801007a:	bf14      	ite	ne
 801007c:	2301      	movne	r3, #1
 801007e:	2300      	moveq	r3, #0
 8010080:	b2db      	uxtb	r3, r3
 8010082:	2b00      	cmp	r3, #0
 8010084:	d001      	beq.n	801008a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010086:	2301      	movs	r3, #1
 8010088:	e0ab      	b.n	80101e2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d104      	bne.n	801009a <HAL_TIM_PWM_Start+0xb6>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2202      	movs	r2, #2
 8010094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010098:	e023      	b.n	80100e2 <HAL_TIM_PWM_Start+0xfe>
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	2b04      	cmp	r3, #4
 801009e:	d104      	bne.n	80100aa <HAL_TIM_PWM_Start+0xc6>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2202      	movs	r2, #2
 80100a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80100a8:	e01b      	b.n	80100e2 <HAL_TIM_PWM_Start+0xfe>
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	2b08      	cmp	r3, #8
 80100ae:	d104      	bne.n	80100ba <HAL_TIM_PWM_Start+0xd6>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2202      	movs	r2, #2
 80100b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80100b8:	e013      	b.n	80100e2 <HAL_TIM_PWM_Start+0xfe>
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	2b0c      	cmp	r3, #12
 80100be:	d104      	bne.n	80100ca <HAL_TIM_PWM_Start+0xe6>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2202      	movs	r2, #2
 80100c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80100c8:	e00b      	b.n	80100e2 <HAL_TIM_PWM_Start+0xfe>
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	2b10      	cmp	r3, #16
 80100ce:	d104      	bne.n	80100da <HAL_TIM_PWM_Start+0xf6>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2202      	movs	r2, #2
 80100d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80100d8:	e003      	b.n	80100e2 <HAL_TIM_PWM_Start+0xfe>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2202      	movs	r2, #2
 80100de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2201      	movs	r2, #1
 80100e8:	6839      	ldr	r1, [r7, #0]
 80100ea:	4618      	mov	r0, r3
 80100ec:	f001 f992 	bl	8011414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4a3d      	ldr	r2, [pc, #244]	; (80101ec <HAL_TIM_PWM_Start+0x208>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d013      	beq.n	8010122 <HAL_TIM_PWM_Start+0x13e>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a3c      	ldr	r2, [pc, #240]	; (80101f0 <HAL_TIM_PWM_Start+0x20c>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d00e      	beq.n	8010122 <HAL_TIM_PWM_Start+0x13e>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a3a      	ldr	r2, [pc, #232]	; (80101f4 <HAL_TIM_PWM_Start+0x210>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d009      	beq.n	8010122 <HAL_TIM_PWM_Start+0x13e>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4a39      	ldr	r2, [pc, #228]	; (80101f8 <HAL_TIM_PWM_Start+0x214>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d004      	beq.n	8010122 <HAL_TIM_PWM_Start+0x13e>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a37      	ldr	r2, [pc, #220]	; (80101fc <HAL_TIM_PWM_Start+0x218>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d101      	bne.n	8010126 <HAL_TIM_PWM_Start+0x142>
 8010122:	2301      	movs	r3, #1
 8010124:	e000      	b.n	8010128 <HAL_TIM_PWM_Start+0x144>
 8010126:	2300      	movs	r3, #0
 8010128:	2b00      	cmp	r3, #0
 801012a:	d007      	beq.n	801013c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801013a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4a2a      	ldr	r2, [pc, #168]	; (80101ec <HAL_TIM_PWM_Start+0x208>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d02c      	beq.n	80101a0 <HAL_TIM_PWM_Start+0x1bc>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801014e:	d027      	beq.n	80101a0 <HAL_TIM_PWM_Start+0x1bc>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a2a      	ldr	r2, [pc, #168]	; (8010200 <HAL_TIM_PWM_Start+0x21c>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d022      	beq.n	80101a0 <HAL_TIM_PWM_Start+0x1bc>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	4a29      	ldr	r2, [pc, #164]	; (8010204 <HAL_TIM_PWM_Start+0x220>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d01d      	beq.n	80101a0 <HAL_TIM_PWM_Start+0x1bc>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	4a27      	ldr	r2, [pc, #156]	; (8010208 <HAL_TIM_PWM_Start+0x224>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d018      	beq.n	80101a0 <HAL_TIM_PWM_Start+0x1bc>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	4a1f      	ldr	r2, [pc, #124]	; (80101f0 <HAL_TIM_PWM_Start+0x20c>)
 8010174:	4293      	cmp	r3, r2
 8010176:	d013      	beq.n	80101a0 <HAL_TIM_PWM_Start+0x1bc>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a23      	ldr	r2, [pc, #140]	; (801020c <HAL_TIM_PWM_Start+0x228>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d00e      	beq.n	80101a0 <HAL_TIM_PWM_Start+0x1bc>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4a1b      	ldr	r2, [pc, #108]	; (80101f4 <HAL_TIM_PWM_Start+0x210>)
 8010188:	4293      	cmp	r3, r2
 801018a:	d009      	beq.n	80101a0 <HAL_TIM_PWM_Start+0x1bc>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4a1f      	ldr	r2, [pc, #124]	; (8010210 <HAL_TIM_PWM_Start+0x22c>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d004      	beq.n	80101a0 <HAL_TIM_PWM_Start+0x1bc>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4a1e      	ldr	r2, [pc, #120]	; (8010214 <HAL_TIM_PWM_Start+0x230>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d115      	bne.n	80101cc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	689a      	ldr	r2, [r3, #8]
 80101a6:	4b1c      	ldr	r3, [pc, #112]	; (8010218 <HAL_TIM_PWM_Start+0x234>)
 80101a8:	4013      	ands	r3, r2
 80101aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2b06      	cmp	r3, #6
 80101b0:	d015      	beq.n	80101de <HAL_TIM_PWM_Start+0x1fa>
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101b8:	d011      	beq.n	80101de <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f042 0201 	orr.w	r2, r2, #1
 80101c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101ca:	e008      	b.n	80101de <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	681a      	ldr	r2, [r3, #0]
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f042 0201 	orr.w	r2, r2, #1
 80101da:	601a      	str	r2, [r3, #0]
 80101dc:	e000      	b.n	80101e0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80101e0:	2300      	movs	r3, #0
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3710      	adds	r7, #16
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	40010000 	.word	0x40010000
 80101f0:	40010400 	.word	0x40010400
 80101f4:	40014000 	.word	0x40014000
 80101f8:	40014400 	.word	0x40014400
 80101fc:	40014800 	.word	0x40014800
 8010200:	40000400 	.word	0x40000400
 8010204:	40000800 	.word	0x40000800
 8010208:	40000c00 	.word	0x40000c00
 801020c:	40001800 	.word	0x40001800
 8010210:	4000e000 	.word	0x4000e000
 8010214:	4000e400 	.word	0x4000e400
 8010218:	00010007 	.word	0x00010007

0801021c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b086      	sub	sp, #24
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]
 8010228:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 801022a:	2300      	movs	r3, #0
 801022c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d109      	bne.n	8010248 <HAL_TIM_PWM_Start_DMA+0x2c>
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801023a:	b2db      	uxtb	r3, r3
 801023c:	2b02      	cmp	r3, #2
 801023e:	bf0c      	ite	eq
 8010240:	2301      	moveq	r3, #1
 8010242:	2300      	movne	r3, #0
 8010244:	b2db      	uxtb	r3, r3
 8010246:	e03c      	b.n	80102c2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	2b04      	cmp	r3, #4
 801024c:	d109      	bne.n	8010262 <HAL_TIM_PWM_Start_DMA+0x46>
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010254:	b2db      	uxtb	r3, r3
 8010256:	2b02      	cmp	r3, #2
 8010258:	bf0c      	ite	eq
 801025a:	2301      	moveq	r3, #1
 801025c:	2300      	movne	r3, #0
 801025e:	b2db      	uxtb	r3, r3
 8010260:	e02f      	b.n	80102c2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	2b08      	cmp	r3, #8
 8010266:	d109      	bne.n	801027c <HAL_TIM_PWM_Start_DMA+0x60>
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801026e:	b2db      	uxtb	r3, r3
 8010270:	2b02      	cmp	r3, #2
 8010272:	bf0c      	ite	eq
 8010274:	2301      	moveq	r3, #1
 8010276:	2300      	movne	r3, #0
 8010278:	b2db      	uxtb	r3, r3
 801027a:	e022      	b.n	80102c2 <HAL_TIM_PWM_Start_DMA+0xa6>
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	2b0c      	cmp	r3, #12
 8010280:	d109      	bne.n	8010296 <HAL_TIM_PWM_Start_DMA+0x7a>
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010288:	b2db      	uxtb	r3, r3
 801028a:	2b02      	cmp	r3, #2
 801028c:	bf0c      	ite	eq
 801028e:	2301      	moveq	r3, #1
 8010290:	2300      	movne	r3, #0
 8010292:	b2db      	uxtb	r3, r3
 8010294:	e015      	b.n	80102c2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	2b10      	cmp	r3, #16
 801029a:	d109      	bne.n	80102b0 <HAL_TIM_PWM_Start_DMA+0x94>
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	2b02      	cmp	r3, #2
 80102a6:	bf0c      	ite	eq
 80102a8:	2301      	moveq	r3, #1
 80102aa:	2300      	movne	r3, #0
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	e008      	b.n	80102c2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80102b6:	b2db      	uxtb	r3, r3
 80102b8:	2b02      	cmp	r3, #2
 80102ba:	bf0c      	ite	eq
 80102bc:	2301      	moveq	r3, #1
 80102be:	2300      	movne	r3, #0
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d001      	beq.n	80102ca <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80102c6:	2302      	movs	r3, #2
 80102c8:	e1ba      	b.n	8010640 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d109      	bne.n	80102e4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	2b01      	cmp	r3, #1
 80102da:	bf0c      	ite	eq
 80102dc:	2301      	moveq	r3, #1
 80102de:	2300      	movne	r3, #0
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	e03c      	b.n	801035e <HAL_TIM_PWM_Start_DMA+0x142>
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	2b04      	cmp	r3, #4
 80102e8:	d109      	bne.n	80102fe <HAL_TIM_PWM_Start_DMA+0xe2>
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	bf0c      	ite	eq
 80102f6:	2301      	moveq	r3, #1
 80102f8:	2300      	movne	r3, #0
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	e02f      	b.n	801035e <HAL_TIM_PWM_Start_DMA+0x142>
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	2b08      	cmp	r3, #8
 8010302:	d109      	bne.n	8010318 <HAL_TIM_PWM_Start_DMA+0xfc>
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2b01      	cmp	r3, #1
 801030e:	bf0c      	ite	eq
 8010310:	2301      	moveq	r3, #1
 8010312:	2300      	movne	r3, #0
 8010314:	b2db      	uxtb	r3, r3
 8010316:	e022      	b.n	801035e <HAL_TIM_PWM_Start_DMA+0x142>
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	2b0c      	cmp	r3, #12
 801031c:	d109      	bne.n	8010332 <HAL_TIM_PWM_Start_DMA+0x116>
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010324:	b2db      	uxtb	r3, r3
 8010326:	2b01      	cmp	r3, #1
 8010328:	bf0c      	ite	eq
 801032a:	2301      	moveq	r3, #1
 801032c:	2300      	movne	r3, #0
 801032e:	b2db      	uxtb	r3, r3
 8010330:	e015      	b.n	801035e <HAL_TIM_PWM_Start_DMA+0x142>
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	2b10      	cmp	r3, #16
 8010336:	d109      	bne.n	801034c <HAL_TIM_PWM_Start_DMA+0x130>
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801033e:	b2db      	uxtb	r3, r3
 8010340:	2b01      	cmp	r3, #1
 8010342:	bf0c      	ite	eq
 8010344:	2301      	moveq	r3, #1
 8010346:	2300      	movne	r3, #0
 8010348:	b2db      	uxtb	r3, r3
 801034a:	e008      	b.n	801035e <HAL_TIM_PWM_Start_DMA+0x142>
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010352:	b2db      	uxtb	r3, r3
 8010354:	2b01      	cmp	r3, #1
 8010356:	bf0c      	ite	eq
 8010358:	2301      	moveq	r3, #1
 801035a:	2300      	movne	r3, #0
 801035c:	b2db      	uxtb	r3, r3
 801035e:	2b00      	cmp	r3, #0
 8010360:	d034      	beq.n	80103cc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <HAL_TIM_PWM_Start_DMA+0x152>
 8010368:	887b      	ldrh	r3, [r7, #2]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d101      	bne.n	8010372 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 801036e:	2301      	movs	r3, #1
 8010370:	e166      	b.n	8010640 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d104      	bne.n	8010382 <HAL_TIM_PWM_Start_DMA+0x166>
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	2202      	movs	r2, #2
 801037c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010380:	e026      	b.n	80103d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	2b04      	cmp	r3, #4
 8010386:	d104      	bne.n	8010392 <HAL_TIM_PWM_Start_DMA+0x176>
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2202      	movs	r2, #2
 801038c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010390:	e01e      	b.n	80103d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	2b08      	cmp	r3, #8
 8010396:	d104      	bne.n	80103a2 <HAL_TIM_PWM_Start_DMA+0x186>
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2202      	movs	r2, #2
 801039c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80103a0:	e016      	b.n	80103d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	2b0c      	cmp	r3, #12
 80103a6:	d104      	bne.n	80103b2 <HAL_TIM_PWM_Start_DMA+0x196>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2202      	movs	r2, #2
 80103ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80103b0:	e00e      	b.n	80103d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	2b10      	cmp	r3, #16
 80103b6:	d104      	bne.n	80103c2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2202      	movs	r2, #2
 80103bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80103c0:	e006      	b.n	80103d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2202      	movs	r2, #2
 80103c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80103ca:	e001      	b.n	80103d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80103cc:	2301      	movs	r3, #1
 80103ce:	e137      	b.n	8010640 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	2b0c      	cmp	r3, #12
 80103d4:	f200 80ae 	bhi.w	8010534 <HAL_TIM_PWM_Start_DMA+0x318>
 80103d8:	a201      	add	r2, pc, #4	; (adr r2, 80103e0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80103da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103de:	bf00      	nop
 80103e0:	08010415 	.word	0x08010415
 80103e4:	08010535 	.word	0x08010535
 80103e8:	08010535 	.word	0x08010535
 80103ec:	08010535 	.word	0x08010535
 80103f0:	0801045d 	.word	0x0801045d
 80103f4:	08010535 	.word	0x08010535
 80103f8:	08010535 	.word	0x08010535
 80103fc:	08010535 	.word	0x08010535
 8010400:	080104a5 	.word	0x080104a5
 8010404:	08010535 	.word	0x08010535
 8010408:	08010535 	.word	0x08010535
 801040c:	08010535 	.word	0x08010535
 8010410:	080104ed 	.word	0x080104ed
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010418:	4a8b      	ldr	r2, [pc, #556]	; (8010648 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801041a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010420:	4a8a      	ldr	r2, [pc, #552]	; (801064c <HAL_TIM_PWM_Start_DMA+0x430>)
 8010422:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010428:	4a89      	ldr	r2, [pc, #548]	; (8010650 <HAL_TIM_PWM_Start_DMA+0x434>)
 801042a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010430:	6879      	ldr	r1, [r7, #4]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	3334      	adds	r3, #52	; 0x34
 8010438:	461a      	mov	r2, r3
 801043a:	887b      	ldrh	r3, [r7, #2]
 801043c:	f7f6 f872 	bl	8006524 <HAL_DMA_Start_IT>
 8010440:	4603      	mov	r3, r0
 8010442:	2b00      	cmp	r3, #0
 8010444:	d001      	beq.n	801044a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010446:	2301      	movs	r3, #1
 8010448:	e0fa      	b.n	8010640 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	68da      	ldr	r2, [r3, #12]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010458:	60da      	str	r2, [r3, #12]
      break;
 801045a:	e06e      	b.n	801053a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010460:	4a79      	ldr	r2, [pc, #484]	; (8010648 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010462:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010468:	4a78      	ldr	r2, [pc, #480]	; (801064c <HAL_TIM_PWM_Start_DMA+0x430>)
 801046a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010470:	4a77      	ldr	r2, [pc, #476]	; (8010650 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010472:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010478:	6879      	ldr	r1, [r7, #4]
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	3338      	adds	r3, #56	; 0x38
 8010480:	461a      	mov	r2, r3
 8010482:	887b      	ldrh	r3, [r7, #2]
 8010484:	f7f6 f84e 	bl	8006524 <HAL_DMA_Start_IT>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	d001      	beq.n	8010492 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801048e:	2301      	movs	r3, #1
 8010490:	e0d6      	b.n	8010640 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	68da      	ldr	r2, [r3, #12]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80104a0:	60da      	str	r2, [r3, #12]
      break;
 80104a2:	e04a      	b.n	801053a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a8:	4a67      	ldr	r2, [pc, #412]	; (8010648 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80104aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b0:	4a66      	ldr	r2, [pc, #408]	; (801064c <HAL_TIM_PWM_Start_DMA+0x430>)
 80104b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b8:	4a65      	ldr	r2, [pc, #404]	; (8010650 <HAL_TIM_PWM_Start_DMA+0x434>)
 80104ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80104c0:	6879      	ldr	r1, [r7, #4]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	333c      	adds	r3, #60	; 0x3c
 80104c8:	461a      	mov	r2, r3
 80104ca:	887b      	ldrh	r3, [r7, #2]
 80104cc:	f7f6 f82a 	bl	8006524 <HAL_DMA_Start_IT>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d001      	beq.n	80104da <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80104d6:	2301      	movs	r3, #1
 80104d8:	e0b2      	b.n	8010640 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	68da      	ldr	r2, [r3, #12]
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80104e8:	60da      	str	r2, [r3, #12]
      break;
 80104ea:	e026      	b.n	801053a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104f0:	4a55      	ldr	r2, [pc, #340]	; (8010648 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80104f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104f8:	4a54      	ldr	r2, [pc, #336]	; (801064c <HAL_TIM_PWM_Start_DMA+0x430>)
 80104fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010500:	4a53      	ldr	r2, [pc, #332]	; (8010650 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010502:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010508:	6879      	ldr	r1, [r7, #4]
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	3340      	adds	r3, #64	; 0x40
 8010510:	461a      	mov	r2, r3
 8010512:	887b      	ldrh	r3, [r7, #2]
 8010514:	f7f6 f806 	bl	8006524 <HAL_DMA_Start_IT>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d001      	beq.n	8010522 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801051e:	2301      	movs	r3, #1
 8010520:	e08e      	b.n	8010640 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	68da      	ldr	r2, [r3, #12]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010530:	60da      	str	r2, [r3, #12]
      break;
 8010532:	e002      	b.n	801053a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8010534:	2301      	movs	r3, #1
 8010536:	75fb      	strb	r3, [r7, #23]
      break;
 8010538:	bf00      	nop
  }

  if (status == HAL_OK)
 801053a:	7dfb      	ldrb	r3, [r7, #23]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d17e      	bne.n	801063e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	2201      	movs	r2, #1
 8010546:	68b9      	ldr	r1, [r7, #8]
 8010548:	4618      	mov	r0, r3
 801054a:	f000 ff63 	bl	8011414 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	4a40      	ldr	r2, [pc, #256]	; (8010654 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010554:	4293      	cmp	r3, r2
 8010556:	d013      	beq.n	8010580 <HAL_TIM_PWM_Start_DMA+0x364>
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4a3e      	ldr	r2, [pc, #248]	; (8010658 <HAL_TIM_PWM_Start_DMA+0x43c>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d00e      	beq.n	8010580 <HAL_TIM_PWM_Start_DMA+0x364>
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	4a3d      	ldr	r2, [pc, #244]	; (801065c <HAL_TIM_PWM_Start_DMA+0x440>)
 8010568:	4293      	cmp	r3, r2
 801056a:	d009      	beq.n	8010580 <HAL_TIM_PWM_Start_DMA+0x364>
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	4a3b      	ldr	r2, [pc, #236]	; (8010660 <HAL_TIM_PWM_Start_DMA+0x444>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d004      	beq.n	8010580 <HAL_TIM_PWM_Start_DMA+0x364>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	4a3a      	ldr	r2, [pc, #232]	; (8010664 <HAL_TIM_PWM_Start_DMA+0x448>)
 801057c:	4293      	cmp	r3, r2
 801057e:	d101      	bne.n	8010584 <HAL_TIM_PWM_Start_DMA+0x368>
 8010580:	2301      	movs	r3, #1
 8010582:	e000      	b.n	8010586 <HAL_TIM_PWM_Start_DMA+0x36a>
 8010584:	2300      	movs	r3, #0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d007      	beq.n	801059a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010598:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	4a2d      	ldr	r2, [pc, #180]	; (8010654 <HAL_TIM_PWM_Start_DMA+0x438>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d02c      	beq.n	80105fe <HAL_TIM_PWM_Start_DMA+0x3e2>
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105ac:	d027      	beq.n	80105fe <HAL_TIM_PWM_Start_DMA+0x3e2>
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	4a2d      	ldr	r2, [pc, #180]	; (8010668 <HAL_TIM_PWM_Start_DMA+0x44c>)
 80105b4:	4293      	cmp	r3, r2
 80105b6:	d022      	beq.n	80105fe <HAL_TIM_PWM_Start_DMA+0x3e2>
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	4a2b      	ldr	r2, [pc, #172]	; (801066c <HAL_TIM_PWM_Start_DMA+0x450>)
 80105be:	4293      	cmp	r3, r2
 80105c0:	d01d      	beq.n	80105fe <HAL_TIM_PWM_Start_DMA+0x3e2>
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	4a2a      	ldr	r2, [pc, #168]	; (8010670 <HAL_TIM_PWM_Start_DMA+0x454>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d018      	beq.n	80105fe <HAL_TIM_PWM_Start_DMA+0x3e2>
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	4a21      	ldr	r2, [pc, #132]	; (8010658 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d013      	beq.n	80105fe <HAL_TIM_PWM_Start_DMA+0x3e2>
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	4a26      	ldr	r2, [pc, #152]	; (8010674 <HAL_TIM_PWM_Start_DMA+0x458>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d00e      	beq.n	80105fe <HAL_TIM_PWM_Start_DMA+0x3e2>
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4a1d      	ldr	r2, [pc, #116]	; (801065c <HAL_TIM_PWM_Start_DMA+0x440>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d009      	beq.n	80105fe <HAL_TIM_PWM_Start_DMA+0x3e2>
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	4a22      	ldr	r2, [pc, #136]	; (8010678 <HAL_TIM_PWM_Start_DMA+0x45c>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d004      	beq.n	80105fe <HAL_TIM_PWM_Start_DMA+0x3e2>
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	4a20      	ldr	r2, [pc, #128]	; (801067c <HAL_TIM_PWM_Start_DMA+0x460>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d115      	bne.n	801062a <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	689a      	ldr	r2, [r3, #8]
 8010604:	4b1e      	ldr	r3, [pc, #120]	; (8010680 <HAL_TIM_PWM_Start_DMA+0x464>)
 8010606:	4013      	ands	r3, r2
 8010608:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	2b06      	cmp	r3, #6
 801060e:	d015      	beq.n	801063c <HAL_TIM_PWM_Start_DMA+0x420>
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010616:	d011      	beq.n	801063c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f042 0201 	orr.w	r2, r2, #1
 8010626:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010628:	e008      	b.n	801063c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f042 0201 	orr.w	r2, r2, #1
 8010638:	601a      	str	r2, [r3, #0]
 801063a:	e000      	b.n	801063e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801063c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801063e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010640:	4618      	mov	r0, r3
 8010642:	3718      	adds	r7, #24
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	08010c0b 	.word	0x08010c0b
 801064c:	08010cb3 	.word	0x08010cb3
 8010650:	08010b79 	.word	0x08010b79
 8010654:	40010000 	.word	0x40010000
 8010658:	40010400 	.word	0x40010400
 801065c:	40014000 	.word	0x40014000
 8010660:	40014400 	.word	0x40014400
 8010664:	40014800 	.word	0x40014800
 8010668:	40000400 	.word	0x40000400
 801066c:	40000800 	.word	0x40000800
 8010670:	40000c00 	.word	0x40000c00
 8010674:	40001800 	.word	0x40001800
 8010678:	4000e000 	.word	0x4000e000
 801067c:	4000e400 	.word	0x4000e400
 8010680:	00010007 	.word	0x00010007

08010684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	691b      	ldr	r3, [r3, #16]
 8010692:	f003 0302 	and.w	r3, r3, #2
 8010696:	2b02      	cmp	r3, #2
 8010698:	d122      	bne.n	80106e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	f003 0302 	and.w	r3, r3, #2
 80106a4:	2b02      	cmp	r3, #2
 80106a6:	d11b      	bne.n	80106e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	f06f 0202 	mvn.w	r2, #2
 80106b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2201      	movs	r2, #1
 80106b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	699b      	ldr	r3, [r3, #24]
 80106be:	f003 0303 	and.w	r3, r3, #3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d003      	beq.n	80106ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f000 fa24 	bl	8010b14 <HAL_TIM_IC_CaptureCallback>
 80106cc:	e005      	b.n	80106da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 fa16 	bl	8010b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 fa27 	bl	8010b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2200      	movs	r2, #0
 80106de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	691b      	ldr	r3, [r3, #16]
 80106e6:	f003 0304 	and.w	r3, r3, #4
 80106ea:	2b04      	cmp	r3, #4
 80106ec:	d122      	bne.n	8010734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	68db      	ldr	r3, [r3, #12]
 80106f4:	f003 0304 	and.w	r3, r3, #4
 80106f8:	2b04      	cmp	r3, #4
 80106fa:	d11b      	bne.n	8010734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	f06f 0204 	mvn.w	r2, #4
 8010704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2202      	movs	r2, #2
 801070a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	699b      	ldr	r3, [r3, #24]
 8010712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010716:	2b00      	cmp	r3, #0
 8010718:	d003      	beq.n	8010722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f000 f9fa 	bl	8010b14 <HAL_TIM_IC_CaptureCallback>
 8010720:	e005      	b.n	801072e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f000 f9ec 	bl	8010b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f000 f9fd 	bl	8010b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2200      	movs	r2, #0
 8010732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	691b      	ldr	r3, [r3, #16]
 801073a:	f003 0308 	and.w	r3, r3, #8
 801073e:	2b08      	cmp	r3, #8
 8010740:	d122      	bne.n	8010788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	f003 0308 	and.w	r3, r3, #8
 801074c:	2b08      	cmp	r3, #8
 801074e:	d11b      	bne.n	8010788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f06f 0208 	mvn.w	r2, #8
 8010758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2204      	movs	r2, #4
 801075e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	69db      	ldr	r3, [r3, #28]
 8010766:	f003 0303 	and.w	r3, r3, #3
 801076a:	2b00      	cmp	r3, #0
 801076c:	d003      	beq.n	8010776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 f9d0 	bl	8010b14 <HAL_TIM_IC_CaptureCallback>
 8010774:	e005      	b.n	8010782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f000 f9c2 	bl	8010b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 f9d3 	bl	8010b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	691b      	ldr	r3, [r3, #16]
 801078e:	f003 0310 	and.w	r3, r3, #16
 8010792:	2b10      	cmp	r3, #16
 8010794:	d122      	bne.n	80107dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	68db      	ldr	r3, [r3, #12]
 801079c:	f003 0310 	and.w	r3, r3, #16
 80107a0:	2b10      	cmp	r3, #16
 80107a2:	d11b      	bne.n	80107dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f06f 0210 	mvn.w	r2, #16
 80107ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2208      	movs	r2, #8
 80107b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	69db      	ldr	r3, [r3, #28]
 80107ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d003      	beq.n	80107ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f000 f9a6 	bl	8010b14 <HAL_TIM_IC_CaptureCallback>
 80107c8:	e005      	b.n	80107d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f000 f998 	bl	8010b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f000 f9a9 	bl	8010b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	f003 0301 	and.w	r3, r3, #1
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d10e      	bne.n	8010808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	68db      	ldr	r3, [r3, #12]
 80107f0:	f003 0301 	and.w	r3, r3, #1
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d107      	bne.n	8010808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f06f 0201 	mvn.w	r2, #1
 8010800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 f972 	bl	8010aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	691b      	ldr	r3, [r3, #16]
 801080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010812:	2b80      	cmp	r3, #128	; 0x80
 8010814:	d10e      	bne.n	8010834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	68db      	ldr	r3, [r3, #12]
 801081c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010820:	2b80      	cmp	r3, #128	; 0x80
 8010822:	d107      	bne.n	8010834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801082c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 febc 	bl	80115ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	691b      	ldr	r3, [r3, #16]
 801083a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801083e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010842:	d10e      	bne.n	8010862 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	68db      	ldr	r3, [r3, #12]
 801084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801084e:	2b80      	cmp	r3, #128	; 0x80
 8010850:	d107      	bne.n	8010862 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801085a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f000 feaf 	bl	80115c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	691b      	ldr	r3, [r3, #16]
 8010868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801086c:	2b40      	cmp	r3, #64	; 0x40
 801086e:	d10e      	bne.n	801088e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801087a:	2b40      	cmp	r3, #64	; 0x40
 801087c:	d107      	bne.n	801088e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f000 f961 	bl	8010b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	691b      	ldr	r3, [r3, #16]
 8010894:	f003 0320 	and.w	r3, r3, #32
 8010898:	2b20      	cmp	r3, #32
 801089a:	d10e      	bne.n	80108ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	f003 0320 	and.w	r3, r3, #32
 80108a6:	2b20      	cmp	r3, #32
 80108a8:	d107      	bne.n	80108ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f06f 0220 	mvn.w	r2, #32
 80108b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f000 fe6f 	bl	8011598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80108ba:	bf00      	nop
 80108bc:	3708      	adds	r7, #8
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
	...

080108c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b086      	sub	sp, #24
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	60f8      	str	r0, [r7, #12]
 80108cc:	60b9      	str	r1, [r7, #8]
 80108ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80108d0:	2300      	movs	r3, #0
 80108d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d101      	bne.n	80108e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80108de:	2302      	movs	r3, #2
 80108e0:	e0ff      	b.n	8010ae2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2201      	movs	r2, #1
 80108e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2b14      	cmp	r3, #20
 80108ee:	f200 80f0 	bhi.w	8010ad2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80108f2:	a201      	add	r2, pc, #4	; (adr r2, 80108f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80108f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f8:	0801094d 	.word	0x0801094d
 80108fc:	08010ad3 	.word	0x08010ad3
 8010900:	08010ad3 	.word	0x08010ad3
 8010904:	08010ad3 	.word	0x08010ad3
 8010908:	0801098d 	.word	0x0801098d
 801090c:	08010ad3 	.word	0x08010ad3
 8010910:	08010ad3 	.word	0x08010ad3
 8010914:	08010ad3 	.word	0x08010ad3
 8010918:	080109cf 	.word	0x080109cf
 801091c:	08010ad3 	.word	0x08010ad3
 8010920:	08010ad3 	.word	0x08010ad3
 8010924:	08010ad3 	.word	0x08010ad3
 8010928:	08010a0f 	.word	0x08010a0f
 801092c:	08010ad3 	.word	0x08010ad3
 8010930:	08010ad3 	.word	0x08010ad3
 8010934:	08010ad3 	.word	0x08010ad3
 8010938:	08010a51 	.word	0x08010a51
 801093c:	08010ad3 	.word	0x08010ad3
 8010940:	08010ad3 	.word	0x08010ad3
 8010944:	08010ad3 	.word	0x08010ad3
 8010948:	08010a91 	.word	0x08010a91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	68b9      	ldr	r1, [r7, #8]
 8010952:	4618      	mov	r0, r3
 8010954:	f000 fa88 	bl	8010e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	699a      	ldr	r2, [r3, #24]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f042 0208 	orr.w	r2, r2, #8
 8010966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	699a      	ldr	r2, [r3, #24]
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	f022 0204 	bic.w	r2, r2, #4
 8010976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	6999      	ldr	r1, [r3, #24]
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	691a      	ldr	r2, [r3, #16]
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	430a      	orrs	r2, r1
 8010988:	619a      	str	r2, [r3, #24]
      break;
 801098a:	e0a5      	b.n	8010ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	68b9      	ldr	r1, [r7, #8]
 8010992:	4618      	mov	r0, r3
 8010994:	f000 faf8 	bl	8010f88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	699a      	ldr	r2, [r3, #24]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80109a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	699a      	ldr	r2, [r3, #24]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80109b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	6999      	ldr	r1, [r3, #24]
 80109be:	68bb      	ldr	r3, [r7, #8]
 80109c0:	691b      	ldr	r3, [r3, #16]
 80109c2:	021a      	lsls	r2, r3, #8
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	430a      	orrs	r2, r1
 80109ca:	619a      	str	r2, [r3, #24]
      break;
 80109cc:	e084      	b.n	8010ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	68b9      	ldr	r1, [r7, #8]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f000 fb61 	bl	801109c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	69da      	ldr	r2, [r3, #28]
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f042 0208 	orr.w	r2, r2, #8
 80109e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	69da      	ldr	r2, [r3, #28]
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f022 0204 	bic.w	r2, r2, #4
 80109f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	69d9      	ldr	r1, [r3, #28]
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	691a      	ldr	r2, [r3, #16]
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	430a      	orrs	r2, r1
 8010a0a:	61da      	str	r2, [r3, #28]
      break;
 8010a0c:	e064      	b.n	8010ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	68b9      	ldr	r1, [r7, #8]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f000 fbc9 	bl	80111ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	69da      	ldr	r2, [r3, #28]
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	69da      	ldr	r2, [r3, #28]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	69d9      	ldr	r1, [r3, #28]
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	691b      	ldr	r3, [r3, #16]
 8010a44:	021a      	lsls	r2, r3, #8
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	430a      	orrs	r2, r1
 8010a4c:	61da      	str	r2, [r3, #28]
      break;
 8010a4e:	e043      	b.n	8010ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	68b9      	ldr	r1, [r7, #8]
 8010a56:	4618      	mov	r0, r3
 8010a58:	f000 fc12 	bl	8011280 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	f042 0208 	orr.w	r2, r2, #8
 8010a6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	f022 0204 	bic.w	r2, r2, #4
 8010a7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	691a      	ldr	r2, [r3, #16]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	430a      	orrs	r2, r1
 8010a8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010a8e:	e023      	b.n	8010ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	68b9      	ldr	r1, [r7, #8]
 8010a96:	4618      	mov	r0, r3
 8010a98:	f000 fc56 	bl	8011348 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010aaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010aba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	691b      	ldr	r3, [r3, #16]
 8010ac6:	021a      	lsls	r2, r3, #8
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	430a      	orrs	r2, r1
 8010ace:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010ad0:	e002      	b.n	8010ad8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8010ad6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3718      	adds	r7, #24
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop

08010aec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b083      	sub	sp, #12
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010af4:	bf00      	nop
 8010af6:	370c      	adds	r7, #12
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010b08:	bf00      	nop
 8010b0a:	370c      	adds	r7, #12
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr

08010b14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010b1c:	bf00      	nop
 8010b1e:	370c      	adds	r7, #12
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr

08010b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b083      	sub	sp, #12
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010b30:	bf00      	nop
 8010b32:	370c      	adds	r7, #12
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr

08010b3c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b083      	sub	sp, #12
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010b44:	bf00      	nop
 8010b46:	370c      	adds	r7, #12
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b083      	sub	sp, #12
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010b58:	bf00      	nop
 8010b5a:	370c      	adds	r7, #12
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr

08010b64 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010b6c:	bf00      	nop
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr

08010b78 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b84:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d107      	bne.n	8010ba0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2201      	movs	r2, #1
 8010b94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2201      	movs	r2, #1
 8010b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010b9e:	e02a      	b.n	8010bf6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d107      	bne.n	8010bba <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2202      	movs	r2, #2
 8010bae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010bb8:	e01d      	b.n	8010bf6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d107      	bne.n	8010bd4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2204      	movs	r2, #4
 8010bc8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2201      	movs	r2, #1
 8010bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010bd2:	e010      	b.n	8010bf6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d107      	bne.n	8010bee <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2208      	movs	r2, #8
 8010be2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2201      	movs	r2, #1
 8010be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010bec:	e003      	b.n	8010bf6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8010bf6:	68f8      	ldr	r0, [r7, #12]
 8010bf8:	f7ff ffb4 	bl	8010b64 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	771a      	strb	r2, [r3, #28]
}
 8010c02:	bf00      	nop
 8010c04:	3710      	adds	r7, #16
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}

08010c0a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010c0a:	b580      	push	{r7, lr}
 8010c0c:	b084      	sub	sp, #16
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c16:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d10b      	bne.n	8010c3a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	2201      	movs	r2, #1
 8010c26:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	69db      	ldr	r3, [r3, #28]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d136      	bne.n	8010c9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	2201      	movs	r2, #1
 8010c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010c38:	e031      	b.n	8010c9e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d10b      	bne.n	8010c5c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2202      	movs	r2, #2
 8010c48:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	69db      	ldr	r3, [r3, #28]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d125      	bne.n	8010c9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2201      	movs	r2, #1
 8010c56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010c5a:	e020      	b.n	8010c9e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d10b      	bne.n	8010c7e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	2204      	movs	r2, #4
 8010c6a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	69db      	ldr	r3, [r3, #28]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d114      	bne.n	8010c9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2201      	movs	r2, #1
 8010c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010c7c:	e00f      	b.n	8010c9e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d10a      	bne.n	8010c9e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2208      	movs	r2, #8
 8010c8c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	69db      	ldr	r3, [r3, #28]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d103      	bne.n	8010c9e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	2201      	movs	r2, #1
 8010c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c9e:	68f8      	ldr	r0, [r7, #12]
 8010ca0:	f7ff ff42 	bl	8010b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	771a      	strb	r2, [r3, #28]
}
 8010caa:	bf00      	nop
 8010cac:	3710      	adds	r7, #16
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010cb2:	b580      	push	{r7, lr}
 8010cb4:	b084      	sub	sp, #16
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cbe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d103      	bne.n	8010cd2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2201      	movs	r2, #1
 8010cce:	771a      	strb	r2, [r3, #28]
 8010cd0:	e019      	b.n	8010d06 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cd6:	687a      	ldr	r2, [r7, #4]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d103      	bne.n	8010ce4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	2202      	movs	r2, #2
 8010ce0:	771a      	strb	r2, [r3, #28]
 8010ce2:	e010      	b.n	8010d06 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ce8:	687a      	ldr	r2, [r7, #4]
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d103      	bne.n	8010cf6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	2204      	movs	r2, #4
 8010cf2:	771a      	strb	r2, [r3, #28]
 8010cf4:	e007      	b.n	8010d06 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d102      	bne.n	8010d06 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	2208      	movs	r2, #8
 8010d04:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	f7ff ff18 	bl	8010b3c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	2200      	movs	r2, #0
 8010d10:	771a      	strb	r2, [r3, #28]
}
 8010d12:	bf00      	nop
 8010d14:	3710      	adds	r7, #16
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
	...

08010d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b085      	sub	sp, #20
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	4a44      	ldr	r2, [pc, #272]	; (8010e40 <TIM_Base_SetConfig+0x124>)
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d013      	beq.n	8010d5c <TIM_Base_SetConfig+0x40>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d3a:	d00f      	beq.n	8010d5c <TIM_Base_SetConfig+0x40>
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	4a41      	ldr	r2, [pc, #260]	; (8010e44 <TIM_Base_SetConfig+0x128>)
 8010d40:	4293      	cmp	r3, r2
 8010d42:	d00b      	beq.n	8010d5c <TIM_Base_SetConfig+0x40>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	4a40      	ldr	r2, [pc, #256]	; (8010e48 <TIM_Base_SetConfig+0x12c>)
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	d007      	beq.n	8010d5c <TIM_Base_SetConfig+0x40>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	4a3f      	ldr	r2, [pc, #252]	; (8010e4c <TIM_Base_SetConfig+0x130>)
 8010d50:	4293      	cmp	r3, r2
 8010d52:	d003      	beq.n	8010d5c <TIM_Base_SetConfig+0x40>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	4a3e      	ldr	r2, [pc, #248]	; (8010e50 <TIM_Base_SetConfig+0x134>)
 8010d58:	4293      	cmp	r3, r2
 8010d5a:	d108      	bne.n	8010d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	68fa      	ldr	r2, [r7, #12]
 8010d6a:	4313      	orrs	r3, r2
 8010d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	4a33      	ldr	r2, [pc, #204]	; (8010e40 <TIM_Base_SetConfig+0x124>)
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d027      	beq.n	8010dc6 <TIM_Base_SetConfig+0xaa>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d7c:	d023      	beq.n	8010dc6 <TIM_Base_SetConfig+0xaa>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	4a30      	ldr	r2, [pc, #192]	; (8010e44 <TIM_Base_SetConfig+0x128>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d01f      	beq.n	8010dc6 <TIM_Base_SetConfig+0xaa>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	4a2f      	ldr	r2, [pc, #188]	; (8010e48 <TIM_Base_SetConfig+0x12c>)
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d01b      	beq.n	8010dc6 <TIM_Base_SetConfig+0xaa>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	4a2e      	ldr	r2, [pc, #184]	; (8010e4c <TIM_Base_SetConfig+0x130>)
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d017      	beq.n	8010dc6 <TIM_Base_SetConfig+0xaa>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	4a2d      	ldr	r2, [pc, #180]	; (8010e50 <TIM_Base_SetConfig+0x134>)
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d013      	beq.n	8010dc6 <TIM_Base_SetConfig+0xaa>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4a2c      	ldr	r2, [pc, #176]	; (8010e54 <TIM_Base_SetConfig+0x138>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d00f      	beq.n	8010dc6 <TIM_Base_SetConfig+0xaa>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	4a2b      	ldr	r2, [pc, #172]	; (8010e58 <TIM_Base_SetConfig+0x13c>)
 8010daa:	4293      	cmp	r3, r2
 8010dac:	d00b      	beq.n	8010dc6 <TIM_Base_SetConfig+0xaa>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	4a2a      	ldr	r2, [pc, #168]	; (8010e5c <TIM_Base_SetConfig+0x140>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d007      	beq.n	8010dc6 <TIM_Base_SetConfig+0xaa>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	4a29      	ldr	r2, [pc, #164]	; (8010e60 <TIM_Base_SetConfig+0x144>)
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	d003      	beq.n	8010dc6 <TIM_Base_SetConfig+0xaa>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	4a28      	ldr	r2, [pc, #160]	; (8010e64 <TIM_Base_SetConfig+0x148>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d108      	bne.n	8010dd8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	68fa      	ldr	r2, [r7, #12]
 8010dd4:	4313      	orrs	r3, r2
 8010dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	695b      	ldr	r3, [r3, #20]
 8010de2:	4313      	orrs	r3, r2
 8010de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	68fa      	ldr	r2, [r7, #12]
 8010dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	689a      	ldr	r2, [r3, #8]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	681a      	ldr	r2, [r3, #0]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4a10      	ldr	r2, [pc, #64]	; (8010e40 <TIM_Base_SetConfig+0x124>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d00f      	beq.n	8010e24 <TIM_Base_SetConfig+0x108>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	4a12      	ldr	r2, [pc, #72]	; (8010e50 <TIM_Base_SetConfig+0x134>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d00b      	beq.n	8010e24 <TIM_Base_SetConfig+0x108>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	4a11      	ldr	r2, [pc, #68]	; (8010e54 <TIM_Base_SetConfig+0x138>)
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d007      	beq.n	8010e24 <TIM_Base_SetConfig+0x108>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	4a10      	ldr	r2, [pc, #64]	; (8010e58 <TIM_Base_SetConfig+0x13c>)
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d003      	beq.n	8010e24 <TIM_Base_SetConfig+0x108>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	4a0f      	ldr	r2, [pc, #60]	; (8010e5c <TIM_Base_SetConfig+0x140>)
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d103      	bne.n	8010e2c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	691a      	ldr	r2, [r3, #16]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2201      	movs	r2, #1
 8010e30:	615a      	str	r2, [r3, #20]
}
 8010e32:	bf00      	nop
 8010e34:	3714      	adds	r7, #20
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr
 8010e3e:	bf00      	nop
 8010e40:	40010000 	.word	0x40010000
 8010e44:	40000400 	.word	0x40000400
 8010e48:	40000800 	.word	0x40000800
 8010e4c:	40000c00 	.word	0x40000c00
 8010e50:	40010400 	.word	0x40010400
 8010e54:	40014000 	.word	0x40014000
 8010e58:	40014400 	.word	0x40014400
 8010e5c:	40014800 	.word	0x40014800
 8010e60:	4000e000 	.word	0x4000e000
 8010e64:	4000e400 	.word	0x4000e400

08010e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b087      	sub	sp, #28
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6a1b      	ldr	r3, [r3, #32]
 8010e76:	f023 0201 	bic.w	r2, r3, #1
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6a1b      	ldr	r3, [r3, #32]
 8010e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	699b      	ldr	r3, [r3, #24]
 8010e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010e90:	68fa      	ldr	r2, [r7, #12]
 8010e92:	4b37      	ldr	r3, [pc, #220]	; (8010f70 <TIM_OC1_SetConfig+0x108>)
 8010e94:	4013      	ands	r3, r2
 8010e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	f023 0303 	bic.w	r3, r3, #3
 8010e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	68fa      	ldr	r2, [r7, #12]
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	f023 0302 	bic.w	r3, r3, #2
 8010eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	689b      	ldr	r3, [r3, #8]
 8010eb6:	697a      	ldr	r2, [r7, #20]
 8010eb8:	4313      	orrs	r3, r2
 8010eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	4a2d      	ldr	r2, [pc, #180]	; (8010f74 <TIM_OC1_SetConfig+0x10c>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d00f      	beq.n	8010ee4 <TIM_OC1_SetConfig+0x7c>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	4a2c      	ldr	r2, [pc, #176]	; (8010f78 <TIM_OC1_SetConfig+0x110>)
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	d00b      	beq.n	8010ee4 <TIM_OC1_SetConfig+0x7c>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4a2b      	ldr	r2, [pc, #172]	; (8010f7c <TIM_OC1_SetConfig+0x114>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d007      	beq.n	8010ee4 <TIM_OC1_SetConfig+0x7c>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	4a2a      	ldr	r2, [pc, #168]	; (8010f80 <TIM_OC1_SetConfig+0x118>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d003      	beq.n	8010ee4 <TIM_OC1_SetConfig+0x7c>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4a29      	ldr	r2, [pc, #164]	; (8010f84 <TIM_OC1_SetConfig+0x11c>)
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d10c      	bne.n	8010efe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	f023 0308 	bic.w	r3, r3, #8
 8010eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	697a      	ldr	r2, [r7, #20]
 8010ef2:	4313      	orrs	r3, r2
 8010ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	f023 0304 	bic.w	r3, r3, #4
 8010efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	4a1c      	ldr	r2, [pc, #112]	; (8010f74 <TIM_OC1_SetConfig+0x10c>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d00f      	beq.n	8010f26 <TIM_OC1_SetConfig+0xbe>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4a1b      	ldr	r2, [pc, #108]	; (8010f78 <TIM_OC1_SetConfig+0x110>)
 8010f0a:	4293      	cmp	r3, r2
 8010f0c:	d00b      	beq.n	8010f26 <TIM_OC1_SetConfig+0xbe>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	4a1a      	ldr	r2, [pc, #104]	; (8010f7c <TIM_OC1_SetConfig+0x114>)
 8010f12:	4293      	cmp	r3, r2
 8010f14:	d007      	beq.n	8010f26 <TIM_OC1_SetConfig+0xbe>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4a19      	ldr	r2, [pc, #100]	; (8010f80 <TIM_OC1_SetConfig+0x118>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d003      	beq.n	8010f26 <TIM_OC1_SetConfig+0xbe>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	4a18      	ldr	r2, [pc, #96]	; (8010f84 <TIM_OC1_SetConfig+0x11c>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d111      	bne.n	8010f4a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010f26:	693b      	ldr	r3, [r7, #16]
 8010f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	695b      	ldr	r3, [r3, #20]
 8010f3a:	693a      	ldr	r2, [r7, #16]
 8010f3c:	4313      	orrs	r3, r2
 8010f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	699b      	ldr	r3, [r3, #24]
 8010f44:	693a      	ldr	r2, [r7, #16]
 8010f46:	4313      	orrs	r3, r2
 8010f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	693a      	ldr	r2, [r7, #16]
 8010f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	68fa      	ldr	r2, [r7, #12]
 8010f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	685a      	ldr	r2, [r3, #4]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	697a      	ldr	r2, [r7, #20]
 8010f62:	621a      	str	r2, [r3, #32]
}
 8010f64:	bf00      	nop
 8010f66:	371c      	adds	r7, #28
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6e:	4770      	bx	lr
 8010f70:	fffeff8f 	.word	0xfffeff8f
 8010f74:	40010000 	.word	0x40010000
 8010f78:	40010400 	.word	0x40010400
 8010f7c:	40014000 	.word	0x40014000
 8010f80:	40014400 	.word	0x40014400
 8010f84:	40014800 	.word	0x40014800

08010f88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b087      	sub	sp, #28
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6a1b      	ldr	r3, [r3, #32]
 8010f96:	f023 0210 	bic.w	r2, r3, #16
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6a1b      	ldr	r3, [r3, #32]
 8010fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	699b      	ldr	r3, [r3, #24]
 8010fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	4b34      	ldr	r3, [pc, #208]	; (8011084 <TIM_OC2_SetConfig+0xfc>)
 8010fb4:	4013      	ands	r3, r2
 8010fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	021b      	lsls	r3, r3, #8
 8010fc6:	68fa      	ldr	r2, [r7, #12]
 8010fc8:	4313      	orrs	r3, r2
 8010fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010fcc:	697b      	ldr	r3, [r7, #20]
 8010fce:	f023 0320 	bic.w	r3, r3, #32
 8010fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	689b      	ldr	r3, [r3, #8]
 8010fd8:	011b      	lsls	r3, r3, #4
 8010fda:	697a      	ldr	r2, [r7, #20]
 8010fdc:	4313      	orrs	r3, r2
 8010fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	4a29      	ldr	r2, [pc, #164]	; (8011088 <TIM_OC2_SetConfig+0x100>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d003      	beq.n	8010ff0 <TIM_OC2_SetConfig+0x68>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	4a28      	ldr	r2, [pc, #160]	; (801108c <TIM_OC2_SetConfig+0x104>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d10d      	bne.n	801100c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	011b      	lsls	r3, r3, #4
 8010ffe:	697a      	ldr	r2, [r7, #20]
 8011000:	4313      	orrs	r3, r2
 8011002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801100a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	4a1e      	ldr	r2, [pc, #120]	; (8011088 <TIM_OC2_SetConfig+0x100>)
 8011010:	4293      	cmp	r3, r2
 8011012:	d00f      	beq.n	8011034 <TIM_OC2_SetConfig+0xac>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	4a1d      	ldr	r2, [pc, #116]	; (801108c <TIM_OC2_SetConfig+0x104>)
 8011018:	4293      	cmp	r3, r2
 801101a:	d00b      	beq.n	8011034 <TIM_OC2_SetConfig+0xac>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4a1c      	ldr	r2, [pc, #112]	; (8011090 <TIM_OC2_SetConfig+0x108>)
 8011020:	4293      	cmp	r3, r2
 8011022:	d007      	beq.n	8011034 <TIM_OC2_SetConfig+0xac>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	4a1b      	ldr	r2, [pc, #108]	; (8011094 <TIM_OC2_SetConfig+0x10c>)
 8011028:	4293      	cmp	r3, r2
 801102a:	d003      	beq.n	8011034 <TIM_OC2_SetConfig+0xac>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	4a1a      	ldr	r2, [pc, #104]	; (8011098 <TIM_OC2_SetConfig+0x110>)
 8011030:	4293      	cmp	r3, r2
 8011032:	d113      	bne.n	801105c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801103a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	695b      	ldr	r3, [r3, #20]
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	693a      	ldr	r2, [r7, #16]
 801104c:	4313      	orrs	r3, r2
 801104e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	699b      	ldr	r3, [r3, #24]
 8011054:	009b      	lsls	r3, r3, #2
 8011056:	693a      	ldr	r2, [r7, #16]
 8011058:	4313      	orrs	r3, r2
 801105a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	693a      	ldr	r2, [r7, #16]
 8011060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	68fa      	ldr	r2, [r7, #12]
 8011066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	685a      	ldr	r2, [r3, #4]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	697a      	ldr	r2, [r7, #20]
 8011074:	621a      	str	r2, [r3, #32]
}
 8011076:	bf00      	nop
 8011078:	371c      	adds	r7, #28
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop
 8011084:	feff8fff 	.word	0xfeff8fff
 8011088:	40010000 	.word	0x40010000
 801108c:	40010400 	.word	0x40010400
 8011090:	40014000 	.word	0x40014000
 8011094:	40014400 	.word	0x40014400
 8011098:	40014800 	.word	0x40014800

0801109c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801109c:	b480      	push	{r7}
 801109e:	b087      	sub	sp, #28
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6a1b      	ldr	r3, [r3, #32]
 80110aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6a1b      	ldr	r3, [r3, #32]
 80110b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	69db      	ldr	r3, [r3, #28]
 80110c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80110c4:	68fa      	ldr	r2, [r7, #12]
 80110c6:	4b33      	ldr	r3, [pc, #204]	; (8011194 <TIM_OC3_SetConfig+0xf8>)
 80110c8:	4013      	ands	r3, r2
 80110ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f023 0303 	bic.w	r3, r3, #3
 80110d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	4313      	orrs	r3, r2
 80110dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80110e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	689b      	ldr	r3, [r3, #8]
 80110ea:	021b      	lsls	r3, r3, #8
 80110ec:	697a      	ldr	r2, [r7, #20]
 80110ee:	4313      	orrs	r3, r2
 80110f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4a28      	ldr	r2, [pc, #160]	; (8011198 <TIM_OC3_SetConfig+0xfc>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d003      	beq.n	8011102 <TIM_OC3_SetConfig+0x66>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4a27      	ldr	r2, [pc, #156]	; (801119c <TIM_OC3_SetConfig+0x100>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d10d      	bne.n	801111e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	021b      	lsls	r3, r3, #8
 8011110:	697a      	ldr	r2, [r7, #20]
 8011112:	4313      	orrs	r3, r2
 8011114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801111c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	4a1d      	ldr	r2, [pc, #116]	; (8011198 <TIM_OC3_SetConfig+0xfc>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d00f      	beq.n	8011146 <TIM_OC3_SetConfig+0xaa>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4a1c      	ldr	r2, [pc, #112]	; (801119c <TIM_OC3_SetConfig+0x100>)
 801112a:	4293      	cmp	r3, r2
 801112c:	d00b      	beq.n	8011146 <TIM_OC3_SetConfig+0xaa>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4a1b      	ldr	r2, [pc, #108]	; (80111a0 <TIM_OC3_SetConfig+0x104>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d007      	beq.n	8011146 <TIM_OC3_SetConfig+0xaa>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	4a1a      	ldr	r2, [pc, #104]	; (80111a4 <TIM_OC3_SetConfig+0x108>)
 801113a:	4293      	cmp	r3, r2
 801113c:	d003      	beq.n	8011146 <TIM_OC3_SetConfig+0xaa>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	4a19      	ldr	r2, [pc, #100]	; (80111a8 <TIM_OC3_SetConfig+0x10c>)
 8011142:	4293      	cmp	r3, r2
 8011144:	d113      	bne.n	801116e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801114c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	695b      	ldr	r3, [r3, #20]
 801115a:	011b      	lsls	r3, r3, #4
 801115c:	693a      	ldr	r2, [r7, #16]
 801115e:	4313      	orrs	r3, r2
 8011160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	699b      	ldr	r3, [r3, #24]
 8011166:	011b      	lsls	r3, r3, #4
 8011168:	693a      	ldr	r2, [r7, #16]
 801116a:	4313      	orrs	r3, r2
 801116c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	693a      	ldr	r2, [r7, #16]
 8011172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	68fa      	ldr	r2, [r7, #12]
 8011178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	685a      	ldr	r2, [r3, #4]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	697a      	ldr	r2, [r7, #20]
 8011186:	621a      	str	r2, [r3, #32]
}
 8011188:	bf00      	nop
 801118a:	371c      	adds	r7, #28
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr
 8011194:	fffeff8f 	.word	0xfffeff8f
 8011198:	40010000 	.word	0x40010000
 801119c:	40010400 	.word	0x40010400
 80111a0:	40014000 	.word	0x40014000
 80111a4:	40014400 	.word	0x40014400
 80111a8:	40014800 	.word	0x40014800

080111ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b087      	sub	sp, #28
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6a1b      	ldr	r3, [r3, #32]
 80111ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6a1b      	ldr	r3, [r3, #32]
 80111c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	69db      	ldr	r3, [r3, #28]
 80111d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80111d4:	68fa      	ldr	r2, [r7, #12]
 80111d6:	4b24      	ldr	r3, [pc, #144]	; (8011268 <TIM_OC4_SetConfig+0xbc>)
 80111d8:	4013      	ands	r3, r2
 80111da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80111e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	021b      	lsls	r3, r3, #8
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	4313      	orrs	r3, r2
 80111ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80111f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	689b      	ldr	r3, [r3, #8]
 80111fc:	031b      	lsls	r3, r3, #12
 80111fe:	693a      	ldr	r2, [r7, #16]
 8011200:	4313      	orrs	r3, r2
 8011202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	4a19      	ldr	r2, [pc, #100]	; (801126c <TIM_OC4_SetConfig+0xc0>)
 8011208:	4293      	cmp	r3, r2
 801120a:	d00f      	beq.n	801122c <TIM_OC4_SetConfig+0x80>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4a18      	ldr	r2, [pc, #96]	; (8011270 <TIM_OC4_SetConfig+0xc4>)
 8011210:	4293      	cmp	r3, r2
 8011212:	d00b      	beq.n	801122c <TIM_OC4_SetConfig+0x80>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	4a17      	ldr	r2, [pc, #92]	; (8011274 <TIM_OC4_SetConfig+0xc8>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d007      	beq.n	801122c <TIM_OC4_SetConfig+0x80>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	4a16      	ldr	r2, [pc, #88]	; (8011278 <TIM_OC4_SetConfig+0xcc>)
 8011220:	4293      	cmp	r3, r2
 8011222:	d003      	beq.n	801122c <TIM_OC4_SetConfig+0x80>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	4a15      	ldr	r2, [pc, #84]	; (801127c <TIM_OC4_SetConfig+0xd0>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d109      	bne.n	8011240 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	695b      	ldr	r3, [r3, #20]
 8011238:	019b      	lsls	r3, r3, #6
 801123a:	697a      	ldr	r2, [r7, #20]
 801123c:	4313      	orrs	r3, r2
 801123e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	697a      	ldr	r2, [r7, #20]
 8011244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	68fa      	ldr	r2, [r7, #12]
 801124a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	685a      	ldr	r2, [r3, #4]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	693a      	ldr	r2, [r7, #16]
 8011258:	621a      	str	r2, [r3, #32]
}
 801125a:	bf00      	nop
 801125c:	371c      	adds	r7, #28
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr
 8011266:	bf00      	nop
 8011268:	feff8fff 	.word	0xfeff8fff
 801126c:	40010000 	.word	0x40010000
 8011270:	40010400 	.word	0x40010400
 8011274:	40014000 	.word	0x40014000
 8011278:	40014400 	.word	0x40014400
 801127c:	40014800 	.word	0x40014800

08011280 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011280:	b480      	push	{r7}
 8011282:	b087      	sub	sp, #28
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6a1b      	ldr	r3, [r3, #32]
 801128e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6a1b      	ldr	r3, [r3, #32]
 801129a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80112a8:	68fa      	ldr	r2, [r7, #12]
 80112aa:	4b21      	ldr	r3, [pc, #132]	; (8011330 <TIM_OC5_SetConfig+0xb0>)
 80112ac:	4013      	ands	r3, r2
 80112ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	68fa      	ldr	r2, [r7, #12]
 80112b6:	4313      	orrs	r3, r2
 80112b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80112c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	689b      	ldr	r3, [r3, #8]
 80112c6:	041b      	lsls	r3, r3, #16
 80112c8:	693a      	ldr	r2, [r7, #16]
 80112ca:	4313      	orrs	r3, r2
 80112cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4a18      	ldr	r2, [pc, #96]	; (8011334 <TIM_OC5_SetConfig+0xb4>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d00f      	beq.n	80112f6 <TIM_OC5_SetConfig+0x76>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a17      	ldr	r2, [pc, #92]	; (8011338 <TIM_OC5_SetConfig+0xb8>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d00b      	beq.n	80112f6 <TIM_OC5_SetConfig+0x76>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4a16      	ldr	r2, [pc, #88]	; (801133c <TIM_OC5_SetConfig+0xbc>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d007      	beq.n	80112f6 <TIM_OC5_SetConfig+0x76>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4a15      	ldr	r2, [pc, #84]	; (8011340 <TIM_OC5_SetConfig+0xc0>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d003      	beq.n	80112f6 <TIM_OC5_SetConfig+0x76>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4a14      	ldr	r2, [pc, #80]	; (8011344 <TIM_OC5_SetConfig+0xc4>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d109      	bne.n	801130a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80112fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	695b      	ldr	r3, [r3, #20]
 8011302:	021b      	lsls	r3, r3, #8
 8011304:	697a      	ldr	r2, [r7, #20]
 8011306:	4313      	orrs	r3, r2
 8011308:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	697a      	ldr	r2, [r7, #20]
 801130e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	68fa      	ldr	r2, [r7, #12]
 8011314:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	685a      	ldr	r2, [r3, #4]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	693a      	ldr	r2, [r7, #16]
 8011322:	621a      	str	r2, [r3, #32]
}
 8011324:	bf00      	nop
 8011326:	371c      	adds	r7, #28
 8011328:	46bd      	mov	sp, r7
 801132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132e:	4770      	bx	lr
 8011330:	fffeff8f 	.word	0xfffeff8f
 8011334:	40010000 	.word	0x40010000
 8011338:	40010400 	.word	0x40010400
 801133c:	40014000 	.word	0x40014000
 8011340:	40014400 	.word	0x40014400
 8011344:	40014800 	.word	0x40014800

08011348 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011348:	b480      	push	{r7}
 801134a:	b087      	sub	sp, #28
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6a1b      	ldr	r3, [r3, #32]
 8011356:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6a1b      	ldr	r3, [r3, #32]
 8011362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801136e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011370:	68fa      	ldr	r2, [r7, #12]
 8011372:	4b22      	ldr	r3, [pc, #136]	; (80113fc <TIM_OC6_SetConfig+0xb4>)
 8011374:	4013      	ands	r3, r2
 8011376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	021b      	lsls	r3, r3, #8
 801137e:	68fa      	ldr	r2, [r7, #12]
 8011380:	4313      	orrs	r3, r2
 8011382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801138a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	689b      	ldr	r3, [r3, #8]
 8011390:	051b      	lsls	r3, r3, #20
 8011392:	693a      	ldr	r2, [r7, #16]
 8011394:	4313      	orrs	r3, r2
 8011396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4a19      	ldr	r2, [pc, #100]	; (8011400 <TIM_OC6_SetConfig+0xb8>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d00f      	beq.n	80113c0 <TIM_OC6_SetConfig+0x78>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4a18      	ldr	r2, [pc, #96]	; (8011404 <TIM_OC6_SetConfig+0xbc>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d00b      	beq.n	80113c0 <TIM_OC6_SetConfig+0x78>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	4a17      	ldr	r2, [pc, #92]	; (8011408 <TIM_OC6_SetConfig+0xc0>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d007      	beq.n	80113c0 <TIM_OC6_SetConfig+0x78>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4a16      	ldr	r2, [pc, #88]	; (801140c <TIM_OC6_SetConfig+0xc4>)
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d003      	beq.n	80113c0 <TIM_OC6_SetConfig+0x78>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	4a15      	ldr	r2, [pc, #84]	; (8011410 <TIM_OC6_SetConfig+0xc8>)
 80113bc:	4293      	cmp	r3, r2
 80113be:	d109      	bne.n	80113d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80113c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	695b      	ldr	r3, [r3, #20]
 80113cc:	029b      	lsls	r3, r3, #10
 80113ce:	697a      	ldr	r2, [r7, #20]
 80113d0:	4313      	orrs	r3, r2
 80113d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	697a      	ldr	r2, [r7, #20]
 80113d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	68fa      	ldr	r2, [r7, #12]
 80113de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	685a      	ldr	r2, [r3, #4]
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	693a      	ldr	r2, [r7, #16]
 80113ec:	621a      	str	r2, [r3, #32]
}
 80113ee:	bf00      	nop
 80113f0:	371c      	adds	r7, #28
 80113f2:	46bd      	mov	sp, r7
 80113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f8:	4770      	bx	lr
 80113fa:	bf00      	nop
 80113fc:	feff8fff 	.word	0xfeff8fff
 8011400:	40010000 	.word	0x40010000
 8011404:	40010400 	.word	0x40010400
 8011408:	40014000 	.word	0x40014000
 801140c:	40014400 	.word	0x40014400
 8011410:	40014800 	.word	0x40014800

08011414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011414:	b480      	push	{r7}
 8011416:	b087      	sub	sp, #28
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	f003 031f 	and.w	r3, r3, #31
 8011426:	2201      	movs	r2, #1
 8011428:	fa02 f303 	lsl.w	r3, r2, r3
 801142c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	6a1a      	ldr	r2, [r3, #32]
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	43db      	mvns	r3, r3
 8011436:	401a      	ands	r2, r3
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	6a1a      	ldr	r2, [r3, #32]
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	f003 031f 	and.w	r3, r3, #31
 8011446:	6879      	ldr	r1, [r7, #4]
 8011448:	fa01 f303 	lsl.w	r3, r1, r3
 801144c:	431a      	orrs	r2, r3
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	621a      	str	r2, [r3, #32]
}
 8011452:	bf00      	nop
 8011454:	371c      	adds	r7, #28
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr
	...

08011460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011460:	b480      	push	{r7}
 8011462:	b085      	sub	sp, #20
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011470:	2b01      	cmp	r3, #1
 8011472:	d101      	bne.n	8011478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011474:	2302      	movs	r3, #2
 8011476:	e077      	b.n	8011568 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2201      	movs	r2, #1
 801147c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2202      	movs	r2, #2
 8011484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	689b      	ldr	r3, [r3, #8]
 8011496:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	4a35      	ldr	r2, [pc, #212]	; (8011574 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801149e:	4293      	cmp	r3, r2
 80114a0:	d004      	beq.n	80114ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	4a34      	ldr	r2, [pc, #208]	; (8011578 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80114a8:	4293      	cmp	r3, r2
 80114aa:	d108      	bne.n	80114be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80114b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	68fa      	ldr	r2, [r7, #12]
 80114ba:	4313      	orrs	r3, r2
 80114bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	68fa      	ldr	r2, [r7, #12]
 80114cc:	4313      	orrs	r3, r2
 80114ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	68fa      	ldr	r2, [r7, #12]
 80114d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	4a25      	ldr	r2, [pc, #148]	; (8011574 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80114de:	4293      	cmp	r3, r2
 80114e0:	d02c      	beq.n	801153c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114ea:	d027      	beq.n	801153c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4a22      	ldr	r2, [pc, #136]	; (801157c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d022      	beq.n	801153c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	4a21      	ldr	r2, [pc, #132]	; (8011580 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d01d      	beq.n	801153c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4a1f      	ldr	r2, [pc, #124]	; (8011584 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011506:	4293      	cmp	r3, r2
 8011508:	d018      	beq.n	801153c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	4a1a      	ldr	r2, [pc, #104]	; (8011578 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011510:	4293      	cmp	r3, r2
 8011512:	d013      	beq.n	801153c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4a1b      	ldr	r2, [pc, #108]	; (8011588 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d00e      	beq.n	801153c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	4a1a      	ldr	r2, [pc, #104]	; (801158c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011524:	4293      	cmp	r3, r2
 8011526:	d009      	beq.n	801153c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	4a18      	ldr	r2, [pc, #96]	; (8011590 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801152e:	4293      	cmp	r3, r2
 8011530:	d004      	beq.n	801153c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	4a17      	ldr	r2, [pc, #92]	; (8011594 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011538:	4293      	cmp	r3, r2
 801153a:	d10c      	bne.n	8011556 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	689b      	ldr	r3, [r3, #8]
 8011548:	68ba      	ldr	r2, [r7, #8]
 801154a:	4313      	orrs	r3, r2
 801154c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	68ba      	ldr	r2, [r7, #8]
 8011554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2201      	movs	r2, #1
 801155a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2200      	movs	r2, #0
 8011562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011566:	2300      	movs	r3, #0
}
 8011568:	4618      	mov	r0, r3
 801156a:	3714      	adds	r7, #20
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr
 8011574:	40010000 	.word	0x40010000
 8011578:	40010400 	.word	0x40010400
 801157c:	40000400 	.word	0x40000400
 8011580:	40000800 	.word	0x40000800
 8011584:	40000c00 	.word	0x40000c00
 8011588:	40001800 	.word	0x40001800
 801158c:	40014000 	.word	0x40014000
 8011590:	4000e000 	.word	0x4000e000
 8011594:	4000e400 	.word	0x4000e400

08011598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80115a0:	bf00      	nop
 80115a2:	370c      	adds	r7, #12
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr

080115ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80115ac:	b480      	push	{r7}
 80115ae:	b083      	sub	sp, #12
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80115b4:	bf00      	nop
 80115b6:	370c      	adds	r7, #12
 80115b8:	46bd      	mov	sp, r7
 80115ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115be:	4770      	bx	lr

080115c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80115c8:	bf00      	nop
 80115ca:	370c      	adds	r7, #12
 80115cc:	46bd      	mov	sp, r7
 80115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d2:	4770      	bx	lr

080115d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d101      	bne.n	80115e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80115e2:	2301      	movs	r3, #1
 80115e4:	e042      	b.n	801166c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d106      	bne.n	80115fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2200      	movs	r2, #0
 80115f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f7f2 f879 	bl	80036f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2224      	movs	r2, #36	; 0x24
 8011602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	681a      	ldr	r2, [r3, #0]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	f022 0201 	bic.w	r2, r2, #1
 8011614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f000 f82c 	bl	8011674 <UART_SetConfig>
 801161c:	4603      	mov	r3, r0
 801161e:	2b01      	cmp	r3, #1
 8011620:	d101      	bne.n	8011626 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011622:	2301      	movs	r3, #1
 8011624:	e022      	b.n	801166c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801162a:	2b00      	cmp	r3, #0
 801162c:	d002      	beq.n	8011634 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f000 fe8c 	bl	801234c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	685a      	ldr	r2, [r3, #4]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	689a      	ldr	r2, [r3, #8]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f042 0201 	orr.w	r2, r2, #1
 8011662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f000 ff13 	bl	8012490 <UART_CheckIdleState>
 801166a:	4603      	mov	r3, r0
}
 801166c:	4618      	mov	r0, r3
 801166e:	3708      	adds	r7, #8
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011678:	b092      	sub	sp, #72	; 0x48
 801167a:	af00      	add	r7, sp, #0
 801167c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801167e:	2300      	movs	r3, #0
 8011680:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	689a      	ldr	r2, [r3, #8]
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	691b      	ldr	r3, [r3, #16]
 801168c:	431a      	orrs	r2, r3
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	695b      	ldr	r3, [r3, #20]
 8011692:	431a      	orrs	r2, r3
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	69db      	ldr	r3, [r3, #28]
 8011698:	4313      	orrs	r3, r2
 801169a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	681a      	ldr	r2, [r3, #0]
 80116a2:	4bbe      	ldr	r3, [pc, #760]	; (801199c <UART_SetConfig+0x328>)
 80116a4:	4013      	ands	r3, r2
 80116a6:	697a      	ldr	r2, [r7, #20]
 80116a8:	6812      	ldr	r2, [r2, #0]
 80116aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80116ac:	430b      	orrs	r3, r1
 80116ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	68da      	ldr	r2, [r3, #12]
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	430a      	orrs	r2, r1
 80116c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	699b      	ldr	r3, [r3, #24]
 80116ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	4ab3      	ldr	r2, [pc, #716]	; (80119a0 <UART_SetConfig+0x32c>)
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d004      	beq.n	80116e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	6a1b      	ldr	r3, [r3, #32]
 80116da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116dc:	4313      	orrs	r3, r2
 80116de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	689a      	ldr	r2, [r3, #8]
 80116e6:	4baf      	ldr	r3, [pc, #700]	; (80119a4 <UART_SetConfig+0x330>)
 80116e8:	4013      	ands	r3, r2
 80116ea:	697a      	ldr	r2, [r7, #20]
 80116ec:	6812      	ldr	r2, [r2, #0]
 80116ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80116f0:	430b      	orrs	r3, r1
 80116f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116fa:	f023 010f 	bic.w	r1, r3, #15
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	430a      	orrs	r2, r1
 8011708:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	4aa6      	ldr	r2, [pc, #664]	; (80119a8 <UART_SetConfig+0x334>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d177      	bne.n	8011804 <UART_SetConfig+0x190>
 8011714:	4ba5      	ldr	r3, [pc, #660]	; (80119ac <UART_SetConfig+0x338>)
 8011716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801171c:	2b28      	cmp	r3, #40	; 0x28
 801171e:	d86d      	bhi.n	80117fc <UART_SetConfig+0x188>
 8011720:	a201      	add	r2, pc, #4	; (adr r2, 8011728 <UART_SetConfig+0xb4>)
 8011722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011726:	bf00      	nop
 8011728:	080117cd 	.word	0x080117cd
 801172c:	080117fd 	.word	0x080117fd
 8011730:	080117fd 	.word	0x080117fd
 8011734:	080117fd 	.word	0x080117fd
 8011738:	080117fd 	.word	0x080117fd
 801173c:	080117fd 	.word	0x080117fd
 8011740:	080117fd 	.word	0x080117fd
 8011744:	080117fd 	.word	0x080117fd
 8011748:	080117d5 	.word	0x080117d5
 801174c:	080117fd 	.word	0x080117fd
 8011750:	080117fd 	.word	0x080117fd
 8011754:	080117fd 	.word	0x080117fd
 8011758:	080117fd 	.word	0x080117fd
 801175c:	080117fd 	.word	0x080117fd
 8011760:	080117fd 	.word	0x080117fd
 8011764:	080117fd 	.word	0x080117fd
 8011768:	080117dd 	.word	0x080117dd
 801176c:	080117fd 	.word	0x080117fd
 8011770:	080117fd 	.word	0x080117fd
 8011774:	080117fd 	.word	0x080117fd
 8011778:	080117fd 	.word	0x080117fd
 801177c:	080117fd 	.word	0x080117fd
 8011780:	080117fd 	.word	0x080117fd
 8011784:	080117fd 	.word	0x080117fd
 8011788:	080117e5 	.word	0x080117e5
 801178c:	080117fd 	.word	0x080117fd
 8011790:	080117fd 	.word	0x080117fd
 8011794:	080117fd 	.word	0x080117fd
 8011798:	080117fd 	.word	0x080117fd
 801179c:	080117fd 	.word	0x080117fd
 80117a0:	080117fd 	.word	0x080117fd
 80117a4:	080117fd 	.word	0x080117fd
 80117a8:	080117ed 	.word	0x080117ed
 80117ac:	080117fd 	.word	0x080117fd
 80117b0:	080117fd 	.word	0x080117fd
 80117b4:	080117fd 	.word	0x080117fd
 80117b8:	080117fd 	.word	0x080117fd
 80117bc:	080117fd 	.word	0x080117fd
 80117c0:	080117fd 	.word	0x080117fd
 80117c4:	080117fd 	.word	0x080117fd
 80117c8:	080117f5 	.word	0x080117f5
 80117cc:	2301      	movs	r3, #1
 80117ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117d2:	e326      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80117d4:	2304      	movs	r3, #4
 80117d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117da:	e322      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80117dc:	2308      	movs	r3, #8
 80117de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117e2:	e31e      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80117e4:	2310      	movs	r3, #16
 80117e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ea:	e31a      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80117ec:	2320      	movs	r3, #32
 80117ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117f2:	e316      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80117f4:	2340      	movs	r3, #64	; 0x40
 80117f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117fa:	e312      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80117fc:	2380      	movs	r3, #128	; 0x80
 80117fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011802:	e30e      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	4a69      	ldr	r2, [pc, #420]	; (80119b0 <UART_SetConfig+0x33c>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d130      	bne.n	8011870 <UART_SetConfig+0x1fc>
 801180e:	4b67      	ldr	r3, [pc, #412]	; (80119ac <UART_SetConfig+0x338>)
 8011810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011812:	f003 0307 	and.w	r3, r3, #7
 8011816:	2b05      	cmp	r3, #5
 8011818:	d826      	bhi.n	8011868 <UART_SetConfig+0x1f4>
 801181a:	a201      	add	r2, pc, #4	; (adr r2, 8011820 <UART_SetConfig+0x1ac>)
 801181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011820:	08011839 	.word	0x08011839
 8011824:	08011841 	.word	0x08011841
 8011828:	08011849 	.word	0x08011849
 801182c:	08011851 	.word	0x08011851
 8011830:	08011859 	.word	0x08011859
 8011834:	08011861 	.word	0x08011861
 8011838:	2300      	movs	r3, #0
 801183a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801183e:	e2f0      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011840:	2304      	movs	r3, #4
 8011842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011846:	e2ec      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011848:	2308      	movs	r3, #8
 801184a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801184e:	e2e8      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011850:	2310      	movs	r3, #16
 8011852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011856:	e2e4      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011858:	2320      	movs	r3, #32
 801185a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801185e:	e2e0      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011860:	2340      	movs	r3, #64	; 0x40
 8011862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011866:	e2dc      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011868:	2380      	movs	r3, #128	; 0x80
 801186a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801186e:	e2d8      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4a4f      	ldr	r2, [pc, #316]	; (80119b4 <UART_SetConfig+0x340>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d130      	bne.n	80118dc <UART_SetConfig+0x268>
 801187a:	4b4c      	ldr	r3, [pc, #304]	; (80119ac <UART_SetConfig+0x338>)
 801187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801187e:	f003 0307 	and.w	r3, r3, #7
 8011882:	2b05      	cmp	r3, #5
 8011884:	d826      	bhi.n	80118d4 <UART_SetConfig+0x260>
 8011886:	a201      	add	r2, pc, #4	; (adr r2, 801188c <UART_SetConfig+0x218>)
 8011888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801188c:	080118a5 	.word	0x080118a5
 8011890:	080118ad 	.word	0x080118ad
 8011894:	080118b5 	.word	0x080118b5
 8011898:	080118bd 	.word	0x080118bd
 801189c:	080118c5 	.word	0x080118c5
 80118a0:	080118cd 	.word	0x080118cd
 80118a4:	2300      	movs	r3, #0
 80118a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118aa:	e2ba      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80118ac:	2304      	movs	r3, #4
 80118ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118b2:	e2b6      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80118b4:	2308      	movs	r3, #8
 80118b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ba:	e2b2      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80118bc:	2310      	movs	r3, #16
 80118be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118c2:	e2ae      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80118c4:	2320      	movs	r3, #32
 80118c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ca:	e2aa      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80118cc:	2340      	movs	r3, #64	; 0x40
 80118ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118d2:	e2a6      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80118d4:	2380      	movs	r3, #128	; 0x80
 80118d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118da:	e2a2      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a35      	ldr	r2, [pc, #212]	; (80119b8 <UART_SetConfig+0x344>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d130      	bne.n	8011948 <UART_SetConfig+0x2d4>
 80118e6:	4b31      	ldr	r3, [pc, #196]	; (80119ac <UART_SetConfig+0x338>)
 80118e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118ea:	f003 0307 	and.w	r3, r3, #7
 80118ee:	2b05      	cmp	r3, #5
 80118f0:	d826      	bhi.n	8011940 <UART_SetConfig+0x2cc>
 80118f2:	a201      	add	r2, pc, #4	; (adr r2, 80118f8 <UART_SetConfig+0x284>)
 80118f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118f8:	08011911 	.word	0x08011911
 80118fc:	08011919 	.word	0x08011919
 8011900:	08011921 	.word	0x08011921
 8011904:	08011929 	.word	0x08011929
 8011908:	08011931 	.word	0x08011931
 801190c:	08011939 	.word	0x08011939
 8011910:	2300      	movs	r3, #0
 8011912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011916:	e284      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011918:	2304      	movs	r3, #4
 801191a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801191e:	e280      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011920:	2308      	movs	r3, #8
 8011922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011926:	e27c      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011928:	2310      	movs	r3, #16
 801192a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801192e:	e278      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011930:	2320      	movs	r3, #32
 8011932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011936:	e274      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011938:	2340      	movs	r3, #64	; 0x40
 801193a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801193e:	e270      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011940:	2380      	movs	r3, #128	; 0x80
 8011942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011946:	e26c      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	4a1b      	ldr	r2, [pc, #108]	; (80119bc <UART_SetConfig+0x348>)
 801194e:	4293      	cmp	r3, r2
 8011950:	d142      	bne.n	80119d8 <UART_SetConfig+0x364>
 8011952:	4b16      	ldr	r3, [pc, #88]	; (80119ac <UART_SetConfig+0x338>)
 8011954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011956:	f003 0307 	and.w	r3, r3, #7
 801195a:	2b05      	cmp	r3, #5
 801195c:	d838      	bhi.n	80119d0 <UART_SetConfig+0x35c>
 801195e:	a201      	add	r2, pc, #4	; (adr r2, 8011964 <UART_SetConfig+0x2f0>)
 8011960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011964:	0801197d 	.word	0x0801197d
 8011968:	08011985 	.word	0x08011985
 801196c:	0801198d 	.word	0x0801198d
 8011970:	08011995 	.word	0x08011995
 8011974:	080119c1 	.word	0x080119c1
 8011978:	080119c9 	.word	0x080119c9
 801197c:	2300      	movs	r3, #0
 801197e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011982:	e24e      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011984:	2304      	movs	r3, #4
 8011986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801198a:	e24a      	b.n	8011e22 <UART_SetConfig+0x7ae>
 801198c:	2308      	movs	r3, #8
 801198e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011992:	e246      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011994:	2310      	movs	r3, #16
 8011996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801199a:	e242      	b.n	8011e22 <UART_SetConfig+0x7ae>
 801199c:	cfff69f3 	.word	0xcfff69f3
 80119a0:	58000c00 	.word	0x58000c00
 80119a4:	11fff4ff 	.word	0x11fff4ff
 80119a8:	40011000 	.word	0x40011000
 80119ac:	58024400 	.word	0x58024400
 80119b0:	40004400 	.word	0x40004400
 80119b4:	40004800 	.word	0x40004800
 80119b8:	40004c00 	.word	0x40004c00
 80119bc:	40005000 	.word	0x40005000
 80119c0:	2320      	movs	r3, #32
 80119c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119c6:	e22c      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80119c8:	2340      	movs	r3, #64	; 0x40
 80119ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ce:	e228      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80119d0:	2380      	movs	r3, #128	; 0x80
 80119d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119d6:	e224      	b.n	8011e22 <UART_SetConfig+0x7ae>
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	4ab1      	ldr	r2, [pc, #708]	; (8011ca4 <UART_SetConfig+0x630>)
 80119de:	4293      	cmp	r3, r2
 80119e0:	d176      	bne.n	8011ad0 <UART_SetConfig+0x45c>
 80119e2:	4bb1      	ldr	r3, [pc, #708]	; (8011ca8 <UART_SetConfig+0x634>)
 80119e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80119ea:	2b28      	cmp	r3, #40	; 0x28
 80119ec:	d86c      	bhi.n	8011ac8 <UART_SetConfig+0x454>
 80119ee:	a201      	add	r2, pc, #4	; (adr r2, 80119f4 <UART_SetConfig+0x380>)
 80119f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119f4:	08011a99 	.word	0x08011a99
 80119f8:	08011ac9 	.word	0x08011ac9
 80119fc:	08011ac9 	.word	0x08011ac9
 8011a00:	08011ac9 	.word	0x08011ac9
 8011a04:	08011ac9 	.word	0x08011ac9
 8011a08:	08011ac9 	.word	0x08011ac9
 8011a0c:	08011ac9 	.word	0x08011ac9
 8011a10:	08011ac9 	.word	0x08011ac9
 8011a14:	08011aa1 	.word	0x08011aa1
 8011a18:	08011ac9 	.word	0x08011ac9
 8011a1c:	08011ac9 	.word	0x08011ac9
 8011a20:	08011ac9 	.word	0x08011ac9
 8011a24:	08011ac9 	.word	0x08011ac9
 8011a28:	08011ac9 	.word	0x08011ac9
 8011a2c:	08011ac9 	.word	0x08011ac9
 8011a30:	08011ac9 	.word	0x08011ac9
 8011a34:	08011aa9 	.word	0x08011aa9
 8011a38:	08011ac9 	.word	0x08011ac9
 8011a3c:	08011ac9 	.word	0x08011ac9
 8011a40:	08011ac9 	.word	0x08011ac9
 8011a44:	08011ac9 	.word	0x08011ac9
 8011a48:	08011ac9 	.word	0x08011ac9
 8011a4c:	08011ac9 	.word	0x08011ac9
 8011a50:	08011ac9 	.word	0x08011ac9
 8011a54:	08011ab1 	.word	0x08011ab1
 8011a58:	08011ac9 	.word	0x08011ac9
 8011a5c:	08011ac9 	.word	0x08011ac9
 8011a60:	08011ac9 	.word	0x08011ac9
 8011a64:	08011ac9 	.word	0x08011ac9
 8011a68:	08011ac9 	.word	0x08011ac9
 8011a6c:	08011ac9 	.word	0x08011ac9
 8011a70:	08011ac9 	.word	0x08011ac9
 8011a74:	08011ab9 	.word	0x08011ab9
 8011a78:	08011ac9 	.word	0x08011ac9
 8011a7c:	08011ac9 	.word	0x08011ac9
 8011a80:	08011ac9 	.word	0x08011ac9
 8011a84:	08011ac9 	.word	0x08011ac9
 8011a88:	08011ac9 	.word	0x08011ac9
 8011a8c:	08011ac9 	.word	0x08011ac9
 8011a90:	08011ac9 	.word	0x08011ac9
 8011a94:	08011ac1 	.word	0x08011ac1
 8011a98:	2301      	movs	r3, #1
 8011a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a9e:	e1c0      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011aa0:	2304      	movs	r3, #4
 8011aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011aa6:	e1bc      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011aa8:	2308      	movs	r3, #8
 8011aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011aae:	e1b8      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011ab0:	2310      	movs	r3, #16
 8011ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ab6:	e1b4      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011ab8:	2320      	movs	r3, #32
 8011aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011abe:	e1b0      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011ac0:	2340      	movs	r3, #64	; 0x40
 8011ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ac6:	e1ac      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011ac8:	2380      	movs	r3, #128	; 0x80
 8011aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ace:	e1a8      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4a75      	ldr	r2, [pc, #468]	; (8011cac <UART_SetConfig+0x638>)
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	d130      	bne.n	8011b3c <UART_SetConfig+0x4c8>
 8011ada:	4b73      	ldr	r3, [pc, #460]	; (8011ca8 <UART_SetConfig+0x634>)
 8011adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ade:	f003 0307 	and.w	r3, r3, #7
 8011ae2:	2b05      	cmp	r3, #5
 8011ae4:	d826      	bhi.n	8011b34 <UART_SetConfig+0x4c0>
 8011ae6:	a201      	add	r2, pc, #4	; (adr r2, 8011aec <UART_SetConfig+0x478>)
 8011ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aec:	08011b05 	.word	0x08011b05
 8011af0:	08011b0d 	.word	0x08011b0d
 8011af4:	08011b15 	.word	0x08011b15
 8011af8:	08011b1d 	.word	0x08011b1d
 8011afc:	08011b25 	.word	0x08011b25
 8011b00:	08011b2d 	.word	0x08011b2d
 8011b04:	2300      	movs	r3, #0
 8011b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b0a:	e18a      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b0c:	2304      	movs	r3, #4
 8011b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b12:	e186      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b14:	2308      	movs	r3, #8
 8011b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b1a:	e182      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b1c:	2310      	movs	r3, #16
 8011b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b22:	e17e      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b24:	2320      	movs	r3, #32
 8011b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b2a:	e17a      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b2c:	2340      	movs	r3, #64	; 0x40
 8011b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b32:	e176      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b34:	2380      	movs	r3, #128	; 0x80
 8011b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b3a:	e172      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	4a5b      	ldr	r2, [pc, #364]	; (8011cb0 <UART_SetConfig+0x63c>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d130      	bne.n	8011ba8 <UART_SetConfig+0x534>
 8011b46:	4b58      	ldr	r3, [pc, #352]	; (8011ca8 <UART_SetConfig+0x634>)
 8011b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b4a:	f003 0307 	and.w	r3, r3, #7
 8011b4e:	2b05      	cmp	r3, #5
 8011b50:	d826      	bhi.n	8011ba0 <UART_SetConfig+0x52c>
 8011b52:	a201      	add	r2, pc, #4	; (adr r2, 8011b58 <UART_SetConfig+0x4e4>)
 8011b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b58:	08011b71 	.word	0x08011b71
 8011b5c:	08011b79 	.word	0x08011b79
 8011b60:	08011b81 	.word	0x08011b81
 8011b64:	08011b89 	.word	0x08011b89
 8011b68:	08011b91 	.word	0x08011b91
 8011b6c:	08011b99 	.word	0x08011b99
 8011b70:	2300      	movs	r3, #0
 8011b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b76:	e154      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b78:	2304      	movs	r3, #4
 8011b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b7e:	e150      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b80:	2308      	movs	r3, #8
 8011b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b86:	e14c      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b88:	2310      	movs	r3, #16
 8011b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b8e:	e148      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b90:	2320      	movs	r3, #32
 8011b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b96:	e144      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011b98:	2340      	movs	r3, #64	; 0x40
 8011b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b9e:	e140      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011ba0:	2380      	movs	r3, #128	; 0x80
 8011ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ba6:	e13c      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4a41      	ldr	r2, [pc, #260]	; (8011cb4 <UART_SetConfig+0x640>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	f040 8082 	bne.w	8011cb8 <UART_SetConfig+0x644>
 8011bb4:	4b3c      	ldr	r3, [pc, #240]	; (8011ca8 <UART_SetConfig+0x634>)
 8011bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011bbc:	2b28      	cmp	r3, #40	; 0x28
 8011bbe:	d86d      	bhi.n	8011c9c <UART_SetConfig+0x628>
 8011bc0:	a201      	add	r2, pc, #4	; (adr r2, 8011bc8 <UART_SetConfig+0x554>)
 8011bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc6:	bf00      	nop
 8011bc8:	08011c6d 	.word	0x08011c6d
 8011bcc:	08011c9d 	.word	0x08011c9d
 8011bd0:	08011c9d 	.word	0x08011c9d
 8011bd4:	08011c9d 	.word	0x08011c9d
 8011bd8:	08011c9d 	.word	0x08011c9d
 8011bdc:	08011c9d 	.word	0x08011c9d
 8011be0:	08011c9d 	.word	0x08011c9d
 8011be4:	08011c9d 	.word	0x08011c9d
 8011be8:	08011c75 	.word	0x08011c75
 8011bec:	08011c9d 	.word	0x08011c9d
 8011bf0:	08011c9d 	.word	0x08011c9d
 8011bf4:	08011c9d 	.word	0x08011c9d
 8011bf8:	08011c9d 	.word	0x08011c9d
 8011bfc:	08011c9d 	.word	0x08011c9d
 8011c00:	08011c9d 	.word	0x08011c9d
 8011c04:	08011c9d 	.word	0x08011c9d
 8011c08:	08011c7d 	.word	0x08011c7d
 8011c0c:	08011c9d 	.word	0x08011c9d
 8011c10:	08011c9d 	.word	0x08011c9d
 8011c14:	08011c9d 	.word	0x08011c9d
 8011c18:	08011c9d 	.word	0x08011c9d
 8011c1c:	08011c9d 	.word	0x08011c9d
 8011c20:	08011c9d 	.word	0x08011c9d
 8011c24:	08011c9d 	.word	0x08011c9d
 8011c28:	08011c85 	.word	0x08011c85
 8011c2c:	08011c9d 	.word	0x08011c9d
 8011c30:	08011c9d 	.word	0x08011c9d
 8011c34:	08011c9d 	.word	0x08011c9d
 8011c38:	08011c9d 	.word	0x08011c9d
 8011c3c:	08011c9d 	.word	0x08011c9d
 8011c40:	08011c9d 	.word	0x08011c9d
 8011c44:	08011c9d 	.word	0x08011c9d
 8011c48:	08011c8d 	.word	0x08011c8d
 8011c4c:	08011c9d 	.word	0x08011c9d
 8011c50:	08011c9d 	.word	0x08011c9d
 8011c54:	08011c9d 	.word	0x08011c9d
 8011c58:	08011c9d 	.word	0x08011c9d
 8011c5c:	08011c9d 	.word	0x08011c9d
 8011c60:	08011c9d 	.word	0x08011c9d
 8011c64:	08011c9d 	.word	0x08011c9d
 8011c68:	08011c95 	.word	0x08011c95
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c72:	e0d6      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011c74:	2304      	movs	r3, #4
 8011c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c7a:	e0d2      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011c7c:	2308      	movs	r3, #8
 8011c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c82:	e0ce      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011c84:	2310      	movs	r3, #16
 8011c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c8a:	e0ca      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011c8c:	2320      	movs	r3, #32
 8011c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c92:	e0c6      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011c94:	2340      	movs	r3, #64	; 0x40
 8011c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c9a:	e0c2      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011c9c:	2380      	movs	r3, #128	; 0x80
 8011c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ca2:	e0be      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011ca4:	40011400 	.word	0x40011400
 8011ca8:	58024400 	.word	0x58024400
 8011cac:	40007800 	.word	0x40007800
 8011cb0:	40007c00 	.word	0x40007c00
 8011cb4:	40011800 	.word	0x40011800
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	4aad      	ldr	r2, [pc, #692]	; (8011f74 <UART_SetConfig+0x900>)
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	d176      	bne.n	8011db0 <UART_SetConfig+0x73c>
 8011cc2:	4bad      	ldr	r3, [pc, #692]	; (8011f78 <UART_SetConfig+0x904>)
 8011cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011cca:	2b28      	cmp	r3, #40	; 0x28
 8011ccc:	d86c      	bhi.n	8011da8 <UART_SetConfig+0x734>
 8011cce:	a201      	add	r2, pc, #4	; (adr r2, 8011cd4 <UART_SetConfig+0x660>)
 8011cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd4:	08011d79 	.word	0x08011d79
 8011cd8:	08011da9 	.word	0x08011da9
 8011cdc:	08011da9 	.word	0x08011da9
 8011ce0:	08011da9 	.word	0x08011da9
 8011ce4:	08011da9 	.word	0x08011da9
 8011ce8:	08011da9 	.word	0x08011da9
 8011cec:	08011da9 	.word	0x08011da9
 8011cf0:	08011da9 	.word	0x08011da9
 8011cf4:	08011d81 	.word	0x08011d81
 8011cf8:	08011da9 	.word	0x08011da9
 8011cfc:	08011da9 	.word	0x08011da9
 8011d00:	08011da9 	.word	0x08011da9
 8011d04:	08011da9 	.word	0x08011da9
 8011d08:	08011da9 	.word	0x08011da9
 8011d0c:	08011da9 	.word	0x08011da9
 8011d10:	08011da9 	.word	0x08011da9
 8011d14:	08011d89 	.word	0x08011d89
 8011d18:	08011da9 	.word	0x08011da9
 8011d1c:	08011da9 	.word	0x08011da9
 8011d20:	08011da9 	.word	0x08011da9
 8011d24:	08011da9 	.word	0x08011da9
 8011d28:	08011da9 	.word	0x08011da9
 8011d2c:	08011da9 	.word	0x08011da9
 8011d30:	08011da9 	.word	0x08011da9
 8011d34:	08011d91 	.word	0x08011d91
 8011d38:	08011da9 	.word	0x08011da9
 8011d3c:	08011da9 	.word	0x08011da9
 8011d40:	08011da9 	.word	0x08011da9
 8011d44:	08011da9 	.word	0x08011da9
 8011d48:	08011da9 	.word	0x08011da9
 8011d4c:	08011da9 	.word	0x08011da9
 8011d50:	08011da9 	.word	0x08011da9
 8011d54:	08011d99 	.word	0x08011d99
 8011d58:	08011da9 	.word	0x08011da9
 8011d5c:	08011da9 	.word	0x08011da9
 8011d60:	08011da9 	.word	0x08011da9
 8011d64:	08011da9 	.word	0x08011da9
 8011d68:	08011da9 	.word	0x08011da9
 8011d6c:	08011da9 	.word	0x08011da9
 8011d70:	08011da9 	.word	0x08011da9
 8011d74:	08011da1 	.word	0x08011da1
 8011d78:	2301      	movs	r3, #1
 8011d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d7e:	e050      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011d80:	2304      	movs	r3, #4
 8011d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d86:	e04c      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011d88:	2308      	movs	r3, #8
 8011d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d8e:	e048      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011d90:	2310      	movs	r3, #16
 8011d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d96:	e044      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011d98:	2320      	movs	r3, #32
 8011d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d9e:	e040      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011da0:	2340      	movs	r3, #64	; 0x40
 8011da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011da6:	e03c      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011da8:	2380      	movs	r3, #128	; 0x80
 8011daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dae:	e038      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	4a71      	ldr	r2, [pc, #452]	; (8011f7c <UART_SetConfig+0x908>)
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d130      	bne.n	8011e1c <UART_SetConfig+0x7a8>
 8011dba:	4b6f      	ldr	r3, [pc, #444]	; (8011f78 <UART_SetConfig+0x904>)
 8011dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011dbe:	f003 0307 	and.w	r3, r3, #7
 8011dc2:	2b05      	cmp	r3, #5
 8011dc4:	d826      	bhi.n	8011e14 <UART_SetConfig+0x7a0>
 8011dc6:	a201      	add	r2, pc, #4	; (adr r2, 8011dcc <UART_SetConfig+0x758>)
 8011dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dcc:	08011de5 	.word	0x08011de5
 8011dd0:	08011ded 	.word	0x08011ded
 8011dd4:	08011df5 	.word	0x08011df5
 8011dd8:	08011dfd 	.word	0x08011dfd
 8011ddc:	08011e05 	.word	0x08011e05
 8011de0:	08011e0d 	.word	0x08011e0d
 8011de4:	2302      	movs	r3, #2
 8011de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dea:	e01a      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011dec:	2304      	movs	r3, #4
 8011dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011df2:	e016      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011df4:	2308      	movs	r3, #8
 8011df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dfa:	e012      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011dfc:	2310      	movs	r3, #16
 8011dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e02:	e00e      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011e04:	2320      	movs	r3, #32
 8011e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e0a:	e00a      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011e0c:	2340      	movs	r3, #64	; 0x40
 8011e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e12:	e006      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011e14:	2380      	movs	r3, #128	; 0x80
 8011e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e1a:	e002      	b.n	8011e22 <UART_SetConfig+0x7ae>
 8011e1c:	2380      	movs	r3, #128	; 0x80
 8011e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	4a55      	ldr	r2, [pc, #340]	; (8011f7c <UART_SetConfig+0x908>)
 8011e28:	4293      	cmp	r3, r2
 8011e2a:	f040 80f8 	bne.w	801201e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011e2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011e32:	2b20      	cmp	r3, #32
 8011e34:	dc46      	bgt.n	8011ec4 <UART_SetConfig+0x850>
 8011e36:	2b02      	cmp	r3, #2
 8011e38:	db75      	blt.n	8011f26 <UART_SetConfig+0x8b2>
 8011e3a:	3b02      	subs	r3, #2
 8011e3c:	2b1e      	cmp	r3, #30
 8011e3e:	d872      	bhi.n	8011f26 <UART_SetConfig+0x8b2>
 8011e40:	a201      	add	r2, pc, #4	; (adr r2, 8011e48 <UART_SetConfig+0x7d4>)
 8011e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e46:	bf00      	nop
 8011e48:	08011ecb 	.word	0x08011ecb
 8011e4c:	08011f27 	.word	0x08011f27
 8011e50:	08011ed3 	.word	0x08011ed3
 8011e54:	08011f27 	.word	0x08011f27
 8011e58:	08011f27 	.word	0x08011f27
 8011e5c:	08011f27 	.word	0x08011f27
 8011e60:	08011ee3 	.word	0x08011ee3
 8011e64:	08011f27 	.word	0x08011f27
 8011e68:	08011f27 	.word	0x08011f27
 8011e6c:	08011f27 	.word	0x08011f27
 8011e70:	08011f27 	.word	0x08011f27
 8011e74:	08011f27 	.word	0x08011f27
 8011e78:	08011f27 	.word	0x08011f27
 8011e7c:	08011f27 	.word	0x08011f27
 8011e80:	08011ef3 	.word	0x08011ef3
 8011e84:	08011f27 	.word	0x08011f27
 8011e88:	08011f27 	.word	0x08011f27
 8011e8c:	08011f27 	.word	0x08011f27
 8011e90:	08011f27 	.word	0x08011f27
 8011e94:	08011f27 	.word	0x08011f27
 8011e98:	08011f27 	.word	0x08011f27
 8011e9c:	08011f27 	.word	0x08011f27
 8011ea0:	08011f27 	.word	0x08011f27
 8011ea4:	08011f27 	.word	0x08011f27
 8011ea8:	08011f27 	.word	0x08011f27
 8011eac:	08011f27 	.word	0x08011f27
 8011eb0:	08011f27 	.word	0x08011f27
 8011eb4:	08011f27 	.word	0x08011f27
 8011eb8:	08011f27 	.word	0x08011f27
 8011ebc:	08011f27 	.word	0x08011f27
 8011ec0:	08011f19 	.word	0x08011f19
 8011ec4:	2b40      	cmp	r3, #64	; 0x40
 8011ec6:	d02a      	beq.n	8011f1e <UART_SetConfig+0x8aa>
 8011ec8:	e02d      	b.n	8011f26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011eca:	f7fb f86b 	bl	800cfa4 <HAL_RCCEx_GetD3PCLK1Freq>
 8011ece:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011ed0:	e02f      	b.n	8011f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7fb f87a 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ee0:	e027      	b.n	8011f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ee2:	f107 0318 	add.w	r3, r7, #24
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fb f9c6 	bl	800d278 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011eec:	69fb      	ldr	r3, [r7, #28]
 8011eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ef0:	e01f      	b.n	8011f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ef2:	4b21      	ldr	r3, [pc, #132]	; (8011f78 <UART_SetConfig+0x904>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f003 0320 	and.w	r3, r3, #32
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d009      	beq.n	8011f12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011efe:	4b1e      	ldr	r3, [pc, #120]	; (8011f78 <UART_SetConfig+0x904>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	08db      	lsrs	r3, r3, #3
 8011f04:	f003 0303 	and.w	r3, r3, #3
 8011f08:	4a1d      	ldr	r2, [pc, #116]	; (8011f80 <UART_SetConfig+0x90c>)
 8011f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8011f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011f10:	e00f      	b.n	8011f32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011f12:	4b1b      	ldr	r3, [pc, #108]	; (8011f80 <UART_SetConfig+0x90c>)
 8011f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f16:	e00c      	b.n	8011f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011f18:	4b1a      	ldr	r3, [pc, #104]	; (8011f84 <UART_SetConfig+0x910>)
 8011f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f1c:	e009      	b.n	8011f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f24:	e005      	b.n	8011f32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011f26:	2300      	movs	r3, #0
 8011f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011f30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	f000 81ee 	beq.w	8012316 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f3e:	4a12      	ldr	r2, [pc, #72]	; (8011f88 <UART_SetConfig+0x914>)
 8011f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f44:	461a      	mov	r2, r3
 8011f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f4c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	685a      	ldr	r2, [r3, #4]
 8011f52:	4613      	mov	r3, r2
 8011f54:	005b      	lsls	r3, r3, #1
 8011f56:	4413      	add	r3, r2
 8011f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d305      	bcc.n	8011f6a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011f5e:	697b      	ldr	r3, [r7, #20]
 8011f60:	685b      	ldr	r3, [r3, #4]
 8011f62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d910      	bls.n	8011f8c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011f70:	e1d1      	b.n	8012316 <UART_SetConfig+0xca2>
 8011f72:	bf00      	nop
 8011f74:	40011c00 	.word	0x40011c00
 8011f78:	58024400 	.word	0x58024400
 8011f7c:	58000c00 	.word	0x58000c00
 8011f80:	03d09000 	.word	0x03d09000
 8011f84:	003d0900 	.word	0x003d0900
 8011f88:	0801bf94 	.word	0x0801bf94
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f8e:	2200      	movs	r2, #0
 8011f90:	60bb      	str	r3, [r7, #8]
 8011f92:	60fa      	str	r2, [r7, #12]
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f98:	4ac0      	ldr	r2, [pc, #768]	; (801229c <UART_SetConfig+0xc28>)
 8011f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	603b      	str	r3, [r7, #0]
 8011fa4:	607a      	str	r2, [r7, #4]
 8011fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011fae:	f7ee fa17 	bl	80003e0 <__aeabi_uldivmod>
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	460b      	mov	r3, r1
 8011fb6:	4610      	mov	r0, r2
 8011fb8:	4619      	mov	r1, r3
 8011fba:	f04f 0200 	mov.w	r2, #0
 8011fbe:	f04f 0300 	mov.w	r3, #0
 8011fc2:	020b      	lsls	r3, r1, #8
 8011fc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011fc8:	0202      	lsls	r2, r0, #8
 8011fca:	6979      	ldr	r1, [r7, #20]
 8011fcc:	6849      	ldr	r1, [r1, #4]
 8011fce:	0849      	lsrs	r1, r1, #1
 8011fd0:	2000      	movs	r0, #0
 8011fd2:	460c      	mov	r4, r1
 8011fd4:	4605      	mov	r5, r0
 8011fd6:	eb12 0804 	adds.w	r8, r2, r4
 8011fda:	eb43 0905 	adc.w	r9, r3, r5
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	469a      	mov	sl, r3
 8011fe6:	4693      	mov	fp, r2
 8011fe8:	4652      	mov	r2, sl
 8011fea:	465b      	mov	r3, fp
 8011fec:	4640      	mov	r0, r8
 8011fee:	4649      	mov	r1, r9
 8011ff0:	f7ee f9f6 	bl	80003e0 <__aeabi_uldivmod>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	4613      	mov	r3, r2
 8011ffa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012002:	d308      	bcc.n	8012016 <UART_SetConfig+0x9a2>
 8012004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801200a:	d204      	bcs.n	8012016 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012012:	60da      	str	r2, [r3, #12]
 8012014:	e17f      	b.n	8012316 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8012016:	2301      	movs	r3, #1
 8012018:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801201c:	e17b      	b.n	8012316 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	69db      	ldr	r3, [r3, #28]
 8012022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012026:	f040 80bd 	bne.w	80121a4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801202a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801202e:	2b20      	cmp	r3, #32
 8012030:	dc48      	bgt.n	80120c4 <UART_SetConfig+0xa50>
 8012032:	2b00      	cmp	r3, #0
 8012034:	db7b      	blt.n	801212e <UART_SetConfig+0xaba>
 8012036:	2b20      	cmp	r3, #32
 8012038:	d879      	bhi.n	801212e <UART_SetConfig+0xaba>
 801203a:	a201      	add	r2, pc, #4	; (adr r2, 8012040 <UART_SetConfig+0x9cc>)
 801203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012040:	080120cb 	.word	0x080120cb
 8012044:	080120d3 	.word	0x080120d3
 8012048:	0801212f 	.word	0x0801212f
 801204c:	0801212f 	.word	0x0801212f
 8012050:	080120db 	.word	0x080120db
 8012054:	0801212f 	.word	0x0801212f
 8012058:	0801212f 	.word	0x0801212f
 801205c:	0801212f 	.word	0x0801212f
 8012060:	080120eb 	.word	0x080120eb
 8012064:	0801212f 	.word	0x0801212f
 8012068:	0801212f 	.word	0x0801212f
 801206c:	0801212f 	.word	0x0801212f
 8012070:	0801212f 	.word	0x0801212f
 8012074:	0801212f 	.word	0x0801212f
 8012078:	0801212f 	.word	0x0801212f
 801207c:	0801212f 	.word	0x0801212f
 8012080:	080120fb 	.word	0x080120fb
 8012084:	0801212f 	.word	0x0801212f
 8012088:	0801212f 	.word	0x0801212f
 801208c:	0801212f 	.word	0x0801212f
 8012090:	0801212f 	.word	0x0801212f
 8012094:	0801212f 	.word	0x0801212f
 8012098:	0801212f 	.word	0x0801212f
 801209c:	0801212f 	.word	0x0801212f
 80120a0:	0801212f 	.word	0x0801212f
 80120a4:	0801212f 	.word	0x0801212f
 80120a8:	0801212f 	.word	0x0801212f
 80120ac:	0801212f 	.word	0x0801212f
 80120b0:	0801212f 	.word	0x0801212f
 80120b4:	0801212f 	.word	0x0801212f
 80120b8:	0801212f 	.word	0x0801212f
 80120bc:	0801212f 	.word	0x0801212f
 80120c0:	08012121 	.word	0x08012121
 80120c4:	2b40      	cmp	r3, #64	; 0x40
 80120c6:	d02e      	beq.n	8012126 <UART_SetConfig+0xab2>
 80120c8:	e031      	b.n	801212e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80120ca:	f7f9 f8cd 	bl	800b268 <HAL_RCC_GetPCLK1Freq>
 80120ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80120d0:	e033      	b.n	801213a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80120d2:	f7f9 f8df 	bl	800b294 <HAL_RCC_GetPCLK2Freq>
 80120d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80120d8:	e02f      	b.n	801213a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80120da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120de:	4618      	mov	r0, r3
 80120e0:	f7fa ff76 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80120e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120e8:	e027      	b.n	801213a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80120ea:	f107 0318 	add.w	r3, r7, #24
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7fb f8c2 	bl	800d278 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80120f4:	69fb      	ldr	r3, [r7, #28]
 80120f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120f8:	e01f      	b.n	801213a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80120fa:	4b69      	ldr	r3, [pc, #420]	; (80122a0 <UART_SetConfig+0xc2c>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	f003 0320 	and.w	r3, r3, #32
 8012102:	2b00      	cmp	r3, #0
 8012104:	d009      	beq.n	801211a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012106:	4b66      	ldr	r3, [pc, #408]	; (80122a0 <UART_SetConfig+0xc2c>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	08db      	lsrs	r3, r3, #3
 801210c:	f003 0303 	and.w	r3, r3, #3
 8012110:	4a64      	ldr	r2, [pc, #400]	; (80122a4 <UART_SetConfig+0xc30>)
 8012112:	fa22 f303 	lsr.w	r3, r2, r3
 8012116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012118:	e00f      	b.n	801213a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801211a:	4b62      	ldr	r3, [pc, #392]	; (80122a4 <UART_SetConfig+0xc30>)
 801211c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801211e:	e00c      	b.n	801213a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012120:	4b61      	ldr	r3, [pc, #388]	; (80122a8 <UART_SetConfig+0xc34>)
 8012122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012124:	e009      	b.n	801213a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801212a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801212c:	e005      	b.n	801213a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801212e:	2300      	movs	r3, #0
 8012130:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012132:	2301      	movs	r3, #1
 8012134:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012138:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801213a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801213c:	2b00      	cmp	r3, #0
 801213e:	f000 80ea 	beq.w	8012316 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012146:	4a55      	ldr	r2, [pc, #340]	; (801229c <UART_SetConfig+0xc28>)
 8012148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801214c:	461a      	mov	r2, r3
 801214e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012150:	fbb3 f3f2 	udiv	r3, r3, r2
 8012154:	005a      	lsls	r2, r3, #1
 8012156:	697b      	ldr	r3, [r7, #20]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	085b      	lsrs	r3, r3, #1
 801215c:	441a      	add	r2, r3
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	fbb2 f3f3 	udiv	r3, r2, r3
 8012166:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801216a:	2b0f      	cmp	r3, #15
 801216c:	d916      	bls.n	801219c <UART_SetConfig+0xb28>
 801216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012174:	d212      	bcs.n	801219c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012178:	b29b      	uxth	r3, r3
 801217a:	f023 030f 	bic.w	r3, r3, #15
 801217e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012182:	085b      	lsrs	r3, r3, #1
 8012184:	b29b      	uxth	r3, r3
 8012186:	f003 0307 	and.w	r3, r3, #7
 801218a:	b29a      	uxth	r2, r3
 801218c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801218e:	4313      	orrs	r3, r2
 8012190:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012198:	60da      	str	r2, [r3, #12]
 801219a:	e0bc      	b.n	8012316 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801219c:	2301      	movs	r3, #1
 801219e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80121a2:	e0b8      	b.n	8012316 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80121a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80121a8:	2b20      	cmp	r3, #32
 80121aa:	dc4b      	bgt.n	8012244 <UART_SetConfig+0xbd0>
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	f2c0 8087 	blt.w	80122c0 <UART_SetConfig+0xc4c>
 80121b2:	2b20      	cmp	r3, #32
 80121b4:	f200 8084 	bhi.w	80122c0 <UART_SetConfig+0xc4c>
 80121b8:	a201      	add	r2, pc, #4	; (adr r2, 80121c0 <UART_SetConfig+0xb4c>)
 80121ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121be:	bf00      	nop
 80121c0:	0801224b 	.word	0x0801224b
 80121c4:	08012253 	.word	0x08012253
 80121c8:	080122c1 	.word	0x080122c1
 80121cc:	080122c1 	.word	0x080122c1
 80121d0:	0801225b 	.word	0x0801225b
 80121d4:	080122c1 	.word	0x080122c1
 80121d8:	080122c1 	.word	0x080122c1
 80121dc:	080122c1 	.word	0x080122c1
 80121e0:	0801226b 	.word	0x0801226b
 80121e4:	080122c1 	.word	0x080122c1
 80121e8:	080122c1 	.word	0x080122c1
 80121ec:	080122c1 	.word	0x080122c1
 80121f0:	080122c1 	.word	0x080122c1
 80121f4:	080122c1 	.word	0x080122c1
 80121f8:	080122c1 	.word	0x080122c1
 80121fc:	080122c1 	.word	0x080122c1
 8012200:	0801227b 	.word	0x0801227b
 8012204:	080122c1 	.word	0x080122c1
 8012208:	080122c1 	.word	0x080122c1
 801220c:	080122c1 	.word	0x080122c1
 8012210:	080122c1 	.word	0x080122c1
 8012214:	080122c1 	.word	0x080122c1
 8012218:	080122c1 	.word	0x080122c1
 801221c:	080122c1 	.word	0x080122c1
 8012220:	080122c1 	.word	0x080122c1
 8012224:	080122c1 	.word	0x080122c1
 8012228:	080122c1 	.word	0x080122c1
 801222c:	080122c1 	.word	0x080122c1
 8012230:	080122c1 	.word	0x080122c1
 8012234:	080122c1 	.word	0x080122c1
 8012238:	080122c1 	.word	0x080122c1
 801223c:	080122c1 	.word	0x080122c1
 8012240:	080122b3 	.word	0x080122b3
 8012244:	2b40      	cmp	r3, #64	; 0x40
 8012246:	d037      	beq.n	80122b8 <UART_SetConfig+0xc44>
 8012248:	e03a      	b.n	80122c0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801224a:	f7f9 f80d 	bl	800b268 <HAL_RCC_GetPCLK1Freq>
 801224e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012250:	e03c      	b.n	80122cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012252:	f7f9 f81f 	bl	800b294 <HAL_RCC_GetPCLK2Freq>
 8012256:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012258:	e038      	b.n	80122cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801225a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801225e:	4618      	mov	r0, r3
 8012260:	f7fa feb6 	bl	800cfd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012268:	e030      	b.n	80122cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801226a:	f107 0318 	add.w	r3, r7, #24
 801226e:	4618      	mov	r0, r3
 8012270:	f7fb f802 	bl	800d278 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012274:	69fb      	ldr	r3, [r7, #28]
 8012276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012278:	e028      	b.n	80122cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801227a:	4b09      	ldr	r3, [pc, #36]	; (80122a0 <UART_SetConfig+0xc2c>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	f003 0320 	and.w	r3, r3, #32
 8012282:	2b00      	cmp	r3, #0
 8012284:	d012      	beq.n	80122ac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012286:	4b06      	ldr	r3, [pc, #24]	; (80122a0 <UART_SetConfig+0xc2c>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	08db      	lsrs	r3, r3, #3
 801228c:	f003 0303 	and.w	r3, r3, #3
 8012290:	4a04      	ldr	r2, [pc, #16]	; (80122a4 <UART_SetConfig+0xc30>)
 8012292:	fa22 f303 	lsr.w	r3, r2, r3
 8012296:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012298:	e018      	b.n	80122cc <UART_SetConfig+0xc58>
 801229a:	bf00      	nop
 801229c:	0801bf94 	.word	0x0801bf94
 80122a0:	58024400 	.word	0x58024400
 80122a4:	03d09000 	.word	0x03d09000
 80122a8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80122ac:	4b24      	ldr	r3, [pc, #144]	; (8012340 <UART_SetConfig+0xccc>)
 80122ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122b0:	e00c      	b.n	80122cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80122b2:	4b24      	ldr	r3, [pc, #144]	; (8012344 <UART_SetConfig+0xcd0>)
 80122b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122b6:	e009      	b.n	80122cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80122b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122be:	e005      	b.n	80122cc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80122c0:	2300      	movs	r3, #0
 80122c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80122c4:	2301      	movs	r3, #1
 80122c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80122ca:	bf00      	nop
    }

    if (pclk != 0U)
 80122cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d021      	beq.n	8012316 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d6:	4a1c      	ldr	r2, [pc, #112]	; (8012348 <UART_SetConfig+0xcd4>)
 80122d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122dc:	461a      	mov	r2, r3
 80122de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	085b      	lsrs	r3, r3, #1
 80122ea:	441a      	add	r2, r3
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	685b      	ldr	r3, [r3, #4]
 80122f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80122f4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80122f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f8:	2b0f      	cmp	r3, #15
 80122fa:	d909      	bls.n	8012310 <UART_SetConfig+0xc9c>
 80122fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012302:	d205      	bcs.n	8012310 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012306:	b29a      	uxth	r2, r3
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	60da      	str	r2, [r3, #12]
 801230e:	e002      	b.n	8012316 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012310:	2301      	movs	r3, #1
 8012312:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	2201      	movs	r2, #1
 801231a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	2201      	movs	r2, #1
 8012322:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	2200      	movs	r2, #0
 801232a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	2200      	movs	r2, #0
 8012330:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012332:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012336:	4618      	mov	r0, r3
 8012338:	3748      	adds	r7, #72	; 0x48
 801233a:	46bd      	mov	sp, r7
 801233c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012340:	03d09000 	.word	0x03d09000
 8012344:	003d0900 	.word	0x003d0900
 8012348:	0801bf94 	.word	0x0801bf94

0801234c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012358:	f003 0301 	and.w	r3, r3, #1
 801235c:	2b00      	cmp	r3, #0
 801235e:	d00a      	beq.n	8012376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	430a      	orrs	r2, r1
 8012374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801237a:	f003 0302 	and.w	r3, r3, #2
 801237e:	2b00      	cmp	r3, #0
 8012380:	d00a      	beq.n	8012398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	430a      	orrs	r2, r1
 8012396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801239c:	f003 0304 	and.w	r3, r3, #4
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d00a      	beq.n	80123ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	430a      	orrs	r2, r1
 80123b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123be:	f003 0308 	and.w	r3, r3, #8
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d00a      	beq.n	80123dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	430a      	orrs	r2, r1
 80123da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123e0:	f003 0310 	and.w	r3, r3, #16
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00a      	beq.n	80123fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	689b      	ldr	r3, [r3, #8]
 80123ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	430a      	orrs	r2, r1
 80123fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012402:	f003 0320 	and.w	r3, r3, #32
 8012406:	2b00      	cmp	r3, #0
 8012408:	d00a      	beq.n	8012420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	689b      	ldr	r3, [r3, #8]
 8012410:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	430a      	orrs	r2, r1
 801241e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012428:	2b00      	cmp	r3, #0
 801242a:	d01a      	beq.n	8012462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	685b      	ldr	r3, [r3, #4]
 8012432:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	430a      	orrs	r2, r1
 8012440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801244a:	d10a      	bne.n	8012462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	685b      	ldr	r3, [r3, #4]
 8012452:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	430a      	orrs	r2, r1
 8012460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801246a:	2b00      	cmp	r3, #0
 801246c:	d00a      	beq.n	8012484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	430a      	orrs	r2, r1
 8012482:	605a      	str	r2, [r3, #4]
  }
}
 8012484:	bf00      	nop
 8012486:	370c      	adds	r7, #12
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr

08012490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b098      	sub	sp, #96	; 0x60
 8012494:	af02      	add	r7, sp, #8
 8012496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2200      	movs	r2, #0
 801249c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80124a0:	f7f1 fbd6 	bl	8003c50 <HAL_GetTick>
 80124a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f003 0308 	and.w	r3, r3, #8
 80124b0:	2b08      	cmp	r3, #8
 80124b2:	d12f      	bne.n	8012514 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80124b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80124b8:	9300      	str	r3, [sp, #0]
 80124ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124bc:	2200      	movs	r2, #0
 80124be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 f88e 	bl	80125e4 <UART_WaitOnFlagUntilTimeout>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d022      	beq.n	8012514 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d6:	e853 3f00 	ldrex	r3, [r3]
 80124da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80124dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80124e2:	653b      	str	r3, [r7, #80]	; 0x50
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	461a      	mov	r2, r3
 80124ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124ec:	647b      	str	r3, [r7, #68]	; 0x44
 80124ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80124f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80124f4:	e841 2300 	strex	r3, r2, [r1]
 80124f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80124fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d1e6      	bne.n	80124ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2220      	movs	r2, #32
 8012504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2200      	movs	r2, #0
 801250c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012510:	2303      	movs	r3, #3
 8012512:	e063      	b.n	80125dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	f003 0304 	and.w	r3, r3, #4
 801251e:	2b04      	cmp	r3, #4
 8012520:	d149      	bne.n	80125b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012522:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012526:	9300      	str	r3, [sp, #0]
 8012528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801252a:	2200      	movs	r2, #0
 801252c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f000 f857 	bl	80125e4 <UART_WaitOnFlagUntilTimeout>
 8012536:	4603      	mov	r3, r0
 8012538:	2b00      	cmp	r3, #0
 801253a:	d03c      	beq.n	80125b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012544:	e853 3f00 	ldrex	r3, [r3]
 8012548:	623b      	str	r3, [r7, #32]
   return(result);
 801254a:	6a3b      	ldr	r3, [r7, #32]
 801254c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	461a      	mov	r2, r3
 8012558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801255a:	633b      	str	r3, [r7, #48]	; 0x30
 801255c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801255e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012562:	e841 2300 	strex	r3, r2, [r1]
 8012566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256a:	2b00      	cmp	r3, #0
 801256c:	d1e6      	bne.n	801253c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	3308      	adds	r3, #8
 8012574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	e853 3f00 	ldrex	r3, [r3]
 801257c:	60fb      	str	r3, [r7, #12]
   return(result);
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	f023 0301 	bic.w	r3, r3, #1
 8012584:	64bb      	str	r3, [r7, #72]	; 0x48
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	3308      	adds	r3, #8
 801258c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801258e:	61fa      	str	r2, [r7, #28]
 8012590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012592:	69b9      	ldr	r1, [r7, #24]
 8012594:	69fa      	ldr	r2, [r7, #28]
 8012596:	e841 2300 	strex	r3, r2, [r1]
 801259a:	617b      	str	r3, [r7, #20]
   return(result);
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d1e5      	bne.n	801256e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2220      	movs	r2, #32
 80125a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2200      	movs	r2, #0
 80125ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80125b2:	2303      	movs	r3, #3
 80125b4:	e012      	b.n	80125dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2220      	movs	r2, #32
 80125ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2220      	movs	r2, #32
 80125c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2200      	movs	r2, #0
 80125ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2200      	movs	r2, #0
 80125d0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2200      	movs	r2, #0
 80125d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80125da:	2300      	movs	r3, #0
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3758      	adds	r7, #88	; 0x58
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}

080125e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b084      	sub	sp, #16
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	60f8      	str	r0, [r7, #12]
 80125ec:	60b9      	str	r1, [r7, #8]
 80125ee:	603b      	str	r3, [r7, #0]
 80125f0:	4613      	mov	r3, r2
 80125f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80125f4:	e049      	b.n	801268a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80125f6:	69bb      	ldr	r3, [r7, #24]
 80125f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125fc:	d045      	beq.n	801268a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125fe:	f7f1 fb27 	bl	8003c50 <HAL_GetTick>
 8012602:	4602      	mov	r2, r0
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	1ad3      	subs	r3, r2, r3
 8012608:	69ba      	ldr	r2, [r7, #24]
 801260a:	429a      	cmp	r2, r3
 801260c:	d302      	bcc.n	8012614 <UART_WaitOnFlagUntilTimeout+0x30>
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d101      	bne.n	8012618 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012614:	2303      	movs	r3, #3
 8012616:	e048      	b.n	80126aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	f003 0304 	and.w	r3, r3, #4
 8012622:	2b00      	cmp	r3, #0
 8012624:	d031      	beq.n	801268a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	69db      	ldr	r3, [r3, #28]
 801262c:	f003 0308 	and.w	r3, r3, #8
 8012630:	2b08      	cmp	r3, #8
 8012632:	d110      	bne.n	8012656 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2208      	movs	r2, #8
 801263a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801263c:	68f8      	ldr	r0, [r7, #12]
 801263e:	f000 f839 	bl	80126b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	2208      	movs	r2, #8
 8012646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	2200      	movs	r2, #0
 801264e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012652:	2301      	movs	r3, #1
 8012654:	e029      	b.n	80126aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	69db      	ldr	r3, [r3, #28]
 801265c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012664:	d111      	bne.n	801268a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801266e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012670:	68f8      	ldr	r0, [r7, #12]
 8012672:	f000 f81f 	bl	80126b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	2220      	movs	r2, #32
 801267a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	2200      	movs	r2, #0
 8012682:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012686:	2303      	movs	r3, #3
 8012688:	e00f      	b.n	80126aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	69da      	ldr	r2, [r3, #28]
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	4013      	ands	r3, r2
 8012694:	68ba      	ldr	r2, [r7, #8]
 8012696:	429a      	cmp	r2, r3
 8012698:	bf0c      	ite	eq
 801269a:	2301      	moveq	r3, #1
 801269c:	2300      	movne	r3, #0
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	461a      	mov	r2, r3
 80126a2:	79fb      	ldrb	r3, [r7, #7]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d0a6      	beq.n	80125f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80126a8:	2300      	movs	r3, #0
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	3710      	adds	r7, #16
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
	...

080126b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b095      	sub	sp, #84	; 0x54
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126c4:	e853 3f00 	ldrex	r3, [r3]
 80126c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80126ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80126d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	461a      	mov	r2, r3
 80126d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126da:	643b      	str	r3, [r7, #64]	; 0x40
 80126dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80126e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80126e2:	e841 2300 	strex	r3, r2, [r1]
 80126e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80126e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1e6      	bne.n	80126bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	3308      	adds	r3, #8
 80126f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126f6:	6a3b      	ldr	r3, [r7, #32]
 80126f8:	e853 3f00 	ldrex	r3, [r3]
 80126fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80126fe:	69fa      	ldr	r2, [r7, #28]
 8012700:	4b1e      	ldr	r3, [pc, #120]	; (801277c <UART_EndRxTransfer+0xc8>)
 8012702:	4013      	ands	r3, r2
 8012704:	64bb      	str	r3, [r7, #72]	; 0x48
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	3308      	adds	r3, #8
 801270c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801270e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012716:	e841 2300 	strex	r3, r2, [r1]
 801271a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271e:	2b00      	cmp	r3, #0
 8012720:	d1e5      	bne.n	80126ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012726:	2b01      	cmp	r3, #1
 8012728:	d118      	bne.n	801275c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	e853 3f00 	ldrex	r3, [r3]
 8012736:	60bb      	str	r3, [r7, #8]
   return(result);
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	f023 0310 	bic.w	r3, r3, #16
 801273e:	647b      	str	r3, [r7, #68]	; 0x44
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	461a      	mov	r2, r3
 8012746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012748:	61bb      	str	r3, [r7, #24]
 801274a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801274c:	6979      	ldr	r1, [r7, #20]
 801274e:	69ba      	ldr	r2, [r7, #24]
 8012750:	e841 2300 	strex	r3, r2, [r1]
 8012754:	613b      	str	r3, [r7, #16]
   return(result);
 8012756:	693b      	ldr	r3, [r7, #16]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d1e6      	bne.n	801272a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2220      	movs	r2, #32
 8012760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2200      	movs	r2, #0
 8012768:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2200      	movs	r2, #0
 801276e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012770:	bf00      	nop
 8012772:	3754      	adds	r7, #84	; 0x54
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr
 801277c:	effffffe 	.word	0xeffffffe

08012780 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012780:	b480      	push	{r7}
 8012782:	b085      	sub	sp, #20
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801278e:	2b01      	cmp	r3, #1
 8012790:	d101      	bne.n	8012796 <HAL_UARTEx_DisableFifoMode+0x16>
 8012792:	2302      	movs	r3, #2
 8012794:	e027      	b.n	80127e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2201      	movs	r2, #1
 801279a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2224      	movs	r2, #36	; 0x24
 80127a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f022 0201 	bic.w	r2, r2, #1
 80127bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80127c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2200      	movs	r2, #0
 80127ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	68fa      	ldr	r2, [r7, #12]
 80127d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2220      	movs	r2, #32
 80127d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2200      	movs	r2, #0
 80127e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80127e4:	2300      	movs	r3, #0
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3714      	adds	r7, #20
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr

080127f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b084      	sub	sp, #16
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
 80127fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012802:	2b01      	cmp	r3, #1
 8012804:	d101      	bne.n	801280a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012806:	2302      	movs	r3, #2
 8012808:	e02d      	b.n	8012866 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2201      	movs	r2, #1
 801280e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2224      	movs	r2, #36	; 0x24
 8012816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	681a      	ldr	r2, [r3, #0]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	f022 0201 	bic.w	r2, r2, #1
 8012830:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	689b      	ldr	r3, [r3, #8]
 8012838:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	683a      	ldr	r2, [r7, #0]
 8012842:	430a      	orrs	r2, r1
 8012844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f000 f850 	bl	80128ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	68fa      	ldr	r2, [r7, #12]
 8012852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2220      	movs	r2, #32
 8012858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2200      	movs	r2, #0
 8012860:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012864:	2300      	movs	r3, #0
}
 8012866:	4618      	mov	r0, r3
 8012868:	3710      	adds	r7, #16
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}

0801286e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801286e:	b580      	push	{r7, lr}
 8012870:	b084      	sub	sp, #16
 8012872:	af00      	add	r7, sp, #0
 8012874:	6078      	str	r0, [r7, #4]
 8012876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801287e:	2b01      	cmp	r3, #1
 8012880:	d101      	bne.n	8012886 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012882:	2302      	movs	r3, #2
 8012884:	e02d      	b.n	80128e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2201      	movs	r2, #1
 801288a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2224      	movs	r2, #36	; 0x24
 8012892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f022 0201 	bic.w	r2, r2, #1
 80128ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	689b      	ldr	r3, [r3, #8]
 80128b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	683a      	ldr	r2, [r7, #0]
 80128be:	430a      	orrs	r2, r1
 80128c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f000 f812 	bl	80128ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	68fa      	ldr	r2, [r7, #12]
 80128ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2220      	movs	r2, #32
 80128d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2200      	movs	r2, #0
 80128dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80128e0:	2300      	movs	r3, #0
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	3710      	adds	r7, #16
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
	...

080128ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80128ec:	b480      	push	{r7}
 80128ee:	b085      	sub	sp, #20
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d108      	bne.n	801290e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2201      	movs	r2, #1
 8012900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2201      	movs	r2, #1
 8012908:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801290c:	e031      	b.n	8012972 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801290e:	2310      	movs	r3, #16
 8012910:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012912:	2310      	movs	r3, #16
 8012914:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	689b      	ldr	r3, [r3, #8]
 801291c:	0e5b      	lsrs	r3, r3, #25
 801291e:	b2db      	uxtb	r3, r3
 8012920:	f003 0307 	and.w	r3, r3, #7
 8012924:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	689b      	ldr	r3, [r3, #8]
 801292c:	0f5b      	lsrs	r3, r3, #29
 801292e:	b2db      	uxtb	r3, r3
 8012930:	f003 0307 	and.w	r3, r3, #7
 8012934:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012936:	7bbb      	ldrb	r3, [r7, #14]
 8012938:	7b3a      	ldrb	r2, [r7, #12]
 801293a:	4911      	ldr	r1, [pc, #68]	; (8012980 <UARTEx_SetNbDataToProcess+0x94>)
 801293c:	5c8a      	ldrb	r2, [r1, r2]
 801293e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012942:	7b3a      	ldrb	r2, [r7, #12]
 8012944:	490f      	ldr	r1, [pc, #60]	; (8012984 <UARTEx_SetNbDataToProcess+0x98>)
 8012946:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012948:	fb93 f3f2 	sdiv	r3, r3, r2
 801294c:	b29a      	uxth	r2, r3
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012954:	7bfb      	ldrb	r3, [r7, #15]
 8012956:	7b7a      	ldrb	r2, [r7, #13]
 8012958:	4909      	ldr	r1, [pc, #36]	; (8012980 <UARTEx_SetNbDataToProcess+0x94>)
 801295a:	5c8a      	ldrb	r2, [r1, r2]
 801295c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012960:	7b7a      	ldrb	r2, [r7, #13]
 8012962:	4908      	ldr	r1, [pc, #32]	; (8012984 <UARTEx_SetNbDataToProcess+0x98>)
 8012964:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012966:	fb93 f3f2 	sdiv	r3, r3, r2
 801296a:	b29a      	uxth	r2, r3
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012972:	bf00      	nop
 8012974:	3714      	adds	r7, #20
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr
 801297e:	bf00      	nop
 8012980:	0801bfac 	.word	0x0801bfac
 8012984:	0801bfb4 	.word	0x0801bfb4

08012988 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012988:	b084      	sub	sp, #16
 801298a:	b480      	push	{r7}
 801298c:	b085      	sub	sp, #20
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
 8012992:	f107 001c 	add.w	r0, r7, #28
 8012996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801299a:	2300      	movs	r3, #0
 801299c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801299e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80129a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80129a2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80129a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80129a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80129a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80129aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80129ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80129ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80129b0:	68fa      	ldr	r2, [r7, #12]
 80129b2:	4313      	orrs	r3, r2
 80129b4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	685a      	ldr	r2, [r3, #4]
 80129ba:	4b07      	ldr	r3, [pc, #28]	; (80129d8 <SDMMC_Init+0x50>)
 80129bc:	4013      	ands	r3, r2
 80129be:	68fa      	ldr	r2, [r7, #12]
 80129c0:	431a      	orrs	r2, r3
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80129c6:	2300      	movs	r3, #0
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3714      	adds	r7, #20
 80129cc:	46bd      	mov	sp, r7
 80129ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d2:	b004      	add	sp, #16
 80129d4:	4770      	bx	lr
 80129d6:	bf00      	nop
 80129d8:	ffc02c00 	.word	0xffc02c00

080129dc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80129dc:	b480      	push	{r7}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	370c      	adds	r7, #12
 80129ee:	46bd      	mov	sp, r7
 80129f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f4:	4770      	bx	lr

080129f6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80129f6:	b480      	push	{r7}
 80129f8:	b083      	sub	sp, #12
 80129fa:	af00      	add	r7, sp, #0
 80129fc:	6078      	str	r0, [r7, #4]
 80129fe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012a0a:	2300      	movs	r3, #0
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	370c      	adds	r7, #12
 8012a10:	46bd      	mov	sp, r7
 8012a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a16:	4770      	bx	lr

08012a18 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012a18:	b480      	push	{r7}
 8012a1a:	b083      	sub	sp, #12
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	f043 0203 	orr.w	r2, r3, #3
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012a2c:	2300      	movs	r3, #0
}
 8012a2e:	4618      	mov	r0, r3
 8012a30:	370c      	adds	r7, #12
 8012a32:	46bd      	mov	sp, r7
 8012a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a38:	4770      	bx	lr

08012a3a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012a3a:	b480      	push	{r7}
 8012a3c:	b083      	sub	sp, #12
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f003 0303 	and.w	r3, r3, #3
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	370c      	adds	r7, #12
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a54:	4770      	bx	lr
	...

08012a58 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012a58:	b480      	push	{r7}
 8012a5a:	b085      	sub	sp, #20
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012a62:	2300      	movs	r3, #0
 8012a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	681a      	ldr	r2, [r3, #0]
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012a76:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012a7c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012a82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012a84:	68fa      	ldr	r2, [r7, #12]
 8012a86:	4313      	orrs	r3, r2
 8012a88:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	68da      	ldr	r2, [r3, #12]
 8012a8e:	4b06      	ldr	r3, [pc, #24]	; (8012aa8 <SDMMC_SendCommand+0x50>)
 8012a90:	4013      	ands	r3, r2
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	431a      	orrs	r2, r3
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012a9a:	2300      	movs	r3, #0
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3714      	adds	r7, #20
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa6:	4770      	bx	lr
 8012aa8:	fffee0c0 	.word	0xfffee0c0

08012aac <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012aac:	b480      	push	{r7}
 8012aae:	b083      	sub	sp, #12
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	691b      	ldr	r3, [r3, #16]
 8012ab8:	b2db      	uxtb	r3, r3
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	370c      	adds	r7, #12
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac4:	4770      	bx	lr

08012ac6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012ac6:	b480      	push	{r7}
 8012ac8:	b085      	sub	sp, #20
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
 8012ace:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	3314      	adds	r3, #20
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	4413      	add	r3, r2
 8012ada:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	681b      	ldr	r3, [r3, #0]
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3714      	adds	r7, #20
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr

08012aec <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b085      	sub	sp, #20
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012af6:	2300      	movs	r3, #0
 8012af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	681a      	ldr	r2, [r3, #0]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	685a      	ldr	r2, [r3, #4]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012b12:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012b18:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012b1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012b20:	68fa      	ldr	r2, [r7, #12]
 8012b22:	4313      	orrs	r3, r2
 8012b24:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	431a      	orrs	r2, r3
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012b36:	2300      	movs	r3, #0

}
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3714      	adds	r7, #20
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr

08012b44 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b088      	sub	sp, #32
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012b52:	2310      	movs	r3, #16
 8012b54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b66:	f107 0308 	add.w	r3, r7, #8
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f7ff ff73 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b76:	2110      	movs	r1, #16
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f000 fa5f 	bl	801303c <SDMMC_GetCmdResp1>
 8012b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b80:	69fb      	ldr	r3, [r7, #28]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3720      	adds	r7, #32
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b088      	sub	sp, #32
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
 8012b92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012b98:	2311      	movs	r3, #17
 8012b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012baa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bac:	f107 0308 	add.w	r3, r7, #8
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f7ff ff50 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bbc:	2111      	movs	r1, #17
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f000 fa3c 	bl	801303c <SDMMC_GetCmdResp1>
 8012bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bc6:	69fb      	ldr	r3, [r7, #28]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3720      	adds	r7, #32
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b088      	sub	sp, #32
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012bde:	2312      	movs	r3, #18
 8012be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012be6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012be8:	2300      	movs	r3, #0
 8012bea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bf2:	f107 0308 	add.w	r3, r7, #8
 8012bf6:	4619      	mov	r1, r3
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7ff ff2d 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c02:	2112      	movs	r1, #18
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f000 fa19 	bl	801303c <SDMMC_GetCmdResp1>
 8012c0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c0c:	69fb      	ldr	r3, [r7, #28]
}
 8012c0e:	4618      	mov	r0, r3
 8012c10:	3720      	adds	r7, #32
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}

08012c16 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012c16:	b580      	push	{r7, lr}
 8012c18:	b088      	sub	sp, #32
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	6078      	str	r0, [r7, #4]
 8012c1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012c24:	2318      	movs	r3, #24
 8012c26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c38:	f107 0308 	add.w	r3, r7, #8
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f7ff ff0a 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c48:	2118      	movs	r1, #24
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f000 f9f6 	bl	801303c <SDMMC_GetCmdResp1>
 8012c50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c52:	69fb      	ldr	r3, [r7, #28]
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3720      	adds	r7, #32
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b088      	sub	sp, #32
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012c6a:	2319      	movs	r3, #25
 8012c6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c74:	2300      	movs	r3, #0
 8012c76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c7e:	f107 0308 	add.w	r3, r7, #8
 8012c82:	4619      	mov	r1, r3
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f7ff fee7 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c8e:	2119      	movs	r1, #25
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f000 f9d3 	bl	801303c <SDMMC_GetCmdResp1>
 8012c96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c98:	69fb      	ldr	r3, [r7, #28]
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3720      	adds	r7, #32
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
	...

08012ca4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b088      	sub	sp, #32
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012cac:	2300      	movs	r3, #0
 8012cae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012cb0:	230c      	movs	r3, #12
 8012cb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012cb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012cc2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	68db      	ldr	r3, [r3, #12]
 8012cd4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012cdc:	f107 0308 	add.w	r3, r7, #8
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f7ff feb8 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012ce8:	4a0b      	ldr	r2, [pc, #44]	; (8012d18 <SDMMC_CmdStopTransfer+0x74>)
 8012cea:	210c      	movs	r1, #12
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f000 f9a5 	bl	801303c <SDMMC_GetCmdResp1>
 8012cf2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	68db      	ldr	r3, [r3, #12]
 8012cf8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012d06:	d101      	bne.n	8012d0c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012d0c:	69fb      	ldr	r3, [r7, #28]
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3720      	adds	r7, #32
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	05f5e100 	.word	0x05f5e100

08012d1c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b088      	sub	sp, #32
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012d2a:	2307      	movs	r3, #7
 8012d2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d34:	2300      	movs	r3, #0
 8012d36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d3e:	f107 0308 	add.w	r3, r7, #8
 8012d42:	4619      	mov	r1, r3
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f7ff fe87 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d4e:	2107      	movs	r1, #7
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f000 f973 	bl	801303c <SDMMC_GetCmdResp1>
 8012d56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d58:	69fb      	ldr	r3, [r7, #28]
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3720      	adds	r7, #32
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}

08012d62 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012d62:	b580      	push	{r7, lr}
 8012d64:	b088      	sub	sp, #32
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012d72:	2300      	movs	r3, #0
 8012d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012d76:	2300      	movs	r3, #0
 8012d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012d80:	f107 0308 	add.w	r3, r7, #8
 8012d84:	4619      	mov	r1, r3
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f7ff fe66 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f000 fb97 	bl	80134c0 <SDMMC_GetCmdError>
 8012d92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012d94:	69fb      	ldr	r3, [r7, #28]
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3720      	adds	r7, #32
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}

08012d9e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012d9e:	b580      	push	{r7, lr}
 8012da0:	b088      	sub	sp, #32
 8012da2:	af00      	add	r7, sp, #0
 8012da4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012da6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012daa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012dac:	2308      	movs	r3, #8
 8012dae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012db4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012db6:	2300      	movs	r3, #0
 8012db8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012dbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012dc0:	f107 0308 	add.w	r3, r7, #8
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f7ff fe46 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f000 fb29 	bl	8013424 <SDMMC_GetCmdResp7>
 8012dd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012dd4:	69fb      	ldr	r3, [r7, #28]
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3720      	adds	r7, #32
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}

08012dde <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012dde:	b580      	push	{r7, lr}
 8012de0:	b088      	sub	sp, #32
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	6078      	str	r0, [r7, #4]
 8012de6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012dec:	2337      	movs	r3, #55	; 0x37
 8012dee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012df4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012df6:	2300      	movs	r3, #0
 8012df8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012dfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e00:	f107 0308 	add.w	r3, r7, #8
 8012e04:	4619      	mov	r1, r3
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f7ff fe26 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e10:	2137      	movs	r1, #55	; 0x37
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f000 f912 	bl	801303c <SDMMC_GetCmdResp1>
 8012e18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e1a:	69fb      	ldr	r3, [r7, #28]
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3720      	adds	r7, #32
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}

08012e24 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b088      	sub	sp, #32
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012e32:	2329      	movs	r3, #41	; 0x29
 8012e34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e46:	f107 0308 	add.w	r3, r7, #8
 8012e4a:	4619      	mov	r1, r3
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f7ff fe03 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f000 fa2e 	bl	80132b4 <SDMMC_GetCmdResp3>
 8012e58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e5a:	69fb      	ldr	r3, [r7, #28]
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3720      	adds	r7, #32
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}

08012e64 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b088      	sub	sp, #32
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012e72:	2306      	movs	r3, #6
 8012e74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e86:	f107 0308 	add.w	r3, r7, #8
 8012e8a:	4619      	mov	r1, r3
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f7ff fde3 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e96:	2106      	movs	r1, #6
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f000 f8cf 	bl	801303c <SDMMC_GetCmdResp1>
 8012e9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ea0:	69fb      	ldr	r3, [r7, #28]
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3720      	adds	r7, #32
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}

08012eaa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012eaa:	b580      	push	{r7, lr}
 8012eac:	b088      	sub	sp, #32
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012eb6:	2333      	movs	r3, #51	; 0x33
 8012eb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ec8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012eca:	f107 0308 	add.w	r3, r7, #8
 8012ece:	4619      	mov	r1, r3
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f7ff fdc1 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8012eda:	2133      	movs	r1, #51	; 0x33
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f000 f8ad 	bl	801303c <SDMMC_GetCmdResp1>
 8012ee2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ee4:	69fb      	ldr	r3, [r7, #28]
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3720      	adds	r7, #32
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}

08012eee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012eee:	b580      	push	{r7, lr}
 8012ef0:	b088      	sub	sp, #32
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012efa:	2302      	movs	r3, #2
 8012efc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012efe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012f02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f04:	2300      	movs	r3, #0
 8012f06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f0e:	f107 0308 	add.w	r3, r7, #8
 8012f12:	4619      	mov	r1, r3
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f7ff fd9f 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f000 f980 	bl	8013220 <SDMMC_GetCmdResp2>
 8012f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f22:	69fb      	ldr	r3, [r7, #28]
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	3720      	adds	r7, #32
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}

08012f2c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b088      	sub	sp, #32
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012f3a:	2309      	movs	r3, #9
 8012f3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012f3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012f42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f44:	2300      	movs	r3, #0
 8012f46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f4e:	f107 0308 	add.w	r3, r7, #8
 8012f52:	4619      	mov	r1, r3
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f7ff fd7f 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f000 f960 	bl	8013220 <SDMMC_GetCmdResp2>
 8012f60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f62:	69fb      	ldr	r3, [r7, #28]
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3720      	adds	r7, #32
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}

08012f6c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b088      	sub	sp, #32
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012f76:	2300      	movs	r3, #0
 8012f78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012f7a:	2303      	movs	r3, #3
 8012f7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f84:	2300      	movs	r3, #0
 8012f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f8e:	f107 0308 	add.w	r3, r7, #8
 8012f92:	4619      	mov	r1, r3
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f7ff fd5f 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012f9a:	683a      	ldr	r2, [r7, #0]
 8012f9c:	2103      	movs	r1, #3
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f000 f9c8 	bl	8013334 <SDMMC_GetCmdResp6>
 8012fa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fa6:	69fb      	ldr	r3, [r7, #28]
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3720      	adds	r7, #32
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}

08012fb0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b088      	sub	sp, #32
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012fbe:	230d      	movs	r3, #13
 8012fc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012fd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fd2:	f107 0308 	add.w	r3, r7, #8
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	6878      	ldr	r0, [r7, #4]
 8012fda:	f7ff fd3d 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fe2:	210d      	movs	r1, #13
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f000 f829 	bl	801303c <SDMMC_GetCmdResp1>
 8012fea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fec:	69fb      	ldr	r3, [r7, #28]
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3720      	adds	r7, #32
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}

08012ff6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b088      	sub	sp, #32
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012ffe:	2300      	movs	r3, #0
 8013000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8013002:	230d      	movs	r3, #13
 8013004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013006:	f44f 7380 	mov.w	r3, #256	; 0x100
 801300a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801300c:	2300      	movs	r3, #0
 801300e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013014:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013016:	f107 0308 	add.w	r3, r7, #8
 801301a:	4619      	mov	r1, r3
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f7ff fd1b 	bl	8012a58 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8013022:	f241 3288 	movw	r2, #5000	; 0x1388
 8013026:	210d      	movs	r1, #13
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f000 f807 	bl	801303c <SDMMC_GetCmdResp1>
 801302e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013030:	69fb      	ldr	r3, [r7, #28]
}
 8013032:	4618      	mov	r0, r3
 8013034:	3720      	adds	r7, #32
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
	...

0801303c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b088      	sub	sp, #32
 8013040:	af00      	add	r7, sp, #0
 8013042:	60f8      	str	r0, [r7, #12]
 8013044:	460b      	mov	r3, r1
 8013046:	607a      	str	r2, [r7, #4]
 8013048:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801304a:	4b70      	ldr	r3, [pc, #448]	; (801320c <SDMMC_GetCmdResp1+0x1d0>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	4a70      	ldr	r2, [pc, #448]	; (8013210 <SDMMC_GetCmdResp1+0x1d4>)
 8013050:	fba2 2303 	umull	r2, r3, r2, r3
 8013054:	0a5a      	lsrs	r2, r3, #9
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	fb02 f303 	mul.w	r3, r2, r3
 801305c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801305e:	69fb      	ldr	r3, [r7, #28]
 8013060:	1e5a      	subs	r2, r3, #1
 8013062:	61fa      	str	r2, [r7, #28]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d102      	bne.n	801306e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013068:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801306c:	e0c9      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013072:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013074:	69ba      	ldr	r2, [r7, #24]
 8013076:	4b67      	ldr	r3, [pc, #412]	; (8013214 <SDMMC_GetCmdResp1+0x1d8>)
 8013078:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801307a:	2b00      	cmp	r3, #0
 801307c:	d0ef      	beq.n	801305e <SDMMC_GetCmdResp1+0x22>
 801307e:	69bb      	ldr	r3, [r7, #24]
 8013080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013084:	2b00      	cmp	r3, #0
 8013086:	d1ea      	bne.n	801305e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801308c:	f003 0304 	and.w	r3, r3, #4
 8013090:	2b00      	cmp	r3, #0
 8013092:	d004      	beq.n	801309e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2204      	movs	r2, #4
 8013098:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801309a:	2304      	movs	r3, #4
 801309c:	e0b1      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130a2:	f003 0301 	and.w	r3, r3, #1
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d004      	beq.n	80130b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	2201      	movs	r2, #1
 80130ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80130b0:	2301      	movs	r3, #1
 80130b2:	e0a6      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	4a58      	ldr	r2, [pc, #352]	; (8013218 <SDMMC_GetCmdResp1+0x1dc>)
 80130b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80130ba:	68f8      	ldr	r0, [r7, #12]
 80130bc:	f7ff fcf6 	bl	8012aac <SDMMC_GetCommandResponse>
 80130c0:	4603      	mov	r3, r0
 80130c2:	461a      	mov	r2, r3
 80130c4:	7afb      	ldrb	r3, [r7, #11]
 80130c6:	4293      	cmp	r3, r2
 80130c8:	d001      	beq.n	80130ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80130ca:	2301      	movs	r3, #1
 80130cc:	e099      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80130ce:	2100      	movs	r1, #0
 80130d0:	68f8      	ldr	r0, [r7, #12]
 80130d2:	f7ff fcf8 	bl	8012ac6 <SDMMC_GetResponse>
 80130d6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80130d8:	697a      	ldr	r2, [r7, #20]
 80130da:	4b50      	ldr	r3, [pc, #320]	; (801321c <SDMMC_GetCmdResp1+0x1e0>)
 80130dc:	4013      	ands	r3, r2
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d101      	bne.n	80130e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80130e2:	2300      	movs	r3, #0
 80130e4:	e08d      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	da02      	bge.n	80130f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80130ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80130f0:	e087      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d001      	beq.n	8013100 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80130fc:	2340      	movs	r3, #64	; 0x40
 80130fe:	e080      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013106:	2b00      	cmp	r3, #0
 8013108:	d001      	beq.n	801310e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801310a:	2380      	movs	r3, #128	; 0x80
 801310c:	e079      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013114:	2b00      	cmp	r3, #0
 8013116:	d002      	beq.n	801311e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013118:	f44f 7380 	mov.w	r3, #256	; 0x100
 801311c:	e071      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013124:	2b00      	cmp	r3, #0
 8013126:	d002      	beq.n	801312e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013128:	f44f 7300 	mov.w	r3, #512	; 0x200
 801312c:	e069      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013134:	2b00      	cmp	r3, #0
 8013136:	d002      	beq.n	801313e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801313c:	e061      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013144:	2b00      	cmp	r3, #0
 8013146:	d002      	beq.n	801314e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801314c:	e059      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013154:	2b00      	cmp	r3, #0
 8013156:	d002      	beq.n	801315e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801315c:	e051      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013164:	2b00      	cmp	r3, #0
 8013166:	d002      	beq.n	801316e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801316c:	e049      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013174:	2b00      	cmp	r3, #0
 8013176:	d002      	beq.n	801317e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013178:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801317c:	e041      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013184:	2b00      	cmp	r3, #0
 8013186:	d002      	beq.n	801318e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801318c:	e039      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013194:	2b00      	cmp	r3, #0
 8013196:	d002      	beq.n	801319e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801319c:	e031      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d002      	beq.n	80131ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80131a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80131ac:	e029      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d002      	beq.n	80131be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80131b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80131bc:	e021      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d002      	beq.n	80131ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80131c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80131cc:	e019      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d002      	beq.n	80131de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80131d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80131dc:	e011      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80131de:	697b      	ldr	r3, [r7, #20]
 80131e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d002      	beq.n	80131ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80131e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80131ec:	e009      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	f003 0308 	and.w	r3, r3, #8
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d002      	beq.n	80131fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80131f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80131fc:	e001      	b.n	8013202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80131fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013202:	4618      	mov	r0, r3
 8013204:	3720      	adds	r7, #32
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}
 801320a:	bf00      	nop
 801320c:	24000000 	.word	0x24000000
 8013210:	10624dd3 	.word	0x10624dd3
 8013214:	00200045 	.word	0x00200045
 8013218:	002000c5 	.word	0x002000c5
 801321c:	fdffe008 	.word	0xfdffe008

08013220 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013220:	b480      	push	{r7}
 8013222:	b085      	sub	sp, #20
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013228:	4b1f      	ldr	r3, [pc, #124]	; (80132a8 <SDMMC_GetCmdResp2+0x88>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	4a1f      	ldr	r2, [pc, #124]	; (80132ac <SDMMC_GetCmdResp2+0x8c>)
 801322e:	fba2 2303 	umull	r2, r3, r2, r3
 8013232:	0a5b      	lsrs	r3, r3, #9
 8013234:	f241 3288 	movw	r2, #5000	; 0x1388
 8013238:	fb02 f303 	mul.w	r3, r2, r3
 801323c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	1e5a      	subs	r2, r3, #1
 8013242:	60fa      	str	r2, [r7, #12]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d102      	bne.n	801324e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801324c:	e026      	b.n	801329c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013252:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801325a:	2b00      	cmp	r3, #0
 801325c:	d0ef      	beq.n	801323e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013264:	2b00      	cmp	r3, #0
 8013266:	d1ea      	bne.n	801323e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801326c:	f003 0304 	and.w	r3, r3, #4
 8013270:	2b00      	cmp	r3, #0
 8013272:	d004      	beq.n	801327e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2204      	movs	r2, #4
 8013278:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801327a:	2304      	movs	r3, #4
 801327c:	e00e      	b.n	801329c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013282:	f003 0301 	and.w	r3, r3, #1
 8013286:	2b00      	cmp	r3, #0
 8013288:	d004      	beq.n	8013294 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2201      	movs	r2, #1
 801328e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013290:	2301      	movs	r3, #1
 8013292:	e003      	b.n	801329c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	4a06      	ldr	r2, [pc, #24]	; (80132b0 <SDMMC_GetCmdResp2+0x90>)
 8013298:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801329a:	2300      	movs	r3, #0
}
 801329c:	4618      	mov	r0, r3
 801329e:	3714      	adds	r7, #20
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr
 80132a8:	24000000 	.word	0x24000000
 80132ac:	10624dd3 	.word	0x10624dd3
 80132b0:	002000c5 	.word	0x002000c5

080132b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80132b4:	b480      	push	{r7}
 80132b6:	b085      	sub	sp, #20
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80132bc:	4b1a      	ldr	r3, [pc, #104]	; (8013328 <SDMMC_GetCmdResp3+0x74>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	4a1a      	ldr	r2, [pc, #104]	; (801332c <SDMMC_GetCmdResp3+0x78>)
 80132c2:	fba2 2303 	umull	r2, r3, r2, r3
 80132c6:	0a5b      	lsrs	r3, r3, #9
 80132c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80132cc:	fb02 f303 	mul.w	r3, r2, r3
 80132d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	1e5a      	subs	r2, r3, #1
 80132d6:	60fa      	str	r2, [r7, #12]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d102      	bne.n	80132e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80132dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80132e0:	e01b      	b.n	801331a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d0ef      	beq.n	80132d2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d1ea      	bne.n	80132d2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013300:	f003 0304 	and.w	r3, r3, #4
 8013304:	2b00      	cmp	r3, #0
 8013306:	d004      	beq.n	8013312 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2204      	movs	r2, #4
 801330c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801330e:	2304      	movs	r3, #4
 8013310:	e003      	b.n	801331a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	4a06      	ldr	r2, [pc, #24]	; (8013330 <SDMMC_GetCmdResp3+0x7c>)
 8013316:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013318:	2300      	movs	r3, #0
}
 801331a:	4618      	mov	r0, r3
 801331c:	3714      	adds	r7, #20
 801331e:	46bd      	mov	sp, r7
 8013320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013324:	4770      	bx	lr
 8013326:	bf00      	nop
 8013328:	24000000 	.word	0x24000000
 801332c:	10624dd3 	.word	0x10624dd3
 8013330:	002000c5 	.word	0x002000c5

08013334 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b088      	sub	sp, #32
 8013338:	af00      	add	r7, sp, #0
 801333a:	60f8      	str	r0, [r7, #12]
 801333c:	460b      	mov	r3, r1
 801333e:	607a      	str	r2, [r7, #4]
 8013340:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013342:	4b35      	ldr	r3, [pc, #212]	; (8013418 <SDMMC_GetCmdResp6+0xe4>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	4a35      	ldr	r2, [pc, #212]	; (801341c <SDMMC_GetCmdResp6+0xe8>)
 8013348:	fba2 2303 	umull	r2, r3, r2, r3
 801334c:	0a5b      	lsrs	r3, r3, #9
 801334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013352:	fb02 f303 	mul.w	r3, r2, r3
 8013356:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013358:	69fb      	ldr	r3, [r7, #28]
 801335a:	1e5a      	subs	r2, r3, #1
 801335c:	61fa      	str	r2, [r7, #28]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d102      	bne.n	8013368 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013362:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013366:	e052      	b.n	801340e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801336c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013374:	2b00      	cmp	r3, #0
 8013376:	d0ef      	beq.n	8013358 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013378:	69bb      	ldr	r3, [r7, #24]
 801337a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801337e:	2b00      	cmp	r3, #0
 8013380:	d1ea      	bne.n	8013358 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013386:	f003 0304 	and.w	r3, r3, #4
 801338a:	2b00      	cmp	r3, #0
 801338c:	d004      	beq.n	8013398 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	2204      	movs	r2, #4
 8013392:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013394:	2304      	movs	r3, #4
 8013396:	e03a      	b.n	801340e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801339c:	f003 0301 	and.w	r3, r3, #1
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d004      	beq.n	80133ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	2201      	movs	r2, #1
 80133a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80133aa:	2301      	movs	r3, #1
 80133ac:	e02f      	b.n	801340e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80133ae:	68f8      	ldr	r0, [r7, #12]
 80133b0:	f7ff fb7c 	bl	8012aac <SDMMC_GetCommandResponse>
 80133b4:	4603      	mov	r3, r0
 80133b6:	461a      	mov	r2, r3
 80133b8:	7afb      	ldrb	r3, [r7, #11]
 80133ba:	4293      	cmp	r3, r2
 80133bc:	d001      	beq.n	80133c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80133be:	2301      	movs	r3, #1
 80133c0:	e025      	b.n	801340e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	4a16      	ldr	r2, [pc, #88]	; (8013420 <SDMMC_GetCmdResp6+0xec>)
 80133c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80133c8:	2100      	movs	r1, #0
 80133ca:	68f8      	ldr	r0, [r7, #12]
 80133cc:	f7ff fb7b 	bl	8012ac6 <SDMMC_GetResponse>
 80133d0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80133d2:	697b      	ldr	r3, [r7, #20]
 80133d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d106      	bne.n	80133ea <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	0c1b      	lsrs	r3, r3, #16
 80133e0:	b29a      	uxth	r2, r3
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80133e6:	2300      	movs	r3, #0
 80133e8:	e011      	b.n	801340e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d002      	beq.n	80133fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80133f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80133f8:	e009      	b.n	801340e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013400:	2b00      	cmp	r3, #0
 8013402:	d002      	beq.n	801340a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013408:	e001      	b.n	801340e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801340a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801340e:	4618      	mov	r0, r3
 8013410:	3720      	adds	r7, #32
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
 8013416:	bf00      	nop
 8013418:	24000000 	.word	0x24000000
 801341c:	10624dd3 	.word	0x10624dd3
 8013420:	002000c5 	.word	0x002000c5

08013424 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013424:	b480      	push	{r7}
 8013426:	b085      	sub	sp, #20
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801342c:	4b22      	ldr	r3, [pc, #136]	; (80134b8 <SDMMC_GetCmdResp7+0x94>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4a22      	ldr	r2, [pc, #136]	; (80134bc <SDMMC_GetCmdResp7+0x98>)
 8013432:	fba2 2303 	umull	r2, r3, r2, r3
 8013436:	0a5b      	lsrs	r3, r3, #9
 8013438:	f241 3288 	movw	r2, #5000	; 0x1388
 801343c:	fb02 f303 	mul.w	r3, r2, r3
 8013440:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	1e5a      	subs	r2, r3, #1
 8013446:	60fa      	str	r2, [r7, #12]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d102      	bne.n	8013452 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801344c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013450:	e02c      	b.n	80134ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013456:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801345e:	2b00      	cmp	r3, #0
 8013460:	d0ef      	beq.n	8013442 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013468:	2b00      	cmp	r3, #0
 801346a:	d1ea      	bne.n	8013442 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013470:	f003 0304 	and.w	r3, r3, #4
 8013474:	2b00      	cmp	r3, #0
 8013476:	d004      	beq.n	8013482 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2204      	movs	r2, #4
 801347c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801347e:	2304      	movs	r3, #4
 8013480:	e014      	b.n	80134ac <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013486:	f003 0301 	and.w	r3, r3, #1
 801348a:	2b00      	cmp	r3, #0
 801348c:	d004      	beq.n	8013498 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2201      	movs	r2, #1
 8013492:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013494:	2301      	movs	r3, #1
 8013496:	e009      	b.n	80134ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d002      	beq.n	80134aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2240      	movs	r2, #64	; 0x40
 80134a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80134aa:	2300      	movs	r3, #0

}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3714      	adds	r7, #20
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr
 80134b8:	24000000 	.word	0x24000000
 80134bc:	10624dd3 	.word	0x10624dd3

080134c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80134c0:	b480      	push	{r7}
 80134c2:	b085      	sub	sp, #20
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80134c8:	4b11      	ldr	r3, [pc, #68]	; (8013510 <SDMMC_GetCmdError+0x50>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	4a11      	ldr	r2, [pc, #68]	; (8013514 <SDMMC_GetCmdError+0x54>)
 80134ce:	fba2 2303 	umull	r2, r3, r2, r3
 80134d2:	0a5b      	lsrs	r3, r3, #9
 80134d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80134d8:	fb02 f303 	mul.w	r3, r2, r3
 80134dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	1e5a      	subs	r2, r3, #1
 80134e2:	60fa      	str	r2, [r7, #12]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d102      	bne.n	80134ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80134e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80134ec:	e009      	b.n	8013502 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d0f1      	beq.n	80134de <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	4a06      	ldr	r2, [pc, #24]	; (8013518 <SDMMC_GetCmdError+0x58>)
 80134fe:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013500:	2300      	movs	r3, #0
}
 8013502:	4618      	mov	r0, r3
 8013504:	3714      	adds	r7, #20
 8013506:	46bd      	mov	sp, r7
 8013508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350c:	4770      	bx	lr
 801350e:	bf00      	nop
 8013510:	24000000 	.word	0x24000000
 8013514:	10624dd3 	.word	0x10624dd3
 8013518:	002000c5 	.word	0x002000c5

0801351c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801351c:	b084      	sub	sp, #16
 801351e:	b580      	push	{r7, lr}
 8013520:	b084      	sub	sp, #16
 8013522:	af00      	add	r7, sp, #0
 8013524:	6078      	str	r0, [r7, #4]
 8013526:	f107 001c 	add.w	r0, r7, #28
 801352a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013530:	2b01      	cmp	r3, #1
 8013532:	d120      	bne.n	8013576 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	68da      	ldr	r2, [r3, #12]
 8013544:	4b2a      	ldr	r3, [pc, #168]	; (80135f0 <USB_CoreInit+0xd4>)
 8013546:	4013      	ands	r3, r2
 8013548:	687a      	ldr	r2, [r7, #4]
 801354a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	68db      	ldr	r3, [r3, #12]
 8013550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801355a:	2b01      	cmp	r3, #1
 801355c:	d105      	bne.n	801356a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	68db      	ldr	r3, [r3, #12]
 8013562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801356a:	6878      	ldr	r0, [r7, #4]
 801356c:	f001 faf8 	bl	8014b60 <USB_CoreReset>
 8013570:	4603      	mov	r3, r0
 8013572:	73fb      	strb	r3, [r7, #15]
 8013574:	e01a      	b.n	80135ac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	68db      	ldr	r3, [r3, #12]
 801357a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f001 faec 	bl	8014b60 <USB_CoreReset>
 8013588:	4603      	mov	r3, r0
 801358a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801358c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801358e:	2b00      	cmp	r3, #0
 8013590:	d106      	bne.n	80135a0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013596:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	639a      	str	r2, [r3, #56]	; 0x38
 801359e:	e005      	b.n	80135ac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80135ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ae:	2b01      	cmp	r3, #1
 80135b0:	d116      	bne.n	80135e0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80135b6:	b29a      	uxth	r2, r3
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80135c0:	4b0c      	ldr	r3, [pc, #48]	; (80135f4 <USB_CoreInit+0xd8>)
 80135c2:	4313      	orrs	r3, r2
 80135c4:	687a      	ldr	r2, [r7, #4]
 80135c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	689b      	ldr	r3, [r3, #8]
 80135cc:	f043 0206 	orr.w	r2, r3, #6
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	689b      	ldr	r3, [r3, #8]
 80135d8:	f043 0220 	orr.w	r2, r3, #32
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80135e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3710      	adds	r7, #16
 80135e6:	46bd      	mov	sp, r7
 80135e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80135ec:	b004      	add	sp, #16
 80135ee:	4770      	bx	lr
 80135f0:	ffbdffbf 	.word	0xffbdffbf
 80135f4:	03ee0000 	.word	0x03ee0000

080135f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80135f8:	b480      	push	{r7}
 80135fa:	b087      	sub	sp, #28
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	60b9      	str	r1, [r7, #8]
 8013602:	4613      	mov	r3, r2
 8013604:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013606:	79fb      	ldrb	r3, [r7, #7]
 8013608:	2b02      	cmp	r3, #2
 801360a:	d165      	bne.n	80136d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	4a41      	ldr	r2, [pc, #260]	; (8013714 <USB_SetTurnaroundTime+0x11c>)
 8013610:	4293      	cmp	r3, r2
 8013612:	d906      	bls.n	8013622 <USB_SetTurnaroundTime+0x2a>
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	4a40      	ldr	r2, [pc, #256]	; (8013718 <USB_SetTurnaroundTime+0x120>)
 8013618:	4293      	cmp	r3, r2
 801361a:	d202      	bcs.n	8013622 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801361c:	230f      	movs	r3, #15
 801361e:	617b      	str	r3, [r7, #20]
 8013620:	e062      	b.n	80136e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	4a3c      	ldr	r2, [pc, #240]	; (8013718 <USB_SetTurnaroundTime+0x120>)
 8013626:	4293      	cmp	r3, r2
 8013628:	d306      	bcc.n	8013638 <USB_SetTurnaroundTime+0x40>
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	4a3b      	ldr	r2, [pc, #236]	; (801371c <USB_SetTurnaroundTime+0x124>)
 801362e:	4293      	cmp	r3, r2
 8013630:	d202      	bcs.n	8013638 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013632:	230e      	movs	r3, #14
 8013634:	617b      	str	r3, [r7, #20]
 8013636:	e057      	b.n	80136e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	4a38      	ldr	r2, [pc, #224]	; (801371c <USB_SetTurnaroundTime+0x124>)
 801363c:	4293      	cmp	r3, r2
 801363e:	d306      	bcc.n	801364e <USB_SetTurnaroundTime+0x56>
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	4a37      	ldr	r2, [pc, #220]	; (8013720 <USB_SetTurnaroundTime+0x128>)
 8013644:	4293      	cmp	r3, r2
 8013646:	d202      	bcs.n	801364e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013648:	230d      	movs	r3, #13
 801364a:	617b      	str	r3, [r7, #20]
 801364c:	e04c      	b.n	80136e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	4a33      	ldr	r2, [pc, #204]	; (8013720 <USB_SetTurnaroundTime+0x128>)
 8013652:	4293      	cmp	r3, r2
 8013654:	d306      	bcc.n	8013664 <USB_SetTurnaroundTime+0x6c>
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	4a32      	ldr	r2, [pc, #200]	; (8013724 <USB_SetTurnaroundTime+0x12c>)
 801365a:	4293      	cmp	r3, r2
 801365c:	d802      	bhi.n	8013664 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801365e:	230c      	movs	r3, #12
 8013660:	617b      	str	r3, [r7, #20]
 8013662:	e041      	b.n	80136e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	4a2f      	ldr	r2, [pc, #188]	; (8013724 <USB_SetTurnaroundTime+0x12c>)
 8013668:	4293      	cmp	r3, r2
 801366a:	d906      	bls.n	801367a <USB_SetTurnaroundTime+0x82>
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	4a2e      	ldr	r2, [pc, #184]	; (8013728 <USB_SetTurnaroundTime+0x130>)
 8013670:	4293      	cmp	r3, r2
 8013672:	d802      	bhi.n	801367a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013674:	230b      	movs	r3, #11
 8013676:	617b      	str	r3, [r7, #20]
 8013678:	e036      	b.n	80136e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	4a2a      	ldr	r2, [pc, #168]	; (8013728 <USB_SetTurnaroundTime+0x130>)
 801367e:	4293      	cmp	r3, r2
 8013680:	d906      	bls.n	8013690 <USB_SetTurnaroundTime+0x98>
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	4a29      	ldr	r2, [pc, #164]	; (801372c <USB_SetTurnaroundTime+0x134>)
 8013686:	4293      	cmp	r3, r2
 8013688:	d802      	bhi.n	8013690 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801368a:	230a      	movs	r3, #10
 801368c:	617b      	str	r3, [r7, #20]
 801368e:	e02b      	b.n	80136e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	4a26      	ldr	r2, [pc, #152]	; (801372c <USB_SetTurnaroundTime+0x134>)
 8013694:	4293      	cmp	r3, r2
 8013696:	d906      	bls.n	80136a6 <USB_SetTurnaroundTime+0xae>
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	4a25      	ldr	r2, [pc, #148]	; (8013730 <USB_SetTurnaroundTime+0x138>)
 801369c:	4293      	cmp	r3, r2
 801369e:	d202      	bcs.n	80136a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80136a0:	2309      	movs	r3, #9
 80136a2:	617b      	str	r3, [r7, #20]
 80136a4:	e020      	b.n	80136e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	4a21      	ldr	r2, [pc, #132]	; (8013730 <USB_SetTurnaroundTime+0x138>)
 80136aa:	4293      	cmp	r3, r2
 80136ac:	d306      	bcc.n	80136bc <USB_SetTurnaroundTime+0xc4>
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	4a20      	ldr	r2, [pc, #128]	; (8013734 <USB_SetTurnaroundTime+0x13c>)
 80136b2:	4293      	cmp	r3, r2
 80136b4:	d802      	bhi.n	80136bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80136b6:	2308      	movs	r3, #8
 80136b8:	617b      	str	r3, [r7, #20]
 80136ba:	e015      	b.n	80136e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	4a1d      	ldr	r2, [pc, #116]	; (8013734 <USB_SetTurnaroundTime+0x13c>)
 80136c0:	4293      	cmp	r3, r2
 80136c2:	d906      	bls.n	80136d2 <USB_SetTurnaroundTime+0xda>
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	4a1c      	ldr	r2, [pc, #112]	; (8013738 <USB_SetTurnaroundTime+0x140>)
 80136c8:	4293      	cmp	r3, r2
 80136ca:	d202      	bcs.n	80136d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80136cc:	2307      	movs	r3, #7
 80136ce:	617b      	str	r3, [r7, #20]
 80136d0:	e00a      	b.n	80136e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80136d2:	2306      	movs	r3, #6
 80136d4:	617b      	str	r3, [r7, #20]
 80136d6:	e007      	b.n	80136e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80136d8:	79fb      	ldrb	r3, [r7, #7]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d102      	bne.n	80136e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80136de:	2309      	movs	r3, #9
 80136e0:	617b      	str	r3, [r7, #20]
 80136e2:	e001      	b.n	80136e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80136e4:	2309      	movs	r3, #9
 80136e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	68db      	ldr	r3, [r3, #12]
 80136ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	68da      	ldr	r2, [r3, #12]
 80136f8:	697b      	ldr	r3, [r7, #20]
 80136fa:	029b      	lsls	r3, r3, #10
 80136fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013700:	431a      	orrs	r2, r3
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013706:	2300      	movs	r3, #0
}
 8013708:	4618      	mov	r0, r3
 801370a:	371c      	adds	r7, #28
 801370c:	46bd      	mov	sp, r7
 801370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013712:	4770      	bx	lr
 8013714:	00d8acbf 	.word	0x00d8acbf
 8013718:	00e4e1c0 	.word	0x00e4e1c0
 801371c:	00f42400 	.word	0x00f42400
 8013720:	01067380 	.word	0x01067380
 8013724:	011a499f 	.word	0x011a499f
 8013728:	01312cff 	.word	0x01312cff
 801372c:	014ca43f 	.word	0x014ca43f
 8013730:	016e3600 	.word	0x016e3600
 8013734:	01a6ab1f 	.word	0x01a6ab1f
 8013738:	01e84800 	.word	0x01e84800

0801373c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801373c:	b480      	push	{r7}
 801373e:	b083      	sub	sp, #12
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	689b      	ldr	r3, [r3, #8]
 8013748:	f043 0201 	orr.w	r2, r3, #1
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013750:	2300      	movs	r3, #0
}
 8013752:	4618      	mov	r0, r3
 8013754:	370c      	adds	r7, #12
 8013756:	46bd      	mov	sp, r7
 8013758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375c:	4770      	bx	lr

0801375e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801375e:	b480      	push	{r7}
 8013760:	b083      	sub	sp, #12
 8013762:	af00      	add	r7, sp, #0
 8013764:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	689b      	ldr	r3, [r3, #8]
 801376a:	f023 0201 	bic.w	r2, r3, #1
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013772:	2300      	movs	r3, #0
}
 8013774:	4618      	mov	r0, r3
 8013776:	370c      	adds	r7, #12
 8013778:	46bd      	mov	sp, r7
 801377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377e:	4770      	bx	lr

08013780 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	460b      	mov	r3, r1
 801378a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801378c:	2300      	movs	r3, #0
 801378e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	68db      	ldr	r3, [r3, #12]
 8013794:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801379c:	78fb      	ldrb	r3, [r7, #3]
 801379e:	2b01      	cmp	r3, #1
 80137a0:	d115      	bne.n	80137ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	68db      	ldr	r3, [r3, #12]
 80137a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80137ae:	2001      	movs	r0, #1
 80137b0:	f7f0 fa5a 	bl	8003c68 <HAL_Delay>
      ms++;
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	3301      	adds	r3, #1
 80137b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f001 f93f 	bl	8014a3e <USB_GetMode>
 80137c0:	4603      	mov	r3, r0
 80137c2:	2b01      	cmp	r3, #1
 80137c4:	d01e      	beq.n	8013804 <USB_SetCurrentMode+0x84>
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	2b31      	cmp	r3, #49	; 0x31
 80137ca:	d9f0      	bls.n	80137ae <USB_SetCurrentMode+0x2e>
 80137cc:	e01a      	b.n	8013804 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80137ce:	78fb      	ldrb	r3, [r7, #3]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d115      	bne.n	8013800 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	68db      	ldr	r3, [r3, #12]
 80137d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80137e0:	2001      	movs	r0, #1
 80137e2:	f7f0 fa41 	bl	8003c68 <HAL_Delay>
      ms++;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	3301      	adds	r3, #1
 80137ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f001 f926 	bl	8014a3e <USB_GetMode>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d005      	beq.n	8013804 <USB_SetCurrentMode+0x84>
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	2b31      	cmp	r3, #49	; 0x31
 80137fc:	d9f0      	bls.n	80137e0 <USB_SetCurrentMode+0x60>
 80137fe:	e001      	b.n	8013804 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013800:	2301      	movs	r3, #1
 8013802:	e005      	b.n	8013810 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2b32      	cmp	r3, #50	; 0x32
 8013808:	d101      	bne.n	801380e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801380a:	2301      	movs	r3, #1
 801380c:	e000      	b.n	8013810 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801380e:	2300      	movs	r3, #0
}
 8013810:	4618      	mov	r0, r3
 8013812:	3710      	adds	r7, #16
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}

08013818 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013818:	b084      	sub	sp, #16
 801381a:	b580      	push	{r7, lr}
 801381c:	b086      	sub	sp, #24
 801381e:	af00      	add	r7, sp, #0
 8013820:	6078      	str	r0, [r7, #4]
 8013822:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801382a:	2300      	movs	r3, #0
 801382c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013832:	2300      	movs	r3, #0
 8013834:	613b      	str	r3, [r7, #16]
 8013836:	e009      	b.n	801384c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	693b      	ldr	r3, [r7, #16]
 801383c:	3340      	adds	r3, #64	; 0x40
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	4413      	add	r3, r2
 8013842:	2200      	movs	r2, #0
 8013844:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	3301      	adds	r3, #1
 801384a:	613b      	str	r3, [r7, #16]
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	2b0e      	cmp	r3, #14
 8013850:	d9f2      	bls.n	8013838 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013854:	2b00      	cmp	r3, #0
 8013856:	d11c      	bne.n	8013892 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	68fa      	ldr	r2, [r7, #12]
 8013862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013866:	f043 0302 	orr.w	r3, r3, #2
 801386a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013870:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	601a      	str	r2, [r3, #0]
 8013890:	e005      	b.n	801389e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013896:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80138a4:	461a      	mov	r2, r3
 80138a6:	2300      	movs	r3, #0
 80138a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138b0:	4619      	mov	r1, r3
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138b8:	461a      	mov	r2, r3
 80138ba:	680b      	ldr	r3, [r1, #0]
 80138bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80138be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138c0:	2b01      	cmp	r3, #1
 80138c2:	d10c      	bne.n	80138de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80138c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d104      	bne.n	80138d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80138ca:	2100      	movs	r1, #0
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f000 f965 	bl	8013b9c <USB_SetDevSpeed>
 80138d2:	e008      	b.n	80138e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80138d4:	2101      	movs	r1, #1
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f000 f960 	bl	8013b9c <USB_SetDevSpeed>
 80138dc:	e003      	b.n	80138e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80138de:	2103      	movs	r1, #3
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f000 f95b 	bl	8013b9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80138e6:	2110      	movs	r1, #16
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f000 f8f3 	bl	8013ad4 <USB_FlushTxFifo>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d001      	beq.n	80138f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80138f4:	2301      	movs	r3, #1
 80138f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f000 f91f 	bl	8013b3c <USB_FlushRxFifo>
 80138fe:	4603      	mov	r3, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	d001      	beq.n	8013908 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013904:	2301      	movs	r3, #1
 8013906:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801390e:	461a      	mov	r2, r3
 8013910:	2300      	movs	r3, #0
 8013912:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801391a:	461a      	mov	r2, r3
 801391c:	2300      	movs	r3, #0
 801391e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013926:	461a      	mov	r2, r3
 8013928:	2300      	movs	r3, #0
 801392a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801392c:	2300      	movs	r3, #0
 801392e:	613b      	str	r3, [r7, #16]
 8013930:	e043      	b.n	80139ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	015a      	lsls	r2, r3, #5
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	4413      	add	r3, r2
 801393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013948:	d118      	bne.n	801397c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d10a      	bne.n	8013966 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	015a      	lsls	r2, r3, #5
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	4413      	add	r3, r2
 8013958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801395c:	461a      	mov	r2, r3
 801395e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013962:	6013      	str	r3, [r2, #0]
 8013964:	e013      	b.n	801398e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	015a      	lsls	r2, r3, #5
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	4413      	add	r3, r2
 801396e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013972:	461a      	mov	r2, r3
 8013974:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013978:	6013      	str	r3, [r2, #0]
 801397a:	e008      	b.n	801398e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	015a      	lsls	r2, r3, #5
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	4413      	add	r3, r2
 8013984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013988:	461a      	mov	r2, r3
 801398a:	2300      	movs	r3, #0
 801398c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	015a      	lsls	r2, r3, #5
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	4413      	add	r3, r2
 8013996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801399a:	461a      	mov	r2, r3
 801399c:	2300      	movs	r3, #0
 801399e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80139a0:	693b      	ldr	r3, [r7, #16]
 80139a2:	015a      	lsls	r2, r3, #5
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	4413      	add	r3, r2
 80139a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139ac:	461a      	mov	r2, r3
 80139ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80139b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	3301      	adds	r3, #1
 80139b8:	613b      	str	r3, [r7, #16]
 80139ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139bc:	693a      	ldr	r2, [r7, #16]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d3b7      	bcc.n	8013932 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80139c2:	2300      	movs	r3, #0
 80139c4:	613b      	str	r3, [r7, #16]
 80139c6:	e043      	b.n	8013a50 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	015a      	lsls	r2, r3, #5
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	4413      	add	r3, r2
 80139d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139de:	d118      	bne.n	8013a12 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d10a      	bne.n	80139fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	015a      	lsls	r2, r3, #5
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	4413      	add	r3, r2
 80139ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139f2:	461a      	mov	r2, r3
 80139f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80139f8:	6013      	str	r3, [r2, #0]
 80139fa:	e013      	b.n	8013a24 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	015a      	lsls	r2, r3, #5
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	4413      	add	r3, r2
 8013a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a08:	461a      	mov	r2, r3
 8013a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013a0e:	6013      	str	r3, [r2, #0]
 8013a10:	e008      	b.n	8013a24 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	015a      	lsls	r2, r3, #5
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	4413      	add	r3, r2
 8013a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a1e:	461a      	mov	r2, r3
 8013a20:	2300      	movs	r3, #0
 8013a22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	015a      	lsls	r2, r3, #5
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	4413      	add	r3, r2
 8013a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a30:	461a      	mov	r2, r3
 8013a32:	2300      	movs	r3, #0
 8013a34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	015a      	lsls	r2, r3, #5
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	4413      	add	r3, r2
 8013a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a42:	461a      	mov	r2, r3
 8013a44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013a48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	3301      	adds	r3, #1
 8013a4e:	613b      	str	r3, [r7, #16]
 8013a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a52:	693a      	ldr	r2, [r7, #16]
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d3b7      	bcc.n	80139c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a5e:	691b      	ldr	r3, [r3, #16]
 8013a60:	68fa      	ldr	r2, [r7, #12]
 8013a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013a6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013a78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d105      	bne.n	8013a8c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	699b      	ldr	r3, [r3, #24]
 8013a84:	f043 0210 	orr.w	r2, r3, #16
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	699a      	ldr	r2, [r3, #24]
 8013a90:	4b0e      	ldr	r3, [pc, #56]	; (8013acc <USB_DevInit+0x2b4>)
 8013a92:	4313      	orrs	r3, r2
 8013a94:	687a      	ldr	r2, [r7, #4]
 8013a96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d005      	beq.n	8013aaa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	699b      	ldr	r3, [r3, #24]
 8013aa2:	f043 0208 	orr.w	r2, r3, #8
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aac:	2b01      	cmp	r3, #1
 8013aae:	d105      	bne.n	8013abc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	699a      	ldr	r2, [r3, #24]
 8013ab4:	4b06      	ldr	r3, [pc, #24]	; (8013ad0 <USB_DevInit+0x2b8>)
 8013ab6:	4313      	orrs	r3, r2
 8013ab8:	687a      	ldr	r2, [r7, #4]
 8013aba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3718      	adds	r7, #24
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013ac8:	b004      	add	sp, #16
 8013aca:	4770      	bx	lr
 8013acc:	803c3800 	.word	0x803c3800
 8013ad0:	40000004 	.word	0x40000004

08013ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	b085      	sub	sp, #20
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	3301      	adds	r3, #1
 8013ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	4a13      	ldr	r2, [pc, #76]	; (8013b38 <USB_FlushTxFifo+0x64>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d901      	bls.n	8013af4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013af0:	2303      	movs	r3, #3
 8013af2:	e01b      	b.n	8013b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	691b      	ldr	r3, [r3, #16]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	daf2      	bge.n	8013ae2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013afc:	2300      	movs	r3, #0
 8013afe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	019b      	lsls	r3, r3, #6
 8013b04:	f043 0220 	orr.w	r2, r3, #32
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	3301      	adds	r3, #1
 8013b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	4a08      	ldr	r2, [pc, #32]	; (8013b38 <USB_FlushTxFifo+0x64>)
 8013b16:	4293      	cmp	r3, r2
 8013b18:	d901      	bls.n	8013b1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013b1a:	2303      	movs	r3, #3
 8013b1c:	e006      	b.n	8013b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	691b      	ldr	r3, [r3, #16]
 8013b22:	f003 0320 	and.w	r3, r3, #32
 8013b26:	2b20      	cmp	r3, #32
 8013b28:	d0f0      	beq.n	8013b0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013b2a:	2300      	movs	r3, #0
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3714      	adds	r7, #20
 8013b30:	46bd      	mov	sp, r7
 8013b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b36:	4770      	bx	lr
 8013b38:	00030d40 	.word	0x00030d40

08013b3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013b3c:	b480      	push	{r7}
 8013b3e:	b085      	sub	sp, #20
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013b44:	2300      	movs	r3, #0
 8013b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	3301      	adds	r3, #1
 8013b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	4a11      	ldr	r2, [pc, #68]	; (8013b98 <USB_FlushRxFifo+0x5c>)
 8013b52:	4293      	cmp	r3, r2
 8013b54:	d901      	bls.n	8013b5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013b56:	2303      	movs	r3, #3
 8013b58:	e018      	b.n	8013b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	691b      	ldr	r3, [r3, #16]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	daf2      	bge.n	8013b48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013b62:	2300      	movs	r3, #0
 8013b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2210      	movs	r2, #16
 8013b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	3301      	adds	r3, #1
 8013b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	4a08      	ldr	r2, [pc, #32]	; (8013b98 <USB_FlushRxFifo+0x5c>)
 8013b76:	4293      	cmp	r3, r2
 8013b78:	d901      	bls.n	8013b7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013b7a:	2303      	movs	r3, #3
 8013b7c:	e006      	b.n	8013b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	691b      	ldr	r3, [r3, #16]
 8013b82:	f003 0310 	and.w	r3, r3, #16
 8013b86:	2b10      	cmp	r3, #16
 8013b88:	d0f0      	beq.n	8013b6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013b8a:	2300      	movs	r3, #0
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	3714      	adds	r7, #20
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr
 8013b98:	00030d40 	.word	0x00030d40

08013b9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b085      	sub	sp, #20
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	460b      	mov	r3, r1
 8013ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bb2:	681a      	ldr	r2, [r3, #0]
 8013bb4:	78fb      	ldrb	r3, [r7, #3]
 8013bb6:	68f9      	ldr	r1, [r7, #12]
 8013bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013bbc:	4313      	orrs	r3, r2
 8013bbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013bc0:	2300      	movs	r3, #0
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3714      	adds	r7, #20
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bcc:	4770      	bx	lr

08013bce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013bce:	b480      	push	{r7}
 8013bd0:	b087      	sub	sp, #28
 8013bd2:	af00      	add	r7, sp, #0
 8013bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013be0:	689b      	ldr	r3, [r3, #8]
 8013be2:	f003 0306 	and.w	r3, r3, #6
 8013be6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d102      	bne.n	8013bf4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	75fb      	strb	r3, [r7, #23]
 8013bf2:	e00a      	b.n	8013c0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	2b02      	cmp	r3, #2
 8013bf8:	d002      	beq.n	8013c00 <USB_GetDevSpeed+0x32>
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	2b06      	cmp	r3, #6
 8013bfe:	d102      	bne.n	8013c06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013c00:	2302      	movs	r3, #2
 8013c02:	75fb      	strb	r3, [r7, #23]
 8013c04:	e001      	b.n	8013c0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013c06:	230f      	movs	r3, #15
 8013c08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	371c      	adds	r7, #28
 8013c10:	46bd      	mov	sp, r7
 8013c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c16:	4770      	bx	lr

08013c18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c18:	b480      	push	{r7}
 8013c1a:	b085      	sub	sp, #20
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	785b      	ldrb	r3, [r3, #1]
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d139      	bne.n	8013ca8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c3a:	69da      	ldr	r2, [r3, #28]
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	f003 030f 	and.w	r3, r3, #15
 8013c44:	2101      	movs	r1, #1
 8013c46:	fa01 f303 	lsl.w	r3, r1, r3
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	68f9      	ldr	r1, [r7, #12]
 8013c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c52:	4313      	orrs	r3, r2
 8013c54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	015a      	lsls	r2, r3, #5
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	4413      	add	r3, r2
 8013c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d153      	bne.n	8013d14 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	015a      	lsls	r2, r3, #5
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	4413      	add	r3, r2
 8013c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c78:	681a      	ldr	r2, [r3, #0]
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	689b      	ldr	r3, [r3, #8]
 8013c7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	791b      	ldrb	r3, [r3, #4]
 8013c86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013c88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	059b      	lsls	r3, r3, #22
 8013c8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013c90:	431a      	orrs	r2, r3
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	0159      	lsls	r1, r3, #5
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	440b      	add	r3, r1
 8013c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	4b20      	ldr	r3, [pc, #128]	; (8013d24 <USB_ActivateEndpoint+0x10c>)
 8013ca2:	4313      	orrs	r3, r2
 8013ca4:	600b      	str	r3, [r1, #0]
 8013ca6:	e035      	b.n	8013d14 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cae:	69da      	ldr	r2, [r3, #28]
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	781b      	ldrb	r3, [r3, #0]
 8013cb4:	f003 030f 	and.w	r3, r3, #15
 8013cb8:	2101      	movs	r1, #1
 8013cba:	fa01 f303 	lsl.w	r3, r1, r3
 8013cbe:	041b      	lsls	r3, r3, #16
 8013cc0:	68f9      	ldr	r1, [r7, #12]
 8013cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013cc6:	4313      	orrs	r3, r2
 8013cc8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	015a      	lsls	r2, r3, #5
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	4413      	add	r3, r2
 8013cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d119      	bne.n	8013d14 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	015a      	lsls	r2, r3, #5
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	4413      	add	r3, r2
 8013ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	689b      	ldr	r3, [r3, #8]
 8013cf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	791b      	ldrb	r3, [r3, #4]
 8013cfa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013cfc:	430b      	orrs	r3, r1
 8013cfe:	431a      	orrs	r2, r3
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	0159      	lsls	r1, r3, #5
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	440b      	add	r3, r1
 8013d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	4b05      	ldr	r3, [pc, #20]	; (8013d24 <USB_ActivateEndpoint+0x10c>)
 8013d10:	4313      	orrs	r3, r2
 8013d12:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013d14:	2300      	movs	r3, #0
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3714      	adds	r7, #20
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop
 8013d24:	10008000 	.word	0x10008000

08013d28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013d28:	b480      	push	{r7}
 8013d2a:	b085      	sub	sp, #20
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	785b      	ldrb	r3, [r3, #1]
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d161      	bne.n	8013e08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	015a      	lsls	r2, r3, #5
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d5a:	d11f      	bne.n	8013d9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	015a      	lsls	r2, r3, #5
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	4413      	add	r3, r2
 8013d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	68ba      	ldr	r2, [r7, #8]
 8013d6c:	0151      	lsls	r1, r2, #5
 8013d6e:	68fa      	ldr	r2, [r7, #12]
 8013d70:	440a      	add	r2, r1
 8013d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013d7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	015a      	lsls	r2, r3, #5
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	4413      	add	r3, r2
 8013d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	68ba      	ldr	r2, [r7, #8]
 8013d8c:	0151      	lsls	r1, r2, #5
 8013d8e:	68fa      	ldr	r2, [r7, #12]
 8013d90:	440a      	add	r2, r1
 8013d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	f003 030f 	and.w	r3, r3, #15
 8013dac:	2101      	movs	r1, #1
 8013dae:	fa01 f303 	lsl.w	r3, r1, r3
 8013db2:	b29b      	uxth	r3, r3
 8013db4:	43db      	mvns	r3, r3
 8013db6:	68f9      	ldr	r1, [r7, #12]
 8013db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013dbc:	4013      	ands	r3, r2
 8013dbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dc6:	69da      	ldr	r2, [r3, #28]
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	f003 030f 	and.w	r3, r3, #15
 8013dd0:	2101      	movs	r1, #1
 8013dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8013dd6:	b29b      	uxth	r3, r3
 8013dd8:	43db      	mvns	r3, r3
 8013dda:	68f9      	ldr	r1, [r7, #12]
 8013ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013de0:	4013      	ands	r3, r2
 8013de2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	015a      	lsls	r2, r3, #5
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	4413      	add	r3, r2
 8013dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013df0:	681a      	ldr	r2, [r3, #0]
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	0159      	lsls	r1, r3, #5
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	440b      	add	r3, r1
 8013dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013dfe:	4619      	mov	r1, r3
 8013e00:	4b35      	ldr	r3, [pc, #212]	; (8013ed8 <USB_DeactivateEndpoint+0x1b0>)
 8013e02:	4013      	ands	r3, r2
 8013e04:	600b      	str	r3, [r1, #0]
 8013e06:	e060      	b.n	8013eca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	015a      	lsls	r2, r3, #5
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	4413      	add	r3, r2
 8013e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e1e:	d11f      	bne.n	8013e60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	015a      	lsls	r2, r3, #5
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	4413      	add	r3, r2
 8013e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	68ba      	ldr	r2, [r7, #8]
 8013e30:	0151      	lsls	r1, r2, #5
 8013e32:	68fa      	ldr	r2, [r7, #12]
 8013e34:	440a      	add	r2, r1
 8013e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013e3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	015a      	lsls	r2, r3, #5
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	4413      	add	r3, r2
 8013e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	68ba      	ldr	r2, [r7, #8]
 8013e50:	0151      	lsls	r1, r2, #5
 8013e52:	68fa      	ldr	r2, [r7, #12]
 8013e54:	440a      	add	r2, r1
 8013e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	781b      	ldrb	r3, [r3, #0]
 8013e6c:	f003 030f 	and.w	r3, r3, #15
 8013e70:	2101      	movs	r1, #1
 8013e72:	fa01 f303 	lsl.w	r3, r1, r3
 8013e76:	041b      	lsls	r3, r3, #16
 8013e78:	43db      	mvns	r3, r3
 8013e7a:	68f9      	ldr	r1, [r7, #12]
 8013e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e80:	4013      	ands	r3, r2
 8013e82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e8a:	69da      	ldr	r2, [r3, #28]
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	f003 030f 	and.w	r3, r3, #15
 8013e94:	2101      	movs	r1, #1
 8013e96:	fa01 f303 	lsl.w	r3, r1, r3
 8013e9a:	041b      	lsls	r3, r3, #16
 8013e9c:	43db      	mvns	r3, r3
 8013e9e:	68f9      	ldr	r1, [r7, #12]
 8013ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013ea4:	4013      	ands	r3, r2
 8013ea6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	015a      	lsls	r2, r3, #5
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	4413      	add	r3, r2
 8013eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eb4:	681a      	ldr	r2, [r3, #0]
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	0159      	lsls	r1, r3, #5
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	440b      	add	r3, r1
 8013ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	4b05      	ldr	r3, [pc, #20]	; (8013edc <USB_DeactivateEndpoint+0x1b4>)
 8013ec6:	4013      	ands	r3, r2
 8013ec8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013eca:	2300      	movs	r3, #0
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3714      	adds	r7, #20
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed6:	4770      	bx	lr
 8013ed8:	ec337800 	.word	0xec337800
 8013edc:	eff37800 	.word	0xeff37800

08013ee0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b08a      	sub	sp, #40	; 0x28
 8013ee4:	af02      	add	r7, sp, #8
 8013ee6:	60f8      	str	r0, [r7, #12]
 8013ee8:	60b9      	str	r1, [r7, #8]
 8013eea:	4613      	mov	r3, r2
 8013eec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	785b      	ldrb	r3, [r3, #1]
 8013efc:	2b01      	cmp	r3, #1
 8013efe:	f040 8181 	bne.w	8014204 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	691b      	ldr	r3, [r3, #16]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d132      	bne.n	8013f70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013f0a:	69bb      	ldr	r3, [r7, #24]
 8013f0c:	015a      	lsls	r2, r3, #5
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	4413      	add	r3, r2
 8013f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f16:	691a      	ldr	r2, [r3, #16]
 8013f18:	69bb      	ldr	r3, [r7, #24]
 8013f1a:	0159      	lsls	r1, r3, #5
 8013f1c:	69fb      	ldr	r3, [r7, #28]
 8013f1e:	440b      	add	r3, r1
 8013f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f24:	4619      	mov	r1, r3
 8013f26:	4ba5      	ldr	r3, [pc, #660]	; (80141bc <USB_EPStartXfer+0x2dc>)
 8013f28:	4013      	ands	r3, r2
 8013f2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013f2c:	69bb      	ldr	r3, [r7, #24]
 8013f2e:	015a      	lsls	r2, r3, #5
 8013f30:	69fb      	ldr	r3, [r7, #28]
 8013f32:	4413      	add	r3, r2
 8013f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f38:	691b      	ldr	r3, [r3, #16]
 8013f3a:	69ba      	ldr	r2, [r7, #24]
 8013f3c:	0151      	lsls	r1, r2, #5
 8013f3e:	69fa      	ldr	r2, [r7, #28]
 8013f40:	440a      	add	r2, r1
 8013f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013f4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013f4c:	69bb      	ldr	r3, [r7, #24]
 8013f4e:	015a      	lsls	r2, r3, #5
 8013f50:	69fb      	ldr	r3, [r7, #28]
 8013f52:	4413      	add	r3, r2
 8013f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f58:	691a      	ldr	r2, [r3, #16]
 8013f5a:	69bb      	ldr	r3, [r7, #24]
 8013f5c:	0159      	lsls	r1, r3, #5
 8013f5e:	69fb      	ldr	r3, [r7, #28]
 8013f60:	440b      	add	r3, r1
 8013f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f66:	4619      	mov	r1, r3
 8013f68:	4b95      	ldr	r3, [pc, #596]	; (80141c0 <USB_EPStartXfer+0x2e0>)
 8013f6a:	4013      	ands	r3, r2
 8013f6c:	610b      	str	r3, [r1, #16]
 8013f6e:	e092      	b.n	8014096 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013f70:	69bb      	ldr	r3, [r7, #24]
 8013f72:	015a      	lsls	r2, r3, #5
 8013f74:	69fb      	ldr	r3, [r7, #28]
 8013f76:	4413      	add	r3, r2
 8013f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f7c:	691a      	ldr	r2, [r3, #16]
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	0159      	lsls	r1, r3, #5
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	440b      	add	r3, r1
 8013f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f8a:	4619      	mov	r1, r3
 8013f8c:	4b8c      	ldr	r3, [pc, #560]	; (80141c0 <USB_EPStartXfer+0x2e0>)
 8013f8e:	4013      	ands	r3, r2
 8013f90:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013f92:	69bb      	ldr	r3, [r7, #24]
 8013f94:	015a      	lsls	r2, r3, #5
 8013f96:	69fb      	ldr	r3, [r7, #28]
 8013f98:	4413      	add	r3, r2
 8013f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f9e:	691a      	ldr	r2, [r3, #16]
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	0159      	lsls	r1, r3, #5
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	440b      	add	r3, r1
 8013fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fac:	4619      	mov	r1, r3
 8013fae:	4b83      	ldr	r3, [pc, #524]	; (80141bc <USB_EPStartXfer+0x2dc>)
 8013fb0:	4013      	ands	r3, r2
 8013fb2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013fb4:	69bb      	ldr	r3, [r7, #24]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d11a      	bne.n	8013ff0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	691a      	ldr	r2, [r3, #16]
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	689b      	ldr	r3, [r3, #8]
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d903      	bls.n	8013fce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	689a      	ldr	r2, [r3, #8]
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013fce:	69bb      	ldr	r3, [r7, #24]
 8013fd0:	015a      	lsls	r2, r3, #5
 8013fd2:	69fb      	ldr	r3, [r7, #28]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fda:	691b      	ldr	r3, [r3, #16]
 8013fdc:	69ba      	ldr	r2, [r7, #24]
 8013fde:	0151      	lsls	r1, r2, #5
 8013fe0:	69fa      	ldr	r2, [r7, #28]
 8013fe2:	440a      	add	r2, r1
 8013fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013fec:	6113      	str	r3, [r2, #16]
 8013fee:	e01b      	b.n	8014028 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013ff0:	69bb      	ldr	r3, [r7, #24]
 8013ff2:	015a      	lsls	r2, r3, #5
 8013ff4:	69fb      	ldr	r3, [r7, #28]
 8013ff6:	4413      	add	r3, r2
 8013ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ffc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	6919      	ldr	r1, [r3, #16]
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	689b      	ldr	r3, [r3, #8]
 8014006:	440b      	add	r3, r1
 8014008:	1e59      	subs	r1, r3, #1
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	689b      	ldr	r3, [r3, #8]
 801400e:	fbb1 f3f3 	udiv	r3, r1, r3
 8014012:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014014:	4b6b      	ldr	r3, [pc, #428]	; (80141c4 <USB_EPStartXfer+0x2e4>)
 8014016:	400b      	ands	r3, r1
 8014018:	69b9      	ldr	r1, [r7, #24]
 801401a:	0148      	lsls	r0, r1, #5
 801401c:	69f9      	ldr	r1, [r7, #28]
 801401e:	4401      	add	r1, r0
 8014020:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014024:	4313      	orrs	r3, r2
 8014026:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	015a      	lsls	r2, r3, #5
 801402c:	69fb      	ldr	r3, [r7, #28]
 801402e:	4413      	add	r3, r2
 8014030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014034:	691a      	ldr	r2, [r3, #16]
 8014036:	68bb      	ldr	r3, [r7, #8]
 8014038:	691b      	ldr	r3, [r3, #16]
 801403a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801403e:	69b9      	ldr	r1, [r7, #24]
 8014040:	0148      	lsls	r0, r1, #5
 8014042:	69f9      	ldr	r1, [r7, #28]
 8014044:	4401      	add	r1, r0
 8014046:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801404a:	4313      	orrs	r3, r2
 801404c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	791b      	ldrb	r3, [r3, #4]
 8014052:	2b01      	cmp	r3, #1
 8014054:	d11f      	bne.n	8014096 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014056:	69bb      	ldr	r3, [r7, #24]
 8014058:	015a      	lsls	r2, r3, #5
 801405a:	69fb      	ldr	r3, [r7, #28]
 801405c:	4413      	add	r3, r2
 801405e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014062:	691b      	ldr	r3, [r3, #16]
 8014064:	69ba      	ldr	r2, [r7, #24]
 8014066:	0151      	lsls	r1, r2, #5
 8014068:	69fa      	ldr	r2, [r7, #28]
 801406a:	440a      	add	r2, r1
 801406c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014070:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014074:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014076:	69bb      	ldr	r3, [r7, #24]
 8014078:	015a      	lsls	r2, r3, #5
 801407a:	69fb      	ldr	r3, [r7, #28]
 801407c:	4413      	add	r3, r2
 801407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014082:	691b      	ldr	r3, [r3, #16]
 8014084:	69ba      	ldr	r2, [r7, #24]
 8014086:	0151      	lsls	r1, r2, #5
 8014088:	69fa      	ldr	r2, [r7, #28]
 801408a:	440a      	add	r2, r1
 801408c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014090:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014094:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014096:	79fb      	ldrb	r3, [r7, #7]
 8014098:	2b01      	cmp	r3, #1
 801409a:	d14b      	bne.n	8014134 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	69db      	ldr	r3, [r3, #28]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d009      	beq.n	80140b8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	015a      	lsls	r2, r3, #5
 80140a8:	69fb      	ldr	r3, [r7, #28]
 80140aa:	4413      	add	r3, r2
 80140ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140b0:	461a      	mov	r2, r3
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	69db      	ldr	r3, [r3, #28]
 80140b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	791b      	ldrb	r3, [r3, #4]
 80140bc:	2b01      	cmp	r3, #1
 80140be:	d128      	bne.n	8014112 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80140c0:	69fb      	ldr	r3, [r7, #28]
 80140c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140c6:	689b      	ldr	r3, [r3, #8]
 80140c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d110      	bne.n	80140f2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80140d0:	69bb      	ldr	r3, [r7, #24]
 80140d2:	015a      	lsls	r2, r3, #5
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	4413      	add	r3, r2
 80140d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	69ba      	ldr	r2, [r7, #24]
 80140e0:	0151      	lsls	r1, r2, #5
 80140e2:	69fa      	ldr	r2, [r7, #28]
 80140e4:	440a      	add	r2, r1
 80140e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80140ee:	6013      	str	r3, [r2, #0]
 80140f0:	e00f      	b.n	8014112 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80140f2:	69bb      	ldr	r3, [r7, #24]
 80140f4:	015a      	lsls	r2, r3, #5
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	4413      	add	r3, r2
 80140fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	69ba      	ldr	r2, [r7, #24]
 8014102:	0151      	lsls	r1, r2, #5
 8014104:	69fa      	ldr	r2, [r7, #28]
 8014106:	440a      	add	r2, r1
 8014108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014110:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014112:	69bb      	ldr	r3, [r7, #24]
 8014114:	015a      	lsls	r2, r3, #5
 8014116:	69fb      	ldr	r3, [r7, #28]
 8014118:	4413      	add	r3, r2
 801411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	69ba      	ldr	r2, [r7, #24]
 8014122:	0151      	lsls	r1, r2, #5
 8014124:	69fa      	ldr	r2, [r7, #28]
 8014126:	440a      	add	r2, r1
 8014128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801412c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014130:	6013      	str	r3, [r2, #0]
 8014132:	e16a      	b.n	801440a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	015a      	lsls	r2, r3, #5
 8014138:	69fb      	ldr	r3, [r7, #28]
 801413a:	4413      	add	r3, r2
 801413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	69ba      	ldr	r2, [r7, #24]
 8014144:	0151      	lsls	r1, r2, #5
 8014146:	69fa      	ldr	r2, [r7, #28]
 8014148:	440a      	add	r2, r1
 801414a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801414e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014152:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014154:	68bb      	ldr	r3, [r7, #8]
 8014156:	791b      	ldrb	r3, [r3, #4]
 8014158:	2b01      	cmp	r3, #1
 801415a:	d015      	beq.n	8014188 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	691b      	ldr	r3, [r3, #16]
 8014160:	2b00      	cmp	r3, #0
 8014162:	f000 8152 	beq.w	801440a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014166:	69fb      	ldr	r3, [r7, #28]
 8014168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801416c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	f003 030f 	and.w	r3, r3, #15
 8014176:	2101      	movs	r1, #1
 8014178:	fa01 f303 	lsl.w	r3, r1, r3
 801417c:	69f9      	ldr	r1, [r7, #28]
 801417e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014182:	4313      	orrs	r3, r2
 8014184:	634b      	str	r3, [r1, #52]	; 0x34
 8014186:	e140      	b.n	801440a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014188:	69fb      	ldr	r3, [r7, #28]
 801418a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801418e:	689b      	ldr	r3, [r3, #8]
 8014190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014194:	2b00      	cmp	r3, #0
 8014196:	d117      	bne.n	80141c8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014198:	69bb      	ldr	r3, [r7, #24]
 801419a:	015a      	lsls	r2, r3, #5
 801419c:	69fb      	ldr	r3, [r7, #28]
 801419e:	4413      	add	r3, r2
 80141a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	69ba      	ldr	r2, [r7, #24]
 80141a8:	0151      	lsls	r1, r2, #5
 80141aa:	69fa      	ldr	r2, [r7, #28]
 80141ac:	440a      	add	r2, r1
 80141ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80141b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80141b6:	6013      	str	r3, [r2, #0]
 80141b8:	e016      	b.n	80141e8 <USB_EPStartXfer+0x308>
 80141ba:	bf00      	nop
 80141bc:	e007ffff 	.word	0xe007ffff
 80141c0:	fff80000 	.word	0xfff80000
 80141c4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80141c8:	69bb      	ldr	r3, [r7, #24]
 80141ca:	015a      	lsls	r2, r3, #5
 80141cc:	69fb      	ldr	r3, [r7, #28]
 80141ce:	4413      	add	r3, r2
 80141d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	69ba      	ldr	r2, [r7, #24]
 80141d8:	0151      	lsls	r1, r2, #5
 80141da:	69fa      	ldr	r2, [r7, #28]
 80141dc:	440a      	add	r2, r1
 80141de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80141e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80141e6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	68d9      	ldr	r1, [r3, #12]
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	781a      	ldrb	r2, [r3, #0]
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	691b      	ldr	r3, [r3, #16]
 80141f4:	b298      	uxth	r0, r3
 80141f6:	79fb      	ldrb	r3, [r7, #7]
 80141f8:	9300      	str	r3, [sp, #0]
 80141fa:	4603      	mov	r3, r0
 80141fc:	68f8      	ldr	r0, [r7, #12]
 80141fe:	f000 f9b9 	bl	8014574 <USB_WritePacket>
 8014202:	e102      	b.n	801440a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014204:	69bb      	ldr	r3, [r7, #24]
 8014206:	015a      	lsls	r2, r3, #5
 8014208:	69fb      	ldr	r3, [r7, #28]
 801420a:	4413      	add	r3, r2
 801420c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014210:	691a      	ldr	r2, [r3, #16]
 8014212:	69bb      	ldr	r3, [r7, #24]
 8014214:	0159      	lsls	r1, r3, #5
 8014216:	69fb      	ldr	r3, [r7, #28]
 8014218:	440b      	add	r3, r1
 801421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801421e:	4619      	mov	r1, r3
 8014220:	4b7c      	ldr	r3, [pc, #496]	; (8014414 <USB_EPStartXfer+0x534>)
 8014222:	4013      	ands	r3, r2
 8014224:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014226:	69bb      	ldr	r3, [r7, #24]
 8014228:	015a      	lsls	r2, r3, #5
 801422a:	69fb      	ldr	r3, [r7, #28]
 801422c:	4413      	add	r3, r2
 801422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014232:	691a      	ldr	r2, [r3, #16]
 8014234:	69bb      	ldr	r3, [r7, #24]
 8014236:	0159      	lsls	r1, r3, #5
 8014238:	69fb      	ldr	r3, [r7, #28]
 801423a:	440b      	add	r3, r1
 801423c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014240:	4619      	mov	r1, r3
 8014242:	4b75      	ldr	r3, [pc, #468]	; (8014418 <USB_EPStartXfer+0x538>)
 8014244:	4013      	ands	r3, r2
 8014246:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014248:	69bb      	ldr	r3, [r7, #24]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d12f      	bne.n	80142ae <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	691b      	ldr	r3, [r3, #16]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d003      	beq.n	801425e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	689a      	ldr	r2, [r3, #8]
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	689a      	ldr	r2, [r3, #8]
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014266:	69bb      	ldr	r3, [r7, #24]
 8014268:	015a      	lsls	r2, r3, #5
 801426a:	69fb      	ldr	r3, [r7, #28]
 801426c:	4413      	add	r3, r2
 801426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014272:	691a      	ldr	r2, [r3, #16]
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	6a1b      	ldr	r3, [r3, #32]
 8014278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801427c:	69b9      	ldr	r1, [r7, #24]
 801427e:	0148      	lsls	r0, r1, #5
 8014280:	69f9      	ldr	r1, [r7, #28]
 8014282:	4401      	add	r1, r0
 8014284:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014288:	4313      	orrs	r3, r2
 801428a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801428c:	69bb      	ldr	r3, [r7, #24]
 801428e:	015a      	lsls	r2, r3, #5
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	4413      	add	r3, r2
 8014294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014298:	691b      	ldr	r3, [r3, #16]
 801429a:	69ba      	ldr	r2, [r7, #24]
 801429c:	0151      	lsls	r1, r2, #5
 801429e:	69fa      	ldr	r2, [r7, #28]
 80142a0:	440a      	add	r2, r1
 80142a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80142aa:	6113      	str	r3, [r2, #16]
 80142ac:	e05f      	b.n	801436e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	691b      	ldr	r3, [r3, #16]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d123      	bne.n	80142fe <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80142b6:	69bb      	ldr	r3, [r7, #24]
 80142b8:	015a      	lsls	r2, r3, #5
 80142ba:	69fb      	ldr	r3, [r7, #28]
 80142bc:	4413      	add	r3, r2
 80142be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142c2:	691a      	ldr	r2, [r3, #16]
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	689b      	ldr	r3, [r3, #8]
 80142c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80142cc:	69b9      	ldr	r1, [r7, #24]
 80142ce:	0148      	lsls	r0, r1, #5
 80142d0:	69f9      	ldr	r1, [r7, #28]
 80142d2:	4401      	add	r1, r0
 80142d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80142d8:	4313      	orrs	r3, r2
 80142da:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	015a      	lsls	r2, r3, #5
 80142e0:	69fb      	ldr	r3, [r7, #28]
 80142e2:	4413      	add	r3, r2
 80142e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142e8:	691b      	ldr	r3, [r3, #16]
 80142ea:	69ba      	ldr	r2, [r7, #24]
 80142ec:	0151      	lsls	r1, r2, #5
 80142ee:	69fa      	ldr	r2, [r7, #28]
 80142f0:	440a      	add	r2, r1
 80142f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80142fa:	6113      	str	r3, [r2, #16]
 80142fc:	e037      	b.n	801436e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	691a      	ldr	r2, [r3, #16]
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	689b      	ldr	r3, [r3, #8]
 8014306:	4413      	add	r3, r2
 8014308:	1e5a      	subs	r2, r3, #1
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	689b      	ldr	r3, [r3, #8]
 801430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014312:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	689b      	ldr	r3, [r3, #8]
 8014318:	8afa      	ldrh	r2, [r7, #22]
 801431a:	fb03 f202 	mul.w	r2, r3, r2
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014322:	69bb      	ldr	r3, [r7, #24]
 8014324:	015a      	lsls	r2, r3, #5
 8014326:	69fb      	ldr	r3, [r7, #28]
 8014328:	4413      	add	r3, r2
 801432a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801432e:	691a      	ldr	r2, [r3, #16]
 8014330:	8afb      	ldrh	r3, [r7, #22]
 8014332:	04d9      	lsls	r1, r3, #19
 8014334:	4b39      	ldr	r3, [pc, #228]	; (801441c <USB_EPStartXfer+0x53c>)
 8014336:	400b      	ands	r3, r1
 8014338:	69b9      	ldr	r1, [r7, #24]
 801433a:	0148      	lsls	r0, r1, #5
 801433c:	69f9      	ldr	r1, [r7, #28]
 801433e:	4401      	add	r1, r0
 8014340:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014344:	4313      	orrs	r3, r2
 8014346:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014348:	69bb      	ldr	r3, [r7, #24]
 801434a:	015a      	lsls	r2, r3, #5
 801434c:	69fb      	ldr	r3, [r7, #28]
 801434e:	4413      	add	r3, r2
 8014350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014354:	691a      	ldr	r2, [r3, #16]
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	6a1b      	ldr	r3, [r3, #32]
 801435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801435e:	69b9      	ldr	r1, [r7, #24]
 8014360:	0148      	lsls	r0, r1, #5
 8014362:	69f9      	ldr	r1, [r7, #28]
 8014364:	4401      	add	r1, r0
 8014366:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801436a:	4313      	orrs	r3, r2
 801436c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801436e:	79fb      	ldrb	r3, [r7, #7]
 8014370:	2b01      	cmp	r3, #1
 8014372:	d10d      	bne.n	8014390 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d009      	beq.n	8014390 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	68d9      	ldr	r1, [r3, #12]
 8014380:	69bb      	ldr	r3, [r7, #24]
 8014382:	015a      	lsls	r2, r3, #5
 8014384:	69fb      	ldr	r3, [r7, #28]
 8014386:	4413      	add	r3, r2
 8014388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801438c:	460a      	mov	r2, r1
 801438e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	791b      	ldrb	r3, [r3, #4]
 8014394:	2b01      	cmp	r3, #1
 8014396:	d128      	bne.n	80143ea <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801439e:	689b      	ldr	r3, [r3, #8]
 80143a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d110      	bne.n	80143ca <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80143a8:	69bb      	ldr	r3, [r7, #24]
 80143aa:	015a      	lsls	r2, r3, #5
 80143ac:	69fb      	ldr	r3, [r7, #28]
 80143ae:	4413      	add	r3, r2
 80143b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	69ba      	ldr	r2, [r7, #24]
 80143b8:	0151      	lsls	r1, r2, #5
 80143ba:	69fa      	ldr	r2, [r7, #28]
 80143bc:	440a      	add	r2, r1
 80143be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80143c6:	6013      	str	r3, [r2, #0]
 80143c8:	e00f      	b.n	80143ea <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80143ca:	69bb      	ldr	r3, [r7, #24]
 80143cc:	015a      	lsls	r2, r3, #5
 80143ce:	69fb      	ldr	r3, [r7, #28]
 80143d0:	4413      	add	r3, r2
 80143d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	69ba      	ldr	r2, [r7, #24]
 80143da:	0151      	lsls	r1, r2, #5
 80143dc:	69fa      	ldr	r2, [r7, #28]
 80143de:	440a      	add	r2, r1
 80143e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80143e8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80143ea:	69bb      	ldr	r3, [r7, #24]
 80143ec:	015a      	lsls	r2, r3, #5
 80143ee:	69fb      	ldr	r3, [r7, #28]
 80143f0:	4413      	add	r3, r2
 80143f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	69ba      	ldr	r2, [r7, #24]
 80143fa:	0151      	lsls	r1, r2, #5
 80143fc:	69fa      	ldr	r2, [r7, #28]
 80143fe:	440a      	add	r2, r1
 8014400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014404:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014408:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801440a:	2300      	movs	r3, #0
}
 801440c:	4618      	mov	r0, r3
 801440e:	3720      	adds	r7, #32
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}
 8014414:	fff80000 	.word	0xfff80000
 8014418:	e007ffff 	.word	0xe007ffff
 801441c:	1ff80000 	.word	0x1ff80000

08014420 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014420:	b480      	push	{r7}
 8014422:	b087      	sub	sp, #28
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801442a:	2300      	movs	r3, #0
 801442c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801442e:	2300      	movs	r3, #0
 8014430:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	785b      	ldrb	r3, [r3, #1]
 801443a:	2b01      	cmp	r3, #1
 801443c:	d14a      	bne.n	80144d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	015a      	lsls	r2, r3, #5
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	4413      	add	r3, r2
 8014448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014456:	f040 8086 	bne.w	8014566 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	781b      	ldrb	r3, [r3, #0]
 801445e:	015a      	lsls	r2, r3, #5
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	4413      	add	r3, r2
 8014464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	683a      	ldr	r2, [r7, #0]
 801446c:	7812      	ldrb	r2, [r2, #0]
 801446e:	0151      	lsls	r1, r2, #5
 8014470:	693a      	ldr	r2, [r7, #16]
 8014472:	440a      	add	r2, r1
 8014474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014478:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801447c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	781b      	ldrb	r3, [r3, #0]
 8014482:	015a      	lsls	r2, r3, #5
 8014484:	693b      	ldr	r3, [r7, #16]
 8014486:	4413      	add	r3, r2
 8014488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	683a      	ldr	r2, [r7, #0]
 8014490:	7812      	ldrb	r2, [r2, #0]
 8014492:	0151      	lsls	r1, r2, #5
 8014494:	693a      	ldr	r2, [r7, #16]
 8014496:	440a      	add	r2, r1
 8014498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801449c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80144a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	3301      	adds	r3, #1
 80144a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d902      	bls.n	80144b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80144b2:	2301      	movs	r3, #1
 80144b4:	75fb      	strb	r3, [r7, #23]
          break;
 80144b6:	e056      	b.n	8014566 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	781b      	ldrb	r3, [r3, #0]
 80144bc:	015a      	lsls	r2, r3, #5
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	4413      	add	r3, r2
 80144c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80144cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80144d0:	d0e7      	beq.n	80144a2 <USB_EPStopXfer+0x82>
 80144d2:	e048      	b.n	8014566 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	015a      	lsls	r2, r3, #5
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	4413      	add	r3, r2
 80144de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80144e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80144ec:	d13b      	bne.n	8014566 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	015a      	lsls	r2, r3, #5
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	4413      	add	r3, r2
 80144f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	683a      	ldr	r2, [r7, #0]
 8014500:	7812      	ldrb	r2, [r2, #0]
 8014502:	0151      	lsls	r1, r2, #5
 8014504:	693a      	ldr	r2, [r7, #16]
 8014506:	440a      	add	r2, r1
 8014508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801450c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014510:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	015a      	lsls	r2, r3, #5
 8014518:	693b      	ldr	r3, [r7, #16]
 801451a:	4413      	add	r3, r2
 801451c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	683a      	ldr	r2, [r7, #0]
 8014524:	7812      	ldrb	r2, [r2, #0]
 8014526:	0151      	lsls	r1, r2, #5
 8014528:	693a      	ldr	r2, [r7, #16]
 801452a:	440a      	add	r2, r1
 801452c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014534:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	3301      	adds	r3, #1
 801453a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	f242 7210 	movw	r2, #10000	; 0x2710
 8014542:	4293      	cmp	r3, r2
 8014544:	d902      	bls.n	801454c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014546:	2301      	movs	r3, #1
 8014548:	75fb      	strb	r3, [r7, #23]
          break;
 801454a:	e00c      	b.n	8014566 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	781b      	ldrb	r3, [r3, #0]
 8014550:	015a      	lsls	r2, r3, #5
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	4413      	add	r3, r2
 8014556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014564:	d0e7      	beq.n	8014536 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014566:	7dfb      	ldrb	r3, [r7, #23]
}
 8014568:	4618      	mov	r0, r3
 801456a:	371c      	adds	r7, #28
 801456c:	46bd      	mov	sp, r7
 801456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014572:	4770      	bx	lr

08014574 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014574:	b480      	push	{r7}
 8014576:	b089      	sub	sp, #36	; 0x24
 8014578:	af00      	add	r7, sp, #0
 801457a:	60f8      	str	r0, [r7, #12]
 801457c:	60b9      	str	r1, [r7, #8]
 801457e:	4611      	mov	r1, r2
 8014580:	461a      	mov	r2, r3
 8014582:	460b      	mov	r3, r1
 8014584:	71fb      	strb	r3, [r7, #7]
 8014586:	4613      	mov	r3, r2
 8014588:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014592:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014596:	2b00      	cmp	r3, #0
 8014598:	d123      	bne.n	80145e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801459a:	88bb      	ldrh	r3, [r7, #4]
 801459c:	3303      	adds	r3, #3
 801459e:	089b      	lsrs	r3, r3, #2
 80145a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80145a2:	2300      	movs	r3, #0
 80145a4:	61bb      	str	r3, [r7, #24]
 80145a6:	e018      	b.n	80145da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80145a8:	79fb      	ldrb	r3, [r7, #7]
 80145aa:	031a      	lsls	r2, r3, #12
 80145ac:	697b      	ldr	r3, [r7, #20]
 80145ae:	4413      	add	r3, r2
 80145b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145b4:	461a      	mov	r2, r3
 80145b6:	69fb      	ldr	r3, [r7, #28]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80145bc:	69fb      	ldr	r3, [r7, #28]
 80145be:	3301      	adds	r3, #1
 80145c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80145c2:	69fb      	ldr	r3, [r7, #28]
 80145c4:	3301      	adds	r3, #1
 80145c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80145c8:	69fb      	ldr	r3, [r7, #28]
 80145ca:	3301      	adds	r3, #1
 80145cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80145ce:	69fb      	ldr	r3, [r7, #28]
 80145d0:	3301      	adds	r3, #1
 80145d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80145d4:	69bb      	ldr	r3, [r7, #24]
 80145d6:	3301      	adds	r3, #1
 80145d8:	61bb      	str	r3, [r7, #24]
 80145da:	69ba      	ldr	r2, [r7, #24]
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	429a      	cmp	r2, r3
 80145e0:	d3e2      	bcc.n	80145a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80145e2:	2300      	movs	r3, #0
}
 80145e4:	4618      	mov	r0, r3
 80145e6:	3724      	adds	r7, #36	; 0x24
 80145e8:	46bd      	mov	sp, r7
 80145ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ee:	4770      	bx	lr

080145f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80145f0:	b480      	push	{r7}
 80145f2:	b08b      	sub	sp, #44	; 0x2c
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	60f8      	str	r0, [r7, #12]
 80145f8:	60b9      	str	r1, [r7, #8]
 80145fa:	4613      	mov	r3, r2
 80145fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014606:	88fb      	ldrh	r3, [r7, #6]
 8014608:	089b      	lsrs	r3, r3, #2
 801460a:	b29b      	uxth	r3, r3
 801460c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801460e:	88fb      	ldrh	r3, [r7, #6]
 8014610:	f003 0303 	and.w	r3, r3, #3
 8014614:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014616:	2300      	movs	r3, #0
 8014618:	623b      	str	r3, [r7, #32]
 801461a:	e014      	b.n	8014646 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801461c:	69bb      	ldr	r3, [r7, #24]
 801461e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014622:	681a      	ldr	r2, [r3, #0]
 8014624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014626:	601a      	str	r2, [r3, #0]
    pDest++;
 8014628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801462a:	3301      	adds	r3, #1
 801462c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014630:	3301      	adds	r3, #1
 8014632:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014636:	3301      	adds	r3, #1
 8014638:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801463c:	3301      	adds	r3, #1
 801463e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014640:	6a3b      	ldr	r3, [r7, #32]
 8014642:	3301      	adds	r3, #1
 8014644:	623b      	str	r3, [r7, #32]
 8014646:	6a3a      	ldr	r2, [r7, #32]
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	429a      	cmp	r2, r3
 801464c:	d3e6      	bcc.n	801461c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801464e:	8bfb      	ldrh	r3, [r7, #30]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d01e      	beq.n	8014692 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014654:	2300      	movs	r3, #0
 8014656:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014658:	69bb      	ldr	r3, [r7, #24]
 801465a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801465e:	461a      	mov	r2, r3
 8014660:	f107 0310 	add.w	r3, r7, #16
 8014664:	6812      	ldr	r2, [r2, #0]
 8014666:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014668:	693a      	ldr	r2, [r7, #16]
 801466a:	6a3b      	ldr	r3, [r7, #32]
 801466c:	b2db      	uxtb	r3, r3
 801466e:	00db      	lsls	r3, r3, #3
 8014670:	fa22 f303 	lsr.w	r3, r2, r3
 8014674:	b2da      	uxtb	r2, r3
 8014676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014678:	701a      	strb	r2, [r3, #0]
      i++;
 801467a:	6a3b      	ldr	r3, [r7, #32]
 801467c:	3301      	adds	r3, #1
 801467e:	623b      	str	r3, [r7, #32]
      pDest++;
 8014680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014682:	3301      	adds	r3, #1
 8014684:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014686:	8bfb      	ldrh	r3, [r7, #30]
 8014688:	3b01      	subs	r3, #1
 801468a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801468c:	8bfb      	ldrh	r3, [r7, #30]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d1ea      	bne.n	8014668 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014694:	4618      	mov	r0, r3
 8014696:	372c      	adds	r7, #44	; 0x2c
 8014698:	46bd      	mov	sp, r7
 801469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469e:	4770      	bx	lr

080146a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80146a0:	b480      	push	{r7}
 80146a2:	b085      	sub	sp, #20
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
 80146a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	781b      	ldrb	r3, [r3, #0]
 80146b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80146b4:	683b      	ldr	r3, [r7, #0]
 80146b6:	785b      	ldrb	r3, [r3, #1]
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	d12c      	bne.n	8014716 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	015a      	lsls	r2, r3, #5
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	4413      	add	r3, r2
 80146c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	db12      	blt.n	80146f4 <USB_EPSetStall+0x54>
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d00f      	beq.n	80146f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	015a      	lsls	r2, r3, #5
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	4413      	add	r3, r2
 80146dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	68ba      	ldr	r2, [r7, #8]
 80146e4:	0151      	lsls	r1, r2, #5
 80146e6:	68fa      	ldr	r2, [r7, #12]
 80146e8:	440a      	add	r2, r1
 80146ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80146ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80146f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80146f4:	68bb      	ldr	r3, [r7, #8]
 80146f6:	015a      	lsls	r2, r3, #5
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	4413      	add	r3, r2
 80146fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	68ba      	ldr	r2, [r7, #8]
 8014704:	0151      	lsls	r1, r2, #5
 8014706:	68fa      	ldr	r2, [r7, #12]
 8014708:	440a      	add	r2, r1
 801470a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801470e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014712:	6013      	str	r3, [r2, #0]
 8014714:	e02b      	b.n	801476e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	015a      	lsls	r2, r3, #5
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	4413      	add	r3, r2
 801471e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	db12      	blt.n	801474e <USB_EPSetStall+0xae>
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d00f      	beq.n	801474e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	015a      	lsls	r2, r3, #5
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	4413      	add	r3, r2
 8014736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	68ba      	ldr	r2, [r7, #8]
 801473e:	0151      	lsls	r1, r2, #5
 8014740:	68fa      	ldr	r2, [r7, #12]
 8014742:	440a      	add	r2, r1
 8014744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014748:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801474c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	015a      	lsls	r2, r3, #5
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	4413      	add	r3, r2
 8014756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	68ba      	ldr	r2, [r7, #8]
 801475e:	0151      	lsls	r1, r2, #5
 8014760:	68fa      	ldr	r2, [r7, #12]
 8014762:	440a      	add	r2, r1
 8014764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801476c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801476e:	2300      	movs	r3, #0
}
 8014770:	4618      	mov	r0, r3
 8014772:	3714      	adds	r7, #20
 8014774:	46bd      	mov	sp, r7
 8014776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477a:	4770      	bx	lr

0801477c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801477c:	b480      	push	{r7}
 801477e:	b085      	sub	sp, #20
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	785b      	ldrb	r3, [r3, #1]
 8014794:	2b01      	cmp	r3, #1
 8014796:	d128      	bne.n	80147ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	015a      	lsls	r2, r3, #5
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	4413      	add	r3, r2
 80147a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	68ba      	ldr	r2, [r7, #8]
 80147a8:	0151      	lsls	r1, r2, #5
 80147aa:	68fa      	ldr	r2, [r7, #12]
 80147ac:	440a      	add	r2, r1
 80147ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80147b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	791b      	ldrb	r3, [r3, #4]
 80147bc:	2b03      	cmp	r3, #3
 80147be:	d003      	beq.n	80147c8 <USB_EPClearStall+0x4c>
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	791b      	ldrb	r3, [r3, #4]
 80147c4:	2b02      	cmp	r3, #2
 80147c6:	d138      	bne.n	801483a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	015a      	lsls	r2, r3, #5
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	4413      	add	r3, r2
 80147d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	68ba      	ldr	r2, [r7, #8]
 80147d8:	0151      	lsls	r1, r2, #5
 80147da:	68fa      	ldr	r2, [r7, #12]
 80147dc:	440a      	add	r2, r1
 80147de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80147e6:	6013      	str	r3, [r2, #0]
 80147e8:	e027      	b.n	801483a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	015a      	lsls	r2, r3, #5
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	4413      	add	r3, r2
 80147f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	68ba      	ldr	r2, [r7, #8]
 80147fa:	0151      	lsls	r1, r2, #5
 80147fc:	68fa      	ldr	r2, [r7, #12]
 80147fe:	440a      	add	r2, r1
 8014800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014804:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014808:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801480a:	683b      	ldr	r3, [r7, #0]
 801480c:	791b      	ldrb	r3, [r3, #4]
 801480e:	2b03      	cmp	r3, #3
 8014810:	d003      	beq.n	801481a <USB_EPClearStall+0x9e>
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	791b      	ldrb	r3, [r3, #4]
 8014816:	2b02      	cmp	r3, #2
 8014818:	d10f      	bne.n	801483a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	015a      	lsls	r2, r3, #5
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	4413      	add	r3, r2
 8014822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	68ba      	ldr	r2, [r7, #8]
 801482a:	0151      	lsls	r1, r2, #5
 801482c:	68fa      	ldr	r2, [r7, #12]
 801482e:	440a      	add	r2, r1
 8014830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014838:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801483a:	2300      	movs	r3, #0
}
 801483c:	4618      	mov	r0, r3
 801483e:	3714      	adds	r7, #20
 8014840:	46bd      	mov	sp, r7
 8014842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014846:	4770      	bx	lr

08014848 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014848:	b480      	push	{r7}
 801484a:	b085      	sub	sp, #20
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	460b      	mov	r3, r1
 8014852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	68fa      	ldr	r2, [r7, #12]
 8014862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014866:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801486a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014872:	681a      	ldr	r2, [r3, #0]
 8014874:	78fb      	ldrb	r3, [r7, #3]
 8014876:	011b      	lsls	r3, r3, #4
 8014878:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801487c:	68f9      	ldr	r1, [r7, #12]
 801487e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014882:	4313      	orrs	r3, r2
 8014884:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014886:	2300      	movs	r3, #0
}
 8014888:	4618      	mov	r0, r3
 801488a:	3714      	adds	r7, #20
 801488c:	46bd      	mov	sp, r7
 801488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014892:	4770      	bx	lr

08014894 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014894:	b480      	push	{r7}
 8014896:	b085      	sub	sp, #20
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	68fa      	ldr	r2, [r7, #12]
 80148aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80148ae:	f023 0303 	bic.w	r3, r3, #3
 80148b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	68fa      	ldr	r2, [r7, #12]
 80148be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80148c2:	f023 0302 	bic.w	r3, r3, #2
 80148c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80148c8:	2300      	movs	r3, #0
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3714      	adds	r7, #20
 80148ce:	46bd      	mov	sp, r7
 80148d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d4:	4770      	bx	lr

080148d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80148d6:	b480      	push	{r7}
 80148d8:	b085      	sub	sp, #20
 80148da:	af00      	add	r7, sp, #0
 80148dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	68fa      	ldr	r2, [r7, #12]
 80148ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80148f0:	f023 0303 	bic.w	r3, r3, #3
 80148f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80148fc:	685b      	ldr	r3, [r3, #4]
 80148fe:	68fa      	ldr	r2, [r7, #12]
 8014900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014904:	f043 0302 	orr.w	r3, r3, #2
 8014908:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801490a:	2300      	movs	r3, #0
}
 801490c:	4618      	mov	r0, r3
 801490e:	3714      	adds	r7, #20
 8014910:	46bd      	mov	sp, r7
 8014912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014916:	4770      	bx	lr

08014918 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014918:	b480      	push	{r7}
 801491a:	b085      	sub	sp, #20
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	695b      	ldr	r3, [r3, #20]
 8014924:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	699b      	ldr	r3, [r3, #24]
 801492a:	68fa      	ldr	r2, [r7, #12]
 801492c:	4013      	ands	r3, r2
 801492e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014930:	68fb      	ldr	r3, [r7, #12]
}
 8014932:	4618      	mov	r0, r3
 8014934:	3714      	adds	r7, #20
 8014936:	46bd      	mov	sp, r7
 8014938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493c:	4770      	bx	lr

0801493e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801493e:	b480      	push	{r7}
 8014940:	b085      	sub	sp, #20
 8014942:	af00      	add	r7, sp, #0
 8014944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014950:	699b      	ldr	r3, [r3, #24]
 8014952:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801495a:	69db      	ldr	r3, [r3, #28]
 801495c:	68ba      	ldr	r2, [r7, #8]
 801495e:	4013      	ands	r3, r2
 8014960:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014962:	68bb      	ldr	r3, [r7, #8]
 8014964:	0c1b      	lsrs	r3, r3, #16
}
 8014966:	4618      	mov	r0, r3
 8014968:	3714      	adds	r7, #20
 801496a:	46bd      	mov	sp, r7
 801496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014970:	4770      	bx	lr

08014972 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014972:	b480      	push	{r7}
 8014974:	b085      	sub	sp, #20
 8014976:	af00      	add	r7, sp, #0
 8014978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014984:	699b      	ldr	r3, [r3, #24]
 8014986:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801498e:	69db      	ldr	r3, [r3, #28]
 8014990:	68ba      	ldr	r2, [r7, #8]
 8014992:	4013      	ands	r3, r2
 8014994:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	b29b      	uxth	r3, r3
}
 801499a:	4618      	mov	r0, r3
 801499c:	3714      	adds	r7, #20
 801499e:	46bd      	mov	sp, r7
 80149a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a4:	4770      	bx	lr

080149a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80149a6:	b480      	push	{r7}
 80149a8:	b085      	sub	sp, #20
 80149aa:	af00      	add	r7, sp, #0
 80149ac:	6078      	str	r0, [r7, #4]
 80149ae:	460b      	mov	r3, r1
 80149b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80149b6:	78fb      	ldrb	r3, [r7, #3]
 80149b8:	015a      	lsls	r2, r3, #5
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	4413      	add	r3, r2
 80149be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149c2:	689b      	ldr	r3, [r3, #8]
 80149c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149cc:	695b      	ldr	r3, [r3, #20]
 80149ce:	68ba      	ldr	r2, [r7, #8]
 80149d0:	4013      	ands	r3, r2
 80149d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80149d4:	68bb      	ldr	r3, [r7, #8]
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3714      	adds	r7, #20
 80149da:	46bd      	mov	sp, r7
 80149dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e0:	4770      	bx	lr

080149e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80149e2:	b480      	push	{r7}
 80149e4:	b087      	sub	sp, #28
 80149e6:	af00      	add	r7, sp, #0
 80149e8:	6078      	str	r0, [r7, #4]
 80149ea:	460b      	mov	r3, r1
 80149ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149f8:	691b      	ldr	r3, [r3, #16]
 80149fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014a06:	78fb      	ldrb	r3, [r7, #3]
 8014a08:	f003 030f 	and.w	r3, r3, #15
 8014a0c:	68fa      	ldr	r2, [r7, #12]
 8014a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8014a12:	01db      	lsls	r3, r3, #7
 8014a14:	b2db      	uxtb	r3, r3
 8014a16:	693a      	ldr	r2, [r7, #16]
 8014a18:	4313      	orrs	r3, r2
 8014a1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014a1c:	78fb      	ldrb	r3, [r7, #3]
 8014a1e:	015a      	lsls	r2, r3, #5
 8014a20:	697b      	ldr	r3, [r7, #20]
 8014a22:	4413      	add	r3, r2
 8014a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a28:	689b      	ldr	r3, [r3, #8]
 8014a2a:	693a      	ldr	r2, [r7, #16]
 8014a2c:	4013      	ands	r3, r2
 8014a2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014a30:	68bb      	ldr	r3, [r7, #8]
}
 8014a32:	4618      	mov	r0, r3
 8014a34:	371c      	adds	r7, #28
 8014a36:	46bd      	mov	sp, r7
 8014a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3c:	4770      	bx	lr

08014a3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014a3e:	b480      	push	{r7}
 8014a40:	b083      	sub	sp, #12
 8014a42:	af00      	add	r7, sp, #0
 8014a44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	695b      	ldr	r3, [r3, #20]
 8014a4a:	f003 0301 	and.w	r3, r3, #1
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	370c      	adds	r7, #12
 8014a52:	46bd      	mov	sp, r7
 8014a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a58:	4770      	bx	lr
	...

08014a5c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014a5c:	b480      	push	{r7}
 8014a5e:	b085      	sub	sp, #20
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a76:	4619      	mov	r1, r3
 8014a78:	4b09      	ldr	r3, [pc, #36]	; (8014aa0 <USB_ActivateSetup+0x44>)
 8014a7a:	4013      	ands	r3, r2
 8014a7c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a84:	685b      	ldr	r3, [r3, #4]
 8014a86:	68fa      	ldr	r2, [r7, #12]
 8014a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014a90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014a92:	2300      	movs	r3, #0
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3714      	adds	r7, #20
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9e:	4770      	bx	lr
 8014aa0:	fffff800 	.word	0xfffff800

08014aa4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b087      	sub	sp, #28
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	460b      	mov	r3, r1
 8014aae:	607a      	str	r2, [r7, #4]
 8014ab0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	333c      	adds	r3, #60	; 0x3c
 8014aba:	3304      	adds	r3, #4
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	4a26      	ldr	r2, [pc, #152]	; (8014b5c <USB_EP0_OutStart+0xb8>)
 8014ac4:	4293      	cmp	r3, r2
 8014ac6:	d90a      	bls.n	8014ade <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ad8:	d101      	bne.n	8014ade <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014ada:	2300      	movs	r3, #0
 8014adc:	e037      	b.n	8014b4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ae4:	461a      	mov	r2, r3
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014af0:	691b      	ldr	r3, [r3, #16]
 8014af2:	697a      	ldr	r2, [r7, #20]
 8014af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014af8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014afc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b04:	691b      	ldr	r3, [r3, #16]
 8014b06:	697a      	ldr	r2, [r7, #20]
 8014b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b0c:	f043 0318 	orr.w	r3, r3, #24
 8014b10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b18:	691b      	ldr	r3, [r3, #16]
 8014b1a:	697a      	ldr	r2, [r7, #20]
 8014b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014b24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014b26:	7afb      	ldrb	r3, [r7, #11]
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	d10f      	bne.n	8014b4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b32:	461a      	mov	r2, r3
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	697a      	ldr	r2, [r7, #20]
 8014b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014b4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014b4c:	2300      	movs	r3, #0
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	371c      	adds	r7, #28
 8014b52:	46bd      	mov	sp, r7
 8014b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b58:	4770      	bx	lr
 8014b5a:	bf00      	nop
 8014b5c:	4f54300a 	.word	0x4f54300a

08014b60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014b60:	b480      	push	{r7}
 8014b62:	b085      	sub	sp, #20
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014b68:	2300      	movs	r3, #0
 8014b6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	3301      	adds	r3, #1
 8014b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	4a13      	ldr	r2, [pc, #76]	; (8014bc4 <USB_CoreReset+0x64>)
 8014b76:	4293      	cmp	r3, r2
 8014b78:	d901      	bls.n	8014b7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014b7a:	2303      	movs	r3, #3
 8014b7c:	e01b      	b.n	8014bb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	691b      	ldr	r3, [r3, #16]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	daf2      	bge.n	8014b6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014b86:	2300      	movs	r3, #0
 8014b88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	691b      	ldr	r3, [r3, #16]
 8014b8e:	f043 0201 	orr.w	r2, r3, #1
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	3301      	adds	r3, #1
 8014b9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	4a09      	ldr	r2, [pc, #36]	; (8014bc4 <USB_CoreReset+0x64>)
 8014ba0:	4293      	cmp	r3, r2
 8014ba2:	d901      	bls.n	8014ba8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014ba4:	2303      	movs	r3, #3
 8014ba6:	e006      	b.n	8014bb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	691b      	ldr	r3, [r3, #16]
 8014bac:	f003 0301 	and.w	r3, r3, #1
 8014bb0:	2b01      	cmp	r3, #1
 8014bb2:	d0f0      	beq.n	8014b96 <USB_CoreReset+0x36>

  return HAL_OK;
 8014bb4:	2300      	movs	r3, #0
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3714      	adds	r7, #20
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc0:	4770      	bx	lr
 8014bc2:	bf00      	nop
 8014bc4:	00030d40 	.word	0x00030d40

08014bc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014bcc:	4904      	ldr	r1, [pc, #16]	; (8014be0 <MX_FATFS_Init+0x18>)
 8014bce:	4805      	ldr	r0, [pc, #20]	; (8014be4 <MX_FATFS_Init+0x1c>)
 8014bd0:	f005 f904 	bl	8019ddc <FATFS_LinkDriver>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	461a      	mov	r2, r3
 8014bd8:	4b03      	ldr	r3, [pc, #12]	; (8014be8 <MX_FATFS_Init+0x20>)
 8014bda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014bdc:	bf00      	nop
 8014bde:	bd80      	pop	{r7, pc}
 8014be0:	24001520 	.word	0x24001520
 8014be4:	0801bfbc 	.word	0x0801bfbc
 8014be8:	2400151c 	.word	0x2400151c

08014bec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014bec:	b480      	push	{r7}
 8014bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014bf0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfa:	4770      	bx	lr

08014bfc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b082      	sub	sp, #8
 8014c00:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014c02:	2300      	movs	r3, #0
 8014c04:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014c06:	f000 f885 	bl	8014d14 <BSP_SD_IsDetected>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d001      	beq.n	8014c14 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014c10:	2302      	movs	r3, #2
 8014c12:	e012      	b.n	8014c3a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8014c14:	480b      	ldr	r0, [pc, #44]	; (8014c44 <BSP_SD_Init+0x48>)
 8014c16:	f7f8 ff39 	bl	800da8c <HAL_SD_Init>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014c1e:	79fb      	ldrb	r3, [r7, #7]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d109      	bne.n	8014c38 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014c24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014c28:	4806      	ldr	r0, [pc, #24]	; (8014c44 <BSP_SD_Init+0x48>)
 8014c2a:	f7f9 fdef 	bl	800e80c <HAL_SD_ConfigWideBusOperation>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d001      	beq.n	8014c38 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014c34:	2301      	movs	r3, #1
 8014c36:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014c38:	79fb      	ldrb	r3, [r7, #7]
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3708      	adds	r7, #8
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}
 8014c42:	bf00      	nop
 8014c44:	24000db8 	.word	0x24000db8

08014c48 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b086      	sub	sp, #24
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	60f8      	str	r0, [r7, #12]
 8014c50:	60b9      	str	r1, [r7, #8]
 8014c52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014c54:	2300      	movs	r3, #0
 8014c56:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	68ba      	ldr	r2, [r7, #8]
 8014c5c:	68f9      	ldr	r1, [r7, #12]
 8014c5e:	4806      	ldr	r0, [pc, #24]	; (8014c78 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014c60:	f7f9 f834 	bl	800dccc <HAL_SD_ReadBlocks_DMA>
 8014c64:	4603      	mov	r3, r0
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d001      	beq.n	8014c6e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	3718      	adds	r7, #24
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	24000db8 	.word	0x24000db8

08014c7c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b086      	sub	sp, #24
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	60f8      	str	r0, [r7, #12]
 8014c84:	60b9      	str	r1, [r7, #8]
 8014c86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014c88:	2300      	movs	r3, #0
 8014c8a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	68ba      	ldr	r2, [r7, #8]
 8014c90:	68f9      	ldr	r1, [r7, #12]
 8014c92:	4806      	ldr	r0, [pc, #24]	; (8014cac <BSP_SD_WriteBlocks_DMA+0x30>)
 8014c94:	f7f9 f8c2 	bl	800de1c <HAL_SD_WriteBlocks_DMA>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d001      	beq.n	8014ca2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3718      	adds	r7, #24
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	24000db8 	.word	0x24000db8

08014cb0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014cb4:	4805      	ldr	r0, [pc, #20]	; (8014ccc <BSP_SD_GetCardState+0x1c>)
 8014cb6:	f7f9 febb 	bl	800ea30 <HAL_SD_GetCardState>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	2b04      	cmp	r3, #4
 8014cbe:	bf14      	ite	ne
 8014cc0:	2301      	movne	r3, #1
 8014cc2:	2300      	moveq	r3, #0
 8014cc4:	b2db      	uxtb	r3, r3
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	bd80      	pop	{r7, pc}
 8014cca:	bf00      	nop
 8014ccc:	24000db8 	.word	0x24000db8

08014cd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014cd8:	6879      	ldr	r1, [r7, #4]
 8014cda:	4803      	ldr	r0, [pc, #12]	; (8014ce8 <BSP_SD_GetCardInfo+0x18>)
 8014cdc:	f7f9 fd6a 	bl	800e7b4 <HAL_SD_GetCardInfo>
}
 8014ce0:	bf00      	nop
 8014ce2:	3708      	adds	r7, #8
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}
 8014ce8:	24000db8 	.word	0x24000db8

08014cec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b082      	sub	sp, #8
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014cf4:	f000 f984 	bl	8015000 <BSP_SD_WriteCpltCallback>
}
 8014cf8:	bf00      	nop
 8014cfa:	3708      	adds	r7, #8
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}

08014d00 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b082      	sub	sp, #8
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014d08:	f000 f986 	bl	8015018 <BSP_SD_ReadCpltCallback>
}
 8014d0c:	bf00      	nop
 8014d0e:	3708      	adds	r7, #8
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}

08014d14 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014d14:	b480      	push	{r7}
 8014d16:	b083      	sub	sp, #12
 8014d18:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014d1a:	2301      	movs	r3, #1
 8014d1c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8014d1e:	79fb      	ldrb	r3, [r7, #7]
 8014d20:	b2db      	uxtb	r3, r3
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	370c      	adds	r7, #12
 8014d26:	46bd      	mov	sp, r7
 8014d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2c:	4770      	bx	lr

08014d2e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014d2e:	b580      	push	{r7, lr}
 8014d30:	b084      	sub	sp, #16
 8014d32:	af00      	add	r7, sp, #0
 8014d34:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014d36:	f7ee ff8b 	bl	8003c50 <HAL_GetTick>
 8014d3a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014d3c:	e006      	b.n	8014d4c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014d3e:	f7ff ffb7 	bl	8014cb0 <BSP_SD_GetCardState>
 8014d42:	4603      	mov	r3, r0
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d101      	bne.n	8014d4c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	e009      	b.n	8014d60 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014d4c:	f7ee ff80 	bl	8003c50 <HAL_GetTick>
 8014d50:	4602      	mov	r2, r0
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	1ad3      	subs	r3, r2, r3
 8014d56:	687a      	ldr	r2, [r7, #4]
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d8f0      	bhi.n	8014d3e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3710      	adds	r7, #16
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}

08014d68 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b082      	sub	sp, #8
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	4603      	mov	r3, r0
 8014d70:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014d72:	4b0b      	ldr	r3, [pc, #44]	; (8014da0 <SD_CheckStatus+0x38>)
 8014d74:	2201      	movs	r2, #1
 8014d76:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014d78:	f7ff ff9a 	bl	8014cb0 <BSP_SD_GetCardState>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d107      	bne.n	8014d92 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014d82:	4b07      	ldr	r3, [pc, #28]	; (8014da0 <SD_CheckStatus+0x38>)
 8014d84:	781b      	ldrb	r3, [r3, #0]
 8014d86:	b2db      	uxtb	r3, r3
 8014d88:	f023 0301 	bic.w	r3, r3, #1
 8014d8c:	b2da      	uxtb	r2, r3
 8014d8e:	4b04      	ldr	r3, [pc, #16]	; (8014da0 <SD_CheckStatus+0x38>)
 8014d90:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014d92:	4b03      	ldr	r3, [pc, #12]	; (8014da0 <SD_CheckStatus+0x38>)
 8014d94:	781b      	ldrb	r3, [r3, #0]
 8014d96:	b2db      	uxtb	r3, r3
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	3708      	adds	r7, #8
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}
 8014da0:	2400000d 	.word	0x2400000d

08014da4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b082      	sub	sp, #8
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	4603      	mov	r3, r0
 8014dac:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014dae:	f7ff ff25 	bl	8014bfc <BSP_SD_Init>
 8014db2:	4603      	mov	r3, r0
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d107      	bne.n	8014dc8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014db8:	79fb      	ldrb	r3, [r7, #7]
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7ff ffd4 	bl	8014d68 <SD_CheckStatus>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	461a      	mov	r2, r3
 8014dc4:	4b04      	ldr	r3, [pc, #16]	; (8014dd8 <SD_initialize+0x34>)
 8014dc6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014dc8:	4b03      	ldr	r3, [pc, #12]	; (8014dd8 <SD_initialize+0x34>)
 8014dca:	781b      	ldrb	r3, [r3, #0]
 8014dcc:	b2db      	uxtb	r3, r3
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3708      	adds	r7, #8
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	2400000d 	.word	0x2400000d

08014ddc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	4603      	mov	r3, r0
 8014de4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014de6:	79fb      	ldrb	r3, [r7, #7]
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7ff ffbd 	bl	8014d68 <SD_CheckStatus>
 8014dee:	4603      	mov	r3, r0
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	3708      	adds	r7, #8
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}

08014df8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b086      	sub	sp, #24
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	60b9      	str	r1, [r7, #8]
 8014e00:	607a      	str	r2, [r7, #4]
 8014e02:	603b      	str	r3, [r7, #0]
 8014e04:	4603      	mov	r3, r0
 8014e06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014e08:	2301      	movs	r3, #1
 8014e0a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014e0c:	f247 5030 	movw	r0, #30000	; 0x7530
 8014e10:	f7ff ff8d 	bl	8014d2e <SD_CheckStatusWithTimeout>
 8014e14:	4603      	mov	r3, r0
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	da01      	bge.n	8014e1e <SD_read+0x26>
  {
    return res;
 8014e1a:	7dfb      	ldrb	r3, [r7, #23]
 8014e1c:	e03b      	b.n	8014e96 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014e1e:	683a      	ldr	r2, [r7, #0]
 8014e20:	6879      	ldr	r1, [r7, #4]
 8014e22:	68b8      	ldr	r0, [r7, #8]
 8014e24:	f7ff ff10 	bl	8014c48 <BSP_SD_ReadBlocks_DMA>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d132      	bne.n	8014e94 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014e2e:	4b1c      	ldr	r3, [pc, #112]	; (8014ea0 <SD_read+0xa8>)
 8014e30:	2200      	movs	r2, #0
 8014e32:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014e34:	f7ee ff0c 	bl	8003c50 <HAL_GetTick>
 8014e38:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014e3a:	bf00      	nop
 8014e3c:	4b18      	ldr	r3, [pc, #96]	; (8014ea0 <SD_read+0xa8>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d108      	bne.n	8014e56 <SD_read+0x5e>
 8014e44:	f7ee ff04 	bl	8003c50 <HAL_GetTick>
 8014e48:	4602      	mov	r2, r0
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	1ad3      	subs	r3, r2, r3
 8014e4e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014e52:	4293      	cmp	r3, r2
 8014e54:	d9f2      	bls.n	8014e3c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014e56:	4b12      	ldr	r3, [pc, #72]	; (8014ea0 <SD_read+0xa8>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d102      	bne.n	8014e64 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014e5e:	2301      	movs	r3, #1
 8014e60:	75fb      	strb	r3, [r7, #23]
 8014e62:	e017      	b.n	8014e94 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014e64:	4b0e      	ldr	r3, [pc, #56]	; (8014ea0 <SD_read+0xa8>)
 8014e66:	2200      	movs	r2, #0
 8014e68:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014e6a:	f7ee fef1 	bl	8003c50 <HAL_GetTick>
 8014e6e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014e70:	e007      	b.n	8014e82 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014e72:	f7ff ff1d 	bl	8014cb0 <BSP_SD_GetCardState>
 8014e76:	4603      	mov	r3, r0
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d102      	bne.n	8014e82 <SD_read+0x8a>
          {
            res = RES_OK;
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014e80:	e008      	b.n	8014e94 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014e82:	f7ee fee5 	bl	8003c50 <HAL_GetTick>
 8014e86:	4602      	mov	r2, r0
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	1ad3      	subs	r3, r2, r3
 8014e8c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014e90:	4293      	cmp	r3, r2
 8014e92:	d9ee      	bls.n	8014e72 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3718      	adds	r7, #24
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	24001528 	.word	0x24001528

08014ea4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b086      	sub	sp, #24
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60b9      	str	r1, [r7, #8]
 8014eac:	607a      	str	r2, [r7, #4]
 8014eae:	603b      	str	r3, [r7, #0]
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014eb4:	2301      	movs	r3, #1
 8014eb6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014eb8:	4b24      	ldr	r3, [pc, #144]	; (8014f4c <SD_write+0xa8>)
 8014eba:	2200      	movs	r2, #0
 8014ebc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014ebe:	f247 5030 	movw	r0, #30000	; 0x7530
 8014ec2:	f7ff ff34 	bl	8014d2e <SD_CheckStatusWithTimeout>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	da01      	bge.n	8014ed0 <SD_write+0x2c>
  {
    return res;
 8014ecc:	7dfb      	ldrb	r3, [r7, #23]
 8014ece:	e038      	b.n	8014f42 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014ed0:	683a      	ldr	r2, [r7, #0]
 8014ed2:	6879      	ldr	r1, [r7, #4]
 8014ed4:	68b8      	ldr	r0, [r7, #8]
 8014ed6:	f7ff fed1 	bl	8014c7c <BSP_SD_WriteBlocks_DMA>
 8014eda:	4603      	mov	r3, r0
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d12f      	bne.n	8014f40 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014ee0:	f7ee feb6 	bl	8003c50 <HAL_GetTick>
 8014ee4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014ee6:	bf00      	nop
 8014ee8:	4b18      	ldr	r3, [pc, #96]	; (8014f4c <SD_write+0xa8>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d108      	bne.n	8014f02 <SD_write+0x5e>
 8014ef0:	f7ee feae 	bl	8003c50 <HAL_GetTick>
 8014ef4:	4602      	mov	r2, r0
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	1ad3      	subs	r3, r2, r3
 8014efa:	f247 522f 	movw	r2, #29999	; 0x752f
 8014efe:	4293      	cmp	r3, r2
 8014f00:	d9f2      	bls.n	8014ee8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014f02:	4b12      	ldr	r3, [pc, #72]	; (8014f4c <SD_write+0xa8>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d102      	bne.n	8014f10 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	75fb      	strb	r3, [r7, #23]
 8014f0e:	e017      	b.n	8014f40 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014f10:	4b0e      	ldr	r3, [pc, #56]	; (8014f4c <SD_write+0xa8>)
 8014f12:	2200      	movs	r2, #0
 8014f14:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014f16:	f7ee fe9b 	bl	8003c50 <HAL_GetTick>
 8014f1a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014f1c:	e007      	b.n	8014f2e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014f1e:	f7ff fec7 	bl	8014cb0 <BSP_SD_GetCardState>
 8014f22:	4603      	mov	r3, r0
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d102      	bne.n	8014f2e <SD_write+0x8a>
          {
            res = RES_OK;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	75fb      	strb	r3, [r7, #23]
            break;
 8014f2c:	e008      	b.n	8014f40 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014f2e:	f7ee fe8f 	bl	8003c50 <HAL_GetTick>
 8014f32:	4602      	mov	r2, r0
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	1ad3      	subs	r3, r2, r3
 8014f38:	f247 522f 	movw	r2, #29999	; 0x752f
 8014f3c:	4293      	cmp	r3, r2
 8014f3e:	d9ee      	bls.n	8014f1e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3718      	adds	r7, #24
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}
 8014f4a:	bf00      	nop
 8014f4c:	24001524 	.word	0x24001524

08014f50 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b08c      	sub	sp, #48	; 0x30
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	4603      	mov	r3, r0
 8014f58:	603a      	str	r2, [r7, #0]
 8014f5a:	71fb      	strb	r3, [r7, #7]
 8014f5c:	460b      	mov	r3, r1
 8014f5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014f60:	2301      	movs	r3, #1
 8014f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014f66:	4b25      	ldr	r3, [pc, #148]	; (8014ffc <SD_ioctl+0xac>)
 8014f68:	781b      	ldrb	r3, [r3, #0]
 8014f6a:	b2db      	uxtb	r3, r3
 8014f6c:	f003 0301 	and.w	r3, r3, #1
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d001      	beq.n	8014f78 <SD_ioctl+0x28>
 8014f74:	2303      	movs	r3, #3
 8014f76:	e03c      	b.n	8014ff2 <SD_ioctl+0xa2>

  switch (cmd)
 8014f78:	79bb      	ldrb	r3, [r7, #6]
 8014f7a:	2b03      	cmp	r3, #3
 8014f7c:	d834      	bhi.n	8014fe8 <SD_ioctl+0x98>
 8014f7e:	a201      	add	r2, pc, #4	; (adr r2, 8014f84 <SD_ioctl+0x34>)
 8014f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f84:	08014f95 	.word	0x08014f95
 8014f88:	08014f9d 	.word	0x08014f9d
 8014f8c:	08014fb5 	.word	0x08014fb5
 8014f90:	08014fcf 	.word	0x08014fcf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014f94:	2300      	movs	r3, #0
 8014f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014f9a:	e028      	b.n	8014fee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014f9c:	f107 0308 	add.w	r3, r7, #8
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	f7ff fe95 	bl	8014cd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014fa6:	6a3a      	ldr	r2, [r7, #32]
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014fac:	2300      	movs	r3, #0
 8014fae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014fb2:	e01c      	b.n	8014fee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014fb4:	f107 0308 	add.w	r3, r7, #8
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f7ff fe89 	bl	8014cd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc0:	b29a      	uxth	r2, r3
 8014fc2:	683b      	ldr	r3, [r7, #0]
 8014fc4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014fcc:	e00f      	b.n	8014fee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014fce:	f107 0308 	add.w	r3, r7, #8
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7ff fe7c 	bl	8014cd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fda:	0a5a      	lsrs	r2, r3, #9
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014fe6:	e002      	b.n	8014fee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014fe8:	2304      	movs	r3, #4
 8014fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014fee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	3730      	adds	r7, #48	; 0x30
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}
 8014ffa:	bf00      	nop
 8014ffc:	2400000d 	.word	0x2400000d

08015000 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015000:	b480      	push	{r7}
 8015002:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8015004:	4b03      	ldr	r3, [pc, #12]	; (8015014 <BSP_SD_WriteCpltCallback+0x14>)
 8015006:	2201      	movs	r2, #1
 8015008:	601a      	str	r2, [r3, #0]
}
 801500a:	bf00      	nop
 801500c:	46bd      	mov	sp, r7
 801500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015012:	4770      	bx	lr
 8015014:	24001524 	.word	0x24001524

08015018 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015018:	b480      	push	{r7}
 801501a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801501c:	4b03      	ldr	r3, [pc, #12]	; (801502c <BSP_SD_ReadCpltCallback+0x14>)
 801501e:	2201      	movs	r2, #1
 8015020:	601a      	str	r2, [r3, #0]
}
 8015022:	bf00      	nop
 8015024:	46bd      	mov	sp, r7
 8015026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502a:	4770      	bx	lr
 801502c:	24001528 	.word	0x24001528

08015030 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b084      	sub	sp, #16
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
 8015038:	460b      	mov	r3, r1
 801503a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801503c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015040:	f005 fc72 	bl	801a928 <USBD_static_malloc>
 8015044:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d109      	bne.n	8015060 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	32b0      	adds	r2, #176	; 0xb0
 8015056:	2100      	movs	r1, #0
 8015058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801505c:	2302      	movs	r3, #2
 801505e:	e0d4      	b.n	801520a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015060:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8015064:	2100      	movs	r1, #0
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	f005 fcf0 	bl	801aa4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	32b0      	adds	r2, #176	; 0xb0
 8015076:	68f9      	ldr	r1, [r7, #12]
 8015078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	32b0      	adds	r2, #176	; 0xb0
 8015086:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	7c1b      	ldrb	r3, [r3, #16]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d138      	bne.n	801510a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015098:	4b5e      	ldr	r3, [pc, #376]	; (8015214 <USBD_CDC_Init+0x1e4>)
 801509a:	7819      	ldrb	r1, [r3, #0]
 801509c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80150a0:	2202      	movs	r2, #2
 80150a2:	6878      	ldr	r0, [r7, #4]
 80150a4:	f005 fb1d 	bl	801a6e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80150a8:	4b5a      	ldr	r3, [pc, #360]	; (8015214 <USBD_CDC_Init+0x1e4>)
 80150aa:	781b      	ldrb	r3, [r3, #0]
 80150ac:	f003 020f 	and.w	r2, r3, #15
 80150b0:	6879      	ldr	r1, [r7, #4]
 80150b2:	4613      	mov	r3, r2
 80150b4:	009b      	lsls	r3, r3, #2
 80150b6:	4413      	add	r3, r2
 80150b8:	009b      	lsls	r3, r3, #2
 80150ba:	440b      	add	r3, r1
 80150bc:	3324      	adds	r3, #36	; 0x24
 80150be:	2201      	movs	r2, #1
 80150c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80150c2:	4b55      	ldr	r3, [pc, #340]	; (8015218 <USBD_CDC_Init+0x1e8>)
 80150c4:	7819      	ldrb	r1, [r3, #0]
 80150c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80150ca:	2202      	movs	r2, #2
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f005 fb08 	bl	801a6e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80150d2:	4b51      	ldr	r3, [pc, #324]	; (8015218 <USBD_CDC_Init+0x1e8>)
 80150d4:	781b      	ldrb	r3, [r3, #0]
 80150d6:	f003 020f 	and.w	r2, r3, #15
 80150da:	6879      	ldr	r1, [r7, #4]
 80150dc:	4613      	mov	r3, r2
 80150de:	009b      	lsls	r3, r3, #2
 80150e0:	4413      	add	r3, r2
 80150e2:	009b      	lsls	r3, r3, #2
 80150e4:	440b      	add	r3, r1
 80150e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80150ea:	2201      	movs	r2, #1
 80150ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80150ee:	4b4b      	ldr	r3, [pc, #300]	; (801521c <USBD_CDC_Init+0x1ec>)
 80150f0:	781b      	ldrb	r3, [r3, #0]
 80150f2:	f003 020f 	and.w	r2, r3, #15
 80150f6:	6879      	ldr	r1, [r7, #4]
 80150f8:	4613      	mov	r3, r2
 80150fa:	009b      	lsls	r3, r3, #2
 80150fc:	4413      	add	r3, r2
 80150fe:	009b      	lsls	r3, r3, #2
 8015100:	440b      	add	r3, r1
 8015102:	3326      	adds	r3, #38	; 0x26
 8015104:	2210      	movs	r2, #16
 8015106:	801a      	strh	r2, [r3, #0]
 8015108:	e035      	b.n	8015176 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801510a:	4b42      	ldr	r3, [pc, #264]	; (8015214 <USBD_CDC_Init+0x1e4>)
 801510c:	7819      	ldrb	r1, [r3, #0]
 801510e:	2340      	movs	r3, #64	; 0x40
 8015110:	2202      	movs	r2, #2
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f005 fae5 	bl	801a6e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015118:	4b3e      	ldr	r3, [pc, #248]	; (8015214 <USBD_CDC_Init+0x1e4>)
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	f003 020f 	and.w	r2, r3, #15
 8015120:	6879      	ldr	r1, [r7, #4]
 8015122:	4613      	mov	r3, r2
 8015124:	009b      	lsls	r3, r3, #2
 8015126:	4413      	add	r3, r2
 8015128:	009b      	lsls	r3, r3, #2
 801512a:	440b      	add	r3, r1
 801512c:	3324      	adds	r3, #36	; 0x24
 801512e:	2201      	movs	r2, #1
 8015130:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015132:	4b39      	ldr	r3, [pc, #228]	; (8015218 <USBD_CDC_Init+0x1e8>)
 8015134:	7819      	ldrb	r1, [r3, #0]
 8015136:	2340      	movs	r3, #64	; 0x40
 8015138:	2202      	movs	r2, #2
 801513a:	6878      	ldr	r0, [r7, #4]
 801513c:	f005 fad1 	bl	801a6e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015140:	4b35      	ldr	r3, [pc, #212]	; (8015218 <USBD_CDC_Init+0x1e8>)
 8015142:	781b      	ldrb	r3, [r3, #0]
 8015144:	f003 020f 	and.w	r2, r3, #15
 8015148:	6879      	ldr	r1, [r7, #4]
 801514a:	4613      	mov	r3, r2
 801514c:	009b      	lsls	r3, r3, #2
 801514e:	4413      	add	r3, r2
 8015150:	009b      	lsls	r3, r3, #2
 8015152:	440b      	add	r3, r1
 8015154:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015158:	2201      	movs	r2, #1
 801515a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801515c:	4b2f      	ldr	r3, [pc, #188]	; (801521c <USBD_CDC_Init+0x1ec>)
 801515e:	781b      	ldrb	r3, [r3, #0]
 8015160:	f003 020f 	and.w	r2, r3, #15
 8015164:	6879      	ldr	r1, [r7, #4]
 8015166:	4613      	mov	r3, r2
 8015168:	009b      	lsls	r3, r3, #2
 801516a:	4413      	add	r3, r2
 801516c:	009b      	lsls	r3, r3, #2
 801516e:	440b      	add	r3, r1
 8015170:	3326      	adds	r3, #38	; 0x26
 8015172:	2210      	movs	r2, #16
 8015174:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015176:	4b29      	ldr	r3, [pc, #164]	; (801521c <USBD_CDC_Init+0x1ec>)
 8015178:	7819      	ldrb	r1, [r3, #0]
 801517a:	2308      	movs	r3, #8
 801517c:	2203      	movs	r2, #3
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f005 faaf 	bl	801a6e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015184:	4b25      	ldr	r3, [pc, #148]	; (801521c <USBD_CDC_Init+0x1ec>)
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	f003 020f 	and.w	r2, r3, #15
 801518c:	6879      	ldr	r1, [r7, #4]
 801518e:	4613      	mov	r3, r2
 8015190:	009b      	lsls	r3, r3, #2
 8015192:	4413      	add	r3, r2
 8015194:	009b      	lsls	r3, r3, #2
 8015196:	440b      	add	r3, r1
 8015198:	3324      	adds	r3, #36	; 0x24
 801519a:	2201      	movs	r2, #1
 801519c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	2200      	movs	r2, #0
 80151a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80151ac:	687a      	ldr	r2, [r7, #4]
 80151ae:	33b0      	adds	r3, #176	; 0xb0
 80151b0:	009b      	lsls	r3, r3, #2
 80151b2:	4413      	add	r3, r2
 80151b4:	685b      	ldr	r3, [r3, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	2200      	movs	r2, #0
 80151be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	2200      	movs	r2, #0
 80151c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d101      	bne.n	80151d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80151d4:	2302      	movs	r3, #2
 80151d6:	e018      	b.n	801520a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	7c1b      	ldrb	r3, [r3, #16]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d10a      	bne.n	80151f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80151e0:	4b0d      	ldr	r3, [pc, #52]	; (8015218 <USBD_CDC_Init+0x1e8>)
 80151e2:	7819      	ldrb	r1, [r3, #0]
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80151ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f005 fb66 	bl	801a8c0 <USBD_LL_PrepareReceive>
 80151f4:	e008      	b.n	8015208 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80151f6:	4b08      	ldr	r3, [pc, #32]	; (8015218 <USBD_CDC_Init+0x1e8>)
 80151f8:	7819      	ldrb	r1, [r3, #0]
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015200:	2340      	movs	r3, #64	; 0x40
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f005 fb5c 	bl	801a8c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015208:	2300      	movs	r3, #0
}
 801520a:	4618      	mov	r0, r3
 801520c:	3710      	adds	r7, #16
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}
 8015212:	bf00      	nop
 8015214:	24000097 	.word	0x24000097
 8015218:	24000098 	.word	0x24000098
 801521c:	24000099 	.word	0x24000099

08015220 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b082      	sub	sp, #8
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
 8015228:	460b      	mov	r3, r1
 801522a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801522c:	4b3a      	ldr	r3, [pc, #232]	; (8015318 <USBD_CDC_DeInit+0xf8>)
 801522e:	781b      	ldrb	r3, [r3, #0]
 8015230:	4619      	mov	r1, r3
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	f005 fa7b 	bl	801a72e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015238:	4b37      	ldr	r3, [pc, #220]	; (8015318 <USBD_CDC_DeInit+0xf8>)
 801523a:	781b      	ldrb	r3, [r3, #0]
 801523c:	f003 020f 	and.w	r2, r3, #15
 8015240:	6879      	ldr	r1, [r7, #4]
 8015242:	4613      	mov	r3, r2
 8015244:	009b      	lsls	r3, r3, #2
 8015246:	4413      	add	r3, r2
 8015248:	009b      	lsls	r3, r3, #2
 801524a:	440b      	add	r3, r1
 801524c:	3324      	adds	r3, #36	; 0x24
 801524e:	2200      	movs	r2, #0
 8015250:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015252:	4b32      	ldr	r3, [pc, #200]	; (801531c <USBD_CDC_DeInit+0xfc>)
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	4619      	mov	r1, r3
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f005 fa68 	bl	801a72e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801525e:	4b2f      	ldr	r3, [pc, #188]	; (801531c <USBD_CDC_DeInit+0xfc>)
 8015260:	781b      	ldrb	r3, [r3, #0]
 8015262:	f003 020f 	and.w	r2, r3, #15
 8015266:	6879      	ldr	r1, [r7, #4]
 8015268:	4613      	mov	r3, r2
 801526a:	009b      	lsls	r3, r3, #2
 801526c:	4413      	add	r3, r2
 801526e:	009b      	lsls	r3, r3, #2
 8015270:	440b      	add	r3, r1
 8015272:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015276:	2200      	movs	r2, #0
 8015278:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801527a:	4b29      	ldr	r3, [pc, #164]	; (8015320 <USBD_CDC_DeInit+0x100>)
 801527c:	781b      	ldrb	r3, [r3, #0]
 801527e:	4619      	mov	r1, r3
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f005 fa54 	bl	801a72e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015286:	4b26      	ldr	r3, [pc, #152]	; (8015320 <USBD_CDC_DeInit+0x100>)
 8015288:	781b      	ldrb	r3, [r3, #0]
 801528a:	f003 020f 	and.w	r2, r3, #15
 801528e:	6879      	ldr	r1, [r7, #4]
 8015290:	4613      	mov	r3, r2
 8015292:	009b      	lsls	r3, r3, #2
 8015294:	4413      	add	r3, r2
 8015296:	009b      	lsls	r3, r3, #2
 8015298:	440b      	add	r3, r1
 801529a:	3324      	adds	r3, #36	; 0x24
 801529c:	2200      	movs	r2, #0
 801529e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80152a0:	4b1f      	ldr	r3, [pc, #124]	; (8015320 <USBD_CDC_DeInit+0x100>)
 80152a2:	781b      	ldrb	r3, [r3, #0]
 80152a4:	f003 020f 	and.w	r2, r3, #15
 80152a8:	6879      	ldr	r1, [r7, #4]
 80152aa:	4613      	mov	r3, r2
 80152ac:	009b      	lsls	r3, r3, #2
 80152ae:	4413      	add	r3, r2
 80152b0:	009b      	lsls	r3, r3, #2
 80152b2:	440b      	add	r3, r1
 80152b4:	3326      	adds	r3, #38	; 0x26
 80152b6:	2200      	movs	r2, #0
 80152b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	32b0      	adds	r2, #176	; 0xb0
 80152c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d01f      	beq.n	801530c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152d2:	687a      	ldr	r2, [r7, #4]
 80152d4:	33b0      	adds	r3, #176	; 0xb0
 80152d6:	009b      	lsls	r3, r3, #2
 80152d8:	4413      	add	r3, r2
 80152da:	685b      	ldr	r3, [r3, #4]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	32b0      	adds	r2, #176	; 0xb0
 80152ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152ee:	4618      	mov	r0, r3
 80152f0:	f005 fb28 	bl	801a944 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	32b0      	adds	r2, #176	; 0xb0
 80152fe:	2100      	movs	r1, #0
 8015300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2200      	movs	r2, #0
 8015308:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801530c:	2300      	movs	r3, #0
}
 801530e:	4618      	mov	r0, r3
 8015310:	3708      	adds	r7, #8
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	24000097 	.word	0x24000097
 801531c:	24000098 	.word	0x24000098
 8015320:	24000099 	.word	0x24000099

08015324 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b086      	sub	sp, #24
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	32b0      	adds	r2, #176	; 0xb0
 8015338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801533c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801533e:	2300      	movs	r3, #0
 8015340:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015342:	2300      	movs	r3, #0
 8015344:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015346:	2300      	movs	r3, #0
 8015348:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d101      	bne.n	8015354 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015350:	2303      	movs	r3, #3
 8015352:	e0bf      	b.n	80154d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	781b      	ldrb	r3, [r3, #0]
 8015358:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801535c:	2b00      	cmp	r3, #0
 801535e:	d050      	beq.n	8015402 <USBD_CDC_Setup+0xde>
 8015360:	2b20      	cmp	r3, #32
 8015362:	f040 80af 	bne.w	80154c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	88db      	ldrh	r3, [r3, #6]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d03a      	beq.n	80153e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801536e:	683b      	ldr	r3, [r7, #0]
 8015370:	781b      	ldrb	r3, [r3, #0]
 8015372:	b25b      	sxtb	r3, r3
 8015374:	2b00      	cmp	r3, #0
 8015376:	da1b      	bge.n	80153b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801537e:	687a      	ldr	r2, [r7, #4]
 8015380:	33b0      	adds	r3, #176	; 0xb0
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	4413      	add	r3, r2
 8015386:	685b      	ldr	r3, [r3, #4]
 8015388:	689b      	ldr	r3, [r3, #8]
 801538a:	683a      	ldr	r2, [r7, #0]
 801538c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801538e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015390:	683a      	ldr	r2, [r7, #0]
 8015392:	88d2      	ldrh	r2, [r2, #6]
 8015394:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	88db      	ldrh	r3, [r3, #6]
 801539a:	2b07      	cmp	r3, #7
 801539c:	bf28      	it	cs
 801539e:	2307      	movcs	r3, #7
 80153a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80153a2:	693b      	ldr	r3, [r7, #16]
 80153a4:	89fa      	ldrh	r2, [r7, #14]
 80153a6:	4619      	mov	r1, r3
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f001 fd89 	bl	8016ec0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80153ae:	e090      	b.n	80154d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	785a      	ldrb	r2, [r3, #1]
 80153b4:	693b      	ldr	r3, [r7, #16]
 80153b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	88db      	ldrh	r3, [r3, #6]
 80153be:	2b3f      	cmp	r3, #63	; 0x3f
 80153c0:	d803      	bhi.n	80153ca <USBD_CDC_Setup+0xa6>
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	88db      	ldrh	r3, [r3, #6]
 80153c6:	b2da      	uxtb	r2, r3
 80153c8:	e000      	b.n	80153cc <USBD_CDC_Setup+0xa8>
 80153ca:	2240      	movs	r2, #64	; 0x40
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80153d2:	6939      	ldr	r1, [r7, #16]
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80153da:	461a      	mov	r2, r3
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f001 fd9b 	bl	8016f18 <USBD_CtlPrepareRx>
      break;
 80153e2:	e076      	b.n	80154d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80153ea:	687a      	ldr	r2, [r7, #4]
 80153ec:	33b0      	adds	r3, #176	; 0xb0
 80153ee:	009b      	lsls	r3, r3, #2
 80153f0:	4413      	add	r3, r2
 80153f2:	685b      	ldr	r3, [r3, #4]
 80153f4:	689b      	ldr	r3, [r3, #8]
 80153f6:	683a      	ldr	r2, [r7, #0]
 80153f8:	7850      	ldrb	r0, [r2, #1]
 80153fa:	2200      	movs	r2, #0
 80153fc:	6839      	ldr	r1, [r7, #0]
 80153fe:	4798      	blx	r3
      break;
 8015400:	e067      	b.n	80154d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015402:	683b      	ldr	r3, [r7, #0]
 8015404:	785b      	ldrb	r3, [r3, #1]
 8015406:	2b0b      	cmp	r3, #11
 8015408:	d851      	bhi.n	80154ae <USBD_CDC_Setup+0x18a>
 801540a:	a201      	add	r2, pc, #4	; (adr r2, 8015410 <USBD_CDC_Setup+0xec>)
 801540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015410:	08015441 	.word	0x08015441
 8015414:	080154bd 	.word	0x080154bd
 8015418:	080154af 	.word	0x080154af
 801541c:	080154af 	.word	0x080154af
 8015420:	080154af 	.word	0x080154af
 8015424:	080154af 	.word	0x080154af
 8015428:	080154af 	.word	0x080154af
 801542c:	080154af 	.word	0x080154af
 8015430:	080154af 	.word	0x080154af
 8015434:	080154af 	.word	0x080154af
 8015438:	0801546b 	.word	0x0801546b
 801543c:	08015495 	.word	0x08015495
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015446:	b2db      	uxtb	r3, r3
 8015448:	2b03      	cmp	r3, #3
 801544a:	d107      	bne.n	801545c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801544c:	f107 030a 	add.w	r3, r7, #10
 8015450:	2202      	movs	r2, #2
 8015452:	4619      	mov	r1, r3
 8015454:	6878      	ldr	r0, [r7, #4]
 8015456:	f001 fd33 	bl	8016ec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801545a:	e032      	b.n	80154c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801545c:	6839      	ldr	r1, [r7, #0]
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	f001 fcbd 	bl	8016dde <USBD_CtlError>
            ret = USBD_FAIL;
 8015464:	2303      	movs	r3, #3
 8015466:	75fb      	strb	r3, [r7, #23]
          break;
 8015468:	e02b      	b.n	80154c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015470:	b2db      	uxtb	r3, r3
 8015472:	2b03      	cmp	r3, #3
 8015474:	d107      	bne.n	8015486 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015476:	f107 030d 	add.w	r3, r7, #13
 801547a:	2201      	movs	r2, #1
 801547c:	4619      	mov	r1, r3
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f001 fd1e 	bl	8016ec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015484:	e01d      	b.n	80154c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015486:	6839      	ldr	r1, [r7, #0]
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	f001 fca8 	bl	8016dde <USBD_CtlError>
            ret = USBD_FAIL;
 801548e:	2303      	movs	r3, #3
 8015490:	75fb      	strb	r3, [r7, #23]
          break;
 8015492:	e016      	b.n	80154c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801549a:	b2db      	uxtb	r3, r3
 801549c:	2b03      	cmp	r3, #3
 801549e:	d00f      	beq.n	80154c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80154a0:	6839      	ldr	r1, [r7, #0]
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f001 fc9b 	bl	8016dde <USBD_CtlError>
            ret = USBD_FAIL;
 80154a8:	2303      	movs	r3, #3
 80154aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80154ac:	e008      	b.n	80154c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80154ae:	6839      	ldr	r1, [r7, #0]
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	f001 fc94 	bl	8016dde <USBD_CtlError>
          ret = USBD_FAIL;
 80154b6:	2303      	movs	r3, #3
 80154b8:	75fb      	strb	r3, [r7, #23]
          break;
 80154ba:	e002      	b.n	80154c2 <USBD_CDC_Setup+0x19e>
          break;
 80154bc:	bf00      	nop
 80154be:	e008      	b.n	80154d2 <USBD_CDC_Setup+0x1ae>
          break;
 80154c0:	bf00      	nop
      }
      break;
 80154c2:	e006      	b.n	80154d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80154c4:	6839      	ldr	r1, [r7, #0]
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f001 fc89 	bl	8016dde <USBD_CtlError>
      ret = USBD_FAIL;
 80154cc:	2303      	movs	r3, #3
 80154ce:	75fb      	strb	r3, [r7, #23]
      break;
 80154d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80154d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80154d4:	4618      	mov	r0, r3
 80154d6:	3718      	adds	r7, #24
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}

080154dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b084      	sub	sp, #16
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
 80154e4:	460b      	mov	r3, r1
 80154e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80154ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	32b0      	adds	r2, #176	; 0xb0
 80154fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d101      	bne.n	8015506 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015502:	2303      	movs	r3, #3
 8015504:	e065      	b.n	80155d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	32b0      	adds	r2, #176	; 0xb0
 8015510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015514:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015516:	78fb      	ldrb	r3, [r7, #3]
 8015518:	f003 020f 	and.w	r2, r3, #15
 801551c:	6879      	ldr	r1, [r7, #4]
 801551e:	4613      	mov	r3, r2
 8015520:	009b      	lsls	r3, r3, #2
 8015522:	4413      	add	r3, r2
 8015524:	009b      	lsls	r3, r3, #2
 8015526:	440b      	add	r3, r1
 8015528:	3318      	adds	r3, #24
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d02f      	beq.n	8015590 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015530:	78fb      	ldrb	r3, [r7, #3]
 8015532:	f003 020f 	and.w	r2, r3, #15
 8015536:	6879      	ldr	r1, [r7, #4]
 8015538:	4613      	mov	r3, r2
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	4413      	add	r3, r2
 801553e:	009b      	lsls	r3, r3, #2
 8015540:	440b      	add	r3, r1
 8015542:	3318      	adds	r3, #24
 8015544:	681a      	ldr	r2, [r3, #0]
 8015546:	78fb      	ldrb	r3, [r7, #3]
 8015548:	f003 010f 	and.w	r1, r3, #15
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	460b      	mov	r3, r1
 8015550:	00db      	lsls	r3, r3, #3
 8015552:	440b      	add	r3, r1
 8015554:	009b      	lsls	r3, r3, #2
 8015556:	4403      	add	r3, r0
 8015558:	3344      	adds	r3, #68	; 0x44
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	fbb2 f1f3 	udiv	r1, r2, r3
 8015560:	fb01 f303 	mul.w	r3, r1, r3
 8015564:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015566:	2b00      	cmp	r3, #0
 8015568:	d112      	bne.n	8015590 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801556a:	78fb      	ldrb	r3, [r7, #3]
 801556c:	f003 020f 	and.w	r2, r3, #15
 8015570:	6879      	ldr	r1, [r7, #4]
 8015572:	4613      	mov	r3, r2
 8015574:	009b      	lsls	r3, r3, #2
 8015576:	4413      	add	r3, r2
 8015578:	009b      	lsls	r3, r3, #2
 801557a:	440b      	add	r3, r1
 801557c:	3318      	adds	r3, #24
 801557e:	2200      	movs	r2, #0
 8015580:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015582:	78f9      	ldrb	r1, [r7, #3]
 8015584:	2300      	movs	r3, #0
 8015586:	2200      	movs	r2, #0
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f005 f978 	bl	801a87e <USBD_LL_Transmit>
 801558e:	e01f      	b.n	80155d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	2200      	movs	r2, #0
 8015594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801559e:	687a      	ldr	r2, [r7, #4]
 80155a0:	33b0      	adds	r3, #176	; 0xb0
 80155a2:	009b      	lsls	r3, r3, #2
 80155a4:	4413      	add	r3, r2
 80155a6:	685b      	ldr	r3, [r3, #4]
 80155a8:	691b      	ldr	r3, [r3, #16]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d010      	beq.n	80155d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80155b4:	687a      	ldr	r2, [r7, #4]
 80155b6:	33b0      	adds	r3, #176	; 0xb0
 80155b8:	009b      	lsls	r3, r3, #2
 80155ba:	4413      	add	r3, r2
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	691b      	ldr	r3, [r3, #16]
 80155c0:	68ba      	ldr	r2, [r7, #8]
 80155c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80155c6:	68ba      	ldr	r2, [r7, #8]
 80155c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80155cc:	78fa      	ldrb	r2, [r7, #3]
 80155ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3710      	adds	r7, #16
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80155da:	b580      	push	{r7, lr}
 80155dc:	b084      	sub	sp, #16
 80155de:	af00      	add	r7, sp, #0
 80155e0:	6078      	str	r0, [r7, #4]
 80155e2:	460b      	mov	r3, r1
 80155e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	32b0      	adds	r2, #176	; 0xb0
 80155f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	32b0      	adds	r2, #176	; 0xb0
 8015600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d101      	bne.n	801560c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015608:	2303      	movs	r3, #3
 801560a:	e01a      	b.n	8015642 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801560c:	78fb      	ldrb	r3, [r7, #3]
 801560e:	4619      	mov	r1, r3
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f005 f976 	bl	801a902 <USBD_LL_GetRxDataSize>
 8015616:	4602      	mov	r2, r0
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015624:	687a      	ldr	r2, [r7, #4]
 8015626:	33b0      	adds	r3, #176	; 0xb0
 8015628:	009b      	lsls	r3, r3, #2
 801562a:	4413      	add	r3, r2
 801562c:	685b      	ldr	r3, [r3, #4]
 801562e:	68db      	ldr	r3, [r3, #12]
 8015630:	68fa      	ldr	r2, [r7, #12]
 8015632:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015636:	68fa      	ldr	r2, [r7, #12]
 8015638:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801563c:	4611      	mov	r1, r2
 801563e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015640:	2300      	movs	r3, #0
}
 8015642:	4618      	mov	r0, r3
 8015644:	3710      	adds	r7, #16
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}

0801564a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801564a:	b580      	push	{r7, lr}
 801564c:	b084      	sub	sp, #16
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	32b0      	adds	r2, #176	; 0xb0
 801565c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015660:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d101      	bne.n	801566c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015668:	2303      	movs	r3, #3
 801566a:	e025      	b.n	80156b8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015672:	687a      	ldr	r2, [r7, #4]
 8015674:	33b0      	adds	r3, #176	; 0xb0
 8015676:	009b      	lsls	r3, r3, #2
 8015678:	4413      	add	r3, r2
 801567a:	685b      	ldr	r3, [r3, #4]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d01a      	beq.n	80156b6 <USBD_CDC_EP0_RxReady+0x6c>
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015686:	2bff      	cmp	r3, #255	; 0xff
 8015688:	d015      	beq.n	80156b6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015690:	687a      	ldr	r2, [r7, #4]
 8015692:	33b0      	adds	r3, #176	; 0xb0
 8015694:	009b      	lsls	r3, r3, #2
 8015696:	4413      	add	r3, r2
 8015698:	685b      	ldr	r3, [r3, #4]
 801569a:	689b      	ldr	r3, [r3, #8]
 801569c:	68fa      	ldr	r2, [r7, #12]
 801569e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80156a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80156a4:	68fa      	ldr	r2, [r7, #12]
 80156a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80156aa:	b292      	uxth	r2, r2
 80156ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	22ff      	movs	r2, #255	; 0xff
 80156b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80156b6:	2300      	movs	r3, #0
}
 80156b8:	4618      	mov	r0, r3
 80156ba:	3710      	adds	r7, #16
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}

080156c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b086      	sub	sp, #24
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80156c8:	2182      	movs	r1, #130	; 0x82
 80156ca:	4818      	ldr	r0, [pc, #96]	; (801572c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80156cc:	f000 fd4f 	bl	801616e <USBD_GetEpDesc>
 80156d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80156d2:	2101      	movs	r1, #1
 80156d4:	4815      	ldr	r0, [pc, #84]	; (801572c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80156d6:	f000 fd4a 	bl	801616e <USBD_GetEpDesc>
 80156da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80156dc:	2181      	movs	r1, #129	; 0x81
 80156de:	4813      	ldr	r0, [pc, #76]	; (801572c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80156e0:	f000 fd45 	bl	801616e <USBD_GetEpDesc>
 80156e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d002      	beq.n	80156f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80156ec:	697b      	ldr	r3, [r7, #20]
 80156ee:	2210      	movs	r2, #16
 80156f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d006      	beq.n	8015706 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	2200      	movs	r2, #0
 80156fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015700:	711a      	strb	r2, [r3, #4]
 8015702:	2200      	movs	r2, #0
 8015704:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d006      	beq.n	801571a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	2200      	movs	r2, #0
 8015710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015714:	711a      	strb	r2, [r3, #4]
 8015716:	2200      	movs	r2, #0
 8015718:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	2243      	movs	r2, #67	; 0x43
 801571e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015720:	4b02      	ldr	r3, [pc, #8]	; (801572c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015722:	4618      	mov	r0, r3
 8015724:	3718      	adds	r7, #24
 8015726:	46bd      	mov	sp, r7
 8015728:	bd80      	pop	{r7, pc}
 801572a:	bf00      	nop
 801572c:	24000054 	.word	0x24000054

08015730 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b086      	sub	sp, #24
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015738:	2182      	movs	r1, #130	; 0x82
 801573a:	4818      	ldr	r0, [pc, #96]	; (801579c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801573c:	f000 fd17 	bl	801616e <USBD_GetEpDesc>
 8015740:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015742:	2101      	movs	r1, #1
 8015744:	4815      	ldr	r0, [pc, #84]	; (801579c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015746:	f000 fd12 	bl	801616e <USBD_GetEpDesc>
 801574a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801574c:	2181      	movs	r1, #129	; 0x81
 801574e:	4813      	ldr	r0, [pc, #76]	; (801579c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015750:	f000 fd0d 	bl	801616e <USBD_GetEpDesc>
 8015754:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d002      	beq.n	8015762 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	2210      	movs	r2, #16
 8015760:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d006      	beq.n	8015776 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	2200      	movs	r2, #0
 801576c:	711a      	strb	r2, [r3, #4]
 801576e:	2200      	movs	r2, #0
 8015770:	f042 0202 	orr.w	r2, r2, #2
 8015774:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d006      	beq.n	801578a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	2200      	movs	r2, #0
 8015780:	711a      	strb	r2, [r3, #4]
 8015782:	2200      	movs	r2, #0
 8015784:	f042 0202 	orr.w	r2, r2, #2
 8015788:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	2243      	movs	r2, #67	; 0x43
 801578e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015790:	4b02      	ldr	r3, [pc, #8]	; (801579c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015792:	4618      	mov	r0, r3
 8015794:	3718      	adds	r7, #24
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}
 801579a:	bf00      	nop
 801579c:	24000054 	.word	0x24000054

080157a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b086      	sub	sp, #24
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80157a8:	2182      	movs	r1, #130	; 0x82
 80157aa:	4818      	ldr	r0, [pc, #96]	; (801580c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80157ac:	f000 fcdf 	bl	801616e <USBD_GetEpDesc>
 80157b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80157b2:	2101      	movs	r1, #1
 80157b4:	4815      	ldr	r0, [pc, #84]	; (801580c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80157b6:	f000 fcda 	bl	801616e <USBD_GetEpDesc>
 80157ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80157bc:	2181      	movs	r1, #129	; 0x81
 80157be:	4813      	ldr	r0, [pc, #76]	; (801580c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80157c0:	f000 fcd5 	bl	801616e <USBD_GetEpDesc>
 80157c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80157c6:	697b      	ldr	r3, [r7, #20]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d002      	beq.n	80157d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	2210      	movs	r2, #16
 80157d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80157d2:	693b      	ldr	r3, [r7, #16]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d006      	beq.n	80157e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	2200      	movs	r2, #0
 80157dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80157e0:	711a      	strb	r2, [r3, #4]
 80157e2:	2200      	movs	r2, #0
 80157e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d006      	beq.n	80157fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2200      	movs	r2, #0
 80157f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80157f4:	711a      	strb	r2, [r3, #4]
 80157f6:	2200      	movs	r2, #0
 80157f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	2243      	movs	r2, #67	; 0x43
 80157fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015800:	4b02      	ldr	r3, [pc, #8]	; (801580c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015802:	4618      	mov	r0, r3
 8015804:	3718      	adds	r7, #24
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}
 801580a:	bf00      	nop
 801580c:	24000054 	.word	0x24000054

08015810 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015810:	b480      	push	{r7}
 8015812:	b083      	sub	sp, #12
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	220a      	movs	r2, #10
 801581c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801581e:	4b03      	ldr	r3, [pc, #12]	; (801582c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015820:	4618      	mov	r0, r3
 8015822:	370c      	adds	r7, #12
 8015824:	46bd      	mov	sp, r7
 8015826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582a:	4770      	bx	lr
 801582c:	24000010 	.word	0x24000010

08015830 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015830:	b480      	push	{r7}
 8015832:	b083      	sub	sp, #12
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801583a:	683b      	ldr	r3, [r7, #0]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d101      	bne.n	8015844 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015840:	2303      	movs	r3, #3
 8015842:	e009      	b.n	8015858 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801584a:	687a      	ldr	r2, [r7, #4]
 801584c:	33b0      	adds	r3, #176	; 0xb0
 801584e:	009b      	lsls	r3, r3, #2
 8015850:	4413      	add	r3, r2
 8015852:	683a      	ldr	r2, [r7, #0]
 8015854:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015856:	2300      	movs	r3, #0
}
 8015858:	4618      	mov	r0, r3
 801585a:	370c      	adds	r7, #12
 801585c:	46bd      	mov	sp, r7
 801585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015862:	4770      	bx	lr

08015864 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015864:	b480      	push	{r7}
 8015866:	b087      	sub	sp, #28
 8015868:	af00      	add	r7, sp, #0
 801586a:	60f8      	str	r0, [r7, #12]
 801586c:	60b9      	str	r1, [r7, #8]
 801586e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	32b0      	adds	r2, #176	; 0xb0
 801587a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801587e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d101      	bne.n	801588a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015886:	2303      	movs	r3, #3
 8015888:	e008      	b.n	801589c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	68ba      	ldr	r2, [r7, #8]
 801588e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015892:	697b      	ldr	r3, [r7, #20]
 8015894:	687a      	ldr	r2, [r7, #4]
 8015896:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801589a:	2300      	movs	r3, #0
}
 801589c:	4618      	mov	r0, r3
 801589e:	371c      	adds	r7, #28
 80158a0:	46bd      	mov	sp, r7
 80158a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a6:	4770      	bx	lr

080158a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80158a8:	b480      	push	{r7}
 80158aa:	b085      	sub	sp, #20
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
 80158b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	32b0      	adds	r2, #176	; 0xb0
 80158bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d101      	bne.n	80158cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80158c8:	2303      	movs	r3, #3
 80158ca:	e004      	b.n	80158d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	683a      	ldr	r2, [r7, #0]
 80158d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80158d4:	2300      	movs	r3, #0
}
 80158d6:	4618      	mov	r0, r3
 80158d8:	3714      	adds	r7, #20
 80158da:	46bd      	mov	sp, r7
 80158dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e0:	4770      	bx	lr
	...

080158e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b084      	sub	sp, #16
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	32b0      	adds	r2, #176	; 0xb0
 80158f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80158fc:	2301      	movs	r3, #1
 80158fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d101      	bne.n	801590a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015906:	2303      	movs	r3, #3
 8015908:	e025      	b.n	8015956 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801590a:	68bb      	ldr	r3, [r7, #8]
 801590c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015910:	2b00      	cmp	r3, #0
 8015912:	d11f      	bne.n	8015954 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	2201      	movs	r2, #1
 8015918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801591c:	4b10      	ldr	r3, [pc, #64]	; (8015960 <USBD_CDC_TransmitPacket+0x7c>)
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	f003 020f 	and.w	r2, r3, #15
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	4613      	mov	r3, r2
 801592e:	009b      	lsls	r3, r3, #2
 8015930:	4413      	add	r3, r2
 8015932:	009b      	lsls	r3, r3, #2
 8015934:	4403      	add	r3, r0
 8015936:	3318      	adds	r3, #24
 8015938:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801593a:	4b09      	ldr	r3, [pc, #36]	; (8015960 <USBD_CDC_TransmitPacket+0x7c>)
 801593c:	7819      	ldrb	r1, [r3, #0]
 801593e:	68bb      	ldr	r3, [r7, #8]
 8015940:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f004 ff97 	bl	801a87e <USBD_LL_Transmit>

    ret = USBD_OK;
 8015950:	2300      	movs	r3, #0
 8015952:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015954:	7bfb      	ldrb	r3, [r7, #15]
}
 8015956:	4618      	mov	r0, r3
 8015958:	3710      	adds	r7, #16
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
 801595e:	bf00      	nop
 8015960:	24000097 	.word	0x24000097

08015964 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b084      	sub	sp, #16
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	32b0      	adds	r2, #176	; 0xb0
 8015976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801597a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	32b0      	adds	r2, #176	; 0xb0
 8015986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d101      	bne.n	8015992 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801598e:	2303      	movs	r3, #3
 8015990:	e018      	b.n	80159c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	7c1b      	ldrb	r3, [r3, #16]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d10a      	bne.n	80159b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801599a:	4b0c      	ldr	r3, [pc, #48]	; (80159cc <USBD_CDC_ReceivePacket+0x68>)
 801599c:	7819      	ldrb	r1, [r3, #0]
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80159a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80159a8:	6878      	ldr	r0, [r7, #4]
 80159aa:	f004 ff89 	bl	801a8c0 <USBD_LL_PrepareReceive>
 80159ae:	e008      	b.n	80159c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80159b0:	4b06      	ldr	r3, [pc, #24]	; (80159cc <USBD_CDC_ReceivePacket+0x68>)
 80159b2:	7819      	ldrb	r1, [r3, #0]
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80159ba:	2340      	movs	r3, #64	; 0x40
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f004 ff7f 	bl	801a8c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80159c2:	2300      	movs	r3, #0
}
 80159c4:	4618      	mov	r0, r3
 80159c6:	3710      	adds	r7, #16
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}
 80159cc:	24000098 	.word	0x24000098

080159d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b086      	sub	sp, #24
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	60f8      	str	r0, [r7, #12]
 80159d8:	60b9      	str	r1, [r7, #8]
 80159da:	4613      	mov	r3, r2
 80159dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d101      	bne.n	80159e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80159e4:	2303      	movs	r3, #3
 80159e6:	e01f      	b.n	8015a28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	2200      	movs	r2, #0
 80159ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	2200      	movs	r2, #0
 80159f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	2200      	movs	r2, #0
 80159fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d003      	beq.n	8015a0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	68ba      	ldr	r2, [r7, #8]
 8015a0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	2201      	movs	r2, #1
 8015a12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	79fa      	ldrb	r2, [r7, #7]
 8015a1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015a1c:	68f8      	ldr	r0, [r7, #12]
 8015a1e:	f004 fdf3 	bl	801a608 <USBD_LL_Init>
 8015a22:	4603      	mov	r3, r0
 8015a24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	3718      	adds	r7, #24
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}

08015a30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b084      	sub	sp, #16
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
 8015a38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d101      	bne.n	8015a48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015a44:	2303      	movs	r3, #3
 8015a46:	e025      	b.n	8015a94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	683a      	ldr	r2, [r7, #0]
 8015a4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	32ae      	adds	r2, #174	; 0xae
 8015a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d00f      	beq.n	8015a84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	32ae      	adds	r2, #174	; 0xae
 8015a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a74:	f107 020e 	add.w	r2, r7, #14
 8015a78:	4610      	mov	r0, r2
 8015a7a:	4798      	blx	r3
 8015a7c:	4602      	mov	r2, r0
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015a8a:	1c5a      	adds	r2, r3, #1
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015a92:	2300      	movs	r3, #0
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3710      	adds	r7, #16
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b082      	sub	sp, #8
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f004 fe01 	bl	801a6ac <USBD_LL_Start>
 8015aaa:	4603      	mov	r3, r0
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}

08015ab4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015ab4:	b480      	push	{r7}
 8015ab6:	b083      	sub	sp, #12
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015abc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	370c      	adds	r7, #12
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac8:	4770      	bx	lr

08015aca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015aca:	b580      	push	{r7, lr}
 8015acc:	b084      	sub	sp, #16
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	6078      	str	r0, [r7, #4]
 8015ad2:	460b      	mov	r3, r1
 8015ad4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d009      	beq.n	8015af8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	78fa      	ldrb	r2, [r7, #3]
 8015aee:	4611      	mov	r1, r2
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	4798      	blx	r3
 8015af4:	4603      	mov	r3, r0
 8015af6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015afa:	4618      	mov	r0, r3
 8015afc:	3710      	adds	r7, #16
 8015afe:	46bd      	mov	sp, r7
 8015b00:	bd80      	pop	{r7, pc}

08015b02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b02:	b580      	push	{r7, lr}
 8015b04:	b084      	sub	sp, #16
 8015b06:	af00      	add	r7, sp, #0
 8015b08:	6078      	str	r0, [r7, #4]
 8015b0a:	460b      	mov	r3, r1
 8015b0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b18:	685b      	ldr	r3, [r3, #4]
 8015b1a:	78fa      	ldrb	r2, [r7, #3]
 8015b1c:	4611      	mov	r1, r2
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	4798      	blx	r3
 8015b22:	4603      	mov	r3, r0
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d001      	beq.n	8015b2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015b28:	2303      	movs	r3, #3
 8015b2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3710      	adds	r7, #16
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}

08015b36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b084      	sub	sp, #16
 8015b3a:	af00      	add	r7, sp, #0
 8015b3c:	6078      	str	r0, [r7, #4]
 8015b3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015b46:	6839      	ldr	r1, [r7, #0]
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f001 f90e 	bl	8016d6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	2201      	movs	r2, #1
 8015b52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015b5c:	461a      	mov	r2, r3
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015b6a:	f003 031f 	and.w	r3, r3, #31
 8015b6e:	2b02      	cmp	r3, #2
 8015b70:	d01a      	beq.n	8015ba8 <USBD_LL_SetupStage+0x72>
 8015b72:	2b02      	cmp	r3, #2
 8015b74:	d822      	bhi.n	8015bbc <USBD_LL_SetupStage+0x86>
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d002      	beq.n	8015b80 <USBD_LL_SetupStage+0x4a>
 8015b7a:	2b01      	cmp	r3, #1
 8015b7c:	d00a      	beq.n	8015b94 <USBD_LL_SetupStage+0x5e>
 8015b7e:	e01d      	b.n	8015bbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015b86:	4619      	mov	r1, r3
 8015b88:	6878      	ldr	r0, [r7, #4]
 8015b8a:	f000 fb65 	bl	8016258 <USBD_StdDevReq>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	73fb      	strb	r3, [r7, #15]
      break;
 8015b92:	e020      	b.n	8015bd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015b9a:	4619      	mov	r1, r3
 8015b9c:	6878      	ldr	r0, [r7, #4]
 8015b9e:	f000 fbcd 	bl	801633c <USBD_StdItfReq>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8015ba6:	e016      	b.n	8015bd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015bae:	4619      	mov	r1, r3
 8015bb0:	6878      	ldr	r0, [r7, #4]
 8015bb2:	f000 fc2f 	bl	8016414 <USBD_StdEPReq>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8015bba:	e00c      	b.n	8015bd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015bc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015bc6:	b2db      	uxtb	r3, r3
 8015bc8:	4619      	mov	r1, r3
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f004 fdce 	bl	801a76c <USBD_LL_StallEP>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8015bd4:	bf00      	nop
  }

  return ret;
 8015bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3710      	adds	r7, #16
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}

08015be0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b086      	sub	sp, #24
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	60f8      	str	r0, [r7, #12]
 8015be8:	460b      	mov	r3, r1
 8015bea:	607a      	str	r2, [r7, #4]
 8015bec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015bf2:	7afb      	ldrb	r3, [r7, #11]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d16e      	bne.n	8015cd6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015bfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015c06:	2b03      	cmp	r3, #3
 8015c08:	f040 8098 	bne.w	8015d3c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015c0c:	693b      	ldr	r3, [r7, #16]
 8015c0e:	689a      	ldr	r2, [r3, #8]
 8015c10:	693b      	ldr	r3, [r7, #16]
 8015c12:	68db      	ldr	r3, [r3, #12]
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d913      	bls.n	8015c40 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015c18:	693b      	ldr	r3, [r7, #16]
 8015c1a:	689a      	ldr	r2, [r3, #8]
 8015c1c:	693b      	ldr	r3, [r7, #16]
 8015c1e:	68db      	ldr	r3, [r3, #12]
 8015c20:	1ad2      	subs	r2, r2, r3
 8015c22:	693b      	ldr	r3, [r7, #16]
 8015c24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	68da      	ldr	r2, [r3, #12]
 8015c2a:	693b      	ldr	r3, [r7, #16]
 8015c2c:	689b      	ldr	r3, [r3, #8]
 8015c2e:	4293      	cmp	r3, r2
 8015c30:	bf28      	it	cs
 8015c32:	4613      	movcs	r3, r2
 8015c34:	461a      	mov	r2, r3
 8015c36:	6879      	ldr	r1, [r7, #4]
 8015c38:	68f8      	ldr	r0, [r7, #12]
 8015c3a:	f001 f98a 	bl	8016f52 <USBD_CtlContinueRx>
 8015c3e:	e07d      	b.n	8015d3c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015c46:	f003 031f 	and.w	r3, r3, #31
 8015c4a:	2b02      	cmp	r3, #2
 8015c4c:	d014      	beq.n	8015c78 <USBD_LL_DataOutStage+0x98>
 8015c4e:	2b02      	cmp	r3, #2
 8015c50:	d81d      	bhi.n	8015c8e <USBD_LL_DataOutStage+0xae>
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d002      	beq.n	8015c5c <USBD_LL_DataOutStage+0x7c>
 8015c56:	2b01      	cmp	r3, #1
 8015c58:	d003      	beq.n	8015c62 <USBD_LL_DataOutStage+0x82>
 8015c5a:	e018      	b.n	8015c8e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	75bb      	strb	r3, [r7, #22]
            break;
 8015c60:	e018      	b.n	8015c94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015c68:	b2db      	uxtb	r3, r3
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	68f8      	ldr	r0, [r7, #12]
 8015c6e:	f000 fa64 	bl	801613a <USBD_CoreFindIF>
 8015c72:	4603      	mov	r3, r0
 8015c74:	75bb      	strb	r3, [r7, #22]
            break;
 8015c76:	e00d      	b.n	8015c94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015c7e:	b2db      	uxtb	r3, r3
 8015c80:	4619      	mov	r1, r3
 8015c82:	68f8      	ldr	r0, [r7, #12]
 8015c84:	f000 fa66 	bl	8016154 <USBD_CoreFindEP>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	75bb      	strb	r3, [r7, #22]
            break;
 8015c8c:	e002      	b.n	8015c94 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	75bb      	strb	r3, [r7, #22]
            break;
 8015c92:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015c94:	7dbb      	ldrb	r3, [r7, #22]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d119      	bne.n	8015cce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ca0:	b2db      	uxtb	r3, r3
 8015ca2:	2b03      	cmp	r3, #3
 8015ca4:	d113      	bne.n	8015cce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015ca6:	7dba      	ldrb	r2, [r7, #22]
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	32ae      	adds	r2, #174	; 0xae
 8015cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb0:	691b      	ldr	r3, [r3, #16]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d00b      	beq.n	8015cce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015cb6:	7dba      	ldrb	r2, [r7, #22]
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015cbe:	7dba      	ldrb	r2, [r7, #22]
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	32ae      	adds	r2, #174	; 0xae
 8015cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cc8:	691b      	ldr	r3, [r3, #16]
 8015cca:	68f8      	ldr	r0, [r7, #12]
 8015ccc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015cce:	68f8      	ldr	r0, [r7, #12]
 8015cd0:	f001 f950 	bl	8016f74 <USBD_CtlSendStatus>
 8015cd4:	e032      	b.n	8015d3c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015cd6:	7afb      	ldrb	r3, [r7, #11]
 8015cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015cdc:	b2db      	uxtb	r3, r3
 8015cde:	4619      	mov	r1, r3
 8015ce0:	68f8      	ldr	r0, [r7, #12]
 8015ce2:	f000 fa37 	bl	8016154 <USBD_CoreFindEP>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015cea:	7dbb      	ldrb	r3, [r7, #22]
 8015cec:	2bff      	cmp	r3, #255	; 0xff
 8015cee:	d025      	beq.n	8015d3c <USBD_LL_DataOutStage+0x15c>
 8015cf0:	7dbb      	ldrb	r3, [r7, #22]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d122      	bne.n	8015d3c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cfc:	b2db      	uxtb	r3, r3
 8015cfe:	2b03      	cmp	r3, #3
 8015d00:	d117      	bne.n	8015d32 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015d02:	7dba      	ldrb	r2, [r7, #22]
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	32ae      	adds	r2, #174	; 0xae
 8015d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d0c:	699b      	ldr	r3, [r3, #24]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d00f      	beq.n	8015d32 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015d12:	7dba      	ldrb	r2, [r7, #22]
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015d1a:	7dba      	ldrb	r2, [r7, #22]
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	32ae      	adds	r2, #174	; 0xae
 8015d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d24:	699b      	ldr	r3, [r3, #24]
 8015d26:	7afa      	ldrb	r2, [r7, #11]
 8015d28:	4611      	mov	r1, r2
 8015d2a:	68f8      	ldr	r0, [r7, #12]
 8015d2c:	4798      	blx	r3
 8015d2e:	4603      	mov	r3, r0
 8015d30:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015d32:	7dfb      	ldrb	r3, [r7, #23]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d001      	beq.n	8015d3c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015d38:	7dfb      	ldrb	r3, [r7, #23]
 8015d3a:	e000      	b.n	8015d3e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015d3c:	2300      	movs	r3, #0
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3718      	adds	r7, #24
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}

08015d46 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015d46:	b580      	push	{r7, lr}
 8015d48:	b086      	sub	sp, #24
 8015d4a:	af00      	add	r7, sp, #0
 8015d4c:	60f8      	str	r0, [r7, #12]
 8015d4e:	460b      	mov	r3, r1
 8015d50:	607a      	str	r2, [r7, #4]
 8015d52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015d54:	7afb      	ldrb	r3, [r7, #11]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d16f      	bne.n	8015e3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	3314      	adds	r3, #20
 8015d5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015d66:	2b02      	cmp	r3, #2
 8015d68:	d15a      	bne.n	8015e20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015d6a:	693b      	ldr	r3, [r7, #16]
 8015d6c:	689a      	ldr	r2, [r3, #8]
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	68db      	ldr	r3, [r3, #12]
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d914      	bls.n	8015da0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	689a      	ldr	r2, [r3, #8]
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	68db      	ldr	r3, [r3, #12]
 8015d7e:	1ad2      	subs	r2, r2, r3
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015d84:	693b      	ldr	r3, [r7, #16]
 8015d86:	689b      	ldr	r3, [r3, #8]
 8015d88:	461a      	mov	r2, r3
 8015d8a:	6879      	ldr	r1, [r7, #4]
 8015d8c:	68f8      	ldr	r0, [r7, #12]
 8015d8e:	f001 f8b2 	bl	8016ef6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d92:	2300      	movs	r3, #0
 8015d94:	2200      	movs	r2, #0
 8015d96:	2100      	movs	r1, #0
 8015d98:	68f8      	ldr	r0, [r7, #12]
 8015d9a:	f004 fd91 	bl	801a8c0 <USBD_LL_PrepareReceive>
 8015d9e:	e03f      	b.n	8015e20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015da0:	693b      	ldr	r3, [r7, #16]
 8015da2:	68da      	ldr	r2, [r3, #12]
 8015da4:	693b      	ldr	r3, [r7, #16]
 8015da6:	689b      	ldr	r3, [r3, #8]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d11c      	bne.n	8015de6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	685a      	ldr	r2, [r3, #4]
 8015db0:	693b      	ldr	r3, [r7, #16]
 8015db2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015db4:	429a      	cmp	r2, r3
 8015db6:	d316      	bcc.n	8015de6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015db8:	693b      	ldr	r3, [r7, #16]
 8015dba:	685a      	ldr	r2, [r3, #4]
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	d20f      	bcs.n	8015de6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	2100      	movs	r1, #0
 8015dca:	68f8      	ldr	r0, [r7, #12]
 8015dcc:	f001 f893 	bl	8016ef6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015dd8:	2300      	movs	r3, #0
 8015dda:	2200      	movs	r2, #0
 8015ddc:	2100      	movs	r1, #0
 8015dde:	68f8      	ldr	r0, [r7, #12]
 8015de0:	f004 fd6e 	bl	801a8c0 <USBD_LL_PrepareReceive>
 8015de4:	e01c      	b.n	8015e20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dec:	b2db      	uxtb	r3, r3
 8015dee:	2b03      	cmp	r3, #3
 8015df0:	d10f      	bne.n	8015e12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015df8:	68db      	ldr	r3, [r3, #12]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d009      	beq.n	8015e12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2200      	movs	r2, #0
 8015e02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e0c:	68db      	ldr	r3, [r3, #12]
 8015e0e:	68f8      	ldr	r0, [r7, #12]
 8015e10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e12:	2180      	movs	r1, #128	; 0x80
 8015e14:	68f8      	ldr	r0, [r7, #12]
 8015e16:	f004 fca9 	bl	801a76c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015e1a:	68f8      	ldr	r0, [r7, #12]
 8015e1c:	f001 f8bd 	bl	8016f9a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d03a      	beq.n	8015ea0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015e2a:	68f8      	ldr	r0, [r7, #12]
 8015e2c:	f7ff fe42 	bl	8015ab4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	2200      	movs	r2, #0
 8015e34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015e38:	e032      	b.n	8015ea0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015e3a:	7afb      	ldrb	r3, [r7, #11]
 8015e3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015e40:	b2db      	uxtb	r3, r3
 8015e42:	4619      	mov	r1, r3
 8015e44:	68f8      	ldr	r0, [r7, #12]
 8015e46:	f000 f985 	bl	8016154 <USBD_CoreFindEP>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015e4e:	7dfb      	ldrb	r3, [r7, #23]
 8015e50:	2bff      	cmp	r3, #255	; 0xff
 8015e52:	d025      	beq.n	8015ea0 <USBD_LL_DataInStage+0x15a>
 8015e54:	7dfb      	ldrb	r3, [r7, #23]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d122      	bne.n	8015ea0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	2b03      	cmp	r3, #3
 8015e64:	d11c      	bne.n	8015ea0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015e66:	7dfa      	ldrb	r2, [r7, #23]
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	32ae      	adds	r2, #174	; 0xae
 8015e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e70:	695b      	ldr	r3, [r3, #20]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d014      	beq.n	8015ea0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015e76:	7dfa      	ldrb	r2, [r7, #23]
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015e7e:	7dfa      	ldrb	r2, [r7, #23]
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	32ae      	adds	r2, #174	; 0xae
 8015e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e88:	695b      	ldr	r3, [r3, #20]
 8015e8a:	7afa      	ldrb	r2, [r7, #11]
 8015e8c:	4611      	mov	r1, r2
 8015e8e:	68f8      	ldr	r0, [r7, #12]
 8015e90:	4798      	blx	r3
 8015e92:	4603      	mov	r3, r0
 8015e94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015e96:	7dbb      	ldrb	r3, [r7, #22]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d001      	beq.n	8015ea0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015e9c:	7dbb      	ldrb	r3, [r7, #22]
 8015e9e:	e000      	b.n	8015ea2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015ea0:	2300      	movs	r3, #0
}
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	3718      	adds	r7, #24
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd80      	pop	{r7, pc}

08015eaa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015eaa:	b580      	push	{r7, lr}
 8015eac:	b084      	sub	sp, #16
 8015eae:	af00      	add	r7, sp, #0
 8015eb0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2201      	movs	r2, #1
 8015eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2200      	movs	r2, #0
 8015eca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	2200      	movs	r2, #0
 8015ed0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d014      	beq.n	8015f10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015eec:	685b      	ldr	r3, [r3, #4]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d00e      	beq.n	8015f10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ef8:	685b      	ldr	r3, [r3, #4]
 8015efa:	687a      	ldr	r2, [r7, #4]
 8015efc:	6852      	ldr	r2, [r2, #4]
 8015efe:	b2d2      	uxtb	r2, r2
 8015f00:	4611      	mov	r1, r2
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	4798      	blx	r3
 8015f06:	4603      	mov	r3, r0
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d001      	beq.n	8015f10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015f0c:	2303      	movs	r3, #3
 8015f0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015f10:	2340      	movs	r3, #64	; 0x40
 8015f12:	2200      	movs	r2, #0
 8015f14:	2100      	movs	r1, #0
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f004 fbe3 	bl	801a6e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	2201      	movs	r2, #1
 8015f20:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2240      	movs	r2, #64	; 0x40
 8015f28:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015f2c:	2340      	movs	r3, #64	; 0x40
 8015f2e:	2200      	movs	r2, #0
 8015f30:	2180      	movs	r1, #128	; 0x80
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f004 fbd5 	bl	801a6e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	2201      	movs	r2, #1
 8015f3c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2240      	movs	r2, #64	; 0x40
 8015f42:	621a      	str	r2, [r3, #32]

  return ret;
 8015f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3710      	adds	r7, #16
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}

08015f4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015f4e:	b480      	push	{r7}
 8015f50:	b083      	sub	sp, #12
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	6078      	str	r0, [r7, #4]
 8015f56:	460b      	mov	r3, r1
 8015f58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	78fa      	ldrb	r2, [r7, #3]
 8015f5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015f60:	2300      	movs	r3, #0
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	370c      	adds	r7, #12
 8015f66:	46bd      	mov	sp, r7
 8015f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6c:	4770      	bx	lr

08015f6e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015f6e:	b480      	push	{r7}
 8015f70:	b083      	sub	sp, #12
 8015f72:	af00      	add	r7, sp, #0
 8015f74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	2b04      	cmp	r3, #4
 8015f80:	d006      	beq.n	8015f90 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f88:	b2da      	uxtb	r2, r3
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2204      	movs	r2, #4
 8015f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015f98:	2300      	movs	r3, #0
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	370c      	adds	r7, #12
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa4:	4770      	bx	lr

08015fa6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015fa6:	b480      	push	{r7}
 8015fa8:	b083      	sub	sp, #12
 8015faa:	af00      	add	r7, sp, #0
 8015fac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fb4:	b2db      	uxtb	r3, r3
 8015fb6:	2b04      	cmp	r3, #4
 8015fb8:	d106      	bne.n	8015fc8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015fc0:	b2da      	uxtb	r2, r3
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015fc8:	2300      	movs	r3, #0
}
 8015fca:	4618      	mov	r0, r3
 8015fcc:	370c      	adds	r7, #12
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr

08015fd6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015fd6:	b580      	push	{r7, lr}
 8015fd8:	b082      	sub	sp, #8
 8015fda:	af00      	add	r7, sp, #0
 8015fdc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fe4:	b2db      	uxtb	r3, r3
 8015fe6:	2b03      	cmp	r3, #3
 8015fe8:	d110      	bne.n	801600c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d00b      	beq.n	801600c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ffa:	69db      	ldr	r3, [r3, #28]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d005      	beq.n	801600c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016006:	69db      	ldr	r3, [r3, #28]
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801600c:	2300      	movs	r3, #0
}
 801600e:	4618      	mov	r0, r3
 8016010:	3708      	adds	r7, #8
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}

08016016 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016016:	b580      	push	{r7, lr}
 8016018:	b082      	sub	sp, #8
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]
 801601e:	460b      	mov	r3, r1
 8016020:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	32ae      	adds	r2, #174	; 0xae
 801602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d101      	bne.n	8016038 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016034:	2303      	movs	r3, #3
 8016036:	e01c      	b.n	8016072 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801603e:	b2db      	uxtb	r3, r3
 8016040:	2b03      	cmp	r3, #3
 8016042:	d115      	bne.n	8016070 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	32ae      	adds	r2, #174	; 0xae
 801604e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016052:	6a1b      	ldr	r3, [r3, #32]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d00b      	beq.n	8016070 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	32ae      	adds	r2, #174	; 0xae
 8016062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016066:	6a1b      	ldr	r3, [r3, #32]
 8016068:	78fa      	ldrb	r2, [r7, #3]
 801606a:	4611      	mov	r1, r2
 801606c:	6878      	ldr	r0, [r7, #4]
 801606e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016070:	2300      	movs	r3, #0
}
 8016072:	4618      	mov	r0, r3
 8016074:	3708      	adds	r7, #8
 8016076:	46bd      	mov	sp, r7
 8016078:	bd80      	pop	{r7, pc}

0801607a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801607a:	b580      	push	{r7, lr}
 801607c:	b082      	sub	sp, #8
 801607e:	af00      	add	r7, sp, #0
 8016080:	6078      	str	r0, [r7, #4]
 8016082:	460b      	mov	r3, r1
 8016084:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	32ae      	adds	r2, #174	; 0xae
 8016090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d101      	bne.n	801609c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016098:	2303      	movs	r3, #3
 801609a:	e01c      	b.n	80160d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160a2:	b2db      	uxtb	r3, r3
 80160a4:	2b03      	cmp	r3, #3
 80160a6:	d115      	bne.n	80160d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	32ae      	adds	r2, #174	; 0xae
 80160b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d00b      	beq.n	80160d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	32ae      	adds	r2, #174	; 0xae
 80160c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160cc:	78fa      	ldrb	r2, [r7, #3]
 80160ce:	4611      	mov	r1, r2
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80160d4:	2300      	movs	r3, #0
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3708      	adds	r7, #8
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}

080160de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80160de:	b480      	push	{r7}
 80160e0:	b083      	sub	sp, #12
 80160e2:	af00      	add	r7, sp, #0
 80160e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80160e6:	2300      	movs	r3, #0
}
 80160e8:	4618      	mov	r0, r3
 80160ea:	370c      	adds	r7, #12
 80160ec:	46bd      	mov	sp, r7
 80160ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f2:	4770      	bx	lr

080160f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b084      	sub	sp, #16
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80160fc:	2300      	movs	r3, #0
 80160fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	2201      	movs	r2, #1
 8016104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801610e:	2b00      	cmp	r3, #0
 8016110:	d00e      	beq.n	8016130 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	687a      	ldr	r2, [r7, #4]
 801611c:	6852      	ldr	r2, [r2, #4]
 801611e:	b2d2      	uxtb	r2, r2
 8016120:	4611      	mov	r1, r2
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	4798      	blx	r3
 8016126:	4603      	mov	r3, r0
 8016128:	2b00      	cmp	r3, #0
 801612a:	d001      	beq.n	8016130 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801612c:	2303      	movs	r3, #3
 801612e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016130:	7bfb      	ldrb	r3, [r7, #15]
}
 8016132:	4618      	mov	r0, r3
 8016134:	3710      	adds	r7, #16
 8016136:	46bd      	mov	sp, r7
 8016138:	bd80      	pop	{r7, pc}

0801613a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801613a:	b480      	push	{r7}
 801613c:	b083      	sub	sp, #12
 801613e:	af00      	add	r7, sp, #0
 8016140:	6078      	str	r0, [r7, #4]
 8016142:	460b      	mov	r3, r1
 8016144:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016146:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016148:	4618      	mov	r0, r3
 801614a:	370c      	adds	r7, #12
 801614c:	46bd      	mov	sp, r7
 801614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016152:	4770      	bx	lr

08016154 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016154:	b480      	push	{r7}
 8016156:	b083      	sub	sp, #12
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
 801615c:	460b      	mov	r3, r1
 801615e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016160:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016162:	4618      	mov	r0, r3
 8016164:	370c      	adds	r7, #12
 8016166:	46bd      	mov	sp, r7
 8016168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616c:	4770      	bx	lr

0801616e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801616e:	b580      	push	{r7, lr}
 8016170:	b086      	sub	sp, #24
 8016172:	af00      	add	r7, sp, #0
 8016174:	6078      	str	r0, [r7, #4]
 8016176:	460b      	mov	r3, r1
 8016178:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016182:	2300      	movs	r3, #0
 8016184:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	885b      	ldrh	r3, [r3, #2]
 801618a:	b29a      	uxth	r2, r3
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	781b      	ldrb	r3, [r3, #0]
 8016190:	b29b      	uxth	r3, r3
 8016192:	429a      	cmp	r2, r3
 8016194:	d920      	bls.n	80161d8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	781b      	ldrb	r3, [r3, #0]
 801619a:	b29b      	uxth	r3, r3
 801619c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801619e:	e013      	b.n	80161c8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80161a0:	f107 030a 	add.w	r3, r7, #10
 80161a4:	4619      	mov	r1, r3
 80161a6:	6978      	ldr	r0, [r7, #20]
 80161a8:	f000 f81b 	bl	80161e2 <USBD_GetNextDesc>
 80161ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	785b      	ldrb	r3, [r3, #1]
 80161b2:	2b05      	cmp	r3, #5
 80161b4:	d108      	bne.n	80161c8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80161b6:	697b      	ldr	r3, [r7, #20]
 80161b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80161ba:	693b      	ldr	r3, [r7, #16]
 80161bc:	789b      	ldrb	r3, [r3, #2]
 80161be:	78fa      	ldrb	r2, [r7, #3]
 80161c0:	429a      	cmp	r2, r3
 80161c2:	d008      	beq.n	80161d6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80161c4:	2300      	movs	r3, #0
 80161c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	885b      	ldrh	r3, [r3, #2]
 80161cc:	b29a      	uxth	r2, r3
 80161ce:	897b      	ldrh	r3, [r7, #10]
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d8e5      	bhi.n	80161a0 <USBD_GetEpDesc+0x32>
 80161d4:	e000      	b.n	80161d8 <USBD_GetEpDesc+0x6a>
          break;
 80161d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80161d8:	693b      	ldr	r3, [r7, #16]
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3718      	adds	r7, #24
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd80      	pop	{r7, pc}

080161e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80161e2:	b480      	push	{r7}
 80161e4:	b085      	sub	sp, #20
 80161e6:	af00      	add	r7, sp, #0
 80161e8:	6078      	str	r0, [r7, #4]
 80161ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80161f0:	683b      	ldr	r3, [r7, #0]
 80161f2:	881a      	ldrh	r2, [r3, #0]
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	b29b      	uxth	r3, r3
 80161fa:	4413      	add	r3, r2
 80161fc:	b29a      	uxth	r2, r3
 80161fe:	683b      	ldr	r3, [r7, #0]
 8016200:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	781b      	ldrb	r3, [r3, #0]
 8016206:	461a      	mov	r2, r3
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	4413      	add	r3, r2
 801620c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801620e:	68fb      	ldr	r3, [r7, #12]
}
 8016210:	4618      	mov	r0, r3
 8016212:	3714      	adds	r7, #20
 8016214:	46bd      	mov	sp, r7
 8016216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621a:	4770      	bx	lr

0801621c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801621c:	b480      	push	{r7}
 801621e:	b087      	sub	sp, #28
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016228:	697b      	ldr	r3, [r7, #20]
 801622a:	781b      	ldrb	r3, [r3, #0]
 801622c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801622e:	697b      	ldr	r3, [r7, #20]
 8016230:	3301      	adds	r3, #1
 8016232:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016234:	697b      	ldr	r3, [r7, #20]
 8016236:	781b      	ldrb	r3, [r3, #0]
 8016238:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801623a:	8a3b      	ldrh	r3, [r7, #16]
 801623c:	021b      	lsls	r3, r3, #8
 801623e:	b21a      	sxth	r2, r3
 8016240:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016244:	4313      	orrs	r3, r2
 8016246:	b21b      	sxth	r3, r3
 8016248:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801624a:	89fb      	ldrh	r3, [r7, #14]
}
 801624c:	4618      	mov	r0, r3
 801624e:	371c      	adds	r7, #28
 8016250:	46bd      	mov	sp, r7
 8016252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016256:	4770      	bx	lr

08016258 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b084      	sub	sp, #16
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
 8016260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016262:	2300      	movs	r3, #0
 8016264:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	781b      	ldrb	r3, [r3, #0]
 801626a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801626e:	2b40      	cmp	r3, #64	; 0x40
 8016270:	d005      	beq.n	801627e <USBD_StdDevReq+0x26>
 8016272:	2b40      	cmp	r3, #64	; 0x40
 8016274:	d857      	bhi.n	8016326 <USBD_StdDevReq+0xce>
 8016276:	2b00      	cmp	r3, #0
 8016278:	d00f      	beq.n	801629a <USBD_StdDevReq+0x42>
 801627a:	2b20      	cmp	r3, #32
 801627c:	d153      	bne.n	8016326 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	32ae      	adds	r2, #174	; 0xae
 8016288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801628c:	689b      	ldr	r3, [r3, #8]
 801628e:	6839      	ldr	r1, [r7, #0]
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	4798      	blx	r3
 8016294:	4603      	mov	r3, r0
 8016296:	73fb      	strb	r3, [r7, #15]
      break;
 8016298:	e04a      	b.n	8016330 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801629a:	683b      	ldr	r3, [r7, #0]
 801629c:	785b      	ldrb	r3, [r3, #1]
 801629e:	2b09      	cmp	r3, #9
 80162a0:	d83b      	bhi.n	801631a <USBD_StdDevReq+0xc2>
 80162a2:	a201      	add	r2, pc, #4	; (adr r2, 80162a8 <USBD_StdDevReq+0x50>)
 80162a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162a8:	080162fd 	.word	0x080162fd
 80162ac:	08016311 	.word	0x08016311
 80162b0:	0801631b 	.word	0x0801631b
 80162b4:	08016307 	.word	0x08016307
 80162b8:	0801631b 	.word	0x0801631b
 80162bc:	080162db 	.word	0x080162db
 80162c0:	080162d1 	.word	0x080162d1
 80162c4:	0801631b 	.word	0x0801631b
 80162c8:	080162f3 	.word	0x080162f3
 80162cc:	080162e5 	.word	0x080162e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80162d0:	6839      	ldr	r1, [r7, #0]
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f000 fa3c 	bl	8016750 <USBD_GetDescriptor>
          break;
 80162d8:	e024      	b.n	8016324 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80162da:	6839      	ldr	r1, [r7, #0]
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	f000 fba1 	bl	8016a24 <USBD_SetAddress>
          break;
 80162e2:	e01f      	b.n	8016324 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80162e4:	6839      	ldr	r1, [r7, #0]
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f000 fbe0 	bl	8016aac <USBD_SetConfig>
 80162ec:	4603      	mov	r3, r0
 80162ee:	73fb      	strb	r3, [r7, #15]
          break;
 80162f0:	e018      	b.n	8016324 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80162f2:	6839      	ldr	r1, [r7, #0]
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f000 fc83 	bl	8016c00 <USBD_GetConfig>
          break;
 80162fa:	e013      	b.n	8016324 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80162fc:	6839      	ldr	r1, [r7, #0]
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f000 fcb4 	bl	8016c6c <USBD_GetStatus>
          break;
 8016304:	e00e      	b.n	8016324 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016306:	6839      	ldr	r1, [r7, #0]
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f000 fce3 	bl	8016cd4 <USBD_SetFeature>
          break;
 801630e:	e009      	b.n	8016324 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016310:	6839      	ldr	r1, [r7, #0]
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f000 fd07 	bl	8016d26 <USBD_ClrFeature>
          break;
 8016318:	e004      	b.n	8016324 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801631a:	6839      	ldr	r1, [r7, #0]
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f000 fd5e 	bl	8016dde <USBD_CtlError>
          break;
 8016322:	bf00      	nop
      }
      break;
 8016324:	e004      	b.n	8016330 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016326:	6839      	ldr	r1, [r7, #0]
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f000 fd58 	bl	8016dde <USBD_CtlError>
      break;
 801632e:	bf00      	nop
  }

  return ret;
 8016330:	7bfb      	ldrb	r3, [r7, #15]
}
 8016332:	4618      	mov	r0, r3
 8016334:	3710      	adds	r7, #16
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}
 801633a:	bf00      	nop

0801633c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b084      	sub	sp, #16
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016346:	2300      	movs	r3, #0
 8016348:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016352:	2b40      	cmp	r3, #64	; 0x40
 8016354:	d005      	beq.n	8016362 <USBD_StdItfReq+0x26>
 8016356:	2b40      	cmp	r3, #64	; 0x40
 8016358:	d852      	bhi.n	8016400 <USBD_StdItfReq+0xc4>
 801635a:	2b00      	cmp	r3, #0
 801635c:	d001      	beq.n	8016362 <USBD_StdItfReq+0x26>
 801635e:	2b20      	cmp	r3, #32
 8016360:	d14e      	bne.n	8016400 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016368:	b2db      	uxtb	r3, r3
 801636a:	3b01      	subs	r3, #1
 801636c:	2b02      	cmp	r3, #2
 801636e:	d840      	bhi.n	80163f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016370:	683b      	ldr	r3, [r7, #0]
 8016372:	889b      	ldrh	r3, [r3, #4]
 8016374:	b2db      	uxtb	r3, r3
 8016376:	2b01      	cmp	r3, #1
 8016378:	d836      	bhi.n	80163e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801637a:	683b      	ldr	r3, [r7, #0]
 801637c:	889b      	ldrh	r3, [r3, #4]
 801637e:	b2db      	uxtb	r3, r3
 8016380:	4619      	mov	r1, r3
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f7ff fed9 	bl	801613a <USBD_CoreFindIF>
 8016388:	4603      	mov	r3, r0
 801638a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801638c:	7bbb      	ldrb	r3, [r7, #14]
 801638e:	2bff      	cmp	r3, #255	; 0xff
 8016390:	d01d      	beq.n	80163ce <USBD_StdItfReq+0x92>
 8016392:	7bbb      	ldrb	r3, [r7, #14]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d11a      	bne.n	80163ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016398:	7bba      	ldrb	r2, [r7, #14]
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	32ae      	adds	r2, #174	; 0xae
 801639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163a2:	689b      	ldr	r3, [r3, #8]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d00f      	beq.n	80163c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80163a8:	7bba      	ldrb	r2, [r7, #14]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80163b0:	7bba      	ldrb	r2, [r7, #14]
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	32ae      	adds	r2, #174	; 0xae
 80163b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163ba:	689b      	ldr	r3, [r3, #8]
 80163bc:	6839      	ldr	r1, [r7, #0]
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	4798      	blx	r3
 80163c2:	4603      	mov	r3, r0
 80163c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80163c6:	e004      	b.n	80163d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80163c8:	2303      	movs	r3, #3
 80163ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80163cc:	e001      	b.n	80163d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80163ce:	2303      	movs	r3, #3
 80163d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	88db      	ldrh	r3, [r3, #6]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d110      	bne.n	80163fc <USBD_StdItfReq+0xc0>
 80163da:	7bfb      	ldrb	r3, [r7, #15]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d10d      	bne.n	80163fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f000 fdc7 	bl	8016f74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80163e6:	e009      	b.n	80163fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80163e8:	6839      	ldr	r1, [r7, #0]
 80163ea:	6878      	ldr	r0, [r7, #4]
 80163ec:	f000 fcf7 	bl	8016dde <USBD_CtlError>
          break;
 80163f0:	e004      	b.n	80163fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80163f2:	6839      	ldr	r1, [r7, #0]
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f000 fcf2 	bl	8016dde <USBD_CtlError>
          break;
 80163fa:	e000      	b.n	80163fe <USBD_StdItfReq+0xc2>
          break;
 80163fc:	bf00      	nop
      }
      break;
 80163fe:	e004      	b.n	801640a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016400:	6839      	ldr	r1, [r7, #0]
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	f000 fceb 	bl	8016dde <USBD_CtlError>
      break;
 8016408:	bf00      	nop
  }

  return ret;
 801640a:	7bfb      	ldrb	r3, [r7, #15]
}
 801640c:	4618      	mov	r0, r3
 801640e:	3710      	adds	r7, #16
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}

08016414 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b084      	sub	sp, #16
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
 801641c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801641e:	2300      	movs	r3, #0
 8016420:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	889b      	ldrh	r3, [r3, #4]
 8016426:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	781b      	ldrb	r3, [r3, #0]
 801642c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016430:	2b40      	cmp	r3, #64	; 0x40
 8016432:	d007      	beq.n	8016444 <USBD_StdEPReq+0x30>
 8016434:	2b40      	cmp	r3, #64	; 0x40
 8016436:	f200 817f 	bhi.w	8016738 <USBD_StdEPReq+0x324>
 801643a:	2b00      	cmp	r3, #0
 801643c:	d02a      	beq.n	8016494 <USBD_StdEPReq+0x80>
 801643e:	2b20      	cmp	r3, #32
 8016440:	f040 817a 	bne.w	8016738 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016444:	7bbb      	ldrb	r3, [r7, #14]
 8016446:	4619      	mov	r1, r3
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f7ff fe83 	bl	8016154 <USBD_CoreFindEP>
 801644e:	4603      	mov	r3, r0
 8016450:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016452:	7b7b      	ldrb	r3, [r7, #13]
 8016454:	2bff      	cmp	r3, #255	; 0xff
 8016456:	f000 8174 	beq.w	8016742 <USBD_StdEPReq+0x32e>
 801645a:	7b7b      	ldrb	r3, [r7, #13]
 801645c:	2b00      	cmp	r3, #0
 801645e:	f040 8170 	bne.w	8016742 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016462:	7b7a      	ldrb	r2, [r7, #13]
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801646a:	7b7a      	ldrb	r2, [r7, #13]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	32ae      	adds	r2, #174	; 0xae
 8016470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016474:	689b      	ldr	r3, [r3, #8]
 8016476:	2b00      	cmp	r3, #0
 8016478:	f000 8163 	beq.w	8016742 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801647c:	7b7a      	ldrb	r2, [r7, #13]
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	32ae      	adds	r2, #174	; 0xae
 8016482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016486:	689b      	ldr	r3, [r3, #8]
 8016488:	6839      	ldr	r1, [r7, #0]
 801648a:	6878      	ldr	r0, [r7, #4]
 801648c:	4798      	blx	r3
 801648e:	4603      	mov	r3, r0
 8016490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016492:	e156      	b.n	8016742 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	785b      	ldrb	r3, [r3, #1]
 8016498:	2b03      	cmp	r3, #3
 801649a:	d008      	beq.n	80164ae <USBD_StdEPReq+0x9a>
 801649c:	2b03      	cmp	r3, #3
 801649e:	f300 8145 	bgt.w	801672c <USBD_StdEPReq+0x318>
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	f000 809b 	beq.w	80165de <USBD_StdEPReq+0x1ca>
 80164a8:	2b01      	cmp	r3, #1
 80164aa:	d03c      	beq.n	8016526 <USBD_StdEPReq+0x112>
 80164ac:	e13e      	b.n	801672c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164b4:	b2db      	uxtb	r3, r3
 80164b6:	2b02      	cmp	r3, #2
 80164b8:	d002      	beq.n	80164c0 <USBD_StdEPReq+0xac>
 80164ba:	2b03      	cmp	r3, #3
 80164bc:	d016      	beq.n	80164ec <USBD_StdEPReq+0xd8>
 80164be:	e02c      	b.n	801651a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80164c0:	7bbb      	ldrb	r3, [r7, #14]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d00d      	beq.n	80164e2 <USBD_StdEPReq+0xce>
 80164c6:	7bbb      	ldrb	r3, [r7, #14]
 80164c8:	2b80      	cmp	r3, #128	; 0x80
 80164ca:	d00a      	beq.n	80164e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80164cc:	7bbb      	ldrb	r3, [r7, #14]
 80164ce:	4619      	mov	r1, r3
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f004 f94b 	bl	801a76c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80164d6:	2180      	movs	r1, #128	; 0x80
 80164d8:	6878      	ldr	r0, [r7, #4]
 80164da:	f004 f947 	bl	801a76c <USBD_LL_StallEP>
 80164de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80164e0:	e020      	b.n	8016524 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80164e2:	6839      	ldr	r1, [r7, #0]
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f000 fc7a 	bl	8016dde <USBD_CtlError>
              break;
 80164ea:	e01b      	b.n	8016524 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80164ec:	683b      	ldr	r3, [r7, #0]
 80164ee:	885b      	ldrh	r3, [r3, #2]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d10e      	bne.n	8016512 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80164f4:	7bbb      	ldrb	r3, [r7, #14]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d00b      	beq.n	8016512 <USBD_StdEPReq+0xfe>
 80164fa:	7bbb      	ldrb	r3, [r7, #14]
 80164fc:	2b80      	cmp	r3, #128	; 0x80
 80164fe:	d008      	beq.n	8016512 <USBD_StdEPReq+0xfe>
 8016500:	683b      	ldr	r3, [r7, #0]
 8016502:	88db      	ldrh	r3, [r3, #6]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d104      	bne.n	8016512 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016508:	7bbb      	ldrb	r3, [r7, #14]
 801650a:	4619      	mov	r1, r3
 801650c:	6878      	ldr	r0, [r7, #4]
 801650e:	f004 f92d 	bl	801a76c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	f000 fd2e 	bl	8016f74 <USBD_CtlSendStatus>

              break;
 8016518:	e004      	b.n	8016524 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801651a:	6839      	ldr	r1, [r7, #0]
 801651c:	6878      	ldr	r0, [r7, #4]
 801651e:	f000 fc5e 	bl	8016dde <USBD_CtlError>
              break;
 8016522:	bf00      	nop
          }
          break;
 8016524:	e107      	b.n	8016736 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801652c:	b2db      	uxtb	r3, r3
 801652e:	2b02      	cmp	r3, #2
 8016530:	d002      	beq.n	8016538 <USBD_StdEPReq+0x124>
 8016532:	2b03      	cmp	r3, #3
 8016534:	d016      	beq.n	8016564 <USBD_StdEPReq+0x150>
 8016536:	e04b      	b.n	80165d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016538:	7bbb      	ldrb	r3, [r7, #14]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d00d      	beq.n	801655a <USBD_StdEPReq+0x146>
 801653e:	7bbb      	ldrb	r3, [r7, #14]
 8016540:	2b80      	cmp	r3, #128	; 0x80
 8016542:	d00a      	beq.n	801655a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016544:	7bbb      	ldrb	r3, [r7, #14]
 8016546:	4619      	mov	r1, r3
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f004 f90f 	bl	801a76c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801654e:	2180      	movs	r1, #128	; 0x80
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f004 f90b 	bl	801a76c <USBD_LL_StallEP>
 8016556:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016558:	e040      	b.n	80165dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801655a:	6839      	ldr	r1, [r7, #0]
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f000 fc3e 	bl	8016dde <USBD_CtlError>
              break;
 8016562:	e03b      	b.n	80165dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	885b      	ldrh	r3, [r3, #2]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d136      	bne.n	80165da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801656c:	7bbb      	ldrb	r3, [r7, #14]
 801656e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016572:	2b00      	cmp	r3, #0
 8016574:	d004      	beq.n	8016580 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016576:	7bbb      	ldrb	r3, [r7, #14]
 8016578:	4619      	mov	r1, r3
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	f004 f915 	bl	801a7aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f000 fcf7 	bl	8016f74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016586:	7bbb      	ldrb	r3, [r7, #14]
 8016588:	4619      	mov	r1, r3
 801658a:	6878      	ldr	r0, [r7, #4]
 801658c:	f7ff fde2 	bl	8016154 <USBD_CoreFindEP>
 8016590:	4603      	mov	r3, r0
 8016592:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016594:	7b7b      	ldrb	r3, [r7, #13]
 8016596:	2bff      	cmp	r3, #255	; 0xff
 8016598:	d01f      	beq.n	80165da <USBD_StdEPReq+0x1c6>
 801659a:	7b7b      	ldrb	r3, [r7, #13]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d11c      	bne.n	80165da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80165a0:	7b7a      	ldrb	r2, [r7, #13]
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80165a8:	7b7a      	ldrb	r2, [r7, #13]
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	32ae      	adds	r2, #174	; 0xae
 80165ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165b2:	689b      	ldr	r3, [r3, #8]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d010      	beq.n	80165da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80165b8:	7b7a      	ldrb	r2, [r7, #13]
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	32ae      	adds	r2, #174	; 0xae
 80165be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165c2:	689b      	ldr	r3, [r3, #8]
 80165c4:	6839      	ldr	r1, [r7, #0]
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	4798      	blx	r3
 80165ca:	4603      	mov	r3, r0
 80165cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80165ce:	e004      	b.n	80165da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80165d0:	6839      	ldr	r1, [r7, #0]
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	f000 fc03 	bl	8016dde <USBD_CtlError>
              break;
 80165d8:	e000      	b.n	80165dc <USBD_StdEPReq+0x1c8>
              break;
 80165da:	bf00      	nop
          }
          break;
 80165dc:	e0ab      	b.n	8016736 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165e4:	b2db      	uxtb	r3, r3
 80165e6:	2b02      	cmp	r3, #2
 80165e8:	d002      	beq.n	80165f0 <USBD_StdEPReq+0x1dc>
 80165ea:	2b03      	cmp	r3, #3
 80165ec:	d032      	beq.n	8016654 <USBD_StdEPReq+0x240>
 80165ee:	e097      	b.n	8016720 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80165f0:	7bbb      	ldrb	r3, [r7, #14]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d007      	beq.n	8016606 <USBD_StdEPReq+0x1f2>
 80165f6:	7bbb      	ldrb	r3, [r7, #14]
 80165f8:	2b80      	cmp	r3, #128	; 0x80
 80165fa:	d004      	beq.n	8016606 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80165fc:	6839      	ldr	r1, [r7, #0]
 80165fe:	6878      	ldr	r0, [r7, #4]
 8016600:	f000 fbed 	bl	8016dde <USBD_CtlError>
                break;
 8016604:	e091      	b.n	801672a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801660a:	2b00      	cmp	r3, #0
 801660c:	da0b      	bge.n	8016626 <USBD_StdEPReq+0x212>
 801660e:	7bbb      	ldrb	r3, [r7, #14]
 8016610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016614:	4613      	mov	r3, r2
 8016616:	009b      	lsls	r3, r3, #2
 8016618:	4413      	add	r3, r2
 801661a:	009b      	lsls	r3, r3, #2
 801661c:	3310      	adds	r3, #16
 801661e:	687a      	ldr	r2, [r7, #4]
 8016620:	4413      	add	r3, r2
 8016622:	3304      	adds	r3, #4
 8016624:	e00b      	b.n	801663e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016626:	7bbb      	ldrb	r3, [r7, #14]
 8016628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801662c:	4613      	mov	r3, r2
 801662e:	009b      	lsls	r3, r3, #2
 8016630:	4413      	add	r3, r2
 8016632:	009b      	lsls	r3, r3, #2
 8016634:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016638:	687a      	ldr	r2, [r7, #4]
 801663a:	4413      	add	r3, r2
 801663c:	3304      	adds	r3, #4
 801663e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	2200      	movs	r2, #0
 8016644:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	2202      	movs	r2, #2
 801664a:	4619      	mov	r1, r3
 801664c:	6878      	ldr	r0, [r7, #4]
 801664e:	f000 fc37 	bl	8016ec0 <USBD_CtlSendData>
              break;
 8016652:	e06a      	b.n	801672a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016658:	2b00      	cmp	r3, #0
 801665a:	da11      	bge.n	8016680 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801665c:	7bbb      	ldrb	r3, [r7, #14]
 801665e:	f003 020f 	and.w	r2, r3, #15
 8016662:	6879      	ldr	r1, [r7, #4]
 8016664:	4613      	mov	r3, r2
 8016666:	009b      	lsls	r3, r3, #2
 8016668:	4413      	add	r3, r2
 801666a:	009b      	lsls	r3, r3, #2
 801666c:	440b      	add	r3, r1
 801666e:	3324      	adds	r3, #36	; 0x24
 8016670:	881b      	ldrh	r3, [r3, #0]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d117      	bne.n	80166a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016676:	6839      	ldr	r1, [r7, #0]
 8016678:	6878      	ldr	r0, [r7, #4]
 801667a:	f000 fbb0 	bl	8016dde <USBD_CtlError>
                  break;
 801667e:	e054      	b.n	801672a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016680:	7bbb      	ldrb	r3, [r7, #14]
 8016682:	f003 020f 	and.w	r2, r3, #15
 8016686:	6879      	ldr	r1, [r7, #4]
 8016688:	4613      	mov	r3, r2
 801668a:	009b      	lsls	r3, r3, #2
 801668c:	4413      	add	r3, r2
 801668e:	009b      	lsls	r3, r3, #2
 8016690:	440b      	add	r3, r1
 8016692:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016696:	881b      	ldrh	r3, [r3, #0]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d104      	bne.n	80166a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801669c:	6839      	ldr	r1, [r7, #0]
 801669e:	6878      	ldr	r0, [r7, #4]
 80166a0:	f000 fb9d 	bl	8016dde <USBD_CtlError>
                  break;
 80166a4:	e041      	b.n	801672a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80166a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	da0b      	bge.n	80166c6 <USBD_StdEPReq+0x2b2>
 80166ae:	7bbb      	ldrb	r3, [r7, #14]
 80166b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80166b4:	4613      	mov	r3, r2
 80166b6:	009b      	lsls	r3, r3, #2
 80166b8:	4413      	add	r3, r2
 80166ba:	009b      	lsls	r3, r3, #2
 80166bc:	3310      	adds	r3, #16
 80166be:	687a      	ldr	r2, [r7, #4]
 80166c0:	4413      	add	r3, r2
 80166c2:	3304      	adds	r3, #4
 80166c4:	e00b      	b.n	80166de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80166c6:	7bbb      	ldrb	r3, [r7, #14]
 80166c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80166cc:	4613      	mov	r3, r2
 80166ce:	009b      	lsls	r3, r3, #2
 80166d0:	4413      	add	r3, r2
 80166d2:	009b      	lsls	r3, r3, #2
 80166d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80166d8:	687a      	ldr	r2, [r7, #4]
 80166da:	4413      	add	r3, r2
 80166dc:	3304      	adds	r3, #4
 80166de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80166e0:	7bbb      	ldrb	r3, [r7, #14]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d002      	beq.n	80166ec <USBD_StdEPReq+0x2d8>
 80166e6:	7bbb      	ldrb	r3, [r7, #14]
 80166e8:	2b80      	cmp	r3, #128	; 0x80
 80166ea:	d103      	bne.n	80166f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80166ec:	68bb      	ldr	r3, [r7, #8]
 80166ee:	2200      	movs	r2, #0
 80166f0:	601a      	str	r2, [r3, #0]
 80166f2:	e00e      	b.n	8016712 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80166f4:	7bbb      	ldrb	r3, [r7, #14]
 80166f6:	4619      	mov	r1, r3
 80166f8:	6878      	ldr	r0, [r7, #4]
 80166fa:	f004 f875 	bl	801a7e8 <USBD_LL_IsStallEP>
 80166fe:	4603      	mov	r3, r0
 8016700:	2b00      	cmp	r3, #0
 8016702:	d003      	beq.n	801670c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016704:	68bb      	ldr	r3, [r7, #8]
 8016706:	2201      	movs	r2, #1
 8016708:	601a      	str	r2, [r3, #0]
 801670a:	e002      	b.n	8016712 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801670c:	68bb      	ldr	r3, [r7, #8]
 801670e:	2200      	movs	r2, #0
 8016710:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016712:	68bb      	ldr	r3, [r7, #8]
 8016714:	2202      	movs	r2, #2
 8016716:	4619      	mov	r1, r3
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	f000 fbd1 	bl	8016ec0 <USBD_CtlSendData>
              break;
 801671e:	e004      	b.n	801672a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016720:	6839      	ldr	r1, [r7, #0]
 8016722:	6878      	ldr	r0, [r7, #4]
 8016724:	f000 fb5b 	bl	8016dde <USBD_CtlError>
              break;
 8016728:	bf00      	nop
          }
          break;
 801672a:	e004      	b.n	8016736 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801672c:	6839      	ldr	r1, [r7, #0]
 801672e:	6878      	ldr	r0, [r7, #4]
 8016730:	f000 fb55 	bl	8016dde <USBD_CtlError>
          break;
 8016734:	bf00      	nop
      }
      break;
 8016736:	e005      	b.n	8016744 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016738:	6839      	ldr	r1, [r7, #0]
 801673a:	6878      	ldr	r0, [r7, #4]
 801673c:	f000 fb4f 	bl	8016dde <USBD_CtlError>
      break;
 8016740:	e000      	b.n	8016744 <USBD_StdEPReq+0x330>
      break;
 8016742:	bf00      	nop
  }

  return ret;
 8016744:	7bfb      	ldrb	r3, [r7, #15]
}
 8016746:	4618      	mov	r0, r3
 8016748:	3710      	adds	r7, #16
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
	...

08016750 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b084      	sub	sp, #16
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801675a:	2300      	movs	r3, #0
 801675c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801675e:	2300      	movs	r3, #0
 8016760:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016762:	2300      	movs	r3, #0
 8016764:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016766:	683b      	ldr	r3, [r7, #0]
 8016768:	885b      	ldrh	r3, [r3, #2]
 801676a:	0a1b      	lsrs	r3, r3, #8
 801676c:	b29b      	uxth	r3, r3
 801676e:	3b01      	subs	r3, #1
 8016770:	2b06      	cmp	r3, #6
 8016772:	f200 8128 	bhi.w	80169c6 <USBD_GetDescriptor+0x276>
 8016776:	a201      	add	r2, pc, #4	; (adr r2, 801677c <USBD_GetDescriptor+0x2c>)
 8016778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801677c:	08016799 	.word	0x08016799
 8016780:	080167b1 	.word	0x080167b1
 8016784:	080167f1 	.word	0x080167f1
 8016788:	080169c7 	.word	0x080169c7
 801678c:	080169c7 	.word	0x080169c7
 8016790:	08016967 	.word	0x08016967
 8016794:	08016993 	.word	0x08016993
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	687a      	ldr	r2, [r7, #4]
 80167a2:	7c12      	ldrb	r2, [r2, #16]
 80167a4:	f107 0108 	add.w	r1, r7, #8
 80167a8:	4610      	mov	r0, r2
 80167aa:	4798      	blx	r3
 80167ac:	60f8      	str	r0, [r7, #12]
      break;
 80167ae:	e112      	b.n	80169d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	7c1b      	ldrb	r3, [r3, #16]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d10d      	bne.n	80167d4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80167be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167c0:	f107 0208 	add.w	r2, r7, #8
 80167c4:	4610      	mov	r0, r2
 80167c6:	4798      	blx	r3
 80167c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	3301      	adds	r3, #1
 80167ce:	2202      	movs	r2, #2
 80167d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80167d2:	e100      	b.n	80169d6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80167da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167dc:	f107 0208 	add.w	r2, r7, #8
 80167e0:	4610      	mov	r0, r2
 80167e2:	4798      	blx	r3
 80167e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	3301      	adds	r3, #1
 80167ea:	2202      	movs	r2, #2
 80167ec:	701a      	strb	r2, [r3, #0]
      break;
 80167ee:	e0f2      	b.n	80169d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80167f0:	683b      	ldr	r3, [r7, #0]
 80167f2:	885b      	ldrh	r3, [r3, #2]
 80167f4:	b2db      	uxtb	r3, r3
 80167f6:	2b05      	cmp	r3, #5
 80167f8:	f200 80ac 	bhi.w	8016954 <USBD_GetDescriptor+0x204>
 80167fc:	a201      	add	r2, pc, #4	; (adr r2, 8016804 <USBD_GetDescriptor+0xb4>)
 80167fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016802:	bf00      	nop
 8016804:	0801681d 	.word	0x0801681d
 8016808:	08016851 	.word	0x08016851
 801680c:	08016885 	.word	0x08016885
 8016810:	080168b9 	.word	0x080168b9
 8016814:	080168ed 	.word	0x080168ed
 8016818:	08016921 	.word	0x08016921
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016822:	685b      	ldr	r3, [r3, #4]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d00b      	beq.n	8016840 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801682e:	685b      	ldr	r3, [r3, #4]
 8016830:	687a      	ldr	r2, [r7, #4]
 8016832:	7c12      	ldrb	r2, [r2, #16]
 8016834:	f107 0108 	add.w	r1, r7, #8
 8016838:	4610      	mov	r0, r2
 801683a:	4798      	blx	r3
 801683c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801683e:	e091      	b.n	8016964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016840:	6839      	ldr	r1, [r7, #0]
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f000 facb 	bl	8016dde <USBD_CtlError>
            err++;
 8016848:	7afb      	ldrb	r3, [r7, #11]
 801684a:	3301      	adds	r3, #1
 801684c:	72fb      	strb	r3, [r7, #11]
          break;
 801684e:	e089      	b.n	8016964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016856:	689b      	ldr	r3, [r3, #8]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d00b      	beq.n	8016874 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016862:	689b      	ldr	r3, [r3, #8]
 8016864:	687a      	ldr	r2, [r7, #4]
 8016866:	7c12      	ldrb	r2, [r2, #16]
 8016868:	f107 0108 	add.w	r1, r7, #8
 801686c:	4610      	mov	r0, r2
 801686e:	4798      	blx	r3
 8016870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016872:	e077      	b.n	8016964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016874:	6839      	ldr	r1, [r7, #0]
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	f000 fab1 	bl	8016dde <USBD_CtlError>
            err++;
 801687c:	7afb      	ldrb	r3, [r7, #11]
 801687e:	3301      	adds	r3, #1
 8016880:	72fb      	strb	r3, [r7, #11]
          break;
 8016882:	e06f      	b.n	8016964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801688a:	68db      	ldr	r3, [r3, #12]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d00b      	beq.n	80168a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016896:	68db      	ldr	r3, [r3, #12]
 8016898:	687a      	ldr	r2, [r7, #4]
 801689a:	7c12      	ldrb	r2, [r2, #16]
 801689c:	f107 0108 	add.w	r1, r7, #8
 80168a0:	4610      	mov	r0, r2
 80168a2:	4798      	blx	r3
 80168a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80168a6:	e05d      	b.n	8016964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80168a8:	6839      	ldr	r1, [r7, #0]
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f000 fa97 	bl	8016dde <USBD_CtlError>
            err++;
 80168b0:	7afb      	ldrb	r3, [r7, #11]
 80168b2:	3301      	adds	r3, #1
 80168b4:	72fb      	strb	r3, [r7, #11]
          break;
 80168b6:	e055      	b.n	8016964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168be:	691b      	ldr	r3, [r3, #16]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d00b      	beq.n	80168dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168ca:	691b      	ldr	r3, [r3, #16]
 80168cc:	687a      	ldr	r2, [r7, #4]
 80168ce:	7c12      	ldrb	r2, [r2, #16]
 80168d0:	f107 0108 	add.w	r1, r7, #8
 80168d4:	4610      	mov	r0, r2
 80168d6:	4798      	blx	r3
 80168d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80168da:	e043      	b.n	8016964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80168dc:	6839      	ldr	r1, [r7, #0]
 80168de:	6878      	ldr	r0, [r7, #4]
 80168e0:	f000 fa7d 	bl	8016dde <USBD_CtlError>
            err++;
 80168e4:	7afb      	ldrb	r3, [r7, #11]
 80168e6:	3301      	adds	r3, #1
 80168e8:	72fb      	strb	r3, [r7, #11]
          break;
 80168ea:	e03b      	b.n	8016964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168f2:	695b      	ldr	r3, [r3, #20]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d00b      	beq.n	8016910 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168fe:	695b      	ldr	r3, [r3, #20]
 8016900:	687a      	ldr	r2, [r7, #4]
 8016902:	7c12      	ldrb	r2, [r2, #16]
 8016904:	f107 0108 	add.w	r1, r7, #8
 8016908:	4610      	mov	r0, r2
 801690a:	4798      	blx	r3
 801690c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801690e:	e029      	b.n	8016964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016910:	6839      	ldr	r1, [r7, #0]
 8016912:	6878      	ldr	r0, [r7, #4]
 8016914:	f000 fa63 	bl	8016dde <USBD_CtlError>
            err++;
 8016918:	7afb      	ldrb	r3, [r7, #11]
 801691a:	3301      	adds	r3, #1
 801691c:	72fb      	strb	r3, [r7, #11]
          break;
 801691e:	e021      	b.n	8016964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016926:	699b      	ldr	r3, [r3, #24]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d00b      	beq.n	8016944 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016932:	699b      	ldr	r3, [r3, #24]
 8016934:	687a      	ldr	r2, [r7, #4]
 8016936:	7c12      	ldrb	r2, [r2, #16]
 8016938:	f107 0108 	add.w	r1, r7, #8
 801693c:	4610      	mov	r0, r2
 801693e:	4798      	blx	r3
 8016940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016942:	e00f      	b.n	8016964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016944:	6839      	ldr	r1, [r7, #0]
 8016946:	6878      	ldr	r0, [r7, #4]
 8016948:	f000 fa49 	bl	8016dde <USBD_CtlError>
            err++;
 801694c:	7afb      	ldrb	r3, [r7, #11]
 801694e:	3301      	adds	r3, #1
 8016950:	72fb      	strb	r3, [r7, #11]
          break;
 8016952:	e007      	b.n	8016964 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016954:	6839      	ldr	r1, [r7, #0]
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f000 fa41 	bl	8016dde <USBD_CtlError>
          err++;
 801695c:	7afb      	ldrb	r3, [r7, #11]
 801695e:	3301      	adds	r3, #1
 8016960:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016962:	bf00      	nop
      }
      break;
 8016964:	e037      	b.n	80169d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	7c1b      	ldrb	r3, [r3, #16]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d109      	bne.n	8016982 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016976:	f107 0208 	add.w	r2, r7, #8
 801697a:	4610      	mov	r0, r2
 801697c:	4798      	blx	r3
 801697e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016980:	e029      	b.n	80169d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016982:	6839      	ldr	r1, [r7, #0]
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	f000 fa2a 	bl	8016dde <USBD_CtlError>
        err++;
 801698a:	7afb      	ldrb	r3, [r7, #11]
 801698c:	3301      	adds	r3, #1
 801698e:	72fb      	strb	r3, [r7, #11]
      break;
 8016990:	e021      	b.n	80169d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	7c1b      	ldrb	r3, [r3, #16]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d10d      	bne.n	80169b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80169a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169a2:	f107 0208 	add.w	r2, r7, #8
 80169a6:	4610      	mov	r0, r2
 80169a8:	4798      	blx	r3
 80169aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	3301      	adds	r3, #1
 80169b0:	2207      	movs	r2, #7
 80169b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80169b4:	e00f      	b.n	80169d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80169b6:	6839      	ldr	r1, [r7, #0]
 80169b8:	6878      	ldr	r0, [r7, #4]
 80169ba:	f000 fa10 	bl	8016dde <USBD_CtlError>
        err++;
 80169be:	7afb      	ldrb	r3, [r7, #11]
 80169c0:	3301      	adds	r3, #1
 80169c2:	72fb      	strb	r3, [r7, #11]
      break;
 80169c4:	e007      	b.n	80169d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80169c6:	6839      	ldr	r1, [r7, #0]
 80169c8:	6878      	ldr	r0, [r7, #4]
 80169ca:	f000 fa08 	bl	8016dde <USBD_CtlError>
      err++;
 80169ce:	7afb      	ldrb	r3, [r7, #11]
 80169d0:	3301      	adds	r3, #1
 80169d2:	72fb      	strb	r3, [r7, #11]
      break;
 80169d4:	bf00      	nop
  }

  if (err != 0U)
 80169d6:	7afb      	ldrb	r3, [r7, #11]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d11e      	bne.n	8016a1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	88db      	ldrh	r3, [r3, #6]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d016      	beq.n	8016a12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80169e4:	893b      	ldrh	r3, [r7, #8]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d00e      	beq.n	8016a08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80169ea:	683b      	ldr	r3, [r7, #0]
 80169ec:	88da      	ldrh	r2, [r3, #6]
 80169ee:	893b      	ldrh	r3, [r7, #8]
 80169f0:	4293      	cmp	r3, r2
 80169f2:	bf28      	it	cs
 80169f4:	4613      	movcs	r3, r2
 80169f6:	b29b      	uxth	r3, r3
 80169f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80169fa:	893b      	ldrh	r3, [r7, #8]
 80169fc:	461a      	mov	r2, r3
 80169fe:	68f9      	ldr	r1, [r7, #12]
 8016a00:	6878      	ldr	r0, [r7, #4]
 8016a02:	f000 fa5d 	bl	8016ec0 <USBD_CtlSendData>
 8016a06:	e009      	b.n	8016a1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016a08:	6839      	ldr	r1, [r7, #0]
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f000 f9e7 	bl	8016dde <USBD_CtlError>
 8016a10:	e004      	b.n	8016a1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016a12:	6878      	ldr	r0, [r7, #4]
 8016a14:	f000 faae 	bl	8016f74 <USBD_CtlSendStatus>
 8016a18:	e000      	b.n	8016a1c <USBD_GetDescriptor+0x2cc>
    return;
 8016a1a:	bf00      	nop
  }
}
 8016a1c:	3710      	adds	r7, #16
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
 8016a22:	bf00      	nop

08016a24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b084      	sub	sp, #16
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
 8016a2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	889b      	ldrh	r3, [r3, #4]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d131      	bne.n	8016a9a <USBD_SetAddress+0x76>
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	88db      	ldrh	r3, [r3, #6]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d12d      	bne.n	8016a9a <USBD_SetAddress+0x76>
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	885b      	ldrh	r3, [r3, #2]
 8016a42:	2b7f      	cmp	r3, #127	; 0x7f
 8016a44:	d829      	bhi.n	8016a9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	885b      	ldrh	r3, [r3, #2]
 8016a4a:	b2db      	uxtb	r3, r3
 8016a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016a50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a58:	b2db      	uxtb	r3, r3
 8016a5a:	2b03      	cmp	r3, #3
 8016a5c:	d104      	bne.n	8016a68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016a5e:	6839      	ldr	r1, [r7, #0]
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f000 f9bc 	bl	8016dde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a66:	e01d      	b.n	8016aa4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	7bfa      	ldrb	r2, [r7, #15]
 8016a6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016a70:	7bfb      	ldrb	r3, [r7, #15]
 8016a72:	4619      	mov	r1, r3
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	f003 fee3 	bl	801a840 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016a7a:	6878      	ldr	r0, [r7, #4]
 8016a7c:	f000 fa7a 	bl	8016f74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016a80:	7bfb      	ldrb	r3, [r7, #15]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d004      	beq.n	8016a90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2202      	movs	r2, #2
 8016a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a8e:	e009      	b.n	8016aa4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	2201      	movs	r2, #1
 8016a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a98:	e004      	b.n	8016aa4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016a9a:	6839      	ldr	r1, [r7, #0]
 8016a9c:	6878      	ldr	r0, [r7, #4]
 8016a9e:	f000 f99e 	bl	8016dde <USBD_CtlError>
  }
}
 8016aa2:	bf00      	nop
 8016aa4:	bf00      	nop
 8016aa6:	3710      	adds	r7, #16
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}

08016aac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b084      	sub	sp, #16
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
 8016ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016aba:	683b      	ldr	r3, [r7, #0]
 8016abc:	885b      	ldrh	r3, [r3, #2]
 8016abe:	b2da      	uxtb	r2, r3
 8016ac0:	4b4e      	ldr	r3, [pc, #312]	; (8016bfc <USBD_SetConfig+0x150>)
 8016ac2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016ac4:	4b4d      	ldr	r3, [pc, #308]	; (8016bfc <USBD_SetConfig+0x150>)
 8016ac6:	781b      	ldrb	r3, [r3, #0]
 8016ac8:	2b01      	cmp	r3, #1
 8016aca:	d905      	bls.n	8016ad8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016acc:	6839      	ldr	r1, [r7, #0]
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f000 f985 	bl	8016dde <USBD_CtlError>
    return USBD_FAIL;
 8016ad4:	2303      	movs	r3, #3
 8016ad6:	e08c      	b.n	8016bf2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ade:	b2db      	uxtb	r3, r3
 8016ae0:	2b02      	cmp	r3, #2
 8016ae2:	d002      	beq.n	8016aea <USBD_SetConfig+0x3e>
 8016ae4:	2b03      	cmp	r3, #3
 8016ae6:	d029      	beq.n	8016b3c <USBD_SetConfig+0x90>
 8016ae8:	e075      	b.n	8016bd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016aea:	4b44      	ldr	r3, [pc, #272]	; (8016bfc <USBD_SetConfig+0x150>)
 8016aec:	781b      	ldrb	r3, [r3, #0]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d020      	beq.n	8016b34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016af2:	4b42      	ldr	r3, [pc, #264]	; (8016bfc <USBD_SetConfig+0x150>)
 8016af4:	781b      	ldrb	r3, [r3, #0]
 8016af6:	461a      	mov	r2, r3
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016afc:	4b3f      	ldr	r3, [pc, #252]	; (8016bfc <USBD_SetConfig+0x150>)
 8016afe:	781b      	ldrb	r3, [r3, #0]
 8016b00:	4619      	mov	r1, r3
 8016b02:	6878      	ldr	r0, [r7, #4]
 8016b04:	f7fe ffe1 	bl	8015aca <USBD_SetClassConfig>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016b0c:	7bfb      	ldrb	r3, [r7, #15]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d008      	beq.n	8016b24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016b12:	6839      	ldr	r1, [r7, #0]
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f000 f962 	bl	8016dde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	2202      	movs	r2, #2
 8016b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016b22:	e065      	b.n	8016bf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016b24:	6878      	ldr	r0, [r7, #4]
 8016b26:	f000 fa25 	bl	8016f74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	2203      	movs	r2, #3
 8016b2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016b32:	e05d      	b.n	8016bf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f000 fa1d 	bl	8016f74 <USBD_CtlSendStatus>
      break;
 8016b3a:	e059      	b.n	8016bf0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016b3c:	4b2f      	ldr	r3, [pc, #188]	; (8016bfc <USBD_SetConfig+0x150>)
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d112      	bne.n	8016b6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2202      	movs	r2, #2
 8016b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016b4c:	4b2b      	ldr	r3, [pc, #172]	; (8016bfc <USBD_SetConfig+0x150>)
 8016b4e:	781b      	ldrb	r3, [r3, #0]
 8016b50:	461a      	mov	r2, r3
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016b56:	4b29      	ldr	r3, [pc, #164]	; (8016bfc <USBD_SetConfig+0x150>)
 8016b58:	781b      	ldrb	r3, [r3, #0]
 8016b5a:	4619      	mov	r1, r3
 8016b5c:	6878      	ldr	r0, [r7, #4]
 8016b5e:	f7fe ffd0 	bl	8015b02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f000 fa06 	bl	8016f74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016b68:	e042      	b.n	8016bf0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016b6a:	4b24      	ldr	r3, [pc, #144]	; (8016bfc <USBD_SetConfig+0x150>)
 8016b6c:	781b      	ldrb	r3, [r3, #0]
 8016b6e:	461a      	mov	r2, r3
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	685b      	ldr	r3, [r3, #4]
 8016b74:	429a      	cmp	r2, r3
 8016b76:	d02a      	beq.n	8016bce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	685b      	ldr	r3, [r3, #4]
 8016b7c:	b2db      	uxtb	r3, r3
 8016b7e:	4619      	mov	r1, r3
 8016b80:	6878      	ldr	r0, [r7, #4]
 8016b82:	f7fe ffbe 	bl	8015b02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016b86:	4b1d      	ldr	r3, [pc, #116]	; (8016bfc <USBD_SetConfig+0x150>)
 8016b88:	781b      	ldrb	r3, [r3, #0]
 8016b8a:	461a      	mov	r2, r3
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016b90:	4b1a      	ldr	r3, [pc, #104]	; (8016bfc <USBD_SetConfig+0x150>)
 8016b92:	781b      	ldrb	r3, [r3, #0]
 8016b94:	4619      	mov	r1, r3
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f7fe ff97 	bl	8015aca <USBD_SetClassConfig>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016ba0:	7bfb      	ldrb	r3, [r7, #15]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d00f      	beq.n	8016bc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016ba6:	6839      	ldr	r1, [r7, #0]
 8016ba8:	6878      	ldr	r0, [r7, #4]
 8016baa:	f000 f918 	bl	8016dde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	685b      	ldr	r3, [r3, #4]
 8016bb2:	b2db      	uxtb	r3, r3
 8016bb4:	4619      	mov	r1, r3
 8016bb6:	6878      	ldr	r0, [r7, #4]
 8016bb8:	f7fe ffa3 	bl	8015b02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	2202      	movs	r2, #2
 8016bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016bc4:	e014      	b.n	8016bf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016bc6:	6878      	ldr	r0, [r7, #4]
 8016bc8:	f000 f9d4 	bl	8016f74 <USBD_CtlSendStatus>
      break;
 8016bcc:	e010      	b.n	8016bf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016bce:	6878      	ldr	r0, [r7, #4]
 8016bd0:	f000 f9d0 	bl	8016f74 <USBD_CtlSendStatus>
      break;
 8016bd4:	e00c      	b.n	8016bf0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016bd6:	6839      	ldr	r1, [r7, #0]
 8016bd8:	6878      	ldr	r0, [r7, #4]
 8016bda:	f000 f900 	bl	8016dde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016bde:	4b07      	ldr	r3, [pc, #28]	; (8016bfc <USBD_SetConfig+0x150>)
 8016be0:	781b      	ldrb	r3, [r3, #0]
 8016be2:	4619      	mov	r1, r3
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f7fe ff8c 	bl	8015b02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016bea:	2303      	movs	r3, #3
 8016bec:	73fb      	strb	r3, [r7, #15]
      break;
 8016bee:	bf00      	nop
  }

  return ret;
 8016bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3710      	adds	r7, #16
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}
 8016bfa:	bf00      	nop
 8016bfc:	2400152c 	.word	0x2400152c

08016c00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b082      	sub	sp, #8
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
 8016c08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016c0a:	683b      	ldr	r3, [r7, #0]
 8016c0c:	88db      	ldrh	r3, [r3, #6]
 8016c0e:	2b01      	cmp	r3, #1
 8016c10:	d004      	beq.n	8016c1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016c12:	6839      	ldr	r1, [r7, #0]
 8016c14:	6878      	ldr	r0, [r7, #4]
 8016c16:	f000 f8e2 	bl	8016dde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016c1a:	e023      	b.n	8016c64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c22:	b2db      	uxtb	r3, r3
 8016c24:	2b02      	cmp	r3, #2
 8016c26:	dc02      	bgt.n	8016c2e <USBD_GetConfig+0x2e>
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	dc03      	bgt.n	8016c34 <USBD_GetConfig+0x34>
 8016c2c:	e015      	b.n	8016c5a <USBD_GetConfig+0x5a>
 8016c2e:	2b03      	cmp	r3, #3
 8016c30:	d00b      	beq.n	8016c4a <USBD_GetConfig+0x4a>
 8016c32:	e012      	b.n	8016c5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2200      	movs	r2, #0
 8016c38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	3308      	adds	r3, #8
 8016c3e:	2201      	movs	r2, #1
 8016c40:	4619      	mov	r1, r3
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	f000 f93c 	bl	8016ec0 <USBD_CtlSendData>
        break;
 8016c48:	e00c      	b.n	8016c64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	3304      	adds	r3, #4
 8016c4e:	2201      	movs	r2, #1
 8016c50:	4619      	mov	r1, r3
 8016c52:	6878      	ldr	r0, [r7, #4]
 8016c54:	f000 f934 	bl	8016ec0 <USBD_CtlSendData>
        break;
 8016c58:	e004      	b.n	8016c64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016c5a:	6839      	ldr	r1, [r7, #0]
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f000 f8be 	bl	8016dde <USBD_CtlError>
        break;
 8016c62:	bf00      	nop
}
 8016c64:	bf00      	nop
 8016c66:	3708      	adds	r7, #8
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b082      	sub	sp, #8
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
 8016c74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c7c:	b2db      	uxtb	r3, r3
 8016c7e:	3b01      	subs	r3, #1
 8016c80:	2b02      	cmp	r3, #2
 8016c82:	d81e      	bhi.n	8016cc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	88db      	ldrh	r3, [r3, #6]
 8016c88:	2b02      	cmp	r3, #2
 8016c8a:	d004      	beq.n	8016c96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016c8c:	6839      	ldr	r1, [r7, #0]
 8016c8e:	6878      	ldr	r0, [r7, #4]
 8016c90:	f000 f8a5 	bl	8016dde <USBD_CtlError>
        break;
 8016c94:	e01a      	b.n	8016ccc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2201      	movs	r2, #1
 8016c9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d005      	beq.n	8016cb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	68db      	ldr	r3, [r3, #12]
 8016caa:	f043 0202 	orr.w	r2, r3, #2
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	330c      	adds	r3, #12
 8016cb6:	2202      	movs	r2, #2
 8016cb8:	4619      	mov	r1, r3
 8016cba:	6878      	ldr	r0, [r7, #4]
 8016cbc:	f000 f900 	bl	8016ec0 <USBD_CtlSendData>
      break;
 8016cc0:	e004      	b.n	8016ccc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016cc2:	6839      	ldr	r1, [r7, #0]
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	f000 f88a 	bl	8016dde <USBD_CtlError>
      break;
 8016cca:	bf00      	nop
  }
}
 8016ccc:	bf00      	nop
 8016cce:	3708      	adds	r7, #8
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd80      	pop	{r7, pc}

08016cd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b082      	sub	sp, #8
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
 8016cdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016cde:	683b      	ldr	r3, [r7, #0]
 8016ce0:	885b      	ldrh	r3, [r3, #2]
 8016ce2:	2b01      	cmp	r3, #1
 8016ce4:	d107      	bne.n	8016cf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	2201      	movs	r2, #1
 8016cea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f000 f940 	bl	8016f74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016cf4:	e013      	b.n	8016d1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	885b      	ldrh	r3, [r3, #2]
 8016cfa:	2b02      	cmp	r3, #2
 8016cfc:	d10b      	bne.n	8016d16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	889b      	ldrh	r3, [r3, #4]
 8016d02:	0a1b      	lsrs	r3, r3, #8
 8016d04:	b29b      	uxth	r3, r3
 8016d06:	b2da      	uxtb	r2, r3
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016d0e:	6878      	ldr	r0, [r7, #4]
 8016d10:	f000 f930 	bl	8016f74 <USBD_CtlSendStatus>
}
 8016d14:	e003      	b.n	8016d1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016d16:	6839      	ldr	r1, [r7, #0]
 8016d18:	6878      	ldr	r0, [r7, #4]
 8016d1a:	f000 f860 	bl	8016dde <USBD_CtlError>
}
 8016d1e:	bf00      	nop
 8016d20:	3708      	adds	r7, #8
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd80      	pop	{r7, pc}

08016d26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d26:	b580      	push	{r7, lr}
 8016d28:	b082      	sub	sp, #8
 8016d2a:	af00      	add	r7, sp, #0
 8016d2c:	6078      	str	r0, [r7, #4]
 8016d2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d36:	b2db      	uxtb	r3, r3
 8016d38:	3b01      	subs	r3, #1
 8016d3a:	2b02      	cmp	r3, #2
 8016d3c:	d80b      	bhi.n	8016d56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016d3e:	683b      	ldr	r3, [r7, #0]
 8016d40:	885b      	ldrh	r3, [r3, #2]
 8016d42:	2b01      	cmp	r3, #1
 8016d44:	d10c      	bne.n	8016d60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	2200      	movs	r2, #0
 8016d4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016d4e:	6878      	ldr	r0, [r7, #4]
 8016d50:	f000 f910 	bl	8016f74 <USBD_CtlSendStatus>
      }
      break;
 8016d54:	e004      	b.n	8016d60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016d56:	6839      	ldr	r1, [r7, #0]
 8016d58:	6878      	ldr	r0, [r7, #4]
 8016d5a:	f000 f840 	bl	8016dde <USBD_CtlError>
      break;
 8016d5e:	e000      	b.n	8016d62 <USBD_ClrFeature+0x3c>
      break;
 8016d60:	bf00      	nop
  }
}
 8016d62:	bf00      	nop
 8016d64:	3708      	adds	r7, #8
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}

08016d6a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016d6a:	b580      	push	{r7, lr}
 8016d6c:	b084      	sub	sp, #16
 8016d6e:	af00      	add	r7, sp, #0
 8016d70:	6078      	str	r0, [r7, #4]
 8016d72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	781a      	ldrb	r2, [r3, #0]
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	3301      	adds	r3, #1
 8016d84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	781a      	ldrb	r2, [r3, #0]
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	3301      	adds	r3, #1
 8016d92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016d94:	68f8      	ldr	r0, [r7, #12]
 8016d96:	f7ff fa41 	bl	801621c <SWAPBYTE>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	461a      	mov	r2, r3
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	3301      	adds	r3, #1
 8016da6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	3301      	adds	r3, #1
 8016dac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016dae:	68f8      	ldr	r0, [r7, #12]
 8016db0:	f7ff fa34 	bl	801621c <SWAPBYTE>
 8016db4:	4603      	mov	r3, r0
 8016db6:	461a      	mov	r2, r3
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	3301      	adds	r3, #1
 8016dc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016dc8:	68f8      	ldr	r0, [r7, #12]
 8016dca:	f7ff fa27 	bl	801621c <SWAPBYTE>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	461a      	mov	r2, r3
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	80da      	strh	r2, [r3, #6]
}
 8016dd6:	bf00      	nop
 8016dd8:	3710      	adds	r7, #16
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}

08016dde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016dde:	b580      	push	{r7, lr}
 8016de0:	b082      	sub	sp, #8
 8016de2:	af00      	add	r7, sp, #0
 8016de4:	6078      	str	r0, [r7, #4]
 8016de6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016de8:	2180      	movs	r1, #128	; 0x80
 8016dea:	6878      	ldr	r0, [r7, #4]
 8016dec:	f003 fcbe 	bl	801a76c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016df0:	2100      	movs	r1, #0
 8016df2:	6878      	ldr	r0, [r7, #4]
 8016df4:	f003 fcba 	bl	801a76c <USBD_LL_StallEP>
}
 8016df8:	bf00      	nop
 8016dfa:	3708      	adds	r7, #8
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b086      	sub	sp, #24
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	60f8      	str	r0, [r7, #12]
 8016e08:	60b9      	str	r1, [r7, #8]
 8016e0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d036      	beq.n	8016e84 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016e1a:	6938      	ldr	r0, [r7, #16]
 8016e1c:	f000 f836 	bl	8016e8c <USBD_GetLen>
 8016e20:	4603      	mov	r3, r0
 8016e22:	3301      	adds	r3, #1
 8016e24:	b29b      	uxth	r3, r3
 8016e26:	005b      	lsls	r3, r3, #1
 8016e28:	b29a      	uxth	r2, r3
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016e2e:	7dfb      	ldrb	r3, [r7, #23]
 8016e30:	68ba      	ldr	r2, [r7, #8]
 8016e32:	4413      	add	r3, r2
 8016e34:	687a      	ldr	r2, [r7, #4]
 8016e36:	7812      	ldrb	r2, [r2, #0]
 8016e38:	701a      	strb	r2, [r3, #0]
  idx++;
 8016e3a:	7dfb      	ldrb	r3, [r7, #23]
 8016e3c:	3301      	adds	r3, #1
 8016e3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016e40:	7dfb      	ldrb	r3, [r7, #23]
 8016e42:	68ba      	ldr	r2, [r7, #8]
 8016e44:	4413      	add	r3, r2
 8016e46:	2203      	movs	r2, #3
 8016e48:	701a      	strb	r2, [r3, #0]
  idx++;
 8016e4a:	7dfb      	ldrb	r3, [r7, #23]
 8016e4c:	3301      	adds	r3, #1
 8016e4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016e50:	e013      	b.n	8016e7a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016e52:	7dfb      	ldrb	r3, [r7, #23]
 8016e54:	68ba      	ldr	r2, [r7, #8]
 8016e56:	4413      	add	r3, r2
 8016e58:	693a      	ldr	r2, [r7, #16]
 8016e5a:	7812      	ldrb	r2, [r2, #0]
 8016e5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016e5e:	693b      	ldr	r3, [r7, #16]
 8016e60:	3301      	adds	r3, #1
 8016e62:	613b      	str	r3, [r7, #16]
    idx++;
 8016e64:	7dfb      	ldrb	r3, [r7, #23]
 8016e66:	3301      	adds	r3, #1
 8016e68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016e6a:	7dfb      	ldrb	r3, [r7, #23]
 8016e6c:	68ba      	ldr	r2, [r7, #8]
 8016e6e:	4413      	add	r3, r2
 8016e70:	2200      	movs	r2, #0
 8016e72:	701a      	strb	r2, [r3, #0]
    idx++;
 8016e74:	7dfb      	ldrb	r3, [r7, #23]
 8016e76:	3301      	adds	r3, #1
 8016e78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016e7a:	693b      	ldr	r3, [r7, #16]
 8016e7c:	781b      	ldrb	r3, [r3, #0]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d1e7      	bne.n	8016e52 <USBD_GetString+0x52>
 8016e82:	e000      	b.n	8016e86 <USBD_GetString+0x86>
    return;
 8016e84:	bf00      	nop
  }
}
 8016e86:	3718      	adds	r7, #24
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	bd80      	pop	{r7, pc}

08016e8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016e8c:	b480      	push	{r7}
 8016e8e:	b085      	sub	sp, #20
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016e94:	2300      	movs	r3, #0
 8016e96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016e9c:	e005      	b.n	8016eaa <USBD_GetLen+0x1e>
  {
    len++;
 8016e9e:	7bfb      	ldrb	r3, [r7, #15]
 8016ea0:	3301      	adds	r3, #1
 8016ea2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016ea4:	68bb      	ldr	r3, [r7, #8]
 8016ea6:	3301      	adds	r3, #1
 8016ea8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016eaa:	68bb      	ldr	r3, [r7, #8]
 8016eac:	781b      	ldrb	r3, [r3, #0]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d1f5      	bne.n	8016e9e <USBD_GetLen+0x12>
  }

  return len;
 8016eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	3714      	adds	r7, #20
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ebe:	4770      	bx	lr

08016ec0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b084      	sub	sp, #16
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	60f8      	str	r0, [r7, #12]
 8016ec8:	60b9      	str	r1, [r7, #8]
 8016eca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	2202      	movs	r2, #2
 8016ed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	687a      	ldr	r2, [r7, #4]
 8016ed8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	687a      	ldr	r2, [r7, #4]
 8016ede:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	68ba      	ldr	r2, [r7, #8]
 8016ee4:	2100      	movs	r1, #0
 8016ee6:	68f8      	ldr	r0, [r7, #12]
 8016ee8:	f003 fcc9 	bl	801a87e <USBD_LL_Transmit>

  return USBD_OK;
 8016eec:	2300      	movs	r3, #0
}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	3710      	adds	r7, #16
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd80      	pop	{r7, pc}

08016ef6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016ef6:	b580      	push	{r7, lr}
 8016ef8:	b084      	sub	sp, #16
 8016efa:	af00      	add	r7, sp, #0
 8016efc:	60f8      	str	r0, [r7, #12]
 8016efe:	60b9      	str	r1, [r7, #8]
 8016f00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	68ba      	ldr	r2, [r7, #8]
 8016f06:	2100      	movs	r1, #0
 8016f08:	68f8      	ldr	r0, [r7, #12]
 8016f0a:	f003 fcb8 	bl	801a87e <USBD_LL_Transmit>

  return USBD_OK;
 8016f0e:	2300      	movs	r3, #0
}
 8016f10:	4618      	mov	r0, r3
 8016f12:	3710      	adds	r7, #16
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd80      	pop	{r7, pc}

08016f18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b084      	sub	sp, #16
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	60f8      	str	r0, [r7, #12]
 8016f20:	60b9      	str	r1, [r7, #8]
 8016f22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	2203      	movs	r2, #3
 8016f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	687a      	ldr	r2, [r7, #4]
 8016f30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	687a      	ldr	r2, [r7, #4]
 8016f38:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	68ba      	ldr	r2, [r7, #8]
 8016f40:	2100      	movs	r1, #0
 8016f42:	68f8      	ldr	r0, [r7, #12]
 8016f44:	f003 fcbc 	bl	801a8c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016f48:	2300      	movs	r3, #0
}
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	3710      	adds	r7, #16
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}

08016f52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016f52:	b580      	push	{r7, lr}
 8016f54:	b084      	sub	sp, #16
 8016f56:	af00      	add	r7, sp, #0
 8016f58:	60f8      	str	r0, [r7, #12]
 8016f5a:	60b9      	str	r1, [r7, #8]
 8016f5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	68ba      	ldr	r2, [r7, #8]
 8016f62:	2100      	movs	r1, #0
 8016f64:	68f8      	ldr	r0, [r7, #12]
 8016f66:	f003 fcab 	bl	801a8c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016f6a:	2300      	movs	r3, #0
}
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	3710      	adds	r7, #16
 8016f70:	46bd      	mov	sp, r7
 8016f72:	bd80      	pop	{r7, pc}

08016f74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b082      	sub	sp, #8
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	2204      	movs	r2, #4
 8016f80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016f84:	2300      	movs	r3, #0
 8016f86:	2200      	movs	r2, #0
 8016f88:	2100      	movs	r1, #0
 8016f8a:	6878      	ldr	r0, [r7, #4]
 8016f8c:	f003 fc77 	bl	801a87e <USBD_LL_Transmit>

  return USBD_OK;
 8016f90:	2300      	movs	r3, #0
}
 8016f92:	4618      	mov	r0, r3
 8016f94:	3708      	adds	r7, #8
 8016f96:	46bd      	mov	sp, r7
 8016f98:	bd80      	pop	{r7, pc}

08016f9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016f9a:	b580      	push	{r7, lr}
 8016f9c:	b082      	sub	sp, #8
 8016f9e:	af00      	add	r7, sp, #0
 8016fa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	2205      	movs	r2, #5
 8016fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016faa:	2300      	movs	r3, #0
 8016fac:	2200      	movs	r2, #0
 8016fae:	2100      	movs	r1, #0
 8016fb0:	6878      	ldr	r0, [r7, #4]
 8016fb2:	f003 fc85 	bl	801a8c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016fb6:	2300      	movs	r3, #0
}
 8016fb8:	4618      	mov	r0, r3
 8016fba:	3708      	adds	r7, #8
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}

08016fc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b084      	sub	sp, #16
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016fca:	79fb      	ldrb	r3, [r7, #7]
 8016fcc:	4a08      	ldr	r2, [pc, #32]	; (8016ff0 <disk_status+0x30>)
 8016fce:	009b      	lsls	r3, r3, #2
 8016fd0:	4413      	add	r3, r2
 8016fd2:	685b      	ldr	r3, [r3, #4]
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	79fa      	ldrb	r2, [r7, #7]
 8016fd8:	4905      	ldr	r1, [pc, #20]	; (8016ff0 <disk_status+0x30>)
 8016fda:	440a      	add	r2, r1
 8016fdc:	7a12      	ldrb	r2, [r2, #8]
 8016fde:	4610      	mov	r0, r2
 8016fe0:	4798      	blx	r3
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fe8:	4618      	mov	r0, r3
 8016fea:	3710      	adds	r7, #16
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd80      	pop	{r7, pc}
 8016ff0:	24001758 	.word	0x24001758

08016ff4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b084      	sub	sp, #16
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016ffe:	2300      	movs	r3, #0
 8017000:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8017002:	79fb      	ldrb	r3, [r7, #7]
 8017004:	4a0d      	ldr	r2, [pc, #52]	; (801703c <disk_initialize+0x48>)
 8017006:	5cd3      	ldrb	r3, [r2, r3]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d111      	bne.n	8017030 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801700c:	79fb      	ldrb	r3, [r7, #7]
 801700e:	4a0b      	ldr	r2, [pc, #44]	; (801703c <disk_initialize+0x48>)
 8017010:	2101      	movs	r1, #1
 8017012:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017014:	79fb      	ldrb	r3, [r7, #7]
 8017016:	4a09      	ldr	r2, [pc, #36]	; (801703c <disk_initialize+0x48>)
 8017018:	009b      	lsls	r3, r3, #2
 801701a:	4413      	add	r3, r2
 801701c:	685b      	ldr	r3, [r3, #4]
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	79fa      	ldrb	r2, [r7, #7]
 8017022:	4906      	ldr	r1, [pc, #24]	; (801703c <disk_initialize+0x48>)
 8017024:	440a      	add	r2, r1
 8017026:	7a12      	ldrb	r2, [r2, #8]
 8017028:	4610      	mov	r0, r2
 801702a:	4798      	blx	r3
 801702c:	4603      	mov	r3, r0
 801702e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8017030:	7bfb      	ldrb	r3, [r7, #15]
}
 8017032:	4618      	mov	r0, r3
 8017034:	3710      	adds	r7, #16
 8017036:	46bd      	mov	sp, r7
 8017038:	bd80      	pop	{r7, pc}
 801703a:	bf00      	nop
 801703c:	24001758 	.word	0x24001758

08017040 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017040:	b590      	push	{r4, r7, lr}
 8017042:	b087      	sub	sp, #28
 8017044:	af00      	add	r7, sp, #0
 8017046:	60b9      	str	r1, [r7, #8]
 8017048:	607a      	str	r2, [r7, #4]
 801704a:	603b      	str	r3, [r7, #0]
 801704c:	4603      	mov	r3, r0
 801704e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017050:	7bfb      	ldrb	r3, [r7, #15]
 8017052:	4a0a      	ldr	r2, [pc, #40]	; (801707c <disk_read+0x3c>)
 8017054:	009b      	lsls	r3, r3, #2
 8017056:	4413      	add	r3, r2
 8017058:	685b      	ldr	r3, [r3, #4]
 801705a:	689c      	ldr	r4, [r3, #8]
 801705c:	7bfb      	ldrb	r3, [r7, #15]
 801705e:	4a07      	ldr	r2, [pc, #28]	; (801707c <disk_read+0x3c>)
 8017060:	4413      	add	r3, r2
 8017062:	7a18      	ldrb	r0, [r3, #8]
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	687a      	ldr	r2, [r7, #4]
 8017068:	68b9      	ldr	r1, [r7, #8]
 801706a:	47a0      	blx	r4
 801706c:	4603      	mov	r3, r0
 801706e:	75fb      	strb	r3, [r7, #23]
  return res;
 8017070:	7dfb      	ldrb	r3, [r7, #23]
}
 8017072:	4618      	mov	r0, r3
 8017074:	371c      	adds	r7, #28
 8017076:	46bd      	mov	sp, r7
 8017078:	bd90      	pop	{r4, r7, pc}
 801707a:	bf00      	nop
 801707c:	24001758 	.word	0x24001758

08017080 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017080:	b590      	push	{r4, r7, lr}
 8017082:	b087      	sub	sp, #28
 8017084:	af00      	add	r7, sp, #0
 8017086:	60b9      	str	r1, [r7, #8]
 8017088:	607a      	str	r2, [r7, #4]
 801708a:	603b      	str	r3, [r7, #0]
 801708c:	4603      	mov	r3, r0
 801708e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017090:	7bfb      	ldrb	r3, [r7, #15]
 8017092:	4a0a      	ldr	r2, [pc, #40]	; (80170bc <disk_write+0x3c>)
 8017094:	009b      	lsls	r3, r3, #2
 8017096:	4413      	add	r3, r2
 8017098:	685b      	ldr	r3, [r3, #4]
 801709a:	68dc      	ldr	r4, [r3, #12]
 801709c:	7bfb      	ldrb	r3, [r7, #15]
 801709e:	4a07      	ldr	r2, [pc, #28]	; (80170bc <disk_write+0x3c>)
 80170a0:	4413      	add	r3, r2
 80170a2:	7a18      	ldrb	r0, [r3, #8]
 80170a4:	683b      	ldr	r3, [r7, #0]
 80170a6:	687a      	ldr	r2, [r7, #4]
 80170a8:	68b9      	ldr	r1, [r7, #8]
 80170aa:	47a0      	blx	r4
 80170ac:	4603      	mov	r3, r0
 80170ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80170b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80170b2:	4618      	mov	r0, r3
 80170b4:	371c      	adds	r7, #28
 80170b6:	46bd      	mov	sp, r7
 80170b8:	bd90      	pop	{r4, r7, pc}
 80170ba:	bf00      	nop
 80170bc:	24001758 	.word	0x24001758

080170c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b084      	sub	sp, #16
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	4603      	mov	r3, r0
 80170c8:	603a      	str	r2, [r7, #0]
 80170ca:	71fb      	strb	r3, [r7, #7]
 80170cc:	460b      	mov	r3, r1
 80170ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80170d0:	79fb      	ldrb	r3, [r7, #7]
 80170d2:	4a09      	ldr	r2, [pc, #36]	; (80170f8 <disk_ioctl+0x38>)
 80170d4:	009b      	lsls	r3, r3, #2
 80170d6:	4413      	add	r3, r2
 80170d8:	685b      	ldr	r3, [r3, #4]
 80170da:	691b      	ldr	r3, [r3, #16]
 80170dc:	79fa      	ldrb	r2, [r7, #7]
 80170de:	4906      	ldr	r1, [pc, #24]	; (80170f8 <disk_ioctl+0x38>)
 80170e0:	440a      	add	r2, r1
 80170e2:	7a10      	ldrb	r0, [r2, #8]
 80170e4:	79b9      	ldrb	r1, [r7, #6]
 80170e6:	683a      	ldr	r2, [r7, #0]
 80170e8:	4798      	blx	r3
 80170ea:	4603      	mov	r3, r0
 80170ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80170ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80170f0:	4618      	mov	r0, r3
 80170f2:	3710      	adds	r7, #16
 80170f4:	46bd      	mov	sp, r7
 80170f6:	bd80      	pop	{r7, pc}
 80170f8:	24001758 	.word	0x24001758

080170fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80170fc:	b480      	push	{r7}
 80170fe:	b085      	sub	sp, #20
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	3301      	adds	r3, #1
 8017108:	781b      	ldrb	r3, [r3, #0]
 801710a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801710c:	89fb      	ldrh	r3, [r7, #14]
 801710e:	021b      	lsls	r3, r3, #8
 8017110:	b21a      	sxth	r2, r3
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	781b      	ldrb	r3, [r3, #0]
 8017116:	b21b      	sxth	r3, r3
 8017118:	4313      	orrs	r3, r2
 801711a:	b21b      	sxth	r3, r3
 801711c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801711e:	89fb      	ldrh	r3, [r7, #14]
}
 8017120:	4618      	mov	r0, r3
 8017122:	3714      	adds	r7, #20
 8017124:	46bd      	mov	sp, r7
 8017126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712a:	4770      	bx	lr

0801712c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801712c:	b480      	push	{r7}
 801712e:	b085      	sub	sp, #20
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	3303      	adds	r3, #3
 8017138:	781b      	ldrb	r3, [r3, #0]
 801713a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	021b      	lsls	r3, r3, #8
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	3202      	adds	r2, #2
 8017144:	7812      	ldrb	r2, [r2, #0]
 8017146:	4313      	orrs	r3, r2
 8017148:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	021b      	lsls	r3, r3, #8
 801714e:	687a      	ldr	r2, [r7, #4]
 8017150:	3201      	adds	r2, #1
 8017152:	7812      	ldrb	r2, [r2, #0]
 8017154:	4313      	orrs	r3, r2
 8017156:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	021b      	lsls	r3, r3, #8
 801715c:	687a      	ldr	r2, [r7, #4]
 801715e:	7812      	ldrb	r2, [r2, #0]
 8017160:	4313      	orrs	r3, r2
 8017162:	60fb      	str	r3, [r7, #12]
	return rv;
 8017164:	68fb      	ldr	r3, [r7, #12]
}
 8017166:	4618      	mov	r0, r3
 8017168:	3714      	adds	r7, #20
 801716a:	46bd      	mov	sp, r7
 801716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017170:	4770      	bx	lr

08017172 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8017172:	b480      	push	{r7}
 8017174:	b083      	sub	sp, #12
 8017176:	af00      	add	r7, sp, #0
 8017178:	6078      	str	r0, [r7, #4]
 801717a:	460b      	mov	r3, r1
 801717c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	1c5a      	adds	r2, r3, #1
 8017182:	607a      	str	r2, [r7, #4]
 8017184:	887a      	ldrh	r2, [r7, #2]
 8017186:	b2d2      	uxtb	r2, r2
 8017188:	701a      	strb	r2, [r3, #0]
 801718a:	887b      	ldrh	r3, [r7, #2]
 801718c:	0a1b      	lsrs	r3, r3, #8
 801718e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	1c5a      	adds	r2, r3, #1
 8017194:	607a      	str	r2, [r7, #4]
 8017196:	887a      	ldrh	r2, [r7, #2]
 8017198:	b2d2      	uxtb	r2, r2
 801719a:	701a      	strb	r2, [r3, #0]
}
 801719c:	bf00      	nop
 801719e:	370c      	adds	r7, #12
 80171a0:	46bd      	mov	sp, r7
 80171a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a6:	4770      	bx	lr

080171a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80171a8:	b480      	push	{r7}
 80171aa:	b083      	sub	sp, #12
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
 80171b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	1c5a      	adds	r2, r3, #1
 80171b6:	607a      	str	r2, [r7, #4]
 80171b8:	683a      	ldr	r2, [r7, #0]
 80171ba:	b2d2      	uxtb	r2, r2
 80171bc:	701a      	strb	r2, [r3, #0]
 80171be:	683b      	ldr	r3, [r7, #0]
 80171c0:	0a1b      	lsrs	r3, r3, #8
 80171c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	1c5a      	adds	r2, r3, #1
 80171c8:	607a      	str	r2, [r7, #4]
 80171ca:	683a      	ldr	r2, [r7, #0]
 80171cc:	b2d2      	uxtb	r2, r2
 80171ce:	701a      	strb	r2, [r3, #0]
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	0a1b      	lsrs	r3, r3, #8
 80171d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	1c5a      	adds	r2, r3, #1
 80171da:	607a      	str	r2, [r7, #4]
 80171dc:	683a      	ldr	r2, [r7, #0]
 80171de:	b2d2      	uxtb	r2, r2
 80171e0:	701a      	strb	r2, [r3, #0]
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	0a1b      	lsrs	r3, r3, #8
 80171e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	1c5a      	adds	r2, r3, #1
 80171ec:	607a      	str	r2, [r7, #4]
 80171ee:	683a      	ldr	r2, [r7, #0]
 80171f0:	b2d2      	uxtb	r2, r2
 80171f2:	701a      	strb	r2, [r3, #0]
}
 80171f4:	bf00      	nop
 80171f6:	370c      	adds	r7, #12
 80171f8:	46bd      	mov	sp, r7
 80171fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171fe:	4770      	bx	lr

08017200 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017200:	b480      	push	{r7}
 8017202:	b087      	sub	sp, #28
 8017204:	af00      	add	r7, sp, #0
 8017206:	60f8      	str	r0, [r7, #12]
 8017208:	60b9      	str	r1, [r7, #8]
 801720a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017210:	68bb      	ldr	r3, [r7, #8]
 8017212:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d00d      	beq.n	8017236 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801721a:	693a      	ldr	r2, [r7, #16]
 801721c:	1c53      	adds	r3, r2, #1
 801721e:	613b      	str	r3, [r7, #16]
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	1c59      	adds	r1, r3, #1
 8017224:	6179      	str	r1, [r7, #20]
 8017226:	7812      	ldrb	r2, [r2, #0]
 8017228:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	3b01      	subs	r3, #1
 801722e:	607b      	str	r3, [r7, #4]
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d1f1      	bne.n	801721a <mem_cpy+0x1a>
	}
}
 8017236:	bf00      	nop
 8017238:	371c      	adds	r7, #28
 801723a:	46bd      	mov	sp, r7
 801723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017240:	4770      	bx	lr

08017242 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8017242:	b480      	push	{r7}
 8017244:	b087      	sub	sp, #28
 8017246:	af00      	add	r7, sp, #0
 8017248:	60f8      	str	r0, [r7, #12]
 801724a:	60b9      	str	r1, [r7, #8]
 801724c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8017252:	697b      	ldr	r3, [r7, #20]
 8017254:	1c5a      	adds	r2, r3, #1
 8017256:	617a      	str	r2, [r7, #20]
 8017258:	68ba      	ldr	r2, [r7, #8]
 801725a:	b2d2      	uxtb	r2, r2
 801725c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	3b01      	subs	r3, #1
 8017262:	607b      	str	r3, [r7, #4]
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d1f3      	bne.n	8017252 <mem_set+0x10>
}
 801726a:	bf00      	nop
 801726c:	bf00      	nop
 801726e:	371c      	adds	r7, #28
 8017270:	46bd      	mov	sp, r7
 8017272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017276:	4770      	bx	lr

08017278 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017278:	b480      	push	{r7}
 801727a:	b089      	sub	sp, #36	; 0x24
 801727c:	af00      	add	r7, sp, #0
 801727e:	60f8      	str	r0, [r7, #12]
 8017280:	60b9      	str	r1, [r7, #8]
 8017282:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	61fb      	str	r3, [r7, #28]
 8017288:	68bb      	ldr	r3, [r7, #8]
 801728a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801728c:	2300      	movs	r3, #0
 801728e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017290:	69fb      	ldr	r3, [r7, #28]
 8017292:	1c5a      	adds	r2, r3, #1
 8017294:	61fa      	str	r2, [r7, #28]
 8017296:	781b      	ldrb	r3, [r3, #0]
 8017298:	4619      	mov	r1, r3
 801729a:	69bb      	ldr	r3, [r7, #24]
 801729c:	1c5a      	adds	r2, r3, #1
 801729e:	61ba      	str	r2, [r7, #24]
 80172a0:	781b      	ldrb	r3, [r3, #0]
 80172a2:	1acb      	subs	r3, r1, r3
 80172a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	3b01      	subs	r3, #1
 80172aa:	607b      	str	r3, [r7, #4]
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d002      	beq.n	80172b8 <mem_cmp+0x40>
 80172b2:	697b      	ldr	r3, [r7, #20]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d0eb      	beq.n	8017290 <mem_cmp+0x18>

	return r;
 80172b8:	697b      	ldr	r3, [r7, #20]
}
 80172ba:	4618      	mov	r0, r3
 80172bc:	3724      	adds	r7, #36	; 0x24
 80172be:	46bd      	mov	sp, r7
 80172c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c4:	4770      	bx	lr

080172c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80172c6:	b480      	push	{r7}
 80172c8:	b083      	sub	sp, #12
 80172ca:	af00      	add	r7, sp, #0
 80172cc:	6078      	str	r0, [r7, #4]
 80172ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80172d0:	e002      	b.n	80172d8 <chk_chr+0x12>
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	3301      	adds	r3, #1
 80172d6:	607b      	str	r3, [r7, #4]
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	781b      	ldrb	r3, [r3, #0]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d005      	beq.n	80172ec <chk_chr+0x26>
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	781b      	ldrb	r3, [r3, #0]
 80172e4:	461a      	mov	r2, r3
 80172e6:	683b      	ldr	r3, [r7, #0]
 80172e8:	4293      	cmp	r3, r2
 80172ea:	d1f2      	bne.n	80172d2 <chk_chr+0xc>
	return *str;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	781b      	ldrb	r3, [r3, #0]
}
 80172f0:	4618      	mov	r0, r3
 80172f2:	370c      	adds	r7, #12
 80172f4:	46bd      	mov	sp, r7
 80172f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fa:	4770      	bx	lr

080172fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80172fc:	b480      	push	{r7}
 80172fe:	b085      	sub	sp, #20
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
 8017304:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017306:	2300      	movs	r3, #0
 8017308:	60bb      	str	r3, [r7, #8]
 801730a:	68bb      	ldr	r3, [r7, #8]
 801730c:	60fb      	str	r3, [r7, #12]
 801730e:	e029      	b.n	8017364 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017310:	4a27      	ldr	r2, [pc, #156]	; (80173b0 <chk_lock+0xb4>)
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	011b      	lsls	r3, r3, #4
 8017316:	4413      	add	r3, r2
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d01d      	beq.n	801735a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801731e:	4a24      	ldr	r2, [pc, #144]	; (80173b0 <chk_lock+0xb4>)
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	011b      	lsls	r3, r3, #4
 8017324:	4413      	add	r3, r2
 8017326:	681a      	ldr	r2, [r3, #0]
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	429a      	cmp	r2, r3
 801732e:	d116      	bne.n	801735e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8017330:	4a1f      	ldr	r2, [pc, #124]	; (80173b0 <chk_lock+0xb4>)
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	011b      	lsls	r3, r3, #4
 8017336:	4413      	add	r3, r2
 8017338:	3304      	adds	r3, #4
 801733a:	681a      	ldr	r2, [r3, #0]
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017340:	429a      	cmp	r2, r3
 8017342:	d10c      	bne.n	801735e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017344:	4a1a      	ldr	r2, [pc, #104]	; (80173b0 <chk_lock+0xb4>)
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	011b      	lsls	r3, r3, #4
 801734a:	4413      	add	r3, r2
 801734c:	3308      	adds	r3, #8
 801734e:	681a      	ldr	r2, [r3, #0]
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017354:	429a      	cmp	r2, r3
 8017356:	d102      	bne.n	801735e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017358:	e007      	b.n	801736a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801735a:	2301      	movs	r3, #1
 801735c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	3301      	adds	r3, #1
 8017362:	60fb      	str	r3, [r7, #12]
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	2b01      	cmp	r3, #1
 8017368:	d9d2      	bls.n	8017310 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	2b02      	cmp	r3, #2
 801736e:	d109      	bne.n	8017384 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017370:	68bb      	ldr	r3, [r7, #8]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d102      	bne.n	801737c <chk_lock+0x80>
 8017376:	683b      	ldr	r3, [r7, #0]
 8017378:	2b02      	cmp	r3, #2
 801737a:	d101      	bne.n	8017380 <chk_lock+0x84>
 801737c:	2300      	movs	r3, #0
 801737e:	e010      	b.n	80173a2 <chk_lock+0xa6>
 8017380:	2312      	movs	r3, #18
 8017382:	e00e      	b.n	80173a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017384:	683b      	ldr	r3, [r7, #0]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d108      	bne.n	801739c <chk_lock+0xa0>
 801738a:	4a09      	ldr	r2, [pc, #36]	; (80173b0 <chk_lock+0xb4>)
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	011b      	lsls	r3, r3, #4
 8017390:	4413      	add	r3, r2
 8017392:	330c      	adds	r3, #12
 8017394:	881b      	ldrh	r3, [r3, #0]
 8017396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801739a:	d101      	bne.n	80173a0 <chk_lock+0xa4>
 801739c:	2310      	movs	r3, #16
 801739e:	e000      	b.n	80173a2 <chk_lock+0xa6>
 80173a0:	2300      	movs	r3, #0
}
 80173a2:	4618      	mov	r0, r3
 80173a4:	3714      	adds	r7, #20
 80173a6:	46bd      	mov	sp, r7
 80173a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ac:	4770      	bx	lr
 80173ae:	bf00      	nop
 80173b0:	24001538 	.word	0x24001538

080173b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80173b4:	b480      	push	{r7}
 80173b6:	b083      	sub	sp, #12
 80173b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80173ba:	2300      	movs	r3, #0
 80173bc:	607b      	str	r3, [r7, #4]
 80173be:	e002      	b.n	80173c6 <enq_lock+0x12>
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	3301      	adds	r3, #1
 80173c4:	607b      	str	r3, [r7, #4]
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	2b01      	cmp	r3, #1
 80173ca:	d806      	bhi.n	80173da <enq_lock+0x26>
 80173cc:	4a09      	ldr	r2, [pc, #36]	; (80173f4 <enq_lock+0x40>)
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	011b      	lsls	r3, r3, #4
 80173d2:	4413      	add	r3, r2
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d1f2      	bne.n	80173c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	2b02      	cmp	r3, #2
 80173de:	bf14      	ite	ne
 80173e0:	2301      	movne	r3, #1
 80173e2:	2300      	moveq	r3, #0
 80173e4:	b2db      	uxtb	r3, r3
}
 80173e6:	4618      	mov	r0, r3
 80173e8:	370c      	adds	r7, #12
 80173ea:	46bd      	mov	sp, r7
 80173ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f0:	4770      	bx	lr
 80173f2:	bf00      	nop
 80173f4:	24001538 	.word	0x24001538

080173f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80173f8:	b480      	push	{r7}
 80173fa:	b085      	sub	sp, #20
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
 8017400:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017402:	2300      	movs	r3, #0
 8017404:	60fb      	str	r3, [r7, #12]
 8017406:	e01f      	b.n	8017448 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017408:	4a41      	ldr	r2, [pc, #260]	; (8017510 <inc_lock+0x118>)
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	011b      	lsls	r3, r3, #4
 801740e:	4413      	add	r3, r2
 8017410:	681a      	ldr	r2, [r3, #0]
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	429a      	cmp	r2, r3
 8017418:	d113      	bne.n	8017442 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801741a:	4a3d      	ldr	r2, [pc, #244]	; (8017510 <inc_lock+0x118>)
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	011b      	lsls	r3, r3, #4
 8017420:	4413      	add	r3, r2
 8017422:	3304      	adds	r3, #4
 8017424:	681a      	ldr	r2, [r3, #0]
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801742a:	429a      	cmp	r2, r3
 801742c:	d109      	bne.n	8017442 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801742e:	4a38      	ldr	r2, [pc, #224]	; (8017510 <inc_lock+0x118>)
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	011b      	lsls	r3, r3, #4
 8017434:	4413      	add	r3, r2
 8017436:	3308      	adds	r3, #8
 8017438:	681a      	ldr	r2, [r3, #0]
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801743e:	429a      	cmp	r2, r3
 8017440:	d006      	beq.n	8017450 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	3301      	adds	r3, #1
 8017446:	60fb      	str	r3, [r7, #12]
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	2b01      	cmp	r3, #1
 801744c:	d9dc      	bls.n	8017408 <inc_lock+0x10>
 801744e:	e000      	b.n	8017452 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017450:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	2b02      	cmp	r3, #2
 8017456:	d132      	bne.n	80174be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017458:	2300      	movs	r3, #0
 801745a:	60fb      	str	r3, [r7, #12]
 801745c:	e002      	b.n	8017464 <inc_lock+0x6c>
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	3301      	adds	r3, #1
 8017462:	60fb      	str	r3, [r7, #12]
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	2b01      	cmp	r3, #1
 8017468:	d806      	bhi.n	8017478 <inc_lock+0x80>
 801746a:	4a29      	ldr	r2, [pc, #164]	; (8017510 <inc_lock+0x118>)
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	011b      	lsls	r3, r3, #4
 8017470:	4413      	add	r3, r2
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d1f2      	bne.n	801745e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	2b02      	cmp	r3, #2
 801747c:	d101      	bne.n	8017482 <inc_lock+0x8a>
 801747e:	2300      	movs	r3, #0
 8017480:	e040      	b.n	8017504 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	681a      	ldr	r2, [r3, #0]
 8017486:	4922      	ldr	r1, [pc, #136]	; (8017510 <inc_lock+0x118>)
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	011b      	lsls	r3, r3, #4
 801748c:	440b      	add	r3, r1
 801748e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	689a      	ldr	r2, [r3, #8]
 8017494:	491e      	ldr	r1, [pc, #120]	; (8017510 <inc_lock+0x118>)
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	011b      	lsls	r3, r3, #4
 801749a:	440b      	add	r3, r1
 801749c:	3304      	adds	r3, #4
 801749e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	695a      	ldr	r2, [r3, #20]
 80174a4:	491a      	ldr	r1, [pc, #104]	; (8017510 <inc_lock+0x118>)
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	011b      	lsls	r3, r3, #4
 80174aa:	440b      	add	r3, r1
 80174ac:	3308      	adds	r3, #8
 80174ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80174b0:	4a17      	ldr	r2, [pc, #92]	; (8017510 <inc_lock+0x118>)
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	011b      	lsls	r3, r3, #4
 80174b6:	4413      	add	r3, r2
 80174b8:	330c      	adds	r3, #12
 80174ba:	2200      	movs	r2, #0
 80174bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80174be:	683b      	ldr	r3, [r7, #0]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d009      	beq.n	80174d8 <inc_lock+0xe0>
 80174c4:	4a12      	ldr	r2, [pc, #72]	; (8017510 <inc_lock+0x118>)
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	011b      	lsls	r3, r3, #4
 80174ca:	4413      	add	r3, r2
 80174cc:	330c      	adds	r3, #12
 80174ce:	881b      	ldrh	r3, [r3, #0]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d001      	beq.n	80174d8 <inc_lock+0xe0>
 80174d4:	2300      	movs	r3, #0
 80174d6:	e015      	b.n	8017504 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80174d8:	683b      	ldr	r3, [r7, #0]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d108      	bne.n	80174f0 <inc_lock+0xf8>
 80174de:	4a0c      	ldr	r2, [pc, #48]	; (8017510 <inc_lock+0x118>)
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	011b      	lsls	r3, r3, #4
 80174e4:	4413      	add	r3, r2
 80174e6:	330c      	adds	r3, #12
 80174e8:	881b      	ldrh	r3, [r3, #0]
 80174ea:	3301      	adds	r3, #1
 80174ec:	b29a      	uxth	r2, r3
 80174ee:	e001      	b.n	80174f4 <inc_lock+0xfc>
 80174f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80174f4:	4906      	ldr	r1, [pc, #24]	; (8017510 <inc_lock+0x118>)
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	011b      	lsls	r3, r3, #4
 80174fa:	440b      	add	r3, r1
 80174fc:	330c      	adds	r3, #12
 80174fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	3301      	adds	r3, #1
}
 8017504:	4618      	mov	r0, r3
 8017506:	3714      	adds	r7, #20
 8017508:	46bd      	mov	sp, r7
 801750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750e:	4770      	bx	lr
 8017510:	24001538 	.word	0x24001538

08017514 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017514:	b480      	push	{r7}
 8017516:	b085      	sub	sp, #20
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	3b01      	subs	r3, #1
 8017520:	607b      	str	r3, [r7, #4]
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	2b01      	cmp	r3, #1
 8017526:	d825      	bhi.n	8017574 <dec_lock+0x60>
		n = Files[i].ctr;
 8017528:	4a17      	ldr	r2, [pc, #92]	; (8017588 <dec_lock+0x74>)
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	011b      	lsls	r3, r3, #4
 801752e:	4413      	add	r3, r2
 8017530:	330c      	adds	r3, #12
 8017532:	881b      	ldrh	r3, [r3, #0]
 8017534:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017536:	89fb      	ldrh	r3, [r7, #14]
 8017538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801753c:	d101      	bne.n	8017542 <dec_lock+0x2e>
 801753e:	2300      	movs	r3, #0
 8017540:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8017542:	89fb      	ldrh	r3, [r7, #14]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d002      	beq.n	801754e <dec_lock+0x3a>
 8017548:	89fb      	ldrh	r3, [r7, #14]
 801754a:	3b01      	subs	r3, #1
 801754c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801754e:	4a0e      	ldr	r2, [pc, #56]	; (8017588 <dec_lock+0x74>)
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	011b      	lsls	r3, r3, #4
 8017554:	4413      	add	r3, r2
 8017556:	330c      	adds	r3, #12
 8017558:	89fa      	ldrh	r2, [r7, #14]
 801755a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801755c:	89fb      	ldrh	r3, [r7, #14]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d105      	bne.n	801756e <dec_lock+0x5a>
 8017562:	4a09      	ldr	r2, [pc, #36]	; (8017588 <dec_lock+0x74>)
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	011b      	lsls	r3, r3, #4
 8017568:	4413      	add	r3, r2
 801756a:	2200      	movs	r2, #0
 801756c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801756e:	2300      	movs	r3, #0
 8017570:	737b      	strb	r3, [r7, #13]
 8017572:	e001      	b.n	8017578 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017574:	2302      	movs	r3, #2
 8017576:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017578:	7b7b      	ldrb	r3, [r7, #13]
}
 801757a:	4618      	mov	r0, r3
 801757c:	3714      	adds	r7, #20
 801757e:	46bd      	mov	sp, r7
 8017580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017584:	4770      	bx	lr
 8017586:	bf00      	nop
 8017588:	24001538 	.word	0x24001538

0801758c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801758c:	b480      	push	{r7}
 801758e:	b085      	sub	sp, #20
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017594:	2300      	movs	r3, #0
 8017596:	60fb      	str	r3, [r7, #12]
 8017598:	e010      	b.n	80175bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801759a:	4a0d      	ldr	r2, [pc, #52]	; (80175d0 <clear_lock+0x44>)
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	011b      	lsls	r3, r3, #4
 80175a0:	4413      	add	r3, r2
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	687a      	ldr	r2, [r7, #4]
 80175a6:	429a      	cmp	r2, r3
 80175a8:	d105      	bne.n	80175b6 <clear_lock+0x2a>
 80175aa:	4a09      	ldr	r2, [pc, #36]	; (80175d0 <clear_lock+0x44>)
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	011b      	lsls	r3, r3, #4
 80175b0:	4413      	add	r3, r2
 80175b2:	2200      	movs	r2, #0
 80175b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	3301      	adds	r3, #1
 80175ba:	60fb      	str	r3, [r7, #12]
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	2b01      	cmp	r3, #1
 80175c0:	d9eb      	bls.n	801759a <clear_lock+0xe>
	}
}
 80175c2:	bf00      	nop
 80175c4:	bf00      	nop
 80175c6:	3714      	adds	r7, #20
 80175c8:	46bd      	mov	sp, r7
 80175ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ce:	4770      	bx	lr
 80175d0:	24001538 	.word	0x24001538

080175d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b086      	sub	sp, #24
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80175dc:	2300      	movs	r3, #0
 80175de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	78db      	ldrb	r3, [r3, #3]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d034      	beq.n	8017652 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80175ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	7858      	ldrb	r0, [r3, #1]
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80175f8:	2301      	movs	r3, #1
 80175fa:	697a      	ldr	r2, [r7, #20]
 80175fc:	f7ff fd40 	bl	8017080 <disk_write>
 8017600:	4603      	mov	r3, r0
 8017602:	2b00      	cmp	r3, #0
 8017604:	d002      	beq.n	801760c <sync_window+0x38>
			res = FR_DISK_ERR;
 8017606:	2301      	movs	r3, #1
 8017608:	73fb      	strb	r3, [r7, #15]
 801760a:	e022      	b.n	8017652 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	2200      	movs	r2, #0
 8017610:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017616:	697a      	ldr	r2, [r7, #20]
 8017618:	1ad2      	subs	r2, r2, r3
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	6a1b      	ldr	r3, [r3, #32]
 801761e:	429a      	cmp	r2, r3
 8017620:	d217      	bcs.n	8017652 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	789b      	ldrb	r3, [r3, #2]
 8017626:	613b      	str	r3, [r7, #16]
 8017628:	e010      	b.n	801764c <sync_window+0x78>
					wsect += fs->fsize;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	6a1b      	ldr	r3, [r3, #32]
 801762e:	697a      	ldr	r2, [r7, #20]
 8017630:	4413      	add	r3, r2
 8017632:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	7858      	ldrb	r0, [r3, #1]
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801763e:	2301      	movs	r3, #1
 8017640:	697a      	ldr	r2, [r7, #20]
 8017642:	f7ff fd1d 	bl	8017080 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017646:	693b      	ldr	r3, [r7, #16]
 8017648:	3b01      	subs	r3, #1
 801764a:	613b      	str	r3, [r7, #16]
 801764c:	693b      	ldr	r3, [r7, #16]
 801764e:	2b01      	cmp	r3, #1
 8017650:	d8eb      	bhi.n	801762a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017652:	7bfb      	ldrb	r3, [r7, #15]
}
 8017654:	4618      	mov	r0, r3
 8017656:	3718      	adds	r7, #24
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}

0801765c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b084      	sub	sp, #16
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
 8017664:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017666:	2300      	movs	r3, #0
 8017668:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801766e:	683a      	ldr	r2, [r7, #0]
 8017670:	429a      	cmp	r2, r3
 8017672:	d01b      	beq.n	80176ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017674:	6878      	ldr	r0, [r7, #4]
 8017676:	f7ff ffad 	bl	80175d4 <sync_window>
 801767a:	4603      	mov	r3, r0
 801767c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801767e:	7bfb      	ldrb	r3, [r7, #15]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d113      	bne.n	80176ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	7858      	ldrb	r0, [r3, #1]
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801768e:	2301      	movs	r3, #1
 8017690:	683a      	ldr	r2, [r7, #0]
 8017692:	f7ff fcd5 	bl	8017040 <disk_read>
 8017696:	4603      	mov	r3, r0
 8017698:	2b00      	cmp	r3, #0
 801769a:	d004      	beq.n	80176a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801769c:	f04f 33ff 	mov.w	r3, #4294967295
 80176a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80176a2:	2301      	movs	r3, #1
 80176a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	683a      	ldr	r2, [r7, #0]
 80176aa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80176ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80176ae:	4618      	mov	r0, r3
 80176b0:	3710      	adds	r7, #16
 80176b2:	46bd      	mov	sp, r7
 80176b4:	bd80      	pop	{r7, pc}
	...

080176b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b084      	sub	sp, #16
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	f7ff ff87 	bl	80175d4 <sync_window>
 80176c6:	4603      	mov	r3, r0
 80176c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80176ca:	7bfb      	ldrb	r3, [r7, #15]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d159      	bne.n	8017784 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	781b      	ldrb	r3, [r3, #0]
 80176d4:	2b03      	cmp	r3, #3
 80176d6:	d149      	bne.n	801776c <sync_fs+0xb4>
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	791b      	ldrb	r3, [r3, #4]
 80176dc:	2b01      	cmp	r3, #1
 80176de:	d145      	bne.n	801776c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	899b      	ldrh	r3, [r3, #12]
 80176ea:	461a      	mov	r2, r3
 80176ec:	2100      	movs	r1, #0
 80176ee:	f7ff fda8 	bl	8017242 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	3338      	adds	r3, #56	; 0x38
 80176f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80176fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80176fe:	4618      	mov	r0, r3
 8017700:	f7ff fd37 	bl	8017172 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	3338      	adds	r3, #56	; 0x38
 8017708:	4921      	ldr	r1, [pc, #132]	; (8017790 <sync_fs+0xd8>)
 801770a:	4618      	mov	r0, r3
 801770c:	f7ff fd4c 	bl	80171a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	3338      	adds	r3, #56	; 0x38
 8017714:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017718:	491e      	ldr	r1, [pc, #120]	; (8017794 <sync_fs+0xdc>)
 801771a:	4618      	mov	r0, r3
 801771c:	f7ff fd44 	bl	80171a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	3338      	adds	r3, #56	; 0x38
 8017724:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	699b      	ldr	r3, [r3, #24]
 801772c:	4619      	mov	r1, r3
 801772e:	4610      	mov	r0, r2
 8017730:	f7ff fd3a 	bl	80171a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	3338      	adds	r3, #56	; 0x38
 8017738:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	695b      	ldr	r3, [r3, #20]
 8017740:	4619      	mov	r1, r3
 8017742:	4610      	mov	r0, r2
 8017744:	f7ff fd30 	bl	80171a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801774c:	1c5a      	adds	r2, r3, #1
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	7858      	ldrb	r0, [r3, #1]
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017760:	2301      	movs	r3, #1
 8017762:	f7ff fc8d 	bl	8017080 <disk_write>
			fs->fsi_flag = 0;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	2200      	movs	r2, #0
 801776a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	785b      	ldrb	r3, [r3, #1]
 8017770:	2200      	movs	r2, #0
 8017772:	2100      	movs	r1, #0
 8017774:	4618      	mov	r0, r3
 8017776:	f7ff fca3 	bl	80170c0 <disk_ioctl>
 801777a:	4603      	mov	r3, r0
 801777c:	2b00      	cmp	r3, #0
 801777e:	d001      	beq.n	8017784 <sync_fs+0xcc>
 8017780:	2301      	movs	r3, #1
 8017782:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017784:	7bfb      	ldrb	r3, [r7, #15]
}
 8017786:	4618      	mov	r0, r3
 8017788:	3710      	adds	r7, #16
 801778a:	46bd      	mov	sp, r7
 801778c:	bd80      	pop	{r7, pc}
 801778e:	bf00      	nop
 8017790:	41615252 	.word	0x41615252
 8017794:	61417272 	.word	0x61417272

08017798 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017798:	b480      	push	{r7}
 801779a:	b083      	sub	sp, #12
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80177a2:	683b      	ldr	r3, [r7, #0]
 80177a4:	3b02      	subs	r3, #2
 80177a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	69db      	ldr	r3, [r3, #28]
 80177ac:	3b02      	subs	r3, #2
 80177ae:	683a      	ldr	r2, [r7, #0]
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d301      	bcc.n	80177b8 <clust2sect+0x20>
 80177b4:	2300      	movs	r3, #0
 80177b6:	e008      	b.n	80177ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	895b      	ldrh	r3, [r3, #10]
 80177bc:	461a      	mov	r2, r3
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	fb03 f202 	mul.w	r2, r3, r2
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177c8:	4413      	add	r3, r2
}
 80177ca:	4618      	mov	r0, r3
 80177cc:	370c      	adds	r7, #12
 80177ce:	46bd      	mov	sp, r7
 80177d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d4:	4770      	bx	lr

080177d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80177d6:	b580      	push	{r7, lr}
 80177d8:	b086      	sub	sp, #24
 80177da:	af00      	add	r7, sp, #0
 80177dc:	6078      	str	r0, [r7, #4]
 80177de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	2b01      	cmp	r3, #1
 80177ea:	d904      	bls.n	80177f6 <get_fat+0x20>
 80177ec:	693b      	ldr	r3, [r7, #16]
 80177ee:	69db      	ldr	r3, [r3, #28]
 80177f0:	683a      	ldr	r2, [r7, #0]
 80177f2:	429a      	cmp	r2, r3
 80177f4:	d302      	bcc.n	80177fc <get_fat+0x26>
		val = 1;	/* Internal error */
 80177f6:	2301      	movs	r3, #1
 80177f8:	617b      	str	r3, [r7, #20]
 80177fa:	e0bb      	b.n	8017974 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80177fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017800:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017802:	693b      	ldr	r3, [r7, #16]
 8017804:	781b      	ldrb	r3, [r3, #0]
 8017806:	2b03      	cmp	r3, #3
 8017808:	f000 8083 	beq.w	8017912 <get_fat+0x13c>
 801780c:	2b03      	cmp	r3, #3
 801780e:	f300 80a7 	bgt.w	8017960 <get_fat+0x18a>
 8017812:	2b01      	cmp	r3, #1
 8017814:	d002      	beq.n	801781c <get_fat+0x46>
 8017816:	2b02      	cmp	r3, #2
 8017818:	d056      	beq.n	80178c8 <get_fat+0xf2>
 801781a:	e0a1      	b.n	8017960 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801781c:	683b      	ldr	r3, [r7, #0]
 801781e:	60fb      	str	r3, [r7, #12]
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	085b      	lsrs	r3, r3, #1
 8017824:	68fa      	ldr	r2, [r7, #12]
 8017826:	4413      	add	r3, r2
 8017828:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801782a:	693b      	ldr	r3, [r7, #16]
 801782c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801782e:	693b      	ldr	r3, [r7, #16]
 8017830:	899b      	ldrh	r3, [r3, #12]
 8017832:	4619      	mov	r1, r3
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	fbb3 f3f1 	udiv	r3, r3, r1
 801783a:	4413      	add	r3, r2
 801783c:	4619      	mov	r1, r3
 801783e:	6938      	ldr	r0, [r7, #16]
 8017840:	f7ff ff0c 	bl	801765c <move_window>
 8017844:	4603      	mov	r3, r0
 8017846:	2b00      	cmp	r3, #0
 8017848:	f040 808d 	bne.w	8017966 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	1c5a      	adds	r2, r3, #1
 8017850:	60fa      	str	r2, [r7, #12]
 8017852:	693a      	ldr	r2, [r7, #16]
 8017854:	8992      	ldrh	r2, [r2, #12]
 8017856:	fbb3 f1f2 	udiv	r1, r3, r2
 801785a:	fb01 f202 	mul.w	r2, r1, r2
 801785e:	1a9b      	subs	r3, r3, r2
 8017860:	693a      	ldr	r2, [r7, #16]
 8017862:	4413      	add	r3, r2
 8017864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017868:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801786a:	693b      	ldr	r3, [r7, #16]
 801786c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801786e:	693b      	ldr	r3, [r7, #16]
 8017870:	899b      	ldrh	r3, [r3, #12]
 8017872:	4619      	mov	r1, r3
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	fbb3 f3f1 	udiv	r3, r3, r1
 801787a:	4413      	add	r3, r2
 801787c:	4619      	mov	r1, r3
 801787e:	6938      	ldr	r0, [r7, #16]
 8017880:	f7ff feec 	bl	801765c <move_window>
 8017884:	4603      	mov	r3, r0
 8017886:	2b00      	cmp	r3, #0
 8017888:	d16f      	bne.n	801796a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801788a:	693b      	ldr	r3, [r7, #16]
 801788c:	899b      	ldrh	r3, [r3, #12]
 801788e:	461a      	mov	r2, r3
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	fbb3 f1f2 	udiv	r1, r3, r2
 8017896:	fb01 f202 	mul.w	r2, r1, r2
 801789a:	1a9b      	subs	r3, r3, r2
 801789c:	693a      	ldr	r2, [r7, #16]
 801789e:	4413      	add	r3, r2
 80178a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80178a4:	021b      	lsls	r3, r3, #8
 80178a6:	461a      	mov	r2, r3
 80178a8:	68bb      	ldr	r3, [r7, #8]
 80178aa:	4313      	orrs	r3, r2
 80178ac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	f003 0301 	and.w	r3, r3, #1
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d002      	beq.n	80178be <get_fat+0xe8>
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	091b      	lsrs	r3, r3, #4
 80178bc:	e002      	b.n	80178c4 <get_fat+0xee>
 80178be:	68bb      	ldr	r3, [r7, #8]
 80178c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80178c4:	617b      	str	r3, [r7, #20]
			break;
 80178c6:	e055      	b.n	8017974 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80178c8:	693b      	ldr	r3, [r7, #16]
 80178ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80178cc:	693b      	ldr	r3, [r7, #16]
 80178ce:	899b      	ldrh	r3, [r3, #12]
 80178d0:	085b      	lsrs	r3, r3, #1
 80178d2:	b29b      	uxth	r3, r3
 80178d4:	4619      	mov	r1, r3
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80178dc:	4413      	add	r3, r2
 80178de:	4619      	mov	r1, r3
 80178e0:	6938      	ldr	r0, [r7, #16]
 80178e2:	f7ff febb 	bl	801765c <move_window>
 80178e6:	4603      	mov	r3, r0
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d140      	bne.n	801796e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80178ec:	693b      	ldr	r3, [r7, #16]
 80178ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80178f2:	683b      	ldr	r3, [r7, #0]
 80178f4:	005b      	lsls	r3, r3, #1
 80178f6:	693a      	ldr	r2, [r7, #16]
 80178f8:	8992      	ldrh	r2, [r2, #12]
 80178fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80178fe:	fb00 f202 	mul.w	r2, r0, r2
 8017902:	1a9b      	subs	r3, r3, r2
 8017904:	440b      	add	r3, r1
 8017906:	4618      	mov	r0, r3
 8017908:	f7ff fbf8 	bl	80170fc <ld_word>
 801790c:	4603      	mov	r3, r0
 801790e:	617b      	str	r3, [r7, #20]
			break;
 8017910:	e030      	b.n	8017974 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017912:	693b      	ldr	r3, [r7, #16]
 8017914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017916:	693b      	ldr	r3, [r7, #16]
 8017918:	899b      	ldrh	r3, [r3, #12]
 801791a:	089b      	lsrs	r3, r3, #2
 801791c:	b29b      	uxth	r3, r3
 801791e:	4619      	mov	r1, r3
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	fbb3 f3f1 	udiv	r3, r3, r1
 8017926:	4413      	add	r3, r2
 8017928:	4619      	mov	r1, r3
 801792a:	6938      	ldr	r0, [r7, #16]
 801792c:	f7ff fe96 	bl	801765c <move_window>
 8017930:	4603      	mov	r3, r0
 8017932:	2b00      	cmp	r3, #0
 8017934:	d11d      	bne.n	8017972 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017936:	693b      	ldr	r3, [r7, #16]
 8017938:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801793c:	683b      	ldr	r3, [r7, #0]
 801793e:	009b      	lsls	r3, r3, #2
 8017940:	693a      	ldr	r2, [r7, #16]
 8017942:	8992      	ldrh	r2, [r2, #12]
 8017944:	fbb3 f0f2 	udiv	r0, r3, r2
 8017948:	fb00 f202 	mul.w	r2, r0, r2
 801794c:	1a9b      	subs	r3, r3, r2
 801794e:	440b      	add	r3, r1
 8017950:	4618      	mov	r0, r3
 8017952:	f7ff fbeb 	bl	801712c <ld_dword>
 8017956:	4603      	mov	r3, r0
 8017958:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801795c:	617b      	str	r3, [r7, #20]
			break;
 801795e:	e009      	b.n	8017974 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017960:	2301      	movs	r3, #1
 8017962:	617b      	str	r3, [r7, #20]
 8017964:	e006      	b.n	8017974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017966:	bf00      	nop
 8017968:	e004      	b.n	8017974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801796a:	bf00      	nop
 801796c:	e002      	b.n	8017974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801796e:	bf00      	nop
 8017970:	e000      	b.n	8017974 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017972:	bf00      	nop
		}
	}

	return val;
 8017974:	697b      	ldr	r3, [r7, #20]
}
 8017976:	4618      	mov	r0, r3
 8017978:	3718      	adds	r7, #24
 801797a:	46bd      	mov	sp, r7
 801797c:	bd80      	pop	{r7, pc}

0801797e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801797e:	b590      	push	{r4, r7, lr}
 8017980:	b089      	sub	sp, #36	; 0x24
 8017982:	af00      	add	r7, sp, #0
 8017984:	60f8      	str	r0, [r7, #12]
 8017986:	60b9      	str	r1, [r7, #8]
 8017988:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801798a:	2302      	movs	r3, #2
 801798c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801798e:	68bb      	ldr	r3, [r7, #8]
 8017990:	2b01      	cmp	r3, #1
 8017992:	f240 8109 	bls.w	8017ba8 <put_fat+0x22a>
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	69db      	ldr	r3, [r3, #28]
 801799a:	68ba      	ldr	r2, [r7, #8]
 801799c:	429a      	cmp	r2, r3
 801799e:	f080 8103 	bcs.w	8017ba8 <put_fat+0x22a>
		switch (fs->fs_type) {
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	781b      	ldrb	r3, [r3, #0]
 80179a6:	2b03      	cmp	r3, #3
 80179a8:	f000 80b6 	beq.w	8017b18 <put_fat+0x19a>
 80179ac:	2b03      	cmp	r3, #3
 80179ae:	f300 80fb 	bgt.w	8017ba8 <put_fat+0x22a>
 80179b2:	2b01      	cmp	r3, #1
 80179b4:	d003      	beq.n	80179be <put_fat+0x40>
 80179b6:	2b02      	cmp	r3, #2
 80179b8:	f000 8083 	beq.w	8017ac2 <put_fat+0x144>
 80179bc:	e0f4      	b.n	8017ba8 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80179be:	68bb      	ldr	r3, [r7, #8]
 80179c0:	61bb      	str	r3, [r7, #24]
 80179c2:	69bb      	ldr	r3, [r7, #24]
 80179c4:	085b      	lsrs	r3, r3, #1
 80179c6:	69ba      	ldr	r2, [r7, #24]
 80179c8:	4413      	add	r3, r2
 80179ca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	899b      	ldrh	r3, [r3, #12]
 80179d4:	4619      	mov	r1, r3
 80179d6:	69bb      	ldr	r3, [r7, #24]
 80179d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80179dc:	4413      	add	r3, r2
 80179de:	4619      	mov	r1, r3
 80179e0:	68f8      	ldr	r0, [r7, #12]
 80179e2:	f7ff fe3b 	bl	801765c <move_window>
 80179e6:	4603      	mov	r3, r0
 80179e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80179ea:	7ffb      	ldrb	r3, [r7, #31]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	f040 80d4 	bne.w	8017b9a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80179f8:	69bb      	ldr	r3, [r7, #24]
 80179fa:	1c5a      	adds	r2, r3, #1
 80179fc:	61ba      	str	r2, [r7, #24]
 80179fe:	68fa      	ldr	r2, [r7, #12]
 8017a00:	8992      	ldrh	r2, [r2, #12]
 8017a02:	fbb3 f0f2 	udiv	r0, r3, r2
 8017a06:	fb00 f202 	mul.w	r2, r0, r2
 8017a0a:	1a9b      	subs	r3, r3, r2
 8017a0c:	440b      	add	r3, r1
 8017a0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	f003 0301 	and.w	r3, r3, #1
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d00d      	beq.n	8017a36 <put_fat+0xb8>
 8017a1a:	697b      	ldr	r3, [r7, #20]
 8017a1c:	781b      	ldrb	r3, [r3, #0]
 8017a1e:	b25b      	sxtb	r3, r3
 8017a20:	f003 030f 	and.w	r3, r3, #15
 8017a24:	b25a      	sxtb	r2, r3
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	b2db      	uxtb	r3, r3
 8017a2a:	011b      	lsls	r3, r3, #4
 8017a2c:	b25b      	sxtb	r3, r3
 8017a2e:	4313      	orrs	r3, r2
 8017a30:	b25b      	sxtb	r3, r3
 8017a32:	b2db      	uxtb	r3, r3
 8017a34:	e001      	b.n	8017a3a <put_fat+0xbc>
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	b2db      	uxtb	r3, r3
 8017a3a:	697a      	ldr	r2, [r7, #20]
 8017a3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	2201      	movs	r2, #1
 8017a42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	899b      	ldrh	r3, [r3, #12]
 8017a4c:	4619      	mov	r1, r3
 8017a4e:	69bb      	ldr	r3, [r7, #24]
 8017a50:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a54:	4413      	add	r3, r2
 8017a56:	4619      	mov	r1, r3
 8017a58:	68f8      	ldr	r0, [r7, #12]
 8017a5a:	f7ff fdff 	bl	801765c <move_window>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017a62:	7ffb      	ldrb	r3, [r7, #31]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	f040 809a 	bne.w	8017b9e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	899b      	ldrh	r3, [r3, #12]
 8017a74:	461a      	mov	r2, r3
 8017a76:	69bb      	ldr	r3, [r7, #24]
 8017a78:	fbb3 f0f2 	udiv	r0, r3, r2
 8017a7c:	fb00 f202 	mul.w	r2, r0, r2
 8017a80:	1a9b      	subs	r3, r3, r2
 8017a82:	440b      	add	r3, r1
 8017a84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017a86:	68bb      	ldr	r3, [r7, #8]
 8017a88:	f003 0301 	and.w	r3, r3, #1
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d003      	beq.n	8017a98 <put_fat+0x11a>
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	091b      	lsrs	r3, r3, #4
 8017a94:	b2db      	uxtb	r3, r3
 8017a96:	e00e      	b.n	8017ab6 <put_fat+0x138>
 8017a98:	697b      	ldr	r3, [r7, #20]
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	b25b      	sxtb	r3, r3
 8017a9e:	f023 030f 	bic.w	r3, r3, #15
 8017aa2:	b25a      	sxtb	r2, r3
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	0a1b      	lsrs	r3, r3, #8
 8017aa8:	b25b      	sxtb	r3, r3
 8017aaa:	f003 030f 	and.w	r3, r3, #15
 8017aae:	b25b      	sxtb	r3, r3
 8017ab0:	4313      	orrs	r3, r2
 8017ab2:	b25b      	sxtb	r3, r3
 8017ab4:	b2db      	uxtb	r3, r3
 8017ab6:	697a      	ldr	r2, [r7, #20]
 8017ab8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	2201      	movs	r2, #1
 8017abe:	70da      	strb	r2, [r3, #3]
			break;
 8017ac0:	e072      	b.n	8017ba8 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	899b      	ldrh	r3, [r3, #12]
 8017aca:	085b      	lsrs	r3, r3, #1
 8017acc:	b29b      	uxth	r3, r3
 8017ace:	4619      	mov	r1, r3
 8017ad0:	68bb      	ldr	r3, [r7, #8]
 8017ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ad6:	4413      	add	r3, r2
 8017ad8:	4619      	mov	r1, r3
 8017ada:	68f8      	ldr	r0, [r7, #12]
 8017adc:	f7ff fdbe 	bl	801765c <move_window>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017ae4:	7ffb      	ldrb	r3, [r7, #31]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d15b      	bne.n	8017ba2 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017af0:	68bb      	ldr	r3, [r7, #8]
 8017af2:	005b      	lsls	r3, r3, #1
 8017af4:	68fa      	ldr	r2, [r7, #12]
 8017af6:	8992      	ldrh	r2, [r2, #12]
 8017af8:	fbb3 f0f2 	udiv	r0, r3, r2
 8017afc:	fb00 f202 	mul.w	r2, r0, r2
 8017b00:	1a9b      	subs	r3, r3, r2
 8017b02:	440b      	add	r3, r1
 8017b04:	687a      	ldr	r2, [r7, #4]
 8017b06:	b292      	uxth	r2, r2
 8017b08:	4611      	mov	r1, r2
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7ff fb31 	bl	8017172 <st_word>
			fs->wflag = 1;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	2201      	movs	r2, #1
 8017b14:	70da      	strb	r2, [r3, #3]
			break;
 8017b16:	e047      	b.n	8017ba8 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	899b      	ldrh	r3, [r3, #12]
 8017b20:	089b      	lsrs	r3, r3, #2
 8017b22:	b29b      	uxth	r3, r3
 8017b24:	4619      	mov	r1, r3
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	fbb3 f3f1 	udiv	r3, r3, r1
 8017b2c:	4413      	add	r3, r2
 8017b2e:	4619      	mov	r1, r3
 8017b30:	68f8      	ldr	r0, [r7, #12]
 8017b32:	f7ff fd93 	bl	801765c <move_window>
 8017b36:	4603      	mov	r3, r0
 8017b38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017b3a:	7ffb      	ldrb	r3, [r7, #31]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d132      	bne.n	8017ba6 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017b4c:	68bb      	ldr	r3, [r7, #8]
 8017b4e:	009b      	lsls	r3, r3, #2
 8017b50:	68fa      	ldr	r2, [r7, #12]
 8017b52:	8992      	ldrh	r2, [r2, #12]
 8017b54:	fbb3 f0f2 	udiv	r0, r3, r2
 8017b58:	fb00 f202 	mul.w	r2, r0, r2
 8017b5c:	1a9b      	subs	r3, r3, r2
 8017b5e:	440b      	add	r3, r1
 8017b60:	4618      	mov	r0, r3
 8017b62:	f7ff fae3 	bl	801712c <ld_dword>
 8017b66:	4603      	mov	r3, r0
 8017b68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017b6c:	4323      	orrs	r3, r4
 8017b6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017b76:	68bb      	ldr	r3, [r7, #8]
 8017b78:	009b      	lsls	r3, r3, #2
 8017b7a:	68fa      	ldr	r2, [r7, #12]
 8017b7c:	8992      	ldrh	r2, [r2, #12]
 8017b7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8017b82:	fb00 f202 	mul.w	r2, r0, r2
 8017b86:	1a9b      	subs	r3, r3, r2
 8017b88:	440b      	add	r3, r1
 8017b8a:	6879      	ldr	r1, [r7, #4]
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f7ff fb0b 	bl	80171a8 <st_dword>
			fs->wflag = 1;
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	2201      	movs	r2, #1
 8017b96:	70da      	strb	r2, [r3, #3]
			break;
 8017b98:	e006      	b.n	8017ba8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8017b9a:	bf00      	nop
 8017b9c:	e004      	b.n	8017ba8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8017b9e:	bf00      	nop
 8017ba0:	e002      	b.n	8017ba8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8017ba2:	bf00      	nop
 8017ba4:	e000      	b.n	8017ba8 <put_fat+0x22a>
			if (res != FR_OK) break;
 8017ba6:	bf00      	nop
		}
	}
	return res;
 8017ba8:	7ffb      	ldrb	r3, [r7, #31]
}
 8017baa:	4618      	mov	r0, r3
 8017bac:	3724      	adds	r7, #36	; 0x24
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	bd90      	pop	{r4, r7, pc}

08017bb2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017bb2:	b580      	push	{r7, lr}
 8017bb4:	b088      	sub	sp, #32
 8017bb6:	af00      	add	r7, sp, #0
 8017bb8:	60f8      	str	r0, [r7, #12]
 8017bba:	60b9      	str	r1, [r7, #8]
 8017bbc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017bc8:	68bb      	ldr	r3, [r7, #8]
 8017bca:	2b01      	cmp	r3, #1
 8017bcc:	d904      	bls.n	8017bd8 <remove_chain+0x26>
 8017bce:	69bb      	ldr	r3, [r7, #24]
 8017bd0:	69db      	ldr	r3, [r3, #28]
 8017bd2:	68ba      	ldr	r2, [r7, #8]
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d301      	bcc.n	8017bdc <remove_chain+0x2a>
 8017bd8:	2302      	movs	r3, #2
 8017bda:	e04b      	b.n	8017c74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d00c      	beq.n	8017bfc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017be2:	f04f 32ff 	mov.w	r2, #4294967295
 8017be6:	6879      	ldr	r1, [r7, #4]
 8017be8:	69b8      	ldr	r0, [r7, #24]
 8017bea:	f7ff fec8 	bl	801797e <put_fat>
 8017bee:	4603      	mov	r3, r0
 8017bf0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017bf2:	7ffb      	ldrb	r3, [r7, #31]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d001      	beq.n	8017bfc <remove_chain+0x4a>
 8017bf8:	7ffb      	ldrb	r3, [r7, #31]
 8017bfa:	e03b      	b.n	8017c74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017bfc:	68b9      	ldr	r1, [r7, #8]
 8017bfe:	68f8      	ldr	r0, [r7, #12]
 8017c00:	f7ff fde9 	bl	80177d6 <get_fat>
 8017c04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017c06:	697b      	ldr	r3, [r7, #20]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d031      	beq.n	8017c70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017c0c:	697b      	ldr	r3, [r7, #20]
 8017c0e:	2b01      	cmp	r3, #1
 8017c10:	d101      	bne.n	8017c16 <remove_chain+0x64>
 8017c12:	2302      	movs	r3, #2
 8017c14:	e02e      	b.n	8017c74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017c16:	697b      	ldr	r3, [r7, #20]
 8017c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c1c:	d101      	bne.n	8017c22 <remove_chain+0x70>
 8017c1e:	2301      	movs	r3, #1
 8017c20:	e028      	b.n	8017c74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017c22:	2200      	movs	r2, #0
 8017c24:	68b9      	ldr	r1, [r7, #8]
 8017c26:	69b8      	ldr	r0, [r7, #24]
 8017c28:	f7ff fea9 	bl	801797e <put_fat>
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8017c30:	7ffb      	ldrb	r3, [r7, #31]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d001      	beq.n	8017c3a <remove_chain+0x88>
 8017c36:	7ffb      	ldrb	r3, [r7, #31]
 8017c38:	e01c      	b.n	8017c74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8017c3a:	69bb      	ldr	r3, [r7, #24]
 8017c3c:	699a      	ldr	r2, [r3, #24]
 8017c3e:	69bb      	ldr	r3, [r7, #24]
 8017c40:	69db      	ldr	r3, [r3, #28]
 8017c42:	3b02      	subs	r3, #2
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d20b      	bcs.n	8017c60 <remove_chain+0xae>
			fs->free_clst++;
 8017c48:	69bb      	ldr	r3, [r7, #24]
 8017c4a:	699b      	ldr	r3, [r3, #24]
 8017c4c:	1c5a      	adds	r2, r3, #1
 8017c4e:	69bb      	ldr	r3, [r7, #24]
 8017c50:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8017c52:	69bb      	ldr	r3, [r7, #24]
 8017c54:	791b      	ldrb	r3, [r3, #4]
 8017c56:	f043 0301 	orr.w	r3, r3, #1
 8017c5a:	b2da      	uxtb	r2, r3
 8017c5c:	69bb      	ldr	r3, [r7, #24]
 8017c5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017c60:	697b      	ldr	r3, [r7, #20]
 8017c62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017c64:	69bb      	ldr	r3, [r7, #24]
 8017c66:	69db      	ldr	r3, [r3, #28]
 8017c68:	68ba      	ldr	r2, [r7, #8]
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	d3c6      	bcc.n	8017bfc <remove_chain+0x4a>
 8017c6e:	e000      	b.n	8017c72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017c70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8017c72:	2300      	movs	r3, #0
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	3720      	adds	r7, #32
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}

08017c7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b088      	sub	sp, #32
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
 8017c84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d10d      	bne.n	8017cae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017c92:	693b      	ldr	r3, [r7, #16]
 8017c94:	695b      	ldr	r3, [r3, #20]
 8017c96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017c98:	69bb      	ldr	r3, [r7, #24]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d004      	beq.n	8017ca8 <create_chain+0x2c>
 8017c9e:	693b      	ldr	r3, [r7, #16]
 8017ca0:	69db      	ldr	r3, [r3, #28]
 8017ca2:	69ba      	ldr	r2, [r7, #24]
 8017ca4:	429a      	cmp	r2, r3
 8017ca6:	d31b      	bcc.n	8017ce0 <create_chain+0x64>
 8017ca8:	2301      	movs	r3, #1
 8017caa:	61bb      	str	r3, [r7, #24]
 8017cac:	e018      	b.n	8017ce0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017cae:	6839      	ldr	r1, [r7, #0]
 8017cb0:	6878      	ldr	r0, [r7, #4]
 8017cb2:	f7ff fd90 	bl	80177d6 <get_fat>
 8017cb6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	2b01      	cmp	r3, #1
 8017cbc:	d801      	bhi.n	8017cc2 <create_chain+0x46>
 8017cbe:	2301      	movs	r3, #1
 8017cc0:	e070      	b.n	8017da4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cc8:	d101      	bne.n	8017cce <create_chain+0x52>
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	e06a      	b.n	8017da4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017cce:	693b      	ldr	r3, [r7, #16]
 8017cd0:	69db      	ldr	r3, [r3, #28]
 8017cd2:	68fa      	ldr	r2, [r7, #12]
 8017cd4:	429a      	cmp	r2, r3
 8017cd6:	d201      	bcs.n	8017cdc <create_chain+0x60>
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	e063      	b.n	8017da4 <create_chain+0x128>
		scl = clst;
 8017cdc:	683b      	ldr	r3, [r7, #0]
 8017cde:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017ce0:	69bb      	ldr	r3, [r7, #24]
 8017ce2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017ce4:	69fb      	ldr	r3, [r7, #28]
 8017ce6:	3301      	adds	r3, #1
 8017ce8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	69db      	ldr	r3, [r3, #28]
 8017cee:	69fa      	ldr	r2, [r7, #28]
 8017cf0:	429a      	cmp	r2, r3
 8017cf2:	d307      	bcc.n	8017d04 <create_chain+0x88>
				ncl = 2;
 8017cf4:	2302      	movs	r3, #2
 8017cf6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017cf8:	69fa      	ldr	r2, [r7, #28]
 8017cfa:	69bb      	ldr	r3, [r7, #24]
 8017cfc:	429a      	cmp	r2, r3
 8017cfe:	d901      	bls.n	8017d04 <create_chain+0x88>
 8017d00:	2300      	movs	r3, #0
 8017d02:	e04f      	b.n	8017da4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8017d04:	69f9      	ldr	r1, [r7, #28]
 8017d06:	6878      	ldr	r0, [r7, #4]
 8017d08:	f7ff fd65 	bl	80177d6 <get_fat>
 8017d0c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d00e      	beq.n	8017d32 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	2b01      	cmp	r3, #1
 8017d18:	d003      	beq.n	8017d22 <create_chain+0xa6>
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d20:	d101      	bne.n	8017d26 <create_chain+0xaa>
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	e03e      	b.n	8017da4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8017d26:	69fa      	ldr	r2, [r7, #28]
 8017d28:	69bb      	ldr	r3, [r7, #24]
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d1da      	bne.n	8017ce4 <create_chain+0x68>
 8017d2e:	2300      	movs	r3, #0
 8017d30:	e038      	b.n	8017da4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8017d32:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8017d34:	f04f 32ff 	mov.w	r2, #4294967295
 8017d38:	69f9      	ldr	r1, [r7, #28]
 8017d3a:	6938      	ldr	r0, [r7, #16]
 8017d3c:	f7ff fe1f 	bl	801797e <put_fat>
 8017d40:	4603      	mov	r3, r0
 8017d42:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8017d44:	7dfb      	ldrb	r3, [r7, #23]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d109      	bne.n	8017d5e <create_chain+0xe2>
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d006      	beq.n	8017d5e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017d50:	69fa      	ldr	r2, [r7, #28]
 8017d52:	6839      	ldr	r1, [r7, #0]
 8017d54:	6938      	ldr	r0, [r7, #16]
 8017d56:	f7ff fe12 	bl	801797e <put_fat>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017d5e:	7dfb      	ldrb	r3, [r7, #23]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d116      	bne.n	8017d92 <create_chain+0x116>
		fs->last_clst = ncl;
 8017d64:	693b      	ldr	r3, [r7, #16]
 8017d66:	69fa      	ldr	r2, [r7, #28]
 8017d68:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017d6a:	693b      	ldr	r3, [r7, #16]
 8017d6c:	699a      	ldr	r2, [r3, #24]
 8017d6e:	693b      	ldr	r3, [r7, #16]
 8017d70:	69db      	ldr	r3, [r3, #28]
 8017d72:	3b02      	subs	r3, #2
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d804      	bhi.n	8017d82 <create_chain+0x106>
 8017d78:	693b      	ldr	r3, [r7, #16]
 8017d7a:	699b      	ldr	r3, [r3, #24]
 8017d7c:	1e5a      	subs	r2, r3, #1
 8017d7e:	693b      	ldr	r3, [r7, #16]
 8017d80:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8017d82:	693b      	ldr	r3, [r7, #16]
 8017d84:	791b      	ldrb	r3, [r3, #4]
 8017d86:	f043 0301 	orr.w	r3, r3, #1
 8017d8a:	b2da      	uxtb	r2, r3
 8017d8c:	693b      	ldr	r3, [r7, #16]
 8017d8e:	711a      	strb	r2, [r3, #4]
 8017d90:	e007      	b.n	8017da2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8017d92:	7dfb      	ldrb	r3, [r7, #23]
 8017d94:	2b01      	cmp	r3, #1
 8017d96:	d102      	bne.n	8017d9e <create_chain+0x122>
 8017d98:	f04f 33ff 	mov.w	r3, #4294967295
 8017d9c:	e000      	b.n	8017da0 <create_chain+0x124>
 8017d9e:	2301      	movs	r3, #1
 8017da0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017da2:	69fb      	ldr	r3, [r7, #28]
}
 8017da4:	4618      	mov	r0, r3
 8017da6:	3720      	adds	r7, #32
 8017da8:	46bd      	mov	sp, r7
 8017daa:	bd80      	pop	{r7, pc}

08017dac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017dac:	b480      	push	{r7}
 8017dae:	b087      	sub	sp, #28
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
 8017db4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dc0:	3304      	adds	r3, #4
 8017dc2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	899b      	ldrh	r3, [r3, #12]
 8017dc8:	461a      	mov	r2, r3
 8017dca:	683b      	ldr	r3, [r7, #0]
 8017dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8017dd0:	68fa      	ldr	r2, [r7, #12]
 8017dd2:	8952      	ldrh	r2, [r2, #10]
 8017dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8017dd8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	1d1a      	adds	r2, r3, #4
 8017dde:	613a      	str	r2, [r7, #16]
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017de4:	68bb      	ldr	r3, [r7, #8]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d101      	bne.n	8017dee <clmt_clust+0x42>
 8017dea:	2300      	movs	r3, #0
 8017dec:	e010      	b.n	8017e10 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8017dee:	697a      	ldr	r2, [r7, #20]
 8017df0:	68bb      	ldr	r3, [r7, #8]
 8017df2:	429a      	cmp	r2, r3
 8017df4:	d307      	bcc.n	8017e06 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8017df6:	697a      	ldr	r2, [r7, #20]
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	1ad3      	subs	r3, r2, r3
 8017dfc:	617b      	str	r3, [r7, #20]
 8017dfe:	693b      	ldr	r3, [r7, #16]
 8017e00:	3304      	adds	r3, #4
 8017e02:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017e04:	e7e9      	b.n	8017dda <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8017e06:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017e08:	693b      	ldr	r3, [r7, #16]
 8017e0a:	681a      	ldr	r2, [r3, #0]
 8017e0c:	697b      	ldr	r3, [r7, #20]
 8017e0e:	4413      	add	r3, r2
}
 8017e10:	4618      	mov	r0, r3
 8017e12:	371c      	adds	r7, #28
 8017e14:	46bd      	mov	sp, r7
 8017e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1a:	4770      	bx	lr

08017e1c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017e1c:	b580      	push	{r7, lr}
 8017e1e:	b086      	sub	sp, #24
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
 8017e24:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017e32:	d204      	bcs.n	8017e3e <dir_sdi+0x22>
 8017e34:	683b      	ldr	r3, [r7, #0]
 8017e36:	f003 031f 	and.w	r3, r3, #31
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d001      	beq.n	8017e42 <dir_sdi+0x26>
		return FR_INT_ERR;
 8017e3e:	2302      	movs	r3, #2
 8017e40:	e071      	b.n	8017f26 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	683a      	ldr	r2, [r7, #0]
 8017e46:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	689b      	ldr	r3, [r3, #8]
 8017e4c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8017e4e:	697b      	ldr	r3, [r7, #20]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d106      	bne.n	8017e62 <dir_sdi+0x46>
 8017e54:	693b      	ldr	r3, [r7, #16]
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	2b02      	cmp	r3, #2
 8017e5a:	d902      	bls.n	8017e62 <dir_sdi+0x46>
		clst = fs->dirbase;
 8017e5c:	693b      	ldr	r3, [r7, #16]
 8017e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e60:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8017e62:	697b      	ldr	r3, [r7, #20]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d10c      	bne.n	8017e82 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017e68:	683b      	ldr	r3, [r7, #0]
 8017e6a:	095b      	lsrs	r3, r3, #5
 8017e6c:	693a      	ldr	r2, [r7, #16]
 8017e6e:	8912      	ldrh	r2, [r2, #8]
 8017e70:	4293      	cmp	r3, r2
 8017e72:	d301      	bcc.n	8017e78 <dir_sdi+0x5c>
 8017e74:	2302      	movs	r3, #2
 8017e76:	e056      	b.n	8017f26 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8017e78:	693b      	ldr	r3, [r7, #16]
 8017e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	61da      	str	r2, [r3, #28]
 8017e80:	e02d      	b.n	8017ede <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017e82:	693b      	ldr	r3, [r7, #16]
 8017e84:	895b      	ldrh	r3, [r3, #10]
 8017e86:	461a      	mov	r2, r3
 8017e88:	693b      	ldr	r3, [r7, #16]
 8017e8a:	899b      	ldrh	r3, [r3, #12]
 8017e8c:	fb02 f303 	mul.w	r3, r2, r3
 8017e90:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017e92:	e019      	b.n	8017ec8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	6979      	ldr	r1, [r7, #20]
 8017e98:	4618      	mov	r0, r3
 8017e9a:	f7ff fc9c 	bl	80177d6 <get_fat>
 8017e9e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017ea0:	697b      	ldr	r3, [r7, #20]
 8017ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ea6:	d101      	bne.n	8017eac <dir_sdi+0x90>
 8017ea8:	2301      	movs	r3, #1
 8017eaa:	e03c      	b.n	8017f26 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017eac:	697b      	ldr	r3, [r7, #20]
 8017eae:	2b01      	cmp	r3, #1
 8017eb0:	d904      	bls.n	8017ebc <dir_sdi+0xa0>
 8017eb2:	693b      	ldr	r3, [r7, #16]
 8017eb4:	69db      	ldr	r3, [r3, #28]
 8017eb6:	697a      	ldr	r2, [r7, #20]
 8017eb8:	429a      	cmp	r2, r3
 8017eba:	d301      	bcc.n	8017ec0 <dir_sdi+0xa4>
 8017ebc:	2302      	movs	r3, #2
 8017ebe:	e032      	b.n	8017f26 <dir_sdi+0x10a>
			ofs -= csz;
 8017ec0:	683a      	ldr	r2, [r7, #0]
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	1ad3      	subs	r3, r2, r3
 8017ec6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017ec8:	683a      	ldr	r2, [r7, #0]
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d2e1      	bcs.n	8017e94 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8017ed0:	6979      	ldr	r1, [r7, #20]
 8017ed2:	6938      	ldr	r0, [r7, #16]
 8017ed4:	f7ff fc60 	bl	8017798 <clust2sect>
 8017ed8:	4602      	mov	r2, r0
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	697a      	ldr	r2, [r7, #20]
 8017ee2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	69db      	ldr	r3, [r3, #28]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d101      	bne.n	8017ef0 <dir_sdi+0xd4>
 8017eec:	2302      	movs	r3, #2
 8017eee:	e01a      	b.n	8017f26 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	69da      	ldr	r2, [r3, #28]
 8017ef4:	693b      	ldr	r3, [r7, #16]
 8017ef6:	899b      	ldrh	r3, [r3, #12]
 8017ef8:	4619      	mov	r1, r3
 8017efa:	683b      	ldr	r3, [r7, #0]
 8017efc:	fbb3 f3f1 	udiv	r3, r3, r1
 8017f00:	441a      	add	r2, r3
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017f06:	693b      	ldr	r3, [r7, #16]
 8017f08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f0c:	693b      	ldr	r3, [r7, #16]
 8017f0e:	899b      	ldrh	r3, [r3, #12]
 8017f10:	461a      	mov	r2, r3
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	fbb3 f0f2 	udiv	r0, r3, r2
 8017f18:	fb00 f202 	mul.w	r2, r0, r2
 8017f1c:	1a9b      	subs	r3, r3, r2
 8017f1e:	18ca      	adds	r2, r1, r3
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017f24:	2300      	movs	r3, #0
}
 8017f26:	4618      	mov	r0, r3
 8017f28:	3718      	adds	r7, #24
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd80      	pop	{r7, pc}

08017f2e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017f2e:	b580      	push	{r7, lr}
 8017f30:	b086      	sub	sp, #24
 8017f32:	af00      	add	r7, sp, #0
 8017f34:	6078      	str	r0, [r7, #4]
 8017f36:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	695b      	ldr	r3, [r3, #20]
 8017f42:	3320      	adds	r3, #32
 8017f44:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	69db      	ldr	r3, [r3, #28]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d003      	beq.n	8017f56 <dir_next+0x28>
 8017f4e:	68bb      	ldr	r3, [r7, #8]
 8017f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017f54:	d301      	bcc.n	8017f5a <dir_next+0x2c>
 8017f56:	2304      	movs	r3, #4
 8017f58:	e0bb      	b.n	80180d2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	899b      	ldrh	r3, [r3, #12]
 8017f5e:	461a      	mov	r2, r3
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	fbb3 f1f2 	udiv	r1, r3, r2
 8017f66:	fb01 f202 	mul.w	r2, r1, r2
 8017f6a:	1a9b      	subs	r3, r3, r2
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	f040 809d 	bne.w	80180ac <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	69db      	ldr	r3, [r3, #28]
 8017f76:	1c5a      	adds	r2, r3, #1
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	699b      	ldr	r3, [r3, #24]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d10b      	bne.n	8017f9c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017f84:	68bb      	ldr	r3, [r7, #8]
 8017f86:	095b      	lsrs	r3, r3, #5
 8017f88:	68fa      	ldr	r2, [r7, #12]
 8017f8a:	8912      	ldrh	r2, [r2, #8]
 8017f8c:	4293      	cmp	r3, r2
 8017f8e:	f0c0 808d 	bcc.w	80180ac <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	2200      	movs	r2, #0
 8017f96:	61da      	str	r2, [r3, #28]
 8017f98:	2304      	movs	r3, #4
 8017f9a:	e09a      	b.n	80180d2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	899b      	ldrh	r3, [r3, #12]
 8017fa0:	461a      	mov	r2, r3
 8017fa2:	68bb      	ldr	r3, [r7, #8]
 8017fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8017fa8:	68fa      	ldr	r2, [r7, #12]
 8017faa:	8952      	ldrh	r2, [r2, #10]
 8017fac:	3a01      	subs	r2, #1
 8017fae:	4013      	ands	r3, r2
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d17b      	bne.n	80180ac <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017fb4:	687a      	ldr	r2, [r7, #4]
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	699b      	ldr	r3, [r3, #24]
 8017fba:	4619      	mov	r1, r3
 8017fbc:	4610      	mov	r0, r2
 8017fbe:	f7ff fc0a 	bl	80177d6 <get_fat>
 8017fc2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017fc4:	697b      	ldr	r3, [r7, #20]
 8017fc6:	2b01      	cmp	r3, #1
 8017fc8:	d801      	bhi.n	8017fce <dir_next+0xa0>
 8017fca:	2302      	movs	r3, #2
 8017fcc:	e081      	b.n	80180d2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017fce:	697b      	ldr	r3, [r7, #20]
 8017fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fd4:	d101      	bne.n	8017fda <dir_next+0xac>
 8017fd6:	2301      	movs	r3, #1
 8017fd8:	e07b      	b.n	80180d2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	69db      	ldr	r3, [r3, #28]
 8017fde:	697a      	ldr	r2, [r7, #20]
 8017fe0:	429a      	cmp	r2, r3
 8017fe2:	d359      	bcc.n	8018098 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017fe4:	683b      	ldr	r3, [r7, #0]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d104      	bne.n	8017ff4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	2200      	movs	r2, #0
 8017fee:	61da      	str	r2, [r3, #28]
 8017ff0:	2304      	movs	r3, #4
 8017ff2:	e06e      	b.n	80180d2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017ff4:	687a      	ldr	r2, [r7, #4]
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	699b      	ldr	r3, [r3, #24]
 8017ffa:	4619      	mov	r1, r3
 8017ffc:	4610      	mov	r0, r2
 8017ffe:	f7ff fe3d 	bl	8017c7c <create_chain>
 8018002:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8018004:	697b      	ldr	r3, [r7, #20]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d101      	bne.n	801800e <dir_next+0xe0>
 801800a:	2307      	movs	r3, #7
 801800c:	e061      	b.n	80180d2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801800e:	697b      	ldr	r3, [r7, #20]
 8018010:	2b01      	cmp	r3, #1
 8018012:	d101      	bne.n	8018018 <dir_next+0xea>
 8018014:	2302      	movs	r3, #2
 8018016:	e05c      	b.n	80180d2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018018:	697b      	ldr	r3, [r7, #20]
 801801a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801801e:	d101      	bne.n	8018024 <dir_next+0xf6>
 8018020:	2301      	movs	r3, #1
 8018022:	e056      	b.n	80180d2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8018024:	68f8      	ldr	r0, [r7, #12]
 8018026:	f7ff fad5 	bl	80175d4 <sync_window>
 801802a:	4603      	mov	r3, r0
 801802c:	2b00      	cmp	r3, #0
 801802e:	d001      	beq.n	8018034 <dir_next+0x106>
 8018030:	2301      	movs	r3, #1
 8018032:	e04e      	b.n	80180d2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	899b      	ldrh	r3, [r3, #12]
 801803e:	461a      	mov	r2, r3
 8018040:	2100      	movs	r1, #0
 8018042:	f7ff f8fe 	bl	8017242 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018046:	2300      	movs	r3, #0
 8018048:	613b      	str	r3, [r7, #16]
 801804a:	6979      	ldr	r1, [r7, #20]
 801804c:	68f8      	ldr	r0, [r7, #12]
 801804e:	f7ff fba3 	bl	8017798 <clust2sect>
 8018052:	4602      	mov	r2, r0
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	635a      	str	r2, [r3, #52]	; 0x34
 8018058:	e012      	b.n	8018080 <dir_next+0x152>
						fs->wflag = 1;
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	2201      	movs	r2, #1
 801805e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8018060:	68f8      	ldr	r0, [r7, #12]
 8018062:	f7ff fab7 	bl	80175d4 <sync_window>
 8018066:	4603      	mov	r3, r0
 8018068:	2b00      	cmp	r3, #0
 801806a:	d001      	beq.n	8018070 <dir_next+0x142>
 801806c:	2301      	movs	r3, #1
 801806e:	e030      	b.n	80180d2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018070:	693b      	ldr	r3, [r7, #16]
 8018072:	3301      	adds	r3, #1
 8018074:	613b      	str	r3, [r7, #16]
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801807a:	1c5a      	adds	r2, r3, #1
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	635a      	str	r2, [r3, #52]	; 0x34
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	895b      	ldrh	r3, [r3, #10]
 8018084:	461a      	mov	r2, r3
 8018086:	693b      	ldr	r3, [r7, #16]
 8018088:	4293      	cmp	r3, r2
 801808a:	d3e6      	bcc.n	801805a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018090:	693b      	ldr	r3, [r7, #16]
 8018092:	1ad2      	subs	r2, r2, r3
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	697a      	ldr	r2, [r7, #20]
 801809c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801809e:	6979      	ldr	r1, [r7, #20]
 80180a0:	68f8      	ldr	r0, [r7, #12]
 80180a2:	f7ff fb79 	bl	8017798 <clust2sect>
 80180a6:	4602      	mov	r2, r0
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	68ba      	ldr	r2, [r7, #8]
 80180b0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	899b      	ldrh	r3, [r3, #12]
 80180bc:	461a      	mov	r2, r3
 80180be:	68bb      	ldr	r3, [r7, #8]
 80180c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80180c4:	fb00 f202 	mul.w	r2, r0, r2
 80180c8:	1a9b      	subs	r3, r3, r2
 80180ca:	18ca      	adds	r2, r1, r3
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80180d0:	2300      	movs	r3, #0
}
 80180d2:	4618      	mov	r0, r3
 80180d4:	3718      	adds	r7, #24
 80180d6:	46bd      	mov	sp, r7
 80180d8:	bd80      	pop	{r7, pc}

080180da <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80180da:	b580      	push	{r7, lr}
 80180dc:	b086      	sub	sp, #24
 80180de:	af00      	add	r7, sp, #0
 80180e0:	6078      	str	r0, [r7, #4]
 80180e2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80180ea:	2100      	movs	r1, #0
 80180ec:	6878      	ldr	r0, [r7, #4]
 80180ee:	f7ff fe95 	bl	8017e1c <dir_sdi>
 80180f2:	4603      	mov	r3, r0
 80180f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80180f6:	7dfb      	ldrb	r3, [r7, #23]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d12b      	bne.n	8018154 <dir_alloc+0x7a>
		n = 0;
 80180fc:	2300      	movs	r3, #0
 80180fe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	69db      	ldr	r3, [r3, #28]
 8018104:	4619      	mov	r1, r3
 8018106:	68f8      	ldr	r0, [r7, #12]
 8018108:	f7ff faa8 	bl	801765c <move_window>
 801810c:	4603      	mov	r3, r0
 801810e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018110:	7dfb      	ldrb	r3, [r7, #23]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d11d      	bne.n	8018152 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	6a1b      	ldr	r3, [r3, #32]
 801811a:	781b      	ldrb	r3, [r3, #0]
 801811c:	2be5      	cmp	r3, #229	; 0xe5
 801811e:	d004      	beq.n	801812a <dir_alloc+0x50>
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	6a1b      	ldr	r3, [r3, #32]
 8018124:	781b      	ldrb	r3, [r3, #0]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d107      	bne.n	801813a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801812a:	693b      	ldr	r3, [r7, #16]
 801812c:	3301      	adds	r3, #1
 801812e:	613b      	str	r3, [r7, #16]
 8018130:	693a      	ldr	r2, [r7, #16]
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	429a      	cmp	r2, r3
 8018136:	d102      	bne.n	801813e <dir_alloc+0x64>
 8018138:	e00c      	b.n	8018154 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801813a:	2300      	movs	r3, #0
 801813c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801813e:	2101      	movs	r1, #1
 8018140:	6878      	ldr	r0, [r7, #4]
 8018142:	f7ff fef4 	bl	8017f2e <dir_next>
 8018146:	4603      	mov	r3, r0
 8018148:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801814a:	7dfb      	ldrb	r3, [r7, #23]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d0d7      	beq.n	8018100 <dir_alloc+0x26>
 8018150:	e000      	b.n	8018154 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8018152:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018154:	7dfb      	ldrb	r3, [r7, #23]
 8018156:	2b04      	cmp	r3, #4
 8018158:	d101      	bne.n	801815e <dir_alloc+0x84>
 801815a:	2307      	movs	r3, #7
 801815c:	75fb      	strb	r3, [r7, #23]
	return res;
 801815e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018160:	4618      	mov	r0, r3
 8018162:	3718      	adds	r7, #24
 8018164:	46bd      	mov	sp, r7
 8018166:	bd80      	pop	{r7, pc}

08018168 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b084      	sub	sp, #16
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
 8018170:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8018172:	683b      	ldr	r3, [r7, #0]
 8018174:	331a      	adds	r3, #26
 8018176:	4618      	mov	r0, r3
 8018178:	f7fe ffc0 	bl	80170fc <ld_word>
 801817c:	4603      	mov	r3, r0
 801817e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	781b      	ldrb	r3, [r3, #0]
 8018184:	2b03      	cmp	r3, #3
 8018186:	d109      	bne.n	801819c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018188:	683b      	ldr	r3, [r7, #0]
 801818a:	3314      	adds	r3, #20
 801818c:	4618      	mov	r0, r3
 801818e:	f7fe ffb5 	bl	80170fc <ld_word>
 8018192:	4603      	mov	r3, r0
 8018194:	041b      	lsls	r3, r3, #16
 8018196:	68fa      	ldr	r2, [r7, #12]
 8018198:	4313      	orrs	r3, r2
 801819a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801819c:	68fb      	ldr	r3, [r7, #12]
}
 801819e:	4618      	mov	r0, r3
 80181a0:	3710      	adds	r7, #16
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}

080181a6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80181a6:	b580      	push	{r7, lr}
 80181a8:	b084      	sub	sp, #16
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	60f8      	str	r0, [r7, #12]
 80181ae:	60b9      	str	r1, [r7, #8]
 80181b0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80181b2:	68bb      	ldr	r3, [r7, #8]
 80181b4:	331a      	adds	r3, #26
 80181b6:	687a      	ldr	r2, [r7, #4]
 80181b8:	b292      	uxth	r2, r2
 80181ba:	4611      	mov	r1, r2
 80181bc:	4618      	mov	r0, r3
 80181be:	f7fe ffd8 	bl	8017172 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	781b      	ldrb	r3, [r3, #0]
 80181c6:	2b03      	cmp	r3, #3
 80181c8:	d109      	bne.n	80181de <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	f103 0214 	add.w	r2, r3, #20
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	0c1b      	lsrs	r3, r3, #16
 80181d4:	b29b      	uxth	r3, r3
 80181d6:	4619      	mov	r1, r3
 80181d8:	4610      	mov	r0, r2
 80181da:	f7fe ffca 	bl	8017172 <st_word>
	}
}
 80181de:	bf00      	nop
 80181e0:	3710      	adds	r7, #16
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bd80      	pop	{r7, pc}
	...

080181e8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80181e8:	b590      	push	{r4, r7, lr}
 80181ea:	b087      	sub	sp, #28
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
 80181f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80181f2:	683b      	ldr	r3, [r7, #0]
 80181f4:	331a      	adds	r3, #26
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7fe ff80 	bl	80170fc <ld_word>
 80181fc:	4603      	mov	r3, r0
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d001      	beq.n	8018206 <cmp_lfn+0x1e>
 8018202:	2300      	movs	r3, #0
 8018204:	e059      	b.n	80182ba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018206:	683b      	ldr	r3, [r7, #0]
 8018208:	781b      	ldrb	r3, [r3, #0]
 801820a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801820e:	1e5a      	subs	r2, r3, #1
 8018210:	4613      	mov	r3, r2
 8018212:	005b      	lsls	r3, r3, #1
 8018214:	4413      	add	r3, r2
 8018216:	009b      	lsls	r3, r3, #2
 8018218:	4413      	add	r3, r2
 801821a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801821c:	2301      	movs	r3, #1
 801821e:	81fb      	strh	r3, [r7, #14]
 8018220:	2300      	movs	r3, #0
 8018222:	613b      	str	r3, [r7, #16]
 8018224:	e033      	b.n	801828e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018226:	4a27      	ldr	r2, [pc, #156]	; (80182c4 <cmp_lfn+0xdc>)
 8018228:	693b      	ldr	r3, [r7, #16]
 801822a:	4413      	add	r3, r2
 801822c:	781b      	ldrb	r3, [r3, #0]
 801822e:	461a      	mov	r2, r3
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	4413      	add	r3, r2
 8018234:	4618      	mov	r0, r3
 8018236:	f7fe ff61 	bl	80170fc <ld_word>
 801823a:	4603      	mov	r3, r0
 801823c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801823e:	89fb      	ldrh	r3, [r7, #14]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d01a      	beq.n	801827a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018244:	697b      	ldr	r3, [r7, #20]
 8018246:	2bfe      	cmp	r3, #254	; 0xfe
 8018248:	d812      	bhi.n	8018270 <cmp_lfn+0x88>
 801824a:	89bb      	ldrh	r3, [r7, #12]
 801824c:	4618      	mov	r0, r3
 801824e:	f001 fe11 	bl	8019e74 <ff_wtoupper>
 8018252:	4603      	mov	r3, r0
 8018254:	461c      	mov	r4, r3
 8018256:	697b      	ldr	r3, [r7, #20]
 8018258:	1c5a      	adds	r2, r3, #1
 801825a:	617a      	str	r2, [r7, #20]
 801825c:	005b      	lsls	r3, r3, #1
 801825e:	687a      	ldr	r2, [r7, #4]
 8018260:	4413      	add	r3, r2
 8018262:	881b      	ldrh	r3, [r3, #0]
 8018264:	4618      	mov	r0, r3
 8018266:	f001 fe05 	bl	8019e74 <ff_wtoupper>
 801826a:	4603      	mov	r3, r0
 801826c:	429c      	cmp	r4, r3
 801826e:	d001      	beq.n	8018274 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018270:	2300      	movs	r3, #0
 8018272:	e022      	b.n	80182ba <cmp_lfn+0xd2>
			}
			wc = uc;
 8018274:	89bb      	ldrh	r3, [r7, #12]
 8018276:	81fb      	strh	r3, [r7, #14]
 8018278:	e006      	b.n	8018288 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801827a:	89bb      	ldrh	r3, [r7, #12]
 801827c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018280:	4293      	cmp	r3, r2
 8018282:	d001      	beq.n	8018288 <cmp_lfn+0xa0>
 8018284:	2300      	movs	r3, #0
 8018286:	e018      	b.n	80182ba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018288:	693b      	ldr	r3, [r7, #16]
 801828a:	3301      	adds	r3, #1
 801828c:	613b      	str	r3, [r7, #16]
 801828e:	693b      	ldr	r3, [r7, #16]
 8018290:	2b0c      	cmp	r3, #12
 8018292:	d9c8      	bls.n	8018226 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018294:	683b      	ldr	r3, [r7, #0]
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801829c:	2b00      	cmp	r3, #0
 801829e:	d00b      	beq.n	80182b8 <cmp_lfn+0xd0>
 80182a0:	89fb      	ldrh	r3, [r7, #14]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d008      	beq.n	80182b8 <cmp_lfn+0xd0>
 80182a6:	697b      	ldr	r3, [r7, #20]
 80182a8:	005b      	lsls	r3, r3, #1
 80182aa:	687a      	ldr	r2, [r7, #4]
 80182ac:	4413      	add	r3, r2
 80182ae:	881b      	ldrh	r3, [r3, #0]
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d001      	beq.n	80182b8 <cmp_lfn+0xd0>
 80182b4:	2300      	movs	r3, #0
 80182b6:	e000      	b.n	80182ba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80182b8:	2301      	movs	r3, #1
}
 80182ba:	4618      	mov	r0, r3
 80182bc:	371c      	adds	r7, #28
 80182be:	46bd      	mov	sp, r7
 80182c0:	bd90      	pop	{r4, r7, pc}
 80182c2:	bf00      	nop
 80182c4:	0801c050 	.word	0x0801c050

080182c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b088      	sub	sp, #32
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	60f8      	str	r0, [r7, #12]
 80182d0:	60b9      	str	r1, [r7, #8]
 80182d2:	4611      	mov	r1, r2
 80182d4:	461a      	mov	r2, r3
 80182d6:	460b      	mov	r3, r1
 80182d8:	71fb      	strb	r3, [r7, #7]
 80182da:	4613      	mov	r3, r2
 80182dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80182de:	68bb      	ldr	r3, [r7, #8]
 80182e0:	330d      	adds	r3, #13
 80182e2:	79ba      	ldrb	r2, [r7, #6]
 80182e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80182e6:	68bb      	ldr	r3, [r7, #8]
 80182e8:	330b      	adds	r3, #11
 80182ea:	220f      	movs	r2, #15
 80182ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80182ee:	68bb      	ldr	r3, [r7, #8]
 80182f0:	330c      	adds	r3, #12
 80182f2:	2200      	movs	r2, #0
 80182f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80182f6:	68bb      	ldr	r3, [r7, #8]
 80182f8:	331a      	adds	r3, #26
 80182fa:	2100      	movs	r1, #0
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7fe ff38 	bl	8017172 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8018302:	79fb      	ldrb	r3, [r7, #7]
 8018304:	1e5a      	subs	r2, r3, #1
 8018306:	4613      	mov	r3, r2
 8018308:	005b      	lsls	r3, r3, #1
 801830a:	4413      	add	r3, r2
 801830c:	009b      	lsls	r3, r3, #2
 801830e:	4413      	add	r3, r2
 8018310:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8018312:	2300      	movs	r3, #0
 8018314:	82fb      	strh	r3, [r7, #22]
 8018316:	2300      	movs	r3, #0
 8018318:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801831a:	8afb      	ldrh	r3, [r7, #22]
 801831c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018320:	4293      	cmp	r3, r2
 8018322:	d007      	beq.n	8018334 <put_lfn+0x6c>
 8018324:	69fb      	ldr	r3, [r7, #28]
 8018326:	1c5a      	adds	r2, r3, #1
 8018328:	61fa      	str	r2, [r7, #28]
 801832a:	005b      	lsls	r3, r3, #1
 801832c:	68fa      	ldr	r2, [r7, #12]
 801832e:	4413      	add	r3, r2
 8018330:	881b      	ldrh	r3, [r3, #0]
 8018332:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018334:	4a17      	ldr	r2, [pc, #92]	; (8018394 <put_lfn+0xcc>)
 8018336:	69bb      	ldr	r3, [r7, #24]
 8018338:	4413      	add	r3, r2
 801833a:	781b      	ldrb	r3, [r3, #0]
 801833c:	461a      	mov	r2, r3
 801833e:	68bb      	ldr	r3, [r7, #8]
 8018340:	4413      	add	r3, r2
 8018342:	8afa      	ldrh	r2, [r7, #22]
 8018344:	4611      	mov	r1, r2
 8018346:	4618      	mov	r0, r3
 8018348:	f7fe ff13 	bl	8017172 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801834c:	8afb      	ldrh	r3, [r7, #22]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d102      	bne.n	8018358 <put_lfn+0x90>
 8018352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018356:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018358:	69bb      	ldr	r3, [r7, #24]
 801835a:	3301      	adds	r3, #1
 801835c:	61bb      	str	r3, [r7, #24]
 801835e:	69bb      	ldr	r3, [r7, #24]
 8018360:	2b0c      	cmp	r3, #12
 8018362:	d9da      	bls.n	801831a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018364:	8afb      	ldrh	r3, [r7, #22]
 8018366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801836a:	4293      	cmp	r3, r2
 801836c:	d006      	beq.n	801837c <put_lfn+0xb4>
 801836e:	69fb      	ldr	r3, [r7, #28]
 8018370:	005b      	lsls	r3, r3, #1
 8018372:	68fa      	ldr	r2, [r7, #12]
 8018374:	4413      	add	r3, r2
 8018376:	881b      	ldrh	r3, [r3, #0]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d103      	bne.n	8018384 <put_lfn+0xbc>
 801837c:	79fb      	ldrb	r3, [r7, #7]
 801837e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018382:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018384:	68bb      	ldr	r3, [r7, #8]
 8018386:	79fa      	ldrb	r2, [r7, #7]
 8018388:	701a      	strb	r2, [r3, #0]
}
 801838a:	bf00      	nop
 801838c:	3720      	adds	r7, #32
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}
 8018392:	bf00      	nop
 8018394:	0801c050 	.word	0x0801c050

08018398 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b08c      	sub	sp, #48	; 0x30
 801839c:	af00      	add	r7, sp, #0
 801839e:	60f8      	str	r0, [r7, #12]
 80183a0:	60b9      	str	r1, [r7, #8]
 80183a2:	607a      	str	r2, [r7, #4]
 80183a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80183a6:	220b      	movs	r2, #11
 80183a8:	68b9      	ldr	r1, [r7, #8]
 80183aa:	68f8      	ldr	r0, [r7, #12]
 80183ac:	f7fe ff28 	bl	8017200 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80183b0:	683b      	ldr	r3, [r7, #0]
 80183b2:	2b05      	cmp	r3, #5
 80183b4:	d929      	bls.n	801840a <gen_numname+0x72>
		sr = seq;
 80183b6:	683b      	ldr	r3, [r7, #0]
 80183b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80183ba:	e020      	b.n	80183fe <gen_numname+0x66>
			wc = *lfn++;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	1c9a      	adds	r2, r3, #2
 80183c0:	607a      	str	r2, [r7, #4]
 80183c2:	881b      	ldrh	r3, [r3, #0]
 80183c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80183c6:	2300      	movs	r3, #0
 80183c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80183ca:	e015      	b.n	80183f8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80183cc:	69fb      	ldr	r3, [r7, #28]
 80183ce:	005a      	lsls	r2, r3, #1
 80183d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80183d2:	f003 0301 	and.w	r3, r3, #1
 80183d6:	4413      	add	r3, r2
 80183d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80183da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80183dc:	085b      	lsrs	r3, r3, #1
 80183de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80183e0:	69fb      	ldr	r3, [r7, #28]
 80183e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d003      	beq.n	80183f2 <gen_numname+0x5a>
 80183ea:	69fa      	ldr	r2, [r7, #28]
 80183ec:	4b30      	ldr	r3, [pc, #192]	; (80184b0 <gen_numname+0x118>)
 80183ee:	4053      	eors	r3, r2
 80183f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80183f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f4:	3301      	adds	r3, #1
 80183f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80183f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183fa:	2b0f      	cmp	r3, #15
 80183fc:	d9e6      	bls.n	80183cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	881b      	ldrh	r3, [r3, #0]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d1da      	bne.n	80183bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018406:	69fb      	ldr	r3, [r7, #28]
 8018408:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801840a:	2307      	movs	r3, #7
 801840c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801840e:	683b      	ldr	r3, [r7, #0]
 8018410:	b2db      	uxtb	r3, r3
 8018412:	f003 030f 	and.w	r3, r3, #15
 8018416:	b2db      	uxtb	r3, r3
 8018418:	3330      	adds	r3, #48	; 0x30
 801841a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801841e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018422:	2b39      	cmp	r3, #57	; 0x39
 8018424:	d904      	bls.n	8018430 <gen_numname+0x98>
 8018426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801842a:	3307      	adds	r3, #7
 801842c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8018430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018432:	1e5a      	subs	r2, r3, #1
 8018434:	62ba      	str	r2, [r7, #40]	; 0x28
 8018436:	3330      	adds	r3, #48	; 0x30
 8018438:	443b      	add	r3, r7
 801843a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801843e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	091b      	lsrs	r3, r3, #4
 8018446:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018448:	683b      	ldr	r3, [r7, #0]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d1df      	bne.n	801840e <gen_numname+0x76>
	ns[i] = '~';
 801844e:	f107 0214 	add.w	r2, r7, #20
 8018452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018454:	4413      	add	r3, r2
 8018456:	227e      	movs	r2, #126	; 0x7e
 8018458:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801845a:	2300      	movs	r3, #0
 801845c:	627b      	str	r3, [r7, #36]	; 0x24
 801845e:	e002      	b.n	8018466 <gen_numname+0xce>
 8018460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018462:	3301      	adds	r3, #1
 8018464:	627b      	str	r3, [r7, #36]	; 0x24
 8018466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801846a:	429a      	cmp	r2, r3
 801846c:	d205      	bcs.n	801847a <gen_numname+0xe2>
 801846e:	68fa      	ldr	r2, [r7, #12]
 8018470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018472:	4413      	add	r3, r2
 8018474:	781b      	ldrb	r3, [r3, #0]
 8018476:	2b20      	cmp	r3, #32
 8018478:	d1f2      	bne.n	8018460 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801847c:	2b07      	cmp	r3, #7
 801847e:	d807      	bhi.n	8018490 <gen_numname+0xf8>
 8018480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018482:	1c5a      	adds	r2, r3, #1
 8018484:	62ba      	str	r2, [r7, #40]	; 0x28
 8018486:	3330      	adds	r3, #48	; 0x30
 8018488:	443b      	add	r3, r7
 801848a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801848e:	e000      	b.n	8018492 <gen_numname+0xfa>
 8018490:	2120      	movs	r1, #32
 8018492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018494:	1c5a      	adds	r2, r3, #1
 8018496:	627a      	str	r2, [r7, #36]	; 0x24
 8018498:	68fa      	ldr	r2, [r7, #12]
 801849a:	4413      	add	r3, r2
 801849c:	460a      	mov	r2, r1
 801849e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80184a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184a2:	2b07      	cmp	r3, #7
 80184a4:	d9e9      	bls.n	801847a <gen_numname+0xe2>
}
 80184a6:	bf00      	nop
 80184a8:	bf00      	nop
 80184aa:	3730      	adds	r7, #48	; 0x30
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}
 80184b0:	00011021 	.word	0x00011021

080184b4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80184b4:	b480      	push	{r7}
 80184b6:	b085      	sub	sp, #20
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80184bc:	2300      	movs	r3, #0
 80184be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80184c0:	230b      	movs	r3, #11
 80184c2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80184c4:	7bfb      	ldrb	r3, [r7, #15]
 80184c6:	b2da      	uxtb	r2, r3
 80184c8:	0852      	lsrs	r2, r2, #1
 80184ca:	01db      	lsls	r3, r3, #7
 80184cc:	4313      	orrs	r3, r2
 80184ce:	b2da      	uxtb	r2, r3
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	1c59      	adds	r1, r3, #1
 80184d4:	6079      	str	r1, [r7, #4]
 80184d6:	781b      	ldrb	r3, [r3, #0]
 80184d8:	4413      	add	r3, r2
 80184da:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80184dc:	68bb      	ldr	r3, [r7, #8]
 80184de:	3b01      	subs	r3, #1
 80184e0:	60bb      	str	r3, [r7, #8]
 80184e2:	68bb      	ldr	r3, [r7, #8]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d1ed      	bne.n	80184c4 <sum_sfn+0x10>
	return sum;
 80184e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80184ea:	4618      	mov	r0, r3
 80184ec:	3714      	adds	r7, #20
 80184ee:	46bd      	mov	sp, r7
 80184f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f4:	4770      	bx	lr

080184f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80184f6:	b580      	push	{r7, lr}
 80184f8:	b086      	sub	sp, #24
 80184fa:	af00      	add	r7, sp, #0
 80184fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018504:	2100      	movs	r1, #0
 8018506:	6878      	ldr	r0, [r7, #4]
 8018508:	f7ff fc88 	bl	8017e1c <dir_sdi>
 801850c:	4603      	mov	r3, r0
 801850e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018510:	7dfb      	ldrb	r3, [r7, #23]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d001      	beq.n	801851a <dir_find+0x24>
 8018516:	7dfb      	ldrb	r3, [r7, #23]
 8018518:	e0a9      	b.n	801866e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801851a:	23ff      	movs	r3, #255	; 0xff
 801851c:	753b      	strb	r3, [r7, #20]
 801851e:	7d3b      	ldrb	r3, [r7, #20]
 8018520:	757b      	strb	r3, [r7, #21]
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	f04f 32ff 	mov.w	r2, #4294967295
 8018528:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	69db      	ldr	r3, [r3, #28]
 801852e:	4619      	mov	r1, r3
 8018530:	6938      	ldr	r0, [r7, #16]
 8018532:	f7ff f893 	bl	801765c <move_window>
 8018536:	4603      	mov	r3, r0
 8018538:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801853a:	7dfb      	ldrb	r3, [r7, #23]
 801853c:	2b00      	cmp	r3, #0
 801853e:	f040 8090 	bne.w	8018662 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	6a1b      	ldr	r3, [r3, #32]
 8018546:	781b      	ldrb	r3, [r3, #0]
 8018548:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801854a:	7dbb      	ldrb	r3, [r7, #22]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d102      	bne.n	8018556 <dir_find+0x60>
 8018550:	2304      	movs	r3, #4
 8018552:	75fb      	strb	r3, [r7, #23]
 8018554:	e08a      	b.n	801866c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	6a1b      	ldr	r3, [r3, #32]
 801855a:	330b      	adds	r3, #11
 801855c:	781b      	ldrb	r3, [r3, #0]
 801855e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018562:	73fb      	strb	r3, [r7, #15]
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	7bfa      	ldrb	r2, [r7, #15]
 8018568:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801856a:	7dbb      	ldrb	r3, [r7, #22]
 801856c:	2be5      	cmp	r3, #229	; 0xe5
 801856e:	d007      	beq.n	8018580 <dir_find+0x8a>
 8018570:	7bfb      	ldrb	r3, [r7, #15]
 8018572:	f003 0308 	and.w	r3, r3, #8
 8018576:	2b00      	cmp	r3, #0
 8018578:	d009      	beq.n	801858e <dir_find+0x98>
 801857a:	7bfb      	ldrb	r3, [r7, #15]
 801857c:	2b0f      	cmp	r3, #15
 801857e:	d006      	beq.n	801858e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018580:	23ff      	movs	r3, #255	; 0xff
 8018582:	757b      	strb	r3, [r7, #21]
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	f04f 32ff 	mov.w	r2, #4294967295
 801858a:	631a      	str	r2, [r3, #48]	; 0x30
 801858c:	e05e      	b.n	801864c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801858e:	7bfb      	ldrb	r3, [r7, #15]
 8018590:	2b0f      	cmp	r3, #15
 8018592:	d136      	bne.n	8018602 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801859a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d154      	bne.n	801864c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80185a2:	7dbb      	ldrb	r3, [r7, #22]
 80185a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d00d      	beq.n	80185c8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	6a1b      	ldr	r3, [r3, #32]
 80185b0:	7b5b      	ldrb	r3, [r3, #13]
 80185b2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80185b4:	7dbb      	ldrb	r3, [r7, #22]
 80185b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80185ba:	75bb      	strb	r3, [r7, #22]
 80185bc:	7dbb      	ldrb	r3, [r7, #22]
 80185be:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	695a      	ldr	r2, [r3, #20]
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80185c8:	7dba      	ldrb	r2, [r7, #22]
 80185ca:	7d7b      	ldrb	r3, [r7, #21]
 80185cc:	429a      	cmp	r2, r3
 80185ce:	d115      	bne.n	80185fc <dir_find+0x106>
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	6a1b      	ldr	r3, [r3, #32]
 80185d4:	330d      	adds	r3, #13
 80185d6:	781b      	ldrb	r3, [r3, #0]
 80185d8:	7d3a      	ldrb	r2, [r7, #20]
 80185da:	429a      	cmp	r2, r3
 80185dc:	d10e      	bne.n	80185fc <dir_find+0x106>
 80185de:	693b      	ldr	r3, [r7, #16]
 80185e0:	691a      	ldr	r2, [r3, #16]
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	6a1b      	ldr	r3, [r3, #32]
 80185e6:	4619      	mov	r1, r3
 80185e8:	4610      	mov	r0, r2
 80185ea:	f7ff fdfd 	bl	80181e8 <cmp_lfn>
 80185ee:	4603      	mov	r3, r0
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d003      	beq.n	80185fc <dir_find+0x106>
 80185f4:	7d7b      	ldrb	r3, [r7, #21]
 80185f6:	3b01      	subs	r3, #1
 80185f8:	b2db      	uxtb	r3, r3
 80185fa:	e000      	b.n	80185fe <dir_find+0x108>
 80185fc:	23ff      	movs	r3, #255	; 0xff
 80185fe:	757b      	strb	r3, [r7, #21]
 8018600:	e024      	b.n	801864c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018602:	7d7b      	ldrb	r3, [r7, #21]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d109      	bne.n	801861c <dir_find+0x126>
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	6a1b      	ldr	r3, [r3, #32]
 801860c:	4618      	mov	r0, r3
 801860e:	f7ff ff51 	bl	80184b4 <sum_sfn>
 8018612:	4603      	mov	r3, r0
 8018614:	461a      	mov	r2, r3
 8018616:	7d3b      	ldrb	r3, [r7, #20]
 8018618:	4293      	cmp	r3, r2
 801861a:	d024      	beq.n	8018666 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018622:	f003 0301 	and.w	r3, r3, #1
 8018626:	2b00      	cmp	r3, #0
 8018628:	d10a      	bne.n	8018640 <dir_find+0x14a>
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	6a18      	ldr	r0, [r3, #32]
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	3324      	adds	r3, #36	; 0x24
 8018632:	220b      	movs	r2, #11
 8018634:	4619      	mov	r1, r3
 8018636:	f7fe fe1f 	bl	8017278 <mem_cmp>
 801863a:	4603      	mov	r3, r0
 801863c:	2b00      	cmp	r3, #0
 801863e:	d014      	beq.n	801866a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018640:	23ff      	movs	r3, #255	; 0xff
 8018642:	757b      	strb	r3, [r7, #21]
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	f04f 32ff 	mov.w	r2, #4294967295
 801864a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801864c:	2100      	movs	r1, #0
 801864e:	6878      	ldr	r0, [r7, #4]
 8018650:	f7ff fc6d 	bl	8017f2e <dir_next>
 8018654:	4603      	mov	r3, r0
 8018656:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018658:	7dfb      	ldrb	r3, [r7, #23]
 801865a:	2b00      	cmp	r3, #0
 801865c:	f43f af65 	beq.w	801852a <dir_find+0x34>
 8018660:	e004      	b.n	801866c <dir_find+0x176>
		if (res != FR_OK) break;
 8018662:	bf00      	nop
 8018664:	e002      	b.n	801866c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018666:	bf00      	nop
 8018668:	e000      	b.n	801866c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801866a:	bf00      	nop

	return res;
 801866c:	7dfb      	ldrb	r3, [r7, #23]
}
 801866e:	4618      	mov	r0, r3
 8018670:	3718      	adds	r7, #24
 8018672:	46bd      	mov	sp, r7
 8018674:	bd80      	pop	{r7, pc}
	...

08018678 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b08c      	sub	sp, #48	; 0x30
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801868c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018690:	2b00      	cmp	r3, #0
 8018692:	d001      	beq.n	8018698 <dir_register+0x20>
 8018694:	2306      	movs	r3, #6
 8018696:	e0e0      	b.n	801885a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018698:	2300      	movs	r3, #0
 801869a:	627b      	str	r3, [r7, #36]	; 0x24
 801869c:	e002      	b.n	80186a4 <dir_register+0x2c>
 801869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186a0:	3301      	adds	r3, #1
 80186a2:	627b      	str	r3, [r7, #36]	; 0x24
 80186a4:	69fb      	ldr	r3, [r7, #28]
 80186a6:	691a      	ldr	r2, [r3, #16]
 80186a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186aa:	005b      	lsls	r3, r3, #1
 80186ac:	4413      	add	r3, r2
 80186ae:	881b      	ldrh	r3, [r3, #0]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d1f4      	bne.n	801869e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80186ba:	f107 030c 	add.w	r3, r7, #12
 80186be:	220c      	movs	r2, #12
 80186c0:	4618      	mov	r0, r3
 80186c2:	f7fe fd9d 	bl	8017200 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80186c6:	7dfb      	ldrb	r3, [r7, #23]
 80186c8:	f003 0301 	and.w	r3, r3, #1
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d032      	beq.n	8018736 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	2240      	movs	r2, #64	; 0x40
 80186d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80186d8:	2301      	movs	r3, #1
 80186da:	62bb      	str	r3, [r7, #40]	; 0x28
 80186dc:	e016      	b.n	801870c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80186e4:	69fb      	ldr	r3, [r7, #28]
 80186e6:	691a      	ldr	r2, [r3, #16]
 80186e8:	f107 010c 	add.w	r1, r7, #12
 80186ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ee:	f7ff fe53 	bl	8018398 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80186f2:	6878      	ldr	r0, [r7, #4]
 80186f4:	f7ff feff 	bl	80184f6 <dir_find>
 80186f8:	4603      	mov	r3, r0
 80186fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80186fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018702:	2b00      	cmp	r3, #0
 8018704:	d106      	bne.n	8018714 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018708:	3301      	adds	r3, #1
 801870a:	62bb      	str	r3, [r7, #40]	; 0x28
 801870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801870e:	2b63      	cmp	r3, #99	; 0x63
 8018710:	d9e5      	bls.n	80186de <dir_register+0x66>
 8018712:	e000      	b.n	8018716 <dir_register+0x9e>
			if (res != FR_OK) break;
 8018714:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018718:	2b64      	cmp	r3, #100	; 0x64
 801871a:	d101      	bne.n	8018720 <dir_register+0xa8>
 801871c:	2307      	movs	r3, #7
 801871e:	e09c      	b.n	801885a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018724:	2b04      	cmp	r3, #4
 8018726:	d002      	beq.n	801872e <dir_register+0xb6>
 8018728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801872c:	e095      	b.n	801885a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801872e:	7dfa      	ldrb	r2, [r7, #23]
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018736:	7dfb      	ldrb	r3, [r7, #23]
 8018738:	f003 0302 	and.w	r3, r3, #2
 801873c:	2b00      	cmp	r3, #0
 801873e:	d007      	beq.n	8018750 <dir_register+0xd8>
 8018740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018742:	330c      	adds	r3, #12
 8018744:	4a47      	ldr	r2, [pc, #284]	; (8018864 <dir_register+0x1ec>)
 8018746:	fba2 2303 	umull	r2, r3, r2, r3
 801874a:	089b      	lsrs	r3, r3, #2
 801874c:	3301      	adds	r3, #1
 801874e:	e000      	b.n	8018752 <dir_register+0xda>
 8018750:	2301      	movs	r3, #1
 8018752:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018754:	6a39      	ldr	r1, [r7, #32]
 8018756:	6878      	ldr	r0, [r7, #4]
 8018758:	f7ff fcbf 	bl	80180da <dir_alloc>
 801875c:	4603      	mov	r3, r0
 801875e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018766:	2b00      	cmp	r3, #0
 8018768:	d148      	bne.n	80187fc <dir_register+0x184>
 801876a:	6a3b      	ldr	r3, [r7, #32]
 801876c:	3b01      	subs	r3, #1
 801876e:	623b      	str	r3, [r7, #32]
 8018770:	6a3b      	ldr	r3, [r7, #32]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d042      	beq.n	80187fc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	695a      	ldr	r2, [r3, #20]
 801877a:	6a3b      	ldr	r3, [r7, #32]
 801877c:	015b      	lsls	r3, r3, #5
 801877e:	1ad3      	subs	r3, r2, r3
 8018780:	4619      	mov	r1, r3
 8018782:	6878      	ldr	r0, [r7, #4]
 8018784:	f7ff fb4a 	bl	8017e1c <dir_sdi>
 8018788:	4603      	mov	r3, r0
 801878a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801878e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018792:	2b00      	cmp	r3, #0
 8018794:	d132      	bne.n	80187fc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	3324      	adds	r3, #36	; 0x24
 801879a:	4618      	mov	r0, r3
 801879c:	f7ff fe8a 	bl	80184b4 <sum_sfn>
 80187a0:	4603      	mov	r3, r0
 80187a2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	69db      	ldr	r3, [r3, #28]
 80187a8:	4619      	mov	r1, r3
 80187aa:	69f8      	ldr	r0, [r7, #28]
 80187ac:	f7fe ff56 	bl	801765c <move_window>
 80187b0:	4603      	mov	r3, r0
 80187b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80187b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d11d      	bne.n	80187fa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80187be:	69fb      	ldr	r3, [r7, #28]
 80187c0:	6918      	ldr	r0, [r3, #16]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	6a19      	ldr	r1, [r3, #32]
 80187c6:	6a3b      	ldr	r3, [r7, #32]
 80187c8:	b2da      	uxtb	r2, r3
 80187ca:	7efb      	ldrb	r3, [r7, #27]
 80187cc:	f7ff fd7c 	bl	80182c8 <put_lfn>
				fs->wflag = 1;
 80187d0:	69fb      	ldr	r3, [r7, #28]
 80187d2:	2201      	movs	r2, #1
 80187d4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80187d6:	2100      	movs	r1, #0
 80187d8:	6878      	ldr	r0, [r7, #4]
 80187da:	f7ff fba8 	bl	8017f2e <dir_next>
 80187de:	4603      	mov	r3, r0
 80187e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80187e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d107      	bne.n	80187fc <dir_register+0x184>
 80187ec:	6a3b      	ldr	r3, [r7, #32]
 80187ee:	3b01      	subs	r3, #1
 80187f0:	623b      	str	r3, [r7, #32]
 80187f2:	6a3b      	ldr	r3, [r7, #32]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d1d5      	bne.n	80187a4 <dir_register+0x12c>
 80187f8:	e000      	b.n	80187fc <dir_register+0x184>
				if (res != FR_OK) break;
 80187fa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80187fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018800:	2b00      	cmp	r3, #0
 8018802:	d128      	bne.n	8018856 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	69db      	ldr	r3, [r3, #28]
 8018808:	4619      	mov	r1, r3
 801880a:	69f8      	ldr	r0, [r7, #28]
 801880c:	f7fe ff26 	bl	801765c <move_window>
 8018810:	4603      	mov	r3, r0
 8018812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801881a:	2b00      	cmp	r3, #0
 801881c:	d11b      	bne.n	8018856 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	6a1b      	ldr	r3, [r3, #32]
 8018822:	2220      	movs	r2, #32
 8018824:	2100      	movs	r1, #0
 8018826:	4618      	mov	r0, r3
 8018828:	f7fe fd0b 	bl	8017242 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	6a18      	ldr	r0, [r3, #32]
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	3324      	adds	r3, #36	; 0x24
 8018834:	220b      	movs	r2, #11
 8018836:	4619      	mov	r1, r3
 8018838:	f7fe fce2 	bl	8017200 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	6a1b      	ldr	r3, [r3, #32]
 8018846:	330c      	adds	r3, #12
 8018848:	f002 0218 	and.w	r2, r2, #24
 801884c:	b2d2      	uxtb	r2, r2
 801884e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018850:	69fb      	ldr	r3, [r7, #28]
 8018852:	2201      	movs	r2, #1
 8018854:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801885a:	4618      	mov	r0, r3
 801885c:	3730      	adds	r7, #48	; 0x30
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}
 8018862:	bf00      	nop
 8018864:	4ec4ec4f 	.word	0x4ec4ec4f

08018868 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b08a      	sub	sp, #40	; 0x28
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
 8018870:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018872:	683b      	ldr	r3, [r7, #0]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	613b      	str	r3, [r7, #16]
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	691b      	ldr	r3, [r3, #16]
 801887e:	60fb      	str	r3, [r7, #12]
 8018880:	2300      	movs	r3, #0
 8018882:	617b      	str	r3, [r7, #20]
 8018884:	697b      	ldr	r3, [r7, #20]
 8018886:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018888:	69bb      	ldr	r3, [r7, #24]
 801888a:	1c5a      	adds	r2, r3, #1
 801888c:	61ba      	str	r2, [r7, #24]
 801888e:	693a      	ldr	r2, [r7, #16]
 8018890:	4413      	add	r3, r2
 8018892:	781b      	ldrb	r3, [r3, #0]
 8018894:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018898:	2b1f      	cmp	r3, #31
 801889a:	d940      	bls.n	801891e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801889c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801889e:	2b2f      	cmp	r3, #47	; 0x2f
 80188a0:	d006      	beq.n	80188b0 <create_name+0x48>
 80188a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188a4:	2b5c      	cmp	r3, #92	; 0x5c
 80188a6:	d110      	bne.n	80188ca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80188a8:	e002      	b.n	80188b0 <create_name+0x48>
 80188aa:	69bb      	ldr	r3, [r7, #24]
 80188ac:	3301      	adds	r3, #1
 80188ae:	61bb      	str	r3, [r7, #24]
 80188b0:	693a      	ldr	r2, [r7, #16]
 80188b2:	69bb      	ldr	r3, [r7, #24]
 80188b4:	4413      	add	r3, r2
 80188b6:	781b      	ldrb	r3, [r3, #0]
 80188b8:	2b2f      	cmp	r3, #47	; 0x2f
 80188ba:	d0f6      	beq.n	80188aa <create_name+0x42>
 80188bc:	693a      	ldr	r2, [r7, #16]
 80188be:	69bb      	ldr	r3, [r7, #24]
 80188c0:	4413      	add	r3, r2
 80188c2:	781b      	ldrb	r3, [r3, #0]
 80188c4:	2b5c      	cmp	r3, #92	; 0x5c
 80188c6:	d0f0      	beq.n	80188aa <create_name+0x42>
			break;
 80188c8:	e02a      	b.n	8018920 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80188ca:	697b      	ldr	r3, [r7, #20]
 80188cc:	2bfe      	cmp	r3, #254	; 0xfe
 80188ce:	d901      	bls.n	80188d4 <create_name+0x6c>
 80188d0:	2306      	movs	r3, #6
 80188d2:	e17d      	b.n	8018bd0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80188d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188d6:	b2db      	uxtb	r3, r3
 80188d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80188da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188dc:	2101      	movs	r1, #1
 80188de:	4618      	mov	r0, r3
 80188e0:	f001 fa8c 	bl	8019dfc <ff_convert>
 80188e4:	4603      	mov	r3, r0
 80188e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80188e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d101      	bne.n	80188f2 <create_name+0x8a>
 80188ee:	2306      	movs	r3, #6
 80188f0:	e16e      	b.n	8018bd0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80188f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188f4:	2b7f      	cmp	r3, #127	; 0x7f
 80188f6:	d809      	bhi.n	801890c <create_name+0xa4>
 80188f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188fa:	4619      	mov	r1, r3
 80188fc:	488d      	ldr	r0, [pc, #564]	; (8018b34 <create_name+0x2cc>)
 80188fe:	f7fe fce2 	bl	80172c6 <chk_chr>
 8018902:	4603      	mov	r3, r0
 8018904:	2b00      	cmp	r3, #0
 8018906:	d001      	beq.n	801890c <create_name+0xa4>
 8018908:	2306      	movs	r3, #6
 801890a:	e161      	b.n	8018bd0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801890c:	697b      	ldr	r3, [r7, #20]
 801890e:	1c5a      	adds	r2, r3, #1
 8018910:	617a      	str	r2, [r7, #20]
 8018912:	005b      	lsls	r3, r3, #1
 8018914:	68fa      	ldr	r2, [r7, #12]
 8018916:	4413      	add	r3, r2
 8018918:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801891a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801891c:	e7b4      	b.n	8018888 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801891e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018920:	693a      	ldr	r2, [r7, #16]
 8018922:	69bb      	ldr	r3, [r7, #24]
 8018924:	441a      	add	r2, r3
 8018926:	683b      	ldr	r3, [r7, #0]
 8018928:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801892a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801892c:	2b1f      	cmp	r3, #31
 801892e:	d801      	bhi.n	8018934 <create_name+0xcc>
 8018930:	2304      	movs	r3, #4
 8018932:	e000      	b.n	8018936 <create_name+0xce>
 8018934:	2300      	movs	r3, #0
 8018936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801893a:	e011      	b.n	8018960 <create_name+0xf8>
		w = lfn[di - 1];
 801893c:	697a      	ldr	r2, [r7, #20]
 801893e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018942:	4413      	add	r3, r2
 8018944:	005b      	lsls	r3, r3, #1
 8018946:	68fa      	ldr	r2, [r7, #12]
 8018948:	4413      	add	r3, r2
 801894a:	881b      	ldrh	r3, [r3, #0]
 801894c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801894e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018950:	2b20      	cmp	r3, #32
 8018952:	d002      	beq.n	801895a <create_name+0xf2>
 8018954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018956:	2b2e      	cmp	r3, #46	; 0x2e
 8018958:	d106      	bne.n	8018968 <create_name+0x100>
		di--;
 801895a:	697b      	ldr	r3, [r7, #20]
 801895c:	3b01      	subs	r3, #1
 801895e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018960:	697b      	ldr	r3, [r7, #20]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d1ea      	bne.n	801893c <create_name+0xd4>
 8018966:	e000      	b.n	801896a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018968:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801896a:	697b      	ldr	r3, [r7, #20]
 801896c:	005b      	lsls	r3, r3, #1
 801896e:	68fa      	ldr	r2, [r7, #12]
 8018970:	4413      	add	r3, r2
 8018972:	2200      	movs	r2, #0
 8018974:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018976:	697b      	ldr	r3, [r7, #20]
 8018978:	2b00      	cmp	r3, #0
 801897a:	d101      	bne.n	8018980 <create_name+0x118>
 801897c:	2306      	movs	r3, #6
 801897e:	e127      	b.n	8018bd0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	3324      	adds	r3, #36	; 0x24
 8018984:	220b      	movs	r2, #11
 8018986:	2120      	movs	r1, #32
 8018988:	4618      	mov	r0, r3
 801898a:	f7fe fc5a 	bl	8017242 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801898e:	2300      	movs	r3, #0
 8018990:	61bb      	str	r3, [r7, #24]
 8018992:	e002      	b.n	801899a <create_name+0x132>
 8018994:	69bb      	ldr	r3, [r7, #24]
 8018996:	3301      	adds	r3, #1
 8018998:	61bb      	str	r3, [r7, #24]
 801899a:	69bb      	ldr	r3, [r7, #24]
 801899c:	005b      	lsls	r3, r3, #1
 801899e:	68fa      	ldr	r2, [r7, #12]
 80189a0:	4413      	add	r3, r2
 80189a2:	881b      	ldrh	r3, [r3, #0]
 80189a4:	2b20      	cmp	r3, #32
 80189a6:	d0f5      	beq.n	8018994 <create_name+0x12c>
 80189a8:	69bb      	ldr	r3, [r7, #24]
 80189aa:	005b      	lsls	r3, r3, #1
 80189ac:	68fa      	ldr	r2, [r7, #12]
 80189ae:	4413      	add	r3, r2
 80189b0:	881b      	ldrh	r3, [r3, #0]
 80189b2:	2b2e      	cmp	r3, #46	; 0x2e
 80189b4:	d0ee      	beq.n	8018994 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80189b6:	69bb      	ldr	r3, [r7, #24]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d009      	beq.n	80189d0 <create_name+0x168>
 80189bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189c0:	f043 0303 	orr.w	r3, r3, #3
 80189c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80189c8:	e002      	b.n	80189d0 <create_name+0x168>
 80189ca:	697b      	ldr	r3, [r7, #20]
 80189cc:	3b01      	subs	r3, #1
 80189ce:	617b      	str	r3, [r7, #20]
 80189d0:	697b      	ldr	r3, [r7, #20]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d009      	beq.n	80189ea <create_name+0x182>
 80189d6:	697a      	ldr	r2, [r7, #20]
 80189d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80189dc:	4413      	add	r3, r2
 80189de:	005b      	lsls	r3, r3, #1
 80189e0:	68fa      	ldr	r2, [r7, #12]
 80189e2:	4413      	add	r3, r2
 80189e4:	881b      	ldrh	r3, [r3, #0]
 80189e6:	2b2e      	cmp	r3, #46	; 0x2e
 80189e8:	d1ef      	bne.n	80189ca <create_name+0x162>

	i = b = 0; ni = 8;
 80189ea:	2300      	movs	r3, #0
 80189ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80189f0:	2300      	movs	r3, #0
 80189f2:	623b      	str	r3, [r7, #32]
 80189f4:	2308      	movs	r3, #8
 80189f6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80189f8:	69bb      	ldr	r3, [r7, #24]
 80189fa:	1c5a      	adds	r2, r3, #1
 80189fc:	61ba      	str	r2, [r7, #24]
 80189fe:	005b      	lsls	r3, r3, #1
 8018a00:	68fa      	ldr	r2, [r7, #12]
 8018a02:	4413      	add	r3, r2
 8018a04:	881b      	ldrh	r3, [r3, #0]
 8018a06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	f000 8090 	beq.w	8018b30 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8018a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a12:	2b20      	cmp	r3, #32
 8018a14:	d006      	beq.n	8018a24 <create_name+0x1bc>
 8018a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a18:	2b2e      	cmp	r3, #46	; 0x2e
 8018a1a:	d10a      	bne.n	8018a32 <create_name+0x1ca>
 8018a1c:	69ba      	ldr	r2, [r7, #24]
 8018a1e:	697b      	ldr	r3, [r7, #20]
 8018a20:	429a      	cmp	r2, r3
 8018a22:	d006      	beq.n	8018a32 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a28:	f043 0303 	orr.w	r3, r3, #3
 8018a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018a30:	e07d      	b.n	8018b2e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8018a32:	6a3a      	ldr	r2, [r7, #32]
 8018a34:	69fb      	ldr	r3, [r7, #28]
 8018a36:	429a      	cmp	r2, r3
 8018a38:	d203      	bcs.n	8018a42 <create_name+0x1da>
 8018a3a:	69ba      	ldr	r2, [r7, #24]
 8018a3c:	697b      	ldr	r3, [r7, #20]
 8018a3e:	429a      	cmp	r2, r3
 8018a40:	d123      	bne.n	8018a8a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8018a42:	69fb      	ldr	r3, [r7, #28]
 8018a44:	2b0b      	cmp	r3, #11
 8018a46:	d106      	bne.n	8018a56 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a4c:	f043 0303 	orr.w	r3, r3, #3
 8018a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018a54:	e075      	b.n	8018b42 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018a56:	69ba      	ldr	r2, [r7, #24]
 8018a58:	697b      	ldr	r3, [r7, #20]
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d005      	beq.n	8018a6a <create_name+0x202>
 8018a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a62:	f043 0303 	orr.w	r3, r3, #3
 8018a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018a6a:	69ba      	ldr	r2, [r7, #24]
 8018a6c:	697b      	ldr	r3, [r7, #20]
 8018a6e:	429a      	cmp	r2, r3
 8018a70:	d866      	bhi.n	8018b40 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8018a72:	697b      	ldr	r3, [r7, #20]
 8018a74:	61bb      	str	r3, [r7, #24]
 8018a76:	2308      	movs	r3, #8
 8018a78:	623b      	str	r3, [r7, #32]
 8018a7a:	230b      	movs	r3, #11
 8018a7c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8018a7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a82:	009b      	lsls	r3, r3, #2
 8018a84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018a88:	e051      	b.n	8018b2e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8018a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8018a8e:	d914      	bls.n	8018aba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8018a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a92:	2100      	movs	r1, #0
 8018a94:	4618      	mov	r0, r3
 8018a96:	f001 f9b1 	bl	8019dfc <ff_convert>
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d004      	beq.n	8018aae <create_name+0x246>
 8018aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018aa6:	3b80      	subs	r3, #128	; 0x80
 8018aa8:	4a23      	ldr	r2, [pc, #140]	; (8018b38 <create_name+0x2d0>)
 8018aaa:	5cd3      	ldrb	r3, [r2, r3]
 8018aac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018aae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ab2:	f043 0302 	orr.w	r3, r3, #2
 8018ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8018aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d007      	beq.n	8018ad0 <create_name+0x268>
 8018ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ac2:	4619      	mov	r1, r3
 8018ac4:	481d      	ldr	r0, [pc, #116]	; (8018b3c <create_name+0x2d4>)
 8018ac6:	f7fe fbfe 	bl	80172c6 <chk_chr>
 8018aca:	4603      	mov	r3, r0
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d008      	beq.n	8018ae2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018ad0:	235f      	movs	r3, #95	; 0x5f
 8018ad2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ad8:	f043 0303 	orr.w	r3, r3, #3
 8018adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ae0:	e01b      	b.n	8018b1a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8018ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ae4:	2b40      	cmp	r3, #64	; 0x40
 8018ae6:	d909      	bls.n	8018afc <create_name+0x294>
 8018ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018aea:	2b5a      	cmp	r3, #90	; 0x5a
 8018aec:	d806      	bhi.n	8018afc <create_name+0x294>
					b |= 2;
 8018aee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018af2:	f043 0302 	orr.w	r3, r3, #2
 8018af6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018afa:	e00e      	b.n	8018b1a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018afe:	2b60      	cmp	r3, #96	; 0x60
 8018b00:	d90b      	bls.n	8018b1a <create_name+0x2b2>
 8018b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b04:	2b7a      	cmp	r3, #122	; 0x7a
 8018b06:	d808      	bhi.n	8018b1a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018b08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b0c:	f043 0301 	orr.w	r3, r3, #1
 8018b10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b16:	3b20      	subs	r3, #32
 8018b18:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018b1a:	6a3b      	ldr	r3, [r7, #32]
 8018b1c:	1c5a      	adds	r2, r3, #1
 8018b1e:	623a      	str	r2, [r7, #32]
 8018b20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018b22:	b2d1      	uxtb	r1, r2
 8018b24:	687a      	ldr	r2, [r7, #4]
 8018b26:	4413      	add	r3, r2
 8018b28:	460a      	mov	r2, r1
 8018b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8018b2e:	e763      	b.n	80189f8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8018b30:	bf00      	nop
 8018b32:	e006      	b.n	8018b42 <create_name+0x2da>
 8018b34:	0801be7c 	.word	0x0801be7c
 8018b38:	0801bfd0 	.word	0x0801bfd0
 8018b3c:	0801be88 	.word	0x0801be88
			if (si > di) break;			/* No extension */
 8018b40:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018b48:	2be5      	cmp	r3, #229	; 0xe5
 8018b4a:	d103      	bne.n	8018b54 <create_name+0x2ec>
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	2205      	movs	r2, #5
 8018b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8018b54:	69fb      	ldr	r3, [r7, #28]
 8018b56:	2b08      	cmp	r3, #8
 8018b58:	d104      	bne.n	8018b64 <create_name+0x2fc>
 8018b5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b5e:	009b      	lsls	r3, r3, #2
 8018b60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8018b64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b68:	f003 030c 	and.w	r3, r3, #12
 8018b6c:	2b0c      	cmp	r3, #12
 8018b6e:	d005      	beq.n	8018b7c <create_name+0x314>
 8018b70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b74:	f003 0303 	and.w	r3, r3, #3
 8018b78:	2b03      	cmp	r3, #3
 8018b7a:	d105      	bne.n	8018b88 <create_name+0x320>
 8018b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b80:	f043 0302 	orr.w	r3, r3, #2
 8018b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8018b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b8c:	f003 0302 	and.w	r3, r3, #2
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d117      	bne.n	8018bc4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8018b94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b98:	f003 0303 	and.w	r3, r3, #3
 8018b9c:	2b01      	cmp	r3, #1
 8018b9e:	d105      	bne.n	8018bac <create_name+0x344>
 8018ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ba4:	f043 0310 	orr.w	r3, r3, #16
 8018ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8018bac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018bb0:	f003 030c 	and.w	r3, r3, #12
 8018bb4:	2b04      	cmp	r3, #4
 8018bb6:	d105      	bne.n	8018bc4 <create_name+0x35c>
 8018bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bbc:	f043 0308 	orr.w	r3, r3, #8
 8018bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018bca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8018bce:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	3728      	adds	r7, #40	; 0x28
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd80      	pop	{r7, pc}

08018bd8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b086      	sub	sp, #24
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
 8018be0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8018be6:	693b      	ldr	r3, [r7, #16]
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018bec:	e002      	b.n	8018bf4 <follow_path+0x1c>
 8018bee:	683b      	ldr	r3, [r7, #0]
 8018bf0:	3301      	adds	r3, #1
 8018bf2:	603b      	str	r3, [r7, #0]
 8018bf4:	683b      	ldr	r3, [r7, #0]
 8018bf6:	781b      	ldrb	r3, [r3, #0]
 8018bf8:	2b2f      	cmp	r3, #47	; 0x2f
 8018bfa:	d0f8      	beq.n	8018bee <follow_path+0x16>
 8018bfc:	683b      	ldr	r3, [r7, #0]
 8018bfe:	781b      	ldrb	r3, [r3, #0]
 8018c00:	2b5c      	cmp	r3, #92	; 0x5c
 8018c02:	d0f4      	beq.n	8018bee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018c04:	693b      	ldr	r3, [r7, #16]
 8018c06:	2200      	movs	r2, #0
 8018c08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018c0a:	683b      	ldr	r3, [r7, #0]
 8018c0c:	781b      	ldrb	r3, [r3, #0]
 8018c0e:	2b1f      	cmp	r3, #31
 8018c10:	d80a      	bhi.n	8018c28 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	2280      	movs	r2, #128	; 0x80
 8018c16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018c1a:	2100      	movs	r1, #0
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	f7ff f8fd 	bl	8017e1c <dir_sdi>
 8018c22:	4603      	mov	r3, r0
 8018c24:	75fb      	strb	r3, [r7, #23]
 8018c26:	e048      	b.n	8018cba <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018c28:	463b      	mov	r3, r7
 8018c2a:	4619      	mov	r1, r3
 8018c2c:	6878      	ldr	r0, [r7, #4]
 8018c2e:	f7ff fe1b 	bl	8018868 <create_name>
 8018c32:	4603      	mov	r3, r0
 8018c34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018c36:	7dfb      	ldrb	r3, [r7, #23]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d139      	bne.n	8018cb0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f7ff fc5a 	bl	80184f6 <dir_find>
 8018c42:	4603      	mov	r3, r0
 8018c44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018c4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8018c4e:	7dfb      	ldrb	r3, [r7, #23]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d00a      	beq.n	8018c6a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018c54:	7dfb      	ldrb	r3, [r7, #23]
 8018c56:	2b04      	cmp	r3, #4
 8018c58:	d12c      	bne.n	8018cb4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8018c5a:	7afb      	ldrb	r3, [r7, #11]
 8018c5c:	f003 0304 	and.w	r3, r3, #4
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d127      	bne.n	8018cb4 <follow_path+0xdc>
 8018c64:	2305      	movs	r3, #5
 8018c66:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8018c68:	e024      	b.n	8018cb4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018c6a:	7afb      	ldrb	r3, [r7, #11]
 8018c6c:	f003 0304 	and.w	r3, r3, #4
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d121      	bne.n	8018cb8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8018c74:	693b      	ldr	r3, [r7, #16]
 8018c76:	799b      	ldrb	r3, [r3, #6]
 8018c78:	f003 0310 	and.w	r3, r3, #16
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d102      	bne.n	8018c86 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8018c80:	2305      	movs	r3, #5
 8018c82:	75fb      	strb	r3, [r7, #23]
 8018c84:	e019      	b.n	8018cba <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	695b      	ldr	r3, [r3, #20]
 8018c90:	68fa      	ldr	r2, [r7, #12]
 8018c92:	8992      	ldrh	r2, [r2, #12]
 8018c94:	fbb3 f0f2 	udiv	r0, r3, r2
 8018c98:	fb00 f202 	mul.w	r2, r0, r2
 8018c9c:	1a9b      	subs	r3, r3, r2
 8018c9e:	440b      	add	r3, r1
 8018ca0:	4619      	mov	r1, r3
 8018ca2:	68f8      	ldr	r0, [r7, #12]
 8018ca4:	f7ff fa60 	bl	8018168 <ld_clust>
 8018ca8:	4602      	mov	r2, r0
 8018caa:	693b      	ldr	r3, [r7, #16]
 8018cac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018cae:	e7bb      	b.n	8018c28 <follow_path+0x50>
			if (res != FR_OK) break;
 8018cb0:	bf00      	nop
 8018cb2:	e002      	b.n	8018cba <follow_path+0xe2>
				break;
 8018cb4:	bf00      	nop
 8018cb6:	e000      	b.n	8018cba <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018cb8:	bf00      	nop
			}
		}
	}

	return res;
 8018cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	3718      	adds	r7, #24
 8018cc0:	46bd      	mov	sp, r7
 8018cc2:	bd80      	pop	{r7, pc}

08018cc4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8018cc4:	b480      	push	{r7}
 8018cc6:	b087      	sub	sp, #28
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8018cd0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d031      	beq.n	8018d3e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	617b      	str	r3, [r7, #20]
 8018ce0:	e002      	b.n	8018ce8 <get_ldnumber+0x24>
 8018ce2:	697b      	ldr	r3, [r7, #20]
 8018ce4:	3301      	adds	r3, #1
 8018ce6:	617b      	str	r3, [r7, #20]
 8018ce8:	697b      	ldr	r3, [r7, #20]
 8018cea:	781b      	ldrb	r3, [r3, #0]
 8018cec:	2b1f      	cmp	r3, #31
 8018cee:	d903      	bls.n	8018cf8 <get_ldnumber+0x34>
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	781b      	ldrb	r3, [r3, #0]
 8018cf4:	2b3a      	cmp	r3, #58	; 0x3a
 8018cf6:	d1f4      	bne.n	8018ce2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	781b      	ldrb	r3, [r3, #0]
 8018cfc:	2b3a      	cmp	r3, #58	; 0x3a
 8018cfe:	d11c      	bne.n	8018d3a <get_ldnumber+0x76>
			tp = *path;
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	1c5a      	adds	r2, r3, #1
 8018d0a:	60fa      	str	r2, [r7, #12]
 8018d0c:	781b      	ldrb	r3, [r3, #0]
 8018d0e:	3b30      	subs	r3, #48	; 0x30
 8018d10:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8018d12:	68bb      	ldr	r3, [r7, #8]
 8018d14:	2b09      	cmp	r3, #9
 8018d16:	d80e      	bhi.n	8018d36 <get_ldnumber+0x72>
 8018d18:	68fa      	ldr	r2, [r7, #12]
 8018d1a:	697b      	ldr	r3, [r7, #20]
 8018d1c:	429a      	cmp	r2, r3
 8018d1e:	d10a      	bne.n	8018d36 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d107      	bne.n	8018d36 <get_ldnumber+0x72>
					vol = (int)i;
 8018d26:	68bb      	ldr	r3, [r7, #8]
 8018d28:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8018d2a:	697b      	ldr	r3, [r7, #20]
 8018d2c:	3301      	adds	r3, #1
 8018d2e:	617b      	str	r3, [r7, #20]
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	697a      	ldr	r2, [r7, #20]
 8018d34:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8018d36:	693b      	ldr	r3, [r7, #16]
 8018d38:	e002      	b.n	8018d40 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8018d3e:	693b      	ldr	r3, [r7, #16]
}
 8018d40:	4618      	mov	r0, r3
 8018d42:	371c      	adds	r7, #28
 8018d44:	46bd      	mov	sp, r7
 8018d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4a:	4770      	bx	lr

08018d4c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b082      	sub	sp, #8
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	6078      	str	r0, [r7, #4]
 8018d54:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	2200      	movs	r2, #0
 8018d5a:	70da      	strb	r2, [r3, #3]
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8018d62:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8018d64:	6839      	ldr	r1, [r7, #0]
 8018d66:	6878      	ldr	r0, [r7, #4]
 8018d68:	f7fe fc78 	bl	801765c <move_window>
 8018d6c:	4603      	mov	r3, r0
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d001      	beq.n	8018d76 <check_fs+0x2a>
 8018d72:	2304      	movs	r3, #4
 8018d74:	e038      	b.n	8018de8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	3338      	adds	r3, #56	; 0x38
 8018d7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018d7e:	4618      	mov	r0, r3
 8018d80:	f7fe f9bc 	bl	80170fc <ld_word>
 8018d84:	4603      	mov	r3, r0
 8018d86:	461a      	mov	r2, r3
 8018d88:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018d8c:	429a      	cmp	r2, r3
 8018d8e:	d001      	beq.n	8018d94 <check_fs+0x48>
 8018d90:	2303      	movs	r3, #3
 8018d92:	e029      	b.n	8018de8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8018d9a:	2be9      	cmp	r3, #233	; 0xe9
 8018d9c:	d009      	beq.n	8018db2 <check_fs+0x66>
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8018da4:	2beb      	cmp	r3, #235	; 0xeb
 8018da6:	d11e      	bne.n	8018de6 <check_fs+0x9a>
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8018dae:	2b90      	cmp	r3, #144	; 0x90
 8018db0:	d119      	bne.n	8018de6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	3338      	adds	r3, #56	; 0x38
 8018db6:	3336      	adds	r3, #54	; 0x36
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7fe f9b7 	bl	801712c <ld_dword>
 8018dbe:	4603      	mov	r3, r0
 8018dc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018dc4:	4a0a      	ldr	r2, [pc, #40]	; (8018df0 <check_fs+0xa4>)
 8018dc6:	4293      	cmp	r3, r2
 8018dc8:	d101      	bne.n	8018dce <check_fs+0x82>
 8018dca:	2300      	movs	r3, #0
 8018dcc:	e00c      	b.n	8018de8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	3338      	adds	r3, #56	; 0x38
 8018dd2:	3352      	adds	r3, #82	; 0x52
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f7fe f9a9 	bl	801712c <ld_dword>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	4a05      	ldr	r2, [pc, #20]	; (8018df4 <check_fs+0xa8>)
 8018dde:	4293      	cmp	r3, r2
 8018de0:	d101      	bne.n	8018de6 <check_fs+0x9a>
 8018de2:	2300      	movs	r3, #0
 8018de4:	e000      	b.n	8018de8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8018de6:	2302      	movs	r3, #2
}
 8018de8:	4618      	mov	r0, r3
 8018dea:	3708      	adds	r7, #8
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}
 8018df0:	00544146 	.word	0x00544146
 8018df4:	33544146 	.word	0x33544146

08018df8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b096      	sub	sp, #88	; 0x58
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	60f8      	str	r0, [r7, #12]
 8018e00:	60b9      	str	r1, [r7, #8]
 8018e02:	4613      	mov	r3, r2
 8018e04:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8018e06:	68bb      	ldr	r3, [r7, #8]
 8018e08:	2200      	movs	r2, #0
 8018e0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018e0c:	68f8      	ldr	r0, [r7, #12]
 8018e0e:	f7ff ff59 	bl	8018cc4 <get_ldnumber>
 8018e12:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8018e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	da01      	bge.n	8018e1e <find_volume+0x26>
 8018e1a:	230b      	movs	r3, #11
 8018e1c:	e265      	b.n	80192ea <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8018e1e:	4a9f      	ldr	r2, [pc, #636]	; (801909c <find_volume+0x2a4>)
 8018e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018e26:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8018e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d101      	bne.n	8018e32 <find_volume+0x3a>
 8018e2e:	230c      	movs	r3, #12
 8018e30:	e25b      	b.n	80192ea <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8018e32:	68bb      	ldr	r3, [r7, #8]
 8018e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018e36:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8018e38:	79fb      	ldrb	r3, [r7, #7]
 8018e3a:	f023 0301 	bic.w	r3, r3, #1
 8018e3e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8018e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e42:	781b      	ldrb	r3, [r3, #0]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d01a      	beq.n	8018e7e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8018e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e4a:	785b      	ldrb	r3, [r3, #1]
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	f7fe f8b7 	bl	8016fc0 <disk_status>
 8018e52:	4603      	mov	r3, r0
 8018e54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8018e58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018e5c:	f003 0301 	and.w	r3, r3, #1
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d10c      	bne.n	8018e7e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8018e64:	79fb      	ldrb	r3, [r7, #7]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d007      	beq.n	8018e7a <find_volume+0x82>
 8018e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018e6e:	f003 0304 	and.w	r3, r3, #4
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d001      	beq.n	8018e7a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8018e76:	230a      	movs	r3, #10
 8018e78:	e237      	b.n	80192ea <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	e235      	b.n	80192ea <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8018e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e80:	2200      	movs	r2, #0
 8018e82:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8018e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e86:	b2da      	uxtb	r2, r3
 8018e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e8a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e8e:	785b      	ldrb	r3, [r3, #1]
 8018e90:	4618      	mov	r0, r3
 8018e92:	f7fe f8af 	bl	8016ff4 <disk_initialize>
 8018e96:	4603      	mov	r3, r0
 8018e98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018ea0:	f003 0301 	and.w	r3, r3, #1
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d001      	beq.n	8018eac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018ea8:	2303      	movs	r3, #3
 8018eaa:	e21e      	b.n	80192ea <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018eac:	79fb      	ldrb	r3, [r7, #7]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d007      	beq.n	8018ec2 <find_volume+0xca>
 8018eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018eb6:	f003 0304 	and.w	r3, r3, #4
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d001      	beq.n	8018ec2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8018ebe:	230a      	movs	r3, #10
 8018ec0:	e213      	b.n	80192ea <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8018ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ec4:	7858      	ldrb	r0, [r3, #1]
 8018ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ec8:	330c      	adds	r3, #12
 8018eca:	461a      	mov	r2, r3
 8018ecc:	2102      	movs	r1, #2
 8018ece:	f7fe f8f7 	bl	80170c0 <disk_ioctl>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d001      	beq.n	8018edc <find_volume+0xe4>
 8018ed8:	2301      	movs	r3, #1
 8018eda:	e206      	b.n	80192ea <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8018edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ede:	899b      	ldrh	r3, [r3, #12]
 8018ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018ee4:	d80d      	bhi.n	8018f02 <find_volume+0x10a>
 8018ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ee8:	899b      	ldrh	r3, [r3, #12]
 8018eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018eee:	d308      	bcc.n	8018f02 <find_volume+0x10a>
 8018ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ef2:	899b      	ldrh	r3, [r3, #12]
 8018ef4:	461a      	mov	r2, r3
 8018ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ef8:	899b      	ldrh	r3, [r3, #12]
 8018efa:	3b01      	subs	r3, #1
 8018efc:	4013      	ands	r3, r2
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d001      	beq.n	8018f06 <find_volume+0x10e>
 8018f02:	2301      	movs	r3, #1
 8018f04:	e1f1      	b.n	80192ea <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8018f06:	2300      	movs	r3, #0
 8018f08:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018f0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018f0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018f0e:	f7ff ff1d 	bl	8018d4c <check_fs>
 8018f12:	4603      	mov	r3, r0
 8018f14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8018f18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f1c:	2b02      	cmp	r3, #2
 8018f1e:	d149      	bne.n	8018fb4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018f20:	2300      	movs	r3, #0
 8018f22:	643b      	str	r3, [r7, #64]	; 0x40
 8018f24:	e01e      	b.n	8018f64 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8018f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f28:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8018f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f2e:	011b      	lsls	r3, r3, #4
 8018f30:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8018f34:	4413      	add	r3, r2
 8018f36:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8018f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f3a:	3304      	adds	r3, #4
 8018f3c:	781b      	ldrb	r3, [r3, #0]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d006      	beq.n	8018f50 <find_volume+0x158>
 8018f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f44:	3308      	adds	r3, #8
 8018f46:	4618      	mov	r0, r3
 8018f48:	f7fe f8f0 	bl	801712c <ld_dword>
 8018f4c:	4602      	mov	r2, r0
 8018f4e:	e000      	b.n	8018f52 <find_volume+0x15a>
 8018f50:	2200      	movs	r2, #0
 8018f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f54:	009b      	lsls	r3, r3, #2
 8018f56:	3358      	adds	r3, #88	; 0x58
 8018f58:	443b      	add	r3, r7
 8018f5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f60:	3301      	adds	r3, #1
 8018f62:	643b      	str	r3, [r7, #64]	; 0x40
 8018f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f66:	2b03      	cmp	r3, #3
 8018f68:	d9dd      	bls.n	8018f26 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8018f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d002      	beq.n	8018f7a <find_volume+0x182>
 8018f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f76:	3b01      	subs	r3, #1
 8018f78:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8018f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f7c:	009b      	lsls	r3, r3, #2
 8018f7e:	3358      	adds	r3, #88	; 0x58
 8018f80:	443b      	add	r3, r7
 8018f82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8018f86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d005      	beq.n	8018f9a <find_volume+0x1a2>
 8018f8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018f90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018f92:	f7ff fedb 	bl	8018d4c <check_fs>
 8018f96:	4603      	mov	r3, r0
 8018f98:	e000      	b.n	8018f9c <find_volume+0x1a4>
 8018f9a:	2303      	movs	r3, #3
 8018f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018fa4:	2b01      	cmp	r3, #1
 8018fa6:	d905      	bls.n	8018fb4 <find_volume+0x1bc>
 8018fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018faa:	3301      	adds	r3, #1
 8018fac:	643b      	str	r3, [r7, #64]	; 0x40
 8018fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018fb0:	2b03      	cmp	r3, #3
 8018fb2:	d9e2      	bls.n	8018f7a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018fb8:	2b04      	cmp	r3, #4
 8018fba:	d101      	bne.n	8018fc0 <find_volume+0x1c8>
 8018fbc:	2301      	movs	r3, #1
 8018fbe:	e194      	b.n	80192ea <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018fc4:	2b01      	cmp	r3, #1
 8018fc6:	d901      	bls.n	8018fcc <find_volume+0x1d4>
 8018fc8:	230d      	movs	r3, #13
 8018fca:	e18e      	b.n	80192ea <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fce:	3338      	adds	r3, #56	; 0x38
 8018fd0:	330b      	adds	r3, #11
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f7fe f892 	bl	80170fc <ld_word>
 8018fd8:	4603      	mov	r3, r0
 8018fda:	461a      	mov	r2, r3
 8018fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fde:	899b      	ldrh	r3, [r3, #12]
 8018fe0:	429a      	cmp	r2, r3
 8018fe2:	d001      	beq.n	8018fe8 <find_volume+0x1f0>
 8018fe4:	230d      	movs	r3, #13
 8018fe6:	e180      	b.n	80192ea <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fea:	3338      	adds	r3, #56	; 0x38
 8018fec:	3316      	adds	r3, #22
 8018fee:	4618      	mov	r0, r3
 8018ff0:	f7fe f884 	bl	80170fc <ld_word>
 8018ff4:	4603      	mov	r3, r0
 8018ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d106      	bne.n	801900c <find_volume+0x214>
 8018ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019000:	3338      	adds	r3, #56	; 0x38
 8019002:	3324      	adds	r3, #36	; 0x24
 8019004:	4618      	mov	r0, r3
 8019006:	f7fe f891 	bl	801712c <ld_dword>
 801900a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801900e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019010:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019014:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8019018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801901a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801901e:	789b      	ldrb	r3, [r3, #2]
 8019020:	2b01      	cmp	r3, #1
 8019022:	d005      	beq.n	8019030 <find_volume+0x238>
 8019024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019026:	789b      	ldrb	r3, [r3, #2]
 8019028:	2b02      	cmp	r3, #2
 801902a:	d001      	beq.n	8019030 <find_volume+0x238>
 801902c:	230d      	movs	r3, #13
 801902e:	e15c      	b.n	80192ea <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019032:	789b      	ldrb	r3, [r3, #2]
 8019034:	461a      	mov	r2, r3
 8019036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019038:	fb02 f303 	mul.w	r3, r2, r3
 801903c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019044:	b29a      	uxth	r2, r3
 8019046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019048:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801904c:	895b      	ldrh	r3, [r3, #10]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d008      	beq.n	8019064 <find_volume+0x26c>
 8019052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019054:	895b      	ldrh	r3, [r3, #10]
 8019056:	461a      	mov	r2, r3
 8019058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801905a:	895b      	ldrh	r3, [r3, #10]
 801905c:	3b01      	subs	r3, #1
 801905e:	4013      	ands	r3, r2
 8019060:	2b00      	cmp	r3, #0
 8019062:	d001      	beq.n	8019068 <find_volume+0x270>
 8019064:	230d      	movs	r3, #13
 8019066:	e140      	b.n	80192ea <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801906a:	3338      	adds	r3, #56	; 0x38
 801906c:	3311      	adds	r3, #17
 801906e:	4618      	mov	r0, r3
 8019070:	f7fe f844 	bl	80170fc <ld_word>
 8019074:	4603      	mov	r3, r0
 8019076:	461a      	mov	r2, r3
 8019078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801907a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801907e:	891b      	ldrh	r3, [r3, #8]
 8019080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019082:	8992      	ldrh	r2, [r2, #12]
 8019084:	0952      	lsrs	r2, r2, #5
 8019086:	b292      	uxth	r2, r2
 8019088:	fbb3 f1f2 	udiv	r1, r3, r2
 801908c:	fb01 f202 	mul.w	r2, r1, r2
 8019090:	1a9b      	subs	r3, r3, r2
 8019092:	b29b      	uxth	r3, r3
 8019094:	2b00      	cmp	r3, #0
 8019096:	d003      	beq.n	80190a0 <find_volume+0x2a8>
 8019098:	230d      	movs	r3, #13
 801909a:	e126      	b.n	80192ea <find_volume+0x4f2>
 801909c:	24001530 	.word	0x24001530

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80190a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190a2:	3338      	adds	r3, #56	; 0x38
 80190a4:	3313      	adds	r3, #19
 80190a6:	4618      	mov	r0, r3
 80190a8:	f7fe f828 	bl	80170fc <ld_word>
 80190ac:	4603      	mov	r3, r0
 80190ae:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80190b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d106      	bne.n	80190c4 <find_volume+0x2cc>
 80190b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190b8:	3338      	adds	r3, #56	; 0x38
 80190ba:	3320      	adds	r3, #32
 80190bc:	4618      	mov	r0, r3
 80190be:	f7fe f835 	bl	801712c <ld_dword>
 80190c2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80190c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190c6:	3338      	adds	r3, #56	; 0x38
 80190c8:	330e      	adds	r3, #14
 80190ca:	4618      	mov	r0, r3
 80190cc:	f7fe f816 	bl	80170fc <ld_word>
 80190d0:	4603      	mov	r3, r0
 80190d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80190d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d101      	bne.n	80190de <find_volume+0x2e6>
 80190da:	230d      	movs	r3, #13
 80190dc:	e105      	b.n	80192ea <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80190de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80190e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80190e2:	4413      	add	r3, r2
 80190e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80190e6:	8911      	ldrh	r1, [r2, #8]
 80190e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80190ea:	8992      	ldrh	r2, [r2, #12]
 80190ec:	0952      	lsrs	r2, r2, #5
 80190ee:	b292      	uxth	r2, r2
 80190f0:	fbb1 f2f2 	udiv	r2, r1, r2
 80190f4:	b292      	uxth	r2, r2
 80190f6:	4413      	add	r3, r2
 80190f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80190fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80190fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190fe:	429a      	cmp	r2, r3
 8019100:	d201      	bcs.n	8019106 <find_volume+0x30e>
 8019102:	230d      	movs	r3, #13
 8019104:	e0f1      	b.n	80192ea <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8019106:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801910a:	1ad3      	subs	r3, r2, r3
 801910c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801910e:	8952      	ldrh	r2, [r2, #10]
 8019110:	fbb3 f3f2 	udiv	r3, r3, r2
 8019114:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019118:	2b00      	cmp	r3, #0
 801911a:	d101      	bne.n	8019120 <find_volume+0x328>
 801911c:	230d      	movs	r3, #13
 801911e:	e0e4      	b.n	80192ea <find_volume+0x4f2>
		fmt = FS_FAT32;
 8019120:	2303      	movs	r3, #3
 8019122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019128:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801912c:	4293      	cmp	r3, r2
 801912e:	d802      	bhi.n	8019136 <find_volume+0x33e>
 8019130:	2302      	movs	r3, #2
 8019132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019138:	f640 72f5 	movw	r2, #4085	; 0xff5
 801913c:	4293      	cmp	r3, r2
 801913e:	d802      	bhi.n	8019146 <find_volume+0x34e>
 8019140:	2301      	movs	r3, #1
 8019142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019148:	1c9a      	adds	r2, r3, #2
 801914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801914c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019150:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019152:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019154:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019158:	441a      	add	r2, r3
 801915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801915c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801915e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019162:	441a      	add	r2, r3
 8019164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019166:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8019168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801916c:	2b03      	cmp	r3, #3
 801916e:	d11e      	bne.n	80191ae <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8019170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019172:	3338      	adds	r3, #56	; 0x38
 8019174:	332a      	adds	r3, #42	; 0x2a
 8019176:	4618      	mov	r0, r3
 8019178:	f7fd ffc0 	bl	80170fc <ld_word>
 801917c:	4603      	mov	r3, r0
 801917e:	2b00      	cmp	r3, #0
 8019180:	d001      	beq.n	8019186 <find_volume+0x38e>
 8019182:	230d      	movs	r3, #13
 8019184:	e0b1      	b.n	80192ea <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019188:	891b      	ldrh	r3, [r3, #8]
 801918a:	2b00      	cmp	r3, #0
 801918c:	d001      	beq.n	8019192 <find_volume+0x39a>
 801918e:	230d      	movs	r3, #13
 8019190:	e0ab      	b.n	80192ea <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019194:	3338      	adds	r3, #56	; 0x38
 8019196:	332c      	adds	r3, #44	; 0x2c
 8019198:	4618      	mov	r0, r3
 801919a:	f7fd ffc7 	bl	801712c <ld_dword>
 801919e:	4602      	mov	r2, r0
 80191a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191a2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80191a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191a6:	69db      	ldr	r3, [r3, #28]
 80191a8:	009b      	lsls	r3, r3, #2
 80191aa:	647b      	str	r3, [r7, #68]	; 0x44
 80191ac:	e01f      	b.n	80191ee <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80191ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191b0:	891b      	ldrh	r3, [r3, #8]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d101      	bne.n	80191ba <find_volume+0x3c2>
 80191b6:	230d      	movs	r3, #13
 80191b8:	e097      	b.n	80192ea <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80191ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80191be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80191c0:	441a      	add	r2, r3
 80191c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191c4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80191c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80191ca:	2b02      	cmp	r3, #2
 80191cc:	d103      	bne.n	80191d6 <find_volume+0x3de>
 80191ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d0:	69db      	ldr	r3, [r3, #28]
 80191d2:	005b      	lsls	r3, r3, #1
 80191d4:	e00a      	b.n	80191ec <find_volume+0x3f4>
 80191d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d8:	69da      	ldr	r2, [r3, #28]
 80191da:	4613      	mov	r3, r2
 80191dc:	005b      	lsls	r3, r3, #1
 80191de:	4413      	add	r3, r2
 80191e0:	085a      	lsrs	r2, r3, #1
 80191e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191e4:	69db      	ldr	r3, [r3, #28]
 80191e6:	f003 0301 	and.w	r3, r3, #1
 80191ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80191ec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80191ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f0:	6a1a      	ldr	r2, [r3, #32]
 80191f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f4:	899b      	ldrh	r3, [r3, #12]
 80191f6:	4619      	mov	r1, r3
 80191f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80191fa:	440b      	add	r3, r1
 80191fc:	3b01      	subs	r3, #1
 80191fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019200:	8989      	ldrh	r1, [r1, #12]
 8019202:	fbb3 f3f1 	udiv	r3, r3, r1
 8019206:	429a      	cmp	r2, r3
 8019208:	d201      	bcs.n	801920e <find_volume+0x416>
 801920a:	230d      	movs	r3, #13
 801920c:	e06d      	b.n	80192ea <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801920e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019210:	f04f 32ff 	mov.w	r2, #4294967295
 8019214:	619a      	str	r2, [r3, #24]
 8019216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019218:	699a      	ldr	r2, [r3, #24]
 801921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801921c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801921e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019220:	2280      	movs	r2, #128	; 0x80
 8019222:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019228:	2b03      	cmp	r3, #3
 801922a:	d149      	bne.n	80192c0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801922c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801922e:	3338      	adds	r3, #56	; 0x38
 8019230:	3330      	adds	r3, #48	; 0x30
 8019232:	4618      	mov	r0, r3
 8019234:	f7fd ff62 	bl	80170fc <ld_word>
 8019238:	4603      	mov	r3, r0
 801923a:	2b01      	cmp	r3, #1
 801923c:	d140      	bne.n	80192c0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801923e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019240:	3301      	adds	r3, #1
 8019242:	4619      	mov	r1, r3
 8019244:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019246:	f7fe fa09 	bl	801765c <move_window>
 801924a:	4603      	mov	r3, r0
 801924c:	2b00      	cmp	r3, #0
 801924e:	d137      	bne.n	80192c0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8019250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019252:	2200      	movs	r2, #0
 8019254:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019258:	3338      	adds	r3, #56	; 0x38
 801925a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801925e:	4618      	mov	r0, r3
 8019260:	f7fd ff4c 	bl	80170fc <ld_word>
 8019264:	4603      	mov	r3, r0
 8019266:	461a      	mov	r2, r3
 8019268:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801926c:	429a      	cmp	r2, r3
 801926e:	d127      	bne.n	80192c0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019272:	3338      	adds	r3, #56	; 0x38
 8019274:	4618      	mov	r0, r3
 8019276:	f7fd ff59 	bl	801712c <ld_dword>
 801927a:	4603      	mov	r3, r0
 801927c:	4a1d      	ldr	r2, [pc, #116]	; (80192f4 <find_volume+0x4fc>)
 801927e:	4293      	cmp	r3, r2
 8019280:	d11e      	bne.n	80192c0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019284:	3338      	adds	r3, #56	; 0x38
 8019286:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801928a:	4618      	mov	r0, r3
 801928c:	f7fd ff4e 	bl	801712c <ld_dword>
 8019290:	4603      	mov	r3, r0
 8019292:	4a19      	ldr	r2, [pc, #100]	; (80192f8 <find_volume+0x500>)
 8019294:	4293      	cmp	r3, r2
 8019296:	d113      	bne.n	80192c0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801929a:	3338      	adds	r3, #56	; 0x38
 801929c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80192a0:	4618      	mov	r0, r3
 80192a2:	f7fd ff43 	bl	801712c <ld_dword>
 80192a6:	4602      	mov	r2, r0
 80192a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192aa:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80192ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192ae:	3338      	adds	r3, #56	; 0x38
 80192b0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80192b4:	4618      	mov	r0, r3
 80192b6:	f7fd ff39 	bl	801712c <ld_dword>
 80192ba:	4602      	mov	r2, r0
 80192bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192be:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80192c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192c2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80192c6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80192c8:	4b0c      	ldr	r3, [pc, #48]	; (80192fc <find_volume+0x504>)
 80192ca:	881b      	ldrh	r3, [r3, #0]
 80192cc:	3301      	adds	r3, #1
 80192ce:	b29a      	uxth	r2, r3
 80192d0:	4b0a      	ldr	r3, [pc, #40]	; (80192fc <find_volume+0x504>)
 80192d2:	801a      	strh	r2, [r3, #0]
 80192d4:	4b09      	ldr	r3, [pc, #36]	; (80192fc <find_volume+0x504>)
 80192d6:	881a      	ldrh	r2, [r3, #0]
 80192d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192da:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80192dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192de:	4a08      	ldr	r2, [pc, #32]	; (8019300 <find_volume+0x508>)
 80192e0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80192e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80192e4:	f7fe f952 	bl	801758c <clear_lock>
#endif
	return FR_OK;
 80192e8:	2300      	movs	r3, #0
}
 80192ea:	4618      	mov	r0, r3
 80192ec:	3758      	adds	r7, #88	; 0x58
 80192ee:	46bd      	mov	sp, r7
 80192f0:	bd80      	pop	{r7, pc}
 80192f2:	bf00      	nop
 80192f4:	41615252 	.word	0x41615252
 80192f8:	61417272 	.word	0x61417272
 80192fc:	24001534 	.word	0x24001534
 8019300:	24001558 	.word	0x24001558

08019304 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b084      	sub	sp, #16
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
 801930c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801930e:	2309      	movs	r3, #9
 8019310:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d01c      	beq.n	8019352 <validate+0x4e>
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	2b00      	cmp	r3, #0
 801931e:	d018      	beq.n	8019352 <validate+0x4e>
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	781b      	ldrb	r3, [r3, #0]
 8019326:	2b00      	cmp	r3, #0
 8019328:	d013      	beq.n	8019352 <validate+0x4e>
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	889a      	ldrh	r2, [r3, #4]
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	88db      	ldrh	r3, [r3, #6]
 8019334:	429a      	cmp	r2, r3
 8019336:	d10c      	bne.n	8019352 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	785b      	ldrb	r3, [r3, #1]
 801933e:	4618      	mov	r0, r3
 8019340:	f7fd fe3e 	bl	8016fc0 <disk_status>
 8019344:	4603      	mov	r3, r0
 8019346:	f003 0301 	and.w	r3, r3, #1
 801934a:	2b00      	cmp	r3, #0
 801934c:	d101      	bne.n	8019352 <validate+0x4e>
			res = FR_OK;
 801934e:	2300      	movs	r3, #0
 8019350:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019352:	7bfb      	ldrb	r3, [r7, #15]
 8019354:	2b00      	cmp	r3, #0
 8019356:	d102      	bne.n	801935e <validate+0x5a>
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	e000      	b.n	8019360 <validate+0x5c>
 801935e:	2300      	movs	r3, #0
 8019360:	683a      	ldr	r2, [r7, #0]
 8019362:	6013      	str	r3, [r2, #0]
	return res;
 8019364:	7bfb      	ldrb	r3, [r7, #15]
}
 8019366:	4618      	mov	r0, r3
 8019368:	3710      	adds	r7, #16
 801936a:	46bd      	mov	sp, r7
 801936c:	bd80      	pop	{r7, pc}
	...

08019370 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019370:	b580      	push	{r7, lr}
 8019372:	b088      	sub	sp, #32
 8019374:	af00      	add	r7, sp, #0
 8019376:	60f8      	str	r0, [r7, #12]
 8019378:	60b9      	str	r1, [r7, #8]
 801937a:	4613      	mov	r3, r2
 801937c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801937e:	68bb      	ldr	r3, [r7, #8]
 8019380:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019382:	f107 0310 	add.w	r3, r7, #16
 8019386:	4618      	mov	r0, r3
 8019388:	f7ff fc9c 	bl	8018cc4 <get_ldnumber>
 801938c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801938e:	69fb      	ldr	r3, [r7, #28]
 8019390:	2b00      	cmp	r3, #0
 8019392:	da01      	bge.n	8019398 <f_mount+0x28>
 8019394:	230b      	movs	r3, #11
 8019396:	e02b      	b.n	80193f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019398:	4a17      	ldr	r2, [pc, #92]	; (80193f8 <f_mount+0x88>)
 801939a:	69fb      	ldr	r3, [r7, #28]
 801939c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80193a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80193a2:	69bb      	ldr	r3, [r7, #24]
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d005      	beq.n	80193b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80193a8:	69b8      	ldr	r0, [r7, #24]
 80193aa:	f7fe f8ef 	bl	801758c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80193ae:	69bb      	ldr	r3, [r7, #24]
 80193b0:	2200      	movs	r2, #0
 80193b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d002      	beq.n	80193c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	2200      	movs	r2, #0
 80193be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80193c0:	68fa      	ldr	r2, [r7, #12]
 80193c2:	490d      	ldr	r1, [pc, #52]	; (80193f8 <f_mount+0x88>)
 80193c4:	69fb      	ldr	r3, [r7, #28]
 80193c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d002      	beq.n	80193d6 <f_mount+0x66>
 80193d0:	79fb      	ldrb	r3, [r7, #7]
 80193d2:	2b01      	cmp	r3, #1
 80193d4:	d001      	beq.n	80193da <f_mount+0x6a>
 80193d6:	2300      	movs	r3, #0
 80193d8:	e00a      	b.n	80193f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80193da:	f107 010c 	add.w	r1, r7, #12
 80193de:	f107 0308 	add.w	r3, r7, #8
 80193e2:	2200      	movs	r2, #0
 80193e4:	4618      	mov	r0, r3
 80193e6:	f7ff fd07 	bl	8018df8 <find_volume>
 80193ea:	4603      	mov	r3, r0
 80193ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80193ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80193f0:	4618      	mov	r0, r3
 80193f2:	3720      	adds	r7, #32
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd80      	pop	{r7, pc}
 80193f8:	24001530 	.word	0x24001530

080193fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b09a      	sub	sp, #104	; 0x68
 8019400:	af00      	add	r7, sp, #0
 8019402:	60f8      	str	r0, [r7, #12]
 8019404:	60b9      	str	r1, [r7, #8]
 8019406:	4613      	mov	r3, r2
 8019408:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d101      	bne.n	8019414 <f_open+0x18>
 8019410:	2309      	movs	r3, #9
 8019412:	e1bb      	b.n	801978c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019414:	79fb      	ldrb	r3, [r7, #7]
 8019416:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801941a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801941c:	79fa      	ldrb	r2, [r7, #7]
 801941e:	f107 0114 	add.w	r1, r7, #20
 8019422:	f107 0308 	add.w	r3, r7, #8
 8019426:	4618      	mov	r0, r3
 8019428:	f7ff fce6 	bl	8018df8 <find_volume>
 801942c:	4603      	mov	r3, r0
 801942e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8019432:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019436:	2b00      	cmp	r3, #0
 8019438:	f040 819f 	bne.w	801977a <f_open+0x37e>
		dj.obj.fs = fs;
 801943c:	697b      	ldr	r3, [r7, #20]
 801943e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019440:	68ba      	ldr	r2, [r7, #8]
 8019442:	f107 0318 	add.w	r3, r7, #24
 8019446:	4611      	mov	r1, r2
 8019448:	4618      	mov	r0, r3
 801944a:	f7ff fbc5 	bl	8018bd8 <follow_path>
 801944e:	4603      	mov	r3, r0
 8019450:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019454:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019458:	2b00      	cmp	r3, #0
 801945a:	d11a      	bne.n	8019492 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801945c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019460:	b25b      	sxtb	r3, r3
 8019462:	2b00      	cmp	r3, #0
 8019464:	da03      	bge.n	801946e <f_open+0x72>
				res = FR_INVALID_NAME;
 8019466:	2306      	movs	r3, #6
 8019468:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801946c:	e011      	b.n	8019492 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801946e:	79fb      	ldrb	r3, [r7, #7]
 8019470:	f023 0301 	bic.w	r3, r3, #1
 8019474:	2b00      	cmp	r3, #0
 8019476:	bf14      	ite	ne
 8019478:	2301      	movne	r3, #1
 801947a:	2300      	moveq	r3, #0
 801947c:	b2db      	uxtb	r3, r3
 801947e:	461a      	mov	r2, r3
 8019480:	f107 0318 	add.w	r3, r7, #24
 8019484:	4611      	mov	r1, r2
 8019486:	4618      	mov	r0, r3
 8019488:	f7fd ff38 	bl	80172fc <chk_lock>
 801948c:	4603      	mov	r3, r0
 801948e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019492:	79fb      	ldrb	r3, [r7, #7]
 8019494:	f003 031c 	and.w	r3, r3, #28
 8019498:	2b00      	cmp	r3, #0
 801949a:	d07f      	beq.n	801959c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801949c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d017      	beq.n	80194d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80194a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80194a8:	2b04      	cmp	r3, #4
 80194aa:	d10e      	bne.n	80194ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80194ac:	f7fd ff82 	bl	80173b4 <enq_lock>
 80194b0:	4603      	mov	r3, r0
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d006      	beq.n	80194c4 <f_open+0xc8>
 80194b6:	f107 0318 	add.w	r3, r7, #24
 80194ba:	4618      	mov	r0, r3
 80194bc:	f7ff f8dc 	bl	8018678 <dir_register>
 80194c0:	4603      	mov	r3, r0
 80194c2:	e000      	b.n	80194c6 <f_open+0xca>
 80194c4:	2312      	movs	r3, #18
 80194c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80194ca:	79fb      	ldrb	r3, [r7, #7]
 80194cc:	f043 0308 	orr.w	r3, r3, #8
 80194d0:	71fb      	strb	r3, [r7, #7]
 80194d2:	e010      	b.n	80194f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80194d4:	7fbb      	ldrb	r3, [r7, #30]
 80194d6:	f003 0311 	and.w	r3, r3, #17
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d003      	beq.n	80194e6 <f_open+0xea>
					res = FR_DENIED;
 80194de:	2307      	movs	r3, #7
 80194e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80194e4:	e007      	b.n	80194f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80194e6:	79fb      	ldrb	r3, [r7, #7]
 80194e8:	f003 0304 	and.w	r3, r3, #4
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d002      	beq.n	80194f6 <f_open+0xfa>
 80194f0:	2308      	movs	r3, #8
 80194f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80194f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d168      	bne.n	80195d0 <f_open+0x1d4>
 80194fe:	79fb      	ldrb	r3, [r7, #7]
 8019500:	f003 0308 	and.w	r3, r3, #8
 8019504:	2b00      	cmp	r3, #0
 8019506:	d063      	beq.n	80195d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8019508:	f7fb fb70 	bl	8014bec <get_fattime>
 801950c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801950e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019510:	330e      	adds	r3, #14
 8019512:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019514:	4618      	mov	r0, r3
 8019516:	f7fd fe47 	bl	80171a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801951c:	3316      	adds	r3, #22
 801951e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019520:	4618      	mov	r0, r3
 8019522:	f7fd fe41 	bl	80171a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019528:	330b      	adds	r3, #11
 801952a:	2220      	movs	r2, #32
 801952c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801952e:	697b      	ldr	r3, [r7, #20]
 8019530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019532:	4611      	mov	r1, r2
 8019534:	4618      	mov	r0, r3
 8019536:	f7fe fe17 	bl	8018168 <ld_clust>
 801953a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801953c:	697b      	ldr	r3, [r7, #20]
 801953e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019540:	2200      	movs	r2, #0
 8019542:	4618      	mov	r0, r3
 8019544:	f7fe fe2f 	bl	80181a6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801954a:	331c      	adds	r3, #28
 801954c:	2100      	movs	r1, #0
 801954e:	4618      	mov	r0, r3
 8019550:	f7fd fe2a 	bl	80171a8 <st_dword>
					fs->wflag = 1;
 8019554:	697b      	ldr	r3, [r7, #20]
 8019556:	2201      	movs	r2, #1
 8019558:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801955a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801955c:	2b00      	cmp	r3, #0
 801955e:	d037      	beq.n	80195d0 <f_open+0x1d4>
						dw = fs->winsect;
 8019560:	697b      	ldr	r3, [r7, #20]
 8019562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019564:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019566:	f107 0318 	add.w	r3, r7, #24
 801956a:	2200      	movs	r2, #0
 801956c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801956e:	4618      	mov	r0, r3
 8019570:	f7fe fb1f 	bl	8017bb2 <remove_chain>
 8019574:	4603      	mov	r3, r0
 8019576:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801957a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801957e:	2b00      	cmp	r3, #0
 8019580:	d126      	bne.n	80195d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019582:	697b      	ldr	r3, [r7, #20]
 8019584:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019586:	4618      	mov	r0, r3
 8019588:	f7fe f868 	bl	801765c <move_window>
 801958c:	4603      	mov	r3, r0
 801958e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019592:	697b      	ldr	r3, [r7, #20]
 8019594:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019596:	3a01      	subs	r2, #1
 8019598:	615a      	str	r2, [r3, #20]
 801959a:	e019      	b.n	80195d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801959c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d115      	bne.n	80195d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80195a4:	7fbb      	ldrb	r3, [r7, #30]
 80195a6:	f003 0310 	and.w	r3, r3, #16
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d003      	beq.n	80195b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80195ae:	2304      	movs	r3, #4
 80195b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80195b4:	e00c      	b.n	80195d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80195b6:	79fb      	ldrb	r3, [r7, #7]
 80195b8:	f003 0302 	and.w	r3, r3, #2
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d007      	beq.n	80195d0 <f_open+0x1d4>
 80195c0:	7fbb      	ldrb	r3, [r7, #30]
 80195c2:	f003 0301 	and.w	r3, r3, #1
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d002      	beq.n	80195d0 <f_open+0x1d4>
						res = FR_DENIED;
 80195ca:	2307      	movs	r3, #7
 80195cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80195d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d128      	bne.n	801962a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80195d8:	79fb      	ldrb	r3, [r7, #7]
 80195da:	f003 0308 	and.w	r3, r3, #8
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d003      	beq.n	80195ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80195e2:	79fb      	ldrb	r3, [r7, #7]
 80195e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80195ea:	697b      	ldr	r3, [r7, #20]
 80195ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80195f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80195f8:	79fb      	ldrb	r3, [r7, #7]
 80195fa:	f023 0301 	bic.w	r3, r3, #1
 80195fe:	2b00      	cmp	r3, #0
 8019600:	bf14      	ite	ne
 8019602:	2301      	movne	r3, #1
 8019604:	2300      	moveq	r3, #0
 8019606:	b2db      	uxtb	r3, r3
 8019608:	461a      	mov	r2, r3
 801960a:	f107 0318 	add.w	r3, r7, #24
 801960e:	4611      	mov	r1, r2
 8019610:	4618      	mov	r0, r3
 8019612:	f7fd fef1 	bl	80173f8 <inc_lock>
 8019616:	4602      	mov	r2, r0
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	691b      	ldr	r3, [r3, #16]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d102      	bne.n	801962a <f_open+0x22e>
 8019624:	2302      	movs	r3, #2
 8019626:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801962a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801962e:	2b00      	cmp	r3, #0
 8019630:	f040 80a3 	bne.w	801977a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019634:	697b      	ldr	r3, [r7, #20]
 8019636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019638:	4611      	mov	r1, r2
 801963a:	4618      	mov	r0, r3
 801963c:	f7fe fd94 	bl	8018168 <ld_clust>
 8019640:	4602      	mov	r2, r0
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019648:	331c      	adds	r3, #28
 801964a:	4618      	mov	r0, r3
 801964c:	f7fd fd6e 	bl	801712c <ld_dword>
 8019650:	4602      	mov	r2, r0
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	2200      	movs	r2, #0
 801965a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801965c:	697a      	ldr	r2, [r7, #20]
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019662:	697b      	ldr	r3, [r7, #20]
 8019664:	88da      	ldrh	r2, [r3, #6]
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	79fa      	ldrb	r2, [r7, #7]
 801966e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	2200      	movs	r2, #0
 8019674:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	2200      	movs	r2, #0
 801967a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	2200      	movs	r2, #0
 8019680:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	3330      	adds	r3, #48	; 0x30
 8019686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801968a:	2100      	movs	r1, #0
 801968c:	4618      	mov	r0, r3
 801968e:	f7fd fdd8 	bl	8017242 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019692:	79fb      	ldrb	r3, [r7, #7]
 8019694:	f003 0320 	and.w	r3, r3, #32
 8019698:	2b00      	cmp	r3, #0
 801969a:	d06e      	beq.n	801977a <f_open+0x37e>
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	68db      	ldr	r3, [r3, #12]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d06a      	beq.n	801977a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	68da      	ldr	r2, [r3, #12]
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80196ac:	697b      	ldr	r3, [r7, #20]
 80196ae:	895b      	ldrh	r3, [r3, #10]
 80196b0:	461a      	mov	r2, r3
 80196b2:	697b      	ldr	r3, [r7, #20]
 80196b4:	899b      	ldrh	r3, [r3, #12]
 80196b6:	fb02 f303 	mul.w	r3, r2, r3
 80196ba:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	689b      	ldr	r3, [r3, #8]
 80196c0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	68db      	ldr	r3, [r3, #12]
 80196c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80196c8:	e016      	b.n	80196f8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80196ce:	4618      	mov	r0, r3
 80196d0:	f7fe f881 	bl	80177d6 <get_fat>
 80196d4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80196d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80196d8:	2b01      	cmp	r3, #1
 80196da:	d802      	bhi.n	80196e2 <f_open+0x2e6>
 80196dc:	2302      	movs	r3, #2
 80196de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80196e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80196e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196e8:	d102      	bne.n	80196f0 <f_open+0x2f4>
 80196ea:	2301      	movs	r3, #1
 80196ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80196f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80196f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196f4:	1ad3      	subs	r3, r2, r3
 80196f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80196f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d103      	bne.n	8019708 <f_open+0x30c>
 8019700:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019704:	429a      	cmp	r2, r3
 8019706:	d8e0      	bhi.n	80196ca <f_open+0x2ce>
				}
				fp->clust = clst;
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801970c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801970e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019712:	2b00      	cmp	r3, #0
 8019714:	d131      	bne.n	801977a <f_open+0x37e>
 8019716:	697b      	ldr	r3, [r7, #20]
 8019718:	899b      	ldrh	r3, [r3, #12]
 801971a:	461a      	mov	r2, r3
 801971c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801971e:	fbb3 f1f2 	udiv	r1, r3, r2
 8019722:	fb01 f202 	mul.w	r2, r1, r2
 8019726:	1a9b      	subs	r3, r3, r2
 8019728:	2b00      	cmp	r3, #0
 801972a:	d026      	beq.n	801977a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801972c:	697b      	ldr	r3, [r7, #20]
 801972e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019730:	4618      	mov	r0, r3
 8019732:	f7fe f831 	bl	8017798 <clust2sect>
 8019736:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801973a:	2b00      	cmp	r3, #0
 801973c:	d103      	bne.n	8019746 <f_open+0x34a>
						res = FR_INT_ERR;
 801973e:	2302      	movs	r3, #2
 8019740:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019744:	e019      	b.n	801977a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019746:	697b      	ldr	r3, [r7, #20]
 8019748:	899b      	ldrh	r3, [r3, #12]
 801974a:	461a      	mov	r2, r3
 801974c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801974e:	fbb3 f2f2 	udiv	r2, r3, r2
 8019752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019754:	441a      	add	r2, r3
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801975a:	697b      	ldr	r3, [r7, #20]
 801975c:	7858      	ldrb	r0, [r3, #1]
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	6a1a      	ldr	r2, [r3, #32]
 8019768:	2301      	movs	r3, #1
 801976a:	f7fd fc69 	bl	8017040 <disk_read>
 801976e:	4603      	mov	r3, r0
 8019770:	2b00      	cmp	r3, #0
 8019772:	d002      	beq.n	801977a <f_open+0x37e>
 8019774:	2301      	movs	r3, #1
 8019776:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801977a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801977e:	2b00      	cmp	r3, #0
 8019780:	d002      	beq.n	8019788 <f_open+0x38c>
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	2200      	movs	r2, #0
 8019786:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019788:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801978c:	4618      	mov	r0, r3
 801978e:	3768      	adds	r7, #104	; 0x68
 8019790:	46bd      	mov	sp, r7
 8019792:	bd80      	pop	{r7, pc}

08019794 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019794:	b580      	push	{r7, lr}
 8019796:	b08c      	sub	sp, #48	; 0x30
 8019798:	af00      	add	r7, sp, #0
 801979a:	60f8      	str	r0, [r7, #12]
 801979c:	60b9      	str	r1, [r7, #8]
 801979e:	607a      	str	r2, [r7, #4]
 80197a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80197a2:	68bb      	ldr	r3, [r7, #8]
 80197a4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80197a6:	683b      	ldr	r3, [r7, #0]
 80197a8:	2200      	movs	r2, #0
 80197aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	f107 0210 	add.w	r2, r7, #16
 80197b2:	4611      	mov	r1, r2
 80197b4:	4618      	mov	r0, r3
 80197b6:	f7ff fda5 	bl	8019304 <validate>
 80197ba:	4603      	mov	r3, r0
 80197bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80197c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d107      	bne.n	80197d8 <f_write+0x44>
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	7d5b      	ldrb	r3, [r3, #21]
 80197cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80197d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d002      	beq.n	80197de <f_write+0x4a>
 80197d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80197dc:	e16a      	b.n	8019ab4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	7d1b      	ldrb	r3, [r3, #20]
 80197e2:	f003 0302 	and.w	r3, r3, #2
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d101      	bne.n	80197ee <f_write+0x5a>
 80197ea:	2307      	movs	r3, #7
 80197ec:	e162      	b.n	8019ab4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	699a      	ldr	r2, [r3, #24]
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	441a      	add	r2, r3
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	699b      	ldr	r3, [r3, #24]
 80197fa:	429a      	cmp	r2, r3
 80197fc:	f080 814c 	bcs.w	8019a98 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	699b      	ldr	r3, [r3, #24]
 8019804:	43db      	mvns	r3, r3
 8019806:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019808:	e146      	b.n	8019a98 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	699b      	ldr	r3, [r3, #24]
 801980e:	693a      	ldr	r2, [r7, #16]
 8019810:	8992      	ldrh	r2, [r2, #12]
 8019812:	fbb3 f1f2 	udiv	r1, r3, r2
 8019816:	fb01 f202 	mul.w	r2, r1, r2
 801981a:	1a9b      	subs	r3, r3, r2
 801981c:	2b00      	cmp	r3, #0
 801981e:	f040 80f1 	bne.w	8019a04 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	699b      	ldr	r3, [r3, #24]
 8019826:	693a      	ldr	r2, [r7, #16]
 8019828:	8992      	ldrh	r2, [r2, #12]
 801982a:	fbb3 f3f2 	udiv	r3, r3, r2
 801982e:	693a      	ldr	r2, [r7, #16]
 8019830:	8952      	ldrh	r2, [r2, #10]
 8019832:	3a01      	subs	r2, #1
 8019834:	4013      	ands	r3, r2
 8019836:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019838:	69bb      	ldr	r3, [r7, #24]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d143      	bne.n	80198c6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	699b      	ldr	r3, [r3, #24]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d10c      	bne.n	8019860 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	689b      	ldr	r3, [r3, #8]
 801984a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801984e:	2b00      	cmp	r3, #0
 8019850:	d11a      	bne.n	8019888 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	2100      	movs	r1, #0
 8019856:	4618      	mov	r0, r3
 8019858:	f7fe fa10 	bl	8017c7c <create_chain>
 801985c:	62b8      	str	r0, [r7, #40]	; 0x28
 801985e:	e013      	b.n	8019888 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019864:	2b00      	cmp	r3, #0
 8019866:	d007      	beq.n	8019878 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	699b      	ldr	r3, [r3, #24]
 801986c:	4619      	mov	r1, r3
 801986e:	68f8      	ldr	r0, [r7, #12]
 8019870:	f7fe fa9c 	bl	8017dac <clmt_clust>
 8019874:	62b8      	str	r0, [r7, #40]	; 0x28
 8019876:	e007      	b.n	8019888 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019878:	68fa      	ldr	r2, [r7, #12]
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	69db      	ldr	r3, [r3, #28]
 801987e:	4619      	mov	r1, r3
 8019880:	4610      	mov	r0, r2
 8019882:	f7fe f9fb 	bl	8017c7c <create_chain>
 8019886:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801988a:	2b00      	cmp	r3, #0
 801988c:	f000 8109 	beq.w	8019aa2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019892:	2b01      	cmp	r3, #1
 8019894:	d104      	bne.n	80198a0 <f_write+0x10c>
 8019896:	68fb      	ldr	r3, [r7, #12]
 8019898:	2202      	movs	r2, #2
 801989a:	755a      	strb	r2, [r3, #21]
 801989c:	2302      	movs	r3, #2
 801989e:	e109      	b.n	8019ab4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80198a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198a6:	d104      	bne.n	80198b2 <f_write+0x11e>
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	2201      	movs	r2, #1
 80198ac:	755a      	strb	r2, [r3, #21]
 80198ae:	2301      	movs	r3, #1
 80198b0:	e100      	b.n	8019ab4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80198b2:	68fb      	ldr	r3, [r7, #12]
 80198b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198b6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	689b      	ldr	r3, [r3, #8]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d102      	bne.n	80198c6 <f_write+0x132>
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198c4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	7d1b      	ldrb	r3, [r3, #20]
 80198ca:	b25b      	sxtb	r3, r3
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	da18      	bge.n	8019902 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80198d0:	693b      	ldr	r3, [r7, #16]
 80198d2:	7858      	ldrb	r0, [r3, #1]
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	6a1a      	ldr	r2, [r3, #32]
 80198de:	2301      	movs	r3, #1
 80198e0:	f7fd fbce 	bl	8017080 <disk_write>
 80198e4:	4603      	mov	r3, r0
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d004      	beq.n	80198f4 <f_write+0x160>
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	2201      	movs	r2, #1
 80198ee:	755a      	strb	r2, [r3, #21]
 80198f0:	2301      	movs	r3, #1
 80198f2:	e0df      	b.n	8019ab4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	7d1b      	ldrb	r3, [r3, #20]
 80198f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80198fc:	b2da      	uxtb	r2, r3
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019902:	693a      	ldr	r2, [r7, #16]
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	69db      	ldr	r3, [r3, #28]
 8019908:	4619      	mov	r1, r3
 801990a:	4610      	mov	r0, r2
 801990c:	f7fd ff44 	bl	8017798 <clust2sect>
 8019910:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019912:	697b      	ldr	r3, [r7, #20]
 8019914:	2b00      	cmp	r3, #0
 8019916:	d104      	bne.n	8019922 <f_write+0x18e>
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	2202      	movs	r2, #2
 801991c:	755a      	strb	r2, [r3, #21]
 801991e:	2302      	movs	r3, #2
 8019920:	e0c8      	b.n	8019ab4 <f_write+0x320>
			sect += csect;
 8019922:	697a      	ldr	r2, [r7, #20]
 8019924:	69bb      	ldr	r3, [r7, #24]
 8019926:	4413      	add	r3, r2
 8019928:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801992a:	693b      	ldr	r3, [r7, #16]
 801992c:	899b      	ldrh	r3, [r3, #12]
 801992e:	461a      	mov	r2, r3
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	fbb3 f3f2 	udiv	r3, r3, r2
 8019936:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019938:	6a3b      	ldr	r3, [r7, #32]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d043      	beq.n	80199c6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801993e:	69ba      	ldr	r2, [r7, #24]
 8019940:	6a3b      	ldr	r3, [r7, #32]
 8019942:	4413      	add	r3, r2
 8019944:	693a      	ldr	r2, [r7, #16]
 8019946:	8952      	ldrh	r2, [r2, #10]
 8019948:	4293      	cmp	r3, r2
 801994a:	d905      	bls.n	8019958 <f_write+0x1c4>
					cc = fs->csize - csect;
 801994c:	693b      	ldr	r3, [r7, #16]
 801994e:	895b      	ldrh	r3, [r3, #10]
 8019950:	461a      	mov	r2, r3
 8019952:	69bb      	ldr	r3, [r7, #24]
 8019954:	1ad3      	subs	r3, r2, r3
 8019956:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019958:	693b      	ldr	r3, [r7, #16]
 801995a:	7858      	ldrb	r0, [r3, #1]
 801995c:	6a3b      	ldr	r3, [r7, #32]
 801995e:	697a      	ldr	r2, [r7, #20]
 8019960:	69f9      	ldr	r1, [r7, #28]
 8019962:	f7fd fb8d 	bl	8017080 <disk_write>
 8019966:	4603      	mov	r3, r0
 8019968:	2b00      	cmp	r3, #0
 801996a:	d004      	beq.n	8019976 <f_write+0x1e2>
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	2201      	movs	r2, #1
 8019970:	755a      	strb	r2, [r3, #21]
 8019972:	2301      	movs	r3, #1
 8019974:	e09e      	b.n	8019ab4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	6a1a      	ldr	r2, [r3, #32]
 801997a:	697b      	ldr	r3, [r7, #20]
 801997c:	1ad3      	subs	r3, r2, r3
 801997e:	6a3a      	ldr	r2, [r7, #32]
 8019980:	429a      	cmp	r2, r3
 8019982:	d918      	bls.n	80199b6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	6a1a      	ldr	r2, [r3, #32]
 801998e:	697b      	ldr	r3, [r7, #20]
 8019990:	1ad3      	subs	r3, r2, r3
 8019992:	693a      	ldr	r2, [r7, #16]
 8019994:	8992      	ldrh	r2, [r2, #12]
 8019996:	fb02 f303 	mul.w	r3, r2, r3
 801999a:	69fa      	ldr	r2, [r7, #28]
 801999c:	18d1      	adds	r1, r2, r3
 801999e:	693b      	ldr	r3, [r7, #16]
 80199a0:	899b      	ldrh	r3, [r3, #12]
 80199a2:	461a      	mov	r2, r3
 80199a4:	f7fd fc2c 	bl	8017200 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	7d1b      	ldrb	r3, [r3, #20]
 80199ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80199b0:	b2da      	uxtb	r2, r3
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80199b6:	693b      	ldr	r3, [r7, #16]
 80199b8:	899b      	ldrh	r3, [r3, #12]
 80199ba:	461a      	mov	r2, r3
 80199bc:	6a3b      	ldr	r3, [r7, #32]
 80199be:	fb02 f303 	mul.w	r3, r2, r3
 80199c2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80199c4:	e04b      	b.n	8019a5e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	6a1b      	ldr	r3, [r3, #32]
 80199ca:	697a      	ldr	r2, [r7, #20]
 80199cc:	429a      	cmp	r2, r3
 80199ce:	d016      	beq.n	80199fe <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	699a      	ldr	r2, [r3, #24]
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80199d8:	429a      	cmp	r2, r3
 80199da:	d210      	bcs.n	80199fe <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80199dc:	693b      	ldr	r3, [r7, #16]
 80199de:	7858      	ldrb	r0, [r3, #1]
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80199e6:	2301      	movs	r3, #1
 80199e8:	697a      	ldr	r2, [r7, #20]
 80199ea:	f7fd fb29 	bl	8017040 <disk_read>
 80199ee:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d004      	beq.n	80199fe <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	2201      	movs	r2, #1
 80199f8:	755a      	strb	r2, [r3, #21]
 80199fa:	2301      	movs	r3, #1
 80199fc:	e05a      	b.n	8019ab4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	697a      	ldr	r2, [r7, #20]
 8019a02:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019a04:	693b      	ldr	r3, [r7, #16]
 8019a06:	899b      	ldrh	r3, [r3, #12]
 8019a08:	4618      	mov	r0, r3
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	699b      	ldr	r3, [r3, #24]
 8019a0e:	693a      	ldr	r2, [r7, #16]
 8019a10:	8992      	ldrh	r2, [r2, #12]
 8019a12:	fbb3 f1f2 	udiv	r1, r3, r2
 8019a16:	fb01 f202 	mul.w	r2, r1, r2
 8019a1a:	1a9b      	subs	r3, r3, r2
 8019a1c:	1ac3      	subs	r3, r0, r3
 8019a1e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	429a      	cmp	r2, r3
 8019a26:	d901      	bls.n	8019a2c <f_write+0x298>
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	699b      	ldr	r3, [r3, #24]
 8019a36:	693a      	ldr	r2, [r7, #16]
 8019a38:	8992      	ldrh	r2, [r2, #12]
 8019a3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8019a3e:	fb00 f202 	mul.w	r2, r0, r2
 8019a42:	1a9b      	subs	r3, r3, r2
 8019a44:	440b      	add	r3, r1
 8019a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a48:	69f9      	ldr	r1, [r7, #28]
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	f7fd fbd8 	bl	8017200 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	7d1b      	ldrb	r3, [r3, #20]
 8019a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019a58:	b2da      	uxtb	r2, r3
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019a5e:	69fa      	ldr	r2, [r7, #28]
 8019a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a62:	4413      	add	r3, r2
 8019a64:	61fb      	str	r3, [r7, #28]
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	699a      	ldr	r2, [r3, #24]
 8019a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a6c:	441a      	add	r2, r3
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	619a      	str	r2, [r3, #24]
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	68da      	ldr	r2, [r3, #12]
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	699b      	ldr	r3, [r3, #24]
 8019a7a:	429a      	cmp	r2, r3
 8019a7c:	bf38      	it	cc
 8019a7e:	461a      	movcc	r2, r3
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	60da      	str	r2, [r3, #12]
 8019a84:	683b      	ldr	r3, [r7, #0]
 8019a86:	681a      	ldr	r2, [r3, #0]
 8019a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a8a:	441a      	add	r2, r3
 8019a8c:	683b      	ldr	r3, [r7, #0]
 8019a8e:	601a      	str	r2, [r3, #0]
 8019a90:	687a      	ldr	r2, [r7, #4]
 8019a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a94:	1ad3      	subs	r3, r2, r3
 8019a96:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	f47f aeb5 	bne.w	801980a <f_write+0x76>
 8019aa0:	e000      	b.n	8019aa4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019aa2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	7d1b      	ldrb	r3, [r3, #20]
 8019aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019aac:	b2da      	uxtb	r2, r3
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019ab2:	2300      	movs	r3, #0
}
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	3730      	adds	r7, #48	; 0x30
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	bd80      	pop	{r7, pc}

08019abc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b086      	sub	sp, #24
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	f107 0208 	add.w	r2, r7, #8
 8019aca:	4611      	mov	r1, r2
 8019acc:	4618      	mov	r0, r3
 8019ace:	f7ff fc19 	bl	8019304 <validate>
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019ad6:	7dfb      	ldrb	r3, [r7, #23]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d168      	bne.n	8019bae <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	7d1b      	ldrb	r3, [r3, #20]
 8019ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d062      	beq.n	8019bae <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	7d1b      	ldrb	r3, [r3, #20]
 8019aec:	b25b      	sxtb	r3, r3
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	da15      	bge.n	8019b1e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019af2:	68bb      	ldr	r3, [r7, #8]
 8019af4:	7858      	ldrb	r0, [r3, #1]
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	6a1a      	ldr	r2, [r3, #32]
 8019b00:	2301      	movs	r3, #1
 8019b02:	f7fd fabd 	bl	8017080 <disk_write>
 8019b06:	4603      	mov	r3, r0
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d001      	beq.n	8019b10 <f_sync+0x54>
 8019b0c:	2301      	movs	r3, #1
 8019b0e:	e04f      	b.n	8019bb0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	7d1b      	ldrb	r3, [r3, #20]
 8019b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019b18:	b2da      	uxtb	r2, r3
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019b1e:	f7fb f865 	bl	8014bec <get_fattime>
 8019b22:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019b24:	68ba      	ldr	r2, [r7, #8]
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b2a:	4619      	mov	r1, r3
 8019b2c:	4610      	mov	r0, r2
 8019b2e:	f7fd fd95 	bl	801765c <move_window>
 8019b32:	4603      	mov	r3, r0
 8019b34:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019b36:	7dfb      	ldrb	r3, [r7, #23]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d138      	bne.n	8019bae <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b40:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	330b      	adds	r3, #11
 8019b46:	781a      	ldrb	r2, [r3, #0]
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	330b      	adds	r3, #11
 8019b4c:	f042 0220 	orr.w	r2, r2, #32
 8019b50:	b2d2      	uxtb	r2, r2
 8019b52:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	6818      	ldr	r0, [r3, #0]
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	689b      	ldr	r3, [r3, #8]
 8019b5c:	461a      	mov	r2, r3
 8019b5e:	68f9      	ldr	r1, [r7, #12]
 8019b60:	f7fe fb21 	bl	80181a6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	f103 021c 	add.w	r2, r3, #28
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	68db      	ldr	r3, [r3, #12]
 8019b6e:	4619      	mov	r1, r3
 8019b70:	4610      	mov	r0, r2
 8019b72:	f7fd fb19 	bl	80171a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	3316      	adds	r3, #22
 8019b7a:	6939      	ldr	r1, [r7, #16]
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	f7fd fb13 	bl	80171a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	3312      	adds	r3, #18
 8019b86:	2100      	movs	r1, #0
 8019b88:	4618      	mov	r0, r3
 8019b8a:	f7fd faf2 	bl	8017172 <st_word>
					fs->wflag = 1;
 8019b8e:	68bb      	ldr	r3, [r7, #8]
 8019b90:	2201      	movs	r2, #1
 8019b92:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019b94:	68bb      	ldr	r3, [r7, #8]
 8019b96:	4618      	mov	r0, r3
 8019b98:	f7fd fd8e 	bl	80176b8 <sync_fs>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	7d1b      	ldrb	r3, [r3, #20]
 8019ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019ba8:	b2da      	uxtb	r2, r3
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	3718      	adds	r7, #24
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}

08019bb8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b084      	sub	sp, #16
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019bc0:	6878      	ldr	r0, [r7, #4]
 8019bc2:	f7ff ff7b 	bl	8019abc <f_sync>
 8019bc6:	4603      	mov	r3, r0
 8019bc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019bca:	7bfb      	ldrb	r3, [r7, #15]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d118      	bne.n	8019c02 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	f107 0208 	add.w	r2, r7, #8
 8019bd6:	4611      	mov	r1, r2
 8019bd8:	4618      	mov	r0, r3
 8019bda:	f7ff fb93 	bl	8019304 <validate>
 8019bde:	4603      	mov	r3, r0
 8019be0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019be2:	7bfb      	ldrb	r3, [r7, #15]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d10c      	bne.n	8019c02 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	691b      	ldr	r3, [r3, #16]
 8019bec:	4618      	mov	r0, r3
 8019bee:	f7fd fc91 	bl	8017514 <dec_lock>
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019bf6:	7bfb      	ldrb	r3, [r7, #15]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d102      	bne.n	8019c02 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	2200      	movs	r2, #0
 8019c00:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c04:	4618      	mov	r0, r3
 8019c06:	3710      	adds	r7, #16
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	bd80      	pop	{r7, pc}

08019c0c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b084      	sub	sp, #16
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
 8019c14:	460b      	mov	r3, r1
 8019c16:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8019c18:	78fb      	ldrb	r3, [r7, #3]
 8019c1a:	2b0a      	cmp	r3, #10
 8019c1c:	d103      	bne.n	8019c26 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8019c1e:	210d      	movs	r1, #13
 8019c20:	6878      	ldr	r0, [r7, #4]
 8019c22:	f7ff fff3 	bl	8019c0c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	685b      	ldr	r3, [r3, #4]
 8019c2a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	db25      	blt.n	8019c7e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	1c5a      	adds	r2, r3, #1
 8019c36:	60fa      	str	r2, [r7, #12]
 8019c38:	687a      	ldr	r2, [r7, #4]
 8019c3a:	4413      	add	r3, r2
 8019c3c:	78fa      	ldrb	r2, [r7, #3]
 8019c3e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	2b3c      	cmp	r3, #60	; 0x3c
 8019c44:	dd12      	ble.n	8019c6c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	6818      	ldr	r0, [r3, #0]
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	f103 010c 	add.w	r1, r3, #12
 8019c50:	68fa      	ldr	r2, [r7, #12]
 8019c52:	f107 0308 	add.w	r3, r7, #8
 8019c56:	f7ff fd9d 	bl	8019794 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8019c5a:	68ba      	ldr	r2, [r7, #8]
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	429a      	cmp	r2, r3
 8019c60:	d101      	bne.n	8019c66 <putc_bfd+0x5a>
 8019c62:	2300      	movs	r3, #0
 8019c64:	e001      	b.n	8019c6a <putc_bfd+0x5e>
 8019c66:	f04f 33ff 	mov.w	r3, #4294967295
 8019c6a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	68fa      	ldr	r2, [r7, #12]
 8019c70:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	689b      	ldr	r3, [r3, #8]
 8019c76:	1c5a      	adds	r2, r3, #1
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	609a      	str	r2, [r3, #8]
 8019c7c:	e000      	b.n	8019c80 <putc_bfd+0x74>
	if (i < 0) return;
 8019c7e:	bf00      	nop
}
 8019c80:	3710      	adds	r7, #16
 8019c82:	46bd      	mov	sp, r7
 8019c84:	bd80      	pop	{r7, pc}

08019c86 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8019c86:	b580      	push	{r7, lr}
 8019c88:	b084      	sub	sp, #16
 8019c8a:	af00      	add	r7, sp, #0
 8019c8c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	685b      	ldr	r3, [r3, #4]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	db16      	blt.n	8019cc4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	6818      	ldr	r0, [r3, #0]
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	f103 010c 	add.w	r1, r3, #12
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	685b      	ldr	r3, [r3, #4]
 8019ca4:	461a      	mov	r2, r3
 8019ca6:	f107 030c 	add.w	r3, r7, #12
 8019caa:	f7ff fd73 	bl	8019794 <f_write>
 8019cae:	4603      	mov	r3, r0
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d107      	bne.n	8019cc4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	685b      	ldr	r3, [r3, #4]
 8019cb8:	68fa      	ldr	r2, [r7, #12]
 8019cba:	4293      	cmp	r3, r2
 8019cbc:	d102      	bne.n	8019cc4 <putc_flush+0x3e>
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	689b      	ldr	r3, [r3, #8]
 8019cc2:	e001      	b.n	8019cc8 <putc_flush+0x42>
	return EOF;
 8019cc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019cc8:	4618      	mov	r0, r3
 8019cca:	3710      	adds	r7, #16
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd80      	pop	{r7, pc}

08019cd0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8019cd0:	b480      	push	{r7}
 8019cd2:	b083      	sub	sp, #12
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
 8019cd8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	683a      	ldr	r2, [r7, #0]
 8019cde:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	605a      	str	r2, [r3, #4]
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	685a      	ldr	r2, [r3, #4]
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	609a      	str	r2, [r3, #8]
}
 8019cee:	bf00      	nop
 8019cf0:	370c      	adds	r7, #12
 8019cf2:	46bd      	mov	sp, r7
 8019cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf8:	4770      	bx	lr

08019cfa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8019cfa:	b580      	push	{r7, lr}
 8019cfc:	b096      	sub	sp, #88	; 0x58
 8019cfe:	af00      	add	r7, sp, #0
 8019d00:	6078      	str	r0, [r7, #4]
 8019d02:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8019d04:	f107 030c 	add.w	r3, r7, #12
 8019d08:	6839      	ldr	r1, [r7, #0]
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	f7ff ffe0 	bl	8019cd0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8019d10:	e009      	b.n	8019d26 <f_puts+0x2c>
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	1c5a      	adds	r2, r3, #1
 8019d16:	607a      	str	r2, [r7, #4]
 8019d18:	781a      	ldrb	r2, [r3, #0]
 8019d1a:	f107 030c 	add.w	r3, r7, #12
 8019d1e:	4611      	mov	r1, r2
 8019d20:	4618      	mov	r0, r3
 8019d22:	f7ff ff73 	bl	8019c0c <putc_bfd>
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	781b      	ldrb	r3, [r3, #0]
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d1f1      	bne.n	8019d12 <f_puts+0x18>
	return putc_flush(&pb);
 8019d2e:	f107 030c 	add.w	r3, r7, #12
 8019d32:	4618      	mov	r0, r3
 8019d34:	f7ff ffa7 	bl	8019c86 <putc_flush>
 8019d38:	4603      	mov	r3, r0
}
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	3758      	adds	r7, #88	; 0x58
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	bd80      	pop	{r7, pc}
	...

08019d44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019d44:	b480      	push	{r7}
 8019d46:	b087      	sub	sp, #28
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	60f8      	str	r0, [r7, #12]
 8019d4c:	60b9      	str	r1, [r7, #8]
 8019d4e:	4613      	mov	r3, r2
 8019d50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019d52:	2301      	movs	r3, #1
 8019d54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8019d56:	2300      	movs	r3, #0
 8019d58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8019d5a:	4b1f      	ldr	r3, [pc, #124]	; (8019dd8 <FATFS_LinkDriverEx+0x94>)
 8019d5c:	7a5b      	ldrb	r3, [r3, #9]
 8019d5e:	b2db      	uxtb	r3, r3
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d131      	bne.n	8019dc8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019d64:	4b1c      	ldr	r3, [pc, #112]	; (8019dd8 <FATFS_LinkDriverEx+0x94>)
 8019d66:	7a5b      	ldrb	r3, [r3, #9]
 8019d68:	b2db      	uxtb	r3, r3
 8019d6a:	461a      	mov	r2, r3
 8019d6c:	4b1a      	ldr	r3, [pc, #104]	; (8019dd8 <FATFS_LinkDriverEx+0x94>)
 8019d6e:	2100      	movs	r1, #0
 8019d70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8019d72:	4b19      	ldr	r3, [pc, #100]	; (8019dd8 <FATFS_LinkDriverEx+0x94>)
 8019d74:	7a5b      	ldrb	r3, [r3, #9]
 8019d76:	b2db      	uxtb	r3, r3
 8019d78:	4a17      	ldr	r2, [pc, #92]	; (8019dd8 <FATFS_LinkDriverEx+0x94>)
 8019d7a:	009b      	lsls	r3, r3, #2
 8019d7c:	4413      	add	r3, r2
 8019d7e:	68fa      	ldr	r2, [r7, #12]
 8019d80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8019d82:	4b15      	ldr	r3, [pc, #84]	; (8019dd8 <FATFS_LinkDriverEx+0x94>)
 8019d84:	7a5b      	ldrb	r3, [r3, #9]
 8019d86:	b2db      	uxtb	r3, r3
 8019d88:	461a      	mov	r2, r3
 8019d8a:	4b13      	ldr	r3, [pc, #76]	; (8019dd8 <FATFS_LinkDriverEx+0x94>)
 8019d8c:	4413      	add	r3, r2
 8019d8e:	79fa      	ldrb	r2, [r7, #7]
 8019d90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8019d92:	4b11      	ldr	r3, [pc, #68]	; (8019dd8 <FATFS_LinkDriverEx+0x94>)
 8019d94:	7a5b      	ldrb	r3, [r3, #9]
 8019d96:	b2db      	uxtb	r3, r3
 8019d98:	1c5a      	adds	r2, r3, #1
 8019d9a:	b2d1      	uxtb	r1, r2
 8019d9c:	4a0e      	ldr	r2, [pc, #56]	; (8019dd8 <FATFS_LinkDriverEx+0x94>)
 8019d9e:	7251      	strb	r1, [r2, #9]
 8019da0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8019da2:	7dbb      	ldrb	r3, [r7, #22]
 8019da4:	3330      	adds	r3, #48	; 0x30
 8019da6:	b2da      	uxtb	r2, r3
 8019da8:	68bb      	ldr	r3, [r7, #8]
 8019daa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8019dac:	68bb      	ldr	r3, [r7, #8]
 8019dae:	3301      	adds	r3, #1
 8019db0:	223a      	movs	r2, #58	; 0x3a
 8019db2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019db4:	68bb      	ldr	r3, [r7, #8]
 8019db6:	3302      	adds	r3, #2
 8019db8:	222f      	movs	r2, #47	; 0x2f
 8019dba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8019dbc:	68bb      	ldr	r3, [r7, #8]
 8019dbe:	3303      	adds	r3, #3
 8019dc0:	2200      	movs	r2, #0
 8019dc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8019dca:	4618      	mov	r0, r3
 8019dcc:	371c      	adds	r7, #28
 8019dce:	46bd      	mov	sp, r7
 8019dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd4:	4770      	bx	lr
 8019dd6:	bf00      	nop
 8019dd8:	24001758 	.word	0x24001758

08019ddc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b082      	sub	sp, #8
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
 8019de4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019de6:	2200      	movs	r2, #0
 8019de8:	6839      	ldr	r1, [r7, #0]
 8019dea:	6878      	ldr	r0, [r7, #4]
 8019dec:	f7ff ffaa 	bl	8019d44 <FATFS_LinkDriverEx>
 8019df0:	4603      	mov	r3, r0
}
 8019df2:	4618      	mov	r0, r3
 8019df4:	3708      	adds	r7, #8
 8019df6:	46bd      	mov	sp, r7
 8019df8:	bd80      	pop	{r7, pc}
	...

08019dfc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8019dfc:	b480      	push	{r7}
 8019dfe:	b085      	sub	sp, #20
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	4603      	mov	r3, r0
 8019e04:	6039      	str	r1, [r7, #0]
 8019e06:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8019e08:	88fb      	ldrh	r3, [r7, #6]
 8019e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8019e0c:	d802      	bhi.n	8019e14 <ff_convert+0x18>
		c = chr;
 8019e0e:	88fb      	ldrh	r3, [r7, #6]
 8019e10:	81fb      	strh	r3, [r7, #14]
 8019e12:	e025      	b.n	8019e60 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8019e14:	683b      	ldr	r3, [r7, #0]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d00b      	beq.n	8019e32 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8019e1a:	88fb      	ldrh	r3, [r7, #6]
 8019e1c:	2bff      	cmp	r3, #255	; 0xff
 8019e1e:	d805      	bhi.n	8019e2c <ff_convert+0x30>
 8019e20:	88fb      	ldrh	r3, [r7, #6]
 8019e22:	3b80      	subs	r3, #128	; 0x80
 8019e24:	4a12      	ldr	r2, [pc, #72]	; (8019e70 <ff_convert+0x74>)
 8019e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019e2a:	e000      	b.n	8019e2e <ff_convert+0x32>
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	81fb      	strh	r3, [r7, #14]
 8019e30:	e016      	b.n	8019e60 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8019e32:	2300      	movs	r3, #0
 8019e34:	81fb      	strh	r3, [r7, #14]
 8019e36:	e009      	b.n	8019e4c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8019e38:	89fb      	ldrh	r3, [r7, #14]
 8019e3a:	4a0d      	ldr	r2, [pc, #52]	; (8019e70 <ff_convert+0x74>)
 8019e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019e40:	88fa      	ldrh	r2, [r7, #6]
 8019e42:	429a      	cmp	r2, r3
 8019e44:	d006      	beq.n	8019e54 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8019e46:	89fb      	ldrh	r3, [r7, #14]
 8019e48:	3301      	adds	r3, #1
 8019e4a:	81fb      	strh	r3, [r7, #14]
 8019e4c:	89fb      	ldrh	r3, [r7, #14]
 8019e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8019e50:	d9f2      	bls.n	8019e38 <ff_convert+0x3c>
 8019e52:	e000      	b.n	8019e56 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8019e54:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8019e56:	89fb      	ldrh	r3, [r7, #14]
 8019e58:	3380      	adds	r3, #128	; 0x80
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	b2db      	uxtb	r3, r3
 8019e5e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8019e60:	89fb      	ldrh	r3, [r7, #14]
}
 8019e62:	4618      	mov	r0, r3
 8019e64:	3714      	adds	r7, #20
 8019e66:	46bd      	mov	sp, r7
 8019e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e6c:	4770      	bx	lr
 8019e6e:	bf00      	nop
 8019e70:	0801c060 	.word	0x0801c060

08019e74 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8019e74:	b480      	push	{r7}
 8019e76:	b087      	sub	sp, #28
 8019e78:	af00      	add	r7, sp, #0
 8019e7a:	4603      	mov	r3, r0
 8019e7c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8019e7e:	88fb      	ldrh	r3, [r7, #6]
 8019e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019e84:	d201      	bcs.n	8019e8a <ff_wtoupper+0x16>
 8019e86:	4b3e      	ldr	r3, [pc, #248]	; (8019f80 <ff_wtoupper+0x10c>)
 8019e88:	e000      	b.n	8019e8c <ff_wtoupper+0x18>
 8019e8a:	4b3e      	ldr	r3, [pc, #248]	; (8019f84 <ff_wtoupper+0x110>)
 8019e8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8019e8e:	697b      	ldr	r3, [r7, #20]
 8019e90:	1c9a      	adds	r2, r3, #2
 8019e92:	617a      	str	r2, [r7, #20]
 8019e94:	881b      	ldrh	r3, [r3, #0]
 8019e96:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8019e98:	8a7b      	ldrh	r3, [r7, #18]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d068      	beq.n	8019f70 <ff_wtoupper+0xfc>
 8019e9e:	88fa      	ldrh	r2, [r7, #6]
 8019ea0:	8a7b      	ldrh	r3, [r7, #18]
 8019ea2:	429a      	cmp	r2, r3
 8019ea4:	d364      	bcc.n	8019f70 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8019ea6:	697b      	ldr	r3, [r7, #20]
 8019ea8:	1c9a      	adds	r2, r3, #2
 8019eaa:	617a      	str	r2, [r7, #20]
 8019eac:	881b      	ldrh	r3, [r3, #0]
 8019eae:	823b      	strh	r3, [r7, #16]
 8019eb0:	8a3b      	ldrh	r3, [r7, #16]
 8019eb2:	0a1b      	lsrs	r3, r3, #8
 8019eb4:	81fb      	strh	r3, [r7, #14]
 8019eb6:	8a3b      	ldrh	r3, [r7, #16]
 8019eb8:	b2db      	uxtb	r3, r3
 8019eba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8019ebc:	88fa      	ldrh	r2, [r7, #6]
 8019ebe:	8a79      	ldrh	r1, [r7, #18]
 8019ec0:	8a3b      	ldrh	r3, [r7, #16]
 8019ec2:	440b      	add	r3, r1
 8019ec4:	429a      	cmp	r2, r3
 8019ec6:	da49      	bge.n	8019f5c <ff_wtoupper+0xe8>
			switch (cmd) {
 8019ec8:	89fb      	ldrh	r3, [r7, #14]
 8019eca:	2b08      	cmp	r3, #8
 8019ecc:	d84f      	bhi.n	8019f6e <ff_wtoupper+0xfa>
 8019ece:	a201      	add	r2, pc, #4	; (adr r2, 8019ed4 <ff_wtoupper+0x60>)
 8019ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ed4:	08019ef9 	.word	0x08019ef9
 8019ed8:	08019f0b 	.word	0x08019f0b
 8019edc:	08019f21 	.word	0x08019f21
 8019ee0:	08019f29 	.word	0x08019f29
 8019ee4:	08019f31 	.word	0x08019f31
 8019ee8:	08019f39 	.word	0x08019f39
 8019eec:	08019f41 	.word	0x08019f41
 8019ef0:	08019f49 	.word	0x08019f49
 8019ef4:	08019f51 	.word	0x08019f51
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8019ef8:	88fa      	ldrh	r2, [r7, #6]
 8019efa:	8a7b      	ldrh	r3, [r7, #18]
 8019efc:	1ad3      	subs	r3, r2, r3
 8019efe:	005b      	lsls	r3, r3, #1
 8019f00:	697a      	ldr	r2, [r7, #20]
 8019f02:	4413      	add	r3, r2
 8019f04:	881b      	ldrh	r3, [r3, #0]
 8019f06:	80fb      	strh	r3, [r7, #6]
 8019f08:	e027      	b.n	8019f5a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8019f0a:	88fa      	ldrh	r2, [r7, #6]
 8019f0c:	8a7b      	ldrh	r3, [r7, #18]
 8019f0e:	1ad3      	subs	r3, r2, r3
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	f003 0301 	and.w	r3, r3, #1
 8019f16:	b29b      	uxth	r3, r3
 8019f18:	88fa      	ldrh	r2, [r7, #6]
 8019f1a:	1ad3      	subs	r3, r2, r3
 8019f1c:	80fb      	strh	r3, [r7, #6]
 8019f1e:	e01c      	b.n	8019f5a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8019f20:	88fb      	ldrh	r3, [r7, #6]
 8019f22:	3b10      	subs	r3, #16
 8019f24:	80fb      	strh	r3, [r7, #6]
 8019f26:	e018      	b.n	8019f5a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8019f28:	88fb      	ldrh	r3, [r7, #6]
 8019f2a:	3b20      	subs	r3, #32
 8019f2c:	80fb      	strh	r3, [r7, #6]
 8019f2e:	e014      	b.n	8019f5a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8019f30:	88fb      	ldrh	r3, [r7, #6]
 8019f32:	3b30      	subs	r3, #48	; 0x30
 8019f34:	80fb      	strh	r3, [r7, #6]
 8019f36:	e010      	b.n	8019f5a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8019f38:	88fb      	ldrh	r3, [r7, #6]
 8019f3a:	3b1a      	subs	r3, #26
 8019f3c:	80fb      	strh	r3, [r7, #6]
 8019f3e:	e00c      	b.n	8019f5a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8019f40:	88fb      	ldrh	r3, [r7, #6]
 8019f42:	3308      	adds	r3, #8
 8019f44:	80fb      	strh	r3, [r7, #6]
 8019f46:	e008      	b.n	8019f5a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8019f48:	88fb      	ldrh	r3, [r7, #6]
 8019f4a:	3b50      	subs	r3, #80	; 0x50
 8019f4c:	80fb      	strh	r3, [r7, #6]
 8019f4e:	e004      	b.n	8019f5a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8019f50:	88fb      	ldrh	r3, [r7, #6]
 8019f52:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8019f56:	80fb      	strh	r3, [r7, #6]
 8019f58:	bf00      	nop
			}
			break;
 8019f5a:	e008      	b.n	8019f6e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8019f5c:	89fb      	ldrh	r3, [r7, #14]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d195      	bne.n	8019e8e <ff_wtoupper+0x1a>
 8019f62:	8a3b      	ldrh	r3, [r7, #16]
 8019f64:	005b      	lsls	r3, r3, #1
 8019f66:	697a      	ldr	r2, [r7, #20]
 8019f68:	4413      	add	r3, r2
 8019f6a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8019f6c:	e78f      	b.n	8019e8e <ff_wtoupper+0x1a>
			break;
 8019f6e:	bf00      	nop
	}

	return chr;
 8019f70:	88fb      	ldrh	r3, [r7, #6]
}
 8019f72:	4618      	mov	r0, r3
 8019f74:	371c      	adds	r7, #28
 8019f76:	46bd      	mov	sp, r7
 8019f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f7c:	4770      	bx	lr
 8019f7e:	bf00      	nop
 8019f80:	0801c160 	.word	0x0801c160
 8019f84:	0801c354 	.word	0x0801c354

08019f88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8019f8c:	2201      	movs	r2, #1
 8019f8e:	4913      	ldr	r1, [pc, #76]	; (8019fdc <MX_USB_DEVICE_Init+0x54>)
 8019f90:	4813      	ldr	r0, [pc, #76]	; (8019fe0 <MX_USB_DEVICE_Init+0x58>)
 8019f92:	f7fb fd1d 	bl	80159d0 <USBD_Init>
 8019f96:	4603      	mov	r3, r0
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d001      	beq.n	8019fa0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019f9c:	f7e8 fdae 	bl	8002afc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8019fa0:	4910      	ldr	r1, [pc, #64]	; (8019fe4 <MX_USB_DEVICE_Init+0x5c>)
 8019fa2:	480f      	ldr	r0, [pc, #60]	; (8019fe0 <MX_USB_DEVICE_Init+0x58>)
 8019fa4:	f7fb fd44 	bl	8015a30 <USBD_RegisterClass>
 8019fa8:	4603      	mov	r3, r0
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d001      	beq.n	8019fb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019fae:	f7e8 fda5 	bl	8002afc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8019fb2:	490d      	ldr	r1, [pc, #52]	; (8019fe8 <MX_USB_DEVICE_Init+0x60>)
 8019fb4:	480a      	ldr	r0, [pc, #40]	; (8019fe0 <MX_USB_DEVICE_Init+0x58>)
 8019fb6:	f7fb fc3b 	bl	8015830 <USBD_CDC_RegisterInterface>
 8019fba:	4603      	mov	r3, r0
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d001      	beq.n	8019fc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019fc0:	f7e8 fd9c 	bl	8002afc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8019fc4:	4806      	ldr	r0, [pc, #24]	; (8019fe0 <MX_USB_DEVICE_Init+0x58>)
 8019fc6:	f7fb fd69 	bl	8015a9c <USBD_Start>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d001      	beq.n	8019fd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019fd0:	f7e8 fd94 	bl	8002afc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8019fd4:	f7f0 f994 	bl	800a300 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019fd8:	bf00      	nop
 8019fda:	bd80      	pop	{r7, pc}
 8019fdc:	240000b0 	.word	0x240000b0
 8019fe0:	24001764 	.word	0x24001764
 8019fe4:	2400001c 	.word	0x2400001c
 8019fe8:	2400009c 	.word	0x2400009c

08019fec <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8019ff0:	2200      	movs	r2, #0
 8019ff2:	4905      	ldr	r1, [pc, #20]	; (801a008 <CDC_Init_HS+0x1c>)
 8019ff4:	4805      	ldr	r0, [pc, #20]	; (801a00c <CDC_Init_HS+0x20>)
 8019ff6:	f7fb fc35 	bl	8015864 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8019ffa:	4905      	ldr	r1, [pc, #20]	; (801a010 <CDC_Init_HS+0x24>)
 8019ffc:	4803      	ldr	r0, [pc, #12]	; (801a00c <CDC_Init_HS+0x20>)
 8019ffe:	f7fb fc53 	bl	80158a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a002:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a004:	4618      	mov	r0, r3
 801a006:	bd80      	pop	{r7, pc}
 801a008:	24002240 	.word	0x24002240
 801a00c:	24001764 	.word	0x24001764
 801a010:	24001a40 	.word	0x24001a40

0801a014 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a014:	b480      	push	{r7}
 801a016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a018:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a01a:	4618      	mov	r0, r3
 801a01c:	46bd      	mov	sp, r7
 801a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a022:	4770      	bx	lr

0801a024 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a024:	b480      	push	{r7}
 801a026:	b083      	sub	sp, #12
 801a028:	af00      	add	r7, sp, #0
 801a02a:	4603      	mov	r3, r0
 801a02c:	6039      	str	r1, [r7, #0]
 801a02e:	71fb      	strb	r3, [r7, #7]
 801a030:	4613      	mov	r3, r2
 801a032:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a034:	79fb      	ldrb	r3, [r7, #7]
 801a036:	2b23      	cmp	r3, #35	; 0x23
 801a038:	d84a      	bhi.n	801a0d0 <CDC_Control_HS+0xac>
 801a03a:	a201      	add	r2, pc, #4	; (adr r2, 801a040 <CDC_Control_HS+0x1c>)
 801a03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a040:	0801a0d1 	.word	0x0801a0d1
 801a044:	0801a0d1 	.word	0x0801a0d1
 801a048:	0801a0d1 	.word	0x0801a0d1
 801a04c:	0801a0d1 	.word	0x0801a0d1
 801a050:	0801a0d1 	.word	0x0801a0d1
 801a054:	0801a0d1 	.word	0x0801a0d1
 801a058:	0801a0d1 	.word	0x0801a0d1
 801a05c:	0801a0d1 	.word	0x0801a0d1
 801a060:	0801a0d1 	.word	0x0801a0d1
 801a064:	0801a0d1 	.word	0x0801a0d1
 801a068:	0801a0d1 	.word	0x0801a0d1
 801a06c:	0801a0d1 	.word	0x0801a0d1
 801a070:	0801a0d1 	.word	0x0801a0d1
 801a074:	0801a0d1 	.word	0x0801a0d1
 801a078:	0801a0d1 	.word	0x0801a0d1
 801a07c:	0801a0d1 	.word	0x0801a0d1
 801a080:	0801a0d1 	.word	0x0801a0d1
 801a084:	0801a0d1 	.word	0x0801a0d1
 801a088:	0801a0d1 	.word	0x0801a0d1
 801a08c:	0801a0d1 	.word	0x0801a0d1
 801a090:	0801a0d1 	.word	0x0801a0d1
 801a094:	0801a0d1 	.word	0x0801a0d1
 801a098:	0801a0d1 	.word	0x0801a0d1
 801a09c:	0801a0d1 	.word	0x0801a0d1
 801a0a0:	0801a0d1 	.word	0x0801a0d1
 801a0a4:	0801a0d1 	.word	0x0801a0d1
 801a0a8:	0801a0d1 	.word	0x0801a0d1
 801a0ac:	0801a0d1 	.word	0x0801a0d1
 801a0b0:	0801a0d1 	.word	0x0801a0d1
 801a0b4:	0801a0d1 	.word	0x0801a0d1
 801a0b8:	0801a0d1 	.word	0x0801a0d1
 801a0bc:	0801a0d1 	.word	0x0801a0d1
 801a0c0:	0801a0d1 	.word	0x0801a0d1
 801a0c4:	0801a0d1 	.word	0x0801a0d1
 801a0c8:	0801a0d1 	.word	0x0801a0d1
 801a0cc:	0801a0d1 	.word	0x0801a0d1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a0d0:	bf00      	nop
  }

  return (USBD_OK);
 801a0d2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	370c      	adds	r7, #12
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0de:	4770      	bx	lr

0801a0e0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b082      	sub	sp, #8
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
 801a0e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a0ea:	6879      	ldr	r1, [r7, #4]
 801a0ec:	4805      	ldr	r0, [pc, #20]	; (801a104 <CDC_Receive_HS+0x24>)
 801a0ee:	f7fb fbdb 	bl	80158a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a0f2:	4804      	ldr	r0, [pc, #16]	; (801a104 <CDC_Receive_HS+0x24>)
 801a0f4:	f7fb fc36 	bl	8015964 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a0f8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	3708      	adds	r7, #8
 801a0fe:	46bd      	mov	sp, r7
 801a100:	bd80      	pop	{r7, pc}
 801a102:	bf00      	nop
 801a104:	24001764 	.word	0x24001764

0801a108 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b084      	sub	sp, #16
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
 801a110:	460b      	mov	r3, r1
 801a112:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a114:	2300      	movs	r3, #0
 801a116:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801a118:	4b0d      	ldr	r3, [pc, #52]	; (801a150 <CDC_Transmit_HS+0x48>)
 801a11a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a11e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a120:	68bb      	ldr	r3, [r7, #8]
 801a122:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a126:	2b00      	cmp	r3, #0
 801a128:	d001      	beq.n	801a12e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801a12a:	2301      	movs	r3, #1
 801a12c:	e00b      	b.n	801a146 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801a12e:	887b      	ldrh	r3, [r7, #2]
 801a130:	461a      	mov	r2, r3
 801a132:	6879      	ldr	r1, [r7, #4]
 801a134:	4806      	ldr	r0, [pc, #24]	; (801a150 <CDC_Transmit_HS+0x48>)
 801a136:	f7fb fb95 	bl	8015864 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801a13a:	4805      	ldr	r0, [pc, #20]	; (801a150 <CDC_Transmit_HS+0x48>)
 801a13c:	f7fb fbd2 	bl	80158e4 <USBD_CDC_TransmitPacket>
 801a140:	4603      	mov	r3, r0
 801a142:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801a144:	7bfb      	ldrb	r3, [r7, #15]
}
 801a146:	4618      	mov	r0, r3
 801a148:	3710      	adds	r7, #16
 801a14a:	46bd      	mov	sp, r7
 801a14c:	bd80      	pop	{r7, pc}
 801a14e:	bf00      	nop
 801a150:	24001764 	.word	0x24001764

0801a154 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a154:	b480      	push	{r7}
 801a156:	b087      	sub	sp, #28
 801a158:	af00      	add	r7, sp, #0
 801a15a:	60f8      	str	r0, [r7, #12]
 801a15c:	60b9      	str	r1, [r7, #8]
 801a15e:	4613      	mov	r3, r2
 801a160:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a162:	2300      	movs	r3, #0
 801a164:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801a166:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a16a:	4618      	mov	r0, r3
 801a16c:	371c      	adds	r7, #28
 801a16e:	46bd      	mov	sp, r7
 801a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a174:	4770      	bx	lr
	...

0801a178 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a178:	b480      	push	{r7}
 801a17a:	b083      	sub	sp, #12
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	4603      	mov	r3, r0
 801a180:	6039      	str	r1, [r7, #0]
 801a182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801a184:	683b      	ldr	r3, [r7, #0]
 801a186:	2212      	movs	r2, #18
 801a188:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801a18a:	4b03      	ldr	r3, [pc, #12]	; (801a198 <USBD_HS_DeviceDescriptor+0x20>)
}
 801a18c:	4618      	mov	r0, r3
 801a18e:	370c      	adds	r7, #12
 801a190:	46bd      	mov	sp, r7
 801a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a196:	4770      	bx	lr
 801a198:	240000cc 	.word	0x240000cc

0801a19c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a19c:	b480      	push	{r7}
 801a19e:	b083      	sub	sp, #12
 801a1a0:	af00      	add	r7, sp, #0
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	6039      	str	r1, [r7, #0]
 801a1a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a1a8:	683b      	ldr	r3, [r7, #0]
 801a1aa:	2204      	movs	r2, #4
 801a1ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a1ae:	4b03      	ldr	r3, [pc, #12]	; (801a1bc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	370c      	adds	r7, #12
 801a1b4:	46bd      	mov	sp, r7
 801a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ba:	4770      	bx	lr
 801a1bc:	240000e0 	.word	0x240000e0

0801a1c0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b082      	sub	sp, #8
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	4603      	mov	r3, r0
 801a1c8:	6039      	str	r1, [r7, #0]
 801a1ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a1cc:	79fb      	ldrb	r3, [r7, #7]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d105      	bne.n	801a1de <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a1d2:	683a      	ldr	r2, [r7, #0]
 801a1d4:	4907      	ldr	r1, [pc, #28]	; (801a1f4 <USBD_HS_ProductStrDescriptor+0x34>)
 801a1d6:	4808      	ldr	r0, [pc, #32]	; (801a1f8 <USBD_HS_ProductStrDescriptor+0x38>)
 801a1d8:	f7fc fe12 	bl	8016e00 <USBD_GetString>
 801a1dc:	e004      	b.n	801a1e8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a1de:	683a      	ldr	r2, [r7, #0]
 801a1e0:	4904      	ldr	r1, [pc, #16]	; (801a1f4 <USBD_HS_ProductStrDescriptor+0x34>)
 801a1e2:	4805      	ldr	r0, [pc, #20]	; (801a1f8 <USBD_HS_ProductStrDescriptor+0x38>)
 801a1e4:	f7fc fe0c 	bl	8016e00 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a1e8:	4b02      	ldr	r3, [pc, #8]	; (801a1f4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	3708      	adds	r7, #8
 801a1ee:	46bd      	mov	sp, r7
 801a1f0:	bd80      	pop	{r7, pc}
 801a1f2:	bf00      	nop
 801a1f4:	24002a40 	.word	0x24002a40
 801a1f8:	0801bec4 	.word	0x0801bec4

0801a1fc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	b082      	sub	sp, #8
 801a200:	af00      	add	r7, sp, #0
 801a202:	4603      	mov	r3, r0
 801a204:	6039      	str	r1, [r7, #0]
 801a206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a208:	683a      	ldr	r2, [r7, #0]
 801a20a:	4904      	ldr	r1, [pc, #16]	; (801a21c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801a20c:	4804      	ldr	r0, [pc, #16]	; (801a220 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801a20e:	f7fc fdf7 	bl	8016e00 <USBD_GetString>
  return USBD_StrDesc;
 801a212:	4b02      	ldr	r3, [pc, #8]	; (801a21c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801a214:	4618      	mov	r0, r3
 801a216:	3708      	adds	r7, #8
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	24002a40 	.word	0x24002a40
 801a220:	0801bee0 	.word	0x0801bee0

0801a224 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a224:	b580      	push	{r7, lr}
 801a226:	b082      	sub	sp, #8
 801a228:	af00      	add	r7, sp, #0
 801a22a:	4603      	mov	r3, r0
 801a22c:	6039      	str	r1, [r7, #0]
 801a22e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a230:	683b      	ldr	r3, [r7, #0]
 801a232:	221a      	movs	r2, #26
 801a234:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a236:	f000 f843 	bl	801a2c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a23a:	4b02      	ldr	r3, [pc, #8]	; (801a244 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801a23c:	4618      	mov	r0, r3
 801a23e:	3708      	adds	r7, #8
 801a240:	46bd      	mov	sp, r7
 801a242:	bd80      	pop	{r7, pc}
 801a244:	240000e4 	.word	0x240000e4

0801a248 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a248:	b580      	push	{r7, lr}
 801a24a:	b082      	sub	sp, #8
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	4603      	mov	r3, r0
 801a250:	6039      	str	r1, [r7, #0]
 801a252:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a254:	79fb      	ldrb	r3, [r7, #7]
 801a256:	2b00      	cmp	r3, #0
 801a258:	d105      	bne.n	801a266 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a25a:	683a      	ldr	r2, [r7, #0]
 801a25c:	4907      	ldr	r1, [pc, #28]	; (801a27c <USBD_HS_ConfigStrDescriptor+0x34>)
 801a25e:	4808      	ldr	r0, [pc, #32]	; (801a280 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a260:	f7fc fdce 	bl	8016e00 <USBD_GetString>
 801a264:	e004      	b.n	801a270 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a266:	683a      	ldr	r2, [r7, #0]
 801a268:	4904      	ldr	r1, [pc, #16]	; (801a27c <USBD_HS_ConfigStrDescriptor+0x34>)
 801a26a:	4805      	ldr	r0, [pc, #20]	; (801a280 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a26c:	f7fc fdc8 	bl	8016e00 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a270:	4b02      	ldr	r3, [pc, #8]	; (801a27c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801a272:	4618      	mov	r0, r3
 801a274:	3708      	adds	r7, #8
 801a276:	46bd      	mov	sp, r7
 801a278:	bd80      	pop	{r7, pc}
 801a27a:	bf00      	nop
 801a27c:	24002a40 	.word	0x24002a40
 801a280:	0801bee4 	.word	0x0801bee4

0801a284 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a284:	b580      	push	{r7, lr}
 801a286:	b082      	sub	sp, #8
 801a288:	af00      	add	r7, sp, #0
 801a28a:	4603      	mov	r3, r0
 801a28c:	6039      	str	r1, [r7, #0]
 801a28e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a290:	79fb      	ldrb	r3, [r7, #7]
 801a292:	2b00      	cmp	r3, #0
 801a294:	d105      	bne.n	801a2a2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a296:	683a      	ldr	r2, [r7, #0]
 801a298:	4907      	ldr	r1, [pc, #28]	; (801a2b8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a29a:	4808      	ldr	r0, [pc, #32]	; (801a2bc <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a29c:	f7fc fdb0 	bl	8016e00 <USBD_GetString>
 801a2a0:	e004      	b.n	801a2ac <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a2a2:	683a      	ldr	r2, [r7, #0]
 801a2a4:	4904      	ldr	r1, [pc, #16]	; (801a2b8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a2a6:	4805      	ldr	r0, [pc, #20]	; (801a2bc <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a2a8:	f7fc fdaa 	bl	8016e00 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a2ac:	4b02      	ldr	r3, [pc, #8]	; (801a2b8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	3708      	adds	r7, #8
 801a2b2:	46bd      	mov	sp, r7
 801a2b4:	bd80      	pop	{r7, pc}
 801a2b6:	bf00      	nop
 801a2b8:	24002a40 	.word	0x24002a40
 801a2bc:	0801bef0 	.word	0x0801bef0

0801a2c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b084      	sub	sp, #16
 801a2c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a2c6:	4b0f      	ldr	r3, [pc, #60]	; (801a304 <Get_SerialNum+0x44>)
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a2cc:	4b0e      	ldr	r3, [pc, #56]	; (801a308 <Get_SerialNum+0x48>)
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a2d2:	4b0e      	ldr	r3, [pc, #56]	; (801a30c <Get_SerialNum+0x4c>)
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a2d8:	68fa      	ldr	r2, [r7, #12]
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	4413      	add	r3, r2
 801a2de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d009      	beq.n	801a2fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a2e6:	2208      	movs	r2, #8
 801a2e8:	4909      	ldr	r1, [pc, #36]	; (801a310 <Get_SerialNum+0x50>)
 801a2ea:	68f8      	ldr	r0, [r7, #12]
 801a2ec:	f000 f814 	bl	801a318 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a2f0:	2204      	movs	r2, #4
 801a2f2:	4908      	ldr	r1, [pc, #32]	; (801a314 <Get_SerialNum+0x54>)
 801a2f4:	68b8      	ldr	r0, [r7, #8]
 801a2f6:	f000 f80f 	bl	801a318 <IntToUnicode>
  }
}
 801a2fa:	bf00      	nop
 801a2fc:	3710      	adds	r7, #16
 801a2fe:	46bd      	mov	sp, r7
 801a300:	bd80      	pop	{r7, pc}
 801a302:	bf00      	nop
 801a304:	1ff1e800 	.word	0x1ff1e800
 801a308:	1ff1e804 	.word	0x1ff1e804
 801a30c:	1ff1e808 	.word	0x1ff1e808
 801a310:	240000e6 	.word	0x240000e6
 801a314:	240000f6 	.word	0x240000f6

0801a318 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a318:	b480      	push	{r7}
 801a31a:	b087      	sub	sp, #28
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	60f8      	str	r0, [r7, #12]
 801a320:	60b9      	str	r1, [r7, #8]
 801a322:	4613      	mov	r3, r2
 801a324:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a326:	2300      	movs	r3, #0
 801a328:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a32a:	2300      	movs	r3, #0
 801a32c:	75fb      	strb	r3, [r7, #23]
 801a32e:	e027      	b.n	801a380 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	0f1b      	lsrs	r3, r3, #28
 801a334:	2b09      	cmp	r3, #9
 801a336:	d80b      	bhi.n	801a350 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	0f1b      	lsrs	r3, r3, #28
 801a33c:	b2da      	uxtb	r2, r3
 801a33e:	7dfb      	ldrb	r3, [r7, #23]
 801a340:	005b      	lsls	r3, r3, #1
 801a342:	4619      	mov	r1, r3
 801a344:	68bb      	ldr	r3, [r7, #8]
 801a346:	440b      	add	r3, r1
 801a348:	3230      	adds	r2, #48	; 0x30
 801a34a:	b2d2      	uxtb	r2, r2
 801a34c:	701a      	strb	r2, [r3, #0]
 801a34e:	e00a      	b.n	801a366 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a350:	68fb      	ldr	r3, [r7, #12]
 801a352:	0f1b      	lsrs	r3, r3, #28
 801a354:	b2da      	uxtb	r2, r3
 801a356:	7dfb      	ldrb	r3, [r7, #23]
 801a358:	005b      	lsls	r3, r3, #1
 801a35a:	4619      	mov	r1, r3
 801a35c:	68bb      	ldr	r3, [r7, #8]
 801a35e:	440b      	add	r3, r1
 801a360:	3237      	adds	r2, #55	; 0x37
 801a362:	b2d2      	uxtb	r2, r2
 801a364:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	011b      	lsls	r3, r3, #4
 801a36a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a36c:	7dfb      	ldrb	r3, [r7, #23]
 801a36e:	005b      	lsls	r3, r3, #1
 801a370:	3301      	adds	r3, #1
 801a372:	68ba      	ldr	r2, [r7, #8]
 801a374:	4413      	add	r3, r2
 801a376:	2200      	movs	r2, #0
 801a378:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a37a:	7dfb      	ldrb	r3, [r7, #23]
 801a37c:	3301      	adds	r3, #1
 801a37e:	75fb      	strb	r3, [r7, #23]
 801a380:	7dfa      	ldrb	r2, [r7, #23]
 801a382:	79fb      	ldrb	r3, [r7, #7]
 801a384:	429a      	cmp	r2, r3
 801a386:	d3d3      	bcc.n	801a330 <IntToUnicode+0x18>
  }
}
 801a388:	bf00      	nop
 801a38a:	bf00      	nop
 801a38c:	371c      	adds	r7, #28
 801a38e:	46bd      	mov	sp, r7
 801a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a394:	4770      	bx	lr
	...

0801a398 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b0b2      	sub	sp, #200	; 0xc8
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a3a0:	f107 0310 	add.w	r3, r7, #16
 801a3a4:	22b8      	movs	r2, #184	; 0xb8
 801a3a6:	2100      	movs	r1, #0
 801a3a8:	4618      	mov	r0, r3
 801a3aa:	f000 fb4f 	bl	801aa4c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	4a1a      	ldr	r2, [pc, #104]	; (801a41c <HAL_PCD_MspInit+0x84>)
 801a3b4:	4293      	cmp	r3, r2
 801a3b6:	d12c      	bne.n	801a412 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a3b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a3bc:	f04f 0300 	mov.w	r3, #0
 801a3c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801a3c4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801a3c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a3cc:	f107 0310 	add.w	r3, r7, #16
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	f7f0 ff75 	bl	800b2c0 <HAL_RCCEx_PeriphCLKConfig>
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d001      	beq.n	801a3e0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801a3dc:	f7e8 fb8e 	bl	8002afc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a3e0:	f7ef ff8e 	bl	800a300 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801a3e4:	4b0e      	ldr	r3, [pc, #56]	; (801a420 <HAL_PCD_MspInit+0x88>)
 801a3e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a3ea:	4a0d      	ldr	r2, [pc, #52]	; (801a420 <HAL_PCD_MspInit+0x88>)
 801a3ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a3f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801a3f4:	4b0a      	ldr	r3, [pc, #40]	; (801a420 <HAL_PCD_MspInit+0x88>)
 801a3f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a3fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a3fe:	60fb      	str	r3, [r7, #12]
 801a400:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801a402:	2200      	movs	r2, #0
 801a404:	2100      	movs	r1, #0
 801a406:	204d      	movs	r0, #77	; 0x4d
 801a408:	f7eb fcff 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801a40c:	204d      	movs	r0, #77	; 0x4d
 801a40e:	f7eb fd16 	bl	8005e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801a412:	bf00      	nop
 801a414:	37c8      	adds	r7, #200	; 0xc8
 801a416:	46bd      	mov	sp, r7
 801a418:	bd80      	pop	{r7, pc}
 801a41a:	bf00      	nop
 801a41c:	40040000 	.word	0x40040000
 801a420:	58024400 	.word	0x58024400

0801a424 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a424:	b580      	push	{r7, lr}
 801a426:	b082      	sub	sp, #8
 801a428:	af00      	add	r7, sp, #0
 801a42a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a438:	4619      	mov	r1, r3
 801a43a:	4610      	mov	r0, r2
 801a43c:	f7fb fb7b 	bl	8015b36 <USBD_LL_SetupStage>
}
 801a440:	bf00      	nop
 801a442:	3708      	adds	r7, #8
 801a444:	46bd      	mov	sp, r7
 801a446:	bd80      	pop	{r7, pc}

0801a448 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a448:	b580      	push	{r7, lr}
 801a44a:	b082      	sub	sp, #8
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	6078      	str	r0, [r7, #4]
 801a450:	460b      	mov	r3, r1
 801a452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a45a:	78fa      	ldrb	r2, [r7, #3]
 801a45c:	6879      	ldr	r1, [r7, #4]
 801a45e:	4613      	mov	r3, r2
 801a460:	00db      	lsls	r3, r3, #3
 801a462:	4413      	add	r3, r2
 801a464:	009b      	lsls	r3, r3, #2
 801a466:	440b      	add	r3, r1
 801a468:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a46c:	681a      	ldr	r2, [r3, #0]
 801a46e:	78fb      	ldrb	r3, [r7, #3]
 801a470:	4619      	mov	r1, r3
 801a472:	f7fb fbb5 	bl	8015be0 <USBD_LL_DataOutStage>
}
 801a476:	bf00      	nop
 801a478:	3708      	adds	r7, #8
 801a47a:	46bd      	mov	sp, r7
 801a47c:	bd80      	pop	{r7, pc}

0801a47e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a47e:	b580      	push	{r7, lr}
 801a480:	b082      	sub	sp, #8
 801a482:	af00      	add	r7, sp, #0
 801a484:	6078      	str	r0, [r7, #4]
 801a486:	460b      	mov	r3, r1
 801a488:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a490:	78fa      	ldrb	r2, [r7, #3]
 801a492:	6879      	ldr	r1, [r7, #4]
 801a494:	4613      	mov	r3, r2
 801a496:	00db      	lsls	r3, r3, #3
 801a498:	4413      	add	r3, r2
 801a49a:	009b      	lsls	r3, r3, #2
 801a49c:	440b      	add	r3, r1
 801a49e:	3348      	adds	r3, #72	; 0x48
 801a4a0:	681a      	ldr	r2, [r3, #0]
 801a4a2:	78fb      	ldrb	r3, [r7, #3]
 801a4a4:	4619      	mov	r1, r3
 801a4a6:	f7fb fc4e 	bl	8015d46 <USBD_LL_DataInStage>
}
 801a4aa:	bf00      	nop
 801a4ac:	3708      	adds	r7, #8
 801a4ae:	46bd      	mov	sp, r7
 801a4b0:	bd80      	pop	{r7, pc}

0801a4b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a4b2:	b580      	push	{r7, lr}
 801a4b4:	b082      	sub	sp, #8
 801a4b6:	af00      	add	r7, sp, #0
 801a4b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a4c0:	4618      	mov	r0, r3
 801a4c2:	f7fb fd88 	bl	8015fd6 <USBD_LL_SOF>
}
 801a4c6:	bf00      	nop
 801a4c8:	3708      	adds	r7, #8
 801a4ca:	46bd      	mov	sp, r7
 801a4cc:	bd80      	pop	{r7, pc}

0801a4ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a4ce:	b580      	push	{r7, lr}
 801a4d0:	b084      	sub	sp, #16
 801a4d2:	af00      	add	r7, sp, #0
 801a4d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a4d6:	2301      	movs	r3, #1
 801a4d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	691b      	ldr	r3, [r3, #16]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d102      	bne.n	801a4e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a4e2:	2300      	movs	r3, #0
 801a4e4:	73fb      	strb	r3, [r7, #15]
 801a4e6:	e008      	b.n	801a4fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	691b      	ldr	r3, [r3, #16]
 801a4ec:	2b02      	cmp	r3, #2
 801a4ee:	d102      	bne.n	801a4f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a4f0:	2301      	movs	r3, #1
 801a4f2:	73fb      	strb	r3, [r7, #15]
 801a4f4:	e001      	b.n	801a4fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a4f6:	f7e8 fb01 	bl	8002afc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a500:	7bfa      	ldrb	r2, [r7, #15]
 801a502:	4611      	mov	r1, r2
 801a504:	4618      	mov	r0, r3
 801a506:	f7fb fd22 	bl	8015f4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a510:	4618      	mov	r0, r3
 801a512:	f7fb fcca 	bl	8015eaa <USBD_LL_Reset>
}
 801a516:	bf00      	nop
 801a518:	3710      	adds	r7, #16
 801a51a:	46bd      	mov	sp, r7
 801a51c:	bd80      	pop	{r7, pc}
	...

0801a520 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a520:	b580      	push	{r7, lr}
 801a522:	b082      	sub	sp, #8
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a52e:	4618      	mov	r0, r3
 801a530:	f7fb fd1d 	bl	8015f6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	687a      	ldr	r2, [r7, #4]
 801a540:	6812      	ldr	r2, [r2, #0]
 801a542:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a546:	f043 0301 	orr.w	r3, r3, #1
 801a54a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	6a1b      	ldr	r3, [r3, #32]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d005      	beq.n	801a560 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a554:	4b04      	ldr	r3, [pc, #16]	; (801a568 <HAL_PCD_SuspendCallback+0x48>)
 801a556:	691b      	ldr	r3, [r3, #16]
 801a558:	4a03      	ldr	r2, [pc, #12]	; (801a568 <HAL_PCD_SuspendCallback+0x48>)
 801a55a:	f043 0306 	orr.w	r3, r3, #6
 801a55e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a560:	bf00      	nop
 801a562:	3708      	adds	r7, #8
 801a564:	46bd      	mov	sp, r7
 801a566:	bd80      	pop	{r7, pc}
 801a568:	e000ed00 	.word	0xe000ed00

0801a56c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a56c:	b580      	push	{r7, lr}
 801a56e:	b082      	sub	sp, #8
 801a570:	af00      	add	r7, sp, #0
 801a572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a57a:	4618      	mov	r0, r3
 801a57c:	f7fb fd13 	bl	8015fa6 <USBD_LL_Resume>
}
 801a580:	bf00      	nop
 801a582:	3708      	adds	r7, #8
 801a584:	46bd      	mov	sp, r7
 801a586:	bd80      	pop	{r7, pc}

0801a588 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b082      	sub	sp, #8
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	6078      	str	r0, [r7, #4]
 801a590:	460b      	mov	r3, r1
 801a592:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a59a:	78fa      	ldrb	r2, [r7, #3]
 801a59c:	4611      	mov	r1, r2
 801a59e:	4618      	mov	r0, r3
 801a5a0:	f7fb fd6b 	bl	801607a <USBD_LL_IsoOUTIncomplete>
}
 801a5a4:	bf00      	nop
 801a5a6:	3708      	adds	r7, #8
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	bd80      	pop	{r7, pc}

0801a5ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b082      	sub	sp, #8
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	6078      	str	r0, [r7, #4]
 801a5b4:	460b      	mov	r3, r1
 801a5b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a5be:	78fa      	ldrb	r2, [r7, #3]
 801a5c0:	4611      	mov	r1, r2
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	f7fb fd27 	bl	8016016 <USBD_LL_IsoINIncomplete>
}
 801a5c8:	bf00      	nop
 801a5ca:	3708      	adds	r7, #8
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	bd80      	pop	{r7, pc}

0801a5d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a5d0:	b580      	push	{r7, lr}
 801a5d2:	b082      	sub	sp, #8
 801a5d4:	af00      	add	r7, sp, #0
 801a5d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f7fb fd7d 	bl	80160de <USBD_LL_DevConnected>
}
 801a5e4:	bf00      	nop
 801a5e6:	3708      	adds	r7, #8
 801a5e8:	46bd      	mov	sp, r7
 801a5ea:	bd80      	pop	{r7, pc}

0801a5ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b082      	sub	sp, #8
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	f7fb fd7a 	bl	80160f4 <USBD_LL_DevDisconnected>
}
 801a600:	bf00      	nop
 801a602:	3708      	adds	r7, #8
 801a604:	46bd      	mov	sp, r7
 801a606:	bd80      	pop	{r7, pc}

0801a608 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a608:	b580      	push	{r7, lr}
 801a60a:	b082      	sub	sp, #8
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	781b      	ldrb	r3, [r3, #0]
 801a614:	2b01      	cmp	r3, #1
 801a616:	d140      	bne.n	801a69a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801a618:	4a22      	ldr	r2, [pc, #136]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	4a20      	ldr	r2, [pc, #128]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a624:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801a628:	4b1e      	ldr	r3, [pc, #120]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a62a:	4a1f      	ldr	r2, [pc, #124]	; (801a6a8 <USBD_LL_Init+0xa0>)
 801a62c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801a62e:	4b1d      	ldr	r3, [pc, #116]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a630:	2209      	movs	r2, #9
 801a632:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801a634:	4b1b      	ldr	r3, [pc, #108]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a636:	2202      	movs	r2, #2
 801a638:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801a63a:	4b1a      	ldr	r3, [pc, #104]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a63c:	2200      	movs	r2, #0
 801a63e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801a640:	4b18      	ldr	r3, [pc, #96]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a642:	2202      	movs	r2, #2
 801a644:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801a646:	4b17      	ldr	r3, [pc, #92]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a648:	2200      	movs	r2, #0
 801a64a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801a64c:	4b15      	ldr	r3, [pc, #84]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a64e:	2200      	movs	r2, #0
 801a650:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801a652:	4b14      	ldr	r3, [pc, #80]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a654:	2200      	movs	r2, #0
 801a656:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801a658:	4b12      	ldr	r3, [pc, #72]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a65a:	2200      	movs	r2, #0
 801a65c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801a65e:	4b11      	ldr	r3, [pc, #68]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a660:	2200      	movs	r2, #0
 801a662:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801a664:	4b0f      	ldr	r3, [pc, #60]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a666:	2200      	movs	r2, #0
 801a668:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801a66a:	480e      	ldr	r0, [pc, #56]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a66c:	f7ee fb55 	bl	8008d1a <HAL_PCD_Init>
 801a670:	4603      	mov	r3, r0
 801a672:	2b00      	cmp	r3, #0
 801a674:	d001      	beq.n	801a67a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801a676:	f7e8 fa41 	bl	8002afc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801a67a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a67e:	4809      	ldr	r0, [pc, #36]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a680:	f7ef fdc3 	bl	800a20a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801a684:	2280      	movs	r2, #128	; 0x80
 801a686:	2100      	movs	r1, #0
 801a688:	4806      	ldr	r0, [pc, #24]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a68a:	f7ef fd77 	bl	800a17c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801a68e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801a692:	2101      	movs	r1, #1
 801a694:	4803      	ldr	r0, [pc, #12]	; (801a6a4 <USBD_LL_Init+0x9c>)
 801a696:	f7ef fd71 	bl	800a17c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801a69a:	2300      	movs	r3, #0
}
 801a69c:	4618      	mov	r0, r3
 801a69e:	3708      	adds	r7, #8
 801a6a0:	46bd      	mov	sp, r7
 801a6a2:	bd80      	pop	{r7, pc}
 801a6a4:	24002c40 	.word	0x24002c40
 801a6a8:	40040000 	.word	0x40040000

0801a6ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a6ac:	b580      	push	{r7, lr}
 801a6ae:	b084      	sub	sp, #16
 801a6b0:	af00      	add	r7, sp, #0
 801a6b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	f7ee fc4d 	bl	8008f62 <HAL_PCD_Start>
 801a6c8:	4603      	mov	r3, r0
 801a6ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a6cc:	7bfb      	ldrb	r3, [r7, #15]
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	f000 f942 	bl	801a958 <USBD_Get_USB_Status>
 801a6d4:	4603      	mov	r3, r0
 801a6d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a6d8:	7bbb      	ldrb	r3, [r7, #14]
}
 801a6da:	4618      	mov	r0, r3
 801a6dc:	3710      	adds	r7, #16
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	bd80      	pop	{r7, pc}

0801a6e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a6e2:	b580      	push	{r7, lr}
 801a6e4:	b084      	sub	sp, #16
 801a6e6:	af00      	add	r7, sp, #0
 801a6e8:	6078      	str	r0, [r7, #4]
 801a6ea:	4608      	mov	r0, r1
 801a6ec:	4611      	mov	r1, r2
 801a6ee:	461a      	mov	r2, r3
 801a6f0:	4603      	mov	r3, r0
 801a6f2:	70fb      	strb	r3, [r7, #3]
 801a6f4:	460b      	mov	r3, r1
 801a6f6:	70bb      	strb	r3, [r7, #2]
 801a6f8:	4613      	mov	r3, r2
 801a6fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6fc:	2300      	movs	r3, #0
 801a6fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a700:	2300      	movs	r3, #0
 801a702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a70a:	78bb      	ldrb	r3, [r7, #2]
 801a70c:	883a      	ldrh	r2, [r7, #0]
 801a70e:	78f9      	ldrb	r1, [r7, #3]
 801a710:	f7ef f94d 	bl	80099ae <HAL_PCD_EP_Open>
 801a714:	4603      	mov	r3, r0
 801a716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a718:	7bfb      	ldrb	r3, [r7, #15]
 801a71a:	4618      	mov	r0, r3
 801a71c:	f000 f91c 	bl	801a958 <USBD_Get_USB_Status>
 801a720:	4603      	mov	r3, r0
 801a722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a724:	7bbb      	ldrb	r3, [r7, #14]
}
 801a726:	4618      	mov	r0, r3
 801a728:	3710      	adds	r7, #16
 801a72a:	46bd      	mov	sp, r7
 801a72c:	bd80      	pop	{r7, pc}

0801a72e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a72e:	b580      	push	{r7, lr}
 801a730:	b084      	sub	sp, #16
 801a732:	af00      	add	r7, sp, #0
 801a734:	6078      	str	r0, [r7, #4]
 801a736:	460b      	mov	r3, r1
 801a738:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a73a:	2300      	movs	r3, #0
 801a73c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a73e:	2300      	movs	r3, #0
 801a740:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a748:	78fa      	ldrb	r2, [r7, #3]
 801a74a:	4611      	mov	r1, r2
 801a74c:	4618      	mov	r0, r3
 801a74e:	f7ef f996 	bl	8009a7e <HAL_PCD_EP_Close>
 801a752:	4603      	mov	r3, r0
 801a754:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a756:	7bfb      	ldrb	r3, [r7, #15]
 801a758:	4618      	mov	r0, r3
 801a75a:	f000 f8fd 	bl	801a958 <USBD_Get_USB_Status>
 801a75e:	4603      	mov	r3, r0
 801a760:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a762:	7bbb      	ldrb	r3, [r7, #14]
}
 801a764:	4618      	mov	r0, r3
 801a766:	3710      	adds	r7, #16
 801a768:	46bd      	mov	sp, r7
 801a76a:	bd80      	pop	{r7, pc}

0801a76c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a76c:	b580      	push	{r7, lr}
 801a76e:	b084      	sub	sp, #16
 801a770:	af00      	add	r7, sp, #0
 801a772:	6078      	str	r0, [r7, #4]
 801a774:	460b      	mov	r3, r1
 801a776:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a778:	2300      	movs	r3, #0
 801a77a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a77c:	2300      	movs	r3, #0
 801a77e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a786:	78fa      	ldrb	r2, [r7, #3]
 801a788:	4611      	mov	r1, r2
 801a78a:	4618      	mov	r0, r3
 801a78c:	f7ef fa50 	bl	8009c30 <HAL_PCD_EP_SetStall>
 801a790:	4603      	mov	r3, r0
 801a792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a794:	7bfb      	ldrb	r3, [r7, #15]
 801a796:	4618      	mov	r0, r3
 801a798:	f000 f8de 	bl	801a958 <USBD_Get_USB_Status>
 801a79c:	4603      	mov	r3, r0
 801a79e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a7a0:	7bbb      	ldrb	r3, [r7, #14]
}
 801a7a2:	4618      	mov	r0, r3
 801a7a4:	3710      	adds	r7, #16
 801a7a6:	46bd      	mov	sp, r7
 801a7a8:	bd80      	pop	{r7, pc}

0801a7aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a7aa:	b580      	push	{r7, lr}
 801a7ac:	b084      	sub	sp, #16
 801a7ae:	af00      	add	r7, sp, #0
 801a7b0:	6078      	str	r0, [r7, #4]
 801a7b2:	460b      	mov	r3, r1
 801a7b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a7ba:	2300      	movs	r3, #0
 801a7bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a7c4:	78fa      	ldrb	r2, [r7, #3]
 801a7c6:	4611      	mov	r1, r2
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	f7ef fa95 	bl	8009cf8 <HAL_PCD_EP_ClrStall>
 801a7ce:	4603      	mov	r3, r0
 801a7d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a7d2:	7bfb      	ldrb	r3, [r7, #15]
 801a7d4:	4618      	mov	r0, r3
 801a7d6:	f000 f8bf 	bl	801a958 <USBD_Get_USB_Status>
 801a7da:	4603      	mov	r3, r0
 801a7dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a7de:	7bbb      	ldrb	r3, [r7, #14]
}
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	3710      	adds	r7, #16
 801a7e4:	46bd      	mov	sp, r7
 801a7e6:	bd80      	pop	{r7, pc}

0801a7e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a7e8:	b480      	push	{r7}
 801a7ea:	b085      	sub	sp, #20
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	6078      	str	r0, [r7, #4]
 801a7f0:	460b      	mov	r3, r1
 801a7f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a7fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a7fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a800:	2b00      	cmp	r3, #0
 801a802:	da0b      	bge.n	801a81c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a804:	78fb      	ldrb	r3, [r7, #3]
 801a806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a80a:	68f9      	ldr	r1, [r7, #12]
 801a80c:	4613      	mov	r3, r2
 801a80e:	00db      	lsls	r3, r3, #3
 801a810:	4413      	add	r3, r2
 801a812:	009b      	lsls	r3, r3, #2
 801a814:	440b      	add	r3, r1
 801a816:	333e      	adds	r3, #62	; 0x3e
 801a818:	781b      	ldrb	r3, [r3, #0]
 801a81a:	e00b      	b.n	801a834 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a81c:	78fb      	ldrb	r3, [r7, #3]
 801a81e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a822:	68f9      	ldr	r1, [r7, #12]
 801a824:	4613      	mov	r3, r2
 801a826:	00db      	lsls	r3, r3, #3
 801a828:	4413      	add	r3, r2
 801a82a:	009b      	lsls	r3, r3, #2
 801a82c:	440b      	add	r3, r1
 801a82e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801a832:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a834:	4618      	mov	r0, r3
 801a836:	3714      	adds	r7, #20
 801a838:	46bd      	mov	sp, r7
 801a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a83e:	4770      	bx	lr

0801a840 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b084      	sub	sp, #16
 801a844:	af00      	add	r7, sp, #0
 801a846:	6078      	str	r0, [r7, #4]
 801a848:	460b      	mov	r3, r1
 801a84a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a84c:	2300      	movs	r3, #0
 801a84e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a850:	2300      	movs	r3, #0
 801a852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a85a:	78fa      	ldrb	r2, [r7, #3]
 801a85c:	4611      	mov	r1, r2
 801a85e:	4618      	mov	r0, r3
 801a860:	f7ef f880 	bl	8009964 <HAL_PCD_SetAddress>
 801a864:	4603      	mov	r3, r0
 801a866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a868:	7bfb      	ldrb	r3, [r7, #15]
 801a86a:	4618      	mov	r0, r3
 801a86c:	f000 f874 	bl	801a958 <USBD_Get_USB_Status>
 801a870:	4603      	mov	r3, r0
 801a872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a874:	7bbb      	ldrb	r3, [r7, #14]
}
 801a876:	4618      	mov	r0, r3
 801a878:	3710      	adds	r7, #16
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd80      	pop	{r7, pc}

0801a87e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a87e:	b580      	push	{r7, lr}
 801a880:	b086      	sub	sp, #24
 801a882:	af00      	add	r7, sp, #0
 801a884:	60f8      	str	r0, [r7, #12]
 801a886:	607a      	str	r2, [r7, #4]
 801a888:	603b      	str	r3, [r7, #0]
 801a88a:	460b      	mov	r3, r1
 801a88c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a88e:	2300      	movs	r3, #0
 801a890:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a892:	2300      	movs	r3, #0
 801a894:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a89c:	7af9      	ldrb	r1, [r7, #11]
 801a89e:	683b      	ldr	r3, [r7, #0]
 801a8a0:	687a      	ldr	r2, [r7, #4]
 801a8a2:	f7ef f98a 	bl	8009bba <HAL_PCD_EP_Transmit>
 801a8a6:	4603      	mov	r3, r0
 801a8a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a8aa:	7dfb      	ldrb	r3, [r7, #23]
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	f000 f853 	bl	801a958 <USBD_Get_USB_Status>
 801a8b2:	4603      	mov	r3, r0
 801a8b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a8b6:	7dbb      	ldrb	r3, [r7, #22]
}
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	3718      	adds	r7, #24
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	bd80      	pop	{r7, pc}

0801a8c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b086      	sub	sp, #24
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	60f8      	str	r0, [r7, #12]
 801a8c8:	607a      	str	r2, [r7, #4]
 801a8ca:	603b      	str	r3, [r7, #0]
 801a8cc:	460b      	mov	r3, r1
 801a8ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a8d0:	2300      	movs	r3, #0
 801a8d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801a8de:	7af9      	ldrb	r1, [r7, #11]
 801a8e0:	683b      	ldr	r3, [r7, #0]
 801a8e2:	687a      	ldr	r2, [r7, #4]
 801a8e4:	f7ef f915 	bl	8009b12 <HAL_PCD_EP_Receive>
 801a8e8:	4603      	mov	r3, r0
 801a8ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a8ec:	7dfb      	ldrb	r3, [r7, #23]
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	f000 f832 	bl	801a958 <USBD_Get_USB_Status>
 801a8f4:	4603      	mov	r3, r0
 801a8f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a8f8:	7dbb      	ldrb	r3, [r7, #22]
}
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	3718      	adds	r7, #24
 801a8fe:	46bd      	mov	sp, r7
 801a900:	bd80      	pop	{r7, pc}

0801a902 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a902:	b580      	push	{r7, lr}
 801a904:	b082      	sub	sp, #8
 801a906:	af00      	add	r7, sp, #0
 801a908:	6078      	str	r0, [r7, #4]
 801a90a:	460b      	mov	r3, r1
 801a90c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a914:	78fa      	ldrb	r2, [r7, #3]
 801a916:	4611      	mov	r1, r2
 801a918:	4618      	mov	r0, r3
 801a91a:	f7ef f936 	bl	8009b8a <HAL_PCD_EP_GetRxCount>
 801a91e:	4603      	mov	r3, r0
}
 801a920:	4618      	mov	r0, r3
 801a922:	3708      	adds	r7, #8
 801a924:	46bd      	mov	sp, r7
 801a926:	bd80      	pop	{r7, pc}

0801a928 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a928:	b480      	push	{r7}
 801a92a:	b083      	sub	sp, #12
 801a92c:	af00      	add	r7, sp, #0
 801a92e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a930:	4b03      	ldr	r3, [pc, #12]	; (801a940 <USBD_static_malloc+0x18>)
}
 801a932:	4618      	mov	r0, r3
 801a934:	370c      	adds	r7, #12
 801a936:	46bd      	mov	sp, r7
 801a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a93c:	4770      	bx	lr
 801a93e:	bf00      	nop
 801a940:	2400314c 	.word	0x2400314c

0801a944 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a944:	b480      	push	{r7}
 801a946:	b083      	sub	sp, #12
 801a948:	af00      	add	r7, sp, #0
 801a94a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801a94c:	bf00      	nop
 801a94e:	370c      	adds	r7, #12
 801a950:	46bd      	mov	sp, r7
 801a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a956:	4770      	bx	lr

0801a958 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a958:	b480      	push	{r7}
 801a95a:	b085      	sub	sp, #20
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	4603      	mov	r3, r0
 801a960:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a962:	2300      	movs	r3, #0
 801a964:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a966:	79fb      	ldrb	r3, [r7, #7]
 801a968:	2b03      	cmp	r3, #3
 801a96a:	d817      	bhi.n	801a99c <USBD_Get_USB_Status+0x44>
 801a96c:	a201      	add	r2, pc, #4	; (adr r2, 801a974 <USBD_Get_USB_Status+0x1c>)
 801a96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a972:	bf00      	nop
 801a974:	0801a985 	.word	0x0801a985
 801a978:	0801a98b 	.word	0x0801a98b
 801a97c:	0801a991 	.word	0x0801a991
 801a980:	0801a997 	.word	0x0801a997
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a984:	2300      	movs	r3, #0
 801a986:	73fb      	strb	r3, [r7, #15]
    break;
 801a988:	e00b      	b.n	801a9a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a98a:	2303      	movs	r3, #3
 801a98c:	73fb      	strb	r3, [r7, #15]
    break;
 801a98e:	e008      	b.n	801a9a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a990:	2301      	movs	r3, #1
 801a992:	73fb      	strb	r3, [r7, #15]
    break;
 801a994:	e005      	b.n	801a9a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a996:	2303      	movs	r3, #3
 801a998:	73fb      	strb	r3, [r7, #15]
    break;
 801a99a:	e002      	b.n	801a9a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a99c:	2303      	movs	r3, #3
 801a99e:	73fb      	strb	r3, [r7, #15]
    break;
 801a9a0:	bf00      	nop
  }
  return usb_status;
 801a9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	3714      	adds	r7, #20
 801a9a8:	46bd      	mov	sp, r7
 801a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ae:	4770      	bx	lr

0801a9b0 <siprintf>:
 801a9b0:	b40e      	push	{r1, r2, r3}
 801a9b2:	b500      	push	{lr}
 801a9b4:	b09c      	sub	sp, #112	; 0x70
 801a9b6:	ab1d      	add	r3, sp, #116	; 0x74
 801a9b8:	9002      	str	r0, [sp, #8]
 801a9ba:	9006      	str	r0, [sp, #24]
 801a9bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a9c0:	4809      	ldr	r0, [pc, #36]	; (801a9e8 <siprintf+0x38>)
 801a9c2:	9107      	str	r1, [sp, #28]
 801a9c4:	9104      	str	r1, [sp, #16]
 801a9c6:	4909      	ldr	r1, [pc, #36]	; (801a9ec <siprintf+0x3c>)
 801a9c8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9cc:	9105      	str	r1, [sp, #20]
 801a9ce:	6800      	ldr	r0, [r0, #0]
 801a9d0:	9301      	str	r3, [sp, #4]
 801a9d2:	a902      	add	r1, sp, #8
 801a9d4:	f000 f9d6 	bl	801ad84 <_svfiprintf_r>
 801a9d8:	9b02      	ldr	r3, [sp, #8]
 801a9da:	2200      	movs	r2, #0
 801a9dc:	701a      	strb	r2, [r3, #0]
 801a9de:	b01c      	add	sp, #112	; 0x70
 801a9e0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a9e4:	b003      	add	sp, #12
 801a9e6:	4770      	bx	lr
 801a9e8:	2400014c 	.word	0x2400014c
 801a9ec:	ffff0208 	.word	0xffff0208

0801a9f0 <siscanf>:
 801a9f0:	b40e      	push	{r1, r2, r3}
 801a9f2:	b510      	push	{r4, lr}
 801a9f4:	b09f      	sub	sp, #124	; 0x7c
 801a9f6:	ac21      	add	r4, sp, #132	; 0x84
 801a9f8:	f44f 7101 	mov.w	r1, #516	; 0x204
 801a9fc:	f854 2b04 	ldr.w	r2, [r4], #4
 801aa00:	9201      	str	r2, [sp, #4]
 801aa02:	f8ad 101c 	strh.w	r1, [sp, #28]
 801aa06:	9004      	str	r0, [sp, #16]
 801aa08:	9008      	str	r0, [sp, #32]
 801aa0a:	f7e5 fc8b 	bl	8000324 <strlen>
 801aa0e:	4b0c      	ldr	r3, [pc, #48]	; (801aa40 <siscanf+0x50>)
 801aa10:	9005      	str	r0, [sp, #20]
 801aa12:	9009      	str	r0, [sp, #36]	; 0x24
 801aa14:	930d      	str	r3, [sp, #52]	; 0x34
 801aa16:	480b      	ldr	r0, [pc, #44]	; (801aa44 <siscanf+0x54>)
 801aa18:	9a01      	ldr	r2, [sp, #4]
 801aa1a:	6800      	ldr	r0, [r0, #0]
 801aa1c:	9403      	str	r4, [sp, #12]
 801aa1e:	2300      	movs	r3, #0
 801aa20:	9311      	str	r3, [sp, #68]	; 0x44
 801aa22:	9316      	str	r3, [sp, #88]	; 0x58
 801aa24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa28:	f8ad 301e 	strh.w	r3, [sp, #30]
 801aa2c:	a904      	add	r1, sp, #16
 801aa2e:	4623      	mov	r3, r4
 801aa30:	f000 fb00 	bl	801b034 <__ssvfiscanf_r>
 801aa34:	b01f      	add	sp, #124	; 0x7c
 801aa36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa3a:	b003      	add	sp, #12
 801aa3c:	4770      	bx	lr
 801aa3e:	bf00      	nop
 801aa40:	0801aa49 	.word	0x0801aa49
 801aa44:	2400014c 	.word	0x2400014c

0801aa48 <__seofread>:
 801aa48:	2000      	movs	r0, #0
 801aa4a:	4770      	bx	lr

0801aa4c <memset>:
 801aa4c:	4402      	add	r2, r0
 801aa4e:	4603      	mov	r3, r0
 801aa50:	4293      	cmp	r3, r2
 801aa52:	d100      	bne.n	801aa56 <memset+0xa>
 801aa54:	4770      	bx	lr
 801aa56:	f803 1b01 	strb.w	r1, [r3], #1
 801aa5a:	e7f9      	b.n	801aa50 <memset+0x4>

0801aa5c <__errno>:
 801aa5c:	4b01      	ldr	r3, [pc, #4]	; (801aa64 <__errno+0x8>)
 801aa5e:	6818      	ldr	r0, [r3, #0]
 801aa60:	4770      	bx	lr
 801aa62:	bf00      	nop
 801aa64:	2400014c 	.word	0x2400014c

0801aa68 <__libc_init_array>:
 801aa68:	b570      	push	{r4, r5, r6, lr}
 801aa6a:	4d0d      	ldr	r5, [pc, #52]	; (801aaa0 <__libc_init_array+0x38>)
 801aa6c:	4c0d      	ldr	r4, [pc, #52]	; (801aaa4 <__libc_init_array+0x3c>)
 801aa6e:	1b64      	subs	r4, r4, r5
 801aa70:	10a4      	asrs	r4, r4, #2
 801aa72:	2600      	movs	r6, #0
 801aa74:	42a6      	cmp	r6, r4
 801aa76:	d109      	bne.n	801aa8c <__libc_init_array+0x24>
 801aa78:	4d0b      	ldr	r5, [pc, #44]	; (801aaa8 <__libc_init_array+0x40>)
 801aa7a:	4c0c      	ldr	r4, [pc, #48]	; (801aaac <__libc_init_array+0x44>)
 801aa7c:	f001 f8fe 	bl	801bc7c <_init>
 801aa80:	1b64      	subs	r4, r4, r5
 801aa82:	10a4      	asrs	r4, r4, #2
 801aa84:	2600      	movs	r6, #0
 801aa86:	42a6      	cmp	r6, r4
 801aa88:	d105      	bne.n	801aa96 <__libc_init_array+0x2e>
 801aa8a:	bd70      	pop	{r4, r5, r6, pc}
 801aa8c:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa90:	4798      	blx	r3
 801aa92:	3601      	adds	r6, #1
 801aa94:	e7ee      	b.n	801aa74 <__libc_init_array+0xc>
 801aa96:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa9a:	4798      	blx	r3
 801aa9c:	3601      	adds	r6, #1
 801aa9e:	e7f2      	b.n	801aa86 <__libc_init_array+0x1e>
 801aaa0:	0801c568 	.word	0x0801c568
 801aaa4:	0801c568 	.word	0x0801c568
 801aaa8:	0801c568 	.word	0x0801c568
 801aaac:	0801c56c 	.word	0x0801c56c

0801aab0 <__retarget_lock_acquire_recursive>:
 801aab0:	4770      	bx	lr

0801aab2 <__retarget_lock_release_recursive>:
 801aab2:	4770      	bx	lr

0801aab4 <strcpy>:
 801aab4:	4603      	mov	r3, r0
 801aab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aaba:	f803 2b01 	strb.w	r2, [r3], #1
 801aabe:	2a00      	cmp	r2, #0
 801aac0:	d1f9      	bne.n	801aab6 <strcpy+0x2>
 801aac2:	4770      	bx	lr

0801aac4 <memcpy>:
 801aac4:	440a      	add	r2, r1
 801aac6:	4291      	cmp	r1, r2
 801aac8:	f100 33ff 	add.w	r3, r0, #4294967295
 801aacc:	d100      	bne.n	801aad0 <memcpy+0xc>
 801aace:	4770      	bx	lr
 801aad0:	b510      	push	{r4, lr}
 801aad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aada:	4291      	cmp	r1, r2
 801aadc:	d1f9      	bne.n	801aad2 <memcpy+0xe>
 801aade:	bd10      	pop	{r4, pc}

0801aae0 <_free_r>:
 801aae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aae2:	2900      	cmp	r1, #0
 801aae4:	d044      	beq.n	801ab70 <_free_r+0x90>
 801aae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aaea:	9001      	str	r0, [sp, #4]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	f1a1 0404 	sub.w	r4, r1, #4
 801aaf2:	bfb8      	it	lt
 801aaf4:	18e4      	addlt	r4, r4, r3
 801aaf6:	f000 f8df 	bl	801acb8 <__malloc_lock>
 801aafa:	4a1e      	ldr	r2, [pc, #120]	; (801ab74 <_free_r+0x94>)
 801aafc:	9801      	ldr	r0, [sp, #4]
 801aafe:	6813      	ldr	r3, [r2, #0]
 801ab00:	b933      	cbnz	r3, 801ab10 <_free_r+0x30>
 801ab02:	6063      	str	r3, [r4, #4]
 801ab04:	6014      	str	r4, [r2, #0]
 801ab06:	b003      	add	sp, #12
 801ab08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ab0c:	f000 b8da 	b.w	801acc4 <__malloc_unlock>
 801ab10:	42a3      	cmp	r3, r4
 801ab12:	d908      	bls.n	801ab26 <_free_r+0x46>
 801ab14:	6825      	ldr	r5, [r4, #0]
 801ab16:	1961      	adds	r1, r4, r5
 801ab18:	428b      	cmp	r3, r1
 801ab1a:	bf01      	itttt	eq
 801ab1c:	6819      	ldreq	r1, [r3, #0]
 801ab1e:	685b      	ldreq	r3, [r3, #4]
 801ab20:	1949      	addeq	r1, r1, r5
 801ab22:	6021      	streq	r1, [r4, #0]
 801ab24:	e7ed      	b.n	801ab02 <_free_r+0x22>
 801ab26:	461a      	mov	r2, r3
 801ab28:	685b      	ldr	r3, [r3, #4]
 801ab2a:	b10b      	cbz	r3, 801ab30 <_free_r+0x50>
 801ab2c:	42a3      	cmp	r3, r4
 801ab2e:	d9fa      	bls.n	801ab26 <_free_r+0x46>
 801ab30:	6811      	ldr	r1, [r2, #0]
 801ab32:	1855      	adds	r5, r2, r1
 801ab34:	42a5      	cmp	r5, r4
 801ab36:	d10b      	bne.n	801ab50 <_free_r+0x70>
 801ab38:	6824      	ldr	r4, [r4, #0]
 801ab3a:	4421      	add	r1, r4
 801ab3c:	1854      	adds	r4, r2, r1
 801ab3e:	42a3      	cmp	r3, r4
 801ab40:	6011      	str	r1, [r2, #0]
 801ab42:	d1e0      	bne.n	801ab06 <_free_r+0x26>
 801ab44:	681c      	ldr	r4, [r3, #0]
 801ab46:	685b      	ldr	r3, [r3, #4]
 801ab48:	6053      	str	r3, [r2, #4]
 801ab4a:	440c      	add	r4, r1
 801ab4c:	6014      	str	r4, [r2, #0]
 801ab4e:	e7da      	b.n	801ab06 <_free_r+0x26>
 801ab50:	d902      	bls.n	801ab58 <_free_r+0x78>
 801ab52:	230c      	movs	r3, #12
 801ab54:	6003      	str	r3, [r0, #0]
 801ab56:	e7d6      	b.n	801ab06 <_free_r+0x26>
 801ab58:	6825      	ldr	r5, [r4, #0]
 801ab5a:	1961      	adds	r1, r4, r5
 801ab5c:	428b      	cmp	r3, r1
 801ab5e:	bf04      	itt	eq
 801ab60:	6819      	ldreq	r1, [r3, #0]
 801ab62:	685b      	ldreq	r3, [r3, #4]
 801ab64:	6063      	str	r3, [r4, #4]
 801ab66:	bf04      	itt	eq
 801ab68:	1949      	addeq	r1, r1, r5
 801ab6a:	6021      	streq	r1, [r4, #0]
 801ab6c:	6054      	str	r4, [r2, #4]
 801ab6e:	e7ca      	b.n	801ab06 <_free_r+0x26>
 801ab70:	b003      	add	sp, #12
 801ab72:	bd30      	pop	{r4, r5, pc}
 801ab74:	240034ac 	.word	0x240034ac

0801ab78 <sbrk_aligned>:
 801ab78:	b570      	push	{r4, r5, r6, lr}
 801ab7a:	4e0e      	ldr	r6, [pc, #56]	; (801abb4 <sbrk_aligned+0x3c>)
 801ab7c:	460c      	mov	r4, r1
 801ab7e:	6831      	ldr	r1, [r6, #0]
 801ab80:	4605      	mov	r5, r0
 801ab82:	b911      	cbnz	r1, 801ab8a <sbrk_aligned+0x12>
 801ab84:	f000 ff3a 	bl	801b9fc <_sbrk_r>
 801ab88:	6030      	str	r0, [r6, #0]
 801ab8a:	4621      	mov	r1, r4
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	f000 ff35 	bl	801b9fc <_sbrk_r>
 801ab92:	1c43      	adds	r3, r0, #1
 801ab94:	d00a      	beq.n	801abac <sbrk_aligned+0x34>
 801ab96:	1cc4      	adds	r4, r0, #3
 801ab98:	f024 0403 	bic.w	r4, r4, #3
 801ab9c:	42a0      	cmp	r0, r4
 801ab9e:	d007      	beq.n	801abb0 <sbrk_aligned+0x38>
 801aba0:	1a21      	subs	r1, r4, r0
 801aba2:	4628      	mov	r0, r5
 801aba4:	f000 ff2a 	bl	801b9fc <_sbrk_r>
 801aba8:	3001      	adds	r0, #1
 801abaa:	d101      	bne.n	801abb0 <sbrk_aligned+0x38>
 801abac:	f04f 34ff 	mov.w	r4, #4294967295
 801abb0:	4620      	mov	r0, r4
 801abb2:	bd70      	pop	{r4, r5, r6, pc}
 801abb4:	240034b0 	.word	0x240034b0

0801abb8 <_malloc_r>:
 801abb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abbc:	1ccd      	adds	r5, r1, #3
 801abbe:	f025 0503 	bic.w	r5, r5, #3
 801abc2:	3508      	adds	r5, #8
 801abc4:	2d0c      	cmp	r5, #12
 801abc6:	bf38      	it	cc
 801abc8:	250c      	movcc	r5, #12
 801abca:	2d00      	cmp	r5, #0
 801abcc:	4607      	mov	r7, r0
 801abce:	db01      	blt.n	801abd4 <_malloc_r+0x1c>
 801abd0:	42a9      	cmp	r1, r5
 801abd2:	d905      	bls.n	801abe0 <_malloc_r+0x28>
 801abd4:	230c      	movs	r3, #12
 801abd6:	603b      	str	r3, [r7, #0]
 801abd8:	2600      	movs	r6, #0
 801abda:	4630      	mov	r0, r6
 801abdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801abe0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801acb4 <_malloc_r+0xfc>
 801abe4:	f000 f868 	bl	801acb8 <__malloc_lock>
 801abe8:	f8d8 3000 	ldr.w	r3, [r8]
 801abec:	461c      	mov	r4, r3
 801abee:	bb5c      	cbnz	r4, 801ac48 <_malloc_r+0x90>
 801abf0:	4629      	mov	r1, r5
 801abf2:	4638      	mov	r0, r7
 801abf4:	f7ff ffc0 	bl	801ab78 <sbrk_aligned>
 801abf8:	1c43      	adds	r3, r0, #1
 801abfa:	4604      	mov	r4, r0
 801abfc:	d155      	bne.n	801acaa <_malloc_r+0xf2>
 801abfe:	f8d8 4000 	ldr.w	r4, [r8]
 801ac02:	4626      	mov	r6, r4
 801ac04:	2e00      	cmp	r6, #0
 801ac06:	d145      	bne.n	801ac94 <_malloc_r+0xdc>
 801ac08:	2c00      	cmp	r4, #0
 801ac0a:	d048      	beq.n	801ac9e <_malloc_r+0xe6>
 801ac0c:	6823      	ldr	r3, [r4, #0]
 801ac0e:	4631      	mov	r1, r6
 801ac10:	4638      	mov	r0, r7
 801ac12:	eb04 0903 	add.w	r9, r4, r3
 801ac16:	f000 fef1 	bl	801b9fc <_sbrk_r>
 801ac1a:	4581      	cmp	r9, r0
 801ac1c:	d13f      	bne.n	801ac9e <_malloc_r+0xe6>
 801ac1e:	6821      	ldr	r1, [r4, #0]
 801ac20:	1a6d      	subs	r5, r5, r1
 801ac22:	4629      	mov	r1, r5
 801ac24:	4638      	mov	r0, r7
 801ac26:	f7ff ffa7 	bl	801ab78 <sbrk_aligned>
 801ac2a:	3001      	adds	r0, #1
 801ac2c:	d037      	beq.n	801ac9e <_malloc_r+0xe6>
 801ac2e:	6823      	ldr	r3, [r4, #0]
 801ac30:	442b      	add	r3, r5
 801ac32:	6023      	str	r3, [r4, #0]
 801ac34:	f8d8 3000 	ldr.w	r3, [r8]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d038      	beq.n	801acae <_malloc_r+0xf6>
 801ac3c:	685a      	ldr	r2, [r3, #4]
 801ac3e:	42a2      	cmp	r2, r4
 801ac40:	d12b      	bne.n	801ac9a <_malloc_r+0xe2>
 801ac42:	2200      	movs	r2, #0
 801ac44:	605a      	str	r2, [r3, #4]
 801ac46:	e00f      	b.n	801ac68 <_malloc_r+0xb0>
 801ac48:	6822      	ldr	r2, [r4, #0]
 801ac4a:	1b52      	subs	r2, r2, r5
 801ac4c:	d41f      	bmi.n	801ac8e <_malloc_r+0xd6>
 801ac4e:	2a0b      	cmp	r2, #11
 801ac50:	d917      	bls.n	801ac82 <_malloc_r+0xca>
 801ac52:	1961      	adds	r1, r4, r5
 801ac54:	42a3      	cmp	r3, r4
 801ac56:	6025      	str	r5, [r4, #0]
 801ac58:	bf18      	it	ne
 801ac5a:	6059      	strne	r1, [r3, #4]
 801ac5c:	6863      	ldr	r3, [r4, #4]
 801ac5e:	bf08      	it	eq
 801ac60:	f8c8 1000 	streq.w	r1, [r8]
 801ac64:	5162      	str	r2, [r4, r5]
 801ac66:	604b      	str	r3, [r1, #4]
 801ac68:	4638      	mov	r0, r7
 801ac6a:	f104 060b 	add.w	r6, r4, #11
 801ac6e:	f000 f829 	bl	801acc4 <__malloc_unlock>
 801ac72:	f026 0607 	bic.w	r6, r6, #7
 801ac76:	1d23      	adds	r3, r4, #4
 801ac78:	1af2      	subs	r2, r6, r3
 801ac7a:	d0ae      	beq.n	801abda <_malloc_r+0x22>
 801ac7c:	1b9b      	subs	r3, r3, r6
 801ac7e:	50a3      	str	r3, [r4, r2]
 801ac80:	e7ab      	b.n	801abda <_malloc_r+0x22>
 801ac82:	42a3      	cmp	r3, r4
 801ac84:	6862      	ldr	r2, [r4, #4]
 801ac86:	d1dd      	bne.n	801ac44 <_malloc_r+0x8c>
 801ac88:	f8c8 2000 	str.w	r2, [r8]
 801ac8c:	e7ec      	b.n	801ac68 <_malloc_r+0xb0>
 801ac8e:	4623      	mov	r3, r4
 801ac90:	6864      	ldr	r4, [r4, #4]
 801ac92:	e7ac      	b.n	801abee <_malloc_r+0x36>
 801ac94:	4634      	mov	r4, r6
 801ac96:	6876      	ldr	r6, [r6, #4]
 801ac98:	e7b4      	b.n	801ac04 <_malloc_r+0x4c>
 801ac9a:	4613      	mov	r3, r2
 801ac9c:	e7cc      	b.n	801ac38 <_malloc_r+0x80>
 801ac9e:	230c      	movs	r3, #12
 801aca0:	603b      	str	r3, [r7, #0]
 801aca2:	4638      	mov	r0, r7
 801aca4:	f000 f80e 	bl	801acc4 <__malloc_unlock>
 801aca8:	e797      	b.n	801abda <_malloc_r+0x22>
 801acaa:	6025      	str	r5, [r4, #0]
 801acac:	e7dc      	b.n	801ac68 <_malloc_r+0xb0>
 801acae:	605b      	str	r3, [r3, #4]
 801acb0:	deff      	udf	#255	; 0xff
 801acb2:	bf00      	nop
 801acb4:	240034ac 	.word	0x240034ac

0801acb8 <__malloc_lock>:
 801acb8:	4801      	ldr	r0, [pc, #4]	; (801acc0 <__malloc_lock+0x8>)
 801acba:	f7ff bef9 	b.w	801aab0 <__retarget_lock_acquire_recursive>
 801acbe:	bf00      	nop
 801acc0:	240034a8 	.word	0x240034a8

0801acc4 <__malloc_unlock>:
 801acc4:	4801      	ldr	r0, [pc, #4]	; (801accc <__malloc_unlock+0x8>)
 801acc6:	f7ff bef4 	b.w	801aab2 <__retarget_lock_release_recursive>
 801acca:	bf00      	nop
 801accc:	240034a8 	.word	0x240034a8

0801acd0 <__ssputs_r>:
 801acd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acd4:	688e      	ldr	r6, [r1, #8]
 801acd6:	461f      	mov	r7, r3
 801acd8:	42be      	cmp	r6, r7
 801acda:	680b      	ldr	r3, [r1, #0]
 801acdc:	4682      	mov	sl, r0
 801acde:	460c      	mov	r4, r1
 801ace0:	4690      	mov	r8, r2
 801ace2:	d82c      	bhi.n	801ad3e <__ssputs_r+0x6e>
 801ace4:	898a      	ldrh	r2, [r1, #12]
 801ace6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801acea:	d026      	beq.n	801ad3a <__ssputs_r+0x6a>
 801acec:	6965      	ldr	r5, [r4, #20]
 801acee:	6909      	ldr	r1, [r1, #16]
 801acf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801acf4:	eba3 0901 	sub.w	r9, r3, r1
 801acf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801acfc:	1c7b      	adds	r3, r7, #1
 801acfe:	444b      	add	r3, r9
 801ad00:	106d      	asrs	r5, r5, #1
 801ad02:	429d      	cmp	r5, r3
 801ad04:	bf38      	it	cc
 801ad06:	461d      	movcc	r5, r3
 801ad08:	0553      	lsls	r3, r2, #21
 801ad0a:	d527      	bpl.n	801ad5c <__ssputs_r+0x8c>
 801ad0c:	4629      	mov	r1, r5
 801ad0e:	f7ff ff53 	bl	801abb8 <_malloc_r>
 801ad12:	4606      	mov	r6, r0
 801ad14:	b360      	cbz	r0, 801ad70 <__ssputs_r+0xa0>
 801ad16:	6921      	ldr	r1, [r4, #16]
 801ad18:	464a      	mov	r2, r9
 801ad1a:	f7ff fed3 	bl	801aac4 <memcpy>
 801ad1e:	89a3      	ldrh	r3, [r4, #12]
 801ad20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ad24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad28:	81a3      	strh	r3, [r4, #12]
 801ad2a:	6126      	str	r6, [r4, #16]
 801ad2c:	6165      	str	r5, [r4, #20]
 801ad2e:	444e      	add	r6, r9
 801ad30:	eba5 0509 	sub.w	r5, r5, r9
 801ad34:	6026      	str	r6, [r4, #0]
 801ad36:	60a5      	str	r5, [r4, #8]
 801ad38:	463e      	mov	r6, r7
 801ad3a:	42be      	cmp	r6, r7
 801ad3c:	d900      	bls.n	801ad40 <__ssputs_r+0x70>
 801ad3e:	463e      	mov	r6, r7
 801ad40:	6820      	ldr	r0, [r4, #0]
 801ad42:	4632      	mov	r2, r6
 801ad44:	4641      	mov	r1, r8
 801ad46:	f000 fe3e 	bl	801b9c6 <memmove>
 801ad4a:	68a3      	ldr	r3, [r4, #8]
 801ad4c:	1b9b      	subs	r3, r3, r6
 801ad4e:	60a3      	str	r3, [r4, #8]
 801ad50:	6823      	ldr	r3, [r4, #0]
 801ad52:	4433      	add	r3, r6
 801ad54:	6023      	str	r3, [r4, #0]
 801ad56:	2000      	movs	r0, #0
 801ad58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad5c:	462a      	mov	r2, r5
 801ad5e:	f000 fe5d 	bl	801ba1c <_realloc_r>
 801ad62:	4606      	mov	r6, r0
 801ad64:	2800      	cmp	r0, #0
 801ad66:	d1e0      	bne.n	801ad2a <__ssputs_r+0x5a>
 801ad68:	6921      	ldr	r1, [r4, #16]
 801ad6a:	4650      	mov	r0, sl
 801ad6c:	f7ff feb8 	bl	801aae0 <_free_r>
 801ad70:	230c      	movs	r3, #12
 801ad72:	f8ca 3000 	str.w	r3, [sl]
 801ad76:	89a3      	ldrh	r3, [r4, #12]
 801ad78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad7c:	81a3      	strh	r3, [r4, #12]
 801ad7e:	f04f 30ff 	mov.w	r0, #4294967295
 801ad82:	e7e9      	b.n	801ad58 <__ssputs_r+0x88>

0801ad84 <_svfiprintf_r>:
 801ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad88:	4698      	mov	r8, r3
 801ad8a:	898b      	ldrh	r3, [r1, #12]
 801ad8c:	061b      	lsls	r3, r3, #24
 801ad8e:	b09d      	sub	sp, #116	; 0x74
 801ad90:	4607      	mov	r7, r0
 801ad92:	460d      	mov	r5, r1
 801ad94:	4614      	mov	r4, r2
 801ad96:	d50e      	bpl.n	801adb6 <_svfiprintf_r+0x32>
 801ad98:	690b      	ldr	r3, [r1, #16]
 801ad9a:	b963      	cbnz	r3, 801adb6 <_svfiprintf_r+0x32>
 801ad9c:	2140      	movs	r1, #64	; 0x40
 801ad9e:	f7ff ff0b 	bl	801abb8 <_malloc_r>
 801ada2:	6028      	str	r0, [r5, #0]
 801ada4:	6128      	str	r0, [r5, #16]
 801ada6:	b920      	cbnz	r0, 801adb2 <_svfiprintf_r+0x2e>
 801ada8:	230c      	movs	r3, #12
 801adaa:	603b      	str	r3, [r7, #0]
 801adac:	f04f 30ff 	mov.w	r0, #4294967295
 801adb0:	e0d0      	b.n	801af54 <_svfiprintf_r+0x1d0>
 801adb2:	2340      	movs	r3, #64	; 0x40
 801adb4:	616b      	str	r3, [r5, #20]
 801adb6:	2300      	movs	r3, #0
 801adb8:	9309      	str	r3, [sp, #36]	; 0x24
 801adba:	2320      	movs	r3, #32
 801adbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801adc0:	f8cd 800c 	str.w	r8, [sp, #12]
 801adc4:	2330      	movs	r3, #48	; 0x30
 801adc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801af6c <_svfiprintf_r+0x1e8>
 801adca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801adce:	f04f 0901 	mov.w	r9, #1
 801add2:	4623      	mov	r3, r4
 801add4:	469a      	mov	sl, r3
 801add6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801adda:	b10a      	cbz	r2, 801ade0 <_svfiprintf_r+0x5c>
 801addc:	2a25      	cmp	r2, #37	; 0x25
 801adde:	d1f9      	bne.n	801add4 <_svfiprintf_r+0x50>
 801ade0:	ebba 0b04 	subs.w	fp, sl, r4
 801ade4:	d00b      	beq.n	801adfe <_svfiprintf_r+0x7a>
 801ade6:	465b      	mov	r3, fp
 801ade8:	4622      	mov	r2, r4
 801adea:	4629      	mov	r1, r5
 801adec:	4638      	mov	r0, r7
 801adee:	f7ff ff6f 	bl	801acd0 <__ssputs_r>
 801adf2:	3001      	adds	r0, #1
 801adf4:	f000 80a9 	beq.w	801af4a <_svfiprintf_r+0x1c6>
 801adf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801adfa:	445a      	add	r2, fp
 801adfc:	9209      	str	r2, [sp, #36]	; 0x24
 801adfe:	f89a 3000 	ldrb.w	r3, [sl]
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	f000 80a1 	beq.w	801af4a <_svfiprintf_r+0x1c6>
 801ae08:	2300      	movs	r3, #0
 801ae0a:	f04f 32ff 	mov.w	r2, #4294967295
 801ae0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ae12:	f10a 0a01 	add.w	sl, sl, #1
 801ae16:	9304      	str	r3, [sp, #16]
 801ae18:	9307      	str	r3, [sp, #28]
 801ae1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ae1e:	931a      	str	r3, [sp, #104]	; 0x68
 801ae20:	4654      	mov	r4, sl
 801ae22:	2205      	movs	r2, #5
 801ae24:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae28:	4850      	ldr	r0, [pc, #320]	; (801af6c <_svfiprintf_r+0x1e8>)
 801ae2a:	f7e5 fa89 	bl	8000340 <memchr>
 801ae2e:	9a04      	ldr	r2, [sp, #16]
 801ae30:	b9d8      	cbnz	r0, 801ae6a <_svfiprintf_r+0xe6>
 801ae32:	06d0      	lsls	r0, r2, #27
 801ae34:	bf44      	itt	mi
 801ae36:	2320      	movmi	r3, #32
 801ae38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae3c:	0711      	lsls	r1, r2, #28
 801ae3e:	bf44      	itt	mi
 801ae40:	232b      	movmi	r3, #43	; 0x2b
 801ae42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae46:	f89a 3000 	ldrb.w	r3, [sl]
 801ae4a:	2b2a      	cmp	r3, #42	; 0x2a
 801ae4c:	d015      	beq.n	801ae7a <_svfiprintf_r+0xf6>
 801ae4e:	9a07      	ldr	r2, [sp, #28]
 801ae50:	4654      	mov	r4, sl
 801ae52:	2000      	movs	r0, #0
 801ae54:	f04f 0c0a 	mov.w	ip, #10
 801ae58:	4621      	mov	r1, r4
 801ae5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ae5e:	3b30      	subs	r3, #48	; 0x30
 801ae60:	2b09      	cmp	r3, #9
 801ae62:	d94d      	bls.n	801af00 <_svfiprintf_r+0x17c>
 801ae64:	b1b0      	cbz	r0, 801ae94 <_svfiprintf_r+0x110>
 801ae66:	9207      	str	r2, [sp, #28]
 801ae68:	e014      	b.n	801ae94 <_svfiprintf_r+0x110>
 801ae6a:	eba0 0308 	sub.w	r3, r0, r8
 801ae6e:	fa09 f303 	lsl.w	r3, r9, r3
 801ae72:	4313      	orrs	r3, r2
 801ae74:	9304      	str	r3, [sp, #16]
 801ae76:	46a2      	mov	sl, r4
 801ae78:	e7d2      	b.n	801ae20 <_svfiprintf_r+0x9c>
 801ae7a:	9b03      	ldr	r3, [sp, #12]
 801ae7c:	1d19      	adds	r1, r3, #4
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	9103      	str	r1, [sp, #12]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	bfbb      	ittet	lt
 801ae86:	425b      	neglt	r3, r3
 801ae88:	f042 0202 	orrlt.w	r2, r2, #2
 801ae8c:	9307      	strge	r3, [sp, #28]
 801ae8e:	9307      	strlt	r3, [sp, #28]
 801ae90:	bfb8      	it	lt
 801ae92:	9204      	strlt	r2, [sp, #16]
 801ae94:	7823      	ldrb	r3, [r4, #0]
 801ae96:	2b2e      	cmp	r3, #46	; 0x2e
 801ae98:	d10c      	bne.n	801aeb4 <_svfiprintf_r+0x130>
 801ae9a:	7863      	ldrb	r3, [r4, #1]
 801ae9c:	2b2a      	cmp	r3, #42	; 0x2a
 801ae9e:	d134      	bne.n	801af0a <_svfiprintf_r+0x186>
 801aea0:	9b03      	ldr	r3, [sp, #12]
 801aea2:	1d1a      	adds	r2, r3, #4
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	9203      	str	r2, [sp, #12]
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	bfb8      	it	lt
 801aeac:	f04f 33ff 	movlt.w	r3, #4294967295
 801aeb0:	3402      	adds	r4, #2
 801aeb2:	9305      	str	r3, [sp, #20]
 801aeb4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801af7c <_svfiprintf_r+0x1f8>
 801aeb8:	7821      	ldrb	r1, [r4, #0]
 801aeba:	2203      	movs	r2, #3
 801aebc:	4650      	mov	r0, sl
 801aebe:	f7e5 fa3f 	bl	8000340 <memchr>
 801aec2:	b138      	cbz	r0, 801aed4 <_svfiprintf_r+0x150>
 801aec4:	9b04      	ldr	r3, [sp, #16]
 801aec6:	eba0 000a 	sub.w	r0, r0, sl
 801aeca:	2240      	movs	r2, #64	; 0x40
 801aecc:	4082      	lsls	r2, r0
 801aece:	4313      	orrs	r3, r2
 801aed0:	3401      	adds	r4, #1
 801aed2:	9304      	str	r3, [sp, #16]
 801aed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aed8:	4825      	ldr	r0, [pc, #148]	; (801af70 <_svfiprintf_r+0x1ec>)
 801aeda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aede:	2206      	movs	r2, #6
 801aee0:	f7e5 fa2e 	bl	8000340 <memchr>
 801aee4:	2800      	cmp	r0, #0
 801aee6:	d038      	beq.n	801af5a <_svfiprintf_r+0x1d6>
 801aee8:	4b22      	ldr	r3, [pc, #136]	; (801af74 <_svfiprintf_r+0x1f0>)
 801aeea:	bb1b      	cbnz	r3, 801af34 <_svfiprintf_r+0x1b0>
 801aeec:	9b03      	ldr	r3, [sp, #12]
 801aeee:	3307      	adds	r3, #7
 801aef0:	f023 0307 	bic.w	r3, r3, #7
 801aef4:	3308      	adds	r3, #8
 801aef6:	9303      	str	r3, [sp, #12]
 801aef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aefa:	4433      	add	r3, r6
 801aefc:	9309      	str	r3, [sp, #36]	; 0x24
 801aefe:	e768      	b.n	801add2 <_svfiprintf_r+0x4e>
 801af00:	fb0c 3202 	mla	r2, ip, r2, r3
 801af04:	460c      	mov	r4, r1
 801af06:	2001      	movs	r0, #1
 801af08:	e7a6      	b.n	801ae58 <_svfiprintf_r+0xd4>
 801af0a:	2300      	movs	r3, #0
 801af0c:	3401      	adds	r4, #1
 801af0e:	9305      	str	r3, [sp, #20]
 801af10:	4619      	mov	r1, r3
 801af12:	f04f 0c0a 	mov.w	ip, #10
 801af16:	4620      	mov	r0, r4
 801af18:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af1c:	3a30      	subs	r2, #48	; 0x30
 801af1e:	2a09      	cmp	r2, #9
 801af20:	d903      	bls.n	801af2a <_svfiprintf_r+0x1a6>
 801af22:	2b00      	cmp	r3, #0
 801af24:	d0c6      	beq.n	801aeb4 <_svfiprintf_r+0x130>
 801af26:	9105      	str	r1, [sp, #20]
 801af28:	e7c4      	b.n	801aeb4 <_svfiprintf_r+0x130>
 801af2a:	fb0c 2101 	mla	r1, ip, r1, r2
 801af2e:	4604      	mov	r4, r0
 801af30:	2301      	movs	r3, #1
 801af32:	e7f0      	b.n	801af16 <_svfiprintf_r+0x192>
 801af34:	ab03      	add	r3, sp, #12
 801af36:	9300      	str	r3, [sp, #0]
 801af38:	462a      	mov	r2, r5
 801af3a:	4b0f      	ldr	r3, [pc, #60]	; (801af78 <_svfiprintf_r+0x1f4>)
 801af3c:	a904      	add	r1, sp, #16
 801af3e:	4638      	mov	r0, r7
 801af40:	f3af 8000 	nop.w
 801af44:	1c42      	adds	r2, r0, #1
 801af46:	4606      	mov	r6, r0
 801af48:	d1d6      	bne.n	801aef8 <_svfiprintf_r+0x174>
 801af4a:	89ab      	ldrh	r3, [r5, #12]
 801af4c:	065b      	lsls	r3, r3, #25
 801af4e:	f53f af2d 	bmi.w	801adac <_svfiprintf_r+0x28>
 801af52:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af54:	b01d      	add	sp, #116	; 0x74
 801af56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af5a:	ab03      	add	r3, sp, #12
 801af5c:	9300      	str	r3, [sp, #0]
 801af5e:	462a      	mov	r2, r5
 801af60:	4b05      	ldr	r3, [pc, #20]	; (801af78 <_svfiprintf_r+0x1f4>)
 801af62:	a904      	add	r1, sp, #16
 801af64:	4638      	mov	r0, r7
 801af66:	f000 fa4b 	bl	801b400 <_printf_i>
 801af6a:	e7eb      	b.n	801af44 <_svfiprintf_r+0x1c0>
 801af6c:	0801c410 	.word	0x0801c410
 801af70:	0801c41a 	.word	0x0801c41a
 801af74:	00000000 	.word	0x00000000
 801af78:	0801acd1 	.word	0x0801acd1
 801af7c:	0801c416 	.word	0x0801c416

0801af80 <_sungetc_r>:
 801af80:	b538      	push	{r3, r4, r5, lr}
 801af82:	1c4b      	adds	r3, r1, #1
 801af84:	4614      	mov	r4, r2
 801af86:	d103      	bne.n	801af90 <_sungetc_r+0x10>
 801af88:	f04f 35ff 	mov.w	r5, #4294967295
 801af8c:	4628      	mov	r0, r5
 801af8e:	bd38      	pop	{r3, r4, r5, pc}
 801af90:	8993      	ldrh	r3, [r2, #12]
 801af92:	f023 0320 	bic.w	r3, r3, #32
 801af96:	8193      	strh	r3, [r2, #12]
 801af98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801af9a:	6852      	ldr	r2, [r2, #4]
 801af9c:	b2cd      	uxtb	r5, r1
 801af9e:	b18b      	cbz	r3, 801afc4 <_sungetc_r+0x44>
 801afa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801afa2:	4293      	cmp	r3, r2
 801afa4:	dd08      	ble.n	801afb8 <_sungetc_r+0x38>
 801afa6:	6823      	ldr	r3, [r4, #0]
 801afa8:	1e5a      	subs	r2, r3, #1
 801afaa:	6022      	str	r2, [r4, #0]
 801afac:	f803 5c01 	strb.w	r5, [r3, #-1]
 801afb0:	6863      	ldr	r3, [r4, #4]
 801afb2:	3301      	adds	r3, #1
 801afb4:	6063      	str	r3, [r4, #4]
 801afb6:	e7e9      	b.n	801af8c <_sungetc_r+0xc>
 801afb8:	4621      	mov	r1, r4
 801afba:	f000 fcca 	bl	801b952 <__submore>
 801afbe:	2800      	cmp	r0, #0
 801afc0:	d0f1      	beq.n	801afa6 <_sungetc_r+0x26>
 801afc2:	e7e1      	b.n	801af88 <_sungetc_r+0x8>
 801afc4:	6921      	ldr	r1, [r4, #16]
 801afc6:	6823      	ldr	r3, [r4, #0]
 801afc8:	b151      	cbz	r1, 801afe0 <_sungetc_r+0x60>
 801afca:	4299      	cmp	r1, r3
 801afcc:	d208      	bcs.n	801afe0 <_sungetc_r+0x60>
 801afce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801afd2:	42a9      	cmp	r1, r5
 801afd4:	d104      	bne.n	801afe0 <_sungetc_r+0x60>
 801afd6:	3b01      	subs	r3, #1
 801afd8:	3201      	adds	r2, #1
 801afda:	6023      	str	r3, [r4, #0]
 801afdc:	6062      	str	r2, [r4, #4]
 801afde:	e7d5      	b.n	801af8c <_sungetc_r+0xc>
 801afe0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801afe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afe8:	6363      	str	r3, [r4, #52]	; 0x34
 801afea:	2303      	movs	r3, #3
 801afec:	63a3      	str	r3, [r4, #56]	; 0x38
 801afee:	4623      	mov	r3, r4
 801aff0:	f803 5f46 	strb.w	r5, [r3, #70]!
 801aff4:	6023      	str	r3, [r4, #0]
 801aff6:	2301      	movs	r3, #1
 801aff8:	e7dc      	b.n	801afb4 <_sungetc_r+0x34>

0801affa <__ssrefill_r>:
 801affa:	b510      	push	{r4, lr}
 801affc:	460c      	mov	r4, r1
 801affe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b000:	b169      	cbz	r1, 801b01e <__ssrefill_r+0x24>
 801b002:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b006:	4299      	cmp	r1, r3
 801b008:	d001      	beq.n	801b00e <__ssrefill_r+0x14>
 801b00a:	f7ff fd69 	bl	801aae0 <_free_r>
 801b00e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b010:	6063      	str	r3, [r4, #4]
 801b012:	2000      	movs	r0, #0
 801b014:	6360      	str	r0, [r4, #52]	; 0x34
 801b016:	b113      	cbz	r3, 801b01e <__ssrefill_r+0x24>
 801b018:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b01a:	6023      	str	r3, [r4, #0]
 801b01c:	bd10      	pop	{r4, pc}
 801b01e:	6923      	ldr	r3, [r4, #16]
 801b020:	6023      	str	r3, [r4, #0]
 801b022:	2300      	movs	r3, #0
 801b024:	6063      	str	r3, [r4, #4]
 801b026:	89a3      	ldrh	r3, [r4, #12]
 801b028:	f043 0320 	orr.w	r3, r3, #32
 801b02c:	81a3      	strh	r3, [r4, #12]
 801b02e:	f04f 30ff 	mov.w	r0, #4294967295
 801b032:	e7f3      	b.n	801b01c <__ssrefill_r+0x22>

0801b034 <__ssvfiscanf_r>:
 801b034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b038:	460c      	mov	r4, r1
 801b03a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801b03e:	2100      	movs	r1, #0
 801b040:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801b044:	49a6      	ldr	r1, [pc, #664]	; (801b2e0 <__ssvfiscanf_r+0x2ac>)
 801b046:	91a0      	str	r1, [sp, #640]	; 0x280
 801b048:	f10d 0804 	add.w	r8, sp, #4
 801b04c:	49a5      	ldr	r1, [pc, #660]	; (801b2e4 <__ssvfiscanf_r+0x2b0>)
 801b04e:	4fa6      	ldr	r7, [pc, #664]	; (801b2e8 <__ssvfiscanf_r+0x2b4>)
 801b050:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801b2ec <__ssvfiscanf_r+0x2b8>
 801b054:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801b058:	4606      	mov	r6, r0
 801b05a:	91a1      	str	r1, [sp, #644]	; 0x284
 801b05c:	9300      	str	r3, [sp, #0]
 801b05e:	7813      	ldrb	r3, [r2, #0]
 801b060:	2b00      	cmp	r3, #0
 801b062:	f000 815a 	beq.w	801b31a <__ssvfiscanf_r+0x2e6>
 801b066:	5cf9      	ldrb	r1, [r7, r3]
 801b068:	f011 0108 	ands.w	r1, r1, #8
 801b06c:	f102 0501 	add.w	r5, r2, #1
 801b070:	d019      	beq.n	801b0a6 <__ssvfiscanf_r+0x72>
 801b072:	6863      	ldr	r3, [r4, #4]
 801b074:	2b00      	cmp	r3, #0
 801b076:	dd0f      	ble.n	801b098 <__ssvfiscanf_r+0x64>
 801b078:	6823      	ldr	r3, [r4, #0]
 801b07a:	781a      	ldrb	r2, [r3, #0]
 801b07c:	5cba      	ldrb	r2, [r7, r2]
 801b07e:	0712      	lsls	r2, r2, #28
 801b080:	d401      	bmi.n	801b086 <__ssvfiscanf_r+0x52>
 801b082:	462a      	mov	r2, r5
 801b084:	e7eb      	b.n	801b05e <__ssvfiscanf_r+0x2a>
 801b086:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b088:	3201      	adds	r2, #1
 801b08a:	9245      	str	r2, [sp, #276]	; 0x114
 801b08c:	6862      	ldr	r2, [r4, #4]
 801b08e:	3301      	adds	r3, #1
 801b090:	3a01      	subs	r2, #1
 801b092:	6062      	str	r2, [r4, #4]
 801b094:	6023      	str	r3, [r4, #0]
 801b096:	e7ec      	b.n	801b072 <__ssvfiscanf_r+0x3e>
 801b098:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b09a:	4621      	mov	r1, r4
 801b09c:	4630      	mov	r0, r6
 801b09e:	4798      	blx	r3
 801b0a0:	2800      	cmp	r0, #0
 801b0a2:	d0e9      	beq.n	801b078 <__ssvfiscanf_r+0x44>
 801b0a4:	e7ed      	b.n	801b082 <__ssvfiscanf_r+0x4e>
 801b0a6:	2b25      	cmp	r3, #37	; 0x25
 801b0a8:	d012      	beq.n	801b0d0 <__ssvfiscanf_r+0x9c>
 801b0aa:	469a      	mov	sl, r3
 801b0ac:	6863      	ldr	r3, [r4, #4]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	f340 8091 	ble.w	801b1d6 <__ssvfiscanf_r+0x1a2>
 801b0b4:	6822      	ldr	r2, [r4, #0]
 801b0b6:	7813      	ldrb	r3, [r2, #0]
 801b0b8:	4553      	cmp	r3, sl
 801b0ba:	f040 812e 	bne.w	801b31a <__ssvfiscanf_r+0x2e6>
 801b0be:	6863      	ldr	r3, [r4, #4]
 801b0c0:	3b01      	subs	r3, #1
 801b0c2:	6063      	str	r3, [r4, #4]
 801b0c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801b0c6:	3201      	adds	r2, #1
 801b0c8:	3301      	adds	r3, #1
 801b0ca:	6022      	str	r2, [r4, #0]
 801b0cc:	9345      	str	r3, [sp, #276]	; 0x114
 801b0ce:	e7d8      	b.n	801b082 <__ssvfiscanf_r+0x4e>
 801b0d0:	9141      	str	r1, [sp, #260]	; 0x104
 801b0d2:	9143      	str	r1, [sp, #268]	; 0x10c
 801b0d4:	7853      	ldrb	r3, [r2, #1]
 801b0d6:	2b2a      	cmp	r3, #42	; 0x2a
 801b0d8:	bf02      	ittt	eq
 801b0da:	2310      	moveq	r3, #16
 801b0dc:	1c95      	addeq	r5, r2, #2
 801b0de:	9341      	streq	r3, [sp, #260]	; 0x104
 801b0e0:	220a      	movs	r2, #10
 801b0e2:	46aa      	mov	sl, r5
 801b0e4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801b0e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801b0ec:	2b09      	cmp	r3, #9
 801b0ee:	d91c      	bls.n	801b12a <__ssvfiscanf_r+0xf6>
 801b0f0:	487e      	ldr	r0, [pc, #504]	; (801b2ec <__ssvfiscanf_r+0x2b8>)
 801b0f2:	2203      	movs	r2, #3
 801b0f4:	f7e5 f924 	bl	8000340 <memchr>
 801b0f8:	b138      	cbz	r0, 801b10a <__ssvfiscanf_r+0xd6>
 801b0fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b0fc:	eba0 0009 	sub.w	r0, r0, r9
 801b100:	2301      	movs	r3, #1
 801b102:	4083      	lsls	r3, r0
 801b104:	4313      	orrs	r3, r2
 801b106:	9341      	str	r3, [sp, #260]	; 0x104
 801b108:	4655      	mov	r5, sl
 801b10a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b10e:	2b78      	cmp	r3, #120	; 0x78
 801b110:	d806      	bhi.n	801b120 <__ssvfiscanf_r+0xec>
 801b112:	2b57      	cmp	r3, #87	; 0x57
 801b114:	d810      	bhi.n	801b138 <__ssvfiscanf_r+0x104>
 801b116:	2b25      	cmp	r3, #37	; 0x25
 801b118:	d0c7      	beq.n	801b0aa <__ssvfiscanf_r+0x76>
 801b11a:	d857      	bhi.n	801b1cc <__ssvfiscanf_r+0x198>
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d065      	beq.n	801b1ec <__ssvfiscanf_r+0x1b8>
 801b120:	2303      	movs	r3, #3
 801b122:	9347      	str	r3, [sp, #284]	; 0x11c
 801b124:	230a      	movs	r3, #10
 801b126:	9342      	str	r3, [sp, #264]	; 0x108
 801b128:	e076      	b.n	801b218 <__ssvfiscanf_r+0x1e4>
 801b12a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801b12c:	fb02 1103 	mla	r1, r2, r3, r1
 801b130:	3930      	subs	r1, #48	; 0x30
 801b132:	9143      	str	r1, [sp, #268]	; 0x10c
 801b134:	4655      	mov	r5, sl
 801b136:	e7d4      	b.n	801b0e2 <__ssvfiscanf_r+0xae>
 801b138:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801b13c:	2a20      	cmp	r2, #32
 801b13e:	d8ef      	bhi.n	801b120 <__ssvfiscanf_r+0xec>
 801b140:	a101      	add	r1, pc, #4	; (adr r1, 801b148 <__ssvfiscanf_r+0x114>)
 801b142:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b146:	bf00      	nop
 801b148:	0801b1fb 	.word	0x0801b1fb
 801b14c:	0801b121 	.word	0x0801b121
 801b150:	0801b121 	.word	0x0801b121
 801b154:	0801b259 	.word	0x0801b259
 801b158:	0801b121 	.word	0x0801b121
 801b15c:	0801b121 	.word	0x0801b121
 801b160:	0801b121 	.word	0x0801b121
 801b164:	0801b121 	.word	0x0801b121
 801b168:	0801b121 	.word	0x0801b121
 801b16c:	0801b121 	.word	0x0801b121
 801b170:	0801b121 	.word	0x0801b121
 801b174:	0801b26f 	.word	0x0801b26f
 801b178:	0801b255 	.word	0x0801b255
 801b17c:	0801b1d3 	.word	0x0801b1d3
 801b180:	0801b1d3 	.word	0x0801b1d3
 801b184:	0801b1d3 	.word	0x0801b1d3
 801b188:	0801b121 	.word	0x0801b121
 801b18c:	0801b211 	.word	0x0801b211
 801b190:	0801b121 	.word	0x0801b121
 801b194:	0801b121 	.word	0x0801b121
 801b198:	0801b121 	.word	0x0801b121
 801b19c:	0801b121 	.word	0x0801b121
 801b1a0:	0801b27f 	.word	0x0801b27f
 801b1a4:	0801b24d 	.word	0x0801b24d
 801b1a8:	0801b1f3 	.word	0x0801b1f3
 801b1ac:	0801b121 	.word	0x0801b121
 801b1b0:	0801b121 	.word	0x0801b121
 801b1b4:	0801b27b 	.word	0x0801b27b
 801b1b8:	0801b121 	.word	0x0801b121
 801b1bc:	0801b255 	.word	0x0801b255
 801b1c0:	0801b121 	.word	0x0801b121
 801b1c4:	0801b121 	.word	0x0801b121
 801b1c8:	0801b1fb 	.word	0x0801b1fb
 801b1cc:	3b45      	subs	r3, #69	; 0x45
 801b1ce:	2b02      	cmp	r3, #2
 801b1d0:	d8a6      	bhi.n	801b120 <__ssvfiscanf_r+0xec>
 801b1d2:	2305      	movs	r3, #5
 801b1d4:	e01f      	b.n	801b216 <__ssvfiscanf_r+0x1e2>
 801b1d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b1d8:	4621      	mov	r1, r4
 801b1da:	4630      	mov	r0, r6
 801b1dc:	4798      	blx	r3
 801b1de:	2800      	cmp	r0, #0
 801b1e0:	f43f af68 	beq.w	801b0b4 <__ssvfiscanf_r+0x80>
 801b1e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 801b1e6:	2800      	cmp	r0, #0
 801b1e8:	f040 808d 	bne.w	801b306 <__ssvfiscanf_r+0x2d2>
 801b1ec:	f04f 30ff 	mov.w	r0, #4294967295
 801b1f0:	e08f      	b.n	801b312 <__ssvfiscanf_r+0x2de>
 801b1f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b1f4:	f042 0220 	orr.w	r2, r2, #32
 801b1f8:	9241      	str	r2, [sp, #260]	; 0x104
 801b1fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801b1fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b200:	9241      	str	r2, [sp, #260]	; 0x104
 801b202:	2210      	movs	r2, #16
 801b204:	2b6f      	cmp	r3, #111	; 0x6f
 801b206:	9242      	str	r2, [sp, #264]	; 0x108
 801b208:	bf34      	ite	cc
 801b20a:	2303      	movcc	r3, #3
 801b20c:	2304      	movcs	r3, #4
 801b20e:	e002      	b.n	801b216 <__ssvfiscanf_r+0x1e2>
 801b210:	2300      	movs	r3, #0
 801b212:	9342      	str	r3, [sp, #264]	; 0x108
 801b214:	2303      	movs	r3, #3
 801b216:	9347      	str	r3, [sp, #284]	; 0x11c
 801b218:	6863      	ldr	r3, [r4, #4]
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	dd3d      	ble.n	801b29a <__ssvfiscanf_r+0x266>
 801b21e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b220:	0659      	lsls	r1, r3, #25
 801b222:	d404      	bmi.n	801b22e <__ssvfiscanf_r+0x1fa>
 801b224:	6823      	ldr	r3, [r4, #0]
 801b226:	781a      	ldrb	r2, [r3, #0]
 801b228:	5cba      	ldrb	r2, [r7, r2]
 801b22a:	0712      	lsls	r2, r2, #28
 801b22c:	d43c      	bmi.n	801b2a8 <__ssvfiscanf_r+0x274>
 801b22e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801b230:	2b02      	cmp	r3, #2
 801b232:	dc4b      	bgt.n	801b2cc <__ssvfiscanf_r+0x298>
 801b234:	466b      	mov	r3, sp
 801b236:	4622      	mov	r2, r4
 801b238:	a941      	add	r1, sp, #260	; 0x104
 801b23a:	4630      	mov	r0, r6
 801b23c:	f000 fa02 	bl	801b644 <_scanf_chars>
 801b240:	2801      	cmp	r0, #1
 801b242:	d06a      	beq.n	801b31a <__ssvfiscanf_r+0x2e6>
 801b244:	2802      	cmp	r0, #2
 801b246:	f47f af1c 	bne.w	801b082 <__ssvfiscanf_r+0x4e>
 801b24a:	e7cb      	b.n	801b1e4 <__ssvfiscanf_r+0x1b0>
 801b24c:	2308      	movs	r3, #8
 801b24e:	9342      	str	r3, [sp, #264]	; 0x108
 801b250:	2304      	movs	r3, #4
 801b252:	e7e0      	b.n	801b216 <__ssvfiscanf_r+0x1e2>
 801b254:	220a      	movs	r2, #10
 801b256:	e7d5      	b.n	801b204 <__ssvfiscanf_r+0x1d0>
 801b258:	4629      	mov	r1, r5
 801b25a:	4640      	mov	r0, r8
 801b25c:	f000 fb40 	bl	801b8e0 <__sccl>
 801b260:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b266:	9341      	str	r3, [sp, #260]	; 0x104
 801b268:	4605      	mov	r5, r0
 801b26a:	2301      	movs	r3, #1
 801b26c:	e7d3      	b.n	801b216 <__ssvfiscanf_r+0x1e2>
 801b26e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801b270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b274:	9341      	str	r3, [sp, #260]	; 0x104
 801b276:	2300      	movs	r3, #0
 801b278:	e7cd      	b.n	801b216 <__ssvfiscanf_r+0x1e2>
 801b27a:	2302      	movs	r3, #2
 801b27c:	e7cb      	b.n	801b216 <__ssvfiscanf_r+0x1e2>
 801b27e:	9841      	ldr	r0, [sp, #260]	; 0x104
 801b280:	06c3      	lsls	r3, r0, #27
 801b282:	f53f aefe 	bmi.w	801b082 <__ssvfiscanf_r+0x4e>
 801b286:	9b00      	ldr	r3, [sp, #0]
 801b288:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b28a:	1d19      	adds	r1, r3, #4
 801b28c:	9100      	str	r1, [sp, #0]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	07c0      	lsls	r0, r0, #31
 801b292:	bf4c      	ite	mi
 801b294:	801a      	strhmi	r2, [r3, #0]
 801b296:	601a      	strpl	r2, [r3, #0]
 801b298:	e6f3      	b.n	801b082 <__ssvfiscanf_r+0x4e>
 801b29a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b29c:	4621      	mov	r1, r4
 801b29e:	4630      	mov	r0, r6
 801b2a0:	4798      	blx	r3
 801b2a2:	2800      	cmp	r0, #0
 801b2a4:	d0bb      	beq.n	801b21e <__ssvfiscanf_r+0x1ea>
 801b2a6:	e79d      	b.n	801b1e4 <__ssvfiscanf_r+0x1b0>
 801b2a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801b2aa:	3201      	adds	r2, #1
 801b2ac:	9245      	str	r2, [sp, #276]	; 0x114
 801b2ae:	6862      	ldr	r2, [r4, #4]
 801b2b0:	3a01      	subs	r2, #1
 801b2b2:	2a00      	cmp	r2, #0
 801b2b4:	6062      	str	r2, [r4, #4]
 801b2b6:	dd02      	ble.n	801b2be <__ssvfiscanf_r+0x28a>
 801b2b8:	3301      	adds	r3, #1
 801b2ba:	6023      	str	r3, [r4, #0]
 801b2bc:	e7b2      	b.n	801b224 <__ssvfiscanf_r+0x1f0>
 801b2be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801b2c0:	4621      	mov	r1, r4
 801b2c2:	4630      	mov	r0, r6
 801b2c4:	4798      	blx	r3
 801b2c6:	2800      	cmp	r0, #0
 801b2c8:	d0ac      	beq.n	801b224 <__ssvfiscanf_r+0x1f0>
 801b2ca:	e78b      	b.n	801b1e4 <__ssvfiscanf_r+0x1b0>
 801b2cc:	2b04      	cmp	r3, #4
 801b2ce:	dc0f      	bgt.n	801b2f0 <__ssvfiscanf_r+0x2bc>
 801b2d0:	466b      	mov	r3, sp
 801b2d2:	4622      	mov	r2, r4
 801b2d4:	a941      	add	r1, sp, #260	; 0x104
 801b2d6:	4630      	mov	r0, r6
 801b2d8:	f000 fa0e 	bl	801b6f8 <_scanf_i>
 801b2dc:	e7b0      	b.n	801b240 <__ssvfiscanf_r+0x20c>
 801b2de:	bf00      	nop
 801b2e0:	0801af81 	.word	0x0801af81
 801b2e4:	0801affb 	.word	0x0801affb
 801b2e8:	0801c45f 	.word	0x0801c45f
 801b2ec:	0801c416 	.word	0x0801c416
 801b2f0:	4b0b      	ldr	r3, [pc, #44]	; (801b320 <__ssvfiscanf_r+0x2ec>)
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	f43f aec5 	beq.w	801b082 <__ssvfiscanf_r+0x4e>
 801b2f8:	466b      	mov	r3, sp
 801b2fa:	4622      	mov	r2, r4
 801b2fc:	a941      	add	r1, sp, #260	; 0x104
 801b2fe:	4630      	mov	r0, r6
 801b300:	f3af 8000 	nop.w
 801b304:	e79c      	b.n	801b240 <__ssvfiscanf_r+0x20c>
 801b306:	89a3      	ldrh	r3, [r4, #12]
 801b308:	f013 0f40 	tst.w	r3, #64	; 0x40
 801b30c:	bf18      	it	ne
 801b30e:	f04f 30ff 	movne.w	r0, #4294967295
 801b312:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801b316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b31a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801b31c:	e7f9      	b.n	801b312 <__ssvfiscanf_r+0x2de>
 801b31e:	bf00      	nop
 801b320:	00000000 	.word	0x00000000

0801b324 <_printf_common>:
 801b324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b328:	4616      	mov	r6, r2
 801b32a:	4699      	mov	r9, r3
 801b32c:	688a      	ldr	r2, [r1, #8]
 801b32e:	690b      	ldr	r3, [r1, #16]
 801b330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b334:	4293      	cmp	r3, r2
 801b336:	bfb8      	it	lt
 801b338:	4613      	movlt	r3, r2
 801b33a:	6033      	str	r3, [r6, #0]
 801b33c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b340:	4607      	mov	r7, r0
 801b342:	460c      	mov	r4, r1
 801b344:	b10a      	cbz	r2, 801b34a <_printf_common+0x26>
 801b346:	3301      	adds	r3, #1
 801b348:	6033      	str	r3, [r6, #0]
 801b34a:	6823      	ldr	r3, [r4, #0]
 801b34c:	0699      	lsls	r1, r3, #26
 801b34e:	bf42      	ittt	mi
 801b350:	6833      	ldrmi	r3, [r6, #0]
 801b352:	3302      	addmi	r3, #2
 801b354:	6033      	strmi	r3, [r6, #0]
 801b356:	6825      	ldr	r5, [r4, #0]
 801b358:	f015 0506 	ands.w	r5, r5, #6
 801b35c:	d106      	bne.n	801b36c <_printf_common+0x48>
 801b35e:	f104 0a19 	add.w	sl, r4, #25
 801b362:	68e3      	ldr	r3, [r4, #12]
 801b364:	6832      	ldr	r2, [r6, #0]
 801b366:	1a9b      	subs	r3, r3, r2
 801b368:	42ab      	cmp	r3, r5
 801b36a:	dc26      	bgt.n	801b3ba <_printf_common+0x96>
 801b36c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b370:	1e13      	subs	r3, r2, #0
 801b372:	6822      	ldr	r2, [r4, #0]
 801b374:	bf18      	it	ne
 801b376:	2301      	movne	r3, #1
 801b378:	0692      	lsls	r2, r2, #26
 801b37a:	d42b      	bmi.n	801b3d4 <_printf_common+0xb0>
 801b37c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b380:	4649      	mov	r1, r9
 801b382:	4638      	mov	r0, r7
 801b384:	47c0      	blx	r8
 801b386:	3001      	adds	r0, #1
 801b388:	d01e      	beq.n	801b3c8 <_printf_common+0xa4>
 801b38a:	6823      	ldr	r3, [r4, #0]
 801b38c:	6922      	ldr	r2, [r4, #16]
 801b38e:	f003 0306 	and.w	r3, r3, #6
 801b392:	2b04      	cmp	r3, #4
 801b394:	bf02      	ittt	eq
 801b396:	68e5      	ldreq	r5, [r4, #12]
 801b398:	6833      	ldreq	r3, [r6, #0]
 801b39a:	1aed      	subeq	r5, r5, r3
 801b39c:	68a3      	ldr	r3, [r4, #8]
 801b39e:	bf0c      	ite	eq
 801b3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b3a4:	2500      	movne	r5, #0
 801b3a6:	4293      	cmp	r3, r2
 801b3a8:	bfc4      	itt	gt
 801b3aa:	1a9b      	subgt	r3, r3, r2
 801b3ac:	18ed      	addgt	r5, r5, r3
 801b3ae:	2600      	movs	r6, #0
 801b3b0:	341a      	adds	r4, #26
 801b3b2:	42b5      	cmp	r5, r6
 801b3b4:	d11a      	bne.n	801b3ec <_printf_common+0xc8>
 801b3b6:	2000      	movs	r0, #0
 801b3b8:	e008      	b.n	801b3cc <_printf_common+0xa8>
 801b3ba:	2301      	movs	r3, #1
 801b3bc:	4652      	mov	r2, sl
 801b3be:	4649      	mov	r1, r9
 801b3c0:	4638      	mov	r0, r7
 801b3c2:	47c0      	blx	r8
 801b3c4:	3001      	adds	r0, #1
 801b3c6:	d103      	bne.n	801b3d0 <_printf_common+0xac>
 801b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 801b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3d0:	3501      	adds	r5, #1
 801b3d2:	e7c6      	b.n	801b362 <_printf_common+0x3e>
 801b3d4:	18e1      	adds	r1, r4, r3
 801b3d6:	1c5a      	adds	r2, r3, #1
 801b3d8:	2030      	movs	r0, #48	; 0x30
 801b3da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b3de:	4422      	add	r2, r4
 801b3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b3e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b3e8:	3302      	adds	r3, #2
 801b3ea:	e7c7      	b.n	801b37c <_printf_common+0x58>
 801b3ec:	2301      	movs	r3, #1
 801b3ee:	4622      	mov	r2, r4
 801b3f0:	4649      	mov	r1, r9
 801b3f2:	4638      	mov	r0, r7
 801b3f4:	47c0      	blx	r8
 801b3f6:	3001      	adds	r0, #1
 801b3f8:	d0e6      	beq.n	801b3c8 <_printf_common+0xa4>
 801b3fa:	3601      	adds	r6, #1
 801b3fc:	e7d9      	b.n	801b3b2 <_printf_common+0x8e>
	...

0801b400 <_printf_i>:
 801b400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b404:	7e0f      	ldrb	r7, [r1, #24]
 801b406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b408:	2f78      	cmp	r7, #120	; 0x78
 801b40a:	4691      	mov	r9, r2
 801b40c:	4680      	mov	r8, r0
 801b40e:	460c      	mov	r4, r1
 801b410:	469a      	mov	sl, r3
 801b412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b416:	d807      	bhi.n	801b428 <_printf_i+0x28>
 801b418:	2f62      	cmp	r7, #98	; 0x62
 801b41a:	d80a      	bhi.n	801b432 <_printf_i+0x32>
 801b41c:	2f00      	cmp	r7, #0
 801b41e:	f000 80d4 	beq.w	801b5ca <_printf_i+0x1ca>
 801b422:	2f58      	cmp	r7, #88	; 0x58
 801b424:	f000 80c0 	beq.w	801b5a8 <_printf_i+0x1a8>
 801b428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b42c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b430:	e03a      	b.n	801b4a8 <_printf_i+0xa8>
 801b432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b436:	2b15      	cmp	r3, #21
 801b438:	d8f6      	bhi.n	801b428 <_printf_i+0x28>
 801b43a:	a101      	add	r1, pc, #4	; (adr r1, 801b440 <_printf_i+0x40>)
 801b43c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b440:	0801b499 	.word	0x0801b499
 801b444:	0801b4ad 	.word	0x0801b4ad
 801b448:	0801b429 	.word	0x0801b429
 801b44c:	0801b429 	.word	0x0801b429
 801b450:	0801b429 	.word	0x0801b429
 801b454:	0801b429 	.word	0x0801b429
 801b458:	0801b4ad 	.word	0x0801b4ad
 801b45c:	0801b429 	.word	0x0801b429
 801b460:	0801b429 	.word	0x0801b429
 801b464:	0801b429 	.word	0x0801b429
 801b468:	0801b429 	.word	0x0801b429
 801b46c:	0801b5b1 	.word	0x0801b5b1
 801b470:	0801b4d9 	.word	0x0801b4d9
 801b474:	0801b56b 	.word	0x0801b56b
 801b478:	0801b429 	.word	0x0801b429
 801b47c:	0801b429 	.word	0x0801b429
 801b480:	0801b5d3 	.word	0x0801b5d3
 801b484:	0801b429 	.word	0x0801b429
 801b488:	0801b4d9 	.word	0x0801b4d9
 801b48c:	0801b429 	.word	0x0801b429
 801b490:	0801b429 	.word	0x0801b429
 801b494:	0801b573 	.word	0x0801b573
 801b498:	682b      	ldr	r3, [r5, #0]
 801b49a:	1d1a      	adds	r2, r3, #4
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	602a      	str	r2, [r5, #0]
 801b4a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b4a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b4a8:	2301      	movs	r3, #1
 801b4aa:	e09f      	b.n	801b5ec <_printf_i+0x1ec>
 801b4ac:	6820      	ldr	r0, [r4, #0]
 801b4ae:	682b      	ldr	r3, [r5, #0]
 801b4b0:	0607      	lsls	r7, r0, #24
 801b4b2:	f103 0104 	add.w	r1, r3, #4
 801b4b6:	6029      	str	r1, [r5, #0]
 801b4b8:	d501      	bpl.n	801b4be <_printf_i+0xbe>
 801b4ba:	681e      	ldr	r6, [r3, #0]
 801b4bc:	e003      	b.n	801b4c6 <_printf_i+0xc6>
 801b4be:	0646      	lsls	r6, r0, #25
 801b4c0:	d5fb      	bpl.n	801b4ba <_printf_i+0xba>
 801b4c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b4c6:	2e00      	cmp	r6, #0
 801b4c8:	da03      	bge.n	801b4d2 <_printf_i+0xd2>
 801b4ca:	232d      	movs	r3, #45	; 0x2d
 801b4cc:	4276      	negs	r6, r6
 801b4ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b4d2:	485a      	ldr	r0, [pc, #360]	; (801b63c <_printf_i+0x23c>)
 801b4d4:	230a      	movs	r3, #10
 801b4d6:	e012      	b.n	801b4fe <_printf_i+0xfe>
 801b4d8:	682b      	ldr	r3, [r5, #0]
 801b4da:	6820      	ldr	r0, [r4, #0]
 801b4dc:	1d19      	adds	r1, r3, #4
 801b4de:	6029      	str	r1, [r5, #0]
 801b4e0:	0605      	lsls	r5, r0, #24
 801b4e2:	d501      	bpl.n	801b4e8 <_printf_i+0xe8>
 801b4e4:	681e      	ldr	r6, [r3, #0]
 801b4e6:	e002      	b.n	801b4ee <_printf_i+0xee>
 801b4e8:	0641      	lsls	r1, r0, #25
 801b4ea:	d5fb      	bpl.n	801b4e4 <_printf_i+0xe4>
 801b4ec:	881e      	ldrh	r6, [r3, #0]
 801b4ee:	4853      	ldr	r0, [pc, #332]	; (801b63c <_printf_i+0x23c>)
 801b4f0:	2f6f      	cmp	r7, #111	; 0x6f
 801b4f2:	bf0c      	ite	eq
 801b4f4:	2308      	moveq	r3, #8
 801b4f6:	230a      	movne	r3, #10
 801b4f8:	2100      	movs	r1, #0
 801b4fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b4fe:	6865      	ldr	r5, [r4, #4]
 801b500:	60a5      	str	r5, [r4, #8]
 801b502:	2d00      	cmp	r5, #0
 801b504:	bfa2      	ittt	ge
 801b506:	6821      	ldrge	r1, [r4, #0]
 801b508:	f021 0104 	bicge.w	r1, r1, #4
 801b50c:	6021      	strge	r1, [r4, #0]
 801b50e:	b90e      	cbnz	r6, 801b514 <_printf_i+0x114>
 801b510:	2d00      	cmp	r5, #0
 801b512:	d04b      	beq.n	801b5ac <_printf_i+0x1ac>
 801b514:	4615      	mov	r5, r2
 801b516:	fbb6 f1f3 	udiv	r1, r6, r3
 801b51a:	fb03 6711 	mls	r7, r3, r1, r6
 801b51e:	5dc7      	ldrb	r7, [r0, r7]
 801b520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b524:	4637      	mov	r7, r6
 801b526:	42bb      	cmp	r3, r7
 801b528:	460e      	mov	r6, r1
 801b52a:	d9f4      	bls.n	801b516 <_printf_i+0x116>
 801b52c:	2b08      	cmp	r3, #8
 801b52e:	d10b      	bne.n	801b548 <_printf_i+0x148>
 801b530:	6823      	ldr	r3, [r4, #0]
 801b532:	07de      	lsls	r6, r3, #31
 801b534:	d508      	bpl.n	801b548 <_printf_i+0x148>
 801b536:	6923      	ldr	r3, [r4, #16]
 801b538:	6861      	ldr	r1, [r4, #4]
 801b53a:	4299      	cmp	r1, r3
 801b53c:	bfde      	ittt	le
 801b53e:	2330      	movle	r3, #48	; 0x30
 801b540:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b544:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b548:	1b52      	subs	r2, r2, r5
 801b54a:	6122      	str	r2, [r4, #16]
 801b54c:	f8cd a000 	str.w	sl, [sp]
 801b550:	464b      	mov	r3, r9
 801b552:	aa03      	add	r2, sp, #12
 801b554:	4621      	mov	r1, r4
 801b556:	4640      	mov	r0, r8
 801b558:	f7ff fee4 	bl	801b324 <_printf_common>
 801b55c:	3001      	adds	r0, #1
 801b55e:	d14a      	bne.n	801b5f6 <_printf_i+0x1f6>
 801b560:	f04f 30ff 	mov.w	r0, #4294967295
 801b564:	b004      	add	sp, #16
 801b566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b56a:	6823      	ldr	r3, [r4, #0]
 801b56c:	f043 0320 	orr.w	r3, r3, #32
 801b570:	6023      	str	r3, [r4, #0]
 801b572:	4833      	ldr	r0, [pc, #204]	; (801b640 <_printf_i+0x240>)
 801b574:	2778      	movs	r7, #120	; 0x78
 801b576:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b57a:	6823      	ldr	r3, [r4, #0]
 801b57c:	6829      	ldr	r1, [r5, #0]
 801b57e:	061f      	lsls	r7, r3, #24
 801b580:	f851 6b04 	ldr.w	r6, [r1], #4
 801b584:	d402      	bmi.n	801b58c <_printf_i+0x18c>
 801b586:	065f      	lsls	r7, r3, #25
 801b588:	bf48      	it	mi
 801b58a:	b2b6      	uxthmi	r6, r6
 801b58c:	07df      	lsls	r7, r3, #31
 801b58e:	bf48      	it	mi
 801b590:	f043 0320 	orrmi.w	r3, r3, #32
 801b594:	6029      	str	r1, [r5, #0]
 801b596:	bf48      	it	mi
 801b598:	6023      	strmi	r3, [r4, #0]
 801b59a:	b91e      	cbnz	r6, 801b5a4 <_printf_i+0x1a4>
 801b59c:	6823      	ldr	r3, [r4, #0]
 801b59e:	f023 0320 	bic.w	r3, r3, #32
 801b5a2:	6023      	str	r3, [r4, #0]
 801b5a4:	2310      	movs	r3, #16
 801b5a6:	e7a7      	b.n	801b4f8 <_printf_i+0xf8>
 801b5a8:	4824      	ldr	r0, [pc, #144]	; (801b63c <_printf_i+0x23c>)
 801b5aa:	e7e4      	b.n	801b576 <_printf_i+0x176>
 801b5ac:	4615      	mov	r5, r2
 801b5ae:	e7bd      	b.n	801b52c <_printf_i+0x12c>
 801b5b0:	682b      	ldr	r3, [r5, #0]
 801b5b2:	6826      	ldr	r6, [r4, #0]
 801b5b4:	6961      	ldr	r1, [r4, #20]
 801b5b6:	1d18      	adds	r0, r3, #4
 801b5b8:	6028      	str	r0, [r5, #0]
 801b5ba:	0635      	lsls	r5, r6, #24
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	d501      	bpl.n	801b5c4 <_printf_i+0x1c4>
 801b5c0:	6019      	str	r1, [r3, #0]
 801b5c2:	e002      	b.n	801b5ca <_printf_i+0x1ca>
 801b5c4:	0670      	lsls	r0, r6, #25
 801b5c6:	d5fb      	bpl.n	801b5c0 <_printf_i+0x1c0>
 801b5c8:	8019      	strh	r1, [r3, #0]
 801b5ca:	2300      	movs	r3, #0
 801b5cc:	6123      	str	r3, [r4, #16]
 801b5ce:	4615      	mov	r5, r2
 801b5d0:	e7bc      	b.n	801b54c <_printf_i+0x14c>
 801b5d2:	682b      	ldr	r3, [r5, #0]
 801b5d4:	1d1a      	adds	r2, r3, #4
 801b5d6:	602a      	str	r2, [r5, #0]
 801b5d8:	681d      	ldr	r5, [r3, #0]
 801b5da:	6862      	ldr	r2, [r4, #4]
 801b5dc:	2100      	movs	r1, #0
 801b5de:	4628      	mov	r0, r5
 801b5e0:	f7e4 feae 	bl	8000340 <memchr>
 801b5e4:	b108      	cbz	r0, 801b5ea <_printf_i+0x1ea>
 801b5e6:	1b40      	subs	r0, r0, r5
 801b5e8:	6060      	str	r0, [r4, #4]
 801b5ea:	6863      	ldr	r3, [r4, #4]
 801b5ec:	6123      	str	r3, [r4, #16]
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b5f4:	e7aa      	b.n	801b54c <_printf_i+0x14c>
 801b5f6:	6923      	ldr	r3, [r4, #16]
 801b5f8:	462a      	mov	r2, r5
 801b5fa:	4649      	mov	r1, r9
 801b5fc:	4640      	mov	r0, r8
 801b5fe:	47d0      	blx	sl
 801b600:	3001      	adds	r0, #1
 801b602:	d0ad      	beq.n	801b560 <_printf_i+0x160>
 801b604:	6823      	ldr	r3, [r4, #0]
 801b606:	079b      	lsls	r3, r3, #30
 801b608:	d413      	bmi.n	801b632 <_printf_i+0x232>
 801b60a:	68e0      	ldr	r0, [r4, #12]
 801b60c:	9b03      	ldr	r3, [sp, #12]
 801b60e:	4298      	cmp	r0, r3
 801b610:	bfb8      	it	lt
 801b612:	4618      	movlt	r0, r3
 801b614:	e7a6      	b.n	801b564 <_printf_i+0x164>
 801b616:	2301      	movs	r3, #1
 801b618:	4632      	mov	r2, r6
 801b61a:	4649      	mov	r1, r9
 801b61c:	4640      	mov	r0, r8
 801b61e:	47d0      	blx	sl
 801b620:	3001      	adds	r0, #1
 801b622:	d09d      	beq.n	801b560 <_printf_i+0x160>
 801b624:	3501      	adds	r5, #1
 801b626:	68e3      	ldr	r3, [r4, #12]
 801b628:	9903      	ldr	r1, [sp, #12]
 801b62a:	1a5b      	subs	r3, r3, r1
 801b62c:	42ab      	cmp	r3, r5
 801b62e:	dcf2      	bgt.n	801b616 <_printf_i+0x216>
 801b630:	e7eb      	b.n	801b60a <_printf_i+0x20a>
 801b632:	2500      	movs	r5, #0
 801b634:	f104 0619 	add.w	r6, r4, #25
 801b638:	e7f5      	b.n	801b626 <_printf_i+0x226>
 801b63a:	bf00      	nop
 801b63c:	0801c421 	.word	0x0801c421
 801b640:	0801c432 	.word	0x0801c432

0801b644 <_scanf_chars>:
 801b644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b648:	4615      	mov	r5, r2
 801b64a:	688a      	ldr	r2, [r1, #8]
 801b64c:	4680      	mov	r8, r0
 801b64e:	460c      	mov	r4, r1
 801b650:	b932      	cbnz	r2, 801b660 <_scanf_chars+0x1c>
 801b652:	698a      	ldr	r2, [r1, #24]
 801b654:	2a00      	cmp	r2, #0
 801b656:	bf0c      	ite	eq
 801b658:	2201      	moveq	r2, #1
 801b65a:	f04f 32ff 	movne.w	r2, #4294967295
 801b65e:	608a      	str	r2, [r1, #8]
 801b660:	6822      	ldr	r2, [r4, #0]
 801b662:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801b6f4 <_scanf_chars+0xb0>
 801b666:	06d1      	lsls	r1, r2, #27
 801b668:	bf5f      	itttt	pl
 801b66a:	681a      	ldrpl	r2, [r3, #0]
 801b66c:	1d11      	addpl	r1, r2, #4
 801b66e:	6019      	strpl	r1, [r3, #0]
 801b670:	6816      	ldrpl	r6, [r2, #0]
 801b672:	2700      	movs	r7, #0
 801b674:	69a0      	ldr	r0, [r4, #24]
 801b676:	b188      	cbz	r0, 801b69c <_scanf_chars+0x58>
 801b678:	2801      	cmp	r0, #1
 801b67a:	d107      	bne.n	801b68c <_scanf_chars+0x48>
 801b67c:	682a      	ldr	r2, [r5, #0]
 801b67e:	7811      	ldrb	r1, [r2, #0]
 801b680:	6962      	ldr	r2, [r4, #20]
 801b682:	5c52      	ldrb	r2, [r2, r1]
 801b684:	b952      	cbnz	r2, 801b69c <_scanf_chars+0x58>
 801b686:	2f00      	cmp	r7, #0
 801b688:	d031      	beq.n	801b6ee <_scanf_chars+0xaa>
 801b68a:	e022      	b.n	801b6d2 <_scanf_chars+0x8e>
 801b68c:	2802      	cmp	r0, #2
 801b68e:	d120      	bne.n	801b6d2 <_scanf_chars+0x8e>
 801b690:	682b      	ldr	r3, [r5, #0]
 801b692:	781b      	ldrb	r3, [r3, #0]
 801b694:	f819 3003 	ldrb.w	r3, [r9, r3]
 801b698:	071b      	lsls	r3, r3, #28
 801b69a:	d41a      	bmi.n	801b6d2 <_scanf_chars+0x8e>
 801b69c:	6823      	ldr	r3, [r4, #0]
 801b69e:	06da      	lsls	r2, r3, #27
 801b6a0:	bf5e      	ittt	pl
 801b6a2:	682b      	ldrpl	r3, [r5, #0]
 801b6a4:	781b      	ldrbpl	r3, [r3, #0]
 801b6a6:	f806 3b01 	strbpl.w	r3, [r6], #1
 801b6aa:	682a      	ldr	r2, [r5, #0]
 801b6ac:	686b      	ldr	r3, [r5, #4]
 801b6ae:	3201      	adds	r2, #1
 801b6b0:	602a      	str	r2, [r5, #0]
 801b6b2:	68a2      	ldr	r2, [r4, #8]
 801b6b4:	3b01      	subs	r3, #1
 801b6b6:	3a01      	subs	r2, #1
 801b6b8:	606b      	str	r3, [r5, #4]
 801b6ba:	3701      	adds	r7, #1
 801b6bc:	60a2      	str	r2, [r4, #8]
 801b6be:	b142      	cbz	r2, 801b6d2 <_scanf_chars+0x8e>
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	dcd7      	bgt.n	801b674 <_scanf_chars+0x30>
 801b6c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b6c8:	4629      	mov	r1, r5
 801b6ca:	4640      	mov	r0, r8
 801b6cc:	4798      	blx	r3
 801b6ce:	2800      	cmp	r0, #0
 801b6d0:	d0d0      	beq.n	801b674 <_scanf_chars+0x30>
 801b6d2:	6823      	ldr	r3, [r4, #0]
 801b6d4:	f013 0310 	ands.w	r3, r3, #16
 801b6d8:	d105      	bne.n	801b6e6 <_scanf_chars+0xa2>
 801b6da:	68e2      	ldr	r2, [r4, #12]
 801b6dc:	3201      	adds	r2, #1
 801b6de:	60e2      	str	r2, [r4, #12]
 801b6e0:	69a2      	ldr	r2, [r4, #24]
 801b6e2:	b102      	cbz	r2, 801b6e6 <_scanf_chars+0xa2>
 801b6e4:	7033      	strb	r3, [r6, #0]
 801b6e6:	6923      	ldr	r3, [r4, #16]
 801b6e8:	443b      	add	r3, r7
 801b6ea:	6123      	str	r3, [r4, #16]
 801b6ec:	2000      	movs	r0, #0
 801b6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6f2:	bf00      	nop
 801b6f4:	0801c45f 	.word	0x0801c45f

0801b6f8 <_scanf_i>:
 801b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6fc:	4698      	mov	r8, r3
 801b6fe:	4b74      	ldr	r3, [pc, #464]	; (801b8d0 <_scanf_i+0x1d8>)
 801b700:	460c      	mov	r4, r1
 801b702:	4682      	mov	sl, r0
 801b704:	4616      	mov	r6, r2
 801b706:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b70a:	b087      	sub	sp, #28
 801b70c:	ab03      	add	r3, sp, #12
 801b70e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801b712:	4b70      	ldr	r3, [pc, #448]	; (801b8d4 <_scanf_i+0x1dc>)
 801b714:	69a1      	ldr	r1, [r4, #24]
 801b716:	4a70      	ldr	r2, [pc, #448]	; (801b8d8 <_scanf_i+0x1e0>)
 801b718:	2903      	cmp	r1, #3
 801b71a:	bf18      	it	ne
 801b71c:	461a      	movne	r2, r3
 801b71e:	68a3      	ldr	r3, [r4, #8]
 801b720:	9201      	str	r2, [sp, #4]
 801b722:	1e5a      	subs	r2, r3, #1
 801b724:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b728:	bf88      	it	hi
 801b72a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b72e:	4627      	mov	r7, r4
 801b730:	bf82      	ittt	hi
 801b732:	eb03 0905 	addhi.w	r9, r3, r5
 801b736:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b73a:	60a3      	strhi	r3, [r4, #8]
 801b73c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801b740:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801b744:	bf98      	it	ls
 801b746:	f04f 0900 	movls.w	r9, #0
 801b74a:	6023      	str	r3, [r4, #0]
 801b74c:	463d      	mov	r5, r7
 801b74e:	f04f 0b00 	mov.w	fp, #0
 801b752:	6831      	ldr	r1, [r6, #0]
 801b754:	ab03      	add	r3, sp, #12
 801b756:	7809      	ldrb	r1, [r1, #0]
 801b758:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801b75c:	2202      	movs	r2, #2
 801b75e:	f7e4 fdef 	bl	8000340 <memchr>
 801b762:	b328      	cbz	r0, 801b7b0 <_scanf_i+0xb8>
 801b764:	f1bb 0f01 	cmp.w	fp, #1
 801b768:	d159      	bne.n	801b81e <_scanf_i+0x126>
 801b76a:	6862      	ldr	r2, [r4, #4]
 801b76c:	b92a      	cbnz	r2, 801b77a <_scanf_i+0x82>
 801b76e:	6822      	ldr	r2, [r4, #0]
 801b770:	2308      	movs	r3, #8
 801b772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b776:	6063      	str	r3, [r4, #4]
 801b778:	6022      	str	r2, [r4, #0]
 801b77a:	6822      	ldr	r2, [r4, #0]
 801b77c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801b780:	6022      	str	r2, [r4, #0]
 801b782:	68a2      	ldr	r2, [r4, #8]
 801b784:	1e51      	subs	r1, r2, #1
 801b786:	60a1      	str	r1, [r4, #8]
 801b788:	b192      	cbz	r2, 801b7b0 <_scanf_i+0xb8>
 801b78a:	6832      	ldr	r2, [r6, #0]
 801b78c:	1c51      	adds	r1, r2, #1
 801b78e:	6031      	str	r1, [r6, #0]
 801b790:	7812      	ldrb	r2, [r2, #0]
 801b792:	f805 2b01 	strb.w	r2, [r5], #1
 801b796:	6872      	ldr	r2, [r6, #4]
 801b798:	3a01      	subs	r2, #1
 801b79a:	2a00      	cmp	r2, #0
 801b79c:	6072      	str	r2, [r6, #4]
 801b79e:	dc07      	bgt.n	801b7b0 <_scanf_i+0xb8>
 801b7a0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801b7a4:	4631      	mov	r1, r6
 801b7a6:	4650      	mov	r0, sl
 801b7a8:	4790      	blx	r2
 801b7aa:	2800      	cmp	r0, #0
 801b7ac:	f040 8085 	bne.w	801b8ba <_scanf_i+0x1c2>
 801b7b0:	f10b 0b01 	add.w	fp, fp, #1
 801b7b4:	f1bb 0f03 	cmp.w	fp, #3
 801b7b8:	d1cb      	bne.n	801b752 <_scanf_i+0x5a>
 801b7ba:	6863      	ldr	r3, [r4, #4]
 801b7bc:	b90b      	cbnz	r3, 801b7c2 <_scanf_i+0xca>
 801b7be:	230a      	movs	r3, #10
 801b7c0:	6063      	str	r3, [r4, #4]
 801b7c2:	6863      	ldr	r3, [r4, #4]
 801b7c4:	4945      	ldr	r1, [pc, #276]	; (801b8dc <_scanf_i+0x1e4>)
 801b7c6:	6960      	ldr	r0, [r4, #20]
 801b7c8:	1ac9      	subs	r1, r1, r3
 801b7ca:	f000 f889 	bl	801b8e0 <__sccl>
 801b7ce:	f04f 0b00 	mov.w	fp, #0
 801b7d2:	68a3      	ldr	r3, [r4, #8]
 801b7d4:	6822      	ldr	r2, [r4, #0]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d03d      	beq.n	801b856 <_scanf_i+0x15e>
 801b7da:	6831      	ldr	r1, [r6, #0]
 801b7dc:	6960      	ldr	r0, [r4, #20]
 801b7de:	f891 c000 	ldrb.w	ip, [r1]
 801b7e2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801b7e6:	2800      	cmp	r0, #0
 801b7e8:	d035      	beq.n	801b856 <_scanf_i+0x15e>
 801b7ea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801b7ee:	d124      	bne.n	801b83a <_scanf_i+0x142>
 801b7f0:	0510      	lsls	r0, r2, #20
 801b7f2:	d522      	bpl.n	801b83a <_scanf_i+0x142>
 801b7f4:	f10b 0b01 	add.w	fp, fp, #1
 801b7f8:	f1b9 0f00 	cmp.w	r9, #0
 801b7fc:	d003      	beq.n	801b806 <_scanf_i+0x10e>
 801b7fe:	3301      	adds	r3, #1
 801b800:	f109 39ff 	add.w	r9, r9, #4294967295
 801b804:	60a3      	str	r3, [r4, #8]
 801b806:	6873      	ldr	r3, [r6, #4]
 801b808:	3b01      	subs	r3, #1
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	6073      	str	r3, [r6, #4]
 801b80e:	dd1b      	ble.n	801b848 <_scanf_i+0x150>
 801b810:	6833      	ldr	r3, [r6, #0]
 801b812:	3301      	adds	r3, #1
 801b814:	6033      	str	r3, [r6, #0]
 801b816:	68a3      	ldr	r3, [r4, #8]
 801b818:	3b01      	subs	r3, #1
 801b81a:	60a3      	str	r3, [r4, #8]
 801b81c:	e7d9      	b.n	801b7d2 <_scanf_i+0xda>
 801b81e:	f1bb 0f02 	cmp.w	fp, #2
 801b822:	d1ae      	bne.n	801b782 <_scanf_i+0x8a>
 801b824:	6822      	ldr	r2, [r4, #0]
 801b826:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801b82a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801b82e:	d1bf      	bne.n	801b7b0 <_scanf_i+0xb8>
 801b830:	2310      	movs	r3, #16
 801b832:	6063      	str	r3, [r4, #4]
 801b834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b838:	e7a2      	b.n	801b780 <_scanf_i+0x88>
 801b83a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801b83e:	6022      	str	r2, [r4, #0]
 801b840:	780b      	ldrb	r3, [r1, #0]
 801b842:	f805 3b01 	strb.w	r3, [r5], #1
 801b846:	e7de      	b.n	801b806 <_scanf_i+0x10e>
 801b848:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b84c:	4631      	mov	r1, r6
 801b84e:	4650      	mov	r0, sl
 801b850:	4798      	blx	r3
 801b852:	2800      	cmp	r0, #0
 801b854:	d0df      	beq.n	801b816 <_scanf_i+0x11e>
 801b856:	6823      	ldr	r3, [r4, #0]
 801b858:	05d9      	lsls	r1, r3, #23
 801b85a:	d50d      	bpl.n	801b878 <_scanf_i+0x180>
 801b85c:	42bd      	cmp	r5, r7
 801b85e:	d909      	bls.n	801b874 <_scanf_i+0x17c>
 801b860:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801b864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b868:	4632      	mov	r2, r6
 801b86a:	4650      	mov	r0, sl
 801b86c:	4798      	blx	r3
 801b86e:	f105 39ff 	add.w	r9, r5, #4294967295
 801b872:	464d      	mov	r5, r9
 801b874:	42bd      	cmp	r5, r7
 801b876:	d028      	beq.n	801b8ca <_scanf_i+0x1d2>
 801b878:	6822      	ldr	r2, [r4, #0]
 801b87a:	f012 0210 	ands.w	r2, r2, #16
 801b87e:	d113      	bne.n	801b8a8 <_scanf_i+0x1b0>
 801b880:	702a      	strb	r2, [r5, #0]
 801b882:	6863      	ldr	r3, [r4, #4]
 801b884:	9e01      	ldr	r6, [sp, #4]
 801b886:	4639      	mov	r1, r7
 801b888:	4650      	mov	r0, sl
 801b88a:	47b0      	blx	r6
 801b88c:	f8d8 3000 	ldr.w	r3, [r8]
 801b890:	6821      	ldr	r1, [r4, #0]
 801b892:	1d1a      	adds	r2, r3, #4
 801b894:	f8c8 2000 	str.w	r2, [r8]
 801b898:	f011 0f20 	tst.w	r1, #32
 801b89c:	681b      	ldr	r3, [r3, #0]
 801b89e:	d00f      	beq.n	801b8c0 <_scanf_i+0x1c8>
 801b8a0:	6018      	str	r0, [r3, #0]
 801b8a2:	68e3      	ldr	r3, [r4, #12]
 801b8a4:	3301      	adds	r3, #1
 801b8a6:	60e3      	str	r3, [r4, #12]
 801b8a8:	6923      	ldr	r3, [r4, #16]
 801b8aa:	1bed      	subs	r5, r5, r7
 801b8ac:	445d      	add	r5, fp
 801b8ae:	442b      	add	r3, r5
 801b8b0:	6123      	str	r3, [r4, #16]
 801b8b2:	2000      	movs	r0, #0
 801b8b4:	b007      	add	sp, #28
 801b8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8ba:	f04f 0b00 	mov.w	fp, #0
 801b8be:	e7ca      	b.n	801b856 <_scanf_i+0x15e>
 801b8c0:	07ca      	lsls	r2, r1, #31
 801b8c2:	bf4c      	ite	mi
 801b8c4:	8018      	strhmi	r0, [r3, #0]
 801b8c6:	6018      	strpl	r0, [r3, #0]
 801b8c8:	e7eb      	b.n	801b8a2 <_scanf_i+0x1aa>
 801b8ca:	2001      	movs	r0, #1
 801b8cc:	e7f2      	b.n	801b8b4 <_scanf_i+0x1bc>
 801b8ce:	bf00      	nop
 801b8d0:	0801bf00 	.word	0x0801bf00
 801b8d4:	0801bc69 	.word	0x0801bc69
 801b8d8:	0801bb81 	.word	0x0801bb81
 801b8dc:	0801c453 	.word	0x0801c453

0801b8e0 <__sccl>:
 801b8e0:	b570      	push	{r4, r5, r6, lr}
 801b8e2:	780b      	ldrb	r3, [r1, #0]
 801b8e4:	4604      	mov	r4, r0
 801b8e6:	2b5e      	cmp	r3, #94	; 0x5e
 801b8e8:	bf0b      	itete	eq
 801b8ea:	784b      	ldrbeq	r3, [r1, #1]
 801b8ec:	1c4a      	addne	r2, r1, #1
 801b8ee:	1c8a      	addeq	r2, r1, #2
 801b8f0:	2100      	movne	r1, #0
 801b8f2:	bf08      	it	eq
 801b8f4:	2101      	moveq	r1, #1
 801b8f6:	3801      	subs	r0, #1
 801b8f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801b8fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 801b900:	42a8      	cmp	r0, r5
 801b902:	d1fb      	bne.n	801b8fc <__sccl+0x1c>
 801b904:	b90b      	cbnz	r3, 801b90a <__sccl+0x2a>
 801b906:	1e50      	subs	r0, r2, #1
 801b908:	bd70      	pop	{r4, r5, r6, pc}
 801b90a:	f081 0101 	eor.w	r1, r1, #1
 801b90e:	54e1      	strb	r1, [r4, r3]
 801b910:	4610      	mov	r0, r2
 801b912:	4602      	mov	r2, r0
 801b914:	f812 5b01 	ldrb.w	r5, [r2], #1
 801b918:	2d2d      	cmp	r5, #45	; 0x2d
 801b91a:	d005      	beq.n	801b928 <__sccl+0x48>
 801b91c:	2d5d      	cmp	r5, #93	; 0x5d
 801b91e:	d016      	beq.n	801b94e <__sccl+0x6e>
 801b920:	2d00      	cmp	r5, #0
 801b922:	d0f1      	beq.n	801b908 <__sccl+0x28>
 801b924:	462b      	mov	r3, r5
 801b926:	e7f2      	b.n	801b90e <__sccl+0x2e>
 801b928:	7846      	ldrb	r6, [r0, #1]
 801b92a:	2e5d      	cmp	r6, #93	; 0x5d
 801b92c:	d0fa      	beq.n	801b924 <__sccl+0x44>
 801b92e:	42b3      	cmp	r3, r6
 801b930:	dcf8      	bgt.n	801b924 <__sccl+0x44>
 801b932:	3002      	adds	r0, #2
 801b934:	461a      	mov	r2, r3
 801b936:	3201      	adds	r2, #1
 801b938:	4296      	cmp	r6, r2
 801b93a:	54a1      	strb	r1, [r4, r2]
 801b93c:	dcfb      	bgt.n	801b936 <__sccl+0x56>
 801b93e:	1af2      	subs	r2, r6, r3
 801b940:	3a01      	subs	r2, #1
 801b942:	1c5d      	adds	r5, r3, #1
 801b944:	42b3      	cmp	r3, r6
 801b946:	bfa8      	it	ge
 801b948:	2200      	movge	r2, #0
 801b94a:	18ab      	adds	r3, r5, r2
 801b94c:	e7e1      	b.n	801b912 <__sccl+0x32>
 801b94e:	4610      	mov	r0, r2
 801b950:	e7da      	b.n	801b908 <__sccl+0x28>

0801b952 <__submore>:
 801b952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b956:	460c      	mov	r4, r1
 801b958:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b95a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b95e:	4299      	cmp	r1, r3
 801b960:	d11d      	bne.n	801b99e <__submore+0x4c>
 801b962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b966:	f7ff f927 	bl	801abb8 <_malloc_r>
 801b96a:	b918      	cbnz	r0, 801b974 <__submore+0x22>
 801b96c:	f04f 30ff 	mov.w	r0, #4294967295
 801b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b978:	63a3      	str	r3, [r4, #56]	; 0x38
 801b97a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801b97e:	6360      	str	r0, [r4, #52]	; 0x34
 801b980:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801b984:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801b988:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801b98c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801b990:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801b994:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801b998:	6020      	str	r0, [r4, #0]
 801b99a:	2000      	movs	r0, #0
 801b99c:	e7e8      	b.n	801b970 <__submore+0x1e>
 801b99e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801b9a0:	0077      	lsls	r7, r6, #1
 801b9a2:	463a      	mov	r2, r7
 801b9a4:	f000 f83a 	bl	801ba1c <_realloc_r>
 801b9a8:	4605      	mov	r5, r0
 801b9aa:	2800      	cmp	r0, #0
 801b9ac:	d0de      	beq.n	801b96c <__submore+0x1a>
 801b9ae:	eb00 0806 	add.w	r8, r0, r6
 801b9b2:	4601      	mov	r1, r0
 801b9b4:	4632      	mov	r2, r6
 801b9b6:	4640      	mov	r0, r8
 801b9b8:	f7ff f884 	bl	801aac4 <memcpy>
 801b9bc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801b9c0:	f8c4 8000 	str.w	r8, [r4]
 801b9c4:	e7e9      	b.n	801b99a <__submore+0x48>

0801b9c6 <memmove>:
 801b9c6:	4288      	cmp	r0, r1
 801b9c8:	b510      	push	{r4, lr}
 801b9ca:	eb01 0402 	add.w	r4, r1, r2
 801b9ce:	d902      	bls.n	801b9d6 <memmove+0x10>
 801b9d0:	4284      	cmp	r4, r0
 801b9d2:	4623      	mov	r3, r4
 801b9d4:	d807      	bhi.n	801b9e6 <memmove+0x20>
 801b9d6:	1e43      	subs	r3, r0, #1
 801b9d8:	42a1      	cmp	r1, r4
 801b9da:	d008      	beq.n	801b9ee <memmove+0x28>
 801b9dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b9e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b9e4:	e7f8      	b.n	801b9d8 <memmove+0x12>
 801b9e6:	4402      	add	r2, r0
 801b9e8:	4601      	mov	r1, r0
 801b9ea:	428a      	cmp	r2, r1
 801b9ec:	d100      	bne.n	801b9f0 <memmove+0x2a>
 801b9ee:	bd10      	pop	{r4, pc}
 801b9f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b9f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b9f8:	e7f7      	b.n	801b9ea <memmove+0x24>
	...

0801b9fc <_sbrk_r>:
 801b9fc:	b538      	push	{r3, r4, r5, lr}
 801b9fe:	4d06      	ldr	r5, [pc, #24]	; (801ba18 <_sbrk_r+0x1c>)
 801ba00:	2300      	movs	r3, #0
 801ba02:	4604      	mov	r4, r0
 801ba04:	4608      	mov	r0, r1
 801ba06:	602b      	str	r3, [r5, #0]
 801ba08:	f7e7 ffc4 	bl	8003994 <_sbrk>
 801ba0c:	1c43      	adds	r3, r0, #1
 801ba0e:	d102      	bne.n	801ba16 <_sbrk_r+0x1a>
 801ba10:	682b      	ldr	r3, [r5, #0]
 801ba12:	b103      	cbz	r3, 801ba16 <_sbrk_r+0x1a>
 801ba14:	6023      	str	r3, [r4, #0]
 801ba16:	bd38      	pop	{r3, r4, r5, pc}
 801ba18:	240034a4 	.word	0x240034a4

0801ba1c <_realloc_r>:
 801ba1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba20:	4680      	mov	r8, r0
 801ba22:	4614      	mov	r4, r2
 801ba24:	460e      	mov	r6, r1
 801ba26:	b921      	cbnz	r1, 801ba32 <_realloc_r+0x16>
 801ba28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba2c:	4611      	mov	r1, r2
 801ba2e:	f7ff b8c3 	b.w	801abb8 <_malloc_r>
 801ba32:	b92a      	cbnz	r2, 801ba40 <_realloc_r+0x24>
 801ba34:	f7ff f854 	bl	801aae0 <_free_r>
 801ba38:	4625      	mov	r5, r4
 801ba3a:	4628      	mov	r0, r5
 801ba3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba40:	f000 f914 	bl	801bc6c <_malloc_usable_size_r>
 801ba44:	4284      	cmp	r4, r0
 801ba46:	4607      	mov	r7, r0
 801ba48:	d802      	bhi.n	801ba50 <_realloc_r+0x34>
 801ba4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ba4e:	d812      	bhi.n	801ba76 <_realloc_r+0x5a>
 801ba50:	4621      	mov	r1, r4
 801ba52:	4640      	mov	r0, r8
 801ba54:	f7ff f8b0 	bl	801abb8 <_malloc_r>
 801ba58:	4605      	mov	r5, r0
 801ba5a:	2800      	cmp	r0, #0
 801ba5c:	d0ed      	beq.n	801ba3a <_realloc_r+0x1e>
 801ba5e:	42bc      	cmp	r4, r7
 801ba60:	4622      	mov	r2, r4
 801ba62:	4631      	mov	r1, r6
 801ba64:	bf28      	it	cs
 801ba66:	463a      	movcs	r2, r7
 801ba68:	f7ff f82c 	bl	801aac4 <memcpy>
 801ba6c:	4631      	mov	r1, r6
 801ba6e:	4640      	mov	r0, r8
 801ba70:	f7ff f836 	bl	801aae0 <_free_r>
 801ba74:	e7e1      	b.n	801ba3a <_realloc_r+0x1e>
 801ba76:	4635      	mov	r5, r6
 801ba78:	e7df      	b.n	801ba3a <_realloc_r+0x1e>
	...

0801ba7c <_strtol_l.constprop.0>:
 801ba7c:	2b01      	cmp	r3, #1
 801ba7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba82:	d001      	beq.n	801ba88 <_strtol_l.constprop.0+0xc>
 801ba84:	2b24      	cmp	r3, #36	; 0x24
 801ba86:	d906      	bls.n	801ba96 <_strtol_l.constprop.0+0x1a>
 801ba88:	f7fe ffe8 	bl	801aa5c <__errno>
 801ba8c:	2316      	movs	r3, #22
 801ba8e:	6003      	str	r3, [r0, #0]
 801ba90:	2000      	movs	r0, #0
 801ba92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801bb7c <_strtol_l.constprop.0+0x100>
 801ba9a:	460d      	mov	r5, r1
 801ba9c:	462e      	mov	r6, r5
 801ba9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801baa2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801baa6:	f017 0708 	ands.w	r7, r7, #8
 801baaa:	d1f7      	bne.n	801ba9c <_strtol_l.constprop.0+0x20>
 801baac:	2c2d      	cmp	r4, #45	; 0x2d
 801baae:	d132      	bne.n	801bb16 <_strtol_l.constprop.0+0x9a>
 801bab0:	782c      	ldrb	r4, [r5, #0]
 801bab2:	2701      	movs	r7, #1
 801bab4:	1cb5      	adds	r5, r6, #2
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d05b      	beq.n	801bb72 <_strtol_l.constprop.0+0xf6>
 801baba:	2b10      	cmp	r3, #16
 801babc:	d109      	bne.n	801bad2 <_strtol_l.constprop.0+0x56>
 801babe:	2c30      	cmp	r4, #48	; 0x30
 801bac0:	d107      	bne.n	801bad2 <_strtol_l.constprop.0+0x56>
 801bac2:	782c      	ldrb	r4, [r5, #0]
 801bac4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801bac8:	2c58      	cmp	r4, #88	; 0x58
 801baca:	d14d      	bne.n	801bb68 <_strtol_l.constprop.0+0xec>
 801bacc:	786c      	ldrb	r4, [r5, #1]
 801bace:	2310      	movs	r3, #16
 801bad0:	3502      	adds	r5, #2
 801bad2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801bad6:	f108 38ff 	add.w	r8, r8, #4294967295
 801bada:	f04f 0e00 	mov.w	lr, #0
 801bade:	fbb8 f9f3 	udiv	r9, r8, r3
 801bae2:	4676      	mov	r6, lr
 801bae4:	fb03 8a19 	mls	sl, r3, r9, r8
 801bae8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801baec:	f1bc 0f09 	cmp.w	ip, #9
 801baf0:	d816      	bhi.n	801bb20 <_strtol_l.constprop.0+0xa4>
 801baf2:	4664      	mov	r4, ip
 801baf4:	42a3      	cmp	r3, r4
 801baf6:	dd24      	ble.n	801bb42 <_strtol_l.constprop.0+0xc6>
 801baf8:	f1be 3fff 	cmp.w	lr, #4294967295
 801bafc:	d008      	beq.n	801bb10 <_strtol_l.constprop.0+0x94>
 801bafe:	45b1      	cmp	r9, r6
 801bb00:	d31c      	bcc.n	801bb3c <_strtol_l.constprop.0+0xc0>
 801bb02:	d101      	bne.n	801bb08 <_strtol_l.constprop.0+0x8c>
 801bb04:	45a2      	cmp	sl, r4
 801bb06:	db19      	blt.n	801bb3c <_strtol_l.constprop.0+0xc0>
 801bb08:	fb06 4603 	mla	r6, r6, r3, r4
 801bb0c:	f04f 0e01 	mov.w	lr, #1
 801bb10:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bb14:	e7e8      	b.n	801bae8 <_strtol_l.constprop.0+0x6c>
 801bb16:	2c2b      	cmp	r4, #43	; 0x2b
 801bb18:	bf04      	itt	eq
 801bb1a:	782c      	ldrbeq	r4, [r5, #0]
 801bb1c:	1cb5      	addeq	r5, r6, #2
 801bb1e:	e7ca      	b.n	801bab6 <_strtol_l.constprop.0+0x3a>
 801bb20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801bb24:	f1bc 0f19 	cmp.w	ip, #25
 801bb28:	d801      	bhi.n	801bb2e <_strtol_l.constprop.0+0xb2>
 801bb2a:	3c37      	subs	r4, #55	; 0x37
 801bb2c:	e7e2      	b.n	801baf4 <_strtol_l.constprop.0+0x78>
 801bb2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801bb32:	f1bc 0f19 	cmp.w	ip, #25
 801bb36:	d804      	bhi.n	801bb42 <_strtol_l.constprop.0+0xc6>
 801bb38:	3c57      	subs	r4, #87	; 0x57
 801bb3a:	e7db      	b.n	801baf4 <_strtol_l.constprop.0+0x78>
 801bb3c:	f04f 3eff 	mov.w	lr, #4294967295
 801bb40:	e7e6      	b.n	801bb10 <_strtol_l.constprop.0+0x94>
 801bb42:	f1be 3fff 	cmp.w	lr, #4294967295
 801bb46:	d105      	bne.n	801bb54 <_strtol_l.constprop.0+0xd8>
 801bb48:	2322      	movs	r3, #34	; 0x22
 801bb4a:	6003      	str	r3, [r0, #0]
 801bb4c:	4646      	mov	r6, r8
 801bb4e:	b942      	cbnz	r2, 801bb62 <_strtol_l.constprop.0+0xe6>
 801bb50:	4630      	mov	r0, r6
 801bb52:	e79e      	b.n	801ba92 <_strtol_l.constprop.0+0x16>
 801bb54:	b107      	cbz	r7, 801bb58 <_strtol_l.constprop.0+0xdc>
 801bb56:	4276      	negs	r6, r6
 801bb58:	2a00      	cmp	r2, #0
 801bb5a:	d0f9      	beq.n	801bb50 <_strtol_l.constprop.0+0xd4>
 801bb5c:	f1be 0f00 	cmp.w	lr, #0
 801bb60:	d000      	beq.n	801bb64 <_strtol_l.constprop.0+0xe8>
 801bb62:	1e69      	subs	r1, r5, #1
 801bb64:	6011      	str	r1, [r2, #0]
 801bb66:	e7f3      	b.n	801bb50 <_strtol_l.constprop.0+0xd4>
 801bb68:	2430      	movs	r4, #48	; 0x30
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d1b1      	bne.n	801bad2 <_strtol_l.constprop.0+0x56>
 801bb6e:	2308      	movs	r3, #8
 801bb70:	e7af      	b.n	801bad2 <_strtol_l.constprop.0+0x56>
 801bb72:	2c30      	cmp	r4, #48	; 0x30
 801bb74:	d0a5      	beq.n	801bac2 <_strtol_l.constprop.0+0x46>
 801bb76:	230a      	movs	r3, #10
 801bb78:	e7ab      	b.n	801bad2 <_strtol_l.constprop.0+0x56>
 801bb7a:	bf00      	nop
 801bb7c:	0801c45f 	.word	0x0801c45f

0801bb80 <_strtol_r>:
 801bb80:	f7ff bf7c 	b.w	801ba7c <_strtol_l.constprop.0>

0801bb84 <_strtoul_l.constprop.0>:
 801bb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb88:	4f36      	ldr	r7, [pc, #216]	; (801bc64 <_strtoul_l.constprop.0+0xe0>)
 801bb8a:	4686      	mov	lr, r0
 801bb8c:	460d      	mov	r5, r1
 801bb8e:	4628      	mov	r0, r5
 801bb90:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bb94:	5d3e      	ldrb	r6, [r7, r4]
 801bb96:	f016 0608 	ands.w	r6, r6, #8
 801bb9a:	d1f8      	bne.n	801bb8e <_strtoul_l.constprop.0+0xa>
 801bb9c:	2c2d      	cmp	r4, #45	; 0x2d
 801bb9e:	d130      	bne.n	801bc02 <_strtoul_l.constprop.0+0x7e>
 801bba0:	782c      	ldrb	r4, [r5, #0]
 801bba2:	2601      	movs	r6, #1
 801bba4:	1c85      	adds	r5, r0, #2
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d057      	beq.n	801bc5a <_strtoul_l.constprop.0+0xd6>
 801bbaa:	2b10      	cmp	r3, #16
 801bbac:	d109      	bne.n	801bbc2 <_strtoul_l.constprop.0+0x3e>
 801bbae:	2c30      	cmp	r4, #48	; 0x30
 801bbb0:	d107      	bne.n	801bbc2 <_strtoul_l.constprop.0+0x3e>
 801bbb2:	7828      	ldrb	r0, [r5, #0]
 801bbb4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bbb8:	2858      	cmp	r0, #88	; 0x58
 801bbba:	d149      	bne.n	801bc50 <_strtoul_l.constprop.0+0xcc>
 801bbbc:	786c      	ldrb	r4, [r5, #1]
 801bbbe:	2310      	movs	r3, #16
 801bbc0:	3502      	adds	r5, #2
 801bbc2:	f04f 38ff 	mov.w	r8, #4294967295
 801bbc6:	2700      	movs	r7, #0
 801bbc8:	fbb8 f8f3 	udiv	r8, r8, r3
 801bbcc:	fb03 f908 	mul.w	r9, r3, r8
 801bbd0:	ea6f 0909 	mvn.w	r9, r9
 801bbd4:	4638      	mov	r0, r7
 801bbd6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801bbda:	f1bc 0f09 	cmp.w	ip, #9
 801bbde:	d815      	bhi.n	801bc0c <_strtoul_l.constprop.0+0x88>
 801bbe0:	4664      	mov	r4, ip
 801bbe2:	42a3      	cmp	r3, r4
 801bbe4:	dd23      	ble.n	801bc2e <_strtoul_l.constprop.0+0xaa>
 801bbe6:	f1b7 3fff 	cmp.w	r7, #4294967295
 801bbea:	d007      	beq.n	801bbfc <_strtoul_l.constprop.0+0x78>
 801bbec:	4580      	cmp	r8, r0
 801bbee:	d31b      	bcc.n	801bc28 <_strtoul_l.constprop.0+0xa4>
 801bbf0:	d101      	bne.n	801bbf6 <_strtoul_l.constprop.0+0x72>
 801bbf2:	45a1      	cmp	r9, r4
 801bbf4:	db18      	blt.n	801bc28 <_strtoul_l.constprop.0+0xa4>
 801bbf6:	fb00 4003 	mla	r0, r0, r3, r4
 801bbfa:	2701      	movs	r7, #1
 801bbfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bc00:	e7e9      	b.n	801bbd6 <_strtoul_l.constprop.0+0x52>
 801bc02:	2c2b      	cmp	r4, #43	; 0x2b
 801bc04:	bf04      	itt	eq
 801bc06:	782c      	ldrbeq	r4, [r5, #0]
 801bc08:	1c85      	addeq	r5, r0, #2
 801bc0a:	e7cc      	b.n	801bba6 <_strtoul_l.constprop.0+0x22>
 801bc0c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801bc10:	f1bc 0f19 	cmp.w	ip, #25
 801bc14:	d801      	bhi.n	801bc1a <_strtoul_l.constprop.0+0x96>
 801bc16:	3c37      	subs	r4, #55	; 0x37
 801bc18:	e7e3      	b.n	801bbe2 <_strtoul_l.constprop.0+0x5e>
 801bc1a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801bc1e:	f1bc 0f19 	cmp.w	ip, #25
 801bc22:	d804      	bhi.n	801bc2e <_strtoul_l.constprop.0+0xaa>
 801bc24:	3c57      	subs	r4, #87	; 0x57
 801bc26:	e7dc      	b.n	801bbe2 <_strtoul_l.constprop.0+0x5e>
 801bc28:	f04f 37ff 	mov.w	r7, #4294967295
 801bc2c:	e7e6      	b.n	801bbfc <_strtoul_l.constprop.0+0x78>
 801bc2e:	1c7b      	adds	r3, r7, #1
 801bc30:	d106      	bne.n	801bc40 <_strtoul_l.constprop.0+0xbc>
 801bc32:	2322      	movs	r3, #34	; 0x22
 801bc34:	f8ce 3000 	str.w	r3, [lr]
 801bc38:	4638      	mov	r0, r7
 801bc3a:	b932      	cbnz	r2, 801bc4a <_strtoul_l.constprop.0+0xc6>
 801bc3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc40:	b106      	cbz	r6, 801bc44 <_strtoul_l.constprop.0+0xc0>
 801bc42:	4240      	negs	r0, r0
 801bc44:	2a00      	cmp	r2, #0
 801bc46:	d0f9      	beq.n	801bc3c <_strtoul_l.constprop.0+0xb8>
 801bc48:	b107      	cbz	r7, 801bc4c <_strtoul_l.constprop.0+0xc8>
 801bc4a:	1e69      	subs	r1, r5, #1
 801bc4c:	6011      	str	r1, [r2, #0]
 801bc4e:	e7f5      	b.n	801bc3c <_strtoul_l.constprop.0+0xb8>
 801bc50:	2430      	movs	r4, #48	; 0x30
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d1b5      	bne.n	801bbc2 <_strtoul_l.constprop.0+0x3e>
 801bc56:	2308      	movs	r3, #8
 801bc58:	e7b3      	b.n	801bbc2 <_strtoul_l.constprop.0+0x3e>
 801bc5a:	2c30      	cmp	r4, #48	; 0x30
 801bc5c:	d0a9      	beq.n	801bbb2 <_strtoul_l.constprop.0+0x2e>
 801bc5e:	230a      	movs	r3, #10
 801bc60:	e7af      	b.n	801bbc2 <_strtoul_l.constprop.0+0x3e>
 801bc62:	bf00      	nop
 801bc64:	0801c45f 	.word	0x0801c45f

0801bc68 <_strtoul_r>:
 801bc68:	f7ff bf8c 	b.w	801bb84 <_strtoul_l.constprop.0>

0801bc6c <_malloc_usable_size_r>:
 801bc6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc70:	1f18      	subs	r0, r3, #4
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	bfbc      	itt	lt
 801bc76:	580b      	ldrlt	r3, [r1, r0]
 801bc78:	18c0      	addlt	r0, r0, r3
 801bc7a:	4770      	bx	lr

0801bc7c <_init>:
 801bc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc7e:	bf00      	nop
 801bc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc82:	bc08      	pop	{r3}
 801bc84:	469e      	mov	lr, r3
 801bc86:	4770      	bx	lr

0801bc88 <_fini>:
 801bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc8a:	bf00      	nop
 801bc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc8e:	bc08      	pop	{r3}
 801bc90:	469e      	mov	lr, r3
 801bc92:	4770      	bx	lr
